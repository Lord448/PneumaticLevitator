
Motherboard2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080140e8  080140e8  000240e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143a0  080143a0  00030424  2**0
                  CONTENTS
  4 .ARM          00000008  080143a0  080143a0  000243a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143a8  080143a8  00030424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143a8  080143a8  000243a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143ac  080143ac  000243ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  080143b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ce0  20000424  080147d4  00030424  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007104  080147d4  00037104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003290a  00000000  00000000  00030454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000611f  00000000  00000000  00062d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002630  00000000  00000000  00068e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023c0  00000000  00000000  0006b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000987b  00000000  00000000  0006d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fef9  00000000  00000000  000770eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aca50  00000000  00000000  000a6fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153a34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a46c  00000000  00000000  00153a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000424 	.word	0x20000424
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080140d0 	.word	0x080140d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000428 	.word	0x20000428
 80001dc:	080140d0 	.word	0x080140d0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f001 f892 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f8ac 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fbf4 	bl	8000cdc <MX_GPIO_Init>
  MX_DMA_Init();
 80004f4:	f000 fbac 	bl	8000c50 <MX_DMA_Init>
  MX_IWDG_Init();
 80004f8:	f000 f96e 	bl	80007d8 <MX_IWDG_Init>
  MX_RTC_Init();
 80004fc:	f000 f986 	bl	800080c <MX_RTC_Init>
  MX_I2C1_Init();
 8000500:	f000 f90e 	bl	8000720 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000504:	f000 f93a 	bl	800077c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000508:	f000 fb76 	bl	8000bf8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800050c:	f000 fa40 	bl	8000990 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000510:	f000 fab4 	bl	8000a7c <MX_TIM4_Init>
  MX_TIM1_Init();
 8000514:	f000 f9a0 	bl	8000858 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000518:	f000 f9ee 	bl	80008f8 <MX_TIM2_Init>
  MX_TIM5_Init();
 800051c:	f000 fb1e 	bl	8000b5c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f00f fb8c 	bl	800fc3c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphore_PID */
  xSemaphore_PIDHandle = osSemaphoreNew(1, 1, &xSemaphore_PID_attributes);
 8000524:	4a2d      	ldr	r2, [pc, #180]	; (80005dc <main+0xf8>)
 8000526:	2101      	movs	r1, #1
 8000528:	2001      	movs	r0, #1
 800052a:	f00f fcc0 	bl	800feae <osSemaphoreNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <main+0xfc>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of xSemaphore_PID_Init */
  xSemaphore_PID_InitHandle = osSemaphoreNew(1, 1, &xSemaphore_PID_Init_attributes);
 8000534:	4a2b      	ldr	r2, [pc, #172]	; (80005e4 <main+0x100>)
 8000536:	2101      	movs	r1, #1
 8000538:	2001      	movs	r0, #1
 800053a:	f00f fcb8 	bl	800feae <osSemaphoreNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a29      	ldr	r2, [pc, #164]	; (80005e8 <main+0x104>)
 8000542:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of xFIFO_COM */
  xFIFO_COMHandle = osMessageQueueNew (16, sizeof(PDU_t), &xFIFO_COM_attributes);
 8000544:	4a29      	ldr	r2, [pc, #164]	; (80005ec <main+0x108>)
 8000546:	2108      	movs	r1, #8
 8000548:	2010      	movs	r0, #16
 800054a:	f00f fd7d 	bl	8010048 <osMessageQueueNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <main+0x10c>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_Distance */
  xFIFO_DistanceHandle = osMessageQueueNew (4, sizeof(uint16_t), &xFIFO_Distance_attributes);
 8000554:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <main+0x110>)
 8000556:	2102      	movs	r1, #2
 8000558:	2004      	movs	r0, #4
 800055a:	f00f fd75 	bl	8010048 <osMessageQueueNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a25      	ldr	r2, [pc, #148]	; (80005f8 <main+0x114>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_ControlAction */
  xFIFO_ControlActionHandle = osMessageQueueNew (16, sizeof(float), &xFIFO_ControlAction_attributes);
 8000564:	4a25      	ldr	r2, [pc, #148]	; (80005fc <main+0x118>)
 8000566:	2104      	movs	r1, #4
 8000568:	2010      	movs	r0, #16
 800056a:	f00f fd6d 	bl	8010048 <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <main+0x11c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_PIDConfigs */
  xFIFO_PIDConfigsHandle = osMessageQueueNew (16, sizeof(PIDConfigs), &xFIFO_PIDConfigs_attributes);
 8000574:	4a23      	ldr	r2, [pc, #140]	; (8000604 <main+0x120>)
 8000576:	211c      	movs	r1, #28
 8000578:	2010      	movs	r0, #16
 800057a:	f00f fd65 	bl	8010048 <osMessageQueueNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <main+0x124>)
 8000582:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskIdle */
  TaskIdleHandle = osThreadNew(vTaskIdle, NULL, &TaskIdle_attributes);
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <main+0x128>)
 8000586:	2100      	movs	r1, #0
 8000588:	4821      	ldr	r0, [pc, #132]	; (8000610 <main+0x12c>)
 800058a:	f00f fbb6 	bl	800fcfa <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a20      	ldr	r2, [pc, #128]	; (8000614 <main+0x130>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of TaskModeManager */
  TaskModeManagerHandle = osThreadNew(vTaskModeManager, NULL, &TaskModeManager_attributes);
 8000594:	4a20      	ldr	r2, [pc, #128]	; (8000618 <main+0x134>)
 8000596:	2100      	movs	r1, #0
 8000598:	4820      	ldr	r0, [pc, #128]	; (800061c <main+0x138>)
 800059a:	f00f fbae 	bl	800fcfa <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <main+0x13c>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of TaskPID */
  TaskPIDHandle = osThreadNew(vTaskPID, NULL, &TaskPID_attributes);
 80005a4:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <main+0x140>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	481f      	ldr	r0, [pc, #124]	; (8000628 <main+0x144>)
 80005aa:	f00f fba6 	bl	800fcfa <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a1e      	ldr	r2, [pc, #120]	; (800062c <main+0x148>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of TaskCOM */
  TaskCOMHandle = osThreadNew(vTaskCOM, NULL, &TaskCOM_attributes);
 80005b4:	4a1e      	ldr	r2, [pc, #120]	; (8000630 <main+0x14c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	481e      	ldr	r0, [pc, #120]	; (8000634 <main+0x150>)
 80005ba:	f00f fb9e 	bl	800fcfa <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <main+0x154>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of TaskSensorActua */
  TaskSensorActuaHandle = osThreadNew(vTaskSensorActuator, NULL, &TaskSensorActua_attributes);
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <main+0x158>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	481d      	ldr	r0, [pc, #116]	; (8000640 <main+0x15c>)
 80005ca:	f00f fb96 	bl	800fcfa <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <main+0x160>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f00f fb56 	bl	800fc84 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0xf4>
 80005da:	bf00      	nop
 80005dc:	08014300 	.word	0x08014300
 80005e0:	20000864 	.word	0x20000864
 80005e4:	08014310 	.word	0x08014310
 80005e8:	20000868 	.word	0x20000868
 80005ec:	080142a0 	.word	0x080142a0
 80005f0:	20000854 	.word	0x20000854
 80005f4:	080142b8 	.word	0x080142b8
 80005f8:	20000858 	.word	0x20000858
 80005fc:	080142d0 	.word	0x080142d0
 8000600:	2000085c 	.word	0x2000085c
 8000604:	080142e8 	.word	0x080142e8
 8000608:	20000860 	.word	0x20000860
 800060c:	080141ec 	.word	0x080141ec
 8000610:	08000e0d 	.word	0x08000e0d
 8000614:	20000840 	.word	0x20000840
 8000618:	08014210 	.word	0x08014210
 800061c:	08000e21 	.word	0x08000e21
 8000620:	20000844 	.word	0x20000844
 8000624:	08014234 	.word	0x08014234
 8000628:	08000e35 	.word	0x08000e35
 800062c:	20000848 	.word	0x20000848
 8000630:	08014258 	.word	0x08014258
 8000634:	08000e49 	.word	0x08000e49
 8000638:	2000084c 	.word	0x2000084c
 800063c:	0801427c 	.word	0x0801427c
 8000640:	08000e5d 	.word	0x08000e5d
 8000644:	20000850 	.word	0x20000850

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f013 fc68 	bl	8013f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <SystemClock_Config+0xd4>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80006a4:	230d      	movs	r3, #13
 80006a6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ae:	2301      	movs	r3, #1
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006c0:	2319      	movs	r3, #25
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006c4:	23c0      	movs	r3, #192	; 0xc0
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 f8b1 	bl	800483c <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e0:	f000 fbe6 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2103      	movs	r1, #3
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fb13 	bl	8004d2c <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800070c:	f000 fbd0 	bl	8000eb0 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	; 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2C1_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_I2C1_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2C1_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_I2C1_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_I2C1_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_I2C1_Init+0x50>)
 800075e:	f001 fe19 	bl	8002394 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 fba2 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000440 	.word	0x20000440
 8000774:	40005400 	.word	0x40005400
 8000778:	00061a80 	.word	0x00061a80

0800077c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C2_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_I2C2_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C2_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_I2C2_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C2_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2C2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_I2C2_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2C2_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2C2_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_I2C2_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2C2_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C2_Init+0x50>)
 80007ba:	f001 fdeb 	bl	8002394 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 fb74 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000494 	.word	0x20000494
 80007d0:	40005800 	.word	0x40005800
 80007d4:	00061a80 	.word	0x00061a80

080007d8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_IWDG_Init+0x2c>)
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <MX_IWDG_Init+0x30>)
 80007e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_IWDG_Init+0x2c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_IWDG_Init+0x2c>)
 80007ea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80007ee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_IWDG_Init+0x2c>)
 80007f2:	f002 fd64 	bl	80032be <HAL_IWDG_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80007fc:	f000 fb58 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200005a8 	.word	0x200005a8
 8000808:	40003000 	.word	0x40003000

0800080c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_RTC_Init+0x44>)
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <MX_RTC_Init+0x48>)
 8000814:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_RTC_Init+0x44>)
 8000818:	2240      	movs	r2, #64	; 0x40
 800081a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_RTC_Init+0x44>)
 800081e:	227f      	movs	r2, #127	; 0x7f
 8000820:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_RTC_Init+0x44>)
 8000824:	22ff      	movs	r2, #255	; 0xff
 8000826:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_RTC_Init+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_RTC_Init+0x44>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_RTC_Init+0x44>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_RTC_Init+0x44>)
 800083c:	f004 fd46 	bl	80052cc <HAL_RTC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000846:	f000 fb33 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200005b4 	.word	0x200005b4
 8000854:	40002800 	.word	0x40002800

08000858 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_TIM1_Init+0x98>)
 8000876:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <MX_TIM1_Init+0x9c>)
 8000878:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM1_Init+0x98>)
 800087c:	2202      	movs	r2, #2
 800087e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM1_Init+0x98>)
 8000888:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800088c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_TIM1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_TIM1_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_TIM1_Init+0x98>)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_TIM1_Init+0x98>)
 80008a2:	f004 fe0d 	bl	80054c0 <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 fb00 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_TIM1_Init+0x98>)
 80008be:	f005 f967 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008c8:	f000 faf2 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM1_Init+0x98>)
 80008da:	f005 fe17 	bl	800650c <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008e4:	f000 fae4 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200005d4 	.word	0x200005d4
 80008f4:	40010000 	.word	0x40010000

080008f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_TIM2_Init+0x94>)
 8000916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_TIM2_Init+0x94>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_TIM2_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_TIM2_Init+0x94>)
 800092a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800092e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_TIM2_Init+0x94>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_TIM2_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <MX_TIM2_Init+0x94>)
 800093e:	f004 fdbf 	bl	80054c0 <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000948:	f000 fab2 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	4619      	mov	r1, r3
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <MX_TIM2_Init+0x94>)
 800095a:	f005 f919 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000964:	f000 faa4 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_TIM2_Init+0x94>)
 8000976:	f005 fdc9 	bl	800650c <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000980:	f000 fa96 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000061c 	.word	0x2000061c

08000990 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	; 0x38
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	615a      	str	r2, [r3, #20]
 80009be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c0:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <MX_TIM3_Init+0xe4>)
 80009c2:	4a2d      	ldr	r2, [pc, #180]	; (8000a78 <MX_TIM3_Init+0xe8>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <MX_TIM3_Init+0xe4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_TIM3_Init+0xe4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_TIM3_Init+0xe4>)
 80009d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_TIM3_Init+0xe4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <MX_TIM3_Init+0xe4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009e6:	4823      	ldr	r0, [pc, #140]	; (8000a74 <MX_TIM3_Init+0xe4>)
 80009e8:	f004 fd6a 	bl	80054c0 <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009f2:	f000 fa5d 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481c      	ldr	r0, [pc, #112]	; (8000a74 <MX_TIM3_Init+0xe4>)
 8000a04:	f005 f8c4 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a0e:	f000 fa4f 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <MX_TIM3_Init+0xe4>)
 8000a14:	f004 fda3 	bl	800555e <HAL_TIM_PWM_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a1e:	f000 fa47 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4810      	ldr	r0, [pc, #64]	; (8000a74 <MX_TIM3_Init+0xe4>)
 8000a32:	f005 fd6b 	bl	800650c <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a3c:	f000 fa38 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a40:	2360      	movs	r3, #96	; 0x60
 8000a42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MX_TIM3_Init+0xe4>)
 8000a58:	f004 ffd8 	bl	8005a0c <HAL_TIM_PWM_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a62:	f000 fa25 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <MX_TIM3_Init+0xe4>)
 8000a68:	f000 fc28 	bl	80012bc <HAL_TIM_MspPostInit>

}
 8000a6c:	bf00      	nop
 8000a6e:	3738      	adds	r7, #56	; 0x38
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000664 	.word	0x20000664
 8000a78:	40000400 	.word	0x40000400

08000a7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000aa8:	4a2b      	ldr	r2, [pc, #172]	; (8000b58 <MX_TIM4_Init+0xdc>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000abe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000acc:	4821      	ldr	r0, [pc, #132]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000ace:	f004 fcf7 	bl	80054c0 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000ad8:	f000 f9ea 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481a      	ldr	r0, [pc, #104]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000aea:	f005 f851 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 f9dc 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000af8:	4816      	ldr	r0, [pc, #88]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000afa:	f004 fd89 	bl	8005610 <HAL_TIM_IC_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f000 f9d4 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	480f      	ldr	r0, [pc, #60]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000b18:	f005 fcf8 	bl	800650c <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000b22:	f000 f9c5 	bl	8000eb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_TIM4_Init+0xd8>)
 8000b3e:	f004 fec8 	bl	80058d2 <HAL_TIM_IC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000b48:	f000 f9b2 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200006ac 	.word	0x200006ac
 8000b58:	40000800 	.word	0x40000800

08000b5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <MX_TIM5_Init+0x98>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 14;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b80:	220e      	movs	r2, #14
 8000b82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 63999;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b8c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000ba0:	f004 fc8e 	bl	80054c0 <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000baa:	f000 f981 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000bbc:	f004 ffe8 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 f973 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_TIM5_Init+0x94>)
 8000bd8:	f005 fc98 	bl	800650c <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000be2:	f000 f965 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200006f4 	.word	0x200006f4
 8000bf4:	40000c00 	.word	0x40000c00

08000bf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x54>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c04:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c10:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART1_UART_Init+0x50>)
 8000c34:	f005 fcec 	bl	8006610 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000c3e:	f000 f937 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000073c 	.word	0x2000073c
 8000c4c:	40011000 	.word	0x40011000

08000c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_DMA_Init+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <MX_DMA_Init+0x88>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_DMA_Init+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_DMA_Init+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <MX_DMA_Init+0x88>)
 8000c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_DMA_Init+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2105      	movs	r1, #5
 8000c92:	200d      	movs	r0, #13
 8000c94:	f000 fe2d 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c98:	200d      	movs	r0, #13
 8000c9a:	f000 fe46 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	202f      	movs	r0, #47	; 0x2f
 8000ca4:	f000 fe25 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000ca8:	202f      	movs	r0, #47	; 0x2f
 8000caa:	f000 fe3e 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	203a      	movs	r0, #58	; 0x3a
 8000cb4:	f000 fe1d 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cb8:	203a      	movs	r0, #58	; 0x3a
 8000cba:	f000 fe36 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	2046      	movs	r0, #70	; 0x46
 8000cc4:	f000 fe15 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000cc8:	2046      	movs	r0, #70	; 0x46
 8000cca:	f000 fe2e 	bl	800192a <HAL_NVIC_EnableIRQ>

}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a39      	ldr	r2, [pc, #228]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <MX_GPIO_Init+0x120>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OR_GPIO_Port, LED_OR_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d68:	4825      	ldr	r0, [pc, #148]	; (8000e00 <MX_GPIO_Init+0x124>)
 8000d6a:	f001 faf9 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPLed1_Pin|GPLed2_Pin|WP_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2198      	movs	r1, #152	; 0x98
 8000d72:	4824      	ldr	r0, [pc, #144]	; (8000e04 <MX_GPIO_Init+0x128>)
 8000d74:	f001 faf4 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EnableFAN_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	21a0      	movs	r1, #160	; 0xa0
 8000d7c:	4822      	ldr	r0, [pc, #136]	; (8000e08 <MX_GPIO_Init+0x12c>)
 8000d7e:	f001 faef 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_OR_Pin */
  GPIO_InitStruct.Pin = LED_OR_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OR_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4819      	ldr	r0, [pc, #100]	; (8000e00 <MX_GPIO_Init+0x124>)
 8000d9c:	f001 f95c 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : DevMode_IT_Pin */
  GPIO_InitStruct.Pin = DevMode_IT_Pin;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DevMode_IT_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4813      	ldr	r0, [pc, #76]	; (8000e04 <MX_GPIO_Init+0x128>)
 8000db6:	f001 f94f 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPLed1_Pin GPLed2_Pin WP_Pin */
  GPIO_InitStruct.Pin = GPLed1_Pin|GPLed2_Pin|WP_Pin;
 8000dba:	2398      	movs	r3, #152	; 0x98
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <MX_GPIO_Init+0x128>)
 8000dd2:	f001 f941 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : EnableFAN_Pin TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = EnableFAN_Pin|TOF_XSHUT_Pin;
 8000dd6:	23a0      	movs	r3, #160	; 0xa0
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_GPIO_Init+0x12c>)
 8000dee:	f001 f933 	bl	8002058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020800 	.word	0x40020800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020400 	.word	0x40020400

08000e0c <vTaskIdle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTaskIdle */
void vTaskIdle(void *argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e14:	f012 fb4a 	bl	80134ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f00f f800 	bl	800fe1e <osDelay>
 8000e1e:	e7fb      	b.n	8000e18 <vTaskIdle+0xc>

08000e20 <vTaskModeManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskModeManager */
void vTaskModeManager(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskModeManager */
  vTaskModeManager_Runnable();
 8000e28:	f012 fa36 	bl	8013298 <vTaskModeManager_Runnable>
  /* USER CODE END vTaskModeManager */
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <vTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskPID */
void vTaskPID(void *argument)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskPID */
  vTaskPID_Runnable();
 8000e3c:	f012 fa3a 	bl	80132b4 <vTaskPID_Runnable>
  /* USER CODE END vTaskPID */
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <vTaskCOM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskCOM */
void vTaskCOM(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskCOM */
	vTaskCOM_Runnable();
 8000e50:	f012 f93c 	bl	80130cc <vTaskCOM_Runnable>
  /* USER CODE END vTaskCOM */
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <vTaskSensorActuator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskSensorActuator */
void vTaskSensorActuator(void *argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskSensorActuator */
	const uint32_t taskResolutionMS = 10;
 8000e64:	230a      	movs	r3, #10
 8000e66:	60bb      	str	r3, [r7, #8]
	uint32_t tick;

	DistanceSensor_Init();
 8000e68:	f012 f934 	bl	80130d4 <DistanceSensor_Init>
	FAN_Init();
 8000e6c:	f012 fa06 	bl	801327c <FAN_Init>
	tick = osKernelGetTickCount();
 8000e70:	f00e ff2e 	bl	800fcd0 <osKernelGetTickCount>
 8000e74:	60f8      	str	r0, [r7, #12]
  for(;;)
  {
  	DistanceSensor_MainRunnable();
 8000e76:	f012 f9ab 	bl	80131d0 <DistanceSensor_MainRunnable>
  	FAN_MainRunnable();
 8000e7a:	f012 fa06 	bl	801328a <FAN_MainRunnable>
  	osSemaphoreRelease(xSemaphore_PIDHandle);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <vTaskSensorActuator+0x4c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f00f f89c 	bl	800ffc0 <osSemaphoreRelease>

  	/*Parsed Loop Handling with 10ms resolution*/
  	tick += pdMS_TO_TICKS(taskResolutionMS);
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e8e:	fb02 f303 	mul.w	r3, r2, r3
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <vTaskSensorActuator+0x50>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	099b      	lsrs	r3, r3, #6
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]
  	osDelayUntil(tick);
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f00e ffd7 	bl	800fe54 <osDelayUntil>
  	DistanceSensor_MainRunnable();
 8000ea6:	e7e6      	b.n	8000e76 <vTaskSensorActuator+0x1a>
 8000ea8:	20000864 	.word	0x20000864
 8000eac:	10624dd3 	.word	0x10624dd3

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_MspInit+0x54>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <HAL_MspInit+0x54>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x54>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_MspInit+0x54>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_MspInit+0x54>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_MspInit+0x54>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	210f      	movs	r1, #15
 8000efe:	f06f 0001 	mvn.w	r0, #1
 8000f02:	f000 fcf6 	bl	80018f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a69      	ldr	r2, [pc, #420]	; (80010d8 <HAL_I2C_MspInit+0x1c4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12d      	bne.n	8000f92 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b68      	ldr	r3, [pc, #416]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a67      	ldr	r2, [pc, #412]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b65      	ldr	r3, [pc, #404]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f64:	2304      	movs	r3, #4
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	485c      	ldr	r0, [pc, #368]	; (80010e0 <HAL_I2C_MspInit+0x1cc>)
 8000f70:	f001 f872 	bl	8002058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	4b58      	ldr	r3, [pc, #352]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a57      	ldr	r2, [pc, #348]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b55      	ldr	r3, [pc, #340]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f90:	e09e      	b.n	80010d0 <HAL_I2C_MspInit+0x1bc>
  else if(hi2c->Instance==I2C2)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a53      	ldr	r2, [pc, #332]	; (80010e4 <HAL_I2C_MspInit+0x1d0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	f040 8099 	bne.w	80010d0 <HAL_I2C_MspInit+0x1bc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b4e      	ldr	r3, [pc, #312]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc0:	2312      	movs	r3, #18
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4842      	ldr	r0, [pc, #264]	; (80010e0 <HAL_I2C_MspInit+0x1cc>)
 8000fd8:	f001 f83e 	bl	8002058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000fec:	2309      	movs	r3, #9
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	483a      	ldr	r0, [pc, #232]	; (80010e0 <HAL_I2C_MspInit+0x1cc>)
 8000ff8:	f001 f82e 	bl	8002058 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4b36      	ldr	r3, [pc, #216]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a35      	ldr	r2, [pc, #212]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 8001006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <HAL_I2C_MspInit+0x1c8>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 800101a:	4a34      	ldr	r2, [pc, #208]	; (80010ec <HAL_I2C_MspInit+0x1d8>)
 800101c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 8001020:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001024:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 8001034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001038:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001058:	4823      	ldr	r0, [pc, #140]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 800105a:	f000 fc81 	bl	8001960 <HAL_DMA_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8001064:	f7ff ff24 	bl	8000eb0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_I2C_MspInit+0x1d4>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 8001076:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <HAL_I2C_MspInit+0x1e0>)
 8001078:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 800107c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001080:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 8001084:	2240      	movs	r2, #64	; 0x40
 8001086:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 8001090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001094:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 80010b6:	f000 fc53 	bl	8001960 <HAL_DMA_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_I2C_MspInit+0x1b0>
      Error_Handler();
 80010c0:	f7ff fef6 	bl	8000eb0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_I2C_MspInit+0x1dc>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010d0:	bf00      	nop
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40005400 	.word	0x40005400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40005800 	.word	0x40005800
 80010e8:	200004e8 	.word	0x200004e8
 80010ec:	40026040 	.word	0x40026040
 80010f0:	20000548 	.word	0x20000548
 80010f4:	400260b8 	.word	0x400260b8

080010f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <HAL_RTC_MspInit+0x50>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d111      	bne.n	8001140 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800111c:	2302      	movs	r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001124:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4618      	mov	r0, r3
 800112c:	f003 ffde 	bl	80050ec <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001136:	f7ff febb 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_RTC_MspInit+0x54>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40002800 	.word	0x40002800
 800114c:	42470e3c 	.word	0x42470e3c

08001150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <HAL_TIM_Base_MspInit+0x154>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d116      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	623b      	str	r3, [r7, #32]
 800118c:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	2019      	movs	r0, #25
 8001194:	f000 fbad 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001198:	2019      	movs	r0, #25
 800119a:	f000 fbc6 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800119e:	e07c      	b.n	800129a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d116      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a3d      	ldr	r2, [pc, #244]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2105      	movs	r1, #5
 80011ca:	201c      	movs	r0, #28
 80011cc:	f000 fb91 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d0:	201c      	movs	r0, #28
 80011d2:	f000 fbaa 	bl	800192a <HAL_NVIC_EnableIRQ>
}
 80011d6:	e060      	b.n	800129a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a33      	ldr	r2, [pc, #204]	; (80012ac <HAL_TIM_Base_MspInit+0x15c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10e      	bne.n	8001200 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
}
 80011fe:	e04c      	b.n	800129a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2a      	ldr	r2, [pc, #168]	; (80012b0 <HAL_TIM_Base_MspInit+0x160>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12c      	bne.n	8001264 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RPMSpeed_IC_Pin;
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124a:	2301      	movs	r3, #1
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001252:	2302      	movs	r3, #2
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RPMSpeed_IC_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4815      	ldr	r0, [pc, #84]	; (80012b4 <HAL_TIM_Base_MspInit+0x164>)
 800125e:	f000 fefb 	bl	8002058 <HAL_GPIO_Init>
}
 8001262:	e01a      	b.n	800129a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_TIM_Base_MspInit+0x168>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d115      	bne.n	800129a <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_TIM_Base_MspInit+0x158>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2105      	movs	r1, #5
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f000 fb2f 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001294:	2032      	movs	r0, #50	; 0x32
 8001296:	f000 fb48 	bl	800192a <HAL_NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3738      	adds	r7, #56	; 0x38
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40010000 	.word	0x40010000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40000800 	.word	0x40000800
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40000c00 	.word	0x40000c00

080012bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_TIM_MspPostInit+0x68>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d11d      	bne.n	800131a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin;
 80012fa:	2310      	movs	r3, #16
 80012fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_FAN_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_TIM_MspPostInit+0x70>)
 8001316:	f000 fe9f 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40000400 	.word	0x40000400
 8001328:	40023800 	.word	0x40023800
 800132c:	40020400 	.word	0x40020400

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_UART_MspInit+0x150>)
 800134e:	4293      	cmp	r3, r2
 8001350:	f040 8091 	bne.w	8001476 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_UART_MspInit+0x154>)
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	4a49      	ldr	r2, [pc, #292]	; (8001484 <HAL_UART_MspInit+0x154>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6453      	str	r3, [r2, #68]	; 0x44
 8001364:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_UART_MspInit+0x154>)
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <HAL_UART_MspInit+0x154>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a42      	ldr	r2, [pc, #264]	; (8001484 <HAL_UART_MspInit+0x154>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b40      	ldr	r3, [pc, #256]	; (8001484 <HAL_UART_MspInit+0x154>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800138c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800139e:	2307      	movs	r3, #7
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4837      	ldr	r0, [pc, #220]	; (8001488 <HAL_UART_MspInit+0x158>)
 80013aa:	f000 fe55 	bl	8002058 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013b0:	4a37      	ldr	r2, [pc, #220]	; (8001490 <HAL_UART_MspInit+0x160>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013b4:	4b35      	ldr	r3, [pc, #212]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013bc:	4b33      	ldr	r3, [pc, #204]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013ee:	4827      	ldr	r0, [pc, #156]	; (800148c <HAL_UART_MspInit+0x15c>)
 80013f0:	f000 fab6 	bl	8001960 <HAL_DMA_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80013fa:	f7ff fd59 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <HAL_UART_MspInit+0x15c>)
 8001402:	639a      	str	r2, [r3, #56]	; 0x38
 8001404:	4a21      	ldr	r2, [pc, #132]	; (800148c <HAL_UART_MspInit+0x15c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_UART_MspInit+0x164>)
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_UART_MspInit+0x168>)
 800140e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_UART_MspInit+0x164>)
 8001412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001416:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_UART_MspInit+0x164>)
 800141a:	2240      	movs	r2, #64	; 0x40
 800141c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_UART_MspInit+0x164>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_UART_MspInit+0x164>)
 8001426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_UART_MspInit+0x164>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_UART_MspInit+0x164>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_UART_MspInit+0x164>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_UART_MspInit+0x164>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_UART_MspInit+0x164>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <HAL_UART_MspInit+0x164>)
 800144c:	f000 fa88 	bl	8001960 <HAL_DMA_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001456:	f7ff fd2b 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_UART_MspInit+0x164>)
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <HAL_UART_MspInit+0x164>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2105      	movs	r1, #5
 800146a:	2025      	movs	r0, #37	; 0x25
 800146c:	f000 fa41 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001470:	2025      	movs	r0, #37	; 0x25
 8001472:	f000 fa5a 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40011000 	.word	0x40011000
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000
 800148c:	20000780 	.word	0x20000780
 8001490:	40026440 	.word	0x40026440
 8001494:	200007e0 	.word	0x200007e0
 8001498:	400264b8 	.word	0x400264b8

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f8f2 	bl	80016b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014d0:	f010 fd96 	bl	8012000 <xTaskGetSchedulerState>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d001      	beq.n	80014de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014da:	f011 fb7d 	bl	8012bd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <DMA1_Stream2_IRQHandler+0x10>)
 80014ea:	f000 fb79 	bl	8001be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200004e8 	.word	0x200004e8

080014f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014fe:	f004 f8e0 	bl	80056c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200005d4 	.word	0x200005d4

0800150c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <TIM2_IRQHandler+0x10>)
 8001512:	f004 f8d6 	bl	80056c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000061c 	.word	0x2000061c

08001520 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <USART1_IRQHandler+0x10>)
 8001526:	f005 f8c1 	bl	80066ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000073c 	.word	0x2000073c

08001534 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA1_Stream7_IRQHandler+0x10>)
 800153a:	f000 fb51 	bl	8001be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000548 	.word	0x20000548

08001548 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM5_IRQHandler+0x10>)
 800154e:	f004 f8b8 	bl	80056c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200006f4 	.word	0x200006f4

0800155c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <DMA2_Stream2_IRQHandler+0x10>)
 8001562:	f000 fb3d 	bl	8001be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000780 	.word	0x20000780

08001570 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <OTG_FS_IRQHandler+0x10>)
 8001576:	f002 f834 	bl	80035e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200069d0 	.word	0x200069d0

08001584 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA2_Stream7_IRQHandler+0x10>)
 800158a:	f000 fb29 	bl	8001be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200007e0 	.word	0x200007e0

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e6:	f7ff ffd7 	bl	8001598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f012 fc6b 	bl	8013ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7fe ff79 	bl	80004e4 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8001600:	080143b0 	.word	0x080143b0
  ldr r2, =_sbss
 8001604:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 8001608:	20007104 	.word	0x20007104

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f94f 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	200f      	movs	r0, #15
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fc3a 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f967 	bl	8001946 <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	f000 f92f 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000008 	.word	0x20000008
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008
 80016d8:	200008b0 	.word	0x200008b0

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200008b0 	.word	0x200008b0

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff29 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff3e 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff8e 	bl	8001830 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5d 	bl	80017dc <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff31 	bl	80017a0 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff feb6 	bl	80016dc <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e099      	b.n	8001ab0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199c:	e00f      	b.n	80019be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199e:	f7ff fe9d 	bl	80016dc <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d908      	bls.n	80019be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2220      	movs	r2, #32
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2203      	movs	r2, #3
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e078      	b.n	8001ab0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e8      	bne.n	800199e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_DMA_Init+0x158>)
 80019d8:	4013      	ands	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d107      	bne.n	8001a28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4313      	orrs	r3, r2
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d117      	bne.n	8001a82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fa7b 	bl	8001f60 <DMA_CheckFifoParam>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e016      	b.n	8001ab0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa32 	bl	8001ef4 <DMA_CalcBaseAndBitshift>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	223f      	movs	r2, #63	; 0x3f
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	f010803f 	.word	0xf010803f

08001abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aca:	f7ff fe07 	bl	80016dc <HAL_GetTick>
 8001ace:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d008      	beq.n	8001aee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e052      	b.n	8001b94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0216 	bic.w	r2, r2, #22
 8001afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <HAL_DMA_Abort+0x62>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0208 	bic.w	r2, r2, #8
 8001b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3e:	e013      	b.n	8001b68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b40:	f7ff fdcc 	bl	80016dc <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d90c      	bls.n	8001b68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2220      	movs	r2, #32
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2203      	movs	r2, #3
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e015      	b.n	8001b94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1e4      	bne.n	8001b40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	223f      	movs	r2, #63	; 0x3f
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d004      	beq.n	8001bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00c      	b.n	8001bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bec:	4b8e      	ldr	r3, [pc, #568]	; (8001e28 <HAL_DMA_IRQHandler+0x248>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a8e      	ldr	r2, [pc, #568]	; (8001e2c <HAL_DMA_IRQHandler+0x24c>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0a9b      	lsrs	r3, r3, #10
 8001bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d01a      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0204 	bic.w	r2, r2, #4
 8001c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2208      	movs	r2, #8
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	2201      	movs	r2, #1
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d012      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2201      	movs	r2, #1
 8001c70:	409a      	lsls	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f043 0202 	orr.w	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	2204      	movs	r2, #4
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb0:	f043 0204 	orr.w	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d043      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03c      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	2210      	movs	r2, #16
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d018      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d108      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d024      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
 8001d0e:	e01f      	b.n	8001d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
 8001d20:	e016      	b.n	8001d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d107      	bne.n	8001d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0208 	bic.w	r2, r2, #8
 8001d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2220      	movs	r2, #32
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 808f 	beq.w	8001e80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8087 	beq.w	8001e80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	2220      	movs	r2, #32
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d136      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0216 	bic.w	r2, r2, #22
 8001d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <HAL_DMA_IRQHandler+0x1da>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0208 	bic.w	r2, r2, #8
 8001dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	223f      	movs	r2, #63	; 0x3f
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d07e      	beq.n	8001eec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
        }
        return;
 8001df6:	e079      	b.n	8001eec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01d      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d031      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
 8001e24:	e02c      	b.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d023      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e01e      	b.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10f      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0210 	bic.w	r2, r2, #16
 8001e5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d032      	beq.n	8001eee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d022      	beq.n	8001eda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2205      	movs	r2, #5
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d307      	bcc.n	8001ec8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f2      	bne.n	8001eac <HAL_DMA_IRQHandler+0x2cc>
 8001ec6:	e000      	b.n	8001eca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ec8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
 8001eea:	e000      	b.n	8001eee <HAL_DMA_IRQHandler+0x30e>
        return;
 8001eec:	bf00      	nop
    }
  }
}
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3b10      	subs	r3, #16
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <DMA_CalcBaseAndBitshift+0x64>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <DMA_CalcBaseAndBitshift+0x68>)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d909      	bls.n	8001f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	1d1a      	adds	r2, r3, #4
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	659a      	str	r2, [r3, #88]	; 0x58
 8001f34:	e007      	b.n	8001f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f3e:	f023 0303 	bic.w	r3, r3, #3
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	aaaaaaab 	.word	0xaaaaaaab
 8001f5c:	08014338 	.word	0x08014338

08001f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d11f      	bne.n	8001fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d856      	bhi.n	800202e <DMA_CheckFifoParam+0xce>
 8001f80:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <DMA_CheckFifoParam+0x28>)
 8001f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f86:	bf00      	nop
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001fab 	.word	0x08001fab
 8001f90:	08001f99 	.word	0x08001f99
 8001f94:	0800202f 	.word	0x0800202f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d046      	beq.n	8002032 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa8:	e043      	b.n	8002032 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fb2:	d140      	bne.n	8002036 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb8:	e03d      	b.n	8002036 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc2:	d121      	bne.n	8002008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d837      	bhi.n	800203a <DMA_CheckFifoParam+0xda>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <DMA_CheckFifoParam+0x70>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08001fe7 	.word	0x08001fe7
 8001fd8:	08001fe1 	.word	0x08001fe1
 8001fdc:	08001ff9 	.word	0x08001ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe4:	e030      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d025      	beq.n	800203e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff6:	e022      	b.n	800203e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002000:	d11f      	bne.n	8002042 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002006:	e01c      	b.n	8002042 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d903      	bls.n	8002016 <DMA_CheckFifoParam+0xb6>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d003      	beq.n	800201c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002014:	e018      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
      break;
 800201a:	e015      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00e      	beq.n	8002046 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
      break;
 800202c:	e00b      	b.n	8002046 <DMA_CheckFifoParam+0xe6>
      break;
 800202e:	bf00      	nop
 8002030:	e00a      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
      break;
 8002032:	bf00      	nop
 8002034:	e008      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
      break;
 8002036:	bf00      	nop
 8002038:	e006      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
      break;
 800203a:	bf00      	nop
 800203c:	e004      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
      break;
 800203e:	bf00      	nop
 8002040:	e002      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
      break;   
 8002042:	bf00      	nop
 8002044:	e000      	b.n	8002048 <DMA_CheckFifoParam+0xe8>
      break;
 8002046:	bf00      	nop
    }
  } 
  
  return status; 
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e159      	b.n	8002328 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	f040 8148 	bne.w	8002322 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d005      	beq.n	80020aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d130      	bne.n	800210c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80a2 	beq.w	8002322 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b57      	ldr	r3, [pc, #348]	; (8002340 <HAL_GPIO_Init+0x2e8>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a56      	ldr	r2, [pc, #344]	; (8002340 <HAL_GPIO_Init+0x2e8>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b54      	ldr	r3, [pc, #336]	; (8002340 <HAL_GPIO_Init+0x2e8>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_GPIO_Init+0x2ec>)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x202>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_GPIO_Init+0x2f4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x1fe>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_GPIO_Init+0x2f8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x1fa>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a46      	ldr	r2, [pc, #280]	; (8002354 <HAL_GPIO_Init+0x2fc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x1f6>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a45      	ldr	r2, [pc, #276]	; (8002358 <HAL_GPIO_Init+0x300>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x1f2>
 8002246:	2304      	movs	r3, #4
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x204>
 800224a:	2307      	movs	r3, #7
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x204>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x204>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x204>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x204>
 800225a:	2300      	movs	r3, #0
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	f002 0203 	and.w	r2, r2, #3
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800226c:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_GPIO_Init+0x2ec>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_GPIO_Init+0x304>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HAL_GPIO_Init+0x304>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_GPIO_Init+0x304>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a24      	ldr	r2, [pc, #144]	; (800235c <HAL_GPIO_Init+0x304>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_GPIO_Init+0x304>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f2:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_GPIO_Init+0x304>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_GPIO_Init+0x304>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231c:	4a0f      	ldr	r2, [pc, #60]	; (800235c <HAL_GPIO_Init+0x304>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	f67f aea2 	bls.w	8002074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e12b      	b.n	80025fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fdaa 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f8:	f002 fe50 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 80023fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a81      	ldr	r2, [pc, #516]	; (8002608 <HAL_I2C_Init+0x274>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d807      	bhi.n	8002418 <HAL_I2C_Init+0x84>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a80      	ldr	r2, [pc, #512]	; (800260c <HAL_I2C_Init+0x278>)
 800240c:	4293      	cmp	r3, r2
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e006      	b.n	8002426 <HAL_I2C_Init+0x92>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a7d      	ldr	r2, [pc, #500]	; (8002610 <HAL_I2C_Init+0x27c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	bf94      	ite	ls
 8002420:	2301      	movls	r3, #1
 8002422:	2300      	movhi	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0e7      	b.n	80025fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a78      	ldr	r2, [pc, #480]	; (8002614 <HAL_I2C_Init+0x280>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_I2C_Init+0x274>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d802      	bhi.n	8002468 <HAL_I2C_Init+0xd4>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3301      	adds	r3, #1
 8002466:	e009      	b.n	800247c <HAL_I2C_Init+0xe8>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	4a69      	ldr	r2, [pc, #420]	; (8002618 <HAL_I2C_Init+0x284>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	3301      	adds	r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800248e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	495c      	ldr	r1, [pc, #368]	; (8002608 <HAL_I2C_Init+0x274>)
 8002498:	428b      	cmp	r3, r1
 800249a:	d819      	bhi.n	80024d0 <HAL_I2C_Init+0x13c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e59      	subs	r1, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b0:	400b      	ands	r3, r1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_I2C_Init+0x138>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1e59      	subs	r1, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ca:	e051      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024cc:	2304      	movs	r3, #4
 80024ce:	e04f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_I2C_Init+0x168>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	440b      	add	r3, r1
 80024e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e012      	b.n	8002522 <HAL_I2C_Init+0x18e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e58      	subs	r0, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	0099      	lsls	r1, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Init+0x196>
 8002526:	2301      	movs	r3, #1
 8002528:	e022      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10e      	bne.n	8002550 <HAL_I2C_Init+0x1bc>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1e58      	subs	r0, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	440b      	add	r3, r1
 8002540:	fbb0 f3f3 	udiv	r3, r0, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254e:	e00f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800259e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6911      	ldr	r1, [r2, #16]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68d2      	ldr	r2, [r2, #12]
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	000186a0 	.word	0x000186a0
 800260c:	001e847f 	.word	0x001e847f
 8002610:	003d08ff 	.word	0x003d08ff
 8002614:	431bde83 	.word	0x431bde83
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	461a      	mov	r2, r3
 8002628:	460b      	mov	r3, r1
 800262a:	817b      	strh	r3, [r7, #10]
 800262c:	4613      	mov	r3, r2
 800262e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff f854 	bl	80016dc <HAL_GetTick>
 8002634:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b20      	cmp	r3, #32
 8002640:	f040 80e0 	bne.w	8002804 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2319      	movs	r3, #25
 800264a:	2201      	movs	r2, #1
 800264c:	4970      	ldr	r1, [pc, #448]	; (8002810 <HAL_I2C_Master_Transmit+0x1f4>)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fc58 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	e0d3      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2C_Master_Transmit+0x50>
 8002668:	2302      	movs	r3, #2
 800266a:	e0cc      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d007      	beq.n	8002692 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2221      	movs	r2, #33	; 0x21
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2210      	movs	r2, #16
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	893a      	ldrh	r2, [r7, #8]
 80026c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a50      	ldr	r2, [pc, #320]	; (8002814 <HAL_I2C_Master_Transmit+0x1f8>)
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026d4:	8979      	ldrh	r1, [r7, #10]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fac2 	bl	8002c64 <I2C_MasterRequestWrite>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e08d      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002700:	e066      	b.n	80027d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fcd2 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b04      	cmp	r3, #4
 8002718:	d107      	bne.n	800272a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06b      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d11b      	bne.n	80027a4 <HAL_I2C_Master_Transmit+0x188>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d017      	beq.n	80027a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6a39      	ldr	r1, [r7, #32]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fcc2 	bl	8003132 <I2C_WaitOnBTFFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d107      	bne.n	80027cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e01a      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d194      	bne.n	8002702 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	00100002 	.word	0x00100002
 8002814:	ffff0000 	.word	0xffff0000

08002818 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	460b      	mov	r3, r1
 8002826:	817b      	strh	r3, [r7, #10]
 8002828:	4613      	mov	r3, r2
 800282a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7fe ff56 	bl	80016dc <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	f040 820b 	bne.w	8002c56 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2319      	movs	r3, #25
 8002846:	2201      	movs	r2, #1
 8002848:	497c      	ldr	r1, [pc, #496]	; (8002a3c <HAL_I2C_Master_Receive+0x224>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fb5a 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	e1fe      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_I2C_Master_Receive+0x50>
 8002864:	2302      	movs	r3, #2
 8002866:	e1f7      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d007      	beq.n	800288e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2222      	movs	r2, #34	; 0x22
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2210      	movs	r2, #16
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	893a      	ldrh	r2, [r7, #8]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a5c      	ldr	r2, [pc, #368]	; (8002a40 <HAL_I2C_Master_Receive+0x228>)
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028d0:	8979      	ldrh	r1, [r7, #10]
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fa46 	bl	8002d68 <I2C_MasterRequestRead>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1b8      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d113      	bne.n	8002916 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ee:	2300      	movs	r3, #0
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	623b      	str	r3, [r7, #32]
 8002902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e18c      	b.n	8002c30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	2b01      	cmp	r3, #1
 800291c:	d11b      	bne.n	8002956 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e16c      	b.n	8002c30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	2b02      	cmp	r3, #2
 800295c:	d11b      	bne.n	8002996 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	e14c      	b.n	8002c30 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029bc:	e138      	b.n	8002c30 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	f200 80f1 	bhi.w	8002baa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d123      	bne.n	8002a18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fbed 	bl	80031b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e139      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a16:	e10b      	b.n	8002c30 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d14e      	bne.n	8002abe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	2200      	movs	r2, #0
 8002a28:	4906      	ldr	r1, [pc, #24]	; (8002a44 <HAL_I2C_Master_Receive+0x22c>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fa6a 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e10e      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
 8002a3a:	bf00      	nop
 8002a3c:	00100002 	.word	0x00100002
 8002a40:	ffff0000 	.word	0xffff0000
 8002a44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002abc:	e0b8      	b.n	8002c30 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4966      	ldr	r1, [pc, #408]	; (8002c60 <HAL_I2C_Master_Receive+0x448>)
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fa1b 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0bf      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	2200      	movs	r2, #0
 8002b22:	494f      	ldr	r1, [pc, #316]	; (8002c60 <HAL_I2C_Master_Receive+0x448>)
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f9ed 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e091      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba8:	e042      	b.n	8002c30 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fb00 	bl	80031b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e04c      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d118      	bne.n	8002c30 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f aec2 	bne.w	80029be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	00010004 	.word	0x00010004

08002c64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	460b      	mov	r3, r1
 8002c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d006      	beq.n	8002c8e <I2C_MasterRequestWrite+0x2a>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d003      	beq.n	8002c8e <I2C_MasterRequestWrite+0x2a>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c8c:	d108      	bne.n	8002ca0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e00b      	b.n	8002cb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d107      	bne.n	8002cb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f91d 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cde:	d103      	bne.n	8002ce8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e035      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf4:	d108      	bne.n	8002d08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	e01b      	b.n	8002d40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	11db      	asrs	r3, r3, #7
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0306 	and.w	r3, r3, #6
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f063 030f 	orn	r3, r3, #15
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	490e      	ldr	r1, [pc, #56]	; (8002d60 <I2C_MasterRequestWrite+0xfc>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f943 	bl	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e010      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d36:	897b      	ldrh	r3, [r7, #10]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4907      	ldr	r1, [pc, #28]	; (8002d64 <I2C_MasterRequestWrite+0x100>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f933 	bl	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	00010008 	.word	0x00010008
 8002d64:	00010002 	.word	0x00010002

08002d68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	460b      	mov	r3, r1
 8002d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d006      	beq.n	8002da2 <I2C_MasterRequestRead+0x3a>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d003      	beq.n	8002da2 <I2C_MasterRequestRead+0x3a>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002da0:	d108      	bne.n	8002db4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e00b      	b.n	8002dcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	2b11      	cmp	r3, #17
 8002dba:	d107      	bne.n	8002dcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f893 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df2:	d103      	bne.n	8002dfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e079      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e08:	d108      	bne.n	8002e1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]
 8002e1a:	e05f      	b.n	8002edc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e1c:	897b      	ldrh	r3, [r7, #10]
 8002e1e:	11db      	asrs	r3, r3, #7
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0306 	and.w	r3, r3, #6
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f063 030f 	orn	r3, r3, #15
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4930      	ldr	r1, [pc, #192]	; (8002efc <I2C_MasterRequestRead+0x194>)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f8b9 	bl	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e054      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4929      	ldr	r1, [pc, #164]	; (8002f00 <I2C_MasterRequestRead+0x198>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f8a9 	bl	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e044      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f831 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d103      	bne.n	8002ec0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e017      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	11db      	asrs	r3, r3, #7
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f003 0306 	and.w	r3, r3, #6
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f063 030e 	orn	r3, r3, #14
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <I2C_MasterRequestRead+0x198>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f865 	bl	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	00010008 	.word	0x00010008
 8002f00:	00010002 	.word	0x00010002

08002f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f14:	e025      	b.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1c:	d021      	beq.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe fbdd 	bl	80016dc <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e023      	b.n	8002faa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10d      	bne.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	e00c      	b.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d0b6      	beq.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc0:	e051      	b.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd0:	d123      	bne.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0204 	orr.w	r2, r3, #4
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e046      	b.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003020:	d021      	beq.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fe fb5b 	bl	80016dc <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d116      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e020      	b.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10c      	bne.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf14      	ite	ne
 8003082:	2301      	movne	r3, #1
 8003084:	2300      	moveq	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	e00b      	b.n	80030a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	43da      	mvns	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d18d      	bne.n	8002fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030bc:	e02d      	b.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8ce 	bl	8003260 <I2C_IsAcknowledgeFailed>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e02d      	b.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d4:	d021      	beq.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7fe fb01 	bl	80016dc <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d116      	bne.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e007      	b.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d1ca      	bne.n	80030be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800313e:	e02d      	b.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f88d 	bl	8003260 <I2C_IsAcknowledgeFailed>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e02d      	b.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003156:	d021      	beq.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003158:	f7fe fac0 	bl	80016dc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	429a      	cmp	r2, r3
 8003166:	d302      	bcc.n	800316e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d116      	bne.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e007      	b.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d1ca      	bne.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031c0:	e042      	b.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d119      	bne.n	8003204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0210 	mvn.w	r2, #16
 80031d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e029      	b.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003204:	f7fe fa6a 	bl	80016dc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	429a      	cmp	r2, r3
 8003212:	d302      	bcc.n	800321a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e007      	b.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d1b5      	bne.n	80031c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d11b      	bne.n	80032b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003280:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e034      	b.n	800333a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80032d8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f245 5255 	movw	r2, #21845	; 0x5555
 80032e2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6852      	ldr	r2, [r2, #4]
 80032ec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6892      	ldr	r2, [r2, #8]
 80032f6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80032f8:	f7fe f9f0 	bl	80016dc <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80032fe:	e00f      	b.n	8003320 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003300:	f7fe f9ec 	bl	80016dc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b31      	cmp	r3, #49	; 0x31
 800330c:	d908      	bls.n	8003320 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e00c      	b.n	800333a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e8      	bne.n	8003300 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003336:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003342:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003344:	b08f      	sub	sp, #60	; 0x3c
 8003346:	af0a      	add	r7, sp, #40	; 0x28
 8003348:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e10f      	b.n	8003574 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f010 fa9e 	bl	80138b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2203      	movs	r2, #3
 8003378:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f004 f965 	bl	8007662 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	687e      	ldr	r6, [r7, #4]
 80033a0:	466d      	mov	r5, sp
 80033a2:	f106 0410 	add.w	r4, r6, #16
 80033a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80033b6:	1d33      	adds	r3, r6, #4
 80033b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ba:	6838      	ldr	r0, [r7, #0]
 80033bc:	f004 f83c 	bl	8007438 <USB_CoreInit>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0d0      	b.n	8003574 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 f953 	bl	8007684 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	e04a      	b.n	800347a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033e4:	7bfa      	ldrb	r2, [r7, #15]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	333d      	adds	r3, #61	; 0x3d
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033f8:	7bfa      	ldrb	r2, [r7, #15]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	333c      	adds	r3, #60	; 0x3c
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	b298      	uxth	r0, r3
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3344      	adds	r3, #68	; 0x44
 8003420:	4602      	mov	r2, r0
 8003422:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3340      	adds	r3, #64	; 0x40
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3348      	adds	r3, #72	; 0x48
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334c      	adds	r3, #76	; 0x4c
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	3354      	adds	r3, #84	; 0x54
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	3301      	adds	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d3af      	bcc.n	80033e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	e044      	b.n	8003514 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	3301      	adds	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d3b5      	bcc.n	800348a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	687e      	ldr	r6, [r7, #4]
 8003526:	466d      	mov	r5, sp
 8003528:	f106 0410 	add.w	r4, r6, #16
 800352c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003534:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003538:	e885 0003 	stmia.w	r5, {r0, r1}
 800353c:	1d33      	adds	r3, r6, #4
 800353e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003540:	6838      	ldr	r0, [r7, #0]
 8003542:	f004 f8eb 	bl	800771c <USB_DevInit>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e00d      	b.n	8003574 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f005 fa3a 	bl	80089e6 <USB_DevDisconnect>

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800357c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_PCD_Start+0x1c>
 8003594:	2302      	movs	r3, #2
 8003596:	e020      	b.n	80035da <HAL_PCD_Start+0x5e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d109      	bne.n	80035bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d005      	beq.n	80035bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 f83d 	bl	8007640 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f005 f9ea 	bl	80089a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035e2:	b590      	push	{r4, r7, lr}
 80035e4:	b08d      	sub	sp, #52	; 0x34
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f005 faa8 	bl	8008b4e <USB_GetMode>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 848a 	bne.w	8003f1a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f005 fa0c 	bl	8008a28 <USB_ReadInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8480 	beq.w	8003f18 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f005 f9f9 	bl	8008a28 <USB_ReadInterrupts>
 8003636:	4603      	mov	r3, r0
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d107      	bne.n	8003650 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f002 0202 	and.w	r2, r2, #2
 800364e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f005 f9e7 	bl	8008a28 <USB_ReadInterrupts>
 800365a:	4603      	mov	r3, r0
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b10      	cmp	r3, #16
 8003662:	d161      	bne.n	8003728 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0210 	bic.w	r2, r2, #16
 8003672:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	3304      	adds	r3, #4
 8003692:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	0c5b      	lsrs	r3, r3, #17
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	2b02      	cmp	r3, #2
 800369e:	d124      	bne.n	80036ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d035      	beq.n	8003718 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	6a38      	ldr	r0, [r7, #32]
 80036c0:	f005 f81e 	bl	8008700 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d0:	441a      	add	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	6a1a      	ldr	r2, [r3, #32]
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e2:	441a      	add	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	621a      	str	r2, [r3, #32]
 80036e8:	e016      	b.n	8003718 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	0c5b      	lsrs	r3, r3, #17
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d110      	bne.n	8003718 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036fc:	2208      	movs	r2, #8
 80036fe:	4619      	mov	r1, r3
 8003700:	6a38      	ldr	r0, [r7, #32]
 8003702:	f004 fffd 	bl	8008700 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6a1a      	ldr	r2, [r3, #32]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003712:	441a      	add	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0210 	orr.w	r2, r2, #16
 8003726:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f005 f97b 	bl	8008a28 <USB_ReadInterrupts>
 8003732:	4603      	mov	r3, r0
 8003734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003738:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800373c:	f040 80a7 	bne.w	800388e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f005 f980 	bl	8008a4e <USB_ReadDevAllOutEpInterrupt>
 800374e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003750:	e099      	b.n	8003886 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 808e 	beq.w	800387a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	4611      	mov	r1, r2
 8003768:	4618      	mov	r0, r3
 800376a:	f005 f9a4 	bl	8008ab6 <USB_ReadDevOutEPInterrupt>
 800376e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	461a      	mov	r2, r3
 8003788:	2301      	movs	r3, #1
 800378a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800378c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fec2 	bl	8004518 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037aa:	461a      	mov	r2, r3
 80037ac:	2308      	movs	r3, #8
 80037ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 ff98 	bl	80046e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	461a      	mov	r2, r3
 80037d0:	2310      	movs	r3, #16
 80037d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d030      	beq.n	8003840 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d109      	bne.n	80037fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	3304      	adds	r3, #4
 8003812:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	78db      	ldrb	r3, [r3, #3]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d108      	bne.n	800382e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2200      	movs	r2, #0
 8003820:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f010 f93d 	bl	8013aa8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	2302      	movs	r3, #2
 800383e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	2320      	movs	r3, #32
 800385a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003878:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	3301      	adds	r3, #1
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	f47f af62 	bne.w	8003752 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f005 f8c8 	bl	8008a28 <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a2:	f040 80db 	bne.w	8003a5c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f005 f8e9 	bl	8008a82 <USB_ReadDevAllInEpInterrupt>
 80038b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038b6:	e0cd      	b.n	8003a54 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80c2 	beq.w	8003a48 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f005 f90f 	bl	8008af2 <USB_ReadDevInEPInterrupt>
 80038d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d057      	beq.n	8003990 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	2201      	movs	r2, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003900:	4013      	ands	r3, r2
 8003902:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003910:	461a      	mov	r2, r3
 8003912:	2301      	movs	r3, #1
 8003914:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d132      	bne.n	8003984 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	334c      	adds	r3, #76	; 0x4c
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4403      	add	r3, r0
 800393e:	3348      	adds	r3, #72	; 0x48
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4419      	add	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4403      	add	r3, r0
 8003952:	334c      	adds	r3, #76	; 0x4c
 8003954:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d113      	bne.n	8003984 <HAL_PCD_IRQHandler+0x3a2>
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3354      	adds	r3, #84	; 0x54
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d108      	bne.n	8003984 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800397c:	461a      	mov	r2, r3
 800397e:	2101      	movs	r1, #1
 8003980:	f005 f916 	bl	8008bb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f010 f811 	bl	80139b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a6:	461a      	mov	r2, r3
 80039a8:	2308      	movs	r3, #8
 80039aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	461a      	mov	r2, r3
 80039c4:	2310      	movs	r3, #16
 80039c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	461a      	mov	r2, r3
 80039e0:	2340      	movs	r3, #64	; 0x40
 80039e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d023      	beq.n	8003a36 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f0:	6a38      	ldr	r0, [r7, #32]
 80039f2:	f003 fff7 	bl	80079e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	3338      	adds	r3, #56	; 0x38
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	3304      	adds	r3, #4
 8003a08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	78db      	ldrb	r3, [r3, #3]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f010 f854 	bl	8013acc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	461a      	mov	r2, r3
 8003a32:	2302      	movs	r3, #2
 8003a34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fcdb 	bl	80043fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f47f af2e 	bne.w	80038b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f004 ffe1 	bl	8008a28 <USB_ReadInterrupts>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a70:	d122      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a98:	2100      	movs	r1, #0
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fec2 	bl	8004824 <HAL_PCDEx_LPM_Callback>
 8003aa0:	e002      	b.n	8003aa8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f00f fff2 	bl	8013a8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f004 ffb3 	bl	8008a28 <USB_ReadInterrupts>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	d112      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d102      	bne.n	8003ae4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f00f ffae 	bl	8013a40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003af2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 ff95 	bl	8008a28 <USB_ReadInterrupts>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b08:	f040 80b7 	bne.w	8003c7a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2110      	movs	r1, #16
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 ff5c 	bl	80079e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b30:	e046      	b.n	8003bc0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b56:	0151      	lsls	r1, r2, #5
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	440a      	add	r2, r1
 8003b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	461a      	mov	r2, r3
 8003b74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003baa:	0151      	lsls	r1, r2, #5
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	440a      	add	r2, r1
 8003bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bb8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3b3      	bcc.n	8003b32 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bdc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf6:	f043 030b 	orr.w	r3, r3, #11
 8003bfa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0c:	f043 030b 	orr.w	r3, r3, #11
 8003c10:	6453      	str	r3, [r2, #68]	; 0x44
 8003c12:	e015      	b.n	8003c40 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c26:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c2a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	f043 030b 	orr.w	r3, r3, #11
 8003c3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c64:	461a      	mov	r2, r3
 8003c66:	f004 ffa3 	bl	8008bb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 fed2 	bl	8008a28 <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8e:	d124      	bne.n	8003cda <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f004 ff68 	bl	8008b6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f003 ff1d 	bl	8007ade <USB_GetDevSpeed>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681c      	ldr	r4, [r3, #0]
 8003cb0:	f001 f9e8 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f003 fc1c 	bl	80074fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f00f fe9c 	bl	8013a02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f004 fea2 	bl	8008a28 <USB_ReadInterrupts>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d10a      	bne.n	8003d04 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f00f fe79 	bl	80139e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f002 0208 	and.w	r2, r2, #8
 8003d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f004 fe8d 	bl	8008a28 <USB_ReadInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b80      	cmp	r3, #128	; 0x80
 8003d16:	d122      	bne.n	8003d5e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d24:	2301      	movs	r3, #1
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
 8003d28:	e014      	b.n	8003d54 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fb27 	bl	800439c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	3301      	adds	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d3e5      	bcc.n	8003d2a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f004 fe60 	bl	8008a28 <USB_ReadInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d72:	d13b      	bne.n	8003dec <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d74:	2301      	movs	r3, #1
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	e02b      	b.n	8003dd2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3340      	adds	r3, #64	; 0x40
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d115      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003da0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da12      	bge.n	8003dcc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	333f      	adds	r3, #63	; 0x3f
 8003db6:	2201      	movs	r2, #1
 8003db8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fae8 	bl	800439c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	3301      	adds	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d3ce      	bcc.n	8003d7a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f004 fe19 	bl	8008a28 <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e00:	d155      	bne.n	8003eae <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e02:	2301      	movs	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e045      	b.n	8003e94 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d12e      	bne.n	8003e8e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da2b      	bge.n	8003e8e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d121      	bne.n	8003e8e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8a:	6053      	str	r3, [r2, #4]
            break;
 8003e8c:	e007      	b.n	8003e9e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	3301      	adds	r3, #1
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3b4      	bcc.n	8003e08 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f004 fdb8 	bl	8008a28 <USB_ReadInterrupts>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec2:	d10a      	bne.n	8003eda <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f00f fe13 	bl	8013af0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 fda2 	bl	8008a28 <USB_ReadInterrupts>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d115      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f00f fe03 	bl	8013b0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	e000      	b.n	8003f1a <HAL_PCD_IRQHandler+0x938>
      return;
 8003f18:	bf00      	nop
    }
  }
}
 8003f1a:	3734      	adds	r7, #52	; 0x34
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd90      	pop	{r4, r7, pc}

08003f20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_PCD_SetAddress+0x1a>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e013      	b.n	8003f62 <HAL_PCD_SetAddress+0x42>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f004 fd00 	bl	8008958 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	4608      	mov	r0, r1
 8003f74:	4611      	mov	r1, r2
 8003f76:	461a      	mov	r2, r3
 8003f78:	4603      	mov	r3, r0
 8003f7a:	70fb      	strb	r3, [r7, #3]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	803b      	strh	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	da0f      	bge.n	8003fb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f003 020f 	and.w	r2, r3, #15
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	3338      	adds	r3, #56	; 0x38
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	705a      	strb	r2, [r3, #1]
 8003fae:	e00f      	b.n	8003fd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fdc:	883a      	ldrh	r2, [r7, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	78ba      	ldrb	r2, [r7, #2]
 8003fe6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ffa:	78bb      	ldrb	r3, [r7, #2]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d102      	bne.n	8004006 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_PCD_EP_Open+0xaa>
 8004010:	2302      	movs	r3, #2
 8004012:	e00e      	b.n	8004032 <HAL_PCD_EP_Open+0xc8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68f9      	ldr	r1, [r7, #12]
 8004022:	4618      	mov	r0, r3
 8004024:	f003 fd80 	bl	8007b28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004030:	7afb      	ldrb	r3, [r7, #11]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800404a:	2b00      	cmp	r3, #0
 800404c:	da0f      	bge.n	800406e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	f003 020f 	and.w	r2, r3, #15
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	3338      	adds	r3, #56	; 0x38
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	3304      	adds	r3, #4
 8004064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	705a      	strb	r2, [r3, #1]
 800406c:	e00f      	b.n	800408e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 020f 	and.w	r2, r3, #15
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_PCD_EP_Close+0x6e>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e00e      	b.n	80040c6 <HAL_PCD_EP_Close+0x8c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68f9      	ldr	r1, [r7, #12]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f003 fdbe 	bl	8007c38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	460b      	mov	r3, r1
 80040dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040de:	7afb      	ldrb	r3, [r7, #11]
 80040e0:	f003 020f 	and.w	r2, r3, #15
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	3304      	adds	r3, #4
 80040f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2200      	movs	r2, #0
 8004108:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004110:	7afb      	ldrb	r3, [r7, #11]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	b2da      	uxtb	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d102      	bne.n	800412a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800412a:	7afb      	ldrb	r3, [r7, #11]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	6979      	ldr	r1, [r7, #20]
 8004142:	f004 f89d 	bl	8008280 <USB_EP0StartXfer>
 8004146:	e008      	b.n	800415a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	6979      	ldr	r1, [r7, #20]
 8004156:	f003 fe4b 	bl	8007df0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	f003 020f 	and.w	r2, r3, #15
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004186:	681b      	ldr	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	460b      	mov	r3, r1
 80041a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a4:	7afb      	ldrb	r3, [r7, #11]
 80041a6:	f003 020f 	and.w	r2, r3, #15
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	3338      	adds	r3, #56	; 0x38
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	3304      	adds	r3, #4
 80041ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2200      	movs	r2, #0
 80041cc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2201      	movs	r2, #1
 80041d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041d4:	7afb      	ldrb	r3, [r7, #11]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d102      	bne.n	80041ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	6979      	ldr	r1, [r7, #20]
 8004206:	f004 f83b 	bl	8008280 <USB_EP0StartXfer>
 800420a:	e008      	b.n	800421e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	6979      	ldr	r1, [r7, #20]
 800421a:	f003 fde9 	bl	8007df0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	f003 020f 	and.w	r2, r3, #15
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	d901      	bls.n	8004246 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e050      	b.n	80042e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800424a:	2b00      	cmp	r3, #0
 800424c:	da0f      	bge.n	800426e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	3338      	adds	r3, #56	; 0x38
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	705a      	strb	r2, [r3, #1]
 800426c:	e00d      	b.n	800428a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	b2da      	uxtb	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_PCD_EP_SetStall+0x82>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e01e      	b.n	80042e8 <HAL_PCD_EP_SetStall+0xc0>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 fa79 	bl	80087b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	b2d9      	uxtb	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042d8:	461a      	mov	r2, r3
 80042da:	f004 fc69 	bl	8008bb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	f003 020f 	and.w	r2, r3, #15
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	d901      	bls.n	800430e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e042      	b.n	8004394 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800430e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004312:	2b00      	cmp	r3, #0
 8004314:	da0f      	bge.n	8004336 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	3338      	adds	r3, #56	; 0x38
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	3304      	adds	r3, #4
 800432c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	705a      	strb	r2, [r3, #1]
 8004334:	e00f      	b.n	8004356 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_PCD_EP_ClrStall+0x86>
 8004372:	2302      	movs	r3, #2
 8004374:	e00e      	b.n	8004394 <HAL_PCD_EP_ClrStall+0xa4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f004 fa81 	bl	800888c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	da0c      	bge.n	80043ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	f003 020f 	and.w	r2, r3, #15
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	3338      	adds	r3, #56	; 0x38
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4413      	add	r3, r2
 80043c4:	3304      	adds	r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e00c      	b.n	80043e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	f003 020f 	and.w	r2, r3, #15
 80043d0:	4613      	mov	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4413      	add	r3, r2
 80043e0:	3304      	adds	r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68f9      	ldr	r1, [r7, #12]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f004 f8a0 	bl	8008530 <USB_EPStopXfer>
 80043f0:	4603      	mov	r3, r0
 80043f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043f4:	7afb      	ldrb	r3, [r7, #11]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b08a      	sub	sp, #40	; 0x28
 8004402:	af02      	add	r7, sp, #8
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	3338      	adds	r3, #56	; 0x38
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	429a      	cmp	r2, r3
 8004430:	d901      	bls.n	8004436 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e06c      	b.n	8004510 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	429a      	cmp	r2, r3
 800444a:	d902      	bls.n	8004452 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3303      	adds	r3, #3
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800445a:	e02b      	b.n	80044b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	429a      	cmp	r2, r3
 8004470:	d902      	bls.n	8004478 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	3303      	adds	r3, #3
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6919      	ldr	r1, [r3, #16]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004490:	b2db      	uxtb	r3, r3
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	4603      	mov	r3, r0
 8004496:	6978      	ldr	r0, [r7, #20]
 8004498:	f004 f8f4 	bl	8008684 <USB_WritePacket>

    ep->xfer_buff  += len;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	441a      	add	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	441a      	add	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d809      	bhi.n	80044de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d203      	bcs.n	80044de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1be      	bne.n	800445c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d811      	bhi.n	800450e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	2201      	movs	r2, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	43db      	mvns	r3, r3
 8004504:	6939      	ldr	r1, [r7, #16]
 8004506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800450a:	4013      	ands	r3, r2
 800450c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	333c      	adds	r3, #60	; 0x3c
 8004530:	3304      	adds	r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d17b      	bne.n	8004646 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4a61      	ldr	r2, [pc, #388]	; (80046e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	f240 80b9 	bls.w	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80b3 	beq.w	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004580:	6093      	str	r3, [r2, #8]
 8004582:	e0a7      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	2320      	movs	r3, #32
 800459e:	6093      	str	r3, [r2, #8]
 80045a0:	e098      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 8093 	bne.w	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4a4b      	ldr	r2, [pc, #300]	; (80046e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d90f      	bls.n	80045d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	461a      	mov	r2, r3
 80045ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d2:	6093      	str	r3, [r2, #8]
 80045d4:	e07e      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	0159      	lsls	r1, r3, #5
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	440b      	add	r3, r1
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004602:	1ad2      	subs	r2, r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d114      	bne.n	8004638 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004620:	461a      	mov	r2, r3
 8004622:	2101      	movs	r1, #1
 8004624:	f004 fac4 	bl	8008bb0 <USB_EP0_OutStart>
 8004628:	e006      	b.n	8004638 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f00f f99c 	bl	801397c <HAL_PCD_DataOutStageCallback>
 8004644:	e046      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d124      	bne.n	8004698 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	461a      	mov	r2, r3
 8004666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466a:	6093      	str	r3, [r2, #8]
 800466c:	e032      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	2320      	movs	r3, #32
 8004688:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f00f f973 	bl	801397c <HAL_PCD_DataOutStageCallback>
 8004696:	e01d      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d114      	bne.n	80046c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d108      	bne.n	80046c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046c0:	461a      	mov	r2, r3
 80046c2:	2100      	movs	r1, #0
 80046c4:	f004 fa74 	bl	8008bb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f00f f954 	bl	801397c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	4f54300a 	.word	0x4f54300a
 80046e4:	4f54310a 	.word	0x4f54310a

080046e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	333c      	adds	r3, #60	; 0x3c
 8004700:	3304      	adds	r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a15      	ldr	r2, [pc, #84]	; (8004770 <PCD_EP_OutSetupPacket_int+0x88>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d90e      	bls.n	800473c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f00f f90b 	bl	8013958 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <PCD_EP_OutSetupPacket_int+0x88>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d90c      	bls.n	8004764 <PCD_EP_OutSetupPacket_int+0x7c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d108      	bne.n	8004764 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800475c:	461a      	mov	r2, r3
 800475e:	2101      	movs	r1, #1
 8004760:	f004 fa26 	bl	8008bb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	4f54300a 	.word	0x4f54300a

08004774 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
 8004780:	4613      	mov	r3, r2
 8004782:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004792:	883b      	ldrh	r3, [r7, #0]
 8004794:	0419      	lsls	r1, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	430a      	orrs	r2, r1
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
 80047a0:	e028      	b.n	80047f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	4413      	add	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e00d      	b.n	80047d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	3340      	adds	r3, #64	; 0x40
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	4413      	add	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	3301      	adds	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	429a      	cmp	r2, r3
 80047da:	d3ec      	bcc.n	80047b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047dc:	883b      	ldrh	r3, [r7, #0]
 80047de:	0418      	lsls	r0, r3, #16
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4302      	orrs	r2, r0
 80047ec:	3340      	adds	r3, #64	; 0x40
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e267      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d075      	beq.n	8004946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800485a:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b04      	cmp	r3, #4
 8004864:	d00c      	beq.n	8004880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486e:	2b08      	cmp	r3, #8
 8004870:	d112      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004872:	4b82      	ldr	r3, [pc, #520]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487e:	d10b      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	4b7e      	ldr	r3, [pc, #504]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d05b      	beq.n	8004944 <HAL_RCC_OscConfig+0x108>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d157      	bne.n	8004944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e242      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x74>
 80048a2:	4b76      	ldr	r3, [pc, #472]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a75      	ldr	r2, [pc, #468]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e01d      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x98>
 80048ba:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a6f      	ldr	r2, [pc, #444]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a6c      	ldr	r2, [pc, #432]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e00b      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048d4:	4b69      	ldr	r3, [pc, #420]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a68      	ldr	r2, [pc, #416]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	4b66      	ldr	r3, [pc, #408]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a65      	ldr	r2, [pc, #404]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fc fef2 	bl	80016dc <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fc:	f7fc feee 	bl	80016dc <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	; 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e207      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b5b      	ldr	r3, [pc, #364]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0xc0>
 800491a:	e014      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fc fede 	bl	80016dc <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004924:	f7fc feda 	bl	80016dc <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1f3      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	4b51      	ldr	r3, [pc, #324]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0xe8>
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d063      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004952:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004966:	2b08      	cmp	r3, #8
 8004968:	d11c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496a:	4b44      	ldr	r3, [pc, #272]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d116      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004976:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d001      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e1c7      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498e:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4937      	ldr	r1, [pc, #220]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	e03a      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ac:	4b34      	ldr	r3, [pc, #208]	; (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fc fe93 	bl	80016dc <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fc fe8f 	bl	80016dc <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e1a8      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4925      	ldr	r1, [pc, #148]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
 80049ec:	e015      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fc fe72 	bl	80016dc <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049fc:	f7fc fe6e 	bl	80016dc <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e187      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d036      	beq.n	8004a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2e:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <HAL_RCC_OscConfig+0x248>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fc fe52 	bl	80016dc <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3c:	f7fc fe4e 	bl	80016dc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e167      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x200>
 8004a5a:	e01b      	b.n	8004a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_OscConfig+0x248>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a62:	f7fc fe3b 	bl	80016dc <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	e00e      	b.n	8004a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6a:	f7fc fe37 	bl	80016dc <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d907      	bls.n	8004a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e150      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	42470000 	.word	0x42470000
 8004a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a88:	4b88      	ldr	r3, [pc, #544]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ea      	bne.n	8004a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8097 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa6:	4b81      	ldr	r3, [pc, #516]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	4b7d      	ldr	r3, [pc, #500]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a7c      	ldr	r2, [pc, #496]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b7a      	ldr	r3, [pc, #488]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b77      	ldr	r3, [pc, #476]	; (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ade:	4b74      	ldr	r3, [pc, #464]	; (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a73      	ldr	r2, [pc, #460]	; (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fc fdf7 	bl	80016dc <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fc fdf3 	bl	80016dc <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e10c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x2ea>
 8004b18:	4b64      	ldr	r3, [pc, #400]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a63      	ldr	r2, [pc, #396]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	e01c      	b.n	8004b60 <HAL_RCC_OscConfig+0x324>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x30c>
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a5e      	ldr	r2, [pc, #376]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a5b      	ldr	r2, [pc, #364]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0x324>
 8004b48:	4b58      	ldr	r3, [pc, #352]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4c:	4a57      	ldr	r2, [pc, #348]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	6713      	str	r3, [r2, #112]	; 0x70
 8004b54:	4b55      	ldr	r3, [pc, #340]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	4a54      	ldr	r2, [pc, #336]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b5a:	f023 0304 	bic.w	r3, r3, #4
 8004b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fc fdb8 	bl	80016dc <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b70:	f7fc fdb4 	bl	80016dc <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0cb      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b86:	4b49      	ldr	r3, [pc, #292]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0ee      	beq.n	8004b70 <HAL_RCC_OscConfig+0x334>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b94:	f7fc fda2 	bl	80016dc <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fc fd9e 	bl	80016dc <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0b5      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb2:	4b3e      	ldr	r3, [pc, #248]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	4a38      	ldr	r2, [pc, #224]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a1 	beq.w	8004d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bda:	4b34      	ldr	r3, [pc, #208]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d05c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d141      	bne.n	8004c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fc fd72 	bl	80016dc <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fc fd6e 	bl	80016dc <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e087      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	3b01      	subs	r3, #1
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	491b      	ldr	r1, [pc, #108]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c44:	4b1b      	ldr	r3, [pc, #108]	; (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fd47 	bl	80016dc <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fc fd43 	bl	80016dc <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e05c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x416>
 8004c70:	e054      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fc fd30 	bl	80016dc <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fc fd2c 	bl	80016dc <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e045      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x444>
 8004c9e:	e03d      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e038      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_RCC_OscConfig+0x4ec>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d121      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d11a      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d111      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	3b01      	subs	r3, #1
 8004d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0cc      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d40:	4b68      	ldr	r3, [pc, #416]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d90c      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b63      	ldr	r3, [pc, #396]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0b8      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d80:	4b59      	ldr	r3, [pc, #356]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a58      	ldr	r2, [pc, #352]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d98:	4b53      	ldr	r3, [pc, #332]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a52      	ldr	r2, [pc, #328]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da4:	4b50      	ldr	r3, [pc, #320]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	494d      	ldr	r1, [pc, #308]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d044      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d119      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e07f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dea:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e06f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e067      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0a:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4934      	ldr	r1, [pc, #208]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e1c:	f7fc fc5e 	bl	80016dc <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e24:	f7fc fc5a 	bl	80016dc <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e04f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 020c 	and.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1eb      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d20c      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b22      	ldr	r3, [pc, #136]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e032      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4916      	ldr	r1, [pc, #88]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9e:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eb2:	f000 f821 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	490a      	ldr	r1, [pc, #40]	; (8004eec <HAL_RCC_ClockConfig+0x1c0>)
 8004ec4:	5ccb      	ldrb	r3, [r1, r3]
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ece:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fc fbbe 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023c00 	.word	0x40023c00
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	08014320 	.word	0x08014320
 8004ef0:	20000000 	.word	0x20000000
 8004ef4:	20000004 	.word	0x20000004

08004ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004efc:	b090      	sub	sp, #64	; 0x40
 8004efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	2300      	movs	r3, #0
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f08:	2300      	movs	r3, #0
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f10:	4b59      	ldr	r3, [pc, #356]	; (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d00d      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x40>
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	f200 80a1 	bhi.w	8005064 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x34>
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f2a:	e09b      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b53      	ldr	r3, [pc, #332]	; (800507c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f30:	e09b      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f32:	4b53      	ldr	r3, [pc, #332]	; (8005080 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f36:	e098      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f38:	4b4f      	ldr	r3, [pc, #316]	; (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f42:	4b4d      	ldr	r3, [pc, #308]	; (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d028      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4e:	4b4a      	ldr	r3, [pc, #296]	; (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	2200      	movs	r2, #0
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	627a      	str	r2, [r7, #36]	; 0x24
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f60:	2100      	movs	r1, #0
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f64:	fb03 f201 	mul.w	r2, r3, r1
 8004f68:	2300      	movs	r3, #0
 8004f6a:	fb00 f303 	mul.w	r3, r0, r3
 8004f6e:	4413      	add	r3, r2
 8004f70:	4a43      	ldr	r2, [pc, #268]	; (8005080 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f72:	fba0 1202 	umull	r1, r2, r0, r2
 8004f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f78:	460a      	mov	r2, r1
 8004f7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f7e:	4413      	add	r3, r2
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	2200      	movs	r2, #0
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	61fa      	str	r2, [r7, #28]
 8004f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f92:	f7fb f925 	bl	80001e0 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9e:	e053      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa0:	4b35      	ldr	r3, [pc, #212]	; (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	099b      	lsrs	r3, r3, #6
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	617a      	str	r2, [r7, #20]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fb2:	f04f 0b00 	mov.w	fp, #0
 8004fb6:	4652      	mov	r2, sl
 8004fb8:	465b      	mov	r3, fp
 8004fba:	f04f 0000 	mov.w	r0, #0
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	0159      	lsls	r1, r3, #5
 8004fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc8:	0150      	lsls	r0, r2, #5
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	ebb2 080a 	subs.w	r8, r2, sl
 8004fd2:	eb63 090b 	sbc.w	r9, r3, fp
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fe2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fe6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fea:	ebb2 0408 	subs.w	r4, r2, r8
 8004fee:	eb63 0509 	sbc.w	r5, r3, r9
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	00eb      	lsls	r3, r5, #3
 8004ffc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005000:	00e2      	lsls	r2, r4, #3
 8005002:	4614      	mov	r4, r2
 8005004:	461d      	mov	r5, r3
 8005006:	eb14 030a 	adds.w	r3, r4, sl
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	eb45 030b 	adc.w	r3, r5, fp
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800501e:	4629      	mov	r1, r5
 8005020:	028b      	lsls	r3, r1, #10
 8005022:	4621      	mov	r1, r4
 8005024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005028:	4621      	mov	r1, r4
 800502a:	028a      	lsls	r2, r1, #10
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005032:	2200      	movs	r2, #0
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	60fa      	str	r2, [r7, #12]
 8005038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800503c:	f7fb f8d0 	bl	80001e0 <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4613      	mov	r3, r2
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	3301      	adds	r3, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005062:	e002      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_GetSysClockFreq+0x184>)
 8005066:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800506c:	4618      	mov	r0, r3
 800506e:	3740      	adds	r7, #64	; 0x40
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	00f42400 	.word	0x00f42400
 8005080:	017d7840 	.word	0x017d7840

08005084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005088:	4b03      	ldr	r3, [pc, #12]	; (8005098 <HAL_RCC_GetHCLKFreq+0x14>)
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20000000 	.word	0x20000000

0800509c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a0:	f7ff fff0 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0a9b      	lsrs	r3, r3, #10
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4903      	ldr	r1, [pc, #12]	; (80050c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40023800 	.word	0x40023800
 80050c0:	08014330 	.word	0x08014330

080050c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050c8:	f7ff ffdc 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0b5b      	lsrs	r3, r3, #13
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	; (80050e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40023800 	.word	0x40023800
 80050e8:	08014330 	.word	0x08014330

080050ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005110:	2b00      	cmp	r3, #0
 8005112:	d038      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005114:	4b68      	ldr	r3, [pc, #416]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800511a:	f7fc fadf 	bl	80016dc <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005122:	f7fc fadb 	bl	80016dc <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0bd      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005134:	4b61      	ldr	r3, [pc, #388]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f0      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	071b      	lsls	r3, r3, #28
 8005152:	495a      	ldr	r1, [pc, #360]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800515a:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005160:	f7fc fabc 	bl	80016dc <HAL_GetTick>
 8005164:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005168:	f7fc fab8 	bl	80016dc <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e09a      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800517a:	4b50      	ldr	r3, [pc, #320]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 8083 	beq.w	800529a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	4a47      	ldr	r2, [pc, #284]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a2:	6413      	str	r3, [r2, #64]	; 0x40
 80051a4:	4b45      	ldr	r3, [pc, #276]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051b0:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a42      	ldr	r2, [pc, #264]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051bc:	f7fc fa8e 	bl	80016dc <HAL_GetTick>
 80051c0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051c4:	f7fc fa8a 	bl	80016dc <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e06c      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051d6:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051e2:	4b36      	ldr	r3, [pc, #216]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ea:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02f      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d028      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005200:	4b2e      	ldr	r3, [pc, #184]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005208:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800520a:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005210:	4b2c      	ldr	r3, [pc, #176]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005216:	4a29      	ldr	r2, [pc, #164]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800521c:	4b27      	ldr	r3, [pc, #156]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d114      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005228:	f7fc fa58 	bl	80016dc <HAL_GetTick>
 800522c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522e:	e00a      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7fc fa54 	bl	80016dc <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f241 3288 	movw	r2, #5000	; 0x1388
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e034      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0ee      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800525e:	d10d      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005260:	4b16      	ldr	r3, [pc, #88]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	4911      	ldr	r1, [pc, #68]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
 800527a:	e005      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005282:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005286:	6093      	str	r3, [r2, #8]
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	4909      	ldr	r1, [pc, #36]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005296:	4313      	orrs	r3, r2
 8005298:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	7d1a      	ldrb	r2, [r3, #20]
 80052aa:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80052ac:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	42470068 	.word	0x42470068
 80052bc:	40023800 	.word	0x40023800
 80052c0:	40007000 	.word	0x40007000
 80052c4:	42470e40 	.word	0x42470e40
 80052c8:	424711e0 	.word	0x424711e0

080052cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e066      	b.n	80053b0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	7f5b      	ldrb	r3, [r3, #29]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fb ff00 	bl	80010f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	22ca      	movs	r2, #202	; 0xca
 8005304:	625a      	str	r2, [r3, #36]	; 0x24
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2253      	movs	r2, #83	; 0x53
 800530c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f87a 	bl	8005408 <RTC_EnterInitMode>
 8005314:	4603      	mov	r3, r0
 8005316:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d12c      	bne.n	8005378 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800532c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005330:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6899      	ldr	r1, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68d2      	ldr	r2, [r2, #12]
 8005358:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6919      	ldr	r1, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	041a      	lsls	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f881 	bl	8005476 <RTC_ExitInitMode>
 8005374:	4603      	mov	r3, r0
 8005376:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d113      	bne.n	80053a6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	22ff      	movs	r2, #255	; 0xff
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053d2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053d4:	f7fc f982 	bl	80016dc <HAL_GetTick>
 80053d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053da:	e009      	b.n	80053f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053dc:	f7fc f97e 	bl	80016dc <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ea:	d901      	bls.n	80053f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e007      	b.n	8005400 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0ee      	beq.n	80053dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d122      	bne.n	800546c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005434:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005436:	f7fc f951 	bl	80016dc <HAL_GetTick>
 800543a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800543c:	e00c      	b.n	8005458 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800543e:	f7fc f94d 	bl	80016dc <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800544c:	d904      	bls.n	8005458 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2204      	movs	r2, #4
 8005452:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <RTC_EnterInitMode+0x64>
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d1e8      	bne.n	800543e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005490:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff ff89 	bl	80053b8 <HAL_RTC_WaitForSynchro>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2204      	movs	r2, #4
 80054b0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e041      	b.n	8005556 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fb fe32 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f000 fc40 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e041      	b.n	80055f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f839 	bl	80055fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3304      	adds	r3, #4
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f000 fbf1 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e041      	b.n	80056a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f839 	bl	80056ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f000 fb98 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d122      	bne.n	800571e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d11b      	bne.n	800571e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f06f 0202 	mvn.w	r2, #2
 80056ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fb1e 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 800570a:	e005      	b.n	8005718 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fb10 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fb21 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b04      	cmp	r3, #4
 800572a:	d122      	bne.n	8005772 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b04      	cmp	r3, #4
 8005738:	d11b      	bne.n	8005772 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f06f 0204 	mvn.w	r2, #4
 8005742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 faf4 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 800575e:	e005      	b.n	800576c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fae6 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 faf7 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b08      	cmp	r3, #8
 800577e:	d122      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b08      	cmp	r3, #8
 800578c:	d11b      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0208 	mvn.w	r2, #8
 8005796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2204      	movs	r2, #4
 800579c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 faca 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 80057b2:	e005      	b.n	80057c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fabc 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 facd 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d122      	bne.n	800581a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d11b      	bne.n	800581a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f06f 0210 	mvn.w	r2, #16
 80057ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2208      	movs	r2, #8
 80057f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 faa0 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 8005806:	e005      	b.n	8005814 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fa92 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 faa3 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10e      	bne.n	8005846 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d107      	bne.n	8005846 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f06f 0201 	mvn.w	r2, #1
 800583e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fa6c 	bl	8005d1e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005850:	2b80      	cmp	r3, #128	; 0x80
 8005852:	d10e      	bne.n	8005872 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	d107      	bne.n	8005872 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800586a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fec5 	bl	80065fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d10e      	bne.n	800589e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d107      	bne.n	800589e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fa68 	bl	8005d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d10e      	bne.n	80058ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d107      	bne.n	80058ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f06f 0220 	mvn.w	r2, #32
 80058c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fe8f 	bl	80065e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ca:	bf00      	nop
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e088      	b.n	8005a02 <HAL_TIM_IC_ConfigChannel+0x130>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11b      	bne.n	8005936 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f000 fc45 	bl	800619c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 020c 	bic.w	r2, r2, #12
 8005920:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6999      	ldr	r1, [r3, #24]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	619a      	str	r2, [r3, #24]
 8005934:	e060      	b.n	80059f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d11c      	bne.n	8005976 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f000 fcbd 	bl	80062ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800595e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6999      	ldr	r1, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	021a      	lsls	r2, r3, #8
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	619a      	str	r2, [r3, #24]
 8005974:	e040      	b.n	80059f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d11b      	bne.n	80059b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f000 fd0a 	bl	80063a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 020c 	bic.w	r2, r2, #12
 800599e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69d9      	ldr	r1, [r3, #28]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	61da      	str	r2, [r3, #28]
 80059b2:	e021      	b.n	80059f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	d11c      	bne.n	80059f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6819      	ldr	r1, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f000 fd27 	bl	800641c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69d9      	ldr	r1, [r3, #28]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	021a      	lsls	r2, r3, #8
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	61da      	str	r2, [r3, #28]
 80059f2:	e001      	b.n	80059f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e0ae      	b.n	8005b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	f200 809f 	bhi.w	8005b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a75 	.word	0x08005a75
 8005a44:	08005b79 	.word	0x08005b79
 8005a48:	08005b79 	.word	0x08005b79
 8005a4c:	08005b79 	.word	0x08005b79
 8005a50:	08005ab5 	.word	0x08005ab5
 8005a54:	08005b79 	.word	0x08005b79
 8005a58:	08005b79 	.word	0x08005b79
 8005a5c:	08005b79 	.word	0x08005b79
 8005a60:	08005af7 	.word	0x08005af7
 8005a64:	08005b79 	.word	0x08005b79
 8005a68:	08005b79 	.word	0x08005b79
 8005a6c:	08005b79 	.word	0x08005b79
 8005a70:	08005b37 	.word	0x08005b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa02 	bl	8005e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0208 	orr.w	r2, r2, #8
 8005a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0204 	bic.w	r2, r2, #4
 8005a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	619a      	str	r2, [r3, #24]
      break;
 8005ab2:	e064      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fa48 	bl	8005f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	021a      	lsls	r2, r3, #8
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	619a      	str	r2, [r3, #24]
      break;
 8005af4:	e043      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fa93 	bl	8006028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0208 	orr.w	r2, r2, #8
 8005b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0204 	bic.w	r2, r2, #4
 8005b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	61da      	str	r2, [r3, #28]
      break;
 8005b34:	e023      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fadd 	bl	80060fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	61da      	str	r2, [r3, #28]
      break;
 8005b76:	e002      	b.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIM_ConfigClockSource+0x1c>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e0b4      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x186>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be4:	d03e      	beq.n	8005c64 <HAL_TIM_ConfigClockSource+0xd4>
 8005be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bea:	f200 8087 	bhi.w	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	f000 8086 	beq.w	8005d02 <HAL_TIM_ConfigClockSource+0x172>
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfa:	d87f      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b70      	cmp	r3, #112	; 0x70
 8005bfe:	d01a      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xa6>
 8005c00:	2b70      	cmp	r3, #112	; 0x70
 8005c02:	d87b      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	2b60      	cmp	r3, #96	; 0x60
 8005c06:	d050      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x11a>
 8005c08:	2b60      	cmp	r3, #96	; 0x60
 8005c0a:	d877      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b50      	cmp	r3, #80	; 0x50
 8005c0e:	d03c      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0xfa>
 8005c10:	2b50      	cmp	r3, #80	; 0x50
 8005c12:	d873      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d058      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x13a>
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d86f      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d064      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c20:	2b30      	cmp	r3, #48	; 0x30
 8005c22:	d86b      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d060      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d867      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d05c      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d05a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c34:	e062      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6899      	ldr	r1, [r3, #8]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f000 fc41 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	609a      	str	r2, [r3, #8]
      break;
 8005c62:	e04f      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6899      	ldr	r1, [r3, #8]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f000 fc2a 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c86:	609a      	str	r2, [r3, #8]
      break;
 8005c88:	e03c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6859      	ldr	r1, [r3, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f000 fae8 	bl	800626c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2150      	movs	r1, #80	; 0x50
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fbf7 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005ca8:	e02c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6859      	ldr	r1, [r3, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f000 fb44 	bl	8006344 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2160      	movs	r1, #96	; 0x60
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fbe7 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005cc8:	e01c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f000 fac8 	bl	800626c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2140      	movs	r1, #64	; 0x40
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fbd7 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005ce8:	e00c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f000 fbce 	bl	8006496 <TIM_ITRx_SetConfig>
      break;
 8005cfa:	e003      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	e000      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a34      	ldr	r2, [pc, #208]	; (8005e68 <TIM_Base_SetConfig+0xe4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00f      	beq.n	8005dbc <TIM_Base_SetConfig+0x38>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d00b      	beq.n	8005dbc <TIM_Base_SetConfig+0x38>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a31      	ldr	r2, [pc, #196]	; (8005e6c <TIM_Base_SetConfig+0xe8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d007      	beq.n	8005dbc <TIM_Base_SetConfig+0x38>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a30      	ldr	r2, [pc, #192]	; (8005e70 <TIM_Base_SetConfig+0xec>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_Base_SetConfig+0x38>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a2f      	ldr	r2, [pc, #188]	; (8005e74 <TIM_Base_SetConfig+0xf0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d108      	bne.n	8005dce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a25      	ldr	r2, [pc, #148]	; (8005e68 <TIM_Base_SetConfig+0xe4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01b      	beq.n	8005e0e <TIM_Base_SetConfig+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ddc:	d017      	beq.n	8005e0e <TIM_Base_SetConfig+0x8a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <TIM_Base_SetConfig+0xe8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <TIM_Base_SetConfig+0x8a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a21      	ldr	r2, [pc, #132]	; (8005e70 <TIM_Base_SetConfig+0xec>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00f      	beq.n	8005e0e <TIM_Base_SetConfig+0x8a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <TIM_Base_SetConfig+0xf0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00b      	beq.n	8005e0e <TIM_Base_SetConfig+0x8a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1f      	ldr	r2, [pc, #124]	; (8005e78 <TIM_Base_SetConfig+0xf4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d007      	beq.n	8005e0e <TIM_Base_SetConfig+0x8a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <TIM_Base_SetConfig+0xf8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_Base_SetConfig+0x8a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <TIM_Base_SetConfig+0xfc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d108      	bne.n	8005e20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a08      	ldr	r2, [pc, #32]	; (8005e68 <TIM_Base_SetConfig+0xe4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d103      	bne.n	8005e54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	615a      	str	r2, [r3, #20]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800

08005e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0201 	bic.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0303 	bic.w	r3, r3, #3
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 0302 	bic.w	r3, r3, #2
 8005ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <TIM_OC1_SetConfig+0xc8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10c      	bne.n	8005efa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0308 	bic.w	r3, r3, #8
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f023 0304 	bic.w	r3, r3, #4
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <TIM_OC1_SetConfig+0xc8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d111      	bne.n	8005f26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40010000 	.word	0x40010000

08005f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f023 0210 	bic.w	r2, r3, #16
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0320 	bic.w	r3, r3, #32
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1e      	ldr	r2, [pc, #120]	; (8006024 <TIM_OC2_SetConfig+0xd4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10d      	bne.n	8005fcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <TIM_OC2_SetConfig+0xd4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d113      	bne.n	8005ffc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000

08006028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <TIM_OC3_SetConfig+0xd0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d10d      	bne.n	80060a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800608c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <TIM_OC3_SetConfig+0xd0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d113      	bne.n	80060d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40010000 	.word	0x40010000

080060fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	031b      	lsls	r3, r3, #12
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <TIM_OC4_SetConfig+0x9c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d109      	bne.n	8006170 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	019b      	lsls	r3, r3, #6
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000

0800619c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a24      	ldr	r2, [pc, #144]	; (8006258 <TIM_TI1_SetConfig+0xbc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <TIM_TI1_SetConfig+0x56>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d0:	d00f      	beq.n	80061f2 <TIM_TI1_SetConfig+0x56>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a21      	ldr	r2, [pc, #132]	; (800625c <TIM_TI1_SetConfig+0xc0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_TI1_SetConfig+0x56>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a20      	ldr	r2, [pc, #128]	; (8006260 <TIM_TI1_SetConfig+0xc4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_TI1_SetConfig+0x56>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <TIM_TI1_SetConfig+0xc8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_TI1_SetConfig+0x56>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <TIM_TI1_SetConfig+0xcc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <TIM_TI1_SetConfig+0x5a>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <TIM_TI1_SetConfig+0x5c>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0303 	bic.w	r3, r3, #3
 8006202:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e003      	b.n	8006216 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800621c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	b2db      	uxtb	r3, r3
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f023 030a 	bic.w	r3, r3, #10
 8006230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f003 030a 	and.w	r3, r3, #10
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800
 8006264:	40000c00 	.word	0x40000c00
 8006268:	40014000 	.word	0x40014000

0800626c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f023 0201 	bic.w	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 030a 	bic.w	r3, r3, #10
 80062a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f023 0210 	bic.w	r2, r3, #16
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	031b      	lsls	r3, r3, #12
 800630e:	b29b      	uxth	r3, r3
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800631c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	621a      	str	r2, [r3, #32]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f023 0210 	bic.w	r2, r3, #16
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800636e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	031b      	lsls	r3, r3, #12
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006380:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f023 0303 	bic.w	r3, r3, #3
 80063d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	621a      	str	r2, [r3, #32]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006448:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800645a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	031b      	lsls	r3, r3, #12
 8006460:	b29b      	uxth	r3, r3
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800646e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	031b      	lsls	r3, r3, #12
 8006474:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f043 0307 	orr.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006520:	2302      	movs	r3, #2
 8006522:	e050      	b.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d018      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006570:	d013      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00e      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a16      	ldr	r2, [pc, #88]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d009      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d004      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a13      	ldr	r2, [pc, #76]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d10c      	bne.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40014000 	.word	0x40014000

080065e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e03f      	b.n	80066a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fa fe7a 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2224      	movs	r2, #36	; 0x24
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fc7b 	bl	8006f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b0ba      	sub	sp, #232	; 0xe8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066d8:	2300      	movs	r3, #0
 80066da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80066ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10f      	bne.n	8006712 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_UART_IRQHandler+0x66>
 80066fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fb65 	bl	8006dda <UART_Receive_IT>
      return;
 8006710:	e256      	b.n	8006bc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 80de 	beq.w	80068d8 <HAL_UART_IRQHandler+0x22c>
 800671c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80d1 	beq.w	80068d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <HAL_UART_IRQHandler+0xae>
 8006742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f043 0201 	orr.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_UART_IRQHandler+0xd2>
 8006766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f043 0202 	orr.w	r2, r3, #2
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_UART_IRQHandler+0xf6>
 800678a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f043 0204 	orr.w	r2, r3, #4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d011      	beq.n	80067d2 <HAL_UART_IRQHandler+0x126>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d105      	bne.n	80067c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f043 0208 	orr.w	r2, r3, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 81ed 	beq.w	8006bb6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_UART_IRQHandler+0x14e>
 80067e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 faf0 	bl	8006dda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	bf0c      	ite	eq
 8006808:	2301      	moveq	r3, #1
 800680a:	2300      	movne	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <HAL_UART_IRQHandler+0x17a>
 800681e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006822:	2b00      	cmp	r3, #0
 8006824:	d04f      	beq.n	80068c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9f8 	bl	8006c1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006836:	2b40      	cmp	r3, #64	; 0x40
 8006838:	d141      	bne.n	80068be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3314      	adds	r3, #20
 8006862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800686a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800687e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1d9      	bne.n	800683a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	2b00      	cmp	r3, #0
 800688c:	d013      	beq.n	80068b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	4a7d      	ldr	r2, [pc, #500]	; (8006a88 <HAL_UART_IRQHandler+0x3dc>)
 8006894:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	4618      	mov	r0, r3
 800689c:	f7fb f97e 	bl	8001b9c <HAL_DMA_Abort_IT>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d016      	beq.n	80068d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	e00e      	b.n	80068d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f99a 	bl	8006bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068bc:	e00a      	b.n	80068d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f996 	bl	8006bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c4:	e006      	b.n	80068d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f992 	bl	8006bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068d2:	e170      	b.n	8006bb6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d4:	bf00      	nop
    return;
 80068d6:	e16e      	b.n	8006bb6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	2b01      	cmp	r3, #1
 80068de:	f040 814a 	bne.w	8006b76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8143 	beq.w	8006b76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 813c 	beq.w	8006b76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068fe:	2300      	movs	r3, #0
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	60bb      	str	r3, [r7, #8]
 8006912:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	f040 80b4 	bne.w	8006a8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8140 	beq.w	8006bba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800693e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006942:	429a      	cmp	r2, r3
 8006944:	f080 8139 	bcs.w	8006bba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800694e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	f000 8088 	beq.w	8006a6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	330c      	adds	r3, #12
 8006964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800697c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800698a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800698e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006996:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1d9      	bne.n	800695e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3314      	adds	r3, #20
 80069b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3314      	adds	r3, #20
 80069ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e1      	bne.n	80069aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3314      	adds	r3, #20
 80069ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3314      	adds	r3, #20
 8006a06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e3      	bne.n	80069e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3e:	f023 0310 	bic.w	r3, r3, #16
 8006a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	330c      	adds	r3, #12
 8006a4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a50:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e3      	bne.n	8006a2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fb f827 	bl	8001abc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8c0 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a84:	e099      	b.n	8006bba <HAL_UART_IRQHandler+0x50e>
 8006a86:	bf00      	nop
 8006a88:	08006ce3 	.word	0x08006ce3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 808b 	beq.w	8006bbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8086 	beq.w	8006bbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ad6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ad8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006adc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e3      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3314      	adds	r3, #20
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	623b      	str	r3, [r7, #32]
   return(result);
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3314      	adds	r3, #20
 8006b0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b0e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e3      	bne.n	8006aea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0310 	bic.w	r3, r3, #16
 8006b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b54:	61fa      	str	r2, [r7, #28]
 8006b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	69b9      	ldr	r1, [r7, #24]
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	617b      	str	r3, [r7, #20]
   return(result);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e3      	bne.n	8006b30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f848 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b74:	e023      	b.n	8006bbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d009      	beq.n	8006b96 <HAL_UART_IRQHandler+0x4ea>
 8006b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f8bb 	bl	8006d0a <UART_Transmit_IT>
    return;
 8006b94:	e014      	b.n	8006bc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x514>
 8006ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d008      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f8fb 	bl	8006daa <UART_EndTransmit_IT>
    return;
 8006bb4:	e004      	b.n	8006bc0 <HAL_UART_IRQHandler+0x514>
    return;
 8006bb6:	bf00      	nop
 8006bb8:	e002      	b.n	8006bc0 <HAL_UART_IRQHandler+0x514>
      return;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <HAL_UART_IRQHandler+0x514>
      return;
 8006bbe:	bf00      	nop
  }
}
 8006bc0:	37e8      	adds	r7, #232	; 0xe8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b095      	sub	sp, #84	; 0x54
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c44:	643a      	str	r2, [r7, #64]	; 0x40
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e5      	bne.n	8006c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	f023 0301 	bic.w	r3, r3, #1
 8006c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3314      	adds	r3, #20
 8006c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e5      	bne.n	8006c58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d119      	bne.n	8006cc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f023 0310 	bic.w	r3, r3, #16
 8006caa:	647b      	str	r3, [r7, #68]	; 0x44
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cb4:	61ba      	str	r2, [r7, #24]
 8006cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6979      	ldr	r1, [r7, #20]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cd6:	bf00      	nop
 8006cd8:	3754      	adds	r7, #84	; 0x54
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff ff77 	bl	8006bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b21      	cmp	r3, #33	; 0x21
 8006d1c:	d13e      	bne.n	8006d9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d26:	d114      	bne.n	8006d52 <UART_Transmit_IT+0x48>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d110      	bne.n	8006d52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	1c9a      	adds	r2, r3, #2
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	621a      	str	r2, [r3, #32]
 8006d50:	e008      	b.n	8006d64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	1c59      	adds	r1, r3, #1
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6211      	str	r1, [r2, #32]
 8006d5c:	781a      	ldrb	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4619      	mov	r1, r3
 8006d72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10f      	bne.n	8006d98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e000      	b.n	8006d9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d9c:	2302      	movs	r3, #2
  }
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff fefc 	bl	8006bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b08c      	sub	sp, #48	; 0x30
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b22      	cmp	r3, #34	; 0x22
 8006dec:	f040 80ab 	bne.w	8006f46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df8:	d117      	bne.n	8006e2a <UART_Receive_IT+0x50>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d113      	bne.n	8006e2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	1c9a      	adds	r2, r3, #2
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	629a      	str	r2, [r3, #40]	; 0x28
 8006e28:	e026      	b.n	8006e78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3c:	d007      	beq.n	8006e4e <UART_Receive_IT+0x74>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10a      	bne.n	8006e5c <UART_Receive_IT+0x82>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	e008      	b.n	8006e6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	4619      	mov	r1, r3
 8006e86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d15a      	bne.n	8006f42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0220 	bic.w	r2, r2, #32
 8006e9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695a      	ldr	r2, [r3, #20]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0201 	bic.w	r2, r2, #1
 8006eba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d135      	bne.n	8006f38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	330c      	adds	r3, #12
 8006ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f023 0310 	bic.w	r3, r3, #16
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef2:	623a      	str	r2, [r7, #32]
 8006ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	69f9      	ldr	r1, [r7, #28]
 8006ef8:	6a3a      	ldr	r2, [r7, #32]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b10      	cmp	r3, #16
 8006f12:	d10a      	bne.n	8006f2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fe67 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
 8006f36:	e002      	b.n	8006f3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fe4f 	bl	8006bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e002      	b.n	8006f48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e000      	b.n	8006f48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006f46:	2302      	movs	r3, #2
  }
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3730      	adds	r7, #48	; 0x30
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f54:	b0c0      	sub	sp, #256	; 0x100
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6c:	68d9      	ldr	r1, [r3, #12]
 8006f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	ea40 0301 	orr.w	r3, r0, r1
 8006f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fa8:	f021 010c 	bic.w	r1, r1, #12
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	6999      	ldr	r1, [r3, #24]
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	ea40 0301 	orr.w	r3, r0, r1
 8006fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4b8f      	ldr	r3, [pc, #572]	; (800721c <UART_SetConfig+0x2cc>)
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d005      	beq.n	8006ff0 <UART_SetConfig+0xa0>
 8006fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b8d      	ldr	r3, [pc, #564]	; (8007220 <UART_SetConfig+0x2d0>)
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d104      	bne.n	8006ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fe f868 	bl	80050c4 <HAL_RCC_GetPCLK2Freq>
 8006ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ff8:	e003      	b.n	8007002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ffa:	f7fe f84f 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 8006ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800700c:	f040 810c 	bne.w	8007228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007014:	2200      	movs	r2, #0
 8007016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800701a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800701e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007022:	4622      	mov	r2, r4
 8007024:	462b      	mov	r3, r5
 8007026:	1891      	adds	r1, r2, r2
 8007028:	65b9      	str	r1, [r7, #88]	; 0x58
 800702a:	415b      	adcs	r3, r3
 800702c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800702e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007032:	4621      	mov	r1, r4
 8007034:	eb12 0801 	adds.w	r8, r2, r1
 8007038:	4629      	mov	r1, r5
 800703a:	eb43 0901 	adc.w	r9, r3, r1
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800704a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800704e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007052:	4690      	mov	r8, r2
 8007054:	4699      	mov	r9, r3
 8007056:	4623      	mov	r3, r4
 8007058:	eb18 0303 	adds.w	r3, r8, r3
 800705c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007060:	462b      	mov	r3, r5
 8007062:	eb49 0303 	adc.w	r3, r9, r3
 8007066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800706a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800707a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800707e:	460b      	mov	r3, r1
 8007080:	18db      	adds	r3, r3, r3
 8007082:	653b      	str	r3, [r7, #80]	; 0x50
 8007084:	4613      	mov	r3, r2
 8007086:	eb42 0303 	adc.w	r3, r2, r3
 800708a:	657b      	str	r3, [r7, #84]	; 0x54
 800708c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007094:	f7f9 f8a4 	bl	80001e0 <__aeabi_uldivmod>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4b61      	ldr	r3, [pc, #388]	; (8007224 <UART_SetConfig+0x2d4>)
 800709e:	fba3 2302 	umull	r2, r3, r3, r2
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	011c      	lsls	r4, r3, #4
 80070a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070b8:	4642      	mov	r2, r8
 80070ba:	464b      	mov	r3, r9
 80070bc:	1891      	adds	r1, r2, r2
 80070be:	64b9      	str	r1, [r7, #72]	; 0x48
 80070c0:	415b      	adcs	r3, r3
 80070c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070c8:	4641      	mov	r1, r8
 80070ca:	eb12 0a01 	adds.w	sl, r2, r1
 80070ce:	4649      	mov	r1, r9
 80070d0:	eb43 0b01 	adc.w	fp, r3, r1
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070e8:	4692      	mov	sl, r2
 80070ea:	469b      	mov	fp, r3
 80070ec:	4643      	mov	r3, r8
 80070ee:	eb1a 0303 	adds.w	r3, sl, r3
 80070f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070f6:	464b      	mov	r3, r9
 80070f8:	eb4b 0303 	adc.w	r3, fp, r3
 80070fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800710c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007114:	460b      	mov	r3, r1
 8007116:	18db      	adds	r3, r3, r3
 8007118:	643b      	str	r3, [r7, #64]	; 0x40
 800711a:	4613      	mov	r3, r2
 800711c:	eb42 0303 	adc.w	r3, r2, r3
 8007120:	647b      	str	r3, [r7, #68]	; 0x44
 8007122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800712a:	f7f9 f859 	bl	80001e0 <__aeabi_uldivmod>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4611      	mov	r1, r2
 8007134:	4b3b      	ldr	r3, [pc, #236]	; (8007224 <UART_SetConfig+0x2d4>)
 8007136:	fba3 2301 	umull	r2, r3, r3, r1
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	2264      	movs	r2, #100	; 0x64
 800713e:	fb02 f303 	mul.w	r3, r2, r3
 8007142:	1acb      	subs	r3, r1, r3
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800714a:	4b36      	ldr	r3, [pc, #216]	; (8007224 <UART_SetConfig+0x2d4>)
 800714c:	fba3 2302 	umull	r2, r3, r3, r2
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007158:	441c      	add	r4, r3
 800715a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800715e:	2200      	movs	r2, #0
 8007160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	1891      	adds	r1, r2, r2
 8007172:	63b9      	str	r1, [r7, #56]	; 0x38
 8007174:	415b      	adcs	r3, r3
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800717c:	4641      	mov	r1, r8
 800717e:	1851      	adds	r1, r2, r1
 8007180:	6339      	str	r1, [r7, #48]	; 0x30
 8007182:	4649      	mov	r1, r9
 8007184:	414b      	adcs	r3, r1
 8007186:	637b      	str	r3, [r7, #52]	; 0x34
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007194:	4659      	mov	r1, fp
 8007196:	00cb      	lsls	r3, r1, #3
 8007198:	4651      	mov	r1, sl
 800719a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800719e:	4651      	mov	r1, sl
 80071a0:	00ca      	lsls	r2, r1, #3
 80071a2:	4610      	mov	r0, r2
 80071a4:	4619      	mov	r1, r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	4642      	mov	r2, r8
 80071aa:	189b      	adds	r3, r3, r2
 80071ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071b0:	464b      	mov	r3, r9
 80071b2:	460a      	mov	r2, r1
 80071b4:	eb42 0303 	adc.w	r3, r2, r3
 80071b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071d0:	460b      	mov	r3, r1
 80071d2:	18db      	adds	r3, r3, r3
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d6:	4613      	mov	r3, r2
 80071d8:	eb42 0303 	adc.w	r3, r2, r3
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071e6:	f7f8 fffb 	bl	80001e0 <__aeabi_uldivmod>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <UART_SetConfig+0x2d4>)
 80071f0:	fba3 1302 	umull	r1, r3, r3, r2
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	2164      	movs	r1, #100	; 0x64
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	3332      	adds	r3, #50	; 0x32
 8007202:	4a08      	ldr	r2, [pc, #32]	; (8007224 <UART_SetConfig+0x2d4>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	f003 0207 	and.w	r2, r3, #7
 800720e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4422      	add	r2, r4
 8007216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007218:	e105      	b.n	8007426 <UART_SetConfig+0x4d6>
 800721a:	bf00      	nop
 800721c:	40011000 	.word	0x40011000
 8007220:	40011400 	.word	0x40011400
 8007224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722c:	2200      	movs	r2, #0
 800722e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800723a:	4642      	mov	r2, r8
 800723c:	464b      	mov	r3, r9
 800723e:	1891      	adds	r1, r2, r2
 8007240:	6239      	str	r1, [r7, #32]
 8007242:	415b      	adcs	r3, r3
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
 8007246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800724a:	4641      	mov	r1, r8
 800724c:	1854      	adds	r4, r2, r1
 800724e:	4649      	mov	r1, r9
 8007250:	eb43 0501 	adc.w	r5, r3, r1
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	00eb      	lsls	r3, r5, #3
 800725e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007262:	00e2      	lsls	r2, r4, #3
 8007264:	4614      	mov	r4, r2
 8007266:	461d      	mov	r5, r3
 8007268:	4643      	mov	r3, r8
 800726a:	18e3      	adds	r3, r4, r3
 800726c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007270:	464b      	mov	r3, r9
 8007272:	eb45 0303 	adc.w	r3, r5, r3
 8007276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007296:	4629      	mov	r1, r5
 8007298:	008b      	lsls	r3, r1, #2
 800729a:	4621      	mov	r1, r4
 800729c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072a0:	4621      	mov	r1, r4
 80072a2:	008a      	lsls	r2, r1, #2
 80072a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072a8:	f7f8 ff9a 	bl	80001e0 <__aeabi_uldivmod>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4b60      	ldr	r3, [pc, #384]	; (8007434 <UART_SetConfig+0x4e4>)
 80072b2:	fba3 2302 	umull	r2, r3, r3, r2
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	011c      	lsls	r4, r3, #4
 80072ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072cc:	4642      	mov	r2, r8
 80072ce:	464b      	mov	r3, r9
 80072d0:	1891      	adds	r1, r2, r2
 80072d2:	61b9      	str	r1, [r7, #24]
 80072d4:	415b      	adcs	r3, r3
 80072d6:	61fb      	str	r3, [r7, #28]
 80072d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072dc:	4641      	mov	r1, r8
 80072de:	1851      	adds	r1, r2, r1
 80072e0:	6139      	str	r1, [r7, #16]
 80072e2:	4649      	mov	r1, r9
 80072e4:	414b      	adcs	r3, r1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072f4:	4659      	mov	r1, fp
 80072f6:	00cb      	lsls	r3, r1, #3
 80072f8:	4651      	mov	r1, sl
 80072fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072fe:	4651      	mov	r1, sl
 8007300:	00ca      	lsls	r2, r1, #3
 8007302:	4610      	mov	r0, r2
 8007304:	4619      	mov	r1, r3
 8007306:	4603      	mov	r3, r0
 8007308:	4642      	mov	r2, r8
 800730a:	189b      	adds	r3, r3, r2
 800730c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007310:	464b      	mov	r3, r9
 8007312:	460a      	mov	r2, r1
 8007314:	eb42 0303 	adc.w	r3, r2, r3
 8007318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	67bb      	str	r3, [r7, #120]	; 0x78
 8007326:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007334:	4649      	mov	r1, r9
 8007336:	008b      	lsls	r3, r1, #2
 8007338:	4641      	mov	r1, r8
 800733a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733e:	4641      	mov	r1, r8
 8007340:	008a      	lsls	r2, r1, #2
 8007342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007346:	f7f8 ff4b 	bl	80001e0 <__aeabi_uldivmod>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4b39      	ldr	r3, [pc, #228]	; (8007434 <UART_SetConfig+0x4e4>)
 8007350:	fba3 1302 	umull	r1, r3, r3, r2
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	2164      	movs	r1, #100	; 0x64
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	3332      	adds	r3, #50	; 0x32
 8007362:	4a34      	ldr	r2, [pc, #208]	; (8007434 <UART_SetConfig+0x4e4>)
 8007364:	fba2 2303 	umull	r2, r3, r2, r3
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800736e:	441c      	add	r4, r3
 8007370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007374:	2200      	movs	r2, #0
 8007376:	673b      	str	r3, [r7, #112]	; 0x70
 8007378:	677a      	str	r2, [r7, #116]	; 0x74
 800737a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800737e:	4642      	mov	r2, r8
 8007380:	464b      	mov	r3, r9
 8007382:	1891      	adds	r1, r2, r2
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	415b      	adcs	r3, r3
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800738e:	4641      	mov	r1, r8
 8007390:	1851      	adds	r1, r2, r1
 8007392:	6039      	str	r1, [r7, #0]
 8007394:	4649      	mov	r1, r9
 8007396:	414b      	adcs	r3, r1
 8007398:	607b      	str	r3, [r7, #4]
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073a6:	4659      	mov	r1, fp
 80073a8:	00cb      	lsls	r3, r1, #3
 80073aa:	4651      	mov	r1, sl
 80073ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073b0:	4651      	mov	r1, sl
 80073b2:	00ca      	lsls	r2, r1, #3
 80073b4:	4610      	mov	r0, r2
 80073b6:	4619      	mov	r1, r3
 80073b8:	4603      	mov	r3, r0
 80073ba:	4642      	mov	r2, r8
 80073bc:	189b      	adds	r3, r3, r2
 80073be:	66bb      	str	r3, [r7, #104]	; 0x68
 80073c0:	464b      	mov	r3, r9
 80073c2:	460a      	mov	r2, r1
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	663b      	str	r3, [r7, #96]	; 0x60
 80073d4:	667a      	str	r2, [r7, #100]	; 0x64
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073e2:	4649      	mov	r1, r9
 80073e4:	008b      	lsls	r3, r1, #2
 80073e6:	4641      	mov	r1, r8
 80073e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ec:	4641      	mov	r1, r8
 80073ee:	008a      	lsls	r2, r1, #2
 80073f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073f4:	f7f8 fef4 	bl	80001e0 <__aeabi_uldivmod>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <UART_SetConfig+0x4e4>)
 80073fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	2164      	movs	r1, #100	; 0x64
 8007406:	fb01 f303 	mul.w	r3, r1, r3
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	3332      	adds	r3, #50	; 0x32
 8007410:	4a08      	ldr	r2, [pc, #32]	; (8007434 <UART_SetConfig+0x4e4>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	f003 020f 	and.w	r2, r3, #15
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4422      	add	r2, r4
 8007424:	609a      	str	r2, [r3, #8]
}
 8007426:	bf00      	nop
 8007428:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800742c:	46bd      	mov	sp, r7
 800742e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007432:	bf00      	nop
 8007434:	51eb851f 	.word	0x51eb851f

08007438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007438:	b084      	sub	sp, #16
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	f107 001c 	add.w	r0, r7, #28
 8007446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	2b01      	cmp	r3, #1
 800744e:	d122      	bne.n	8007496 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fbee 	bl	8008c6c <USB_CoreReset>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e01a      	b.n	80074cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fbe2 	bl	8008c6c <USB_CoreReset>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
 80074be:	e005      	b.n	80074cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d10b      	bne.n	80074ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f043 0206 	orr.w	r2, r3, #6
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074f6:	b004      	add	sp, #16
 80074f8:	4770      	bx	lr
	...

080074fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	4613      	mov	r3, r2
 8007508:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d165      	bne.n	80075dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4a41      	ldr	r2, [pc, #260]	; (8007618 <USB_SetTurnaroundTime+0x11c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d906      	bls.n	8007526 <USB_SetTurnaroundTime+0x2a>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4a40      	ldr	r2, [pc, #256]	; (800761c <USB_SetTurnaroundTime+0x120>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d202      	bcs.n	8007526 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007520:	230f      	movs	r3, #15
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e062      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4a3c      	ldr	r2, [pc, #240]	; (800761c <USB_SetTurnaroundTime+0x120>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d306      	bcc.n	800753c <USB_SetTurnaroundTime+0x40>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4a3b      	ldr	r2, [pc, #236]	; (8007620 <USB_SetTurnaroundTime+0x124>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d202      	bcs.n	800753c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007536:	230e      	movs	r3, #14
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e057      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	4a38      	ldr	r2, [pc, #224]	; (8007620 <USB_SetTurnaroundTime+0x124>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d306      	bcc.n	8007552 <USB_SetTurnaroundTime+0x56>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4a37      	ldr	r2, [pc, #220]	; (8007624 <USB_SetTurnaroundTime+0x128>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d202      	bcs.n	8007552 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800754c:	230d      	movs	r3, #13
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	e04c      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4a33      	ldr	r2, [pc, #204]	; (8007624 <USB_SetTurnaroundTime+0x128>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d306      	bcc.n	8007568 <USB_SetTurnaroundTime+0x6c>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4a32      	ldr	r2, [pc, #200]	; (8007628 <USB_SetTurnaroundTime+0x12c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d802      	bhi.n	8007568 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007562:	230c      	movs	r3, #12
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	e041      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4a2f      	ldr	r2, [pc, #188]	; (8007628 <USB_SetTurnaroundTime+0x12c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d906      	bls.n	800757e <USB_SetTurnaroundTime+0x82>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4a2e      	ldr	r2, [pc, #184]	; (800762c <USB_SetTurnaroundTime+0x130>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d802      	bhi.n	800757e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007578:	230b      	movs	r3, #11
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	e036      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	4a2a      	ldr	r2, [pc, #168]	; (800762c <USB_SetTurnaroundTime+0x130>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d906      	bls.n	8007594 <USB_SetTurnaroundTime+0x98>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	4a29      	ldr	r2, [pc, #164]	; (8007630 <USB_SetTurnaroundTime+0x134>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d802      	bhi.n	8007594 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800758e:	230a      	movs	r3, #10
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	e02b      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4a26      	ldr	r2, [pc, #152]	; (8007630 <USB_SetTurnaroundTime+0x134>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d906      	bls.n	80075aa <USB_SetTurnaroundTime+0xae>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4a25      	ldr	r2, [pc, #148]	; (8007634 <USB_SetTurnaroundTime+0x138>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d202      	bcs.n	80075aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80075a4:	2309      	movs	r3, #9
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	e020      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4a21      	ldr	r2, [pc, #132]	; (8007634 <USB_SetTurnaroundTime+0x138>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d306      	bcc.n	80075c0 <USB_SetTurnaroundTime+0xc4>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	4a20      	ldr	r2, [pc, #128]	; (8007638 <USB_SetTurnaroundTime+0x13c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d802      	bhi.n	80075c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075ba:	2308      	movs	r3, #8
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	e015      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <USB_SetTurnaroundTime+0x13c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d906      	bls.n	80075d6 <USB_SetTurnaroundTime+0xda>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4a1c      	ldr	r2, [pc, #112]	; (800763c <USB_SetTurnaroundTime+0x140>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d202      	bcs.n	80075d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075d0:	2307      	movs	r3, #7
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	e00a      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075d6:	2306      	movs	r3, #6
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	e007      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d102      	bne.n	80075e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075e2:	2309      	movs	r3, #9
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	e001      	b.n	80075ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075e8:	2309      	movs	r3, #9
 80075ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	029b      	lsls	r3, r3, #10
 8007600:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007604:	431a      	orrs	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	00d8acbf 	.word	0x00d8acbf
 800761c:	00e4e1c0 	.word	0x00e4e1c0
 8007620:	00f42400 	.word	0x00f42400
 8007624:	01067380 	.word	0x01067380
 8007628:	011a499f 	.word	0x011a499f
 800762c:	01312cff 	.word	0x01312cff
 8007630:	014ca43f 	.word	0x014ca43f
 8007634:	016e3600 	.word	0x016e3600
 8007638:	01a6ab1f 	.word	0x01a6ab1f
 800763c:	01e84800 	.word	0x01e84800

08007640 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f043 0201 	orr.w	r2, r3, #1
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f023 0201 	bic.w	r2, r3, #1
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d115      	bne.n	80076d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076b2:	2001      	movs	r0, #1
 80076b4:	f7fa f81e 	bl	80016f4 <HAL_Delay>
      ms++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 fa45 	bl	8008b4e <USB_GetMode>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d01e      	beq.n	8007708 <USB_SetCurrentMode+0x84>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b31      	cmp	r3, #49	; 0x31
 80076ce:	d9f0      	bls.n	80076b2 <USB_SetCurrentMode+0x2e>
 80076d0:	e01a      	b.n	8007708 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d115      	bne.n	8007704 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076e4:	2001      	movs	r0, #1
 80076e6:	f7fa f805 	bl	80016f4 <HAL_Delay>
      ms++;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fa2c 	bl	8008b4e <USB_GetMode>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <USB_SetCurrentMode+0x84>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b31      	cmp	r3, #49	; 0x31
 8007700:	d9f0      	bls.n	80076e4 <USB_SetCurrentMode+0x60>
 8007702:	e001      	b.n	8007708 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e005      	b.n	8007714 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b32      	cmp	r3, #50	; 0x32
 800770c:	d101      	bne.n	8007712 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800771c:	b084      	sub	sp, #16
 800771e:	b580      	push	{r7, lr}
 8007720:	b086      	sub	sp, #24
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800772a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	e009      	b.n	8007750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	3340      	adds	r3, #64	; 0x40
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	2200      	movs	r2, #0
 8007748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3301      	adds	r3, #1
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b0e      	cmp	r3, #14
 8007754:	d9f2      	bls.n	800773c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d11c      	bne.n	8007796 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800776a:	f043 0302 	orr.w	r3, r3, #2
 800776e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
 8007794:	e00b      	b.n	80077ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077b4:	461a      	mov	r2, r3
 80077b6:	2300      	movs	r3, #0
 80077b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c0:	4619      	mov	r1, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c8:	461a      	mov	r2, r3
 80077ca:	680b      	ldr	r3, [r1, #0]
 80077cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d10c      	bne.n	80077ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077da:	2100      	movs	r1, #0
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f965 	bl	8007aac <USB_SetDevSpeed>
 80077e2:	e008      	b.n	80077f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077e4:	2101      	movs	r1, #1
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f960 	bl	8007aac <USB_SetDevSpeed>
 80077ec:	e003      	b.n	80077f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077ee:	2103      	movs	r1, #3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f95b 	bl	8007aac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077f6:	2110      	movs	r1, #16
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f8f3 	bl	80079e4 <USB_FlushTxFifo>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f91f 	bl	8007a4c <USB_FlushRxFifo>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781e:	461a      	mov	r2, r3
 8007820:	2300      	movs	r3, #0
 8007822:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782a:	461a      	mov	r2, r3
 800782c:	2300      	movs	r3, #0
 800782e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	461a      	mov	r2, r3
 8007838:	2300      	movs	r3, #0
 800783a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	e043      	b.n	80078ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007858:	d118      	bne.n	800788c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	461a      	mov	r2, r3
 800786e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	e013      	b.n	800789e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007882:	461a      	mov	r2, r3
 8007884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	e008      	b.n	800789e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	461a      	mov	r2, r3
 800789a:	2300      	movs	r3, #0
 800789c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078aa:	461a      	mov	r2, r3
 80078ac:	2300      	movs	r3, #0
 80078ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	461a      	mov	r2, r3
 80078be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3301      	adds	r3, #1
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d3b7      	bcc.n	8007842 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078d2:	2300      	movs	r3, #0
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	e043      	b.n	8007960 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ee:	d118      	bne.n	8007922 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10a      	bne.n	800790c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007902:	461a      	mov	r2, r3
 8007904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	e013      	b.n	8007934 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007918:	461a      	mov	r2, r3
 800791a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	e008      	b.n	8007934 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	461a      	mov	r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007940:	461a      	mov	r2, r3
 8007942:	2300      	movs	r3, #0
 8007944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	461a      	mov	r2, r3
 8007954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007958:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3301      	adds	r3, #1
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d3b7      	bcc.n	80078d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800797a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007988:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	2b00      	cmp	r3, #0
 800798e:	d105      	bne.n	800799c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f043 0210 	orr.w	r2, r3, #16
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <USB_DevInit+0x2c4>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f043 0208 	orr.w	r2, r3, #8
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d107      	bne.n	80079d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c8:	f043 0304 	orr.w	r3, r3, #4
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079dc:	b004      	add	sp, #16
 80079de:	4770      	bx	lr
 80079e0:	803c3800 	.word	0x803c3800

080079e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <USB_FlushTxFifo+0x64>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d901      	bls.n	8007a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e01b      	b.n	8007a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	daf2      	bge.n	80079f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	019b      	lsls	r3, r3, #6
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4a08      	ldr	r2, [pc, #32]	; (8007a48 <USB_FlushTxFifo+0x64>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e006      	b.n	8007a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d0f0      	beq.n	8007a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	00030d40 	.word	0x00030d40

08007a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4a11      	ldr	r2, [pc, #68]	; (8007aa8 <USB_FlushRxFifo+0x5c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d901      	bls.n	8007a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e018      	b.n	8007a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	daf2      	bge.n	8007a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2210      	movs	r2, #16
 8007a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <USB_FlushRxFifo+0x5c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e006      	b.n	8007a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0310 	and.w	r3, r3, #16
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d0f0      	beq.n	8007a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	00030d40 	.word	0x00030d40

08007aac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007acc:	4313      	orrs	r3, r2
 8007ace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 0306 	and.w	r3, r3, #6
 8007af6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]
 8007b02:	e00a      	b.n	8007b1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d002      	beq.n	8007b10 <USB_GetDevSpeed+0x32>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b06      	cmp	r3, #6
 8007b0e:	d102      	bne.n	8007b16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b10:	2302      	movs	r3, #2
 8007b12:	75fb      	strb	r3, [r7, #23]
 8007b14:	e001      	b.n	8007b1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b16:	230f      	movs	r3, #15
 8007b18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d13a      	bne.n	8007bba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	2101      	movs	r1, #1
 8007b56:	fa01 f303 	lsl.w	r3, r1, r3
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	68f9      	ldr	r1, [r7, #12]
 8007b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b62:	4313      	orrs	r3, r2
 8007b64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d155      	bne.n	8007c28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	791b      	ldrb	r3, [r3, #4]
 8007b96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	059b      	lsls	r3, r3, #22
 8007b9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	e036      	b.n	8007c28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	69da      	ldr	r2, [r3, #28]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	2101      	movs	r1, #1
 8007bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d11a      	bne.n	8007c28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	4313      	orrs	r3, r2
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	0151      	lsls	r1, r2, #5
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	440a      	add	r2, r1
 8007c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d161      	bne.n	8007d18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c6a:	d11f      	bne.n	8007cac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	0151      	lsls	r1, r2, #5
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007caa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	f003 030f 	and.w	r3, r3, #15
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	43db      	mvns	r3, r3
 8007cc6:	68f9      	ldr	r1, [r7, #12]
 8007cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ccc:	4013      	ands	r3, r2
 8007cce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd6:	69da      	ldr	r2, [r3, #28]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	43db      	mvns	r3, r3
 8007cea:	68f9      	ldr	r1, [r7, #12]
 8007cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	0159      	lsls	r1, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	440b      	add	r3, r1
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4b35      	ldr	r3, [pc, #212]	; (8007de8 <USB_DeactivateEndpoint+0x1b0>)
 8007d12:	4013      	ands	r3, r2
 8007d14:	600b      	str	r3, [r1, #0]
 8007d16:	e060      	b.n	8007dda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d2e:	d11f      	bne.n	8007d70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	0151      	lsls	r1, r2, #5
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	440a      	add	r2, r1
 8007d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	2101      	movs	r1, #1
 8007d82:	fa01 f303 	lsl.w	r3, r1, r3
 8007d86:	041b      	lsls	r3, r3, #16
 8007d88:	43db      	mvns	r3, r3
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d90:	4013      	ands	r3, r2
 8007d92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9a:	69da      	ldr	r2, [r3, #28]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	2101      	movs	r1, #1
 8007da6:	fa01 f303 	lsl.w	r3, r1, r3
 8007daa:	041b      	lsls	r3, r3, #16
 8007dac:	43db      	mvns	r3, r3
 8007dae:	68f9      	ldr	r1, [r7, #12]
 8007db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007db4:	4013      	ands	r3, r2
 8007db6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	0159      	lsls	r1, r3, #5
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	440b      	add	r3, r1
 8007dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <USB_DeactivateEndpoint+0x1b4>)
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	ec337800 	.word	0xec337800
 8007dec:	eff37800 	.word	0xeff37800

08007df0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	785b      	ldrb	r3, [r3, #1]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	f040 815c 	bne.w	80080ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d132      	bne.n	8007e80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	0151      	lsls	r1, r2, #5
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	440a      	add	r2, r1
 8007e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	0151      	lsls	r1, r2, #5
 8007e50:	69fa      	ldr	r2, [r7, #28]
 8007e52:	440a      	add	r2, r1
 8007e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e78:	0cdb      	lsrs	r3, r3, #19
 8007e7a:	04db      	lsls	r3, r3, #19
 8007e7c:	6113      	str	r3, [r2, #16]
 8007e7e:	e074      	b.n	8007f6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9a:	0cdb      	lsrs	r3, r3, #19
 8007e9c:	04db      	lsls	r3, r3, #19
 8007e9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ebe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	6999      	ldr	r1, [r3, #24]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	440b      	add	r3, r1
 8007edc:	1e59      	subs	r1, r3, #1
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ee6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ee8:	4b9d      	ldr	r3, [pc, #628]	; (8008160 <USB_EPStartXfer+0x370>)
 8007eea:	400b      	ands	r3, r1
 8007eec:	69b9      	ldr	r1, [r7, #24]
 8007eee:	0148      	lsls	r0, r1, #5
 8007ef0:	69f9      	ldr	r1, [r7, #28]
 8007ef2:	4401      	add	r1, r0
 8007ef4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f12:	69b9      	ldr	r1, [r7, #24]
 8007f14:	0148      	lsls	r0, r1, #5
 8007f16:	69f9      	ldr	r1, [r7, #28]
 8007f18:	4401      	add	r1, r0
 8007f1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	791b      	ldrb	r3, [r3, #4]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d11f      	bne.n	8007f6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	0151      	lsls	r1, r2, #5
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	440a      	add	r2, r1
 8007f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d14b      	bne.n	8008008 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d009      	beq.n	8007f8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f84:	461a      	mov	r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	791b      	ldrb	r3, [r3, #4]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d128      	bne.n	8007fe6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d110      	bne.n	8007fc6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	0151      	lsls	r1, r2, #5
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	440a      	add	r2, r1
 8007fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	e00f      	b.n	8007fe6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	e133      	b.n	8008270 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008022:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008026:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	791b      	ldrb	r3, [r3, #4]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d015      	beq.n	800805c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 811b 	beq.w	8008270 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	2101      	movs	r1, #1
 800804c:	fa01 f303 	lsl.w	r3, r1, r3
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008056:	4313      	orrs	r3, r2
 8008058:	634b      	str	r3, [r1, #52]	; 0x34
 800805a:	e109      	b.n	8008270 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008068:	2b00      	cmp	r3, #0
 800806a:	d110      	bne.n	800808e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	440a      	add	r2, r1
 8008082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008086:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	e00f      	b.n	80080ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	0151      	lsls	r1, r2, #5
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	440a      	add	r2, r1
 80080a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6919      	ldr	r1, [r3, #16]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	b298      	uxth	r0, r3
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	4603      	mov	r3, r0
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 fade 	bl	8008684 <USB_WritePacket>
 80080c8:	e0d2      	b.n	8008270 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e4:	0cdb      	lsrs	r3, r3, #19
 80080e6:	04db      	lsls	r3, r3, #19
 80080e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008104:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008108:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800810c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d126      	bne.n	8008164 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800812c:	69b9      	ldr	r1, [r7, #24]
 800812e:	0148      	lsls	r0, r1, #5
 8008130:	69f9      	ldr	r1, [r7, #28]
 8008132:	4401      	add	r1, r0
 8008134:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008138:	4313      	orrs	r3, r2
 800813a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	0151      	lsls	r1, r2, #5
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	440a      	add	r2, r1
 8008152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008156:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800815a:	6113      	str	r3, [r2, #16]
 800815c:	e03a      	b.n	80081d4 <USB_EPStartXfer+0x3e4>
 800815e:	bf00      	nop
 8008160:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	699a      	ldr	r2, [r3, #24]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	4413      	add	r3, r2
 800816e:	1e5a      	subs	r2, r3, #1
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	fbb2 f3f3 	udiv	r3, r2, r3
 8008178:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	8afa      	ldrh	r2, [r7, #22]
 8008180:	fb03 f202 	mul.w	r2, r3, r2
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	8afb      	ldrh	r3, [r7, #22]
 8008198:	04d9      	lsls	r1, r3, #19
 800819a:	4b38      	ldr	r3, [pc, #224]	; (800827c <USB_EPStartXfer+0x48c>)
 800819c:	400b      	ands	r3, r1
 800819e:	69b9      	ldr	r1, [r7, #24]
 80081a0:	0148      	lsls	r0, r1, #5
 80081a2:	69f9      	ldr	r1, [r7, #28]
 80081a4:	4401      	add	r1, r0
 80081a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081aa:	4313      	orrs	r3, r2
 80081ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c4:	69b9      	ldr	r1, [r7, #24]
 80081c6:	0148      	lsls	r0, r1, #5
 80081c8:	69f9      	ldr	r1, [r7, #28]
 80081ca:	4401      	add	r1, r0
 80081cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081d0:	4313      	orrs	r3, r2
 80081d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d10d      	bne.n	80081f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d009      	beq.n	80081f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	6919      	ldr	r1, [r3, #16]
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f2:	460a      	mov	r2, r1
 80081f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	791b      	ldrb	r3, [r3, #4]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d128      	bne.n	8008250 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d110      	bne.n	8008230 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e00f      	b.n	8008250 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800824a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800824e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800826a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800826e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	1ff80000 	.word	0x1ff80000

08008280 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b01      	cmp	r3, #1
 800829e:	f040 80ce 	bne.w	800843e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d132      	bne.n	8008310 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	0151      	lsls	r1, r2, #5
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	440a      	add	r2, r1
 80082e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	0151      	lsls	r1, r2, #5
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	440a      	add	r2, r1
 8008304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008308:	0cdb      	lsrs	r3, r3, #19
 800830a:	04db      	lsls	r3, r3, #19
 800830c:	6113      	str	r3, [r2, #16]
 800830e:	e04e      	b.n	80083ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	440a      	add	r2, r1
 8008326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800832a:	0cdb      	lsrs	r3, r3, #19
 800832c:	04db      	lsls	r3, r3, #19
 800832e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	0151      	lsls	r1, r2, #5
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	440a      	add	r2, r1
 8008346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800834e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008352:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	699a      	ldr	r2, [r3, #24]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	429a      	cmp	r2, r3
 800835e:	d903      	bls.n	8008368 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	691a      	ldr	r2, [r3, #16]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800839e:	6939      	ldr	r1, [r7, #16]
 80083a0:	0148      	lsls	r0, r1, #5
 80083a2:	6979      	ldr	r1, [r7, #20]
 80083a4:	4401      	add	r1, r0
 80083a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083aa:	4313      	orrs	r3, r2
 80083ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d11e      	bne.n	80083f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d009      	beq.n	80083d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c8:	461a      	mov	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	e097      	b.n	8008522 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	440a      	add	r2, r1
 8008408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800840c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008410:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 8083 	beq.w	8008522 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	2101      	movs	r1, #1
 800842e:	fa01 f303 	lsl.w	r3, r1, r3
 8008432:	6979      	ldr	r1, [r7, #20]
 8008434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008438:	4313      	orrs	r3, r2
 800843a:	634b      	str	r3, [r1, #52]	; 0x34
 800843c:	e071      	b.n	8008522 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	0151      	lsls	r1, r2, #5
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	440a      	add	r2, r1
 8008454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008458:	0cdb      	lsrs	r3, r3, #19
 800845a:	04db      	lsls	r3, r3, #19
 800845c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	440a      	add	r2, r1
 8008474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008478:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800847c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008480:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084d0:	6939      	ldr	r1, [r7, #16]
 80084d2:	0148      	lsls	r0, r1, #5
 80084d4:	6979      	ldr	r1, [r7, #20]
 80084d6:	4401      	add	r1, r0
 80084d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084dc:	4313      	orrs	r3, r2
 80084de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d10d      	bne.n	8008502 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d009      	beq.n	8008502 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6919      	ldr	r1, [r3, #16]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fe:	460a      	mov	r2, r1
 8008500:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800851c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008520:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d14a      	bne.n	80085e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008566:	f040 8086 	bne.w	8008676 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	7812      	ldrb	r2, [r2, #0]
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008588:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800858c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	7812      	ldrb	r2, [r2, #0]
 80085a2:	0151      	lsls	r1, r2, #5
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	440a      	add	r2, r1
 80085a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80085be:	4293      	cmp	r3, r2
 80085c0:	d902      	bls.n	80085c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	75fb      	strb	r3, [r7, #23]
          break;
 80085c6:	e056      	b.n	8008676 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085e0:	d0e7      	beq.n	80085b2 <USB_EPStopXfer+0x82>
 80085e2:	e048      	b.n	8008676 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085fc:	d13b      	bne.n	8008676 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	7812      	ldrb	r2, [r2, #0]
 8008612:	0151      	lsls	r1, r2, #5
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	440a      	add	r2, r1
 8008618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800861c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008620:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	7812      	ldrb	r2, [r2, #0]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008644:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3301      	adds	r3, #1
 800864a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008652:	4293      	cmp	r3, r2
 8008654:	d902      	bls.n	800865c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	75fb      	strb	r3, [r7, #23]
          break;
 800865a:	e00c      	b.n	8008676 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008674:	d0e7      	beq.n	8008646 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
}
 8008678:	4618      	mov	r0, r3
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008684:	b480      	push	{r7}
 8008686:	b089      	sub	sp, #36	; 0x24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4611      	mov	r1, r2
 8008690:	461a      	mov	r2, r3
 8008692:	460b      	mov	r3, r1
 8008694:	71fb      	strb	r3, [r7, #7]
 8008696:	4613      	mov	r3, r2
 8008698:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d123      	bne.n	80086f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086aa:	88bb      	ldrh	r3, [r7, #4]
 80086ac:	3303      	adds	r3, #3
 80086ae:	089b      	lsrs	r3, r3, #2
 80086b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086b2:	2300      	movs	r3, #0
 80086b4:	61bb      	str	r3, [r7, #24]
 80086b6:	e018      	b.n	80086ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	031a      	lsls	r2, r3, #12
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c4:	461a      	mov	r2, r3
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	3301      	adds	r3, #1
 80086d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	3301      	adds	r3, #1
 80086d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	3301      	adds	r3, #1
 80086dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	3301      	adds	r3, #1
 80086e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	3301      	adds	r3, #1
 80086e8:	61bb      	str	r3, [r7, #24]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d3e2      	bcc.n	80086b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3724      	adds	r7, #36	; 0x24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008700:	b480      	push	{r7}
 8008702:	b08b      	sub	sp, #44	; 0x2c
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	089b      	lsrs	r3, r3, #2
 800871a:	b29b      	uxth	r3, r3
 800871c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800871e:	88fb      	ldrh	r3, [r7, #6]
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008726:	2300      	movs	r3, #0
 8008728:	623b      	str	r3, [r7, #32]
 800872a:	e014      	b.n	8008756 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	601a      	str	r2, [r3, #0]
    pDest++;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	3301      	adds	r3, #1
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	3301      	adds	r3, #1
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	3301      	adds	r3, #1
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	3301      	adds	r3, #1
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	3301      	adds	r3, #1
 8008754:	623b      	str	r3, [r7, #32]
 8008756:	6a3a      	ldr	r2, [r7, #32]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	429a      	cmp	r2, r3
 800875c:	d3e6      	bcc.n	800872c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800875e:	8bfb      	ldrh	r3, [r7, #30]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01e      	beq.n	80087a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800876e:	461a      	mov	r2, r3
 8008770:	f107 0310 	add.w	r3, r7, #16
 8008774:	6812      	ldr	r2, [r2, #0]
 8008776:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	fa22 f303 	lsr.w	r3, r2, r3
 8008784:	b2da      	uxtb	r2, r3
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	701a      	strb	r2, [r3, #0]
      i++;
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	3301      	adds	r3, #1
 800878e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	3301      	adds	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008796:	8bfb      	ldrh	r3, [r7, #30]
 8008798:	3b01      	subs	r3, #1
 800879a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800879c:	8bfb      	ldrh	r3, [r7, #30]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1ea      	bne.n	8008778 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	372c      	adds	r7, #44	; 0x2c
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d12c      	bne.n	8008826 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	db12      	blt.n	8008804 <USB_EPSetStall+0x54>
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00f      	beq.n	8008804 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008802:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	e02b      	b.n	800887e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	db12      	blt.n	800885e <USB_EPSetStall+0xae>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00f      	beq.n	800885e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	440a      	add	r2, r1
 8008854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008858:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800885c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	440a      	add	r2, r1
 8008874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800887c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d128      	bne.n	80088fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	791b      	ldrb	r3, [r3, #4]
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d003      	beq.n	80088d8 <USB_EPClearStall+0x4c>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	791b      	ldrb	r3, [r3, #4]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d138      	bne.n	800894a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	0151      	lsls	r1, r2, #5
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	440a      	add	r2, r1
 80088ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	e027      	b.n	800894a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008918:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	791b      	ldrb	r3, [r3, #4]
 800891e:	2b03      	cmp	r3, #3
 8008920:	d003      	beq.n	800892a <USB_EPClearStall+0x9e>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	791b      	ldrb	r3, [r3, #4]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d10f      	bne.n	800894a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	440a      	add	r2, r1
 8008940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008948:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008976:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800897a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800898c:	68f9      	ldr	r1, [r7, #12]
 800898e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008992:	4313      	orrs	r3, r2
 8008994:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089be:	f023 0303 	bic.w	r3, r3, #3
 80089c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d2:	f023 0302 	bic.w	r3, r3, #2
 80089d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a14:	f043 0302 	orr.w	r3, r3, #2
 8008a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a40:	68fb      	ldr	r3, [r7, #12]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b085      	sub	sp, #20
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	0c1b      	lsrs	r3, r3, #16
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b085      	sub	sp, #20
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	b29b      	uxth	r3, r3
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b085      	sub	sp, #20
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b087      	sub	sp, #28
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b22:	01db      	lsls	r3, r3, #7
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b40:	68bb      	ldr	r3, [r7, #8]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	371c      	adds	r7, #28
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b88:	f023 0307 	bic.w	r3, r3, #7
 8008b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	333c      	adds	r3, #60	; 0x3c
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4a26      	ldr	r2, [pc, #152]	; (8008c68 <USB_EP0_OutStart+0xb8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d90a      	bls.n	8008bea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be4:	d101      	bne.n	8008bea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e037      	b.n	8008c5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c18:	f043 0318 	orr.w	r3, r3, #24
 8008c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c32:	7afb      	ldrb	r3, [r7, #11]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10f      	bne.n	8008c58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	4f54300a 	.word	0x4f54300a

08008c6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4a13      	ldr	r2, [pc, #76]	; (8008cd0 <USB_CoreReset+0x64>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d901      	bls.n	8008c8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e01b      	b.n	8008cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	daf2      	bge.n	8008c78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f043 0201 	orr.w	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4a09      	ldr	r2, [pc, #36]	; (8008cd0 <USB_CoreReset+0x64>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d901      	bls.n	8008cb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e006      	b.n	8008cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d0f0      	beq.n	8008ca2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	00030d40 	.word	0x00030d40

08008cd4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 fcb2 	bl	800a64e <VL53L0X_get_offset_calibration_data_micro_meter>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8008cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8008cfc:	b5b0      	push	{r4, r5, r7, lr}
 8008cfe:	b096      	sub	sp, #88	; 0x58
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8008d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d107      	bne.n	8008d22 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8008d12:	2200      	movs	r2, #0
 8008d14:	2188      	movs	r1, #136	; 0x88
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f004 feaa 	bl	800da70 <VL53L0X_WrByte>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d30:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008d3a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a9e      	ldr	r2, [pc, #632]	; (8008fbc <VL53L0X_DataInit+0x2c0>)
 8008d42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a9d      	ldr	r2, [pc, #628]	; (8008fc0 <VL53L0X_DataInit+0x2c4>)
 8008d4a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008d54:	f107 0310 	add.w	r3, r7, #16
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fac2 	bl	80092e4 <VL53L0X_GetDeviceParameters>
 8008d60:	4603      	mov	r3, r0
 8008d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8008d66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d112      	bne.n	8008d94 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8008d72:	2300      	movs	r3, #0
 8008d74:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f103 0410 	add.w	r4, r3, #16
 8008d7c:	f107 0510 	add.w	r5, r7, #16
 8008d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2264      	movs	r2, #100	; 0x64
 8008d98:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008da2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008dac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008db6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	2180      	movs	r1, #128	; 0x80
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f004 fe52 	bl	800da70 <VL53L0X_WrByte>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008dda:	2201      	movs	r2, #1
 8008ddc:	21ff      	movs	r1, #255	; 0xff
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f004 fe46 	bl	800da70 <VL53L0X_WrByte>
 8008de4:	4603      	mov	r3, r0
 8008de6:	461a      	mov	r2, r3
 8008de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dec:	4313      	orrs	r3, r2
 8008dee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008df2:	2200      	movs	r2, #0
 8008df4:	2100      	movs	r1, #0
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f004 fe3a 	bl	800da70 <VL53L0X_WrByte>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e04:	4313      	orrs	r3, r2
 8008e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8008e0a:	f107 030f 	add.w	r3, r7, #15
 8008e0e:	461a      	mov	r2, r3
 8008e10:	2191      	movs	r1, #145	; 0x91
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f004 feae 	bl	800db74 <VL53L0X_RdByte>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e20:	4313      	orrs	r3, r2
 8008e22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8008e26:	7bfa      	ldrb	r2, [r7, #15]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008e2e:	2201      	movs	r2, #1
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f004 fe1c 	bl	800da70 <VL53L0X_WrByte>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e40:	4313      	orrs	r3, r2
 8008e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e46:	2200      	movs	r2, #0
 8008e48:	21ff      	movs	r1, #255	; 0xff
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f004 fe10 	bl	800da70 <VL53L0X_WrByte>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2180      	movs	r1, #128	; 0x80
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f004 fe04 	bl	800da70 <VL53L0X_WrByte>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e70:	4313      	orrs	r3, r2
 8008e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008e76:	2300      	movs	r3, #0
 8008e78:	653b      	str	r3, [r7, #80]	; 0x50
 8008e7a:	e014      	b.n	8008ea6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8008e7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d114      	bne.n	8008eae <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8008e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2201      	movs	r2, #1
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fd35 	bl	80098fc <VL53L0X_SetLimitCheckEnable>
 8008e92:	4603      	mov	r3, r0
 8008e94:	461a      	mov	r2, r3
 8008e96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8008ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea8:	2b05      	cmp	r3, #5
 8008eaa:	dde7      	ble.n	8008e7c <VL53L0X_DataInit+0x180>
 8008eac:	e000      	b.n	8008eb0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8008eae:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d107      	bne.n	8008ec8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2102      	movs	r1, #2
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fd1d 	bl	80098fc <VL53L0X_SetLimitCheckEnable>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008ec8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d107      	bne.n	8008ee0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2103      	movs	r1, #3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fd11 	bl	80098fc <VL53L0X_SetLimitCheckEnable>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008ee0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d107      	bne.n	8008ef8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2104      	movs	r1, #4
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fd05 	bl	80098fc <VL53L0X_SetLimitCheckEnable>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008ef8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d107      	bne.n	8008f10 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008f00:	2200      	movs	r2, #0
 8008f02:	2105      	movs	r1, #5
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fcf9 	bl	80098fc <VL53L0X_SetLimitCheckEnable>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008f10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d108      	bne.n	8008f2a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f18:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fd9c 	bl	8009a5c <VL53L0X_SetLimitCheckValue>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008f2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d108      	bne.n	8008f44 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f36:	2101      	movs	r1, #1
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fd8f 	bl	8009a5c <VL53L0X_SetLimitCheckValue>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d108      	bne.n	8008f5e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f4c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008f50:	2102      	movs	r1, #2
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fd82 	bl	8009a5c <VL53L0X_SetLimitCheckValue>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d107      	bne.n	8008f76 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f66:	2200      	movs	r2, #0
 8008f68:	2103      	movs	r1, #3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fd76 	bl	8009a5c <VL53L0X_SetLimitCheckValue>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10f      	bne.n	8008f9e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	22ff      	movs	r2, #255	; 0xff
 8008f82:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008f86:	22ff      	movs	r2, #255	; 0xff
 8008f88:	2101      	movs	r1, #1
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f004 fd70 	bl	800da70 <VL53L0X_WrByte>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008f9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d103      	bne.n	8008fae <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8008fae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3758      	adds	r7, #88	; 0x58
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	00016b85 	.word	0x00016b85
 8008fc0:	000970a4 	.word	0x000970a4

08008fc4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8008fc4:	b5b0      	push	{r4, r5, r7, lr}
 8008fc6:	b09e      	sub	sp, #120	; 0x78
 8008fc8:	af02      	add	r7, sp, #8
 8008fca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008fd2:	f107 031c 	add.w	r3, r7, #28
 8008fd6:	2240      	movs	r2, #64	; 0x40
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f00a ffa6 	bl	8013f2c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009000:	2101      	movs	r1, #1
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f002 fa79 	bl	800b4fa <VL53L0X_get_info_from_device>
 8009008:	4603      	mov	r3, r0
 800900a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009014:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800901c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009024:	2b01      	cmp	r3, #1
 8009026:	d80d      	bhi.n	8009044 <VL53L0X_StaticInit+0x80>
 8009028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800902c:	2b01      	cmp	r3, #1
 800902e:	d102      	bne.n	8009036 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009032:	2b20      	cmp	r3, #32
 8009034:	d806      	bhi.n	8009044 <VL53L0X_StaticInit+0x80>
 8009036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10e      	bne.n	800905c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800903e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009040:	2b0c      	cmp	r3, #12
 8009042:	d90b      	bls.n	800905c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009044:	f107 0218 	add.w	r2, r7, #24
 8009048:	f107 0314 	add.w	r3, r7, #20
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 fcf8 	bl	800aa44 <VL53L0X_perform_ref_spad_management>
 8009054:	4603      	mov	r3, r0
 8009056:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800905a:	e009      	b.n	8009070 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800905c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009060:	461a      	mov	r2, r3
 8009062:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 fef9 	bl	800ae5c <VL53L0X_set_reference_spads>
 800906a:	4603      	mov	r3, r0
 800906c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009070:	4b94      	ldr	r3, [pc, #592]	; (80092c4 <VL53L0X_StaticInit+0x300>)
 8009072:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009074:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10f      	bne.n	800909c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8009086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009094:	66bb      	str	r3, [r7, #104]	; 0x68
 8009096:	e001      	b.n	800909c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009098:	4b8a      	ldr	r3, [pc, #552]	; (80092c4 <VL53L0X_StaticInit+0x300>)
 800909a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800909c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d106      	bne.n	80090b2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80090a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f003 fdcc 	bl	800cc44 <VL53L0X_load_tuning_settings>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80090b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80090ba:	2300      	movs	r3, #0
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	2304      	movs	r3, #4
 80090c0:	2200      	movs	r2, #0
 80090c2:	2100      	movs	r1, #0
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 f8f1 	bl	800a2ac <VL53L0X_SetGpioConfig>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80090d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d121      	bne.n	800911c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090d8:	2201      	movs	r2, #1
 80090da:	21ff      	movs	r1, #255	; 0xff
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f004 fcc7 	bl	800da70 <VL53L0X_WrByte>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80090e8:	f107 031a 	add.w	r3, r7, #26
 80090ec:	461a      	mov	r2, r3
 80090ee:	2184      	movs	r1, #132	; 0x84
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f004 fd69 	bl	800dbc8 <VL53L0X_RdWord>
 80090f6:	4603      	mov	r3, r0
 80090f8:	461a      	mov	r2, r3
 80090fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80090fe:	4313      	orrs	r3, r2
 8009100:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009104:	2200      	movs	r2, #0
 8009106:	21ff      	movs	r1, #255	; 0xff
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f004 fcb1 	bl	800da70 <VL53L0X_WrByte>
 800910e:	4603      	mov	r3, r0
 8009110:	461a      	mov	r2, r3
 8009112:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009116:	4313      	orrs	r3, r2
 8009118:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800911c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009120:	2b00      	cmp	r3, #0
 8009122:	d105      	bne.n	8009130 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009124:	8b7b      	ldrh	r3, [r7, #26]
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	461a      	mov	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009130:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009134:	2b00      	cmp	r3, #0
 8009136:	d108      	bne.n	800914a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009138:	f107 031c 	add.w	r3, r7, #28
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f8d0 	bl	80092e4 <VL53L0X_GetDeviceParameters>
 8009144:	4603      	mov	r3, r0
 8009146:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800914a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800914e:	2b00      	cmp	r3, #0
 8009150:	d110      	bne.n	8009174 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009152:	f107 0319 	add.w	r3, r7, #25
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f992 	bl	8009482 <VL53L0X_GetFractionEnable>
 800915e:	4603      	mov	r3, r0
 8009160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009164:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800916c:	7e7a      	ldrb	r2, [r7, #25]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009174:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10e      	bne.n	800919a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f103 0410 	add.w	r4, r3, #16
 8009182:	f107 051c 	add.w	r5, r7, #28
 8009186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800918a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800918c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800918e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009192:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800919a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d111      	bne.n	80091c6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80091a2:	f107 0319 	add.w	r3, r7, #25
 80091a6:	461a      	mov	r2, r3
 80091a8:	2101      	movs	r1, #1
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f004 fce2 	bl	800db74 <VL53L0X_RdByte>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80091b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d103      	bne.n	80091c6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80091be:	7e7a      	ldrb	r2, [r7, #25]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80091c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d107      	bne.n	80091de <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80091ce:	2200      	movs	r2, #0
 80091d0:	2100      	movs	r1, #0
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f9ca 	bl	800956c <VL53L0X_SetSequenceStepEnable>
 80091d8:	4603      	mov	r3, r0
 80091da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80091de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d107      	bne.n	80091f6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80091e6:	2200      	movs	r2, #0
 80091e8:	2102      	movs	r1, #2
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9be 	bl	800956c <VL53L0X_SetSequenceStepEnable>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80091f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d103      	bne.n	8009206 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2203      	movs	r2, #3
 8009202:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009206:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800920e:	f107 0313 	add.w	r3, r7, #19
 8009212:	461a      	mov	r2, r3
 8009214:	2100      	movs	r1, #0
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f990 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800921c:	4603      	mov	r3, r0
 800921e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009222:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800922a:	7cfa      	ldrb	r2, [r7, #19]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009232:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800923a:	f107 0313 	add.w	r3, r7, #19
 800923e:	461a      	mov	r2, r3
 8009240:	2101      	movs	r1, #1
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f97a 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 8009248:	4603      	mov	r3, r0
 800924a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800924e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009252:	2b00      	cmp	r3, #0
 8009254:	d103      	bne.n	800925e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009256:	7cfa      	ldrb	r2, [r7, #19]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800925e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8009266:	f107 030c 	add.w	r3, r7, #12
 800926a:	461a      	mov	r2, r3
 800926c:	2103      	movs	r1, #3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f002 fec4 	bl	800bffc <get_sequence_step_timeout>
 8009274:	4603      	mov	r3, r0
 8009276:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800927a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800928a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800928e:	2b00      	cmp	r3, #0
 8009290:	d109      	bne.n	80092a6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8009292:	f107 030c 	add.w	r3, r7, #12
 8009296:	461a      	mov	r2, r3
 8009298:	2104      	movs	r1, #4
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f002 feae 	bl	800bffc <get_sequence_step_timeout>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80092a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d103      	bne.n	80092b6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3770      	adds	r7, #112	; 0x70
 80092be:	46bd      	mov	sp, r7
 80092c0:	bdb0      	pop	{r4, r5, r7, pc}
 80092c2:	bf00      	nop
 80092c4:	200001c4 	.word	0x200001c4

080092c8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80092d0:	239d      	movs	r3, #157	; 0x9d
 80092d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80092d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f8b0 	bl	800945c <VL53L0X_GetDeviceMode>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d107      	bne.n	8009318 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	3308      	adds	r3, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fa78 	bl	8009804 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8009318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2200      	movs	r2, #0
 8009324:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8009326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d107      	bne.n	800933e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	3310      	adds	r3, #16
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 faae 	bl	8009896 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800933e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d107      	bne.n	8009356 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	3314      	adds	r3, #20
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7ff fcc1 	bl	8008cd4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8009352:	4603      	mov	r3, r0
 8009354:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8009356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d134      	bne.n	80093c8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800935e:	2300      	movs	r3, #0
 8009360:	60bb      	str	r3, [r7, #8]
 8009362:	e02a      	b.n	80093ba <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d12a      	bne.n	80093c2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	b299      	uxth	r1, r3
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	3308      	adds	r3, #8
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	4413      	add	r3, r2
 800937a:	3304      	adds	r3, #4
 800937c:	461a      	mov	r2, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fbce 	bl	8009b20 <VL53L0X_GetLimitCheckValue>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	4313      	orrs	r3, r2
 800938c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800938e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d117      	bne.n	80093c6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	b299      	uxth	r1, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	3318      	adds	r3, #24
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	4413      	add	r3, r2
 80093a2:	461a      	mov	r2, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fb35 	bl	8009a14 <VL53L0X_GetLimitCheckEnable>
 80093aa:	4603      	mov	r3, r0
 80093ac:	461a      	mov	r2, r3
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	3301      	adds	r3, #1
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2b05      	cmp	r3, #5
 80093be:	ddd1      	ble.n	8009364 <VL53L0X_GetDeviceParameters+0x80>
 80093c0:	e002      	b.n	80093c8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80093c2:	bf00      	nop
 80093c4:	e000      	b.n	80093c8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80093c6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d107      	bne.n	80093e0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	333c      	adds	r3, #60	; 0x3c
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fc30 	bl	8009c3c <VL53L0X_GetWrapAroundCheckEnable>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80093e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d107      	bne.n	80093f8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f879 	bl	80094e6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80093f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009410:	2300      	movs	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	2b15      	cmp	r3, #21
 8009418:	bf8c      	ite	hi
 800941a:	2201      	movhi	r2, #1
 800941c:	2200      	movls	r2, #0
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	2a00      	cmp	r2, #0
 8009422:	d10e      	bne.n	8009442 <VL53L0X_SetDeviceMode+0x3e>
 8009424:	2201      	movs	r2, #1
 8009426:	409a      	lsls	r2, r3
 8009428:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <VL53L0X_SetDeviceMode+0x54>)
 800942a:	4013      	ands	r3, r2
 800942c:	2b00      	cmp	r3, #0
 800942e:	bf14      	ite	ne
 8009430:	2301      	movne	r3, #1
 8009432:	2300      	moveq	r3, #0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	741a      	strb	r2, [r3, #16]
		break;
 8009440:	e001      	b.n	8009446 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009442:	23f8      	movs	r3, #248	; 0xf8
 8009444:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	0030000b 	.word	0x0030000b

0800945c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	7c1a      	ldrb	r2, [r3, #16]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	2109      	movs	r1, #9
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f004 fb6d 	bl	800db74 <VL53L0X_RdByte>
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800949e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80094b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f003 fa26 	bl	800c922 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80094da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f003 faf3 	bl	800cae2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
 8009518:	4613      	mov	r3, r2
 800951a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8009520:	78ba      	ldrb	r2, [r7, #2]
 8009522:	78fb      	ldrb	r3, [r7, #3]
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f002 ff3b 	bl	800c3a2 <VL53L0X_set_vcsel_pulse_period>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	460b      	mov	r3, r1
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800954a:	2300      	movs	r3, #0
 800954c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	4619      	mov	r1, r3
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f003 f9ad 	bl	800c8b4 <VL53L0X_get_vcsel_pulse_period>
 800955a:	4603      	mov	r3, r0
 800955c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800955e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	70fb      	strb	r3, [r7, #3]
 8009578:	4613      	mov	r3, r2
 800957a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009588:	f107 030f 	add.w	r3, r7, #15
 800958c:	461a      	mov	r2, r3
 800958e:	2101      	movs	r1, #1
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f004 faef 	bl	800db74 <VL53L0X_RdByte>
 8009596:	4603      	mov	r3, r0
 8009598:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800959e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d15a      	bne.n	800965c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80095a6:	78bb      	ldrb	r3, [r7, #2]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d12b      	bne.n	8009604 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d825      	bhi.n	80095fe <VL53L0X_SetSequenceStepEnable+0x92>
 80095b2:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80095b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b8:	080095cd 	.word	0x080095cd
 80095bc:	080095d7 	.word	0x080095d7
 80095c0:	080095e1 	.word	0x080095e1
 80095c4:	080095eb 	.word	0x080095eb
 80095c8:	080095f5 	.word	0x080095f5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80095cc:	7dbb      	ldrb	r3, [r7, #22]
 80095ce:	f043 0310 	orr.w	r3, r3, #16
 80095d2:	75bb      	strb	r3, [r7, #22]
				break;
 80095d4:	e043      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80095d6:	7dbb      	ldrb	r3, [r7, #22]
 80095d8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80095dc:	75bb      	strb	r3, [r7, #22]
				break;
 80095de:	e03e      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80095e0:	7dbb      	ldrb	r3, [r7, #22]
 80095e2:	f043 0304 	orr.w	r3, r3, #4
 80095e6:	75bb      	strb	r3, [r7, #22]
				break;
 80095e8:	e039      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80095ea:	7dbb      	ldrb	r3, [r7, #22]
 80095ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f0:	75bb      	strb	r3, [r7, #22]
				break;
 80095f2:	e034      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80095f4:	7dbb      	ldrb	r3, [r7, #22]
 80095f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095fa:	75bb      	strb	r3, [r7, #22]
				break;
 80095fc:	e02f      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095fe:	23fc      	movs	r3, #252	; 0xfc
 8009600:	75fb      	strb	r3, [r7, #23]
 8009602:	e02c      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	2b04      	cmp	r3, #4
 8009608:	d825      	bhi.n	8009656 <VL53L0X_SetSequenceStepEnable+0xea>
 800960a:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	08009625 	.word	0x08009625
 8009614:	0800962f 	.word	0x0800962f
 8009618:	08009639 	.word	0x08009639
 800961c:	08009643 	.word	0x08009643
 8009620:	0800964d 	.word	0x0800964d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009624:	7dbb      	ldrb	r3, [r7, #22]
 8009626:	f023 0310 	bic.w	r3, r3, #16
 800962a:	75bb      	strb	r3, [r7, #22]
				break;
 800962c:	e017      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800962e:	7dbb      	ldrb	r3, [r7, #22]
 8009630:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009634:	75bb      	strb	r3, [r7, #22]
				break;
 8009636:	e012      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009638:	7dbb      	ldrb	r3, [r7, #22]
 800963a:	f023 0304 	bic.w	r3, r3, #4
 800963e:	75bb      	strb	r3, [r7, #22]
				break;
 8009640:	e00d      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009642:	7dbb      	ldrb	r3, [r7, #22]
 8009644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009648:	75bb      	strb	r3, [r7, #22]
				break;
 800964a:	e008      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800964c:	7dbb      	ldrb	r3, [r7, #22]
 800964e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009652:	75bb      	strb	r3, [r7, #22]
				break;
 8009654:	e003      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009656:	23fc      	movs	r3, #252	; 0xfc
 8009658:	75fb      	strb	r3, [r7, #23]
 800965a:	e000      	b.n	800965e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800965c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	7dba      	ldrb	r2, [r7, #22]
 8009662:	429a      	cmp	r2, r3
 8009664:	d01e      	beq.n	80096a4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d107      	bne.n	800967e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800966e:	7dbb      	ldrb	r3, [r7, #22]
 8009670:	461a      	mov	r2, r3
 8009672:	2101      	movs	r1, #1
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f004 f9fb 	bl	800da70 <VL53L0X_WrByte>
 800967a:	4603      	mov	r3, r0
 800967c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800967e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d103      	bne.n	800968e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	7dba      	ldrb	r2, [r7, #22]
 800968a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800968e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800969c:	6939      	ldr	r1, [r7, #16]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff ff0e 	bl	80094c0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80096a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	72fb      	strb	r3, [r7, #11]
 80096be:	4613      	mov	r3, r2
 80096c0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d836      	bhi.n	8009740 <sequence_step_enabled+0x90>
 80096d2:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <sequence_step_enabled+0x28>)
 80096d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d8:	080096ed 	.word	0x080096ed
 80096dc:	080096ff 	.word	0x080096ff
 80096e0:	08009711 	.word	0x08009711
 80096e4:	08009723 	.word	0x08009723
 80096e8:	08009735 	.word	0x08009735
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80096ec:	7abb      	ldrb	r3, [r7, #10]
 80096ee:	111b      	asrs	r3, r3, #4
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	701a      	strb	r2, [r3, #0]
		break;
 80096fc:	e022      	b.n	8009744 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80096fe:	7abb      	ldrb	r3, [r7, #10]
 8009700:	10db      	asrs	r3, r3, #3
 8009702:	b2db      	uxtb	r3, r3
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	b2da      	uxtb	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	701a      	strb	r2, [r3, #0]
		break;
 800970e:	e019      	b.n	8009744 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009710:	7abb      	ldrb	r3, [r7, #10]
 8009712:	109b      	asrs	r3, r3, #2
 8009714:	b2db      	uxtb	r3, r3
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	701a      	strb	r2, [r3, #0]
		break;
 8009720:	e010      	b.n	8009744 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009722:	7abb      	ldrb	r3, [r7, #10]
 8009724:	119b      	asrs	r3, r3, #6
 8009726:	b2db      	uxtb	r3, r3
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	b2da      	uxtb	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	701a      	strb	r2, [r3, #0]
		break;
 8009732:	e007      	b.n	8009744 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009734:	7abb      	ldrb	r3, [r7, #10]
 8009736:	09db      	lsrs	r3, r3, #7
 8009738:	b2da      	uxtb	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	701a      	strb	r2, [r3, #0]
		break;
 800973e:	e001      	b.n	8009744 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009740:	23fc      	movs	r3, #252	; 0xfc
 8009742:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009744:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009748:	4618      	mov	r0, r3
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009766:	f107 030e 	add.w	r3, r7, #14
 800976a:	461a      	mov	r2, r3
 800976c:	2101      	movs	r1, #1
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f004 fa00 	bl	800db74 <VL53L0X_RdByte>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d107      	bne.n	8009790 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009780:	7bba      	ldrb	r2, [r7, #14]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2100      	movs	r1, #0
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff ff92 	bl	80096b0 <sequence_step_enabled>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d108      	bne.n	80097aa <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009798:	7bba      	ldrb	r2, [r7, #14]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	3302      	adds	r3, #2
 800979e:	2101      	movs	r1, #1
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff ff85 	bl	80096b0 <sequence_step_enabled>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80097aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d108      	bne.n	80097c4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80097b2:	7bba      	ldrb	r2, [r7, #14]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	3301      	adds	r3, #1
 80097b8:	2102      	movs	r1, #2
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff ff78 	bl	80096b0 <sequence_step_enabled>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80097c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d108      	bne.n	80097de <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80097cc:	7bba      	ldrb	r2, [r7, #14]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	3303      	adds	r3, #3
 80097d2:	2103      	movs	r1, #3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff ff6b 	bl	80096b0 <sequence_step_enabled>
 80097da:	4603      	mov	r3, r0
 80097dc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80097de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d108      	bne.n	80097f8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80097e6:	7bba      	ldrb	r2, [r7, #14]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	3304      	adds	r3, #4
 80097ec:	2104      	movs	r1, #4
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff ff5e 	bl	80096b0 <sequence_step_enabled>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800980e:	2300      	movs	r3, #0
 8009810:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	461a      	mov	r2, r3
 8009818:	21f8      	movs	r1, #248	; 0xf8
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f004 f9d4 	bl	800dbc8 <VL53L0X_RdWord>
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d108      	bne.n	800983e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800982c:	f107 0308 	add.w	r3, r7, #8
 8009830:	461a      	mov	r2, r3
 8009832:	2104      	movs	r1, #4
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f004 f9ff 	bl	800dc38 <VL53L0X_RdDWord>
 800983a:	4603      	mov	r3, r0
 800983c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800983e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10c      	bne.n	8009860 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009846:	89bb      	ldrh	r3, [r7, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d005      	beq.n	8009858 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	89ba      	ldrh	r2, [r7, #12]
 8009850:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7f1b      	ldrb	r3, [r3, #28]
 800987e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	7bba      	ldrb	r2, [r7, #14]
 8009884:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b086      	sub	sp, #24
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80098a4:	f107 030e 	add.w	r3, r7, #14
 80098a8:	461a      	mov	r2, r3
 80098aa:	2120      	movs	r1, #32
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f004 f98b 	bl	800dbc8 <VL53L0X_RdWord>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80098b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d118      	bne.n	80098f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80098be:	89fb      	ldrh	r3, [r7, #14]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d109      	bne.n	80098d8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	771a      	strb	r2, [r3, #28]
 80098d6:	e00b      	b.n	80098f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80098d8:	89fb      	ldrh	r3, [r7, #14]
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	807b      	strh	r3, [r7, #2]
 8009908:	4613      	mov	r3, r2
 800990a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800990c:	2300      	movs	r3, #0
 800990e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800991c:	887b      	ldrh	r3, [r7, #2]
 800991e:	2b05      	cmp	r3, #5
 8009920:	d902      	bls.n	8009928 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009922:	23fc      	movs	r3, #252	; 0xfc
 8009924:	75fb      	strb	r3, [r7, #23]
 8009926:	e05b      	b.n	80099e0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009928:	787b      	ldrb	r3, [r7, #1]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d106      	bne.n	800993c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009936:	2301      	movs	r3, #1
 8009938:	73bb      	strb	r3, [r7, #14]
 800993a:	e00a      	b.n	8009952 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800993c:	887b      	ldrh	r3, [r7, #2]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	330c      	adds	r3, #12
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800994e:	2301      	movs	r3, #1
 8009950:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009952:	887b      	ldrh	r3, [r7, #2]
 8009954:	2b05      	cmp	r3, #5
 8009956:	d841      	bhi.n	80099dc <VL53L0X_SetLimitCheckEnable+0xe0>
 8009958:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <VL53L0X_SetLimitCheckEnable+0x64>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	08009979 	.word	0x08009979
 8009964:	08009983 	.word	0x08009983
 8009968:	08009999 	.word	0x08009999
 800996c:	080099a3 	.word	0x080099a3
 8009970:	080099ad 	.word	0x080099ad
 8009974:	080099c5 	.word	0x080099c5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	7bfa      	ldrb	r2, [r7, #15]
 800997c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009980:	e02e      	b.n	80099e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009986:	b29b      	uxth	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	2144      	movs	r1, #68	; 0x44
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f004 f893 	bl	800dab8 <VL53L0X_WrWord>
 8009992:	4603      	mov	r3, r0
 8009994:	75fb      	strb	r3, [r7, #23]

			break;
 8009996:	e023      	b.n	80099e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	7bfa      	ldrb	r2, [r7, #15]
 800999c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80099a0:	e01e      	b.n	80099e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	7bfa      	ldrb	r2, [r7, #15]
 80099a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80099aa:	e019      	b.n	80099e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80099b2:	7b7b      	ldrb	r3, [r7, #13]
 80099b4:	22fe      	movs	r2, #254	; 0xfe
 80099b6:	2160      	movs	r1, #96	; 0x60
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f004 f8a7 	bl	800db0c <VL53L0X_UpdateByte>
 80099be:	4603      	mov	r3, r0
 80099c0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80099c2:	e00d      	b.n	80099e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
 80099c6:	011b      	lsls	r3, r3, #4
 80099c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80099ca:	7b7b      	ldrb	r3, [r7, #13]
 80099cc:	22ef      	movs	r2, #239	; 0xef
 80099ce:	2160      	movs	r1, #96	; 0x60
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f004 f89b 	bl	800db0c <VL53L0X_UpdateByte>
 80099d6:	4603      	mov	r3, r0
 80099d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80099da:	e001      	b.n	80099e0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099dc:	23fc      	movs	r3, #252	; 0xfc
 80099de:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80099e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10f      	bne.n	8009a08 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80099e8:	787b      	ldrb	r3, [r7, #1]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80099ee:	887b      	ldrh	r3, [r7, #2]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	4413      	add	r3, r2
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80099fa:	e005      	b.n	8009a08 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80099fc:	887b      	ldrh	r3, [r7, #2]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	4413      	add	r3, r2
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009a26:	897b      	ldrh	r3, [r7, #10]
 8009a28:	2b05      	cmp	r3, #5
 8009a2a:	d905      	bls.n	8009a38 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a2c:	23fc      	movs	r3, #252	; 0xfc
 8009a2e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	e008      	b.n	8009a4a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009a38:	897b      	ldrh	r3, [r7, #10]
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a42:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7dba      	ldrb	r2, [r7, #22]
 8009a48:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	371c      	adds	r7, #28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
	...

08009a5c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	460b      	mov	r3, r1
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009a6e:	897b      	ldrh	r3, [r7, #10]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a78:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009a7a:	7dbb      	ldrb	r3, [r7, #22]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d107      	bne.n	8009a90 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a80:	897b      	ldrh	r3, [r7, #10]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	330c      	adds	r3, #12
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	605a      	str	r2, [r3, #4]
 8009a8e:	e040      	b.n	8009b12 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009a90:	897b      	ldrh	r3, [r7, #10]
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d830      	bhi.n	8009af8 <VL53L0X_SetLimitCheckValue+0x9c>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <VL53L0X_SetLimitCheckValue+0x40>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009ab5 	.word	0x08009ab5
 8009aa0:	08009abd 	.word	0x08009abd
 8009aa4:	08009ad3 	.word	0x08009ad3
 8009aa8:	08009adb 	.word	0x08009adb
 8009aac:	08009ae3 	.word	0x08009ae3
 8009ab0:	08009ae3 	.word	0x08009ae3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009aba:	e01f      	b.n	8009afc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	2144      	movs	r1, #68	; 0x44
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f003 fff6 	bl	800dab8 <VL53L0X_WrWord>
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009ad0:	e014      	b.n	8009afc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009ad8:	e010      	b.n	8009afc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009ae0:	e00c      	b.n	8009afc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	461a      	mov	r2, r3
 8009aea:	2164      	movs	r1, #100	; 0x64
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f003 ffe3 	bl	800dab8 <VL53L0X_WrWord>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009af6:	e001      	b.n	8009afc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009af8:	23fc      	movs	r3, #252	; 0xfc
 8009afa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d106      	bne.n	8009b12 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b04:	897b      	ldrh	r3, [r7, #10]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	330c      	adds	r3, #12
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop

08009b20 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009b32:	2300      	movs	r3, #0
 8009b34:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009b36:	897b      	ldrh	r3, [r7, #10]
 8009b38:	2b05      	cmp	r3, #5
 8009b3a:	d847      	bhi.n	8009bcc <VL53L0X_GetLimitCheckValue+0xac>
 8009b3c:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <VL53L0X_GetLimitCheckValue+0x24>)
 8009b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b42:	bf00      	nop
 8009b44:	08009b5d 	.word	0x08009b5d
 8009b48:	08009b69 	.word	0x08009b69
 8009b4c:	08009b8f 	.word	0x08009b8f
 8009b50:	08009b9b 	.word	0x08009b9b
 8009b54:	08009ba7 	.word	0x08009ba7
 8009b58:	08009ba7 	.word	0x08009ba7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b60:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	77bb      	strb	r3, [r7, #30]
		break;
 8009b66:	e033      	b.n	8009bd0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009b68:	f107 0316 	add.w	r3, r7, #22
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2144      	movs	r1, #68	; 0x44
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f004 f829 	bl	800dbc8 <VL53L0X_RdWord>
 8009b76:	4603      	mov	r3, r0
 8009b78:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009b7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009b82:	8afb      	ldrh	r3, [r7, #22]
 8009b84:	025b      	lsls	r3, r3, #9
 8009b86:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	77bb      	strb	r3, [r7, #30]
		break;
 8009b8c:	e020      	b.n	8009bd0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b92:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	77bb      	strb	r3, [r7, #30]
		break;
 8009b98:	e01a      	b.n	8009bd0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	77bb      	strb	r3, [r7, #30]
		break;
 8009ba4:	e014      	b.n	8009bd0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009ba6:	f107 0316 	add.w	r3, r7, #22
 8009baa:	461a      	mov	r2, r3
 8009bac:	2164      	movs	r1, #100	; 0x64
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f004 f80a 	bl	800dbc8 <VL53L0X_RdWord>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009bb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009bc0:	8afb      	ldrh	r3, [r7, #22]
 8009bc2:	025b      	lsls	r3, r3, #9
 8009bc4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	77bb      	strb	r3, [r7, #30]
		break;
 8009bca:	e001      	b.n	8009bd0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bcc:	23fc      	movs	r3, #252	; 0xfc
 8009bce:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d12a      	bne.n	8009c2e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009bd8:	7fbb      	ldrb	r3, [r7, #30]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d124      	bne.n	8009c28 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d110      	bne.n	8009c06 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009be4:	897b      	ldrh	r3, [r7, #10]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	330c      	adds	r3, #12
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	69ba      	ldr	r2, [r7, #24]
 8009bf6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009bf8:	897b      	ldrh	r3, [r7, #10]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009c04:	e013      	b.n	8009c2e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009c0c:	897b      	ldrh	r3, [r7, #10]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	330c      	adds	r3, #12
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	69ba      	ldr	r2, [r7, #24]
 8009c18:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009c1a:	897b      	ldrh	r3, [r7, #10]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009c26:	e002      	b.n	8009c2e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c2e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop

08009c3c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8009c4a:	f107 030e 	add.w	r3, r7, #14
 8009c4e:	461a      	mov	r2, r3
 8009c50:	2101      	movs	r1, #1
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f003 ff8e 	bl	800db74 <VL53L0X_RdByte>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8009c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10e      	bne.n	8009c82 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009c64:	7bba      	ldrb	r2, [r7, #14]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	b25b      	sxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da03      	bge.n	8009c7c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2201      	movs	r2, #1
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	e002      	b.n	8009c82 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d104      	bne.n	8009c94 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781a      	ldrb	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009cac:	f107 030e 	add.w	r3, r7, #14
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7ff fbd2 	bl	800945c <VL53L0X_GetDeviceMode>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d107      	bne.n	8009cd4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f898 	bl	8009e00 <VL53L0X_StartMeasurement>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 fb3f 	bl	800b360 <VL53L0X_measurement_poll_for_completion>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d103      	bne.n	8009cfc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2203      	movs	r2, #3
 8009cf8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8009cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009d18:	2301      	movs	r3, #1
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f001 fae1 	bl	800b2e6 <VL53L0X_perform_ref_calibration>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009d4a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8009d4c:	7dbb      	ldrb	r3, [r7, #22]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d005      	beq.n	8009d5e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009d52:	7dbb      	ldrb	r3, [r7, #22]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d002      	beq.n	8009d5e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009d58:	7dbb      	ldrb	r3, [r7, #22]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d147      	bne.n	8009dee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8009d5e:	f107 030c 	add.w	r3, r7, #12
 8009d62:	f107 0210 	add.w	r2, r7, #16
 8009d66:	2101      	movs	r1, #1
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fbc3 	bl	800a4f4 <VL53L0X_GetInterruptThresholds>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009d78:	d803      	bhi.n	8009d82 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8009d7a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8009d7c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009d80:	d935      	bls.n	8009dee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8009d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d131      	bne.n	8009dee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009d90:	491a      	ldr	r1, [pc, #104]	; (8009dfc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f002 ff56 	bl	800cc44 <VL53L0X_load_tuning_settings>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	75fb      	strb	r3, [r7, #23]
 8009d9c:	e027      	b.n	8009dee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009d9e:	2204      	movs	r2, #4
 8009da0:	21ff      	movs	r1, #255	; 0xff
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f003 fe64 	bl	800da70 <VL53L0X_WrByte>
 8009da8:	4603      	mov	r3, r0
 8009daa:	461a      	mov	r2, r3
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009db2:	2200      	movs	r2, #0
 8009db4:	2170      	movs	r1, #112	; 0x70
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f003 fe5a 	bl	800da70 <VL53L0X_WrByte>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	21ff      	movs	r1, #255	; 0xff
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f003 fe50 	bl	800da70 <VL53L0X_WrByte>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2180      	movs	r1, #128	; 0x80
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f003 fe46 	bl	800da70 <VL53L0X_WrByte>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8009dee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3718      	adds	r7, #24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	2000000c 	.word	0x2000000c

08009e00 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009e10:	f107 030e 	add.w	r3, r7, #14
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff fb20 	bl	800945c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	2180      	movs	r1, #128	; 0x80
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f003 fe25 	bl	800da70 <VL53L0X_WrByte>
 8009e26:	4603      	mov	r3, r0
 8009e28:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	21ff      	movs	r1, #255	; 0xff
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f003 fe1e 	bl	800da70 <VL53L0X_WrByte>
 8009e34:	4603      	mov	r3, r0
 8009e36:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f003 fe17 	bl	800da70 <VL53L0X_WrByte>
 8009e42:	4603      	mov	r3, r0
 8009e44:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	2191      	movs	r1, #145	; 0x91
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f003 fe0d 	bl	800da70 <VL53L0X_WrByte>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f003 fe06 	bl	800da70 <VL53L0X_WrByte>
 8009e64:	4603      	mov	r3, r0
 8009e66:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e68:	2200      	movs	r2, #0
 8009e6a:	21ff      	movs	r1, #255	; 0xff
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f003 fdff 	bl	800da70 <VL53L0X_WrByte>
 8009e72:	4603      	mov	r3, r0
 8009e74:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009e76:	2200      	movs	r2, #0
 8009e78:	2180      	movs	r1, #128	; 0x80
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f003 fdf8 	bl	800da70 <VL53L0X_WrByte>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d054      	beq.n	8009f34 <VL53L0X_StartMeasurement+0x134>
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	dc6c      	bgt.n	8009f68 <VL53L0X_StartMeasurement+0x168>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <VL53L0X_StartMeasurement+0x98>
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d034      	beq.n	8009f00 <VL53L0X_StartMeasurement+0x100>
 8009e96:	e067      	b.n	8009f68 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8009e98:	2201      	movs	r2, #1
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f003 fde7 	bl	800da70 <VL53L0X_WrByte>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8009eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d15d      	bne.n	8009f6e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d008      	beq.n	8009ece <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8009ebc:	f107 030d 	add.w	r3, r7, #13
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f003 fe55 	bl	800db74 <VL53L0X_RdByte>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009ed4:	7b7a      	ldrb	r2, [r7, #13]
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009edc:	7bfa      	ldrb	r2, [r7, #15]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d107      	bne.n	8009ef2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8009ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d103      	bne.n	8009ef2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009ef0:	d3e1      	bcc.n	8009eb6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009ef8:	d339      	bcc.n	8009f6e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009efa:	23f9      	movs	r3, #249	; 0xf9
 8009efc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009efe:	e036      	b.n	8009f6e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d105      	bne.n	8009f14 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009f08:	2101      	movs	r1, #1
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff ff12 	bl	8009d34 <VL53L0X_CheckAndLoadInterruptSettings>
 8009f10:	4603      	mov	r3, r0
 8009f12:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009f14:	2202      	movs	r2, #2
 8009f16:	2100      	movs	r1, #0
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f003 fda9 	bl	800da70 <VL53L0X_WrByte>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8009f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d123      	bne.n	8009f72 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009f32:	e01e      	b.n	8009f72 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d105      	bne.n	8009f48 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff fef8 	bl	8009d34 <VL53L0X_CheckAndLoadInterruptSettings>
 8009f44:	4603      	mov	r3, r0
 8009f46:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009f48:	2204      	movs	r2, #4
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f003 fd8f 	bl	800da70 <VL53L0X_WrByte>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8009f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10b      	bne.n	8009f76 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2204      	movs	r2, #4
 8009f62:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009f66:	e006      	b.n	8009f76 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009f68:	23f8      	movs	r3, #248	; 0xf8
 8009f6a:	75fb      	strb	r3, [r7, #23]
 8009f6c:	e004      	b.n	8009f78 <VL53L0X_StartMeasurement+0x178>
		break;
 8009f6e:	bf00      	nop
 8009f70:	e002      	b.n	8009f78 <VL53L0X_StartMeasurement+0x178>
		break;
 8009f72:	bf00      	nop
 8009f74:	e000      	b.n	8009f78 <VL53L0X_StartMeasurement+0x178>
		break;
 8009f76:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8009f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009f98:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	d112      	bne.n	8009fc6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8009fa0:	f107 0308 	add.w	r3, r7, #8
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fb1a 	bl	800a5e0 <VL53L0X_GetInterruptMaskStatus>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d103      	bne.n	8009fbe <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	701a      	strb	r2, [r3, #0]
 8009fbc:	e01c      	b.n	8009ff8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	701a      	strb	r2, [r3, #0]
 8009fc4:	e018      	b.n	8009ff8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009fc6:	f107 030d 	add.w	r3, r7, #13
 8009fca:	461a      	mov	r2, r3
 8009fcc:	2114      	movs	r1, #20
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f003 fdd0 	bl	800db74 <VL53L0X_RdByte>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10b      	bne.n	8009ff8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009fe0:	7b7b      	ldrb	r3, [r7, #13]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2201      	movs	r2, #1
 8009fee:	701a      	strb	r2, [r3, #0]
 8009ff0:	e002      	b.n	8009ff8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a004:	b5b0      	push	{r4, r5, r7, lr}
 800a006:	b096      	sub	sp, #88	; 0x58
 800a008:	af02      	add	r7, sp, #8
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a00e:	2300      	movs	r3, #0
 800a010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a014:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a018:	230c      	movs	r3, #12
 800a01a:	2114      	movs	r1, #20
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f003 fcfb 	bl	800da18 <VL53L0X_ReadMulti>
 800a022:	4603      	mov	r3, r0
 800a024:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a028:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f040 80d1 	bne.w	800a1d4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2200      	movs	r2, #0
 800a036:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a03e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a042:	b29b      	uxth	r3, r3
 800a044:	021b      	lsls	r3, r3, #8
 800a046:	b29a      	uxth	r2, r3
 800a048:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4413      	add	r3, r2
 800a050:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2200      	movs	r2, #0
 800a058:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a05a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a05e:	b29b      	uxth	r3, r3
 800a060:	021b      	lsls	r3, r3, #8
 800a062:	b29a      	uxth	r2, r3
 800a064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a068:	b29b      	uxth	r3, r3
 800a06a:	4413      	add	r3, r2
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	025b      	lsls	r3, r3, #9
 800a070:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a076:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a078:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	b29a      	uxth	r2, r3
 800a082:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a086:	b29b      	uxth	r3, r3
 800a088:	4413      	add	r3, r2
 800a08a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a08e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a092:	025b      	lsls	r3, r3, #9
 800a094:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a09a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	021b      	lsls	r3, r3, #8
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a0b6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a0b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a0c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a0ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a0d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a0d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0d8:	d046      	beq.n	800a168 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a0da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a0dc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a0e0:	fb02 f303 	mul.w	r3, r2, r3
 800a0e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0e8:	4a57      	ldr	r2, [pc, #348]	; (800a248 <VL53L0X_GetRangingMeasurementData+0x244>)
 800a0ea:	fb82 1203 	smull	r1, r2, r2, r3
 800a0ee:	1192      	asrs	r2, r2, #6
 800a0f0:	17db      	asrs	r3, r3, #31
 800a0f2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a0f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	7f1b      	ldrb	r3, [r3, #28]
 800a102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d02c      	beq.n	800a168 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a10e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a110:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a114:	fb02 f303 	mul.w	r3, r2, r3
 800a118:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d10d      	bne.n	800a13c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800a120:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a124:	2b00      	cmp	r3, #0
 800a126:	d004      	beq.n	800a132 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800a128:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a12c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a130:	e016      	b.n	800a160 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800a132:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a136:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a13a:	e011      	b.n	800a160 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a13c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a142:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a146:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a148:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a14c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a150:	121b      	asrs	r3, r3, #8
 800a152:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a156:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a158:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a15c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a160:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a164:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00d      	beq.n	800a18c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a170:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a174:	089b      	lsrs	r3, r3, #2
 800a176:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a17c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a180:	b2db      	uxtb	r3, r3
 800a182:	019b      	lsls	r3, r3, #6
 800a184:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	75da      	strb	r2, [r3, #23]
 800a18a:	e006      	b.n	800a19a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a192:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2200      	movs	r2, #0
 800a198:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a19a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a19e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a1a2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f003 f9e5 	bl	800d580 <VL53L0X_get_pal_range_status>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a1c4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d103      	bne.n	800a1d4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a1cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1d4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d12f      	bne.n	800a23c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f107 040c 	add.w	r4, r7, #12
 800a1e2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a1e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a1ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a1f6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a1fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a204:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a20a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a210:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a216:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a21c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a222:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a22c:	f107 050c 	add.w	r5, r7, #12
 800a230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a238:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a23c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a240:	4618      	mov	r0, r3
 800a242:	3750      	adds	r7, #80	; 0x50
 800a244:	46bd      	mov	sp, r7
 800a246:	bdb0      	pop	{r4, r5, r7, pc}
 800a248:	10624dd3 	.word	0x10624dd3

0800a24c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a256:	2300      	movs	r3, #0
 800a258:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a25a:	2100      	movs	r1, #0
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7ff f8d1 	bl	8009404 <VL53L0X_SetDeviceMode>
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d104      	bne.n	800a278 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7ff fd16 	bl	8009ca0 <VL53L0X_PerformSingleMeasurement>
 800a274:	4603      	mov	r3, r0
 800a276:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d105      	bne.n	800a28c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7ff febe 	bl	800a004 <VL53L0X_GetRangingMeasurementData>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a28c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d105      	bne.n	800a2a0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a294:	2100      	movs	r1, #0
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f962 	bl	800a560 <VL53L0X_ClearInterruptMask>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	70fb      	strb	r3, [r7, #3]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70bb      	strb	r3, [r7, #2]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a2d0:	23f6      	movs	r3, #246	; 0xf6
 800a2d2:	73fb      	strb	r3, [r7, #15]
 800a2d4:	e107      	b.n	800a4e6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a2d6:	78bb      	ldrb	r3, [r7, #2]
 800a2d8:	2b14      	cmp	r3, #20
 800a2da:	d110      	bne.n	800a2fe <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a2dc:	7e3b      	ldrb	r3, [r7, #24]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a2e2:	2310      	movs	r3, #16
 800a2e4:	73bb      	strb	r3, [r7, #14]
 800a2e6:	e001      	b.n	800a2ec <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a2ec:	7bbb      	ldrb	r3, [r7, #14]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	2184      	movs	r1, #132	; 0x84
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f003 fbbc 	bl	800da70 <VL53L0X_WrByte>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
 800a2fc:	e0f3      	b.n	800a4e6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a2fe:	78bb      	ldrb	r3, [r7, #2]
 800a300:	2b15      	cmp	r3, #21
 800a302:	f040 8097 	bne.w	800a434 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a306:	2201      	movs	r2, #1
 800a308:	21ff      	movs	r1, #255	; 0xff
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f003 fbb0 	bl	800da70 <VL53L0X_WrByte>
 800a310:	4603      	mov	r3, r0
 800a312:	461a      	mov	r2, r3
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	4313      	orrs	r3, r2
 800a318:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a31a:	2200      	movs	r2, #0
 800a31c:	2100      	movs	r1, #0
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f003 fba6 	bl	800da70 <VL53L0X_WrByte>
 800a324:	4603      	mov	r3, r0
 800a326:	461a      	mov	r2, r3
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a32e:	2200      	movs	r2, #0
 800a330:	21ff      	movs	r1, #255	; 0xff
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f003 fb9c 	bl	800da70 <VL53L0X_WrByte>
 800a338:	4603      	mov	r3, r0
 800a33a:	461a      	mov	r2, r3
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	4313      	orrs	r3, r2
 800a340:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a342:	2201      	movs	r2, #1
 800a344:	2180      	movs	r1, #128	; 0x80
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f003 fb92 	bl	800da70 <VL53L0X_WrByte>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	4313      	orrs	r3, r2
 800a354:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a356:	2202      	movs	r2, #2
 800a358:	2185      	movs	r1, #133	; 0x85
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f003 fb88 	bl	800da70 <VL53L0X_WrByte>
 800a360:	4603      	mov	r3, r0
 800a362:	461a      	mov	r2, r3
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	4313      	orrs	r3, r2
 800a368:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a36a:	2204      	movs	r2, #4
 800a36c:	21ff      	movs	r1, #255	; 0xff
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f003 fb7e 	bl	800da70 <VL53L0X_WrByte>
 800a374:	4603      	mov	r3, r0
 800a376:	461a      	mov	r2, r3
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a37e:	2200      	movs	r2, #0
 800a380:	21cd      	movs	r1, #205	; 0xcd
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f003 fb74 	bl	800da70 <VL53L0X_WrByte>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	4313      	orrs	r3, r2
 800a390:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a392:	2211      	movs	r2, #17
 800a394:	21cc      	movs	r1, #204	; 0xcc
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f003 fb6a 	bl	800da70 <VL53L0X_WrByte>
 800a39c:	4603      	mov	r3, r0
 800a39e:	461a      	mov	r2, r3
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a3a6:	2207      	movs	r2, #7
 800a3a8:	21ff      	movs	r1, #255	; 0xff
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f003 fb60 	bl	800da70 <VL53L0X_WrByte>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	21be      	movs	r1, #190	; 0xbe
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f003 fb56 	bl	800da70 <VL53L0X_WrByte>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a3ce:	2206      	movs	r2, #6
 800a3d0:	21ff      	movs	r1, #255	; 0xff
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f003 fb4c 	bl	800da70 <VL53L0X_WrByte>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	461a      	mov	r2, r3
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a3e2:	2209      	movs	r2, #9
 800a3e4:	21cc      	movs	r1, #204	; 0xcc
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f003 fb42 	bl	800da70 <VL53L0X_WrByte>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	21ff      	movs	r1, #255	; 0xff
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f003 fb38 	bl	800da70 <VL53L0X_WrByte>
 800a400:	4603      	mov	r3, r0
 800a402:	461a      	mov	r2, r3
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	4313      	orrs	r3, r2
 800a408:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a40a:	2201      	movs	r2, #1
 800a40c:	21ff      	movs	r1, #255	; 0xff
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f003 fb2e 	bl	800da70 <VL53L0X_WrByte>
 800a414:	4603      	mov	r3, r0
 800a416:	461a      	mov	r2, r3
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a41e:	2200      	movs	r2, #0
 800a420:	2100      	movs	r1, #0
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f003 fb24 	bl	800da70 <VL53L0X_WrByte>
 800a428:	4603      	mov	r3, r0
 800a42a:	461a      	mov	r2, r3
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
 800a42e:	4313      	orrs	r3, r2
 800a430:	73fb      	strb	r3, [r7, #15]
 800a432:	e058      	b.n	800a4e6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d121      	bne.n	800a480 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a43c:	787b      	ldrb	r3, [r7, #1]
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d81b      	bhi.n	800a47a <VL53L0X_SetGpioConfig+0x1ce>
 800a442:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <VL53L0X_SetGpioConfig+0x19c>)
 800a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a448:	0800a45d 	.word	0x0800a45d
 800a44c:	0800a463 	.word	0x0800a463
 800a450:	0800a469 	.word	0x0800a469
 800a454:	0800a46f 	.word	0x0800a46f
 800a458:	0800a475 	.word	0x0800a475
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a45c:	2300      	movs	r3, #0
 800a45e:	73bb      	strb	r3, [r7, #14]
				break;
 800a460:	e00f      	b.n	800a482 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a462:	2301      	movs	r3, #1
 800a464:	73bb      	strb	r3, [r7, #14]
				break;
 800a466:	e00c      	b.n	800a482 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a468:	2302      	movs	r3, #2
 800a46a:	73bb      	strb	r3, [r7, #14]
				break;
 800a46c:	e009      	b.n	800a482 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a46e:	2303      	movs	r3, #3
 800a470:	73bb      	strb	r3, [r7, #14]
				break;
 800a472:	e006      	b.n	800a482 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a474:	2304      	movs	r3, #4
 800a476:	73bb      	strb	r3, [r7, #14]
				break;
 800a478:	e003      	b.n	800a482 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a47a:	23f5      	movs	r3, #245	; 0xf5
 800a47c:	73fb      	strb	r3, [r7, #15]
 800a47e:	e000      	b.n	800a482 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a480:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d107      	bne.n	800a49a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	461a      	mov	r2, r3
 800a48e:	210a      	movs	r1, #10
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f003 faed 	bl	800da70 <VL53L0X_WrByte>
 800a496:	4603      	mov	r3, r0
 800a498:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10f      	bne.n	800a4c2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a4a2:	7e3b      	ldrb	r3, [r7, #24]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73bb      	strb	r3, [r7, #14]
 800a4ac:	e001      	b.n	800a4b2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a4ae:	2310      	movs	r3, #16
 800a4b0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	22ef      	movs	r2, #239	; 0xef
 800a4b6:	2184      	movs	r1, #132	; 0x84
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f003 fb27 	bl	800db0c <VL53L0X_UpdateByte>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a4c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d103      	bne.n	800a4d2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	787a      	ldrb	r2, [r7, #1]
 800a4ce:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a4d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d105      	bne.n	800a4e6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a4da:	2100      	movs	r1, #0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f83f 	bl	800a560 <VL53L0X_ClearInterruptMask>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop

0800a4f4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	607a      	str	r2, [r7, #4]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	460b      	mov	r3, r1
 800a502:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a504:	2300      	movs	r3, #0
 800a506:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a508:	f107 0314 	add.w	r3, r7, #20
 800a50c:	461a      	mov	r2, r3
 800a50e:	210e      	movs	r1, #14
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f003 fb59 	bl	800dbc8 <VL53L0X_RdWord>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a51a:	8abb      	ldrh	r3, [r7, #20]
 800a51c:	045b      	lsls	r3, r3, #17
 800a51e:	461a      	mov	r2, r3
 800a520:	4b0e      	ldr	r3, [pc, #56]	; (800a55c <VL53L0X_GetInterruptThresholds+0x68>)
 800a522:	4013      	ands	r3, r2
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10f      	bne.n	800a550 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a530:	f107 0314 	add.w	r3, r7, #20
 800a534:	461a      	mov	r2, r3
 800a536:	210c      	movs	r1, #12
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f003 fb45 	bl	800dbc8 <VL53L0X_RdWord>
 800a53e:	4603      	mov	r3, r0
 800a540:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a542:	8abb      	ldrh	r3, [r7, #20]
 800a544:	045b      	lsls	r3, r3, #17
 800a546:	461a      	mov	r2, r3
 800a548:	4b04      	ldr	r3, [pc, #16]	; (800a55c <VL53L0X_GetInterruptThresholds+0x68>)
 800a54a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a550:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3718      	adds	r7, #24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	1ffe0000 	.word	0x1ffe0000

0800a560 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a572:	2201      	movs	r2, #1
 800a574:	210b      	movs	r1, #11
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f003 fa7a 	bl	800da70 <VL53L0X_WrByte>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a580:	2200      	movs	r2, #0
 800a582:	210b      	movs	r1, #11
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f003 fa73 	bl	800da70 <VL53L0X_WrByte>
 800a58a:	4603      	mov	r3, r0
 800a58c:	461a      	mov	r2, r3
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
 800a590:	4313      	orrs	r3, r2
 800a592:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a594:	f107 030d 	add.w	r3, r7, #13
 800a598:	461a      	mov	r2, r3
 800a59a:	2113      	movs	r1, #19
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f003 fae9 	bl	800db74 <VL53L0X_RdByte>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a5b2:	7b7b      	ldrb	r3, [r7, #13]
 800a5b4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d006      	beq.n	800a5ca <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a5bc:	7bbb      	ldrb	r3, [r7, #14]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d803      	bhi.n	800a5ca <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0d3      	beq.n	800a572 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d901      	bls.n	800a5d4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a5d0:	23f4      	movs	r3, #244	; 0xf4
 800a5d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a5d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800a5ee:	f107 030e 	add.w	r3, r7, #14
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	2113      	movs	r1, #19
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f003 fabc 	bl	800db74 <VL53L0X_RdByte>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a600:	7bbb      	ldrb	r3, [r7, #14]
 800a602:	f003 0207 	and.w	r2, r3, #7
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	f003 0318 	and.w	r3, r3, #24
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a614:	23fa      	movs	r3, #250	; 0xfa
 800a616:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a630:	2300      	movs	r3, #0
 800a632:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 fa03 	bl	800aa44 <VL53L0X_perform_ref_spad_management>
 800a63e:	4603      	mov	r3, r0
 800a640:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a642:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a65c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a660:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a666:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a668:	f107 0308 	add.w	r3, r7, #8
 800a66c:	461a      	mov	r2, r3
 800a66e:	2128      	movs	r1, #40	; 0x28
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f003 faa9 	bl	800dbc8 <VL53L0X_RdWord>
 800a676:	4603      	mov	r3, r0
 800a678:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d11e      	bne.n	800a6c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a682:	893b      	ldrh	r3, [r7, #8]
 800a684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a688:	b29b      	uxth	r3, r3
 800a68a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a68c:	893b      	ldrh	r3, [r7, #8]
 800a68e:	461a      	mov	r2, r3
 800a690:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a694:	429a      	cmp	r2, r3
 800a696:	dd0b      	ble.n	800a6b0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a698:	893a      	ldrh	r2, [r7, #8]
 800a69a:	897b      	ldrh	r3, [r7, #10]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	b21b      	sxth	r3, r3
 800a6a2:	461a      	mov	r2, r3
					* 250;
 800a6a4:	23fa      	movs	r3, #250	; 0xfa
 800a6a6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e007      	b.n	800a6c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a6b0:	893b      	ldrh	r3, [r7, #8]
 800a6b2:	b21b      	sxth	r3, r3
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	23fa      	movs	r3, #250	; 0xfa
 800a6b8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b08b      	sub	sp, #44	; 0x2c
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a6da:	2308      	movs	r3, #8
 800a6dc:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6e8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6fc:	69b9      	ldr	r1, [r7, #24]
 800a6fe:	fb01 f202 	mul.w	r2, r1, r2
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
 800a70a:	e030      	b.n	800a76e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	4413      	add	r3, r2
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800a71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d11e      	bne.n	800a760 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800a722:	7ffa      	ldrb	r2, [r7, #31]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	fa42 f303 	asr.w	r3, r2, r3
 800a72a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800a730:	e016      	b.n	800a760 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800a732:	7ffb      	ldrb	r3, [r7, #31]
 800a734:	f003 0301 	and.w	r3, r3, #1
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00b      	beq.n	800a754 <get_next_good_spad+0x88>
				success = 1;
 800a73c:	2301      	movs	r3, #1
 800a73e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	fb03 f202 	mul.w	r2, r3, r2
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	4413      	add	r3, r2
 800a74c:	461a      	mov	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	601a      	str	r2, [r3, #0]
				break;
 800a752:	e009      	b.n	800a768 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800a754:	7ffb      	ldrb	r3, [r7, #31]
 800a756:	085b      	lsrs	r3, r3, #1
 800a758:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	3301      	adds	r3, #1
 800a75e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800a760:	6a3a      	ldr	r2, [r7, #32]
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	429a      	cmp	r2, r3
 800a766:	d3e4      	bcc.n	800a732 <get_next_good_spad+0x66>
				coarseIndex++) {
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	3301      	adds	r3, #1
 800a76c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	429a      	cmp	r2, r3
 800a774:	d202      	bcs.n	800a77c <get_next_good_spad+0xb0>
 800a776:	7fbb      	ldrb	r3, [r7, #30]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d0c7      	beq.n	800a70c <get_next_good_spad+0x40>
		}
	}
}
 800a77c:	bf00      	nop
 800a77e:	372c      	adds	r7, #44	; 0x2c
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800a790:	2301      	movs	r3, #1
 800a792:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	099b      	lsrs	r3, r3, #6
 800a798:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800a79a:	4a07      	ldr	r2, [pc, #28]	; (800a7b8 <is_aperture+0x30>)
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <is_aperture+0x22>
		isAperture = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	200002b8 	.word	0x200002b8

0800a7bc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b089      	sub	sp, #36	; 0x24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7e2:	69b9      	ldr	r1, [r7, #24]
 800a7e4:	fb01 f202 	mul.w	r2, r1, r2
 800a7e8:	1a9b      	subs	r3, r3, r2
 800a7ea:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800a7ec:	697a      	ldr	r2, [r7, #20]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d302      	bcc.n	800a7fa <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a7f4:	23ce      	movs	r3, #206	; 0xce
 800a7f6:	77fb      	strb	r3, [r7, #31]
 800a7f8:	e010      	b.n	800a81c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	4413      	add	r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	b25a      	sxtb	r2, r3
 800a804:	2101      	movs	r1, #1
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	fa01 f303 	lsl.w	r3, r1, r3
 800a80c:	b25b      	sxtb	r3, r3
 800a80e:	4313      	orrs	r3, r2
 800a810:	b259      	sxtb	r1, r3
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	4413      	add	r3, r2
 800a818:	b2ca      	uxtb	r2, r1
 800a81a:	701a      	strb	r2, [r3, #0]

	return status;
 800a81c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3724      	adds	r7, #36	; 0x24
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800a836:	2306      	movs	r3, #6
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	21b0      	movs	r1, #176	; 0xb0
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f003 f8bb 	bl	800d9b8 <VL53L0X_WriteMulti>
 800a842:	4603      	mov	r3, r0
 800a844:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800a846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800a85c:	2306      	movs	r3, #6
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	21b0      	movs	r1, #176	; 0xb0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f003 f8d8 	bl	800da18 <VL53L0X_ReadMulti>
 800a868:	4603      	mov	r3, r0
 800a86a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800a86c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b08c      	sub	sp, #48	; 0x30
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	607a      	str	r2, [r7, #4]
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	460b      	mov	r3, r1
 800a886:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a888:	2300      	movs	r3, #0
 800a88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800a88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a890:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800a892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a894:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a896:	2300      	movs	r3, #0
 800a898:	62bb      	str	r3, [r7, #40]	; 0x28
 800a89a:	e02b      	b.n	800a8f4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800a89c:	f107 031c 	add.w	r3, r7, #28
 800a8a0:	6a3a      	ldr	r2, [r7, #32]
 800a8a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff11 	bl	800a6cc <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8b0:	d103      	bne.n	800a8ba <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a8b2:	23ce      	movs	r3, #206	; 0xce
 800a8b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a8b8:	e020      	b.n	800a8fc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8c0:	4413      	add	r3, r2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff ff60 	bl	800a788 <is_aperture>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d003      	beq.n	800a8da <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a8d2:	23ce      	movs	r3, #206	; 0xce
 800a8d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a8d8:	e010      	b.n	800a8fc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800a8de:	6a3a      	ldr	r2, [r7, #32]
 800a8e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8e2:	6838      	ldr	r0, [r7, #0]
 800a8e4:	f7ff ff6a 	bl	800a7bc <enable_spad_bit>
		currentSpad++;
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d3cf      	bcc.n	800a89c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800a8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8fe:	6a3a      	ldr	r2, [r7, #32]
 800a900:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800a902:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff ff8d 	bl	800a82c <set_ref_spad_map>
 800a912:	4603      	mov	r3, r0
 800a914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800a918:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d121      	bne.n	800a964 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800a920:	f107 0314 	add.w	r3, r7, #20
 800a924:	4619      	mov	r1, r3
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f7ff ff93 	bl	800a852 <get_ref_spad_map>
 800a92c:	4603      	mov	r3, r0
 800a92e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800a936:	e011      	b.n	800a95c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93c:	4413      	add	r3, r2
 800a93e:	781a      	ldrb	r2, [r3, #0]
 800a940:	f107 0114 	add.w	r1, r7, #20
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	440b      	add	r3, r1
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d003      	beq.n	800a956 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a94e:	23ce      	movs	r3, #206	; 0xce
 800a950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a954:	e006      	b.n	800a964 <enable_ref_spads+0xec>
			}
			i++;
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	3301      	adds	r3, #1
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800a95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	429a      	cmp	r2, r3
 800a962:	d3e9      	bcc.n	800a938 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800a964:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3730      	adds	r7, #48	; 0x30
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08a      	sub	sp, #40	; 0x28
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a98c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800a990:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a994:	2b00      	cmp	r3, #0
 800a996:	d107      	bne.n	800a9a8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800a998:	22c0      	movs	r2, #192	; 0xc0
 800a99a:	2101      	movs	r1, #1
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f003 f867 	bl	800da70 <VL53L0X_WrByte>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800a9a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d108      	bne.n	800a9c2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800a9b0:	f107 0308 	add.w	r3, r7, #8
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fc48 	bl	800a24c <VL53L0X_PerformSingleRangingMeasurement>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800a9c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d107      	bne.n	800a9da <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	21ff      	movs	r1, #255	; 0xff
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f003 f84e 	bl	800da70 <VL53L0X_WrByte>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800a9da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d107      	bne.n	800a9f2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	21b6      	movs	r1, #182	; 0xb6
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f003 f8ee 	bl	800dbc8 <VL53L0X_RdWord>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800a9f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d107      	bne.n	800aa0a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	21ff      	movs	r1, #255	; 0xff
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f003 f836 	bl	800da70 <VL53L0X_WrByte>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800aa0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d112      	bne.n	800aa38 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800aa12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa16:	461a      	mov	r2, r3
 800aa18:	2101      	movs	r1, #1
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f003 f828 	bl	800da70 <VL53L0X_WrByte>
 800aa20:	4603      	mov	r3, r0
 800aa22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800aa26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d104      	bne.n	800aa38 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aa34:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800aa38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3728      	adds	r7, #40	; 0x28
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800aa44:	b590      	push	{r4, r7, lr}
 800aa46:	b09d      	sub	sp, #116	; 0x74
 800aa48:	af06      	add	r7, sp, #24
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa50:	2300      	movs	r3, #0
 800aa52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800aa56:	23b4      	movs	r3, #180	; 0xb4
 800aa58:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800aa60:	232c      	movs	r3, #44	; 0x2c
 800aa62:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800aa70:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800aa74:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800aa7e:	2306      	movs	r3, #6
 800aa80:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800aaa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800aaaa:	2300      	movs	r3, #0
 800aaac:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaae:	e009      	b.n	800aac4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800aabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac0:	3301      	adds	r3, #1
 800aac2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d3f1      	bcc.n	800aab0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aacc:	2201      	movs	r2, #1
 800aace:	21ff      	movs	r1, #255	; 0xff
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f002 ffcd 	bl	800da70 <VL53L0X_WrByte>
 800aad6:	4603      	mov	r3, r0
 800aad8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800aadc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d107      	bne.n	800aaf4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800aae4:	2200      	movs	r2, #0
 800aae6:	214f      	movs	r1, #79	; 0x4f
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f002 ffc1 	bl	800da70 <VL53L0X_WrByte>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800aaf4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d107      	bne.n	800ab0c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800aafc:	222c      	movs	r2, #44	; 0x2c
 800aafe:	214e      	movs	r1, #78	; 0x4e
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f002 ffb5 	bl	800da70 <VL53L0X_WrByte>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ab0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d107      	bne.n	800ab24 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ab14:	2200      	movs	r2, #0
 800ab16:	21ff      	movs	r1, #255	; 0xff
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f002 ffa9 	bl	800da70 <VL53L0X_WrByte>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ab24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d109      	bne.n	800ab40 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800ab2c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ab30:	461a      	mov	r2, r3
 800ab32:	21b6      	movs	r1, #182	; 0xb6
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f002 ff9b 	bl	800da70 <VL53L0X_WrByte>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800ab40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d107      	bne.n	800ab58 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2180      	movs	r1, #128	; 0x80
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f002 ff8f 	bl	800da70 <VL53L0X_WrByte>
 800ab52:	4603      	mov	r3, r0
 800ab54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800ab58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800ab60:	f107 0210 	add.w	r2, r7, #16
 800ab64:	f107 0111 	add.w	r1, r7, #17
 800ab68:	2300      	movs	r3, #0
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 fbbb 	bl	800b2e6 <VL53L0X_perform_ref_calibration>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800ab76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d121      	bne.n	800abc2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800ab82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab84:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800ab8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab8c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800ab9a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ab9e:	f107 0218 	add.w	r2, r7, #24
 800aba2:	9204      	str	r2, [sp, #16]
 800aba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aba6:	9203      	str	r2, [sp, #12]
 800aba8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abaa:	9202      	str	r2, [sp, #8]
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	4623      	mov	r3, r4
 800abb4:	4602      	mov	r2, r0
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f7ff fe5e 	bl	800a878 <enable_ref_spads>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800abc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d174      	bne.n	800acb4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800abce:	f107 0312 	add.w	r3, r7, #18
 800abd2:	4619      	mov	r1, r3
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f7ff fecb 	bl	800a970 <perform_ref_signal_measurement>
 800abda:	4603      	mov	r3, r0
 800abdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800abe0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d161      	bne.n	800acac <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800abe8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800abea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800abec:	429a      	cmp	r2, r3
 800abee:	d25d      	bcs.n	800acac <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800abf0:	2300      	movs	r3, #0
 800abf2:	64bb      	str	r3, [r7, #72]	; 0x48
 800abf4:	e009      	b.n	800ac0a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ac00:	2200      	movs	r2, #0
 800ac02:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800ac04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac06:	3301      	adds	r3, #1
 800ac08:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d3f1      	bcc.n	800abf6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800ac12:	e002      	b.n	800ac1a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800ac14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac16:	3301      	adds	r3, #1
 800ac18:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800ac1a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800ac1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac20:	4413      	add	r3, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff fdb0 	bl	800a788 <is_aperture>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d103      	bne.n	800ac36 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800ac2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d3ee      	bcc.n	800ac14 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800ac3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac3c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800ac4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ac4e:	f107 0218 	add.w	r2, r7, #24
 800ac52:	9204      	str	r2, [sp, #16]
 800ac54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac56:	9203      	str	r2, [sp, #12]
 800ac58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac5a:	9202      	str	r2, [sp, #8]
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	4623      	mov	r3, r4
 800ac64:	4602      	mov	r2, r0
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7ff fe06 	bl	800a878 <enable_ref_spads>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800ac72:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d11b      	bne.n	800acb2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800ac7e:	f107 0312 	add.w	r3, r7, #18
 800ac82:	4619      	mov	r1, r3
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7ff fe73 	bl	800a970 <perform_ref_signal_measurement>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800ac90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10c      	bne.n	800acb2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800ac98:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800ac9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d208      	bcs.n	800acb2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800aca0:	2301      	movs	r3, #1
 800aca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800aca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800acaa:	e002      	b.n	800acb2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acb0:	e000      	b.n	800acb4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800acb2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800acb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f040 80af 	bne.w	800ae1c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800acbe:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800acc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800acc2:	429a      	cmp	r2, r3
 800acc4:	f240 80aa 	bls.w	800ae1c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800acc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800acce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800acd8:	f107 031c 	add.w	r3, r7, #28
 800acdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acde:	4618      	mov	r0, r3
 800ace0:	f009 f916 	bl	8013f10 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800ace4:	8a7b      	ldrh	r3, [r7, #18]
 800ace6:	461a      	mov	r2, r3
 800ace8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	bfb8      	it	lt
 800acf0:	425b      	neglt	r3, r3
 800acf2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800acfa:	e086      	b.n	800ae0a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800ad02:	f107 0314 	add.w	r3, r7, #20
 800ad06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad0a:	f7ff fcdf 	bl	800a6cc <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad14:	d103      	bne.n	800ad1e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ad16:	23ce      	movs	r3, #206	; 0xce
 800ad18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800ad1c:	e07e      	b.n	800ae1c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800ad1e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	4413      	add	r3, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7ff fd2e 	bl	800a788 <is_aperture>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d003      	beq.n	800ad3e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800ad3c:	e06e      	b.n	800ae1c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800ad3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad40:	3301      	adds	r3, #1
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800ad4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7ff fd32 	bl	800a7bc <enable_spad_bit>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800ad5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10c      	bne.n	800ad80 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800ad66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad68:	3301      	adds	r3, #1
 800ad6a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800ad72:	4619      	mov	r1, r3
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff fd59 	bl	800a82c <set_ref_spad_map>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800ad80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d146      	bne.n	800ae16 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800ad88:	f107 0312 	add.w	r3, r7, #18
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f7ff fdee 	bl	800a970 <perform_ref_signal_measurement>
 800ad94:	4603      	mov	r3, r0
 800ad96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800ad9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d13b      	bne.n	800ae1a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800ada2:	8a7b      	ldrh	r3, [r7, #18]
 800ada4:	461a      	mov	r2, r3
 800ada6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bfb8      	it	lt
 800adae:	425b      	neglt	r3, r3
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800adb2:	8a7b      	ldrh	r3, [r7, #18]
 800adb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d21c      	bcs.n	800adf4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800adba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d914      	bls.n	800adec <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800adc2:	f107 031c 	add.w	r3, r7, #28
 800adc6:	4619      	mov	r1, r3
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7ff fd2f 	bl	800a82c <set_ref_spad_map>
 800adce:	4603      	mov	r3, r0
 800add0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800adda:	f107 011c 	add.w	r1, r7, #28
 800adde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ade0:	4618      	mov	r0, r3
 800ade2:	f009 f895 	bl	8013f10 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800ade6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade8:	3b01      	subs	r3, #1
 800adea:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800adec:	2301      	movs	r3, #1
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adf2:	e00a      	b.n	800ae0a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800adfe:	f107 031c 	add.w	r3, r7, #28
 800ae02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae04:	4618      	mov	r0, r3
 800ae06:	f009 f883 	bl	8013f10 <memcpy>
		while (!complete) {
 800ae0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f43f af74 	beq.w	800acfc <VL53L0X_perform_ref_spad_management+0x2b8>
 800ae14:	e002      	b.n	800ae1c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800ae16:	bf00      	nop
 800ae18:	e000      	b.n	800ae1c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800ae1a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d115      	bne.n	800ae50 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae28:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ae30:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800ae50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	375c      	adds	r7, #92	; 0x5c
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd90      	pop	{r4, r7, pc}

0800ae5c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800ae5c:	b590      	push	{r4, r7, lr}
 800ae5e:	b093      	sub	sp, #76	; 0x4c
 800ae60:	af06      	add	r7, sp, #24
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	4613      	mov	r3, r2
 800ae68:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800ae74:	23b4      	movs	r3, #180	; 0xb4
 800ae76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800ae7a:	2306      	movs	r3, #6
 800ae7c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800ae7e:	232c      	movs	r3, #44	; 0x2c
 800ae80:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ae82:	2201      	movs	r2, #1
 800ae84:	21ff      	movs	r1, #255	; 0xff
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f002 fdf2 	bl	800da70 <VL53L0X_WrByte>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800ae92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d107      	bne.n	800aeaa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	214f      	movs	r1, #79	; 0x4f
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f002 fde6 	bl	800da70 <VL53L0X_WrByte>
 800aea4:	4603      	mov	r3, r0
 800aea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800aeaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d107      	bne.n	800aec2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800aeb2:	222c      	movs	r2, #44	; 0x2c
 800aeb4:	214e      	movs	r1, #78	; 0x4e
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f002 fdda 	bl	800da70 <VL53L0X_WrByte>
 800aebc:	4603      	mov	r3, r0
 800aebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800aec2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d107      	bne.n	800aeda <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aeca:	2200      	movs	r2, #0
 800aecc:	21ff      	movs	r1, #255	; 0xff
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f002 fdce 	bl	800da70 <VL53L0X_WrByte>
 800aed4:	4603      	mov	r3, r0
 800aed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800aeda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d109      	bne.n	800aef6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800aee2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aee6:	461a      	mov	r2, r3
 800aee8:	21b6      	movs	r1, #182	; 0xb6
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f002 fdc0 	bl	800da70 <VL53L0X_WrByte>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800aef6:	2300      	movs	r3, #0
 800aef8:	627b      	str	r3, [r7, #36]	; 0x24
 800aefa:	e009      	b.n	800af10 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	4413      	add	r3, r2
 800af02:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800af06:	2200      	movs	r2, #0
 800af08:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0c:	3301      	adds	r3, #1
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
 800af10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	429a      	cmp	r2, r3
 800af16:	d3f1      	bcc.n	800aefc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800af18:	79fb      	ldrb	r3, [r7, #7]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d011      	beq.n	800af42 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800af1e:	e002      	b.n	800af26 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	3301      	adds	r3, #1
 800af24:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800af26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2c:	4413      	add	r3, r2
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff fc2a 	bl	800a788 <is_aperture>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d103      	bne.n	800af42 <VL53L0X_set_reference_spads+0xe6>
 800af3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d3ee      	bcc.n	800af20 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800af4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af52:	79f9      	ldrb	r1, [r7, #7]
 800af54:	f107 0214 	add.w	r2, r7, #20
 800af58:	9204      	str	r2, [sp, #16]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	9203      	str	r2, [sp, #12]
 800af5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af60:	9202      	str	r2, [sp, #8]
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	4623      	mov	r3, r4
 800af6a:	4602      	mov	r2, r0
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7ff fc83 	bl	800a878 <enable_ref_spads>
 800af72:	4603      	mov	r3, r0
 800af74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800af78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10c      	bne.n	800af9a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	79fa      	ldrb	r2, [r7, #7]
 800af96:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800af9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3734      	adds	r7, #52	; 0x34
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd90      	pop	{r4, r7, pc}

0800afa6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b084      	sub	sp, #16
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	460b      	mov	r3, r1
 800afb0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800afb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10a      	bne.n	800afd4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800afbe:	78fb      	ldrb	r3, [r7, #3]
 800afc0:	f043 0301 	orr.w	r3, r3, #1
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	461a      	mov	r2, r3
 800afc8:	2100      	movs	r1, #0
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f002 fd50 	bl	800da70 <VL53L0X_WrByte>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800afd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d104      	bne.n	800afe6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f9bf 	bl	800b360 <VL53L0X_measurement_poll_for_completion>
 800afe2:	4603      	mov	r3, r0
 800afe4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800afe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d105      	bne.n	800affa <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800afee:	2100      	movs	r1, #0
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7ff fab5 	bl	800a560 <VL53L0X_ClearInterruptMask>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800affa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d106      	bne.n	800b010 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b002:	2200      	movs	r2, #0
 800b004:	2100      	movs	r1, #0
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f002 fd32 	bl	800da70 <VL53L0X_WrByte>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	4608      	mov	r0, r1
 800b026:	4611      	mov	r1, r2
 800b028:	461a      	mov	r2, r3
 800b02a:	4603      	mov	r3, r0
 800b02c:	70fb      	strb	r3, [r7, #3]
 800b02e:	460b      	mov	r3, r1
 800b030:	70bb      	strb	r3, [r7, #2]
 800b032:	4613      	mov	r3, r2
 800b034:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b036:	2300      	movs	r3, #0
 800b038:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b03e:	2201      	movs	r2, #1
 800b040:	21ff      	movs	r1, #255	; 0xff
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f002 fd14 	bl	800da70 <VL53L0X_WrByte>
 800b048:	4603      	mov	r3, r0
 800b04a:	461a      	mov	r2, r3
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	4313      	orrs	r3, r2
 800b050:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b052:	2200      	movs	r2, #0
 800b054:	2100      	movs	r1, #0
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f002 fd0a 	bl	800da70 <VL53L0X_WrByte>
 800b05c:	4603      	mov	r3, r0
 800b05e:	461a      	mov	r2, r3
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4313      	orrs	r3, r2
 800b064:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b066:	2200      	movs	r2, #0
 800b068:	21ff      	movs	r1, #255	; 0xff
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f002 fd00 	bl	800da70 <VL53L0X_WrByte>
 800b070:	4603      	mov	r3, r0
 800b072:	461a      	mov	r2, r3
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	4313      	orrs	r3, r2
 800b078:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b07a:	78fb      	ldrb	r3, [r7, #3]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d01e      	beq.n	800b0be <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b080:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d009      	beq.n	800b09c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	21cb      	movs	r1, #203	; 0xcb
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f002 fd71 	bl	800db74 <VL53L0X_RdByte>
 800b092:	4603      	mov	r3, r0
 800b094:	461a      	mov	r2, r3
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	4313      	orrs	r3, r2
 800b09a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b09c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d02a      	beq.n	800b0fa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b0a4:	f107 030e 	add.w	r3, r7, #14
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	21ee      	movs	r1, #238	; 0xee
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f002 fd61 	bl	800db74 <VL53L0X_RdByte>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	73fb      	strb	r3, [r7, #15]
 800b0bc:	e01d      	b.n	800b0fa <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b0be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b0c6:	78bb      	ldrb	r3, [r7, #2]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	21cb      	movs	r1, #203	; 0xcb
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f002 fccf 	bl	800da70 <VL53L0X_WrByte>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	7bfb      	ldrb	r3, [r7, #15]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b0dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00a      	beq.n	800b0fa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b0e4:	787b      	ldrb	r3, [r7, #1]
 800b0e6:	2280      	movs	r2, #128	; 0x80
 800b0e8:	21ee      	movs	r1, #238	; 0xee
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f002 fd0e 	bl	800db0c <VL53L0X_UpdateByte>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	21ff      	movs	r1, #255	; 0xff
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f002 fcb6 	bl	800da70 <VL53L0X_WrByte>
 800b104:	4603      	mov	r3, r0
 800b106:	461a      	mov	r2, r3
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b10e:	2201      	movs	r2, #1
 800b110:	2100      	movs	r1, #0
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f002 fcac 	bl	800da70 <VL53L0X_WrByte>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	4313      	orrs	r3, r2
 800b120:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b122:	2200      	movs	r2, #0
 800b124:	21ff      	movs	r1, #255	; 0xff
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f002 fca2 	bl	800da70 <VL53L0X_WrByte>
 800b12c:	4603      	mov	r3, r0
 800b12e:	461a      	mov	r2, r3
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	4313      	orrs	r3, r2
 800b134:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	f023 0310 	bic.w	r3, r3, #16
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	701a      	strb	r2, [r3, #0]

	return Status;
 800b142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b08a      	sub	sp, #40	; 0x28
 800b152:	af04      	add	r7, sp, #16
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	4611      	mov	r1, r2
 800b15a:	461a      	mov	r2, r3
 800b15c:	460b      	mov	r3, r1
 800b15e:	71fb      	strb	r3, [r7, #7]
 800b160:	4613      	mov	r3, r2
 800b162:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b164:	2300      	movs	r3, #0
 800b166:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b178:	79bb      	ldrb	r3, [r7, #6]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b184:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b186:	2201      	movs	r2, #1
 800b188:	2101      	movs	r1, #1
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f002 fc70 	bl	800da70 <VL53L0X_WrByte>
 800b190:	4603      	mov	r3, r0
 800b192:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d105      	bne.n	800b1a8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b19c:	2140      	movs	r1, #64	; 0x40
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f7ff ff01 	bl	800afa6 <VL53L0X_perform_single_ref_calibration>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b1a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d115      	bne.n	800b1dc <VL53L0X_perform_vhv_calibration+0x8e>
 800b1b0:	79fb      	ldrb	r3, [r7, #7]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d112      	bne.n	800b1dc <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b1b6:	7d39      	ldrb	r1, [r7, #20]
 800b1b8:	7d7a      	ldrb	r2, [r7, #21]
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	9303      	str	r3, [sp, #12]
 800b1be:	2301      	movs	r3, #1
 800b1c0:	9302      	str	r3, [sp, #8]
 800b1c2:	f107 0313 	add.w	r3, r7, #19
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f7ff ff23 	bl	800b01c <VL53L0X_ref_calibration_io>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75fb      	strb	r3, [r7, #23]
 800b1da:	e002      	b.n	800b1e2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b1e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d112      	bne.n	800b210 <VL53L0X_perform_vhv_calibration+0xc2>
 800b1ea:	79bb      	ldrb	r3, [r7, #6]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00f      	beq.n	800b210 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b1f0:	7dbb      	ldrb	r3, [r7, #22]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f002 fc3a 	bl	800da70 <VL53L0X_WrByte>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d103      	bne.n	800b210 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	7dba      	ldrb	r2, [r7, #22]
 800b20c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b210:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	; 0x28
 800b220:	af04      	add	r7, sp, #16
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	4611      	mov	r1, r2
 800b228:	461a      	mov	r2, r3
 800b22a:	460b      	mov	r3, r1
 800b22c:	71fb      	strb	r3, [r7, #7]
 800b22e:	4613      	mov	r3, r2
 800b230:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b232:	2300      	movs	r3, #0
 800b234:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b242:	79bb      	ldrb	r3, [r7, #6]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b24e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b250:	2202      	movs	r2, #2
 800b252:	2101      	movs	r1, #1
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f002 fc0b 	bl	800da70 <VL53L0X_WrByte>
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d105      	bne.n	800b272 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b266:	2100      	movs	r1, #0
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff fe9c 	bl	800afa6 <VL53L0X_perform_single_ref_calibration>
 800b26e:	4603      	mov	r3, r0
 800b270:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b272:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d115      	bne.n	800b2a6 <VL53L0X_perform_phase_calibration+0x8a>
 800b27a:	79fb      	ldrb	r3, [r7, #7]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d112      	bne.n	800b2a6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b280:	7d39      	ldrb	r1, [r7, #20]
 800b282:	7d7a      	ldrb	r2, [r7, #21]
 800b284:	2301      	movs	r3, #1
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	2300      	movs	r3, #0
 800b28a:	9302      	str	r3, [sp, #8]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	f107 0313 	add.w	r3, r7, #19
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	460b      	mov	r3, r1
 800b298:	2101      	movs	r1, #1
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f7ff febe 	bl	800b01c <VL53L0X_ref_calibration_io>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	75fb      	strb	r3, [r7, #23]
 800b2a4:	e002      	b.n	800b2ac <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b2ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d112      	bne.n	800b2da <VL53L0X_perform_phase_calibration+0xbe>
 800b2b4:	79bb      	ldrb	r3, [r7, #6]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00f      	beq.n	800b2da <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b2ba:	7dbb      	ldrb	r3, [r7, #22]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	2101      	movs	r1, #1
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f002 fbd5 	bl	800da70 <VL53L0X_WrByte>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d103      	bne.n	800b2da <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	7dba      	ldrb	r2, [r7, #22]
 800b2d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b2da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b086      	sub	sp, #24
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	607a      	str	r2, [r7, #4]
 800b2f2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b302:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b304:	78fa      	ldrb	r2, [r7, #3]
 800b306:	2300      	movs	r3, #0
 800b308:	68b9      	ldr	r1, [r7, #8]
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff ff1f 	bl	800b14e <VL53L0X_perform_vhv_calibration>
 800b310:	4603      	mov	r3, r0
 800b312:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d107      	bne.n	800b32c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b31c:	78fa      	ldrb	r2, [r7, #3]
 800b31e:	2300      	movs	r3, #0
 800b320:	6879      	ldr	r1, [r7, #4]
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f7ff ff7a 	bl	800b21c <VL53L0X_perform_phase_calibration>
 800b328:	4603      	mov	r3, r0
 800b32a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b32c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10f      	bne.n	800b354 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b334:	7dbb      	ldrb	r3, [r7, #22]
 800b336:	461a      	mov	r2, r3
 800b338:	2101      	movs	r1, #1
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f002 fb98 	bl	800da70 <VL53L0X_WrByte>
 800b340:	4603      	mov	r3, r0
 800b342:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	7dba      	ldrb	r2, [r7, #22]
 800b350:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b354:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b368:	2300      	movs	r3, #0
 800b36a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b374:	f107 030f 	add.w	r3, r7, #15
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7fe fe02 	bl	8009f84 <VL53L0X_GetMeasurementDataReady>
 800b380:	4603      	mov	r3, r0
 800b382:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d110      	bne.n	800b3ae <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d00f      	beq.n	800b3b2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	3301      	adds	r3, #1
 800b396:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b39e:	d302      	bcc.n	800b3a6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b3a0:	23f9      	movs	r3, #249	; 0xf9
 800b3a2:	75fb      	strb	r3, [r7, #23]
			break;
 800b3a4:	e006      	b.n	800b3b4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f002 fc82 	bl	800dcb0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b3ac:	e7e2      	b.n	800b374 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b3ae:	bf00      	nop
 800b3b0:	e000      	b.n	800b3b4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b3b2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b3b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	005b      	lsls	r3, r3, #1
 800b3d6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b085      	sub	sp, #20
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b3f4:	79fb      	ldrb	r3, [r7, #7]
 800b3f6:	085b      	lsrs	r3, r3, #1
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b41c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b41e:	e002      	b.n	800b426 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	089b      	lsrs	r3, r3, #2
 800b424:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d8f8      	bhi.n	800b420 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b42e:	e017      	b.n	800b460 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d30b      	bcc.n	800b454 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	4413      	add	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	085b      	lsrs	r3, r3, #1
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	4413      	add	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]
 800b452:	e002      	b.n	800b45a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	085b      	lsrs	r3, r3, #1
 800b458:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	089b      	lsrs	r3, r3, #2
 800b45e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1e4      	bne.n	800b430 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b466:	68fb      	ldr	r3, [r7, #12]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b480:	2200      	movs	r2, #0
 800b482:	2183      	movs	r1, #131	; 0x83
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f002 faf3 	bl	800da70 <VL53L0X_WrByte>
 800b48a:	4603      	mov	r3, r0
 800b48c:	461a      	mov	r2, r3
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	4313      	orrs	r3, r2
 800b492:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d11e      	bne.n	800b4da <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b4a0:	f107 030f 	add.w	r3, r7, #15
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	2183      	movs	r1, #131	; 0x83
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f002 fb63 	bl	800db74 <VL53L0X_RdByte>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <VL53L0X_device_read_strobe+0x5a>
 800b4b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d106      	bne.n	800b4ce <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b4cc:	d3e8      	bcc.n	800b4a0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b4d4:	d301      	bcc.n	800b4da <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b4d6:	23f9      	movs	r3, #249	; 0xf9
 800b4d8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b4da:	2201      	movs	r2, #1
 800b4dc:	2183      	movs	r1, #131	; 0x83
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f002 fac6 	bl	800da70 <VL53L0X_WrByte>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b4ee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b098      	sub	sp, #96	; 0x60
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b506:	2300      	movs	r3, #0
 800b508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b52a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b52e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b542:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800b546:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b54a:	2b07      	cmp	r3, #7
 800b54c:	f000 8408 	beq.w	800bd60 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b550:	2201      	movs	r2, #1
 800b552:	2180      	movs	r1, #128	; 0x80
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f002 fa8b 	bl	800da70 <VL53L0X_WrByte>
 800b55a:	4603      	mov	r3, r0
 800b55c:	461a      	mov	r2, r3
 800b55e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b562:	4313      	orrs	r3, r2
 800b564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b568:	2201      	movs	r2, #1
 800b56a:	21ff      	movs	r1, #255	; 0xff
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f002 fa7f 	bl	800da70 <VL53L0X_WrByte>
 800b572:	4603      	mov	r3, r0
 800b574:	461a      	mov	r2, r3
 800b576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b57a:	4313      	orrs	r3, r2
 800b57c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b580:	2200      	movs	r2, #0
 800b582:	2100      	movs	r1, #0
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f002 fa73 	bl	800da70 <VL53L0X_WrByte>
 800b58a:	4603      	mov	r3, r0
 800b58c:	461a      	mov	r2, r3
 800b58e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b592:	4313      	orrs	r3, r2
 800b594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b598:	2206      	movs	r2, #6
 800b59a:	21ff      	movs	r1, #255	; 0xff
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f002 fa67 	bl	800da70 <VL53L0X_WrByte>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b5b0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	2183      	movs	r1, #131	; 0x83
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f002 fadb 	bl	800db74 <VL53L0X_RdByte>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b5cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5d0:	f043 0304 	orr.w	r3, r3, #4
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	2183      	movs	r1, #131	; 0x83
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f002 fa48 	bl	800da70 <VL53L0X_WrByte>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b5ee:	2207      	movs	r2, #7
 800b5f0:	21ff      	movs	r1, #255	; 0xff
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f002 fa3c 	bl	800da70 <VL53L0X_WrByte>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b600:	4313      	orrs	r3, r2
 800b602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b606:	2201      	movs	r2, #1
 800b608:	2181      	movs	r1, #129	; 0x81
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f002 fa30 	bl	800da70 <VL53L0X_WrByte>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b618:	4313      	orrs	r3, r2
 800b61a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f002 fb46 	bl	800dcb0 <VL53L0X_PollingDelay>
 800b624:	4603      	mov	r3, r0
 800b626:	461a      	mov	r2, r3
 800b628:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b62c:	4313      	orrs	r3, r2
 800b62e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b632:	2201      	movs	r2, #1
 800b634:	2180      	movs	r1, #128	; 0x80
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f002 fa1a 	bl	800da70 <VL53L0X_WrByte>
 800b63c:	4603      	mov	r3, r0
 800b63e:	461a      	mov	r2, r3
 800b640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b644:	4313      	orrs	r3, r2
 800b646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b64a:	78fb      	ldrb	r3, [r7, #3]
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	f000 8098 	beq.w	800b786 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b656:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b65a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f040 8091 	bne.w	800b786 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b664:	226b      	movs	r2, #107	; 0x6b
 800b666:	2194      	movs	r1, #148	; 0x94
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f002 fa01 	bl	800da70 <VL53L0X_WrByte>
 800b66e:	4603      	mov	r3, r0
 800b670:	461a      	mov	r2, r3
 800b672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b676:	4313      	orrs	r3, r2
 800b678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff fef9 	bl	800b474 <VL53L0X_device_read_strobe>
 800b682:	4603      	mov	r3, r0
 800b684:	461a      	mov	r2, r3
 800b686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b694:	461a      	mov	r2, r3
 800b696:	2190      	movs	r1, #144	; 0x90
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f002 facd 	bl	800dc38 <VL53L0X_RdDWord>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	0a1b      	lsrs	r3, r3, #8
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	0bdb      	lsrs	r3, r3, #15
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b6c8:	2224      	movs	r2, #36	; 0x24
 800b6ca:	2194      	movs	r1, #148	; 0x94
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f002 f9cf 	bl	800da70 <VL53L0X_WrByte>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7ff fec7 	bl	800b474 <VL53L0X_device_read_strobe>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b6f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	2190      	movs	r1, #144	; 0x90
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f002 fa9b 	bl	800dc38 <VL53L0X_RdDWord>
 800b702:	4603      	mov	r3, r0
 800b704:	461a      	mov	r2, r3
 800b706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b70a:	4313      	orrs	r3, r2
 800b70c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	0e1b      	lsrs	r3, r3, #24
 800b714:	b2db      	uxtb	r3, r3
 800b716:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	0c1b      	lsrs	r3, r3, #16
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b722:	0a1b      	lsrs	r3, r3, #8
 800b724:	b2db      	uxtb	r3, r3
 800b726:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800b72e:	2225      	movs	r2, #37	; 0x25
 800b730:	2194      	movs	r1, #148	; 0x94
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f002 f99c 	bl	800da70 <VL53L0X_WrByte>
 800b738:	4603      	mov	r3, r0
 800b73a:	461a      	mov	r2, r3
 800b73c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b740:	4313      	orrs	r3, r2
 800b742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7ff fe94 	bl	800b474 <VL53L0X_device_read_strobe>
 800b74c:	4603      	mov	r3, r0
 800b74e:	461a      	mov	r2, r3
 800b750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b754:	4313      	orrs	r3, r2
 800b756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b75a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b75e:	461a      	mov	r2, r3
 800b760:	2190      	movs	r1, #144	; 0x90
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f002 fa68 	bl	800dc38 <VL53L0X_RdDWord>
 800b768:	4603      	mov	r3, r0
 800b76a:	461a      	mov	r2, r3
 800b76c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b770:	4313      	orrs	r3, r2
 800b772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	0e1b      	lsrs	r3, r3, #24
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	0c1b      	lsrs	r3, r3, #16
 800b782:	b2db      	uxtb	r3, r3
 800b784:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800b786:	78fb      	ldrb	r3, [r7, #3]
 800b788:	f003 0302 	and.w	r3, r3, #2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f000 8189 	beq.w	800baa4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b796:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f040 8182 	bne.w	800baa4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	2194      	movs	r1, #148	; 0x94
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f002 f963 	bl	800da70 <VL53L0X_WrByte>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fe5b 	bl	800b474 <VL53L0X_device_read_strobe>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800b7cc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	2190      	movs	r1, #144	; 0x90
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f002 f9cd 	bl	800db74 <VL53L0X_RdByte>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	461a      	mov	r2, r3
 800b7de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b7e8:	227b      	movs	r2, #123	; 0x7b
 800b7ea:	2194      	movs	r1, #148	; 0x94
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f002 f93f 	bl	800da70 <VL53L0X_WrByte>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fe37 	bl	800b474 <VL53L0X_device_read_strobe>
 800b806:	4603      	mov	r3, r0
 800b808:	461a      	mov	r2, r3
 800b80a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b80e:	4313      	orrs	r3, r2
 800b810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800b814:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800b818:	461a      	mov	r2, r3
 800b81a:	2190      	movs	r1, #144	; 0x90
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f002 f9a9 	bl	800db74 <VL53L0X_RdByte>
 800b822:	4603      	mov	r3, r0
 800b824:	461a      	mov	r2, r3
 800b826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b82a:	4313      	orrs	r3, r2
 800b82c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800b830:	2277      	movs	r2, #119	; 0x77
 800b832:	2194      	movs	r1, #148	; 0x94
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f002 f91b 	bl	800da70 <VL53L0X_WrByte>
 800b83a:	4603      	mov	r3, r0
 800b83c:	461a      	mov	r2, r3
 800b83e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b842:	4313      	orrs	r3, r2
 800b844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7ff fe13 	bl	800b474 <VL53L0X_device_read_strobe>
 800b84e:	4603      	mov	r3, r0
 800b850:	461a      	mov	r2, r3
 800b852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b856:	4313      	orrs	r3, r2
 800b858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b85c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b860:	461a      	mov	r2, r3
 800b862:	2190      	movs	r1, #144	; 0x90
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f002 f9e7 	bl	800dc38 <VL53L0X_RdDWord>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b872:	4313      	orrs	r3, r2
 800b874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	0e5b      	lsrs	r3, r3, #25
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b882:	b2db      	uxtb	r3, r3
 800b884:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	0c9b      	lsrs	r3, r3, #18
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b890:	b2db      	uxtb	r3, r3
 800b892:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	0adb      	lsrs	r3, r3, #11
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	091b      	lsrs	r3, r3, #4
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800b8c2:	2278      	movs	r2, #120	; 0x78
 800b8c4:	2194      	movs	r1, #148	; 0x94
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f002 f8d2 	bl	800da70 <VL53L0X_WrByte>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fdca 	bl	800b474 <VL53L0X_device_read_strobe>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b8ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	2190      	movs	r1, #144	; 0x90
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f002 f99e 	bl	800dc38 <VL53L0X_RdDWord>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	461a      	mov	r2, r3
 800b900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b904:	4313      	orrs	r3, r2
 800b906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	0f5b      	lsrs	r3, r3, #29
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b914:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800b916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b91a:	4413      	add	r3, r2
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b922:	0d9b      	lsrs	r3, r3, #22
 800b924:	b2db      	uxtb	r3, r3
 800b926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	0bdb      	lsrs	r3, r3, #15
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	0a1b      	lsrs	r3, r3, #8
 800b940:	b2db      	uxtb	r3, r3
 800b942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b946:	b2db      	uxtb	r3, r3
 800b948:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	085b      	lsrs	r3, r3, #1
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b954:	b2db      	uxtb	r3, r3
 800b956:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	019b      	lsls	r3, r3, #6
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b964:	b2db      	uxtb	r3, r3
 800b966:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800b96a:	2279      	movs	r2, #121	; 0x79
 800b96c:	2194      	movs	r1, #148	; 0x94
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f002 f87e 	bl	800da70 <VL53L0X_WrByte>
 800b974:	4603      	mov	r3, r0
 800b976:	461a      	mov	r2, r3
 800b978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b97c:	4313      	orrs	r3, r2
 800b97e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fd76 	bl	800b474 <VL53L0X_device_read_strobe>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b990:	4313      	orrs	r3, r2
 800b992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b99a:	461a      	mov	r2, r3
 800b99c:	2190      	movs	r1, #144	; 0x90
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f002 f94a 	bl	800dc38 <VL53L0X_RdDWord>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	0e9b      	lsrs	r3, r3, #26
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9bc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800b9be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9c2:	4413      	add	r3, r2
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ca:	0cdb      	lsrs	r3, r3, #19
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	0b1b      	lsrs	r3, r3, #12
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	095b      	lsrs	r3, r3, #5
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ba04:	227a      	movs	r2, #122	; 0x7a
 800ba06:	2194      	movs	r1, #148	; 0x94
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f002 f831 	bl	800da70 <VL53L0X_WrByte>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	461a      	mov	r2, r3
 800ba12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba16:	4313      	orrs	r3, r2
 800ba18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff fd29 	bl	800b474 <VL53L0X_device_read_strobe>
 800ba22:	4603      	mov	r3, r0
 800ba24:	461a      	mov	r2, r3
 800ba26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ba30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba34:	461a      	mov	r2, r3
 800ba36:	2190      	movs	r1, #144	; 0x90
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f002 f8fd 	bl	800dc38 <VL53L0X_RdDWord>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	461a      	mov	r2, r3
 800ba42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba46:	4313      	orrs	r3, r2
 800ba48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	0f9b      	lsrs	r3, r3, #30
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba56:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800ba58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba5c:	4413      	add	r3, r2
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	0ddb      	lsrs	r3, r3, #23
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	0c1b      	lsrs	r3, r3, #16
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba80:	0a5b      	lsrs	r3, r3, #9
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	089b      	lsrs	r3, r3, #2
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800baa4:	78fb      	ldrb	r3, [r7, #3]
 800baa6:	f003 0304 	and.w	r3, r3, #4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 80f1 	beq.w	800bc92 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bab0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bab4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f040 80ea 	bne.w	800bc92 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800babe:	227b      	movs	r2, #123	; 0x7b
 800bac0:	2194      	movs	r1, #148	; 0x94
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f001 ffd4 	bl	800da70 <VL53L0X_WrByte>
 800bac8:	4603      	mov	r3, r0
 800baca:	461a      	mov	r2, r3
 800bacc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bad0:	4313      	orrs	r3, r2
 800bad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f7ff fccc 	bl	800b474 <VL53L0X_device_read_strobe>
 800badc:	4603      	mov	r3, r0
 800bade:	461a      	mov	r2, r3
 800bae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bae4:	4313      	orrs	r3, r2
 800bae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800baea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800baee:	461a      	mov	r2, r3
 800baf0:	2190      	movs	r1, #144	; 0x90
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f002 f8a0 	bl	800dc38 <VL53L0X_RdDWord>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb00:	4313      	orrs	r3, r2
 800bb02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800bb06:	227c      	movs	r2, #124	; 0x7c
 800bb08:	2194      	movs	r1, #148	; 0x94
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 ffb0 	bl	800da70 <VL53L0X_WrByte>
 800bb10:	4603      	mov	r3, r0
 800bb12:	461a      	mov	r2, r3
 800bb14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7ff fca8 	bl	800b474 <VL53L0X_device_read_strobe>
 800bb24:	4603      	mov	r3, r0
 800bb26:	461a      	mov	r2, r3
 800bb28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800bb32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb36:	461a      	mov	r2, r3
 800bb38:	2190      	movs	r1, #144	; 0x90
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f002 f87c 	bl	800dc38 <VL53L0X_RdDWord>
 800bb40:	4603      	mov	r3, r0
 800bb42:	461a      	mov	r2, r3
 800bb44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800bb4e:	2273      	movs	r2, #115	; 0x73
 800bb50:	2194      	movs	r1, #148	; 0x94
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 ff8c 	bl	800da70 <VL53L0X_WrByte>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb60:	4313      	orrs	r3, r2
 800bb62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff fc84 	bl	800b474 <VL53L0X_device_read_strobe>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb74:	4313      	orrs	r3, r2
 800bb76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb7e:	461a      	mov	r2, r3
 800bb80:	2190      	movs	r1, #144	; 0x90
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f002 f858 	bl	800dc38 <VL53L0X_RdDWord>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb90:	4313      	orrs	r3, r2
 800bb92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800bb9e:	2274      	movs	r2, #116	; 0x74
 800bba0:	2194      	movs	r1, #148	; 0x94
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f001 ff64 	bl	800da70 <VL53L0X_WrByte>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	461a      	mov	r2, r3
 800bbac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff fc5c 	bl	800b474 <VL53L0X_device_read_strobe>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bbca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbce:	461a      	mov	r2, r3
 800bbd0:	2190      	movs	r1, #144	; 0x90
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f002 f830 	bl	800dc38 <VL53L0X_RdDWord>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	461a      	mov	r2, r3
 800bbdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800bbea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbec:	4313      	orrs	r3, r2
 800bbee:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800bbf0:	2275      	movs	r2, #117	; 0x75
 800bbf2:	2194      	movs	r1, #148	; 0x94
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f001 ff3b 	bl	800da70 <VL53L0X_WrByte>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc02:	4313      	orrs	r3, r2
 800bc04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7ff fc33 	bl	800b474 <VL53L0X_device_read_strobe>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	461a      	mov	r2, r3
 800bc12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc16:	4313      	orrs	r3, r2
 800bc18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc20:	461a      	mov	r2, r3
 800bc22:	2190      	movs	r1, #144	; 0x90
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f002 f807 	bl	800dc38 <VL53L0X_RdDWord>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc32:	4313      	orrs	r3, r2
 800bc34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800bc40:	2276      	movs	r2, #118	; 0x76
 800bc42:	2194      	movs	r1, #148	; 0x94
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f001 ff13 	bl	800da70 <VL53L0X_WrByte>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc52:	4313      	orrs	r3, r2
 800bc54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff fc0b 	bl	800b474 <VL53L0X_device_read_strobe>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	461a      	mov	r2, r3
 800bc62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc66:	4313      	orrs	r3, r2
 800bc68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc70:	461a      	mov	r2, r3
 800bc72:	2190      	movs	r1, #144	; 0x90
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f001 ffdf 	bl	800dc38 <VL53L0X_RdDWord>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc82:	4313      	orrs	r3, r2
 800bc84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800bc8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800bc92:	2200      	movs	r2, #0
 800bc94:	2181      	movs	r1, #129	; 0x81
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f001 feea 	bl	800da70 <VL53L0X_WrByte>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bca4:	4313      	orrs	r3, r2
 800bca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bcaa:	2206      	movs	r2, #6
 800bcac:	21ff      	movs	r1, #255	; 0xff
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f001 fede 	bl	800da70 <VL53L0X_WrByte>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bcc2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	2183      	movs	r1, #131	; 0x83
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f001 ff52 	bl	800db74 <VL53L0X_RdByte>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800bcde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bce2:	f023 0304 	bic.w	r3, r3, #4
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	2183      	movs	r1, #131	; 0x83
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f001 febf 	bl	800da70 <VL53L0X_WrByte>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd00:	2201      	movs	r2, #1
 800bd02:	21ff      	movs	r1, #255	; 0xff
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 feb3 	bl	800da70 <VL53L0X_WrByte>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd12:	4313      	orrs	r3, r2
 800bd14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bd18:	2201      	movs	r2, #1
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f001 fea7 	bl	800da70 <VL53L0X_WrByte>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461a      	mov	r2, r3
 800bd26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd30:	2200      	movs	r2, #0
 800bd32:	21ff      	movs	r1, #255	; 0xff
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f001 fe9b 	bl	800da70 <VL53L0X_WrByte>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd42:	4313      	orrs	r3, r2
 800bd44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2180      	movs	r1, #128	; 0x80
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 fe8f 	bl	800da70 <VL53L0X_WrByte>
 800bd52:	4603      	mov	r3, r0
 800bd54:	461a      	mov	r2, r3
 800bd56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bd60:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f040 808f 	bne.w	800be88 <VL53L0X_get_info_from_device+0x98e>
 800bd6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd6e:	2b07      	cmp	r3, #7
 800bd70:	f000 808a 	beq.w	800be88 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d024      	beq.n	800bdc8 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bd7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd82:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d11e      	bne.n	800bdc8 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800bd90:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800bd9a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800bd9e:	2300      	movs	r3, #0
 800bda0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bda2:	e00e      	b.n	800bdc2 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800bda4:	f107 0208 	add.w	r2, r7, #8
 800bda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdaa:	4413      	add	r3, r2
 800bdac:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb2:	4413      	add	r3, r2
 800bdb4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800bdb8:	460a      	mov	r2, r1
 800bdba:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800bdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc4:	2b05      	cmp	r3, #5
 800bdc6:	dded      	ble.n	800bda4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	f003 0302 	and.w	r3, r3, #2
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d018      	beq.n	800be04 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800bdd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdd6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d112      	bne.n	800be04 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bdde:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bde8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	33f3      	adds	r3, #243	; 0xf3
 800bdf6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800bdf8:	f107 0310 	add.w	r3, r7, #16
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be00:	f008 f906 	bl	8014010 <strcpy>

		}

		if (((option & 4) == 4) &&
 800be04:	78fb      	ldrb	r3, [r7, #3]
 800be06:	f003 0304 	and.w	r3, r3, #4
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d030      	beq.n	800be70 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800be0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be12:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800be16:	2b00      	cmp	r3, #0
 800be18:	d12a      	bne.n	800be70 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800be2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be2c:	025b      	lsls	r3, r3, #9
 800be2e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800be38:	2300      	movs	r3, #0
 800be3a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800be3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be40:	2b00      	cmp	r3, #0
 800be42:	d011      	beq.n	800be68 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800be44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800be4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be52:	fb02 f303 	mul.w	r3, r2, r3
 800be56:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800be58:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800be5c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800be60:	425b      	negs	r3, r3
 800be62:	b29b      	uxth	r3, r3
 800be64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800be68:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800be70:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	4313      	orrs	r3, r2
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800be7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be88:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3760      	adds	r7, #96	; 0x60
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800be94:	b480      	push	{r7}
 800be96:	b087      	sub	sp, #28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	460b      	mov	r3, r1
 800be9e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800bea0:	f240 6277 	movw	r2, #1655	; 0x677
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800beac:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800beb0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800beb2:	78fb      	ldrb	r3, [r7, #3]
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	fb02 f303 	mul.w	r3, r2, r3
 800bec0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800bec2:	68bb      	ldr	r3, [r7, #8]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	371c      	adds	r7, #28
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800bed8:	2300      	movs	r3, #0
 800beda:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d017      	beq.n	800bf1a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	3b01      	subs	r3, #1
 800beee:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800bef0:	e005      	b.n	800befe <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	085b      	lsrs	r3, r3, #1
 800bef6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800bef8:	89fb      	ldrh	r3, [r7, #14]
 800befa:	3301      	adds	r3, #1
 800befc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1f4      	bne.n	800bef2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800bf08:	89fb      	ldrh	r3, [r7, #14]
 800bf0a:	021b      	lsls	r3, r3, #8
 800bf0c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800bf16:	4413      	add	r3, r2
 800bf18:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800bf1a:	8afb      	ldrh	r3, [r7, #22]

}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	371c      	adds	r7, #28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800bf36:	88fb      	ldrh	r3, [r7, #6]
 800bf38:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800bf3a:	88fa      	ldrh	r2, [r7, #6]
 800bf3c:	0a12      	lsrs	r2, r2, #8
 800bf3e:	b292      	uxth	r2, r2
 800bf40:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800bf42:	3301      	adds	r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800bf46:	68fb      	ldr	r3, [r7, #12]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b088      	sub	sp, #32
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f7ff ff92 	bl	800be94 <VL53L0X_calc_macro_period_ps>
 800bf70:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bf78:	4a0a      	ldr	r2, [pc, #40]	; (800bfa4 <VL53L0X_calc_timeout_mclks+0x50>)
 800bf7a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf7e:	099b      	lsrs	r3, r3, #6
 800bf80:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf88:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	085b      	lsrs	r3, r3, #1
 800bf90:	441a      	add	r2, r3
	timeout_period_mclks =
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf98:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800bf9a:	69fb      	ldr	r3, [r7, #28]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3720      	adds	r7, #32
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	10624dd3 	.word	0x10624dd3

0800bfa8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	807b      	strh	r3, [r7, #2]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800bfbc:	787b      	ldrb	r3, [r7, #1]
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff ff67 	bl	800be94 <VL53L0X_calc_macro_period_ps>
 800bfc6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bfce:	4a0a      	ldr	r2, [pc, #40]	; (800bff8 <VL53L0X_calc_timeout_us+0x50>)
 800bfd0:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd4:	099b      	lsrs	r3, r3, #6
 800bfd6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800bfd8:	887b      	ldrh	r3, [r7, #2]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	fb02 f303 	mul.w	r3, r2, r3
 800bfe0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800bfe4:	4a04      	ldr	r2, [pc, #16]	; (800bff8 <VL53L0X_calc_timeout_us+0x50>)
 800bfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfea:	099b      	lsrs	r3, r3, #6
 800bfec:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800bfee:	697b      	ldr	r3, [r7, #20]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	10624dd3 	.word	0x10624dd3

0800bffc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08c      	sub	sp, #48	; 0x30
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	460b      	mov	r3, r1
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c00a:	2300      	movs	r3, #0
 800c00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c022:	7afb      	ldrb	r3, [r7, #11]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <get_sequence_step_timeout+0x38>
 800c028:	7afb      	ldrb	r3, [r7, #11]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d002      	beq.n	800c034 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c02e:	7afb      	ldrb	r3, [r7, #11]
 800c030:	2b02      	cmp	r3, #2
 800c032:	d128      	bne.n	800c086 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c034:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c038:	461a      	mov	r2, r3
 800c03a:	2100      	movs	r1, #0
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f7fd fa7d 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c042:	4603      	mov	r3, r0
 800c044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c048:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d109      	bne.n	800c064 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c050:	f107 0320 	add.w	r3, r7, #32
 800c054:	461a      	mov	r2, r3
 800c056:	2146      	movs	r1, #70	; 0x46
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f001 fd8b 	bl	800db74 <VL53L0X_RdByte>
 800c05e:	4603      	mov	r3, r0
 800c060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c064:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c068:	b29b      	uxth	r3, r3
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff ff5c 	bl	800bf28 <VL53L0X_decode_timeout>
 800c070:	4603      	mov	r3, r0
 800c072:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c074:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c07a:	4619      	mov	r1, r3
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f7ff ff93 	bl	800bfa8 <VL53L0X_calc_timeout_us>
 800c082:	62b8      	str	r0, [r7, #40]	; 0x28
 800c084:	e092      	b.n	800c1ac <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c086:	7afb      	ldrb	r3, [r7, #11]
 800c088:	2b03      	cmp	r3, #3
 800c08a:	d135      	bne.n	800c0f8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c08c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c090:	461a      	mov	r2, r3
 800c092:	2100      	movs	r1, #0
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7fd fa51 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c09a:	4603      	mov	r3, r0
 800c09c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c0a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f040 8081 	bne.w	800c1ac <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c0aa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7fd fa42 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c0be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d109      	bne.n	800c0da <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c0c6:	f107 031e 	add.w	r3, r7, #30
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	2151      	movs	r1, #81	; 0x51
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f001 fd7a 	bl	800dbc8 <VL53L0X_RdWord>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c0da:	8bfb      	ldrh	r3, [r7, #30]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff ff23 	bl	800bf28 <VL53L0X_decode_timeout>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c0e6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c0ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f7ff ff5a 	bl	800bfa8 <VL53L0X_calc_timeout_us>
 800c0f4:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0f6:	e059      	b.n	800c1ac <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c0f8:	7afb      	ldrb	r3, [r7, #11]
 800c0fa:	2b04      	cmp	r3, #4
 800c0fc:	d156      	bne.n	800c1ac <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c0fe:	f107 0314 	add.w	r3, r7, #20
 800c102:	4619      	mov	r1, r3
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f7fd fb25 	bl	8009754 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c10e:	7dfb      	ldrb	r3, [r7, #23]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01d      	beq.n	800c150 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c114:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c118:	461a      	mov	r2, r3
 800c11a:	2100      	movs	r1, #0
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f7fd fa0d 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c122:	4603      	mov	r3, r0
 800c124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c128:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10f      	bne.n	800c150 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c130:	f107 031e 	add.w	r3, r7, #30
 800c134:	461a      	mov	r2, r3
 800c136:	2151      	movs	r1, #81	; 0x51
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f001 fd45 	bl	800dbc8 <VL53L0X_RdWord>
 800c13e:	4603      	mov	r3, r0
 800c140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c144:	8bfb      	ldrh	r3, [r7, #30]
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff feee 	bl	800bf28 <VL53L0X_decode_timeout>
 800c14c:	4603      	mov	r3, r0
 800c14e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c150:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c154:	2b00      	cmp	r3, #0
 800c156:	d109      	bne.n	800c16c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c158:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c15c:	461a      	mov	r2, r3
 800c15e:	2101      	movs	r1, #1
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7fd f9eb 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c16c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10f      	bne.n	800c194 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c174:	f107 031c 	add.w	r3, r7, #28
 800c178:	461a      	mov	r2, r3
 800c17a:	2171      	movs	r1, #113	; 0x71
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f001 fd23 	bl	800dbc8 <VL53L0X_RdWord>
 800c182:	4603      	mov	r3, r0
 800c184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c188:	8bbb      	ldrh	r3, [r7, #28]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7ff fecc 	bl	800bf28 <VL53L0X_decode_timeout>
 800c190:	4603      	mov	r3, r0
 800c192:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c194:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c196:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c19c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f7ff feff 	bl	800bfa8 <VL53L0X_calc_timeout_us>
 800c1aa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1b0:	601a      	str	r2, [r3, #0]

	return Status;
 800c1b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3730      	adds	r7, #48	; 0x30
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b08a      	sub	sp, #40	; 0x28
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	60f8      	str	r0, [r7, #12]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	607a      	str	r2, [r7, #4]
 800c1ca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d005      	beq.n	800c1e4 <set_sequence_step_timeout+0x26>
 800c1d8:	7afb      	ldrb	r3, [r7, #11]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d002      	beq.n	800c1e4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c1de:	7afb      	ldrb	r3, [r7, #11]
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d138      	bne.n	800c256 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c1e4:	f107 031b 	add.w	r3, r7, #27
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f7fd f9a5 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c1f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d11a      	bne.n	800c236 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c200:	7efb      	ldrb	r3, [r7, #27]
 800c202:	461a      	mov	r2, r3
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f7ff fea4 	bl	800bf54 <VL53L0X_calc_timeout_mclks>
 800c20c:	4603      	mov	r3, r0
 800c20e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c210:	8bbb      	ldrh	r3, [r7, #28]
 800c212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c216:	d903      	bls.n	800c220 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c218:	23ff      	movs	r3, #255	; 0xff
 800c21a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c21e:	e004      	b.n	800c22a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c220:	8bbb      	ldrh	r3, [r7, #28]
 800c222:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c224:	3b01      	subs	r3, #1
 800c226:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c22a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c22e:	b29a      	uxth	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c236:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f040 80ab 	bne.w	800c396 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c240:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c244:	461a      	mov	r2, r3
 800c246:	2146      	movs	r1, #70	; 0x46
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f001 fc11 	bl	800da70 <VL53L0X_WrByte>
 800c24e:	4603      	mov	r3, r0
 800c250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c254:	e09f      	b.n	800c396 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c256:	7afb      	ldrb	r3, [r7, #11]
 800c258:	2b03      	cmp	r3, #3
 800c25a:	d135      	bne.n	800c2c8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c25c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c260:	2b00      	cmp	r3, #0
 800c262:	d11b      	bne.n	800c29c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c264:	f107 031b 	add.w	r3, r7, #27
 800c268:	461a      	mov	r2, r3
 800c26a:	2100      	movs	r1, #0
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7fd f965 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c272:	4603      	mov	r3, r0
 800c274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c278:	7efb      	ldrb	r3, [r7, #27]
 800c27a:	461a      	mov	r2, r3
 800c27c:	6879      	ldr	r1, [r7, #4]
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff fe68 	bl	800bf54 <VL53L0X_calc_timeout_mclks>
 800c284:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c286:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff fe20 	bl	800bed0 <VL53L0X_encode_timeout>
 800c290:	4603      	mov	r3, r0
 800c292:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c294:	8b3a      	ldrh	r2, [r7, #24]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c29c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d108      	bne.n	800c2b6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c2a4:	8b3b      	ldrh	r3, [r7, #24]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	2151      	movs	r1, #81	; 0x51
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f001 fc04 	bl	800dab8 <VL53L0X_WrWord>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c2b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d16b      	bne.n	800c396 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c2c6:	e066      	b.n	800c396 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c2c8:	7afb      	ldrb	r3, [r7, #11]
 800c2ca:	2b04      	cmp	r3, #4
 800c2cc:	d160      	bne.n	800c390 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c2ce:	f107 0310 	add.w	r3, r7, #16
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f7fd fa3d 	bl	8009754 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c2de:	7cfb      	ldrb	r3, [r7, #19]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d01d      	beq.n	800c320 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c2e4:	f107 031b 	add.w	r3, r7, #27
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f7fd f925 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c2f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10f      	bne.n	800c320 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c300:	f107 0318 	add.w	r3, r7, #24
 800c304:	461a      	mov	r2, r3
 800c306:	2151      	movs	r1, #81	; 0x51
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f001 fc5d 	bl	800dbc8 <VL53L0X_RdWord>
 800c30e:	4603      	mov	r3, r0
 800c310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c314:	8b3b      	ldrh	r3, [r7, #24]
 800c316:	4618      	mov	r0, r3
 800c318:	f7ff fe06 	bl	800bf28 <VL53L0X_decode_timeout>
 800c31c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c31e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c324:	2b00      	cmp	r3, #0
 800c326:	d109      	bne.n	800c33c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c328:	f107 031b 	add.w	r3, r7, #27
 800c32c:	461a      	mov	r2, r3
 800c32e:	2101      	movs	r1, #1
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f7fd f903 	bl	800953c <VL53L0X_GetVcselPulsePeriod>
 800c336:	4603      	mov	r3, r0
 800c338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c33c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c340:	2b00      	cmp	r3, #0
 800c342:	d128      	bne.n	800c396 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c344:	7efb      	ldrb	r3, [r7, #27]
 800c346:	461a      	mov	r2, r3
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f7ff fe02 	bl	800bf54 <VL53L0X_calc_timeout_mclks>
 800c350:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c354:	6a3a      	ldr	r2, [r7, #32]
 800c356:	4413      	add	r3, r2
 800c358:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c35a:	6a38      	ldr	r0, [r7, #32]
 800c35c:	f7ff fdb8 	bl	800bed0 <VL53L0X_encode_timeout>
 800c360:	4603      	mov	r3, r0
 800c362:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c364:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d108      	bne.n	800c37e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c36c:	8bfb      	ldrh	r3, [r7, #30]
 800c36e:	461a      	mov	r2, r3
 800c370:	2171      	movs	r1, #113	; 0x71
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f001 fba0 	bl	800dab8 <VL53L0X_WrWord>
 800c378:	4603      	mov	r3, r0
 800c37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c37e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c382:	2b00      	cmp	r3, #0
 800c384:	d107      	bne.n	800c396 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c38e:	e002      	b.n	800c396 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c390:	23fc      	movs	r3, #252	; 0xfc
 800c392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3728      	adds	r7, #40	; 0x28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b08a      	sub	sp, #40	; 0x28
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	70fb      	strb	r3, [r7, #3]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c3be:	2312      	movs	r3, #18
 800c3c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c3c4:	2308      	movs	r3, #8
 800c3c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c3ca:	230e      	movs	r3, #14
 800c3cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800c3d4:	78bb      	ldrb	r3, [r7, #2]
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d003      	beq.n	800c3e8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c3e0:	23fc      	movs	r3, #252	; 0xfc
 800c3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3e6:	e020      	b.n	800c42a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c3e8:	78fb      	ldrb	r3, [r7, #3]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10d      	bne.n	800c40a <VL53L0X_set_vcsel_pulse_period+0x68>
 800c3ee:	78ba      	ldrb	r2, [r7, #2]
 800c3f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d304      	bcc.n	800c402 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c3f8:	78ba      	ldrb	r2, [r7, #2]
 800c3fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d903      	bls.n	800c40a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c402:	23fc      	movs	r3, #252	; 0xfc
 800c404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c408:	e00f      	b.n	800c42a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c40a:	78fb      	ldrb	r3, [r7, #3]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d10c      	bne.n	800c42a <VL53L0X_set_vcsel_pulse_period+0x88>
 800c410:	78ba      	ldrb	r2, [r7, #2]
 800c412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c416:	429a      	cmp	r2, r3
 800c418:	d304      	bcc.n	800c424 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c41a:	78ba      	ldrb	r2, [r7, #2]
 800c41c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c420:	429a      	cmp	r2, r3
 800c422:	d902      	bls.n	800c42a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c424:	23fc      	movs	r3, #252	; 0xfc
 800c426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800c42a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d002      	beq.n	800c438 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c436:	e239      	b.n	800c8ac <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d150      	bne.n	800c4e0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c43e:	78bb      	ldrb	r3, [r7, #2]
 800c440:	2b0c      	cmp	r3, #12
 800c442:	d110      	bne.n	800c466 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c444:	2218      	movs	r2, #24
 800c446:	2157      	movs	r1, #87	; 0x57
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f001 fb11 	bl	800da70 <VL53L0X_WrByte>
 800c44e:	4603      	mov	r3, r0
 800c450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c454:	2208      	movs	r2, #8
 800c456:	2156      	movs	r1, #86	; 0x56
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f001 fb09 	bl	800da70 <VL53L0X_WrByte>
 800c45e:	4603      	mov	r3, r0
 800c460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c464:	e17f      	b.n	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c466:	78bb      	ldrb	r3, [r7, #2]
 800c468:	2b0e      	cmp	r3, #14
 800c46a:	d110      	bne.n	800c48e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c46c:	2230      	movs	r2, #48	; 0x30
 800c46e:	2157      	movs	r1, #87	; 0x57
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f001 fafd 	bl	800da70 <VL53L0X_WrByte>
 800c476:	4603      	mov	r3, r0
 800c478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c47c:	2208      	movs	r2, #8
 800c47e:	2156      	movs	r1, #86	; 0x56
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f001 faf5 	bl	800da70 <VL53L0X_WrByte>
 800c486:	4603      	mov	r3, r0
 800c488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c48c:	e16b      	b.n	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800c48e:	78bb      	ldrb	r3, [r7, #2]
 800c490:	2b10      	cmp	r3, #16
 800c492:	d110      	bne.n	800c4b6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800c494:	2240      	movs	r2, #64	; 0x40
 800c496:	2157      	movs	r1, #87	; 0x57
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f001 fae9 	bl	800da70 <VL53L0X_WrByte>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800c4a4:	2208      	movs	r2, #8
 800c4a6:	2156      	movs	r1, #86	; 0x56
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f001 fae1 	bl	800da70 <VL53L0X_WrByte>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4b4:	e157      	b.n	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800c4b6:	78bb      	ldrb	r3, [r7, #2]
 800c4b8:	2b12      	cmp	r3, #18
 800c4ba:	f040 8154 	bne.w	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c4be:	2250      	movs	r2, #80	; 0x50
 800c4c0:	2157      	movs	r1, #87	; 0x57
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f001 fad4 	bl	800da70 <VL53L0X_WrByte>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800c4ce:	2208      	movs	r2, #8
 800c4d0:	2156      	movs	r1, #86	; 0x56
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f001 facc 	bl	800da70 <VL53L0X_WrByte>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4de:	e142      	b.n	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	f040 813f 	bne.w	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800c4e8:	78bb      	ldrb	r3, [r7, #2]
 800c4ea:	2b08      	cmp	r3, #8
 800c4ec:	d14c      	bne.n	800c588 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800c4ee:	2210      	movs	r2, #16
 800c4f0:	2148      	movs	r1, #72	; 0x48
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f001 fabc 	bl	800da70 <VL53L0X_WrByte>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800c4fe:	2208      	movs	r2, #8
 800c500:	2147      	movs	r1, #71	; 0x47
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f001 fab4 	bl	800da70 <VL53L0X_WrByte>
 800c508:	4603      	mov	r3, r0
 800c50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c50e:	2202      	movs	r2, #2
 800c510:	2132      	movs	r1, #50	; 0x32
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f001 faac 	bl	800da70 <VL53L0X_WrByte>
 800c518:	4603      	mov	r3, r0
 800c51a:	461a      	mov	r2, r3
 800c51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c520:	4313      	orrs	r3, r2
 800c522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800c526:	220c      	movs	r2, #12
 800c528:	2130      	movs	r1, #48	; 0x30
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f001 faa0 	bl	800da70 <VL53L0X_WrByte>
 800c530:	4603      	mov	r3, r0
 800c532:	461a      	mov	r2, r3
 800c534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c538:	4313      	orrs	r3, r2
 800c53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c53e:	2201      	movs	r2, #1
 800c540:	21ff      	movs	r1, #255	; 0xff
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f001 fa94 	bl	800da70 <VL53L0X_WrByte>
 800c548:	4603      	mov	r3, r0
 800c54a:	461a      	mov	r2, r3
 800c54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c550:	4313      	orrs	r3, r2
 800c552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c556:	2230      	movs	r2, #48	; 0x30
 800c558:	2130      	movs	r1, #48	; 0x30
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f001 fa88 	bl	800da70 <VL53L0X_WrByte>
 800c560:	4603      	mov	r3, r0
 800c562:	461a      	mov	r2, r3
 800c564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c568:	4313      	orrs	r3, r2
 800c56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c56e:	2200      	movs	r2, #0
 800c570:	21ff      	movs	r1, #255	; 0xff
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f001 fa7c 	bl	800da70 <VL53L0X_WrByte>
 800c578:	4603      	mov	r3, r0
 800c57a:	461a      	mov	r2, r3
 800c57c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c580:	4313      	orrs	r3, r2
 800c582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c586:	e0ee      	b.n	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800c588:	78bb      	ldrb	r3, [r7, #2]
 800c58a:	2b0a      	cmp	r3, #10
 800c58c:	d14c      	bne.n	800c628 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800c58e:	2228      	movs	r2, #40	; 0x28
 800c590:	2148      	movs	r1, #72	; 0x48
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f001 fa6c 	bl	800da70 <VL53L0X_WrByte>
 800c598:	4603      	mov	r3, r0
 800c59a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800c59e:	2208      	movs	r2, #8
 800c5a0:	2147      	movs	r1, #71	; 0x47
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f001 fa64 	bl	800da70 <VL53L0X_WrByte>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c5ae:	2203      	movs	r2, #3
 800c5b0:	2132      	movs	r1, #50	; 0x32
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f001 fa5c 	bl	800da70 <VL53L0X_WrByte>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c5c6:	2209      	movs	r2, #9
 800c5c8:	2130      	movs	r1, #48	; 0x30
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 fa50 	bl	800da70 <VL53L0X_WrByte>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c5de:	2201      	movs	r2, #1
 800c5e0:	21ff      	movs	r1, #255	; 0xff
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 fa44 	bl	800da70 <VL53L0X_WrByte>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	2130      	movs	r1, #48	; 0x30
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f001 fa38 	bl	800da70 <VL53L0X_WrByte>
 800c600:	4603      	mov	r3, r0
 800c602:	461a      	mov	r2, r3
 800c604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c608:	4313      	orrs	r3, r2
 800c60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c60e:	2200      	movs	r2, #0
 800c610:	21ff      	movs	r1, #255	; 0xff
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 fa2c 	bl	800da70 <VL53L0X_WrByte>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c620:	4313      	orrs	r3, r2
 800c622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c626:	e09e      	b.n	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800c628:	78bb      	ldrb	r3, [r7, #2]
 800c62a:	2b0c      	cmp	r3, #12
 800c62c:	d14c      	bne.n	800c6c8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800c62e:	2238      	movs	r2, #56	; 0x38
 800c630:	2148      	movs	r1, #72	; 0x48
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f001 fa1c 	bl	800da70 <VL53L0X_WrByte>
 800c638:	4603      	mov	r3, r0
 800c63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800c63e:	2208      	movs	r2, #8
 800c640:	2147      	movs	r1, #71	; 0x47
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f001 fa14 	bl	800da70 <VL53L0X_WrByte>
 800c648:	4603      	mov	r3, r0
 800c64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c64e:	2203      	movs	r2, #3
 800c650:	2132      	movs	r1, #50	; 0x32
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f001 fa0c 	bl	800da70 <VL53L0X_WrByte>
 800c658:	4603      	mov	r3, r0
 800c65a:	461a      	mov	r2, r3
 800c65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c660:	4313      	orrs	r3, r2
 800c662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c666:	2208      	movs	r2, #8
 800c668:	2130      	movs	r1, #48	; 0x30
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f001 fa00 	bl	800da70 <VL53L0X_WrByte>
 800c670:	4603      	mov	r3, r0
 800c672:	461a      	mov	r2, r3
 800c674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c678:	4313      	orrs	r3, r2
 800c67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c67e:	2201      	movs	r2, #1
 800c680:	21ff      	movs	r1, #255	; 0xff
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f001 f9f4 	bl	800da70 <VL53L0X_WrByte>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c690:	4313      	orrs	r3, r2
 800c692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c696:	2220      	movs	r2, #32
 800c698:	2130      	movs	r1, #48	; 0x30
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f001 f9e8 	bl	800da70 <VL53L0X_WrByte>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	21ff      	movs	r1, #255	; 0xff
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f001 f9dc 	bl	800da70 <VL53L0X_WrByte>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6c6:	e04e      	b.n	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c6c8:	78bb      	ldrb	r3, [r7, #2]
 800c6ca:	2b0e      	cmp	r3, #14
 800c6cc:	d14b      	bne.n	800c766 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c6ce:	2248      	movs	r2, #72	; 0x48
 800c6d0:	2148      	movs	r1, #72	; 0x48
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f001 f9cc 	bl	800da70 <VL53L0X_WrByte>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800c6de:	2208      	movs	r2, #8
 800c6e0:	2147      	movs	r1, #71	; 0x47
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f001 f9c4 	bl	800da70 <VL53L0X_WrByte>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c6ee:	2203      	movs	r2, #3
 800c6f0:	2132      	movs	r1, #50	; 0x32
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f001 f9bc 	bl	800da70 <VL53L0X_WrByte>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c700:	4313      	orrs	r3, r2
 800c702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c706:	2207      	movs	r2, #7
 800c708:	2130      	movs	r1, #48	; 0x30
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f001 f9b0 	bl	800da70 <VL53L0X_WrByte>
 800c710:	4603      	mov	r3, r0
 800c712:	461a      	mov	r2, r3
 800c714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c718:	4313      	orrs	r3, r2
 800c71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c71e:	2201      	movs	r2, #1
 800c720:	21ff      	movs	r1, #255	; 0xff
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f001 f9a4 	bl	800da70 <VL53L0X_WrByte>
 800c728:	4603      	mov	r3, r0
 800c72a:	461a      	mov	r2, r3
 800c72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c730:	4313      	orrs	r3, r2
 800c732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c736:	2220      	movs	r2, #32
 800c738:	2130      	movs	r1, #48	; 0x30
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f001 f998 	bl	800da70 <VL53L0X_WrByte>
 800c740:	4603      	mov	r3, r0
 800c742:	461a      	mov	r2, r3
 800c744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c748:	4313      	orrs	r3, r2
 800c74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c74e:	2200      	movs	r2, #0
 800c750:	21ff      	movs	r1, #255	; 0xff
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 f98c 	bl	800da70 <VL53L0X_WrByte>
 800c758:	4603      	mov	r3, r0
 800c75a:	461a      	mov	r2, r3
 800c75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c760:	4313      	orrs	r3, r2
 800c762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800c766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d17f      	bne.n	800c86e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800c76e:	78bb      	ldrb	r3, [r7, #2]
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe fe38 	bl	800b3e6 <VL53L0X_encode_vcsel_period>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800c77c:	78fb      	ldrb	r3, [r7, #3]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d002      	beq.n	800c788 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800c782:	2b01      	cmp	r3, #1
 800c784:	d045      	beq.n	800c812 <VL53L0X_set_vcsel_pulse_period+0x470>
 800c786:	e06e      	b.n	800c866 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800c788:	f107 0314 	add.w	r3, r7, #20
 800c78c:	461a      	mov	r2, r3
 800c78e:	2103      	movs	r1, #3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff fc33 	bl	800bffc <get_sequence_step_timeout>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c79c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d109      	bne.n	800c7b8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800c7a4:	f107 0310 	add.w	r3, r7, #16
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	2102      	movs	r1, #2
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff fc25 	bl	800bffc <get_sequence_step_timeout>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c7b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d109      	bne.n	800c7d4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800c7c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	2150      	movs	r1, #80	; 0x50
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f001 f951 	bl	800da70 <VL53L0X_WrByte>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800c7d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d108      	bne.n	800c7ee <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	2103      	movs	r1, #3
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7ff fceb 	bl	800c1be <set_sequence_step_timeout>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800c7ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d108      	bne.n	800c808 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	2102      	movs	r1, #2
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff fcde 	bl	800c1be <set_sequence_step_timeout>
 800c802:	4603      	mov	r3, r0
 800c804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	78ba      	ldrb	r2, [r7, #2]
 800c80c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800c810:	e02e      	b.n	800c870 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800c812:	f107 0318 	add.w	r3, r7, #24
 800c816:	461a      	mov	r2, r3
 800c818:	2104      	movs	r1, #4
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff fbee 	bl	800bffc <get_sequence_step_timeout>
 800c820:	4603      	mov	r3, r0
 800c822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800c82e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c832:	461a      	mov	r2, r3
 800c834:	2170      	movs	r1, #112	; 0x70
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f001 f91a 	bl	800da70 <VL53L0X_WrByte>
 800c83c:	4603      	mov	r3, r0
 800c83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800c842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c846:	2b00      	cmp	r3, #0
 800c848:	d108      	bne.n	800c85c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	461a      	mov	r2, r3
 800c84e:	2104      	movs	r1, #4
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff fcb4 	bl	800c1be <set_sequence_step_timeout>
 800c856:	4603      	mov	r3, r0
 800c858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	78ba      	ldrb	r2, [r7, #2]
 800c860:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800c864:	e004      	b.n	800c870 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c866:	23fc      	movs	r3, #252	; 0xfc
 800c868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c86c:	e000      	b.n	800c870 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800c86e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800c870:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c874:	2b00      	cmp	r3, #0
 800c876:	d109      	bne.n	800c88c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	695b      	ldr	r3, [r3, #20]
 800c87c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800c87e:	69f9      	ldr	r1, [r7, #28]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7fc fe1d 	bl	80094c0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800c886:	4603      	mov	r3, r0
 800c888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800c88c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800c894:	f107 010f 	add.w	r1, r7, #15
 800c898:	2301      	movs	r3, #1
 800c89a:	2200      	movs	r2, #0
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7fe fcbd 	bl	800b21c <VL53L0X_perform_phase_calibration>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800c8a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3728      	adds	r7, #40	; 0x28
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	607a      	str	r2, [r7, #4]
 800c8c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800c8c6:	7afb      	ldrb	r3, [r7, #11]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d00a      	beq.n	800c8e6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800c8d0:	e013      	b.n	800c8fa <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c8d2:	f107 0316 	add.w	r3, r7, #22
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	2150      	movs	r1, #80	; 0x50
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f001 f94a 	bl	800db74 <VL53L0X_RdByte>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c8e4:	e00b      	b.n	800c8fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c8e6:	f107 0316 	add.w	r3, r7, #22
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	2170      	movs	r1, #112	; 0x70
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f001 f940 	bl	800db74 <VL53L0X_RdByte>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c8f8:	e001      	b.n	800c8fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c8fa:	23fc      	movs	r3, #252	; 0xfc
 800c8fc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800c8fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d107      	bne.n	800c916 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800c906:	7dbb      	ldrb	r3, [r7, #22]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fe fd59 	bl	800b3c0 <VL53L0X_decode_vcsel_period>
 800c90e:	4603      	mov	r3, r0
 800c910:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	701a      	strb	r2, [r3, #0]

	return Status;
 800c916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3718      	adds	r7, #24
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b092      	sub	sp, #72	; 0x48
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c92c:	2300      	movs	r3, #0
 800c92e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c932:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c936:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c938:	f240 7376 	movw	r3, #1910	; 0x776
 800c93c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800c93e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c942:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c944:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c948:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800c94a:	f240 234e 	movw	r3, #590	; 0x24e
 800c94e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800c950:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c954:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c956:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c95a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c95c:	f240 2326 	movw	r3, #550	; 0x226
 800c960:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c962:	2300      	movs	r3, #0
 800c964:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800c966:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c96a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	429a      	cmp	r2, r3
 800c976:	d205      	bcs.n	800c984 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c978:	23fc      	movs	r3, #252	; 0xfc
 800c97a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800c97e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c982:	e0aa      	b.n	800cada <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800c984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c988:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c990:	f107 0314 	add.w	r3, r7, #20
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7fc fedc 	bl	8009754 <VL53L0X_GetSequenceStepEnables>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800c9a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d15b      	bne.n	800ca62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800c9aa:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d105      	bne.n	800c9bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800c9b0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d102      	bne.n	800c9bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800c9b6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d052      	beq.n	800ca62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800c9bc:	f107 0310 	add.w	r3, r7, #16
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	2102      	movs	r1, #2
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7ff fb19 	bl	800bffc <get_sequence_step_timeout>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800c9d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800c9d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c9dc:	e07d      	b.n	800cada <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800c9de:	7d3b      	ldrb	r3, [r7, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00f      	beq.n	800ca04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800c9e4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800c9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e8:	4413      	add	r3, r2
 800c9ea:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800c9ec:	69fa      	ldr	r2, [r7, #28]
 800c9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d204      	bcs.n	800c9fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800c9f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c9fc:	e002      	b.n	800ca04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c9fe:	23fc      	movs	r3, #252	; 0xfc
 800ca00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ca04:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ca0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca10:	e063      	b.n	800cada <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ca12:	7dbb      	ldrb	r3, [r7, #22]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d011      	beq.n	800ca3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	4413      	add	r3, r2
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ca22:	69fa      	ldr	r2, [r7, #28]
 800ca24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d204      	bcs.n	800ca34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ca2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	643b      	str	r3, [r7, #64]	; 0x40
 800ca32:	e016      	b.n	800ca62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ca34:	23fc      	movs	r3, #252	; 0xfc
 800ca36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ca3a:	e012      	b.n	800ca62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ca3c:	7d7b      	ldrb	r3, [r7, #21]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00f      	beq.n	800ca62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca46:	4413      	add	r3, r2
 800ca48:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ca4a:	69fa      	ldr	r2, [r7, #28]
 800ca4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d204      	bcs.n	800ca5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ca52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	643b      	str	r3, [r7, #64]	; 0x40
 800ca5a:	e002      	b.n	800ca62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ca5c:	23fc      	movs	r3, #252	; 0xfc
 800ca5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ca62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d002      	beq.n	800ca70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ca6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca6e:	e034      	b.n	800cada <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d019      	beq.n	800caaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ca76:	f107 030c 	add.w	r3, r7, #12
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	2103      	movs	r1, #3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f7ff fabc 	bl	800bffc <get_sequence_step_timeout>
 800ca84:	4603      	mov	r3, r0
 800ca86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca8e:	4413      	add	r3, r2
 800ca90:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ca92:	69fa      	ldr	r2, [r7, #28]
 800ca94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d204      	bcs.n	800caa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ca9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	643b      	str	r3, [r7, #64]	; 0x40
 800caa2:	e002      	b.n	800caaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800caa4:	23fc      	movs	r3, #252	; 0xfc
 800caa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800caaa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d111      	bne.n	800cad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800cab2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00e      	beq.n	800cad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800cab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800cac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cac2:	2104      	movs	r1, #4
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7ff fb7a 	bl	800c1be <set_sequence_step_timeout>
 800caca:	4603      	mov	r3, r0
 800cacc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cad6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3748      	adds	r7, #72	; 0x48
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b090      	sub	sp, #64	; 0x40
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800caec:	2300      	movs	r3, #0
 800caee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800caf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800caf6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800caf8:	f240 7376 	movw	r3, #1910	; 0x776
 800cafc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800cafe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cb02:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cb04:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cb08:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800cb0a:	f240 234e 	movw	r3, #590	; 0x24e
 800cb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800cb10:	f240 23b2 	movw	r3, #690	; 0x2b2
 800cb14:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cb16:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cb1a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800cb1c:	f240 2326 	movw	r3, #550	; 0x226
 800cb20:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800cb26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb2a:	441a      	add	r2, r3
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cb30:	f107 0318 	add.w	r3, r7, #24
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7fc fe0c 	bl	8009754 <VL53L0X_GetSequenceStepEnables>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800cb42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cb4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cb4e:	e075      	b.n	800cc3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800cb50:	7e3b      	ldrb	r3, [r7, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d105      	bne.n	800cb62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800cb56:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d102      	bne.n	800cb62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800cb5c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d030      	beq.n	800cbc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800cb62:	f107 0310 	add.w	r3, r7, #16
 800cb66:	461a      	mov	r2, r3
 800cb68:	2102      	movs	r1, #2
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7ff fa46 	bl	800bffc <get_sequence_step_timeout>
 800cb70:	4603      	mov	r3, r0
 800cb72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800cb76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d122      	bne.n	800cbc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800cb7e:	7e3b      	ldrb	r3, [r7, #24]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d007      	beq.n	800cb94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cb88:	6939      	ldr	r1, [r7, #16]
 800cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cb8e:	441a      	add	r2, r3
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800cb94:	7ebb      	ldrb	r3, [r7, #26]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800cb9e:	6939      	ldr	r1, [r7, #16]
 800cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba2:	440b      	add	r3, r1
 800cba4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cba6:	441a      	add	r2, r3
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	601a      	str	r2, [r3, #0]
 800cbac:	e00a      	b.n	800cbc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800cbae:	7e7b      	ldrb	r3, [r7, #25]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d007      	beq.n	800cbc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cbb8:	6939      	ldr	r1, [r7, #16]
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cbbe:	441a      	add	r2, r3
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cbc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d114      	bne.n	800cbf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800cbcc:	7efb      	ldrb	r3, [r7, #27]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d011      	beq.n	800cbf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800cbd2:	f107 030c 	add.w	r3, r7, #12
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	2103      	movs	r1, #3
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7ff fa0e 	bl	800bffc <get_sequence_step_timeout>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800cbea:	68f9      	ldr	r1, [r7, #12]
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cbf0:	441a      	add	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cbf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d114      	bne.n	800cc28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800cbfe:	7f3b      	ldrb	r3, [r7, #28]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d011      	beq.n	800cc28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800cc04:	f107 0314 	add.w	r3, r7, #20
 800cc08:	461a      	mov	r2, r3
 800cc0a:	2104      	movs	r1, #4
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff f9f5 	bl	800bffc <get_sequence_step_timeout>
 800cc12:	4603      	mov	r3, r0
 800cc14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800cc1c:	6979      	ldr	r1, [r7, #20]
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cc22:	441a      	add	r2, r3
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cc28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d103      	bne.n	800cc38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cc38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3740      	adds	r7, #64	; 0x40
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800cc56:	e0c6      	b.n	800cde6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	74fb      	strb	r3, [r7, #19]
		Index++;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	3301      	adds	r3, #1
 800cc66:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800cc68:	7cfb      	ldrb	r3, [r7, #19]
 800cc6a:	2bff      	cmp	r3, #255	; 0xff
 800cc6c:	f040 808d 	bne.w	800cd8a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	4413      	add	r3, r2
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	747b      	strb	r3, [r7, #17]
			Index++;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800cc80:	7c7b      	ldrb	r3, [r7, #17]
 800cc82:	2b03      	cmp	r3, #3
 800cc84:	d87e      	bhi.n	800cd84 <VL53L0X_load_tuning_settings+0x140>
 800cc86:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <VL53L0X_load_tuning_settings+0x48>)
 800cc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8c:	0800cc9d 	.word	0x0800cc9d
 800cc90:	0800ccd7 	.word	0x0800ccd7
 800cc94:	0800cd11 	.word	0x0800cd11
 800cc98:	0800cd4b 	.word	0x0800cd4b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	4413      	add	r3, r2
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	743b      	strb	r3, [r7, #16]
				Index++;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ccbc:	7c3b      	ldrb	r3, [r7, #16]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	021b      	lsls	r3, r3, #8
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	4413      	add	r3, r2
 800ccca:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	89ba      	ldrh	r2, [r7, #12]
 800ccd0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800ccd4:	e087      	b.n	800cde6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	4413      	add	r3, r2
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	743b      	strb	r3, [r7, #16]
				Index++;
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	3301      	adds	r3, #1
 800cce4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	4413      	add	r3, r2
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ccf6:	7c3b      	ldrb	r3, [r7, #16]
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	021b      	lsls	r3, r3, #8
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	4413      	add	r3, r2
 800cd04:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	89ba      	ldrh	r2, [r7, #12]
 800cd0a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800cd0e:	e06a      	b.n	800cde6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	4413      	add	r3, r2
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	743b      	strb	r3, [r7, #16]
				Index++;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	4413      	add	r3, r2
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cd30:	7c3b      	ldrb	r3, [r7, #16]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	021b      	lsls	r3, r3, #8
 800cd36:	b29a      	uxth	r2, r3
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	4413      	add	r3, r2
 800cd3e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	89ba      	ldrh	r2, [r7, #12]
 800cd44:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800cd48:	e04d      	b.n	800cde6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	4413      	add	r3, r2
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	743b      	strb	r3, [r7, #16]
				Index++;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	3301      	adds	r3, #1
 800cd58:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	4413      	add	r3, r2
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	3301      	adds	r3, #1
 800cd68:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cd6a:	7c3b      	ldrb	r3, [r7, #16]
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	021b      	lsls	r3, r3, #8
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	4413      	add	r3, r2
 800cd78:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	89ba      	ldrh	r2, [r7, #12]
 800cd7e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800cd82:	e030      	b.n	800cde6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd84:	23fc      	movs	r3, #252	; 0xfc
 800cd86:	77fb      	strb	r3, [r7, #31]
 800cd88:	e02d      	b.n	800cde6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800cd8a:	7cfb      	ldrb	r3, [r7, #19]
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	d828      	bhi.n	800cde2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	4413      	add	r3, r2
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	74bb      	strb	r3, [r7, #18]
			Index++;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800cda0:	2300      	movs	r3, #0
 800cda2:	61bb      	str	r3, [r7, #24]
 800cda4:	e00f      	b.n	800cdc6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	4413      	add	r3, r2
 800cdac:	7819      	ldrb	r1, [r3, #0]
 800cdae:	f107 0208 	add.w	r2, r7, #8
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	460a      	mov	r2, r1
 800cdb8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	61bb      	str	r3, [r7, #24]
 800cdc6:	7cfb      	ldrb	r3, [r7, #19]
 800cdc8:	69ba      	ldr	r2, [r7, #24]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	dbeb      	blt.n	800cda6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800cdce:	7cfb      	ldrb	r3, [r7, #19]
 800cdd0:	f107 0208 	add.w	r2, r7, #8
 800cdd4:	7cb9      	ldrb	r1, [r7, #18]
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 fdee 	bl	800d9b8 <VL53L0X_WriteMulti>
 800cddc:	4603      	mov	r3, r0
 800cdde:	77fb      	strb	r3, [r7, #31]
 800cde0:	e001      	b.n	800cde6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cde2:	23fc      	movs	r3, #252	; 0xfc
 800cde4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	683a      	ldr	r2, [r7, #0]
 800cdea:	4413      	add	r3, r2
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d004      	beq.n	800cdfc <VL53L0X_load_tuning_settings+0x1b8>
 800cdf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f43f af2e 	beq.w	800cc58 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cdfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3720      	adds	r7, #32
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b088      	sub	sp, #32
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce14:	2300      	movs	r3, #0
 800ce16:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ce1e:	f107 0313 	add.w	r3, r7, #19
 800ce22:	4619      	mov	r1, r3
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f7fc fd21 	bl	800986c <VL53L0X_GetXTalkCompensationEnable>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ce2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d111      	bne.n	800ce5a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ce36:	7cfb      	ldrb	r3, [r7, #19]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00e      	beq.n	800ce5a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6a1b      	ldr	r3, [r3, #32]
 800ce40:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	8a9b      	ldrh	r3, [r3, #20]
 800ce46:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	fb02 f303 	mul.w	r3, r2, r3
 800ce4e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	3380      	adds	r3, #128	; 0x80
 800ce54:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800ce5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3720      	adds	r7, #32
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b086      	sub	sp, #24
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	60f8      	str	r0, [r7, #12]
 800ce6e:	60b9      	str	r1, [r7, #8]
 800ce70:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce72:	2300      	movs	r3, #0
 800ce74:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ce7e:	f107 0310 	add.w	r3, r7, #16
 800ce82:	461a      	mov	r2, r3
 800ce84:	68b9      	ldr	r1, [r7, #8]
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f7ff ffbe 	bl	800ce08 <VL53L0X_get_total_xtalk_rate>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ce90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d105      	bne.n	800cea4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	441a      	add	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	601a      	str	r2, [r3, #0]

	return Status;
 800cea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3718      	adds	r7, #24
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b09a      	sub	sp, #104	; 0x68
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800cebe:	2312      	movs	r3, #18
 800cec0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800cec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cec6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800cec8:	2342      	movs	r3, #66	; 0x42
 800ceca:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800cecc:	2306      	movs	r3, #6
 800cece:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ced0:	2307      	movs	r3, #7
 800ced2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800cee8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ceea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceee:	fb02 f303 	mul.w	r3, r2, r3
 800cef2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800cef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef6:	3380      	adds	r3, #128	; 0x80
 800cef8:	0a1b      	lsrs	r3, r3, #8
 800cefa:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800cefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf00:	fb02 f303 	mul.w	r3, r2, r3
 800cf04:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d01a      	beq.n	800cf46 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	029b      	lsls	r3, r3, #10
 800cf14:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800cf1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf1c:	4413      	add	r3, r2
 800cf1e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800cf20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf28:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800cf2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	4413      	add	r3, r2
 800cf32:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800cf34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf36:	fb03 f303 	mul.w	r3, r3, r3
 800cf3a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800cf3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cf42:	0c1b      	lsrs	r3, r3, #16
 800cf44:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cf4a:	fb02 f303 	mul.w	r3, r2, r3
 800cf4e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cf56:	0c1b      	lsrs	r3, r3, #16
 800cf58:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5c:	fb03 f303 	mul.w	r3, r3, r3
 800cf60:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800cf62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cf68:	0c1b      	lsrs	r3, r3, #16
 800cf6a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800cf6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf6e:	085a      	lsrs	r2, r3, #1
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	441a      	add	r2, r3
 800cf74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf76:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf7a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf80:	fb02 f303 	mul.w	r3, r2, r3
 800cf84:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf8c:	d302      	bcc.n	800cf94 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800cf8e:	4b54      	ldr	r3, [pc, #336]	; (800d0e0 <VL53L0X_calc_dmax+0x230>)
 800cf90:	663b      	str	r3, [r7, #96]	; 0x60
 800cf92:	e015      	b.n	800cfc0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800cf94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf96:	085a      	lsrs	r2, r3, #1
 800cf98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf9a:	441a      	add	r2, r3
 800cf9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfa2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800cfa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfa8:	fb02 f303 	mul.w	r3, r2, r3
 800cfac:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800cfae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfb4:	0c1b      	lsrs	r3, r3, #16
 800cfb6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800cfb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfba:	fb03 f303 	mul.w	r3, r3, r3
 800cfbe:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800cfc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfc2:	039b      	lsls	r3, r3, #14
 800cfc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cfc8:	4a46      	ldr	r2, [pc, #280]	; (800d0e4 <VL53L0X_calc_dmax+0x234>)
 800cfca:	fba2 2303 	umull	r2, r3, r2, r3
 800cfce:	099b      	lsrs	r3, r3, #6
 800cfd0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd4:	fb03 f303 	mul.w	r3, r3, r3
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800cfda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfdc:	fb03 f303 	mul.w	r3, r3, r3
 800cfe0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	3308      	adds	r3, #8
 800cfe6:	091b      	lsrs	r3, r3, #4
 800cfe8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800cfea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800cff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cff4:	4613      	mov	r3, r2
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	4413      	add	r3, r2
 800cffa:	011b      	lsls	r3, r3, #4
 800cffc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d004:	0b9b      	lsrs	r3, r3, #14
 800d006:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d00a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d00c:	4413      	add	r3, r2
 800d00e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d012:	085b      	lsrs	r3, r3, #1
 800d014:	69ba      	ldr	r2, [r7, #24]
 800d016:	4413      	add	r3, r2
 800d018:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d01a:	69ba      	ldr	r2, [r7, #24]
 800d01c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d022:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	039b      	lsls	r3, r3, #14
 800d028:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	085b      	lsrs	r3, r3, #1
 800d02e:	69ba      	ldr	r2, [r7, #24]
 800d030:	4413      	add	r3, r2
 800d032:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	fbb2 f3f3 	udiv	r3, r2, r3
 800d03c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d042:	fb02 f303 	mul.w	r3, r2, r3
 800d046:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d04e:	4a25      	ldr	r2, [pc, #148]	; (800d0e4 <VL53L0X_calc_dmax+0x234>)
 800d050:	fba2 2303 	umull	r2, r3, r2, r3
 800d054:	099b      	lsrs	r3, r3, #6
 800d056:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	011b      	lsls	r3, r3, #4
 800d05c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d064:	4a1f      	ldr	r2, [pc, #124]	; (800d0e4 <VL53L0X_calc_dmax+0x234>)
 800d066:	fba2 2303 	umull	r2, r3, r2, r3
 800d06a:	099b      	lsrs	r3, r3, #6
 800d06c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d070:	3380      	adds	r3, #128	; 0x80
 800d072:	0a1b      	lsrs	r3, r3, #8
 800d074:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d008      	beq.n	800d08e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	085a      	lsrs	r2, r3, #1
 800d080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d082:	441a      	add	r2, r3
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	fbb2 f3f3 	udiv	r3, r2, r3
 800d08a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d08c:	e001      	b.n	800d092 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d08e:	2300      	movs	r3, #0
 800d090:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d092:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d094:	f7fe f9ba 	bl	800b40c <VL53L0X_isqrt>
 800d098:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d008      	beq.n	800d0b2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	085a      	lsrs	r2, r3, #1
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	441a      	add	r2, r3
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0b0:	e001      	b.n	800d0b6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d0b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d0b8:	f7fe f9a8 	bl	800b40c <VL53L0X_isqrt>
 800d0bc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d0be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d0c4:	693a      	ldr	r2, [r7, #16]
 800d0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d902      	bls.n	800d0d2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d0cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0d0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d0d2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3768      	adds	r7, #104	; 0x68
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	fff00000 	.word	0xfff00000
 800d0e4:	10624dd3 	.word	0x10624dd3

0800d0e8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b0b4      	sub	sp, #208	; 0xd0
 800d0ec:	af04      	add	r7, sp, #16
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d0f6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d0fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d0fe:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d106:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d10a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d10e:	f241 235c 	movw	r3, #4700	; 0x125c
 800d112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d116:	4b9e      	ldr	r3, [pc, #632]	; (800d390 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d11c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d120:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d122:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d12e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d130:	4b98      	ldr	r3, [pc, #608]	; (800d394 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d132:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d138:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d13a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d13e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d140:	f240 6377 	movw	r3, #1655	; 0x677
 800d144:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d146:	2300      	movs	r3, #0
 800d148:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6a1b      	ldr	r3, [r3, #32]
 800d150:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d15a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d15e:	0c1b      	lsrs	r3, r3, #16
 800d160:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d168:	f107 0310 	add.w	r3, r7, #16
 800d16c:	461a      	mov	r2, r3
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7ff fe78 	bl	800ce66 <VL53L0X_get_total_signal_rate>
 800d176:	4603      	mov	r3, r0
 800d178:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d17c:	f107 0314 	add.w	r3, r7, #20
 800d180:	461a      	mov	r2, r3
 800d182:	68b9      	ldr	r1, [r7, #8]
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f7ff fe3f 	bl	800ce08 <VL53L0X_get_total_xtalk_rate>
 800d18a:	4603      	mov	r3, r0
 800d18c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d196:	fb02 f303 	mul.w	r3, r2, r3
 800d19a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d19c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d19e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d1a2:	0c1b      	lsrs	r3, r3, #16
 800d1a4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d1ac:	fb02 f303 	mul.w	r3, r2, r3
 800d1b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d1b4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d1b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d902      	bls.n	800d1c4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d1c4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d168      	bne.n	800d29e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d1d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d1dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d1e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f7fe feb2 	bl	800bf54 <VL53L0X_calc_timeout_mclks>
 800d1f0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d1f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d202:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d206:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d20a:	461a      	mov	r2, r3
 800d20c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f7fe fe9f 	bl	800bf54 <VL53L0X_calc_timeout_mclks>
 800d216:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d218:	2303      	movs	r3, #3
 800d21a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d21e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d222:	2b08      	cmp	r3, #8
 800d224:	d102      	bne.n	800d22c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d226:	2302      	movs	r3, #2
 800d228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d22c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d230:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d232:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d236:	fb02 f303 	mul.w	r3, r2, r3
 800d23a:	02db      	lsls	r3, r3, #11
 800d23c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d240:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d244:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d248:	4a53      	ldr	r2, [pc, #332]	; (800d398 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d24a:	fba2 2303 	umull	r2, r3, r2, r3
 800d24e:	099b      	lsrs	r3, r3, #6
 800d250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d254:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d25a:	fb02 f303 	mul.w	r3, r2, r3
 800d25e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d266:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d26a:	4a4b      	ldr	r2, [pc, #300]	; (800d398 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d26c:	fba2 2303 	umull	r2, r3, r2, r3
 800d270:	099b      	lsrs	r3, r3, #6
 800d272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	3380      	adds	r3, #128	; 0x80
 800d27a:	0a1b      	lsrs	r3, r3, #8
 800d27c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d284:	fb02 f303 	mul.w	r3, r2, r3
 800d288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d28c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d290:	3380      	adds	r3, #128	; 0x80
 800d292:	0a1b      	lsrs	r3, r3, #8
 800d294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	021b      	lsls	r3, r3, #8
 800d29c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d29e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d2a6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d2aa:	e15e      	b.n	800d56a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d2ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10c      	bne.n	800d2cc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d2b8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d2c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	601a      	str	r2, [r3, #0]
 800d2ca:	e14c      	b.n	800d566 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d2cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d2da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d2de:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d2e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2e2:	041a      	lsls	r2, r3, #16
 800d2e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d2ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d2f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d902      	bls.n	800d2fe <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d2f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d2fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d302:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d306:	fb02 f303 	mul.w	r3, r2, r3
 800d30a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d30e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d312:	4613      	mov	r3, r2
 800d314:	005b      	lsls	r3, r3, #1
 800d316:	4413      	add	r3, r2
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe f876 	bl	800b40c <VL53L0X_isqrt>
 800d320:	4603      	mov	r3, r0
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	891b      	ldrh	r3, [r3, #8]
 800d32a:	461a      	mov	r2, r3
 800d32c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d32e:	fb02 f303 	mul.w	r3, r2, r3
 800d332:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d336:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d33c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d33e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d340:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d344:	4a14      	ldr	r2, [pc, #80]	; (800d398 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d346:	fba2 2303 	umull	r2, r3, r2, r3
 800d34a:	099b      	lsrs	r3, r3, #6
 800d34c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d34e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d350:	041b      	lsls	r3, r3, #16
 800d352:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d356:	4a10      	ldr	r2, [pc, #64]	; (800d398 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d358:	fba2 2303 	umull	r2, r3, r2, r3
 800d35c:	099b      	lsrs	r3, r3, #6
 800d35e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d362:	021b      	lsls	r3, r3, #8
 800d364:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d36e:	2b00      	cmp	r3, #0
 800d370:	bfb8      	it	lt
 800d372:	425b      	neglt	r3, r3
 800d374:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d378:	021b      	lsls	r3, r3, #8
 800d37a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	7e1b      	ldrb	r3, [r3, #24]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00b      	beq.n	800d39c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d38c:	e033      	b.n	800d3f6 <VL53L0X_calc_sigma_estimate+0x30e>
 800d38e:	bf00      	nop
 800d390:	028f87ae 	.word	0x028f87ae
 800d394:	0006999a 	.word	0x0006999a
 800d398:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d39c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d39e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ac:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d3b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3b4:	fb02 f303 	mul.w	r3, r2, r3
 800d3b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d3bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d3c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3c2:	4413      	add	r3, r2
 800d3c4:	0c1b      	lsrs	r3, r3, #16
 800d3c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d3ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d3d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d3d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3da:	085b      	lsrs	r3, r3, #1
 800d3dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d3e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3e4:	fb03 f303 	mul.w	r3, r3, r3
 800d3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3f0:	0b9b      	lsrs	r3, r3, #14
 800d3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3fc:	fb02 f303 	mul.w	r3, r2, r3
 800d400:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d404:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d408:	0c1b      	lsrs	r3, r3, #16
 800d40a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40e:	fb03 f303 	mul.w	r3, r3, r3
 800d412:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d418:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d420:	0c1b      	lsrs	r3, r3, #16
 800d422:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	fb03 f303 	mul.w	r3, r3, r3
 800d42a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	4413      	add	r3, r2
 800d432:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d436:	f7fd ffe9 	bl	800b40c <VL53L0X_isqrt>
 800d43a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43e:	041b      	lsls	r3, r3, #16
 800d440:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	3332      	adds	r3, #50	; 0x32
 800d446:	4a4b      	ldr	r2, [pc, #300]	; (800d574 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d448:	fba2 2303 	umull	r2, r3, r2, r3
 800d44c:	095a      	lsrs	r2, r3, #5
 800d44e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d450:	fbb2 f3f3 	udiv	r3, r2, r3
 800d454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d45c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d460:	fb02 f303 	mul.w	r3, r2, r3
 800d464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d46c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d470:	3308      	adds	r3, #8
 800d472:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d47a:	4a3f      	ldr	r2, [pc, #252]	; (800d578 <VL53L0X_calc_sigma_estimate+0x490>)
 800d47c:	fba2 2303 	umull	r2, r3, r2, r3
 800d480:	0b5b      	lsrs	r3, r3, #13
 800d482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d48a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d902      	bls.n	800d496 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d49a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d49e:	4413      	add	r3, r2
 800d4a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d4a4:	4a35      	ldr	r2, [pc, #212]	; (800d57c <VL53L0X_calc_sigma_estimate+0x494>)
 800d4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4aa:	099b      	lsrs	r3, r3, #6
 800d4ac:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d4ae:	6a3b      	ldr	r3, [r7, #32]
 800d4b0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d4b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d4b6:	441a      	add	r2, r3
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
 800d4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fd ffa4 	bl	800b40c <VL53L0X_isqrt>
 800d4c4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	021b      	lsls	r3, r3, #8
 800d4ca:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d4d2:	4a2a      	ldr	r2, [pc, #168]	; (800d57c <VL53L0X_calc_sigma_estimate+0x494>)
 800d4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d8:	099b      	lsrs	r3, r3, #6
 800d4da:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d4dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d4e0:	fb03 f303 	mul.w	r3, r3, r3
 800d4e4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	fb03 f303 	mul.w	r3, r3, r3
 800d4ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f2:	4413      	add	r3, r2
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7fd ff89 	bl	800b40c <VL53L0X_isqrt>
 800d4fa:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d502:	fb02 f303 	mul.w	r3, r2, r3
 800d506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d009      	beq.n	800d524 <VL53L0X_calc_sigma_estimate+0x43c>
 800d510:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d514:	2b00      	cmp	r3, #0
 800d516:	d005      	beq.n	800d524 <VL53L0X_calc_sigma_estimate+0x43c>
 800d518:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d51c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d520:	429a      	cmp	r2, r3
 800d522:	d903      	bls.n	800d52c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d532:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800d53e:	6939      	ldr	r1, [r7, #16]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	9303      	str	r3, [sp, #12]
 800d544:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d548:	9302      	str	r3, [sp, #8]
 800d54a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f7ff fca8 	bl	800ceb0 <VL53L0X_calc_dmax>
 800d560:	4603      	mov	r3, r0
 800d562:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d566:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	37c0      	adds	r7, #192	; 0xc0
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	51eb851f 	.word	0x51eb851f
 800d578:	d1b71759 	.word	0xd1b71759
 800d57c:	10624dd3 	.word	0x10624dd3

0800d580 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b090      	sub	sp, #64	; 0x40
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	607a      	str	r2, [r7, #4]
 800d58a:	461a      	mov	r2, r3
 800d58c:	460b      	mov	r3, r1
 800d58e:	72fb      	strb	r3, [r7, #11]
 800d590:	4613      	mov	r3, r2
 800d592:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d594:	2300      	movs	r3, #0
 800d596:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800d59a:	2300      	movs	r3, #0
 800d59c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d5d2:	7afb      	ldrb	r3, [r7, #11]
 800d5d4:	10db      	asrs	r3, r3, #3
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	f003 030f 	and.w	r3, r3, #15
 800d5dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d5e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d017      	beq.n	800d618 <VL53L0X_get_pal_range_status+0x98>
 800d5e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d5ec:	2b05      	cmp	r3, #5
 800d5ee:	d013      	beq.n	800d618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d5f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d5f4:	2b07      	cmp	r3, #7
 800d5f6:	d00f      	beq.n	800d618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d5f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d5fc:	2b0c      	cmp	r3, #12
 800d5fe:	d00b      	beq.n	800d618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d600:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d604:	2b0d      	cmp	r3, #13
 800d606:	d007      	beq.n	800d618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d608:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d60c:	2b0e      	cmp	r3, #14
 800d60e:	d003      	beq.n	800d618 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d610:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d614:	2b0f      	cmp	r3, #15
 800d616:	d103      	bne.n	800d620 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d618:	2301      	movs	r3, #1
 800d61a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d61e:	e002      	b.n	800d626 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d626:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d109      	bne.n	800d642 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d62e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d632:	461a      	mov	r2, r3
 800d634:	2100      	movs	r1, #0
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f7fc f9ec 	bl	8009a14 <VL53L0X_GetLimitCheckEnable>
 800d63c:	4603      	mov	r3, r0
 800d63e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d646:	2b00      	cmp	r3, #0
 800d648:	d02e      	beq.n	800d6a8 <VL53L0X_get_pal_range_status+0x128>
 800d64a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d12a      	bne.n	800d6a8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800d652:	f107 0310 	add.w	r3, r7, #16
 800d656:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d65a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7ff fd43 	bl	800d0e8 <VL53L0X_calc_sigma_estimate>
 800d662:	4603      	mov	r3, r0
 800d664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800d668:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d103      	bne.n	800d678 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	b29a      	uxth	r2, r3
 800d674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d676:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d678:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d113      	bne.n	800d6a8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d680:	f107 0320 	add.w	r3, r7, #32
 800d684:	461a      	mov	r2, r3
 800d686:	2100      	movs	r1, #0
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f7fc fa49 	bl	8009b20 <VL53L0X_GetLimitCheckValue>
 800d68e:	4603      	mov	r3, r0
 800d690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d006      	beq.n	800d6a8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800d69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d69c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d902      	bls.n	800d6a8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d6a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d109      	bne.n	800d6c4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d6b0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	2102      	movs	r1, #2
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f7fc f9ab 	bl	8009a14 <VL53L0X_GetLimitCheckEnable>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800d6c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d044      	beq.n	800d756 <VL53L0X_get_pal_range_status+0x1d6>
 800d6cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d140      	bne.n	800d756 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d6d4:	f107 031c 	add.w	r3, r7, #28
 800d6d8:	461a      	mov	r2, r3
 800d6da:	2102      	movs	r1, #2
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f7fc fa1f 	bl	8009b20 <VL53L0X_GetLimitCheckValue>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800d6e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d107      	bne.n	800d700 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	21ff      	movs	r1, #255	; 0xff
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f000 f9bb 	bl	800da70 <VL53L0X_WrByte>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800d700:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d704:	2b00      	cmp	r3, #0
 800d706:	d109      	bne.n	800d71c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800d708:	f107 0316 	add.w	r3, r7, #22
 800d70c:	461a      	mov	r2, r3
 800d70e:	21b6      	movs	r1, #182	; 0xb6
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 fa59 	bl	800dbc8 <VL53L0X_RdWord>
 800d716:	4603      	mov	r3, r0
 800d718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800d71c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d720:	2b00      	cmp	r3, #0
 800d722:	d107      	bne.n	800d734 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d724:	2200      	movs	r2, #0
 800d726:	21ff      	movs	r1, #255	; 0xff
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f000 f9a1 	bl	800da70 <VL53L0X_WrByte>
 800d72e:	4603      	mov	r3, r0
 800d730:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800d734:	8afb      	ldrh	r3, [r7, #22]
 800d736:	025b      	lsls	r3, r3, #9
 800d738:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d73e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d006      	beq.n	800d756 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800d748:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800d74a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d902      	bls.n	800d756 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800d750:	2301      	movs	r3, #1
 800d752:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d756:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d109      	bne.n	800d772 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d75e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d762:	461a      	mov	r2, r3
 800d764:	2103      	movs	r1, #3
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f7fc f954 	bl	8009a14 <VL53L0X_GetLimitCheckEnable>
 800d76c:	4603      	mov	r3, r0
 800d76e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800d772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d776:	2b00      	cmp	r3, #0
 800d778:	d023      	beq.n	800d7c2 <VL53L0X_get_pal_range_status+0x242>
 800d77a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d11f      	bne.n	800d7c2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800d782:	893b      	ldrh	r3, [r7, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d102      	bne.n	800d78e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	637b      	str	r3, [r7, #52]	; 0x34
 800d78c:	e005      	b.n	800d79a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	021a      	lsls	r2, r3, #8
 800d792:	893b      	ldrh	r3, [r7, #8]
 800d794:	fbb2 f3f3 	udiv	r3, r2, r3
 800d798:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d79a:	f107 0318 	add.w	r3, r7, #24
 800d79e:	461a      	mov	r2, r3
 800d7a0:	2103      	movs	r1, #3
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f7fc f9bc 	bl	8009b20 <VL53L0X_GetLimitCheckValue>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d006      	beq.n	800d7c2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800d7b4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800d7b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d202      	bcs.n	800d7c2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d7c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d14a      	bne.n	800d860 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800d7ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d103      	bne.n	800d7da <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800d7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d4:	22ff      	movs	r2, #255	; 0xff
 800d7d6:	701a      	strb	r2, [r3, #0]
 800d7d8:	e042      	b.n	800d860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800d7da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d007      	beq.n	800d7f2 <VL53L0X_get_pal_range_status+0x272>
 800d7e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	d003      	beq.n	800d7f2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800d7ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d103      	bne.n	800d7fa <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800d7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f4:	2205      	movs	r2, #5
 800d7f6:	701a      	strb	r2, [r3, #0]
 800d7f8:	e032      	b.n	800d860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800d7fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d7fe:	2b06      	cmp	r3, #6
 800d800:	d003      	beq.n	800d80a <VL53L0X_get_pal_range_status+0x28a>
 800d802:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d806:	2b09      	cmp	r3, #9
 800d808:	d103      	bne.n	800d812 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800d80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d80c:	2204      	movs	r2, #4
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	e026      	b.n	800d860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800d812:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d816:	2b08      	cmp	r3, #8
 800d818:	d007      	beq.n	800d82a <VL53L0X_get_pal_range_status+0x2aa>
 800d81a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d81e:	2b0a      	cmp	r3, #10
 800d820:	d003      	beq.n	800d82a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800d822:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d826:	2b01      	cmp	r3, #1
 800d828:	d103      	bne.n	800d832 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800d82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d82c:	2203      	movs	r2, #3
 800d82e:	701a      	strb	r2, [r3, #0]
 800d830:	e016      	b.n	800d860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800d832:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d836:	2b04      	cmp	r3, #4
 800d838:	d003      	beq.n	800d842 <VL53L0X_get_pal_range_status+0x2c2>
 800d83a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d103      	bne.n	800d84a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800d842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d844:	2202      	movs	r2, #2
 800d846:	701a      	strb	r2, [r3, #0]
 800d848:	e00a      	b.n	800d860 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800d84a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d103      	bne.n	800d85a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800d852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d854:	2201      	movs	r2, #1
 800d856:	701a      	strb	r2, [r3, #0]
 800d858:	e002      	b.n	800d860 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	2200      	movs	r2, #0
 800d85e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800d860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d102      	bne.n	800d86e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800d868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d86a:	2200      	movs	r2, #0
 800d86c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d86e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800d872:	461a      	mov	r2, r3
 800d874:	2101      	movs	r1, #1
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f7fc f8cc 	bl	8009a14 <VL53L0X_GetLimitCheckEnable>
 800d87c:	4603      	mov	r3, r0
 800d87e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800d882:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d886:	2b00      	cmp	r3, #0
 800d888:	d14f      	bne.n	800d92a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800d88a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <VL53L0X_get_pal_range_status+0x31a>
 800d892:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d896:	2b01      	cmp	r3, #1
 800d898:	d103      	bne.n	800d8a2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800d89a:	2301      	movs	r3, #1
 800d89c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8a0:	e002      	b.n	800d8a8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d8ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800d8b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8b6:	2b04      	cmp	r3, #4
 800d8b8:	d003      	beq.n	800d8c2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800d8ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d103      	bne.n	800d8ca <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8c8:	e002      	b.n	800d8d0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d8d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800d8da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d003      	beq.n	800d8ea <VL53L0X_get_pal_range_status+0x36a>
 800d8e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d103      	bne.n	800d8f2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8f0:	e002      	b.n	800d8f8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d8fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <VL53L0X_get_pal_range_status+0x392>
 800d90a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d103      	bne.n	800d91a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800d912:	2301      	movs	r3, #1
 800d914:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d918:	e002      	b.n	800d920 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d926:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d92a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800d92e:	4618      	mov	r0, r3
 800d930:	3740      	adds	r7, #64	; 0x40
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d936:	b580      	push	{r7, lr}
 800d938:	b088      	sub	sp, #32
 800d93a:	af02      	add	r7, sp, #8
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	60b9      	str	r1, [r7, #8]
 800d940:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	330a      	adds	r3, #10
 800d946:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d954:	b299      	uxth	r1, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	b29a      	uxth	r2, r3
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	4613      	mov	r3, r2
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	f7f4 fe5b 	bl	800261c <HAL_I2C_Master_Transmit>
 800d966:	4603      	mov	r3, r0
 800d968:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d96a:	693b      	ldr	r3, [r7, #16]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	af02      	add	r7, sp, #8
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	330a      	adds	r3, #10
 800d984:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d992:	f043 0301 	orr.w	r3, r3, #1
 800d996:	b2db      	uxtb	r3, r3
 800d998:	b299      	uxth	r1, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	f7f4 ff37 	bl	8002818 <HAL_I2C_Master_Receive>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d9ae:	693b      	ldr	r3, [r7, #16]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b086      	sub	sp, #24
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	607a      	str	r2, [r7, #4]
 800d9c2:	603b      	str	r3, [r7, #0]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	2b3f      	cmp	r3, #63	; 0x3f
 800d9d0:	d902      	bls.n	800d9d8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800d9d2:	f06f 0303 	mvn.w	r3, #3
 800d9d6:	e016      	b.n	800da06 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800d9d8:	4a0d      	ldr	r2, [pc, #52]	; (800da10 <VL53L0X_WriteMulti+0x58>)
 800d9da:	7afb      	ldrb	r3, [r7, #11]
 800d9dc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	480c      	ldr	r0, [pc, #48]	; (800da14 <VL53L0X_WriteMulti+0x5c>)
 800d9e4:	f006 fa94 	bl	8013f10 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	4908      	ldr	r1, [pc, #32]	; (800da10 <VL53L0X_WriteMulti+0x58>)
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f7ff ffa0 	bl	800d936 <_I2CWrite>
 800d9f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d9fe:	23ec      	movs	r3, #236	; 0xec
 800da00:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800da02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3718      	adds	r7, #24
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	200008b4 	.word	0x200008b4
 800da14:	200008b5 	.word	0x200008b5

0800da18 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	607a      	str	r2, [r7, #4]
 800da22:	603b      	str	r3, [r7, #0]
 800da24:	460b      	mov	r3, r1
 800da26:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da28:	2300      	movs	r3, #0
 800da2a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800da2c:	f107 030b 	add.w	r3, r7, #11
 800da30:	2201      	movs	r2, #1
 800da32:	4619      	mov	r1, r3
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f7ff ff7e 	bl	800d936 <_I2CWrite>
 800da3a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d002      	beq.n	800da48 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800da42:	23ec      	movs	r3, #236	; 0xec
 800da44:	75fb      	strb	r3, [r7, #23]
        goto done;
 800da46:	e00c      	b.n	800da62 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800da48:	683a      	ldr	r2, [r7, #0]
 800da4a:	6879      	ldr	r1, [r7, #4]
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f7ff ff91 	bl	800d974 <_I2CRead>
 800da52:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800da5a:	23ec      	movs	r3, #236	; 0xec
 800da5c:	75fb      	strb	r3, [r7, #23]
 800da5e:	e000      	b.n	800da62 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800da60:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800da62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
	...

0800da70 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	460b      	mov	r3, r1
 800da7a:	70fb      	strb	r3, [r7, #3]
 800da7c:	4613      	mov	r3, r2
 800da7e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800da84:	4a0b      	ldr	r2, [pc, #44]	; (800dab4 <VL53L0X_WrByte+0x44>)
 800da86:	78fb      	ldrb	r3, [r7, #3]
 800da88:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800da8a:	4a0a      	ldr	r2, [pc, #40]	; (800dab4 <VL53L0X_WrByte+0x44>)
 800da8c:	78bb      	ldrb	r3, [r7, #2]
 800da8e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800da90:	2202      	movs	r2, #2
 800da92:	4908      	ldr	r1, [pc, #32]	; (800dab4 <VL53L0X_WrByte+0x44>)
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff ff4e 	bl	800d936 <_I2CWrite>
 800da9a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800daa2:	23ec      	movs	r3, #236	; 0xec
 800daa4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800daa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	200008b4 	.word	0x200008b4

0800dab8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	460b      	mov	r3, r1
 800dac2:	70fb      	strb	r3, [r7, #3]
 800dac4:	4613      	mov	r3, r2
 800dac6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dac8:	2300      	movs	r3, #0
 800daca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800dacc:	4a0e      	ldr	r2, [pc, #56]	; (800db08 <VL53L0X_WrWord+0x50>)
 800dace:	78fb      	ldrb	r3, [r7, #3]
 800dad0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800dad2:	883b      	ldrh	r3, [r7, #0]
 800dad4:	0a1b      	lsrs	r3, r3, #8
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	4b0b      	ldr	r3, [pc, #44]	; (800db08 <VL53L0X_WrWord+0x50>)
 800dadc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800dade:	883b      	ldrh	r3, [r7, #0]
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	4b09      	ldr	r3, [pc, #36]	; (800db08 <VL53L0X_WrWord+0x50>)
 800dae4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800dae6:	2203      	movs	r2, #3
 800dae8:	4907      	ldr	r1, [pc, #28]	; (800db08 <VL53L0X_WrWord+0x50>)
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7ff ff23 	bl	800d936 <_I2CWrite>
 800daf0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d001      	beq.n	800dafc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800daf8:	23ec      	movs	r3, #236	; 0xec
 800dafa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800dafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	200008b4 	.word	0x200008b4

0800db0c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	4608      	mov	r0, r1
 800db16:	4611      	mov	r1, r2
 800db18:	461a      	mov	r2, r3
 800db1a:	4603      	mov	r3, r0
 800db1c:	70fb      	strb	r3, [r7, #3]
 800db1e:	460b      	mov	r3, r1
 800db20:	70bb      	strb	r3, [r7, #2]
 800db22:	4613      	mov	r3, r2
 800db24:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db26:	2300      	movs	r3, #0
 800db28:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800db2a:	f107 020e 	add.w	r2, r7, #14
 800db2e:	78fb      	ldrb	r3, [r7, #3]
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f81e 	bl	800db74 <VL53L0X_RdByte>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800db3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d110      	bne.n	800db66 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800db44:	7bba      	ldrb	r2, [r7, #14]
 800db46:	78bb      	ldrb	r3, [r7, #2]
 800db48:	4013      	ands	r3, r2
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	787b      	ldrb	r3, [r7, #1]
 800db4e:	4313      	orrs	r3, r2
 800db50:	b2db      	uxtb	r3, r3
 800db52:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800db54:	7bba      	ldrb	r2, [r7, #14]
 800db56:	78fb      	ldrb	r3, [r7, #3]
 800db58:	4619      	mov	r1, r3
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f7ff ff88 	bl	800da70 <VL53L0X_WrByte>
 800db60:	4603      	mov	r3, r0
 800db62:	73fb      	strb	r3, [r7, #15]
 800db64:	e000      	b.n	800db68 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800db66:	bf00      	nop
done:
    return Status;
 800db68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	460b      	mov	r3, r1
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db82:	2300      	movs	r3, #0
 800db84:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800db86:	f107 030b 	add.w	r3, r7, #11
 800db8a:	2201      	movs	r2, #1
 800db8c:	4619      	mov	r1, r3
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f7ff fed1 	bl	800d936 <_I2CWrite>
 800db94:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800db9c:	23ec      	movs	r3, #236	; 0xec
 800db9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dba0:	e00c      	b.n	800dbbc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800dba2:	2201      	movs	r2, #1
 800dba4:	6879      	ldr	r1, [r7, #4]
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f7ff fee4 	bl	800d974 <_I2CRead>
 800dbac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dbb4:	23ec      	movs	r3, #236	; 0xec
 800dbb6:	75fb      	strb	r3, [r7, #23]
 800dbb8:	e000      	b.n	800dbbc <VL53L0X_RdByte+0x48>
    }
done:
 800dbba:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800dbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dbda:	f107 030b 	add.w	r3, r7, #11
 800dbde:	2201      	movs	r2, #1
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	f7ff fea7 	bl	800d936 <_I2CWrite>
 800dbe8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dbf0:	23ec      	movs	r3, #236	; 0xec
 800dbf2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dbf4:	e017      	b.n	800dc26 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	490e      	ldr	r1, [pc, #56]	; (800dc34 <VL53L0X_RdWord+0x6c>)
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f7ff feba 	bl	800d974 <_I2CRead>
 800dc00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc08:	23ec      	movs	r3, #236	; 0xec
 800dc0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dc0c:	e00b      	b.n	800dc26 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800dc0e:	4b09      	ldr	r3, [pc, #36]	; (800dc34 <VL53L0X_RdWord+0x6c>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	021b      	lsls	r3, r3, #8
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	4b06      	ldr	r3, [pc, #24]	; (800dc34 <VL53L0X_RdWord+0x6c>)
 800dc1a:	785b      	ldrb	r3, [r3, #1]
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	4413      	add	r3, r2
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800dc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	200008b4 	.word	0x200008b4

0800dc38 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	460b      	mov	r3, r1
 800dc42:	607a      	str	r2, [r7, #4]
 800dc44:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc46:	2300      	movs	r3, #0
 800dc48:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dc4a:	f107 030b 	add.w	r3, r7, #11
 800dc4e:	2201      	movs	r2, #1
 800dc50:	4619      	mov	r1, r3
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f7ff fe6f 	bl	800d936 <_I2CWrite>
 800dc58:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc60:	23ec      	movs	r3, #236	; 0xec
 800dc62:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dc64:	e01b      	b.n	800dc9e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800dc66:	2204      	movs	r2, #4
 800dc68:	4910      	ldr	r1, [pc, #64]	; (800dcac <VL53L0X_RdDWord+0x74>)
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f7ff fe82 	bl	800d974 <_I2CRead>
 800dc70:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d002      	beq.n	800dc7e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc78:	23ec      	movs	r3, #236	; 0xec
 800dc7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dc7c:	e00f      	b.n	800dc9e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800dc7e:	4b0b      	ldr	r3, [pc, #44]	; (800dcac <VL53L0X_RdDWord+0x74>)
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	061a      	lsls	r2, r3, #24
 800dc84:	4b09      	ldr	r3, [pc, #36]	; (800dcac <VL53L0X_RdDWord+0x74>)
 800dc86:	785b      	ldrb	r3, [r3, #1]
 800dc88:	041b      	lsls	r3, r3, #16
 800dc8a:	441a      	add	r2, r3
 800dc8c:	4b07      	ldr	r3, [pc, #28]	; (800dcac <VL53L0X_RdDWord+0x74>)
 800dc8e:	789b      	ldrb	r3, [r3, #2]
 800dc90:	021b      	lsls	r3, r3, #8
 800dc92:	4413      	add	r3, r2
 800dc94:	4a05      	ldr	r2, [pc, #20]	; (800dcac <VL53L0X_RdDWord+0x74>)
 800dc96:	78d2      	ldrb	r2, [r2, #3]
 800dc98:	441a      	add	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800dc9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	200008b4 	.word	0x200008b4

0800dcb0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800dcbc:	2002      	movs	r0, #2
 800dcbe:	f7f3 fd19 	bl	80016f4 <HAL_Delay>
    return status;
 800dcc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
	...

0800dcd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dcdc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dce0:	f006 f8ac 	bl	8013e3c <USBD_static_malloc>
 800dce4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d109      	bne.n	800dd00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	32b0      	adds	r2, #176	; 0xb0
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	e0d4      	b.n	800deaa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dd00:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dd04:	2100      	movs	r1, #0
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f006 f910 	bl	8013f2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	32b0      	adds	r2, #176	; 0xb0
 800dd16:	68f9      	ldr	r1, [r7, #12]
 800dd18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	32b0      	adds	r2, #176	; 0xb0
 800dd26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	7c1b      	ldrb	r3, [r3, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d138      	bne.n	800ddaa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dd38:	4b5e      	ldr	r3, [pc, #376]	; (800deb4 <USBD_CDC_Init+0x1e4>)
 800dd3a:	7819      	ldrb	r1, [r3, #0]
 800dd3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd40:	2202      	movs	r2, #2
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f005 ff57 	bl	8013bf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dd48:	4b5a      	ldr	r3, [pc, #360]	; (800deb4 <USBD_CDC_Init+0x1e4>)
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	f003 020f 	and.w	r2, r3, #15
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	440b      	add	r3, r1
 800dd5c:	3324      	adds	r3, #36	; 0x24
 800dd5e:	2201      	movs	r2, #1
 800dd60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dd62:	4b55      	ldr	r3, [pc, #340]	; (800deb8 <USBD_CDC_Init+0x1e8>)
 800dd64:	7819      	ldrb	r1, [r3, #0]
 800dd66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f005 ff42 	bl	8013bf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dd72:	4b51      	ldr	r3, [pc, #324]	; (800deb8 <USBD_CDC_Init+0x1e8>)
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	f003 020f 	and.w	r2, r3, #15
 800dd7a:	6879      	ldr	r1, [r7, #4]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	440b      	add	r3, r1
 800dd86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dd8e:	4b4b      	ldr	r3, [pc, #300]	; (800debc <USBD_CDC_Init+0x1ec>)
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	f003 020f 	and.w	r2, r3, #15
 800dd96:	6879      	ldr	r1, [r7, #4]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4413      	add	r3, r2
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	440b      	add	r3, r1
 800dda2:	3326      	adds	r3, #38	; 0x26
 800dda4:	2210      	movs	r2, #16
 800dda6:	801a      	strh	r2, [r3, #0]
 800dda8:	e035      	b.n	800de16 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ddaa:	4b42      	ldr	r3, [pc, #264]	; (800deb4 <USBD_CDC_Init+0x1e4>)
 800ddac:	7819      	ldrb	r1, [r3, #0]
 800ddae:	2340      	movs	r3, #64	; 0x40
 800ddb0:	2202      	movs	r2, #2
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f005 ff1f 	bl	8013bf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ddb8:	4b3e      	ldr	r3, [pc, #248]	; (800deb4 <USBD_CDC_Init+0x1e4>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	f003 020f 	and.w	r2, r3, #15
 800ddc0:	6879      	ldr	r1, [r7, #4]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	4413      	add	r3, r2
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	440b      	add	r3, r1
 800ddcc:	3324      	adds	r3, #36	; 0x24
 800ddce:	2201      	movs	r2, #1
 800ddd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ddd2:	4b39      	ldr	r3, [pc, #228]	; (800deb8 <USBD_CDC_Init+0x1e8>)
 800ddd4:	7819      	ldrb	r1, [r3, #0]
 800ddd6:	2340      	movs	r3, #64	; 0x40
 800ddd8:	2202      	movs	r2, #2
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f005 ff0b 	bl	8013bf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dde0:	4b35      	ldr	r3, [pc, #212]	; (800deb8 <USBD_CDC_Init+0x1e8>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	f003 020f 	and.w	r2, r3, #15
 800dde8:	6879      	ldr	r1, [r7, #4]
 800ddea:	4613      	mov	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	4413      	add	r3, r2
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	440b      	add	r3, r1
 800ddf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ddfc:	4b2f      	ldr	r3, [pc, #188]	; (800debc <USBD_CDC_Init+0x1ec>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	f003 020f 	and.w	r2, r3, #15
 800de04:	6879      	ldr	r1, [r7, #4]
 800de06:	4613      	mov	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	440b      	add	r3, r1
 800de10:	3326      	adds	r3, #38	; 0x26
 800de12:	2210      	movs	r2, #16
 800de14:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800de16:	4b29      	ldr	r3, [pc, #164]	; (800debc <USBD_CDC_Init+0x1ec>)
 800de18:	7819      	ldrb	r1, [r3, #0]
 800de1a:	2308      	movs	r3, #8
 800de1c:	2203      	movs	r2, #3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f005 fee9 	bl	8013bf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800de24:	4b25      	ldr	r3, [pc, #148]	; (800debc <USBD_CDC_Init+0x1ec>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 020f 	and.w	r2, r3, #15
 800de2c:	6879      	ldr	r1, [r7, #4]
 800de2e:	4613      	mov	r3, r2
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	440b      	add	r3, r1
 800de38:	3324      	adds	r3, #36	; 0x24
 800de3a:	2201      	movs	r2, #1
 800de3c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	33b0      	adds	r3, #176	; 0xb0
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4413      	add	r3, r2
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2200      	movs	r2, #0
 800de66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800de70:	2b00      	cmp	r3, #0
 800de72:	d101      	bne.n	800de78 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800de74:	2302      	movs	r3, #2
 800de76:	e018      	b.n	800deaa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7c1b      	ldrb	r3, [r3, #16]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10a      	bne.n	800de96 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de80:	4b0d      	ldr	r3, [pc, #52]	; (800deb8 <USBD_CDC_Init+0x1e8>)
 800de82:	7819      	ldrb	r1, [r3, #0]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f005 ffa0 	bl	8013dd4 <USBD_LL_PrepareReceive>
 800de94:	e008      	b.n	800dea8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de96:	4b08      	ldr	r3, [pc, #32]	; (800deb8 <USBD_CDC_Init+0x1e8>)
 800de98:	7819      	ldrb	r1, [r3, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dea0:	2340      	movs	r3, #64	; 0x40
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f005 ff96 	bl	8013dd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	2000034f 	.word	0x2000034f
 800deb8:	20000350 	.word	0x20000350
 800debc:	20000351 	.word	0x20000351

0800dec0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800decc:	4b3a      	ldr	r3, [pc, #232]	; (800dfb8 <USBD_CDC_DeInit+0xf8>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f005 feb5 	bl	8013c42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ded8:	4b37      	ldr	r3, [pc, #220]	; (800dfb8 <USBD_CDC_DeInit+0xf8>)
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	f003 020f 	and.w	r2, r3, #15
 800dee0:	6879      	ldr	r1, [r7, #4]
 800dee2:	4613      	mov	r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	4413      	add	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	440b      	add	r3, r1
 800deec:	3324      	adds	r3, #36	; 0x24
 800deee:	2200      	movs	r2, #0
 800def0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800def2:	4b32      	ldr	r3, [pc, #200]	; (800dfbc <USBD_CDC_DeInit+0xfc>)
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f005 fea2 	bl	8013c42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800defe:	4b2f      	ldr	r3, [pc, #188]	; (800dfbc <USBD_CDC_DeInit+0xfc>)
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	f003 020f 	and.w	r2, r3, #15
 800df06:	6879      	ldr	r1, [r7, #4]
 800df08:	4613      	mov	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	440b      	add	r3, r1
 800df12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df16:	2200      	movs	r2, #0
 800df18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800df1a:	4b29      	ldr	r3, [pc, #164]	; (800dfc0 <USBD_CDC_DeInit+0x100>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f005 fe8e 	bl	8013c42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800df26:	4b26      	ldr	r3, [pc, #152]	; (800dfc0 <USBD_CDC_DeInit+0x100>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	f003 020f 	and.w	r2, r3, #15
 800df2e:	6879      	ldr	r1, [r7, #4]
 800df30:	4613      	mov	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	440b      	add	r3, r1
 800df3a:	3324      	adds	r3, #36	; 0x24
 800df3c:	2200      	movs	r2, #0
 800df3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800df40:	4b1f      	ldr	r3, [pc, #124]	; (800dfc0 <USBD_CDC_DeInit+0x100>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	f003 020f 	and.w	r2, r3, #15
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	4613      	mov	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	4413      	add	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	440b      	add	r3, r1
 800df54:	3326      	adds	r3, #38	; 0x26
 800df56:	2200      	movs	r2, #0
 800df58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	32b0      	adds	r2, #176	; 0xb0
 800df64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d01f      	beq.n	800dfac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	33b0      	adds	r3, #176	; 0xb0
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	32b0      	adds	r2, #176	; 0xb0
 800df8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8e:	4618      	mov	r0, r3
 800df90:	f005 ff62 	bl	8013e58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	32b0      	adds	r2, #176	; 0xb0
 800df9e:	2100      	movs	r1, #0
 800dfa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	2000034f 	.word	0x2000034f
 800dfbc:	20000350 	.word	0x20000350
 800dfc0:	20000351 	.word	0x20000351

0800dfc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	32b0      	adds	r2, #176	; 0xb0
 800dfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfdc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d101      	bne.n	800dff4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dff0:	2303      	movs	r3, #3
 800dff2:	e0bf      	b.n	800e174 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d050      	beq.n	800e0a2 <USBD_CDC_Setup+0xde>
 800e000:	2b20      	cmp	r3, #32
 800e002:	f040 80af 	bne.w	800e164 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	88db      	ldrh	r3, [r3, #6]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d03a      	beq.n	800e084 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	b25b      	sxtb	r3, r3
 800e014:	2b00      	cmp	r3, #0
 800e016:	da1b      	bge.n	800e050 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	33b0      	adds	r3, #176	; 0xb0
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	683a      	ldr	r2, [r7, #0]
 800e02c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e02e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	88d2      	ldrh	r2, [r2, #6]
 800e034:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	88db      	ldrh	r3, [r3, #6]
 800e03a:	2b07      	cmp	r3, #7
 800e03c:	bf28      	it	cs
 800e03e:	2307      	movcs	r3, #7
 800e040:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	89fa      	ldrh	r2, [r7, #14]
 800e046:	4619      	mov	r1, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f001 fd43 	bl	800fad4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e04e:	e090      	b.n	800e172 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	785a      	ldrb	r2, [r3, #1]
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	88db      	ldrh	r3, [r3, #6]
 800e05e:	2b3f      	cmp	r3, #63	; 0x3f
 800e060:	d803      	bhi.n	800e06a <USBD_CDC_Setup+0xa6>
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	88db      	ldrh	r3, [r3, #6]
 800e066:	b2da      	uxtb	r2, r3
 800e068:	e000      	b.n	800e06c <USBD_CDC_Setup+0xa8>
 800e06a:	2240      	movs	r2, #64	; 0x40
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e072:	6939      	ldr	r1, [r7, #16]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e07a:	461a      	mov	r2, r3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f001 fd55 	bl	800fb2c <USBD_CtlPrepareRx>
      break;
 800e082:	e076      	b.n	800e172 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	33b0      	adds	r3, #176	; 0xb0
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	7850      	ldrb	r0, [r2, #1]
 800e09a:	2200      	movs	r2, #0
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	4798      	blx	r3
      break;
 800e0a0:	e067      	b.n	800e172 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	785b      	ldrb	r3, [r3, #1]
 800e0a6:	2b0b      	cmp	r3, #11
 800e0a8:	d851      	bhi.n	800e14e <USBD_CDC_Setup+0x18a>
 800e0aa:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <USBD_CDC_Setup+0xec>)
 800e0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b0:	0800e0e1 	.word	0x0800e0e1
 800e0b4:	0800e15d 	.word	0x0800e15d
 800e0b8:	0800e14f 	.word	0x0800e14f
 800e0bc:	0800e14f 	.word	0x0800e14f
 800e0c0:	0800e14f 	.word	0x0800e14f
 800e0c4:	0800e14f 	.word	0x0800e14f
 800e0c8:	0800e14f 	.word	0x0800e14f
 800e0cc:	0800e14f 	.word	0x0800e14f
 800e0d0:	0800e14f 	.word	0x0800e14f
 800e0d4:	0800e14f 	.word	0x0800e14f
 800e0d8:	0800e10b 	.word	0x0800e10b
 800e0dc:	0800e135 	.word	0x0800e135
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d107      	bne.n	800e0fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e0ec:	f107 030a 	add.w	r3, r7, #10
 800e0f0:	2202      	movs	r2, #2
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f001 fced 	bl	800fad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e0fa:	e032      	b.n	800e162 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f001 fc77 	bl	800f9f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e104:	2303      	movs	r3, #3
 800e106:	75fb      	strb	r3, [r7, #23]
          break;
 800e108:	e02b      	b.n	800e162 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e110:	b2db      	uxtb	r3, r3
 800e112:	2b03      	cmp	r3, #3
 800e114:	d107      	bne.n	800e126 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e116:	f107 030d 	add.w	r3, r7, #13
 800e11a:	2201      	movs	r2, #1
 800e11c:	4619      	mov	r1, r3
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f001 fcd8 	bl	800fad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e124:	e01d      	b.n	800e162 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f001 fc62 	bl	800f9f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e12e:	2303      	movs	r3, #3
 800e130:	75fb      	strb	r3, [r7, #23]
          break;
 800e132:	e016      	b.n	800e162 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b03      	cmp	r3, #3
 800e13e:	d00f      	beq.n	800e160 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f001 fc55 	bl	800f9f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e148:	2303      	movs	r3, #3
 800e14a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e14c:	e008      	b.n	800e160 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e14e:	6839      	ldr	r1, [r7, #0]
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f001 fc4e 	bl	800f9f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800e156:	2303      	movs	r3, #3
 800e158:	75fb      	strb	r3, [r7, #23]
          break;
 800e15a:	e002      	b.n	800e162 <USBD_CDC_Setup+0x19e>
          break;
 800e15c:	bf00      	nop
 800e15e:	e008      	b.n	800e172 <USBD_CDC_Setup+0x1ae>
          break;
 800e160:	bf00      	nop
      }
      break;
 800e162:	e006      	b.n	800e172 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e164:	6839      	ldr	r1, [r7, #0]
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f001 fc43 	bl	800f9f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800e16c:	2303      	movs	r3, #3
 800e16e:	75fb      	strb	r3, [r7, #23]
      break;
 800e170:	bf00      	nop
  }

  return (uint8_t)ret;
 800e172:	7dfb      	ldrb	r3, [r7, #23]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3718      	adds	r7, #24
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e18e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	32b0      	adds	r2, #176	; 0xb0
 800e19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	e065      	b.n	800e272 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	32b0      	adds	r2, #176	; 0xb0
 800e1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e1b6:	78fb      	ldrb	r3, [r7, #3]
 800e1b8:	f003 020f 	and.w	r2, r3, #15
 800e1bc:	6879      	ldr	r1, [r7, #4]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	440b      	add	r3, r1
 800e1c8:	3318      	adds	r3, #24
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d02f      	beq.n	800e230 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e1d0:	78fb      	ldrb	r3, [r7, #3]
 800e1d2:	f003 020f 	and.w	r2, r3, #15
 800e1d6:	6879      	ldr	r1, [r7, #4]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	440b      	add	r3, r1
 800e1e2:	3318      	adds	r3, #24
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	78fb      	ldrb	r3, [r7, #3]
 800e1e8:	f003 010f 	and.w	r1, r3, #15
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	00db      	lsls	r3, r3, #3
 800e1f2:	440b      	add	r3, r1
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	4403      	add	r3, r0
 800e1f8:	3348      	adds	r3, #72	; 0x48
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e200:	fb01 f303 	mul.w	r3, r1, r3
 800e204:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e206:	2b00      	cmp	r3, #0
 800e208:	d112      	bne.n	800e230 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e20a:	78fb      	ldrb	r3, [r7, #3]
 800e20c:	f003 020f 	and.w	r2, r3, #15
 800e210:	6879      	ldr	r1, [r7, #4]
 800e212:	4613      	mov	r3, r2
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	440b      	add	r3, r1
 800e21c:	3318      	adds	r3, #24
 800e21e:	2200      	movs	r2, #0
 800e220:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e222:	78f9      	ldrb	r1, [r7, #3]
 800e224:	2300      	movs	r3, #0
 800e226:	2200      	movs	r2, #0
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f005 fdb2 	bl	8013d92 <USBD_LL_Transmit>
 800e22e:	e01f      	b.n	800e270 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	2200      	movs	r2, #0
 800e234:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	33b0      	adds	r3, #176	; 0xb0
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4413      	add	r3, r2
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d010      	beq.n	800e270 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	33b0      	adds	r3, #176	; 0xb0
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	4413      	add	r3, r2
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	691b      	ldr	r3, [r3, #16]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e26c:	78fa      	ldrb	r2, [r7, #3]
 800e26e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e270:	2300      	movs	r3, #0
}
 800e272:	4618      	mov	r0, r3
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b084      	sub	sp, #16
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	460b      	mov	r3, r1
 800e284:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	32b0      	adds	r2, #176	; 0xb0
 800e290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e294:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	32b0      	adds	r2, #176	; 0xb0
 800e2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d101      	bne.n	800e2ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	e01a      	b.n	800e2e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e2ac:	78fb      	ldrb	r3, [r7, #3]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f005 fdb0 	bl	8013e16 <USBD_LL_GetRxDataSize>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	33b0      	adds	r3, #176	; 0xb0
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e2dc:	4611      	mov	r1, r2
 800e2de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e2e0:	2300      	movs	r3, #0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b084      	sub	sp, #16
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	32b0      	adds	r2, #176	; 0xb0
 800e2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e300:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d101      	bne.n	800e30c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e308:	2303      	movs	r3, #3
 800e30a:	e025      	b.n	800e358 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	33b0      	adds	r3, #176	; 0xb0
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4413      	add	r3, r2
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01a      	beq.n	800e356 <USBD_CDC_EP0_RxReady+0x6c>
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e326:	2bff      	cmp	r3, #255	; 0xff
 800e328:	d015      	beq.n	800e356 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	33b0      	adds	r3, #176	; 0xb0
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e342:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e34a:	b292      	uxth	r2, r2
 800e34c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	22ff      	movs	r2, #255	; 0xff
 800e352:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b086      	sub	sp, #24
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e368:	2182      	movs	r1, #130	; 0x82
 800e36a:	4818      	ldr	r0, [pc, #96]	; (800e3cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e36c:	f000 fd09 	bl	800ed82 <USBD_GetEpDesc>
 800e370:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e372:	2101      	movs	r1, #1
 800e374:	4815      	ldr	r0, [pc, #84]	; (800e3cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e376:	f000 fd04 	bl	800ed82 <USBD_GetEpDesc>
 800e37a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e37c:	2181      	movs	r1, #129	; 0x81
 800e37e:	4813      	ldr	r0, [pc, #76]	; (800e3cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e380:	f000 fcff 	bl	800ed82 <USBD_GetEpDesc>
 800e384:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d002      	beq.n	800e392 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	2210      	movs	r2, #16
 800e390:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d006      	beq.n	800e3a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3a0:	711a      	strb	r2, [r3, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d006      	beq.n	800e3ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3b4:	711a      	strb	r2, [r3, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2243      	movs	r2, #67	; 0x43
 800e3be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e3c0:	4b02      	ldr	r3, [pc, #8]	; (800e3cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	2000030c 	.word	0x2000030c

0800e3d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e3d8:	2182      	movs	r1, #130	; 0x82
 800e3da:	4818      	ldr	r0, [pc, #96]	; (800e43c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3dc:	f000 fcd1 	bl	800ed82 <USBD_GetEpDesc>
 800e3e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e3e2:	2101      	movs	r1, #1
 800e3e4:	4815      	ldr	r0, [pc, #84]	; (800e43c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3e6:	f000 fccc 	bl	800ed82 <USBD_GetEpDesc>
 800e3ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e3ec:	2181      	movs	r1, #129	; 0x81
 800e3ee:	4813      	ldr	r0, [pc, #76]	; (800e43c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e3f0:	f000 fcc7 	bl	800ed82 <USBD_GetEpDesc>
 800e3f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2210      	movs	r2, #16
 800e400:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d006      	beq.n	800e416 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	2200      	movs	r2, #0
 800e40c:	711a      	strb	r2, [r3, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	f042 0202 	orr.w	r2, r2, #2
 800e414:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d006      	beq.n	800e42a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	711a      	strb	r2, [r3, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	f042 0202 	orr.w	r2, r2, #2
 800e428:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2243      	movs	r2, #67	; 0x43
 800e42e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e430:	4b02      	ldr	r3, [pc, #8]	; (800e43c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	2000030c 	.word	0x2000030c

0800e440 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e448:	2182      	movs	r1, #130	; 0x82
 800e44a:	4818      	ldr	r0, [pc, #96]	; (800e4ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e44c:	f000 fc99 	bl	800ed82 <USBD_GetEpDesc>
 800e450:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e452:	2101      	movs	r1, #1
 800e454:	4815      	ldr	r0, [pc, #84]	; (800e4ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e456:	f000 fc94 	bl	800ed82 <USBD_GetEpDesc>
 800e45a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e45c:	2181      	movs	r1, #129	; 0x81
 800e45e:	4813      	ldr	r0, [pc, #76]	; (800e4ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e460:	f000 fc8f 	bl	800ed82 <USBD_GetEpDesc>
 800e464:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	2210      	movs	r2, #16
 800e470:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d006      	beq.n	800e486 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	2200      	movs	r2, #0
 800e47c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e480:	711a      	strb	r2, [r3, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d006      	beq.n	800e49a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2200      	movs	r2, #0
 800e490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e494:	711a      	strb	r2, [r3, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2243      	movs	r2, #67	; 0x43
 800e49e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e4a0:	4b02      	ldr	r3, [pc, #8]	; (800e4ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3718      	adds	r7, #24
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	2000030c 	.word	0x2000030c

0800e4b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	220a      	movs	r2, #10
 800e4bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e4be:	4b03      	ldr	r3, [pc, #12]	; (800e4cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	200002c8 	.word	0x200002c8

0800e4d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d101      	bne.n	800e4e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	e009      	b.n	800e4f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	33b0      	adds	r3, #176	; 0xb0
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4413      	add	r3, r2
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e504:	b480      	push	{r7}
 800e506:	b087      	sub	sp, #28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	32b0      	adds	r2, #176	; 0xb0
 800e51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e51e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d101      	bne.n	800e52a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e526:	2303      	movs	r3, #3
 800e528:	e008      	b.n	800e53c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	371c      	adds	r7, #28
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	32b0      	adds	r2, #176	; 0xb0
 800e55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e560:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d101      	bne.n	800e56c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e568:	2303      	movs	r3, #3
 800e56a:	e004      	b.n	800e576 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3714      	adds	r7, #20
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
	...

0800e584 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	32b0      	adds	r2, #176	; 0xb0
 800e596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e59a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	32b0      	adds	r2, #176	; 0xb0
 800e5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d101      	bne.n	800e5b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e5ae:	2303      	movs	r3, #3
 800e5b0:	e018      	b.n	800e5e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	7c1b      	ldrb	r3, [r3, #16]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d10a      	bne.n	800e5d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5ba:	4b0c      	ldr	r3, [pc, #48]	; (800e5ec <USBD_CDC_ReceivePacket+0x68>)
 800e5bc:	7819      	ldrb	r1, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f005 fc03 	bl	8013dd4 <USBD_LL_PrepareReceive>
 800e5ce:	e008      	b.n	800e5e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5d0:	4b06      	ldr	r3, [pc, #24]	; (800e5ec <USBD_CDC_ReceivePacket+0x68>)
 800e5d2:	7819      	ldrb	r1, [r3, #0]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5da:	2340      	movs	r3, #64	; 0x40
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f005 fbf9 	bl	8013dd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	20000350 	.word	0x20000350

0800e5f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d101      	bne.n	800e608 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e604:	2303      	movs	r3, #3
 800e606:	e01f      	b.n	800e648 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	79fa      	ldrb	r2, [r7, #7]
 800e63a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f005 fa73 	bl	8013b28 <USBD_LL_Init>
 800e642:	4603      	mov	r3, r0
 800e644:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e646:	7dfb      	ldrb	r3, [r7, #23]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3718      	adds	r7, #24
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e65a:	2300      	movs	r3, #0
 800e65c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e664:	2303      	movs	r3, #3
 800e666:	e025      	b.n	800e6b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	32ae      	adds	r2, #174	; 0xae
 800e67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00f      	beq.n	800e6a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	32ae      	adds	r2, #174	; 0xae
 800e68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e694:	f107 020e 	add.w	r2, r7, #14
 800e698:	4610      	mov	r0, r2
 800e69a:	4798      	blx	r3
 800e69c:	4602      	mov	r2, r0
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e6aa:	1c5a      	adds	r2, r3, #1
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f005 fa7b 	bl	8013bc0 <USBD_LL_Start>
 800e6ca:	4603      	mov	r3, r0
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b084      	sub	sp, #16
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e700:	2b00      	cmp	r3, #0
 800e702:	d009      	beq.n	800e718 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	78fa      	ldrb	r2, [r7, #3]
 800e70e:	4611      	mov	r1, r2
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	4798      	blx	r3
 800e714:	4603      	mov	r3, r0
 800e716:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e718:	7bfb      	ldrb	r3, [r7, #15]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b084      	sub	sp, #16
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	460b      	mov	r3, r1
 800e72c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	78fa      	ldrb	r2, [r7, #3]
 800e73c:	4611      	mov	r1, r2
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	4798      	blx	r3
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d001      	beq.n	800e74c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e748:	2303      	movs	r3, #3
 800e74a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b084      	sub	sp, #16
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	4618      	mov	r0, r3
 800e76a:	f001 f908 	bl	800f97e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e77c:	461a      	mov	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e78a:	f003 031f 	and.w	r3, r3, #31
 800e78e:	2b02      	cmp	r3, #2
 800e790:	d01a      	beq.n	800e7c8 <USBD_LL_SetupStage+0x72>
 800e792:	2b02      	cmp	r3, #2
 800e794:	d822      	bhi.n	800e7dc <USBD_LL_SetupStage+0x86>
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <USBD_LL_SetupStage+0x4a>
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d00a      	beq.n	800e7b4 <USBD_LL_SetupStage+0x5e>
 800e79e:	e01d      	b.n	800e7dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fb5f 	bl	800ee6c <USBD_StdDevReq>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800e7b2:	e020      	b.n	800e7f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 fbc7 	bl	800ef50 <USBD_StdItfReq>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7c6:	e016      	b.n	800e7f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fc29 	bl	800f028 <USBD_StdEPReq>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800e7da:	e00c      	b.n	800e7f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f005 fa48 	bl	8013c80 <USBD_LL_StallEP>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7f4:	bf00      	nop
  }

  return ret;
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	460b      	mov	r3, r1
 800e80a:	607a      	str	r2, [r7, #4]
 800e80c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e80e:	2300      	movs	r3, #0
 800e810:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e812:	7afb      	ldrb	r3, [r7, #11]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d16e      	bne.n	800e8f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e81e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e826:	2b03      	cmp	r3, #3
 800e828:	f040 8098 	bne.w	800e95c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	689a      	ldr	r2, [r3, #8]
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	429a      	cmp	r2, r3
 800e836:	d913      	bls.n	800e860 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	689a      	ldr	r2, [r3, #8]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	1ad2      	subs	r2, r2, r3
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	68da      	ldr	r2, [r3, #12]
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	4293      	cmp	r3, r2
 800e850:	bf28      	it	cs
 800e852:	4613      	movcs	r3, r2
 800e854:	461a      	mov	r2, r3
 800e856:	6879      	ldr	r1, [r7, #4]
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f001 f984 	bl	800fb66 <USBD_CtlContinueRx>
 800e85e:	e07d      	b.n	800e95c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e866:	f003 031f 	and.w	r3, r3, #31
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d014      	beq.n	800e898 <USBD_LL_DataOutStage+0x98>
 800e86e:	2b02      	cmp	r3, #2
 800e870:	d81d      	bhi.n	800e8ae <USBD_LL_DataOutStage+0xae>
 800e872:	2b00      	cmp	r3, #0
 800e874:	d002      	beq.n	800e87c <USBD_LL_DataOutStage+0x7c>
 800e876:	2b01      	cmp	r3, #1
 800e878:	d003      	beq.n	800e882 <USBD_LL_DataOutStage+0x82>
 800e87a:	e018      	b.n	800e8ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e87c:	2300      	movs	r3, #0
 800e87e:	75bb      	strb	r3, [r7, #22]
            break;
 800e880:	e018      	b.n	800e8b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	4619      	mov	r1, r3
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	f000 fa5e 	bl	800ed4e <USBD_CoreFindIF>
 800e892:	4603      	mov	r3, r0
 800e894:	75bb      	strb	r3, [r7, #22]
            break;
 800e896:	e00d      	b.n	800e8b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f000 fa60 	bl	800ed68 <USBD_CoreFindEP>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	75bb      	strb	r3, [r7, #22]
            break;
 800e8ac:	e002      	b.n	800e8b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	75bb      	strb	r3, [r7, #22]
            break;
 800e8b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e8b4:	7dbb      	ldrb	r3, [r7, #22]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d119      	bne.n	800e8ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d113      	bne.n	800e8ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e8c6:	7dba      	ldrb	r2, [r7, #22]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	32ae      	adds	r2, #174	; 0xae
 800e8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00b      	beq.n	800e8ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e8d6:	7dba      	ldrb	r2, [r7, #22]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e8de:	7dba      	ldrb	r2, [r7, #22]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	32ae      	adds	r2, #174	; 0xae
 800e8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8e8:	691b      	ldr	r3, [r3, #16]
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f001 f94a 	bl	800fb88 <USBD_CtlSendStatus>
 800e8f4:	e032      	b.n	800e95c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e8f6:	7afb      	ldrb	r3, [r7, #11]
 800e8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	4619      	mov	r1, r3
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f000 fa31 	bl	800ed68 <USBD_CoreFindEP>
 800e906:	4603      	mov	r3, r0
 800e908:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e90a:	7dbb      	ldrb	r3, [r7, #22]
 800e90c:	2bff      	cmp	r3, #255	; 0xff
 800e90e:	d025      	beq.n	800e95c <USBD_LL_DataOutStage+0x15c>
 800e910:	7dbb      	ldrb	r3, [r7, #22]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d122      	bne.n	800e95c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b03      	cmp	r3, #3
 800e920:	d117      	bne.n	800e952 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e922:	7dba      	ldrb	r2, [r7, #22]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	32ae      	adds	r2, #174	; 0xae
 800e928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00f      	beq.n	800e952 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e932:	7dba      	ldrb	r2, [r7, #22]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e93a:	7dba      	ldrb	r2, [r7, #22]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	32ae      	adds	r2, #174	; 0xae
 800e940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e944:	699b      	ldr	r3, [r3, #24]
 800e946:	7afa      	ldrb	r2, [r7, #11]
 800e948:	4611      	mov	r1, r2
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	4798      	blx	r3
 800e94e:	4603      	mov	r3, r0
 800e950:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e952:	7dfb      	ldrb	r3, [r7, #23]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d001      	beq.n	800e95c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e958:	7dfb      	ldrb	r3, [r7, #23]
 800e95a:	e000      	b.n	800e95e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b086      	sub	sp, #24
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	60f8      	str	r0, [r7, #12]
 800e96e:	460b      	mov	r3, r1
 800e970:	607a      	str	r2, [r7, #4]
 800e972:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e974:	7afb      	ldrb	r3, [r7, #11]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d16f      	bne.n	800ea5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	3314      	adds	r3, #20
 800e97e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e986:	2b02      	cmp	r3, #2
 800e988:	d15a      	bne.n	800ea40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	689a      	ldr	r2, [r3, #8]
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	429a      	cmp	r2, r3
 800e994:	d914      	bls.n	800e9c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	689a      	ldr	r2, [r3, #8]
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	1ad2      	subs	r2, r2, r3
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	6879      	ldr	r1, [r7, #4]
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f001 f8ac 	bl	800fb0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f005 fa0b 	bl	8013dd4 <USBD_LL_PrepareReceive>
 800e9be:	e03f      	b.n	800ea40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	68da      	ldr	r2, [r3, #12]
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d11c      	bne.n	800ea06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d316      	bcc.n	800ea06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d20f      	bcs.n	800ea06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f001 f88d 	bl	800fb0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f005 f9e8 	bl	8013dd4 <USBD_LL_PrepareReceive>
 800ea04:	e01c      	b.n	800ea40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	2b03      	cmp	r3, #3
 800ea10:	d10f      	bne.n	800ea32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d009      	beq.n	800ea32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea32:	2180      	movs	r1, #128	; 0x80
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f005 f923 	bl	8013c80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f001 f8b7 	bl	800fbae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d03a      	beq.n	800eac0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f7ff fe42 	bl	800e6d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea58:	e032      	b.n	800eac0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ea5a:	7afb      	ldrb	r3, [r7, #11]
 800ea5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	4619      	mov	r1, r3
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f000 f97f 	bl	800ed68 <USBD_CoreFindEP>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea6e:	7dfb      	ldrb	r3, [r7, #23]
 800ea70:	2bff      	cmp	r3, #255	; 0xff
 800ea72:	d025      	beq.n	800eac0 <USBD_LL_DataInStage+0x15a>
 800ea74:	7dfb      	ldrb	r3, [r7, #23]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d122      	bne.n	800eac0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d11c      	bne.n	800eac0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ea86:	7dfa      	ldrb	r2, [r7, #23]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	32ae      	adds	r2, #174	; 0xae
 800ea8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea90:	695b      	ldr	r3, [r3, #20]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d014      	beq.n	800eac0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ea96:	7dfa      	ldrb	r2, [r7, #23]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ea9e:	7dfa      	ldrb	r2, [r7, #23]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	32ae      	adds	r2, #174	; 0xae
 800eaa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa8:	695b      	ldr	r3, [r3, #20]
 800eaaa:	7afa      	ldrb	r2, [r7, #11]
 800eaac:	4611      	mov	r1, r2
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	4798      	blx	r3
 800eab2:	4603      	mov	r3, r0
 800eab4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800eab6:	7dbb      	ldrb	r3, [r7, #22]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d001      	beq.n	800eac0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800eabc:	7dbb      	ldrb	r3, [r7, #22]
 800eabe:	e000      	b.n	800eac2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3718      	adds	r7, #24
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ead2:	2300      	movs	r3, #0
 800ead4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2201      	movs	r2, #1
 800eada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d014      	beq.n	800eb30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00e      	beq.n	800eb30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	6852      	ldr	r2, [r2, #4]
 800eb1e:	b2d2      	uxtb	r2, r2
 800eb20:	4611      	mov	r1, r2
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	4798      	blx	r3
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eb2c:	2303      	movs	r3, #3
 800eb2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb30:	2340      	movs	r3, #64	; 0x40
 800eb32:	2200      	movs	r2, #0
 800eb34:	2100      	movs	r1, #0
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f005 f85d 	bl	8013bf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2240      	movs	r2, #64	; 0x40
 800eb48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb4c:	2340      	movs	r3, #64	; 0x40
 800eb4e:	2200      	movs	r2, #0
 800eb50:	2180      	movs	r1, #128	; 0x80
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f005 f84f 	bl	8013bf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2240      	movs	r2, #64	; 0x40
 800eb62:	621a      	str	r2, [r3, #32]

  return ret;
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	460b      	mov	r3, r1
 800eb78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	78fa      	ldrb	r2, [r7, #3]
 800eb7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b083      	sub	sp, #12
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb9c:	b2da      	uxtb	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2204      	movs	r2, #4
 800eba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ebac:	2300      	movs	r3, #0
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	370c      	adds	r7, #12
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr

0800ebba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ebba:	b480      	push	{r7}
 800ebbc:	b083      	sub	sp, #12
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	2b04      	cmp	r3, #4
 800ebcc:	d106      	bne.n	800ebdc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	370c      	adds	r7, #12
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr

0800ebea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b082      	sub	sp, #8
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d110      	bne.n	800ec20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00b      	beq.n	800ec20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec0e:	69db      	ldr	r3, [r3, #28]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d005      	beq.n	800ec20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3708      	adds	r7, #8
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b082      	sub	sp, #8
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
 800ec32:	460b      	mov	r3, r1
 800ec34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	32ae      	adds	r2, #174	; 0xae
 800ec40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d101      	bne.n	800ec4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ec48:	2303      	movs	r3, #3
 800ec4a:	e01c      	b.n	800ec86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	d115      	bne.n	800ec84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	32ae      	adds	r2, #174	; 0xae
 800ec62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec66:	6a1b      	ldr	r3, [r3, #32]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00b      	beq.n	800ec84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	32ae      	adds	r2, #174	; 0xae
 800ec76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec7a:	6a1b      	ldr	r3, [r3, #32]
 800ec7c:	78fa      	ldrb	r2, [r7, #3]
 800ec7e:	4611      	mov	r1, r2
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b082      	sub	sp, #8
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	460b      	mov	r3, r1
 800ec98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	32ae      	adds	r2, #174	; 0xae
 800eca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d101      	bne.n	800ecb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e01c      	b.n	800ecea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	2b03      	cmp	r3, #3
 800ecba:	d115      	bne.n	800ece8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	32ae      	adds	r2, #174	; 0xae
 800ecc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00b      	beq.n	800ece8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	32ae      	adds	r2, #174	; 0xae
 800ecda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece0:	78fa      	ldrb	r2, [r7, #3]
 800ece2:	4611      	mov	r1, r2
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3708      	adds	r7, #8
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ecf2:	b480      	push	{r7}
 800ecf4:	b083      	sub	sp, #12
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00e      	beq.n	800ed44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	6852      	ldr	r2, [r2, #4]
 800ed32:	b2d2      	uxtb	r2, r2
 800ed34:	4611      	mov	r1, r2
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	4798      	blx	r3
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d001      	beq.n	800ed44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ed40:	2303      	movs	r3, #3
 800ed42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed4e:	b480      	push	{r7}
 800ed50:	b083      	sub	sp, #12
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	460b      	mov	r3, r1
 800ed58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	460b      	mov	r3, r1
 800ed72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ed74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr

0800ed82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b086      	sub	sp, #24
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ed96:	2300      	movs	r3, #0
 800ed98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	885b      	ldrh	r3, [r3, #2]
 800ed9e:	b29a      	uxth	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d920      	bls.n	800edec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	b29b      	uxth	r3, r3
 800edb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800edb2:	e013      	b.n	800eddc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800edb4:	f107 030a 	add.w	r3, r7, #10
 800edb8:	4619      	mov	r1, r3
 800edba:	6978      	ldr	r0, [r7, #20]
 800edbc:	f000 f81b 	bl	800edf6 <USBD_GetNextDesc>
 800edc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	785b      	ldrb	r3, [r3, #1]
 800edc6:	2b05      	cmp	r3, #5
 800edc8:	d108      	bne.n	800eddc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	789b      	ldrb	r3, [r3, #2]
 800edd2:	78fa      	ldrb	r2, [r7, #3]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d008      	beq.n	800edea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800edd8:	2300      	movs	r3, #0
 800edda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	885b      	ldrh	r3, [r3, #2]
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	897b      	ldrh	r3, [r7, #10]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d8e5      	bhi.n	800edb4 <USBD_GetEpDesc+0x32>
 800ede8:	e000      	b.n	800edec <USBD_GetEpDesc+0x6a>
          break;
 800edea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800edec:	693b      	ldr	r3, [r7, #16]
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3718      	adds	r7, #24
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800edf6:	b480      	push	{r7}
 800edf8:	b085      	sub	sp, #20
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	881a      	ldrh	r2, [r3, #0]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	4413      	add	r3, r2
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4413      	add	r3, r2
 800ee20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ee22:	68fb      	ldr	r3, [r7, #12]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3714      	adds	r7, #20
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b087      	sub	sp, #28
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	3301      	adds	r3, #1
 800ee46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ee4e:	8a3b      	ldrh	r3, [r7, #16]
 800ee50:	021b      	lsls	r3, r3, #8
 800ee52:	b21a      	sxth	r2, r3
 800ee54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	b21b      	sxth	r3, r3
 800ee5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ee5e:	89fb      	ldrh	r3, [r7, #14]
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	371c      	adds	r7, #28
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee76:	2300      	movs	r3, #0
 800ee78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee82:	2b40      	cmp	r3, #64	; 0x40
 800ee84:	d005      	beq.n	800ee92 <USBD_StdDevReq+0x26>
 800ee86:	2b40      	cmp	r3, #64	; 0x40
 800ee88:	d857      	bhi.n	800ef3a <USBD_StdDevReq+0xce>
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00f      	beq.n	800eeae <USBD_StdDevReq+0x42>
 800ee8e:	2b20      	cmp	r3, #32
 800ee90:	d153      	bne.n	800ef3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	32ae      	adds	r2, #174	; 0xae
 800ee9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	6839      	ldr	r1, [r7, #0]
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	4798      	blx	r3
 800eea8:	4603      	mov	r3, r0
 800eeaa:	73fb      	strb	r3, [r7, #15]
      break;
 800eeac:	e04a      	b.n	800ef44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	785b      	ldrb	r3, [r3, #1]
 800eeb2:	2b09      	cmp	r3, #9
 800eeb4:	d83b      	bhi.n	800ef2e <USBD_StdDevReq+0xc2>
 800eeb6:	a201      	add	r2, pc, #4	; (adr r2, 800eebc <USBD_StdDevReq+0x50>)
 800eeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eebc:	0800ef11 	.word	0x0800ef11
 800eec0:	0800ef25 	.word	0x0800ef25
 800eec4:	0800ef2f 	.word	0x0800ef2f
 800eec8:	0800ef1b 	.word	0x0800ef1b
 800eecc:	0800ef2f 	.word	0x0800ef2f
 800eed0:	0800eeef 	.word	0x0800eeef
 800eed4:	0800eee5 	.word	0x0800eee5
 800eed8:	0800ef2f 	.word	0x0800ef2f
 800eedc:	0800ef07 	.word	0x0800ef07
 800eee0:	0800eef9 	.word	0x0800eef9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eee4:	6839      	ldr	r1, [r7, #0]
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 fa3c 	bl	800f364 <USBD_GetDescriptor>
          break;
 800eeec:	e024      	b.n	800ef38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eeee:	6839      	ldr	r1, [r7, #0]
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 fba1 	bl	800f638 <USBD_SetAddress>
          break;
 800eef6:	e01f      	b.n	800ef38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eef8:	6839      	ldr	r1, [r7, #0]
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 fbe0 	bl	800f6c0 <USBD_SetConfig>
 800ef00:	4603      	mov	r3, r0
 800ef02:	73fb      	strb	r3, [r7, #15]
          break;
 800ef04:	e018      	b.n	800ef38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ef06:	6839      	ldr	r1, [r7, #0]
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 fc83 	bl	800f814 <USBD_GetConfig>
          break;
 800ef0e:	e013      	b.n	800ef38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ef10:	6839      	ldr	r1, [r7, #0]
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 fcb4 	bl	800f880 <USBD_GetStatus>
          break;
 800ef18:	e00e      	b.n	800ef38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 fce3 	bl	800f8e8 <USBD_SetFeature>
          break;
 800ef22:	e009      	b.n	800ef38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ef24:	6839      	ldr	r1, [r7, #0]
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 fd07 	bl	800f93a <USBD_ClrFeature>
          break;
 800ef2c:	e004      	b.n	800ef38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fd5e 	bl	800f9f2 <USBD_CtlError>
          break;
 800ef36:	bf00      	nop
      }
      break;
 800ef38:	e004      	b.n	800ef44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ef3a:	6839      	ldr	r1, [r7, #0]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 fd58 	bl	800f9f2 <USBD_CtlError>
      break;
 800ef42:	bf00      	nop
  }

  return ret;
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop

0800ef50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef66:	2b40      	cmp	r3, #64	; 0x40
 800ef68:	d005      	beq.n	800ef76 <USBD_StdItfReq+0x26>
 800ef6a:	2b40      	cmp	r3, #64	; 0x40
 800ef6c:	d852      	bhi.n	800f014 <USBD_StdItfReq+0xc4>
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <USBD_StdItfReq+0x26>
 800ef72:	2b20      	cmp	r3, #32
 800ef74:	d14e      	bne.n	800f014 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d840      	bhi.n	800f006 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	889b      	ldrh	r3, [r3, #4]
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d836      	bhi.n	800effc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	889b      	ldrh	r3, [r3, #4]
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	4619      	mov	r1, r3
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7ff fed9 	bl	800ed4e <USBD_CoreFindIF>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800efa0:	7bbb      	ldrb	r3, [r7, #14]
 800efa2:	2bff      	cmp	r3, #255	; 0xff
 800efa4:	d01d      	beq.n	800efe2 <USBD_StdItfReq+0x92>
 800efa6:	7bbb      	ldrb	r3, [r7, #14]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d11a      	bne.n	800efe2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800efac:	7bba      	ldrb	r2, [r7, #14]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	32ae      	adds	r2, #174	; 0xae
 800efb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d00f      	beq.n	800efdc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800efbc:	7bba      	ldrb	r2, [r7, #14]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800efc4:	7bba      	ldrb	r2, [r7, #14]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	32ae      	adds	r2, #174	; 0xae
 800efca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	4798      	blx	r3
 800efd6:	4603      	mov	r3, r0
 800efd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800efda:	e004      	b.n	800efe6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800efdc:	2303      	movs	r3, #3
 800efde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800efe0:	e001      	b.n	800efe6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800efe2:	2303      	movs	r3, #3
 800efe4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	88db      	ldrh	r3, [r3, #6]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d110      	bne.n	800f010 <USBD_StdItfReq+0xc0>
 800efee:	7bfb      	ldrb	r3, [r7, #15]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d10d      	bne.n	800f010 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f000 fdc7 	bl	800fb88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800effa:	e009      	b.n	800f010 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800effc:	6839      	ldr	r1, [r7, #0]
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 fcf7 	bl	800f9f2 <USBD_CtlError>
          break;
 800f004:	e004      	b.n	800f010 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f006:	6839      	ldr	r1, [r7, #0]
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 fcf2 	bl	800f9f2 <USBD_CtlError>
          break;
 800f00e:	e000      	b.n	800f012 <USBD_StdItfReq+0xc2>
          break;
 800f010:	bf00      	nop
      }
      break;
 800f012:	e004      	b.n	800f01e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f014:	6839      	ldr	r1, [r7, #0]
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 fceb 	bl	800f9f2 <USBD_CtlError>
      break;
 800f01c:	bf00      	nop
  }

  return ret;
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f020:	4618      	mov	r0, r3
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	889b      	ldrh	r3, [r3, #4]
 800f03a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f044:	2b40      	cmp	r3, #64	; 0x40
 800f046:	d007      	beq.n	800f058 <USBD_StdEPReq+0x30>
 800f048:	2b40      	cmp	r3, #64	; 0x40
 800f04a:	f200 817f 	bhi.w	800f34c <USBD_StdEPReq+0x324>
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d02a      	beq.n	800f0a8 <USBD_StdEPReq+0x80>
 800f052:	2b20      	cmp	r3, #32
 800f054:	f040 817a 	bne.w	800f34c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f058:	7bbb      	ldrb	r3, [r7, #14]
 800f05a:	4619      	mov	r1, r3
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7ff fe83 	bl	800ed68 <USBD_CoreFindEP>
 800f062:	4603      	mov	r3, r0
 800f064:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f066:	7b7b      	ldrb	r3, [r7, #13]
 800f068:	2bff      	cmp	r3, #255	; 0xff
 800f06a:	f000 8174 	beq.w	800f356 <USBD_StdEPReq+0x32e>
 800f06e:	7b7b      	ldrb	r3, [r7, #13]
 800f070:	2b00      	cmp	r3, #0
 800f072:	f040 8170 	bne.w	800f356 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f076:	7b7a      	ldrb	r2, [r7, #13]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f07e:	7b7a      	ldrb	r2, [r7, #13]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	32ae      	adds	r2, #174	; 0xae
 800f084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	f000 8163 	beq.w	800f356 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f090:	7b7a      	ldrb	r2, [r7, #13]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	32ae      	adds	r2, #174	; 0xae
 800f096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	4798      	blx	r3
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f0a6:	e156      	b.n	800f356 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	785b      	ldrb	r3, [r3, #1]
 800f0ac:	2b03      	cmp	r3, #3
 800f0ae:	d008      	beq.n	800f0c2 <USBD_StdEPReq+0x9a>
 800f0b0:	2b03      	cmp	r3, #3
 800f0b2:	f300 8145 	bgt.w	800f340 <USBD_StdEPReq+0x318>
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	f000 809b 	beq.w	800f1f2 <USBD_StdEPReq+0x1ca>
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d03c      	beq.n	800f13a <USBD_StdEPReq+0x112>
 800f0c0:	e13e      	b.n	800f340 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	d002      	beq.n	800f0d4 <USBD_StdEPReq+0xac>
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	d016      	beq.n	800f100 <USBD_StdEPReq+0xd8>
 800f0d2:	e02c      	b.n	800f12e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0d4:	7bbb      	ldrb	r3, [r7, #14]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00d      	beq.n	800f0f6 <USBD_StdEPReq+0xce>
 800f0da:	7bbb      	ldrb	r3, [r7, #14]
 800f0dc:	2b80      	cmp	r3, #128	; 0x80
 800f0de:	d00a      	beq.n	800f0f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0e0:	7bbb      	ldrb	r3, [r7, #14]
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f004 fdcb 	bl	8013c80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0ea:	2180      	movs	r1, #128	; 0x80
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f004 fdc7 	bl	8013c80 <USBD_LL_StallEP>
 800f0f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0f4:	e020      	b.n	800f138 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f0f6:	6839      	ldr	r1, [r7, #0]
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 fc7a 	bl	800f9f2 <USBD_CtlError>
              break;
 800f0fe:	e01b      	b.n	800f138 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	885b      	ldrh	r3, [r3, #2]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d10e      	bne.n	800f126 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f108:	7bbb      	ldrb	r3, [r7, #14]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00b      	beq.n	800f126 <USBD_StdEPReq+0xfe>
 800f10e:	7bbb      	ldrb	r3, [r7, #14]
 800f110:	2b80      	cmp	r3, #128	; 0x80
 800f112:	d008      	beq.n	800f126 <USBD_StdEPReq+0xfe>
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	88db      	ldrh	r3, [r3, #6]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d104      	bne.n	800f126 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f11c:	7bbb      	ldrb	r3, [r7, #14]
 800f11e:	4619      	mov	r1, r3
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f004 fdad 	bl	8013c80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 fd2e 	bl	800fb88 <USBD_CtlSendStatus>

              break;
 800f12c:	e004      	b.n	800f138 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f12e:	6839      	ldr	r1, [r7, #0]
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 fc5e 	bl	800f9f2 <USBD_CtlError>
              break;
 800f136:	bf00      	nop
          }
          break;
 800f138:	e107      	b.n	800f34a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b02      	cmp	r3, #2
 800f144:	d002      	beq.n	800f14c <USBD_StdEPReq+0x124>
 800f146:	2b03      	cmp	r3, #3
 800f148:	d016      	beq.n	800f178 <USBD_StdEPReq+0x150>
 800f14a:	e04b      	b.n	800f1e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f14c:	7bbb      	ldrb	r3, [r7, #14]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00d      	beq.n	800f16e <USBD_StdEPReq+0x146>
 800f152:	7bbb      	ldrb	r3, [r7, #14]
 800f154:	2b80      	cmp	r3, #128	; 0x80
 800f156:	d00a      	beq.n	800f16e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f158:	7bbb      	ldrb	r3, [r7, #14]
 800f15a:	4619      	mov	r1, r3
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f004 fd8f 	bl	8013c80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f162:	2180      	movs	r1, #128	; 0x80
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f004 fd8b 	bl	8013c80 <USBD_LL_StallEP>
 800f16a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f16c:	e040      	b.n	800f1f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f16e:	6839      	ldr	r1, [r7, #0]
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f000 fc3e 	bl	800f9f2 <USBD_CtlError>
              break;
 800f176:	e03b      	b.n	800f1f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	885b      	ldrh	r3, [r3, #2]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d136      	bne.n	800f1ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f180:	7bbb      	ldrb	r3, [r7, #14]
 800f182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f186:	2b00      	cmp	r3, #0
 800f188:	d004      	beq.n	800f194 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f18a:	7bbb      	ldrb	r3, [r7, #14]
 800f18c:	4619      	mov	r1, r3
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f004 fd95 	bl	8013cbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f000 fcf7 	bl	800fb88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f19a:	7bbb      	ldrb	r3, [r7, #14]
 800f19c:	4619      	mov	r1, r3
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f7ff fde2 	bl	800ed68 <USBD_CoreFindEP>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1a8:	7b7b      	ldrb	r3, [r7, #13]
 800f1aa:	2bff      	cmp	r3, #255	; 0xff
 800f1ac:	d01f      	beq.n	800f1ee <USBD_StdEPReq+0x1c6>
 800f1ae:	7b7b      	ldrb	r3, [r7, #13]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d11c      	bne.n	800f1ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f1b4:	7b7a      	ldrb	r2, [r7, #13]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f1bc:	7b7a      	ldrb	r2, [r7, #13]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	32ae      	adds	r2, #174	; 0xae
 800f1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d010      	beq.n	800f1ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1cc:	7b7a      	ldrb	r2, [r7, #13]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	32ae      	adds	r2, #174	; 0xae
 800f1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	4798      	blx	r3
 800f1de:	4603      	mov	r3, r0
 800f1e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f1e2:	e004      	b.n	800f1ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f1e4:	6839      	ldr	r1, [r7, #0]
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 fc03 	bl	800f9f2 <USBD_CtlError>
              break;
 800f1ec:	e000      	b.n	800f1f0 <USBD_StdEPReq+0x1c8>
              break;
 800f1ee:	bf00      	nop
          }
          break;
 800f1f0:	e0ab      	b.n	800f34a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d002      	beq.n	800f204 <USBD_StdEPReq+0x1dc>
 800f1fe:	2b03      	cmp	r3, #3
 800f200:	d032      	beq.n	800f268 <USBD_StdEPReq+0x240>
 800f202:	e097      	b.n	800f334 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f204:	7bbb      	ldrb	r3, [r7, #14]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d007      	beq.n	800f21a <USBD_StdEPReq+0x1f2>
 800f20a:	7bbb      	ldrb	r3, [r7, #14]
 800f20c:	2b80      	cmp	r3, #128	; 0x80
 800f20e:	d004      	beq.n	800f21a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f210:	6839      	ldr	r1, [r7, #0]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fbed 	bl	800f9f2 <USBD_CtlError>
                break;
 800f218:	e091      	b.n	800f33e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f21a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	da0b      	bge.n	800f23a <USBD_StdEPReq+0x212>
 800f222:	7bbb      	ldrb	r3, [r7, #14]
 800f224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f228:	4613      	mov	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	3310      	adds	r3, #16
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	4413      	add	r3, r2
 800f236:	3304      	adds	r3, #4
 800f238:	e00b      	b.n	800f252 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f23a:	7bbb      	ldrb	r3, [r7, #14]
 800f23c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f240:	4613      	mov	r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	4413      	add	r3, r2
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	4413      	add	r3, r2
 800f250:	3304      	adds	r3, #4
 800f252:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	2200      	movs	r2, #0
 800f258:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2202      	movs	r2, #2
 800f25e:	4619      	mov	r1, r3
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 fc37 	bl	800fad4 <USBD_CtlSendData>
              break;
 800f266:	e06a      	b.n	800f33e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	da11      	bge.n	800f294 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f270:	7bbb      	ldrb	r3, [r7, #14]
 800f272:	f003 020f 	and.w	r2, r3, #15
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	4613      	mov	r3, r2
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	4413      	add	r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	440b      	add	r3, r1
 800f282:	3324      	adds	r3, #36	; 0x24
 800f284:	881b      	ldrh	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d117      	bne.n	800f2ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 fbb0 	bl	800f9f2 <USBD_CtlError>
                  break;
 800f292:	e054      	b.n	800f33e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f294:	7bbb      	ldrb	r3, [r7, #14]
 800f296:	f003 020f 	and.w	r2, r3, #15
 800f29a:	6879      	ldr	r1, [r7, #4]
 800f29c:	4613      	mov	r3, r2
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	4413      	add	r3, r2
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	440b      	add	r3, r1
 800f2a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d104      	bne.n	800f2ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fb9d 	bl	800f9f2 <USBD_CtlError>
                  break;
 800f2b8:	e041      	b.n	800f33e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	da0b      	bge.n	800f2da <USBD_StdEPReq+0x2b2>
 800f2c2:	7bbb      	ldrb	r3, [r7, #14]
 800f2c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	3310      	adds	r3, #16
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	e00b      	b.n	800f2f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2da:	7bbb      	ldrb	r3, [r7, #14]
 800f2dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	4413      	add	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	3304      	adds	r3, #4
 800f2f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f2f4:	7bbb      	ldrb	r3, [r7, #14]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d002      	beq.n	800f300 <USBD_StdEPReq+0x2d8>
 800f2fa:	7bbb      	ldrb	r3, [r7, #14]
 800f2fc:	2b80      	cmp	r3, #128	; 0x80
 800f2fe:	d103      	bne.n	800f308 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	2200      	movs	r2, #0
 800f304:	601a      	str	r2, [r3, #0]
 800f306:	e00e      	b.n	800f326 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f308:	7bbb      	ldrb	r3, [r7, #14]
 800f30a:	4619      	mov	r1, r3
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f004 fcf5 	bl	8013cfc <USBD_LL_IsStallEP>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	d003      	beq.n	800f320 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	2201      	movs	r2, #1
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	e002      	b.n	800f326 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	2200      	movs	r2, #0
 800f324:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2202      	movs	r2, #2
 800f32a:	4619      	mov	r1, r3
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 fbd1 	bl	800fad4 <USBD_CtlSendData>
              break;
 800f332:	e004      	b.n	800f33e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fb5b 	bl	800f9f2 <USBD_CtlError>
              break;
 800f33c:	bf00      	nop
          }
          break;
 800f33e:	e004      	b.n	800f34a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f340:	6839      	ldr	r1, [r7, #0]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fb55 	bl	800f9f2 <USBD_CtlError>
          break;
 800f348:	bf00      	nop
      }
      break;
 800f34a:	e005      	b.n	800f358 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f34c:	6839      	ldr	r1, [r7, #0]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fb4f 	bl	800f9f2 <USBD_CtlError>
      break;
 800f354:	e000      	b.n	800f358 <USBD_StdEPReq+0x330>
      break;
 800f356:	bf00      	nop
  }

  return ret;
 800f358:	7bfb      	ldrb	r3, [r7, #15]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f36e:	2300      	movs	r3, #0
 800f370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f372:	2300      	movs	r3, #0
 800f374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f376:	2300      	movs	r3, #0
 800f378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	885b      	ldrh	r3, [r3, #2]
 800f37e:	0a1b      	lsrs	r3, r3, #8
 800f380:	b29b      	uxth	r3, r3
 800f382:	3b01      	subs	r3, #1
 800f384:	2b06      	cmp	r3, #6
 800f386:	f200 8128 	bhi.w	800f5da <USBD_GetDescriptor+0x276>
 800f38a:	a201      	add	r2, pc, #4	; (adr r2, 800f390 <USBD_GetDescriptor+0x2c>)
 800f38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f390:	0800f3ad 	.word	0x0800f3ad
 800f394:	0800f3c5 	.word	0x0800f3c5
 800f398:	0800f405 	.word	0x0800f405
 800f39c:	0800f5db 	.word	0x0800f5db
 800f3a0:	0800f5db 	.word	0x0800f5db
 800f3a4:	0800f57b 	.word	0x0800f57b
 800f3a8:	0800f5a7 	.word	0x0800f5a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	7c12      	ldrb	r2, [r2, #16]
 800f3b8:	f107 0108 	add.w	r1, r7, #8
 800f3bc:	4610      	mov	r0, r2
 800f3be:	4798      	blx	r3
 800f3c0:	60f8      	str	r0, [r7, #12]
      break;
 800f3c2:	e112      	b.n	800f5ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	7c1b      	ldrb	r3, [r3, #16]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10d      	bne.n	800f3e8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d4:	f107 0208 	add.w	r2, r7, #8
 800f3d8:	4610      	mov	r0, r2
 800f3da:	4798      	blx	r3
 800f3dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	2202      	movs	r2, #2
 800f3e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f3e6:	e100      	b.n	800f5ea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f0:	f107 0208 	add.w	r2, r7, #8
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	4798      	blx	r3
 800f3f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	2202      	movs	r2, #2
 800f400:	701a      	strb	r2, [r3, #0]
      break;
 800f402:	e0f2      	b.n	800f5ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	885b      	ldrh	r3, [r3, #2]
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b05      	cmp	r3, #5
 800f40c:	f200 80ac 	bhi.w	800f568 <USBD_GetDescriptor+0x204>
 800f410:	a201      	add	r2, pc, #4	; (adr r2, 800f418 <USBD_GetDescriptor+0xb4>)
 800f412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f416:	bf00      	nop
 800f418:	0800f431 	.word	0x0800f431
 800f41c:	0800f465 	.word	0x0800f465
 800f420:	0800f499 	.word	0x0800f499
 800f424:	0800f4cd 	.word	0x0800f4cd
 800f428:	0800f501 	.word	0x0800f501
 800f42c:	0800f535 	.word	0x0800f535
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00b      	beq.n	800f454 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	7c12      	ldrb	r2, [r2, #16]
 800f448:	f107 0108 	add.w	r1, r7, #8
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
 800f450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f452:	e091      	b.n	800f578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f454:	6839      	ldr	r1, [r7, #0]
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 facb 	bl	800f9f2 <USBD_CtlError>
            err++;
 800f45c:	7afb      	ldrb	r3, [r7, #11]
 800f45e:	3301      	adds	r3, #1
 800f460:	72fb      	strb	r3, [r7, #11]
          break;
 800f462:	e089      	b.n	800f578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00b      	beq.n	800f488 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	7c12      	ldrb	r2, [r2, #16]
 800f47c:	f107 0108 	add.w	r1, r7, #8
 800f480:	4610      	mov	r0, r2
 800f482:	4798      	blx	r3
 800f484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f486:	e077      	b.n	800f578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f488:	6839      	ldr	r1, [r7, #0]
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f000 fab1 	bl	800f9f2 <USBD_CtlError>
            err++;
 800f490:	7afb      	ldrb	r3, [r7, #11]
 800f492:	3301      	adds	r3, #1
 800f494:	72fb      	strb	r3, [r7, #11]
          break;
 800f496:	e06f      	b.n	800f578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d00b      	beq.n	800f4bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	7c12      	ldrb	r2, [r2, #16]
 800f4b0:	f107 0108 	add.w	r1, r7, #8
 800f4b4:	4610      	mov	r0, r2
 800f4b6:	4798      	blx	r3
 800f4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4ba:	e05d      	b.n	800f578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4bc:	6839      	ldr	r1, [r7, #0]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 fa97 	bl	800f9f2 <USBD_CtlError>
            err++;
 800f4c4:	7afb      	ldrb	r3, [r7, #11]
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800f4ca:	e055      	b.n	800f578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4d2:	691b      	ldr	r3, [r3, #16]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00b      	beq.n	800f4f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	7c12      	ldrb	r2, [r2, #16]
 800f4e4:	f107 0108 	add.w	r1, r7, #8
 800f4e8:	4610      	mov	r0, r2
 800f4ea:	4798      	blx	r3
 800f4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4ee:	e043      	b.n	800f578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4f0:	6839      	ldr	r1, [r7, #0]
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 fa7d 	bl	800f9f2 <USBD_CtlError>
            err++;
 800f4f8:	7afb      	ldrb	r3, [r7, #11]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800f4fe:	e03b      	b.n	800f578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f506:	695b      	ldr	r3, [r3, #20]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00b      	beq.n	800f524 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f512:	695b      	ldr	r3, [r3, #20]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	7c12      	ldrb	r2, [r2, #16]
 800f518:	f107 0108 	add.w	r1, r7, #8
 800f51c:	4610      	mov	r0, r2
 800f51e:	4798      	blx	r3
 800f520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f522:	e029      	b.n	800f578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fa63 	bl	800f9f2 <USBD_CtlError>
            err++;
 800f52c:	7afb      	ldrb	r3, [r7, #11]
 800f52e:	3301      	adds	r3, #1
 800f530:	72fb      	strb	r3, [r7, #11]
          break;
 800f532:	e021      	b.n	800f578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f53a:	699b      	ldr	r3, [r3, #24]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00b      	beq.n	800f558 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	7c12      	ldrb	r2, [r2, #16]
 800f54c:	f107 0108 	add.w	r1, r7, #8
 800f550:	4610      	mov	r0, r2
 800f552:	4798      	blx	r3
 800f554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f556:	e00f      	b.n	800f578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 fa49 	bl	800f9f2 <USBD_CtlError>
            err++;
 800f560:	7afb      	ldrb	r3, [r7, #11]
 800f562:	3301      	adds	r3, #1
 800f564:	72fb      	strb	r3, [r7, #11]
          break;
 800f566:	e007      	b.n	800f578 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fa41 	bl	800f9f2 <USBD_CtlError>
          err++;
 800f570:	7afb      	ldrb	r3, [r7, #11]
 800f572:	3301      	adds	r3, #1
 800f574:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f576:	bf00      	nop
      }
      break;
 800f578:	e037      	b.n	800f5ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	7c1b      	ldrb	r3, [r3, #16]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d109      	bne.n	800f596 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f58a:	f107 0208 	add.w	r2, r7, #8
 800f58e:	4610      	mov	r0, r2
 800f590:	4798      	blx	r3
 800f592:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f594:	e029      	b.n	800f5ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f596:	6839      	ldr	r1, [r7, #0]
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 fa2a 	bl	800f9f2 <USBD_CtlError>
        err++;
 800f59e:	7afb      	ldrb	r3, [r7, #11]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	72fb      	strb	r3, [r7, #11]
      break;
 800f5a4:	e021      	b.n	800f5ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	7c1b      	ldrb	r3, [r3, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d10d      	bne.n	800f5ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5b6:	f107 0208 	add.w	r2, r7, #8
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	4798      	blx	r3
 800f5be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	2207      	movs	r2, #7
 800f5c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f5c8:	e00f      	b.n	800f5ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 fa10 	bl	800f9f2 <USBD_CtlError>
        err++;
 800f5d2:	7afb      	ldrb	r3, [r7, #11]
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	72fb      	strb	r3, [r7, #11]
      break;
 800f5d8:	e007      	b.n	800f5ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f5da:	6839      	ldr	r1, [r7, #0]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 fa08 	bl	800f9f2 <USBD_CtlError>
      err++;
 800f5e2:	7afb      	ldrb	r3, [r7, #11]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	72fb      	strb	r3, [r7, #11]
      break;
 800f5e8:	bf00      	nop
  }

  if (err != 0U)
 800f5ea:	7afb      	ldrb	r3, [r7, #11]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d11e      	bne.n	800f62e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	88db      	ldrh	r3, [r3, #6]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d016      	beq.n	800f626 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f5f8:	893b      	ldrh	r3, [r7, #8]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00e      	beq.n	800f61c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	88da      	ldrh	r2, [r3, #6]
 800f602:	893b      	ldrh	r3, [r7, #8]
 800f604:	4293      	cmp	r3, r2
 800f606:	bf28      	it	cs
 800f608:	4613      	movcs	r3, r2
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f60e:	893b      	ldrh	r3, [r7, #8]
 800f610:	461a      	mov	r2, r3
 800f612:	68f9      	ldr	r1, [r7, #12]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 fa5d 	bl	800fad4 <USBD_CtlSendData>
 800f61a:	e009      	b.n	800f630 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f61c:	6839      	ldr	r1, [r7, #0]
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 f9e7 	bl	800f9f2 <USBD_CtlError>
 800f624:	e004      	b.n	800f630 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 faae 	bl	800fb88 <USBD_CtlSendStatus>
 800f62c:	e000      	b.n	800f630 <USBD_GetDescriptor+0x2cc>
    return;
 800f62e:	bf00      	nop
  }
}
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop

0800f638 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	889b      	ldrh	r3, [r3, #4]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d131      	bne.n	800f6ae <USBD_SetAddress+0x76>
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	88db      	ldrh	r3, [r3, #6]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d12d      	bne.n	800f6ae <USBD_SetAddress+0x76>
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	885b      	ldrh	r3, [r3, #2]
 800f656:	2b7f      	cmp	r3, #127	; 0x7f
 800f658:	d829      	bhi.n	800f6ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	885b      	ldrh	r3, [r3, #2]
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f664:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	2b03      	cmp	r3, #3
 800f670:	d104      	bne.n	800f67c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f672:	6839      	ldr	r1, [r7, #0]
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f9bc 	bl	800f9f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f67a:	e01d      	b.n	800f6b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	7bfa      	ldrb	r2, [r7, #15]
 800f680:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f684:	7bfb      	ldrb	r3, [r7, #15]
 800f686:	4619      	mov	r1, r3
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f004 fb63 	bl	8013d54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f000 fa7a 	bl	800fb88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f694:	7bfb      	ldrb	r3, [r7, #15]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d004      	beq.n	800f6a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2202      	movs	r2, #2
 800f69e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6a2:	e009      	b.n	800f6b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6ac:	e004      	b.n	800f6b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f6ae:	6839      	ldr	r1, [r7, #0]
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 f99e 	bl	800f9f2 <USBD_CtlError>
  }
}
 800f6b6:	bf00      	nop
 800f6b8:	bf00      	nop
 800f6ba:	3710      	adds	r7, #16
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	885b      	ldrh	r3, [r3, #2]
 800f6d2:	b2da      	uxtb	r2, r3
 800f6d4:	4b4e      	ldr	r3, [pc, #312]	; (800f810 <USBD_SetConfig+0x150>)
 800f6d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f6d8:	4b4d      	ldr	r3, [pc, #308]	; (800f810 <USBD_SetConfig+0x150>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d905      	bls.n	800f6ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 f985 	bl	800f9f2 <USBD_CtlError>
    return USBD_FAIL;
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	e08c      	b.n	800f806 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	2b02      	cmp	r3, #2
 800f6f6:	d002      	beq.n	800f6fe <USBD_SetConfig+0x3e>
 800f6f8:	2b03      	cmp	r3, #3
 800f6fa:	d029      	beq.n	800f750 <USBD_SetConfig+0x90>
 800f6fc:	e075      	b.n	800f7ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f6fe:	4b44      	ldr	r3, [pc, #272]	; (800f810 <USBD_SetConfig+0x150>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d020      	beq.n	800f748 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f706:	4b42      	ldr	r3, [pc, #264]	; (800f810 <USBD_SetConfig+0x150>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f710:	4b3f      	ldr	r3, [pc, #252]	; (800f810 <USBD_SetConfig+0x150>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	4619      	mov	r1, r3
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7fe ffe7 	bl	800e6ea <USBD_SetClassConfig>
 800f71c:	4603      	mov	r3, r0
 800f71e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d008      	beq.n	800f738 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f726:	6839      	ldr	r1, [r7, #0]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f962 	bl	800f9f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2202      	movs	r2, #2
 800f732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f736:	e065      	b.n	800f804 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 fa25 	bl	800fb88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2203      	movs	r2, #3
 800f742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f746:	e05d      	b.n	800f804 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 fa1d 	bl	800fb88 <USBD_CtlSendStatus>
      break;
 800f74e:	e059      	b.n	800f804 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f750:	4b2f      	ldr	r3, [pc, #188]	; (800f810 <USBD_SetConfig+0x150>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d112      	bne.n	800f77e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2202      	movs	r2, #2
 800f75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f760:	4b2b      	ldr	r3, [pc, #172]	; (800f810 <USBD_SetConfig+0x150>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	461a      	mov	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f76a:	4b29      	ldr	r3, [pc, #164]	; (800f810 <USBD_SetConfig+0x150>)
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	4619      	mov	r1, r3
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7fe ffd6 	bl	800e722 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 fa06 	bl	800fb88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f77c:	e042      	b.n	800f804 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f77e:	4b24      	ldr	r3, [pc, #144]	; (800f810 <USBD_SetConfig+0x150>)
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d02a      	beq.n	800f7e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	b2db      	uxtb	r3, r3
 800f792:	4619      	mov	r1, r3
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f7fe ffc4 	bl	800e722 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f79a:	4b1d      	ldr	r3, [pc, #116]	; (800f810 <USBD_SetConfig+0x150>)
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7a4:	4b1a      	ldr	r3, [pc, #104]	; (800f810 <USBD_SetConfig+0x150>)
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f7fe ff9d 	bl	800e6ea <USBD_SetClassConfig>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f7b4:	7bfb      	ldrb	r3, [r7, #15]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00f      	beq.n	800f7da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f7ba:	6839      	ldr	r1, [r7, #0]
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 f918 	bl	800f9f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f7fe ffa9 	bl	800e722 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2202      	movs	r2, #2
 800f7d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f7d8:	e014      	b.n	800f804 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f000 f9d4 	bl	800fb88 <USBD_CtlSendStatus>
      break;
 800f7e0:	e010      	b.n	800f804 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 f9d0 	bl	800fb88 <USBD_CtlSendStatus>
      break;
 800f7e8:	e00c      	b.n	800f804 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f000 f900 	bl	800f9f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7f2:	4b07      	ldr	r3, [pc, #28]	; (800f810 <USBD_SetConfig+0x150>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7fe ff92 	bl	800e722 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f7fe:	2303      	movs	r3, #3
 800f800:	73fb      	strb	r3, [r7, #15]
      break;
 800f802:	bf00      	nop
  }

  return ret;
 800f804:	7bfb      	ldrb	r3, [r7, #15]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	200008f4 	.word	0x200008f4

0800f814 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	88db      	ldrh	r3, [r3, #6]
 800f822:	2b01      	cmp	r3, #1
 800f824:	d004      	beq.n	800f830 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 f8e2 	bl	800f9f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f82e:	e023      	b.n	800f878 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b02      	cmp	r3, #2
 800f83a:	dc02      	bgt.n	800f842 <USBD_GetConfig+0x2e>
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	dc03      	bgt.n	800f848 <USBD_GetConfig+0x34>
 800f840:	e015      	b.n	800f86e <USBD_GetConfig+0x5a>
 800f842:	2b03      	cmp	r3, #3
 800f844:	d00b      	beq.n	800f85e <USBD_GetConfig+0x4a>
 800f846:	e012      	b.n	800f86e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	3308      	adds	r3, #8
 800f852:	2201      	movs	r2, #1
 800f854:	4619      	mov	r1, r3
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 f93c 	bl	800fad4 <USBD_CtlSendData>
        break;
 800f85c:	e00c      	b.n	800f878 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	3304      	adds	r3, #4
 800f862:	2201      	movs	r2, #1
 800f864:	4619      	mov	r1, r3
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 f934 	bl	800fad4 <USBD_CtlSendData>
        break;
 800f86c:	e004      	b.n	800f878 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f86e:	6839      	ldr	r1, [r7, #0]
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 f8be 	bl	800f9f2 <USBD_CtlError>
        break;
 800f876:	bf00      	nop
}
 800f878:	bf00      	nop
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f890:	b2db      	uxtb	r3, r3
 800f892:	3b01      	subs	r3, #1
 800f894:	2b02      	cmp	r3, #2
 800f896:	d81e      	bhi.n	800f8d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	88db      	ldrh	r3, [r3, #6]
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	d004      	beq.n	800f8aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f8a5 	bl	800f9f2 <USBD_CtlError>
        break;
 800f8a8:	e01a      	b.n	800f8e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d005      	beq.n	800f8c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	f043 0202 	orr.w	r2, r3, #2
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	330c      	adds	r3, #12
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 f900 	bl	800fad4 <USBD_CtlSendData>
      break;
 800f8d4:	e004      	b.n	800f8e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f8d6:	6839      	ldr	r1, [r7, #0]
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 f88a 	bl	800f9f2 <USBD_CtlError>
      break;
 800f8de:	bf00      	nop
  }
}
 800f8e0:	bf00      	nop
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	885b      	ldrh	r3, [r3, #2]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d107      	bne.n	800f90a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 f940 	bl	800fb88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f908:	e013      	b.n	800f932 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	885b      	ldrh	r3, [r3, #2]
 800f90e:	2b02      	cmp	r3, #2
 800f910:	d10b      	bne.n	800f92a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	889b      	ldrh	r3, [r3, #4]
 800f916:	0a1b      	lsrs	r3, r3, #8
 800f918:	b29b      	uxth	r3, r3
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 f930 	bl	800fb88 <USBD_CtlSendStatus>
}
 800f928:	e003      	b.n	800f932 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 f860 	bl	800f9f2 <USBD_CtlError>
}
 800f932:	bf00      	nop
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b082      	sub	sp, #8
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	3b01      	subs	r3, #1
 800f94e:	2b02      	cmp	r3, #2
 800f950:	d80b      	bhi.n	800f96a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	885b      	ldrh	r3, [r3, #2]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d10c      	bne.n	800f974 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2200      	movs	r2, #0
 800f95e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 f910 	bl	800fb88 <USBD_CtlSendStatus>
      }
      break;
 800f968:	e004      	b.n	800f974 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f96a:	6839      	ldr	r1, [r7, #0]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f840 	bl	800f9f2 <USBD_CtlError>
      break;
 800f972:	e000      	b.n	800f976 <USBD_ClrFeature+0x3c>
      break;
 800f974:	bf00      	nop
  }
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	781a      	ldrb	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	3301      	adds	r3, #1
 800f998:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	781a      	ldrb	r2, [r3, #0]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f7ff fa41 	bl	800ee30 <SWAPBYTE>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	f7ff fa34 	bl	800ee30 <SWAPBYTE>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f9dc:	68f8      	ldr	r0, [r7, #12]
 800f9de:	f7ff fa27 	bl	800ee30 <SWAPBYTE>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	80da      	strh	r2, [r3, #6]
}
 800f9ea:	bf00      	nop
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}

0800f9f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	b082      	sub	sp, #8
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
 800f9fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9fc:	2180      	movs	r1, #128	; 0x80
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f004 f93e 	bl	8013c80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa04:	2100      	movs	r1, #0
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f004 f93a 	bl	8013c80 <USBD_LL_StallEP>
}
 800fa0c:	bf00      	nop
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b086      	sub	sp, #24
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa20:	2300      	movs	r3, #0
 800fa22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d036      	beq.n	800fa98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa2e:	6938      	ldr	r0, [r7, #16]
 800fa30:	f000 f836 	bl	800faa0 <USBD_GetLen>
 800fa34:	4603      	mov	r3, r0
 800fa36:	3301      	adds	r3, #1
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	005b      	lsls	r3, r3, #1
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa42:	7dfb      	ldrb	r3, [r7, #23]
 800fa44:	68ba      	ldr	r2, [r7, #8]
 800fa46:	4413      	add	r3, r2
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	7812      	ldrb	r2, [r2, #0]
 800fa4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa4e:	7dfb      	ldrb	r3, [r7, #23]
 800fa50:	3301      	adds	r3, #1
 800fa52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa54:	7dfb      	ldrb	r3, [r7, #23]
 800fa56:	68ba      	ldr	r2, [r7, #8]
 800fa58:	4413      	add	r3, r2
 800fa5a:	2203      	movs	r2, #3
 800fa5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
 800fa60:	3301      	adds	r3, #1
 800fa62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa64:	e013      	b.n	800fa8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fa66:	7dfb      	ldrb	r3, [r7, #23]
 800fa68:	68ba      	ldr	r2, [r7, #8]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	7812      	ldrb	r2, [r2, #0]
 800fa70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	3301      	adds	r3, #1
 800fa76:	613b      	str	r3, [r7, #16]
    idx++;
 800fa78:	7dfb      	ldrb	r3, [r7, #23]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fa7e:	7dfb      	ldrb	r3, [r7, #23]
 800fa80:	68ba      	ldr	r2, [r7, #8]
 800fa82:	4413      	add	r3, r2
 800fa84:	2200      	movs	r2, #0
 800fa86:	701a      	strb	r2, [r3, #0]
    idx++;
 800fa88:	7dfb      	ldrb	r3, [r7, #23]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1e7      	bne.n	800fa66 <USBD_GetString+0x52>
 800fa96:	e000      	b.n	800fa9a <USBD_GetString+0x86>
    return;
 800fa98:	bf00      	nop
  }
}
 800fa9a:	3718      	adds	r7, #24
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b085      	sub	sp, #20
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800faa8:	2300      	movs	r3, #0
 800faaa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fab0:	e005      	b.n	800fabe <USBD_GetLen+0x1e>
  {
    len++;
 800fab2:	7bfb      	ldrb	r3, [r7, #15]
 800fab4:	3301      	adds	r3, #1
 800fab6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	3301      	adds	r3, #1
 800fabc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1f5      	bne.n	800fab2 <USBD_GetLen+0x12>
  }

  return len;
 800fac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2202      	movs	r2, #2
 800fae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	2100      	movs	r1, #0
 800fafa:	68f8      	ldr	r0, [r7, #12]
 800fafc:	f004 f949 	bl	8013d92 <USBD_LL_Transmit>

  return USBD_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b084      	sub	sp, #16
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	60f8      	str	r0, [r7, #12]
 800fb12:	60b9      	str	r1, [r7, #8]
 800fb14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	2100      	movs	r1, #0
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f004 f938 	bl	8013d92 <USBD_LL_Transmit>

  return USBD_OK;
 800fb22:	2300      	movs	r3, #0
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3710      	adds	r7, #16
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2203      	movs	r2, #3
 800fb3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	68ba      	ldr	r2, [r7, #8]
 800fb54:	2100      	movs	r1, #0
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f004 f93c 	bl	8013dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b084      	sub	sp, #16
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	60f8      	str	r0, [r7, #12]
 800fb6e:	60b9      	str	r1, [r7, #8]
 800fb70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	2100      	movs	r1, #0
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	f004 f92b 	bl	8013dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb7e:	2300      	movs	r3, #0
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2204      	movs	r2, #4
 800fb94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fb98:	2300      	movs	r3, #0
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f004 f8f7 	bl	8013d92 <USBD_LL_Transmit>

  return USBD_OK;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b082      	sub	sp, #8
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2205      	movs	r2, #5
 800fbba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f004 f905 	bl	8013dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <__NVIC_SetPriority>:
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	4603      	mov	r3, r0
 800fbdc:	6039      	str	r1, [r7, #0]
 800fbde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fbe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	db0a      	blt.n	800fbfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	b2da      	uxtb	r2, r3
 800fbec:	490c      	ldr	r1, [pc, #48]	; (800fc20 <__NVIC_SetPriority+0x4c>)
 800fbee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbf2:	0112      	lsls	r2, r2, #4
 800fbf4:	b2d2      	uxtb	r2, r2
 800fbf6:	440b      	add	r3, r1
 800fbf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fbfc:	e00a      	b.n	800fc14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	b2da      	uxtb	r2, r3
 800fc02:	4908      	ldr	r1, [pc, #32]	; (800fc24 <__NVIC_SetPriority+0x50>)
 800fc04:	79fb      	ldrb	r3, [r7, #7]
 800fc06:	f003 030f 	and.w	r3, r3, #15
 800fc0a:	3b04      	subs	r3, #4
 800fc0c:	0112      	lsls	r2, r2, #4
 800fc0e:	b2d2      	uxtb	r2, r2
 800fc10:	440b      	add	r3, r1
 800fc12:	761a      	strb	r2, [r3, #24]
}
 800fc14:	bf00      	nop
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr
 800fc20:	e000e100 	.word	0xe000e100
 800fc24:	e000ed00 	.word	0xe000ed00

0800fc28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	f06f 0004 	mvn.w	r0, #4
 800fc32:	f7ff ffcf 	bl	800fbd4 <__NVIC_SetPriority>
#endif
}
 800fc36:	bf00      	nop
 800fc38:	bd80      	pop	{r7, pc}
	...

0800fc3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc42:	f3ef 8305 	mrs	r3, IPSR
 800fc46:	603b      	str	r3, [r7, #0]
  return(result);
 800fc48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d003      	beq.n	800fc56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fc4e:	f06f 0305 	mvn.w	r3, #5
 800fc52:	607b      	str	r3, [r7, #4]
 800fc54:	e00c      	b.n	800fc70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fc56:	4b0a      	ldr	r3, [pc, #40]	; (800fc80 <osKernelInitialize+0x44>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d105      	bne.n	800fc6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fc5e:	4b08      	ldr	r3, [pc, #32]	; (800fc80 <osKernelInitialize+0x44>)
 800fc60:	2201      	movs	r2, #1
 800fc62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	607b      	str	r3, [r7, #4]
 800fc68:	e002      	b.n	800fc70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fc6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fc70:	687b      	ldr	r3, [r7, #4]
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	370c      	adds	r7, #12
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	200008f8 	.word	0x200008f8

0800fc84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc8a:	f3ef 8305 	mrs	r3, IPSR
 800fc8e:	603b      	str	r3, [r7, #0]
  return(result);
 800fc90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d003      	beq.n	800fc9e <osKernelStart+0x1a>
    stat = osErrorISR;
 800fc96:	f06f 0305 	mvn.w	r3, #5
 800fc9a:	607b      	str	r3, [r7, #4]
 800fc9c:	e010      	b.n	800fcc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fc9e:	4b0b      	ldr	r3, [pc, #44]	; (800fccc <osKernelStart+0x48>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d109      	bne.n	800fcba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fca6:	f7ff ffbf 	bl	800fc28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fcaa:	4b08      	ldr	r3, [pc, #32]	; (800fccc <osKernelStart+0x48>)
 800fcac:	2202      	movs	r2, #2
 800fcae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fcb0:	f001 fd38 	bl	8011724 <vTaskStartScheduler>
      stat = osOK;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	607b      	str	r3, [r7, #4]
 800fcb8:	e002      	b.n	800fcc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fcba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fcc0:	687b      	ldr	r3, [r7, #4]
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	200008f8 	.word	0x200008f8

0800fcd0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcd6:	f3ef 8305 	mrs	r3, IPSR
 800fcda:	603b      	str	r3, [r7, #0]
  return(result);
 800fcdc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d003      	beq.n	800fcea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800fce2:	f001 fe4b 	bl	801197c <xTaskGetTickCountFromISR>
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	e002      	b.n	800fcf0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800fcea:	f001 fe37 	bl	801195c <xTaskGetTickCount>
 800fcee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800fcf0:	687b      	ldr	r3, [r7, #4]
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b08e      	sub	sp, #56	; 0x38
 800fcfe:	af04      	add	r7, sp, #16
 800fd00:	60f8      	str	r0, [r7, #12]
 800fd02:	60b9      	str	r1, [r7, #8]
 800fd04:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fd06:	2300      	movs	r3, #0
 800fd08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd0a:	f3ef 8305 	mrs	r3, IPSR
 800fd0e:	617b      	str	r3, [r7, #20]
  return(result);
 800fd10:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d17e      	bne.n	800fe14 <osThreadNew+0x11a>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d07b      	beq.n	800fe14 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fd1c:	2380      	movs	r3, #128	; 0x80
 800fd1e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fd20:	2318      	movs	r3, #24
 800fd22:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fd24:	2300      	movs	r3, #0
 800fd26:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fd28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d045      	beq.n	800fdc0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d002      	beq.n	800fd42 <osThreadNew+0x48>
        name = attr->name;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	699b      	ldr	r3, [r3, #24]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d002      	beq.n	800fd50 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	699b      	ldr	r3, [r3, #24]
 800fd4e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d008      	beq.n	800fd68 <osThreadNew+0x6e>
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	2b38      	cmp	r3, #56	; 0x38
 800fd5a:	d805      	bhi.n	800fd68 <osThreadNew+0x6e>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	f003 0301 	and.w	r3, r3, #1
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <osThreadNew+0x72>
        return (NULL);
 800fd68:	2300      	movs	r3, #0
 800fd6a:	e054      	b.n	800fe16 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	695b      	ldr	r3, [r3, #20]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d003      	beq.n	800fd7c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	695b      	ldr	r3, [r3, #20]
 800fd78:	089b      	lsrs	r3, r3, #2
 800fd7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	689b      	ldr	r3, [r3, #8]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00e      	beq.n	800fda2 <osThreadNew+0xa8>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	2bbb      	cmp	r3, #187	; 0xbb
 800fd8a:	d90a      	bls.n	800fda2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d006      	beq.n	800fda2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	695b      	ldr	r3, [r3, #20]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d002      	beq.n	800fda2 <osThreadNew+0xa8>
        mem = 1;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	61bb      	str	r3, [r7, #24]
 800fda0:	e010      	b.n	800fdc4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	689b      	ldr	r3, [r3, #8]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d10c      	bne.n	800fdc4 <osThreadNew+0xca>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d108      	bne.n	800fdc4 <osThreadNew+0xca>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	691b      	ldr	r3, [r3, #16]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d104      	bne.n	800fdc4 <osThreadNew+0xca>
          mem = 0;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	61bb      	str	r3, [r7, #24]
 800fdbe:	e001      	b.n	800fdc4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d110      	bne.n	800fdec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fdd2:	9202      	str	r2, [sp, #8]
 800fdd4:	9301      	str	r3, [sp, #4]
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	6a3a      	ldr	r2, [r7, #32]
 800fdde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f001 fa35 	bl	8011250 <xTaskCreateStatic>
 800fde6:	4603      	mov	r3, r0
 800fde8:	613b      	str	r3, [r7, #16]
 800fdea:	e013      	b.n	800fe14 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d110      	bne.n	800fe14 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fdf2:	6a3b      	ldr	r3, [r7, #32]
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	f107 0310 	add.w	r3, r7, #16
 800fdfa:	9301      	str	r3, [sp, #4]
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f001 fa80 	bl	801130a <xTaskCreate>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d001      	beq.n	800fe14 <osThreadNew+0x11a>
            hTask = NULL;
 800fe10:	2300      	movs	r3, #0
 800fe12:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fe14:	693b      	ldr	r3, [r7, #16]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3728      	adds	r7, #40	; 0x28
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b084      	sub	sp, #16
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe26:	f3ef 8305 	mrs	r3, IPSR
 800fe2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d003      	beq.n	800fe3a <osDelay+0x1c>
    stat = osErrorISR;
 800fe32:	f06f 0305 	mvn.w	r3, #5
 800fe36:	60fb      	str	r3, [r7, #12]
 800fe38:	e007      	b.n	800fe4a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d002      	beq.n	800fe4a <osDelay+0x2c>
      vTaskDelay(ticks);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f001 fc39 	bl	80116bc <vTaskDelay>
    }
  }

  return (stat);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3710      	adds	r7, #16
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe5c:	f3ef 8305 	mrs	r3, IPSR
 800fe60:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe62:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d003      	beq.n	800fe70 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800fe68:	f06f 0305 	mvn.w	r3, #5
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	e019      	b.n	800fea4 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800fe70:	2300      	movs	r3, #0
 800fe72:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800fe74:	f001 fd72 	bl	801195c <xTaskGetTickCount>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	1ad3      	subs	r3, r2, r3
 800fe82:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d009      	beq.n	800fe9e <osDelayUntil+0x4a>
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	db06      	blt.n	800fe9e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800fe90:	f107 0308 	add.w	r3, r7, #8
 800fe94:	6939      	ldr	r1, [r7, #16]
 800fe96:	4618      	mov	r0, r3
 800fe98:	f001 fb92 	bl	80115c0 <vTaskDelayUntil>
 800fe9c:	e002      	b.n	800fea4 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800fe9e:	f06f 0303 	mvn.w	r3, #3
 800fea2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800fea4:	697b      	ldr	r3, [r7, #20]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}

0800feae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800feae:	b580      	push	{r7, lr}
 800feb0:	b08a      	sub	sp, #40	; 0x28
 800feb2:	af02      	add	r7, sp, #8
 800feb4:	60f8      	str	r0, [r7, #12]
 800feb6:	60b9      	str	r1, [r7, #8]
 800feb8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800feba:	2300      	movs	r3, #0
 800febc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800febe:	f3ef 8305 	mrs	r3, IPSR
 800fec2:	613b      	str	r3, [r7, #16]
  return(result);
 800fec4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d175      	bne.n	800ffb6 <osSemaphoreNew+0x108>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d072      	beq.n	800ffb6 <osSemaphoreNew+0x108>
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d86e      	bhi.n	800ffb6 <osSemaphoreNew+0x108>
    mem = -1;
 800fed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fedc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d015      	beq.n	800ff10 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	689b      	ldr	r3, [r3, #8]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d006      	beq.n	800fefa <osSemaphoreNew+0x4c>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	2b4f      	cmp	r3, #79	; 0x4f
 800fef2:	d902      	bls.n	800fefa <osSemaphoreNew+0x4c>
        mem = 1;
 800fef4:	2301      	movs	r3, #1
 800fef6:	61bb      	str	r3, [r7, #24]
 800fef8:	e00c      	b.n	800ff14 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	689b      	ldr	r3, [r3, #8]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d108      	bne.n	800ff14 <osSemaphoreNew+0x66>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d104      	bne.n	800ff14 <osSemaphoreNew+0x66>
          mem = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	61bb      	str	r3, [r7, #24]
 800ff0e:	e001      	b.n	800ff14 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ff10:	2300      	movs	r3, #0
 800ff12:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ff14:	69bb      	ldr	r3, [r7, #24]
 800ff16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff1a:	d04c      	beq.n	800ffb6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d128      	bne.n	800ff74 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ff22:	69bb      	ldr	r3, [r7, #24]
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d10a      	bne.n	800ff3e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	2203      	movs	r2, #3
 800ff2e:	9200      	str	r2, [sp, #0]
 800ff30:	2200      	movs	r2, #0
 800ff32:	2100      	movs	r1, #0
 800ff34:	2001      	movs	r0, #1
 800ff36:	f000 fb09 	bl	801054c <xQueueGenericCreateStatic>
 800ff3a:	61f8      	str	r0, [r7, #28]
 800ff3c:	e005      	b.n	800ff4a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ff3e:	2203      	movs	r2, #3
 800ff40:	2100      	movs	r1, #0
 800ff42:	2001      	movs	r0, #1
 800ff44:	f000 fb7a 	bl	801063c <xQueueGenericCreate>
 800ff48:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d022      	beq.n	800ff96 <osSemaphoreNew+0xe8>
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d01f      	beq.n	800ff96 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ff56:	2300      	movs	r3, #0
 800ff58:	2200      	movs	r2, #0
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	69f8      	ldr	r0, [r7, #28]
 800ff5e:	f000 fc35 	bl	80107cc <xQueueGenericSend>
 800ff62:	4603      	mov	r3, r0
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d016      	beq.n	800ff96 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ff68:	69f8      	ldr	r0, [r7, #28]
 800ff6a:	f000 ffb5 	bl	8010ed8 <vQueueDelete>
            hSemaphore = NULL;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	61fb      	str	r3, [r7, #28]
 800ff72:	e010      	b.n	800ff96 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d108      	bne.n	800ff8c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	461a      	mov	r2, r3
 800ff80:	68b9      	ldr	r1, [r7, #8]
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	f000 fbb7 	bl	80106f6 <xQueueCreateCountingSemaphoreStatic>
 800ff88:	61f8      	str	r0, [r7, #28]
 800ff8a:	e004      	b.n	800ff96 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ff8c:	68b9      	ldr	r1, [r7, #8]
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f000 fbe8 	bl	8010764 <xQueueCreateCountingSemaphore>
 800ff94:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00c      	beq.n	800ffb6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d003      	beq.n	800ffaa <osSemaphoreNew+0xfc>
          name = attr->name;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	617b      	str	r3, [r7, #20]
 800ffa8:	e001      	b.n	800ffae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ffae:	6979      	ldr	r1, [r7, #20]
 800ffb0:	69f8      	ldr	r0, [r7, #28]
 800ffb2:	f001 f8c5 	bl	8011140 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ffb6:	69fb      	ldr	r3, [r7, #28]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3720      	adds	r7, #32
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d103      	bne.n	800ffde <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ffd6:	f06f 0303 	mvn.w	r3, #3
 800ffda:	617b      	str	r3, [r7, #20]
 800ffdc:	e02c      	b.n	8010038 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffde:	f3ef 8305 	mrs	r3, IPSR
 800ffe2:	60fb      	str	r3, [r7, #12]
  return(result);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d01a      	beq.n	8010020 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ffea:	2300      	movs	r3, #0
 800ffec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ffee:	f107 0308 	add.w	r3, r7, #8
 800fff2:	4619      	mov	r1, r3
 800fff4:	6938      	ldr	r0, [r7, #16]
 800fff6:	f000 fd82 	bl	8010afe <xQueueGiveFromISR>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d003      	beq.n	8010008 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010000:	f06f 0302 	mvn.w	r3, #2
 8010004:	617b      	str	r3, [r7, #20]
 8010006:	e017      	b.n	8010038 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d014      	beq.n	8010038 <osSemaphoreRelease+0x78>
 801000e:	4b0d      	ldr	r3, [pc, #52]	; (8010044 <osSemaphoreRelease+0x84>)
 8010010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010014:	601a      	str	r2, [r3, #0]
 8010016:	f3bf 8f4f 	dsb	sy
 801001a:	f3bf 8f6f 	isb	sy
 801001e:	e00b      	b.n	8010038 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010020:	2300      	movs	r3, #0
 8010022:	2200      	movs	r2, #0
 8010024:	2100      	movs	r1, #0
 8010026:	6938      	ldr	r0, [r7, #16]
 8010028:	f000 fbd0 	bl	80107cc <xQueueGenericSend>
 801002c:	4603      	mov	r3, r0
 801002e:	2b01      	cmp	r3, #1
 8010030:	d002      	beq.n	8010038 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8010032:	f06f 0302 	mvn.w	r3, #2
 8010036:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010038:	697b      	ldr	r3, [r7, #20]
}
 801003a:	4618      	mov	r0, r3
 801003c:	3718      	adds	r7, #24
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	e000ed04 	.word	0xe000ed04

08010048 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010048:	b580      	push	{r7, lr}
 801004a:	b08a      	sub	sp, #40	; 0x28
 801004c:	af02      	add	r7, sp, #8
 801004e:	60f8      	str	r0, [r7, #12]
 8010050:	60b9      	str	r1, [r7, #8]
 8010052:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010054:	2300      	movs	r3, #0
 8010056:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010058:	f3ef 8305 	mrs	r3, IPSR
 801005c:	613b      	str	r3, [r7, #16]
  return(result);
 801005e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010060:	2b00      	cmp	r3, #0
 8010062:	d15f      	bne.n	8010124 <osMessageQueueNew+0xdc>
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d05c      	beq.n	8010124 <osMessageQueueNew+0xdc>
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d059      	beq.n	8010124 <osMessageQueueNew+0xdc>
    mem = -1;
 8010070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010074:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d029      	beq.n	80100d0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d012      	beq.n	80100aa <osMessageQueueNew+0x62>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	2b4f      	cmp	r3, #79	; 0x4f
 801008a:	d90e      	bls.n	80100aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00a      	beq.n	80100aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	695a      	ldr	r2, [r3, #20]
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	68b9      	ldr	r1, [r7, #8]
 801009c:	fb01 f303 	mul.w	r3, r1, r3
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d302      	bcc.n	80100aa <osMessageQueueNew+0x62>
        mem = 1;
 80100a4:	2301      	movs	r3, #1
 80100a6:	61bb      	str	r3, [r7, #24]
 80100a8:	e014      	b.n	80100d4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d110      	bne.n	80100d4 <osMessageQueueNew+0x8c>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d10c      	bne.n	80100d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d108      	bne.n	80100d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	695b      	ldr	r3, [r3, #20]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d104      	bne.n	80100d4 <osMessageQueueNew+0x8c>
          mem = 0;
 80100ca:	2300      	movs	r3, #0
 80100cc:	61bb      	str	r3, [r7, #24]
 80100ce:	e001      	b.n	80100d4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80100d0:	2300      	movs	r3, #0
 80100d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	d10b      	bne.n	80100f2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	691a      	ldr	r2, [r3, #16]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	2100      	movs	r1, #0
 80100e4:	9100      	str	r1, [sp, #0]
 80100e6:	68b9      	ldr	r1, [r7, #8]
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f000 fa2f 	bl	801054c <xQueueGenericCreateStatic>
 80100ee:	61f8      	str	r0, [r7, #28]
 80100f0:	e008      	b.n	8010104 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d105      	bne.n	8010104 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80100f8:	2200      	movs	r2, #0
 80100fa:	68b9      	ldr	r1, [r7, #8]
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f000 fa9d 	bl	801063c <xQueueGenericCreate>
 8010102:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d00c      	beq.n	8010124 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d003      	beq.n	8010118 <osMessageQueueNew+0xd0>
        name = attr->name;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	617b      	str	r3, [r7, #20]
 8010116:	e001      	b.n	801011c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010118:	2300      	movs	r3, #0
 801011a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801011c:	6979      	ldr	r1, [r7, #20]
 801011e:	69f8      	ldr	r0, [r7, #28]
 8010120:	f001 f80e 	bl	8011140 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010124:	69fb      	ldr	r3, [r7, #28]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3720      	adds	r7, #32
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
	...

08010130 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010130:	b580      	push	{r7, lr}
 8010132:	b088      	sub	sp, #32
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	603b      	str	r3, [r7, #0]
 801013c:	4613      	mov	r3, r2
 801013e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010144:	2300      	movs	r3, #0
 8010146:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010148:	f3ef 8305 	mrs	r3, IPSR
 801014c:	617b      	str	r3, [r7, #20]
  return(result);
 801014e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010150:	2b00      	cmp	r3, #0
 8010152:	d028      	beq.n	80101a6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d005      	beq.n	8010166 <osMessageQueuePut+0x36>
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d002      	beq.n	8010166 <osMessageQueuePut+0x36>
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d003      	beq.n	801016e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010166:	f06f 0303 	mvn.w	r3, #3
 801016a:	61fb      	str	r3, [r7, #28]
 801016c:	e038      	b.n	80101e0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801016e:	2300      	movs	r3, #0
 8010170:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010172:	f107 0210 	add.w	r2, r7, #16
 8010176:	2300      	movs	r3, #0
 8010178:	68b9      	ldr	r1, [r7, #8]
 801017a:	69b8      	ldr	r0, [r7, #24]
 801017c:	f000 fc24 	bl	80109c8 <xQueueGenericSendFromISR>
 8010180:	4603      	mov	r3, r0
 8010182:	2b01      	cmp	r3, #1
 8010184:	d003      	beq.n	801018e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010186:	f06f 0302 	mvn.w	r3, #2
 801018a:	61fb      	str	r3, [r7, #28]
 801018c:	e028      	b.n	80101e0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d025      	beq.n	80101e0 <osMessageQueuePut+0xb0>
 8010194:	4b15      	ldr	r3, [pc, #84]	; (80101ec <osMessageQueuePut+0xbc>)
 8010196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801019a:	601a      	str	r2, [r3, #0]
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	e01c      	b.n	80101e0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80101a6:	69bb      	ldr	r3, [r7, #24]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d002      	beq.n	80101b2 <osMessageQueuePut+0x82>
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d103      	bne.n	80101ba <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80101b2:	f06f 0303 	mvn.w	r3, #3
 80101b6:	61fb      	str	r3, [r7, #28]
 80101b8:	e012      	b.n	80101e0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80101ba:	2300      	movs	r3, #0
 80101bc:	683a      	ldr	r2, [r7, #0]
 80101be:	68b9      	ldr	r1, [r7, #8]
 80101c0:	69b8      	ldr	r0, [r7, #24]
 80101c2:	f000 fb03 	bl	80107cc <xQueueGenericSend>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d009      	beq.n	80101e0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d003      	beq.n	80101da <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80101d2:	f06f 0301 	mvn.w	r3, #1
 80101d6:	61fb      	str	r3, [r7, #28]
 80101d8:	e002      	b.n	80101e0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80101da:	f06f 0302 	mvn.w	r3, #2
 80101de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80101e0:	69fb      	ldr	r3, [r7, #28]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3720      	adds	r7, #32
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	e000ed04 	.word	0xe000ed04

080101f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b088      	sub	sp, #32
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010202:	2300      	movs	r3, #0
 8010204:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010206:	f3ef 8305 	mrs	r3, IPSR
 801020a:	617b      	str	r3, [r7, #20]
  return(result);
 801020c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801020e:	2b00      	cmp	r3, #0
 8010210:	d028      	beq.n	8010264 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <osMessageQueueGet+0x34>
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <osMessageQueueGet+0x34>
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d003      	beq.n	801022c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010224:	f06f 0303 	mvn.w	r3, #3
 8010228:	61fb      	str	r3, [r7, #28]
 801022a:	e037      	b.n	801029c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801022c:	2300      	movs	r3, #0
 801022e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010230:	f107 0310 	add.w	r3, r7, #16
 8010234:	461a      	mov	r2, r3
 8010236:	68b9      	ldr	r1, [r7, #8]
 8010238:	69b8      	ldr	r0, [r7, #24]
 801023a:	f000 fdcd 	bl	8010dd8 <xQueueReceiveFromISR>
 801023e:	4603      	mov	r3, r0
 8010240:	2b01      	cmp	r3, #1
 8010242:	d003      	beq.n	801024c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010244:	f06f 0302 	mvn.w	r3, #2
 8010248:	61fb      	str	r3, [r7, #28]
 801024a:	e027      	b.n	801029c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d024      	beq.n	801029c <osMessageQueueGet+0xac>
 8010252:	4b15      	ldr	r3, [pc, #84]	; (80102a8 <osMessageQueueGet+0xb8>)
 8010254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010258:	601a      	str	r2, [r3, #0]
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	e01b      	b.n	801029c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010264:	69bb      	ldr	r3, [r7, #24]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d002      	beq.n	8010270 <osMessageQueueGet+0x80>
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d103      	bne.n	8010278 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010270:	f06f 0303 	mvn.w	r3, #3
 8010274:	61fb      	str	r3, [r7, #28]
 8010276:	e011      	b.n	801029c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010278:	683a      	ldr	r2, [r7, #0]
 801027a:	68b9      	ldr	r1, [r7, #8]
 801027c:	69b8      	ldr	r0, [r7, #24]
 801027e:	f000 fccb 	bl	8010c18 <xQueueReceive>
 8010282:	4603      	mov	r3, r0
 8010284:	2b01      	cmp	r3, #1
 8010286:	d009      	beq.n	801029c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d003      	beq.n	8010296 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801028e:	f06f 0301 	mvn.w	r3, #1
 8010292:	61fb      	str	r3, [r7, #28]
 8010294:	e002      	b.n	801029c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010296:	f06f 0302 	mvn.w	r3, #2
 801029a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801029c:	69fb      	ldr	r3, [r7, #28]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3720      	adds	r7, #32
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	e000ed04 	.word	0xe000ed04

080102ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	4a07      	ldr	r2, [pc, #28]	; (80102d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80102bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	4a06      	ldr	r2, [pc, #24]	; (80102dc <vApplicationGetIdleTaskMemory+0x30>)
 80102c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2280      	movs	r2, #128	; 0x80
 80102c8:	601a      	str	r2, [r3, #0]
}
 80102ca:	bf00      	nop
 80102cc:	3714      	adds	r7, #20
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	200008fc 	.word	0x200008fc
 80102dc:	200009b8 	.word	0x200009b8

080102e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4a07      	ldr	r2, [pc, #28]	; (801030c <vApplicationGetTimerTaskMemory+0x2c>)
 80102f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	4a06      	ldr	r2, [pc, #24]	; (8010310 <vApplicationGetTimerTaskMemory+0x30>)
 80102f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102fe:	601a      	str	r2, [r3, #0]
}
 8010300:	bf00      	nop
 8010302:	3714      	adds	r7, #20
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	20000bb8 	.word	0x20000bb8
 8010310:	20000c74 	.word	0x20000c74

08010314 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f103 0208 	add.w	r2, r3, #8
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801032c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f103 0208 	add.w	r2, r3, #8
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f103 0208 	add.w	r2, r3, #8
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010348:	bf00      	nop
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2200      	movs	r2, #0
 8010360:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010362:	bf00      	nop
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801036e:	b480      	push	{r7}
 8010370:	b085      	sub	sp, #20
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
 8010376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	689a      	ldr	r2, [r3, #8]
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	683a      	ldr	r2, [r7, #0]
 8010392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	687a      	ldr	r2, [r7, #4]
 801039e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	601a      	str	r2, [r3, #0]
}
 80103aa:	bf00      	nop
 80103ac:	3714      	adds	r7, #20
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr

080103b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80103b6:	b480      	push	{r7}
 80103b8:	b085      	sub	sp, #20
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103cc:	d103      	bne.n	80103d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	60fb      	str	r3, [r7, #12]
 80103d4:	e00c      	b.n	80103f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	3308      	adds	r3, #8
 80103da:	60fb      	str	r3, [r7, #12]
 80103dc:	e002      	b.n	80103e4 <vListInsert+0x2e>
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	60fb      	str	r3, [r7, #12]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	68ba      	ldr	r2, [r7, #8]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d2f6      	bcs.n	80103de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	685a      	ldr	r2, [r3, #4]
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	685b      	ldr	r3, [r3, #4]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	68fa      	ldr	r2, [r7, #12]
 8010404:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	683a      	ldr	r2, [r7, #0]
 801040a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	1c5a      	adds	r2, r3, #1
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	601a      	str	r2, [r3, #0]
}
 801041c:	bf00      	nop
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010428:	b480      	push	{r7}
 801042a:	b085      	sub	sp, #20
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	6892      	ldr	r2, [r2, #8]
 801043e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	6852      	ldr	r2, [r2, #4]
 8010448:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	429a      	cmp	r2, r3
 8010452:	d103      	bne.n	801045c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	689a      	ldr	r2, [r3, #8]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	1e5a      	subs	r2, r3, #1
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
}
 8010470:	4618      	mov	r0, r3
 8010472:	3714      	adds	r7, #20
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d10a      	bne.n	80104a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010494:	f383 8811 	msr	BASEPRI, r3
 8010498:	f3bf 8f6f 	isb	sy
 801049c:	f3bf 8f4f 	dsb	sy
 80104a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80104a2:	bf00      	nop
 80104a4:	e7fe      	b.n	80104a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80104a6:	f002 fb05 	bl	8012ab4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104b2:	68f9      	ldr	r1, [r7, #12]
 80104b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80104b6:	fb01 f303 	mul.w	r3, r1, r3
 80104ba:	441a      	add	r2, r3
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104d6:	3b01      	subs	r3, #1
 80104d8:	68f9      	ldr	r1, [r7, #12]
 80104da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80104dc:	fb01 f303 	mul.w	r3, r1, r3
 80104e0:	441a      	add	r2, r3
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	22ff      	movs	r2, #255	; 0xff
 80104ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	22ff      	movs	r2, #255	; 0xff
 80104f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d114      	bne.n	8010526 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	691b      	ldr	r3, [r3, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d01a      	beq.n	801053a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	3310      	adds	r3, #16
 8010508:	4618      	mov	r0, r3
 801050a:	f001 fbb7 	bl	8011c7c <xTaskRemoveFromEventList>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d012      	beq.n	801053a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010514:	4b0c      	ldr	r3, [pc, #48]	; (8010548 <xQueueGenericReset+0xcc>)
 8010516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801051a:	601a      	str	r2, [r3, #0]
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	e009      	b.n	801053a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	3310      	adds	r3, #16
 801052a:	4618      	mov	r0, r3
 801052c:	f7ff fef2 	bl	8010314 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3324      	adds	r3, #36	; 0x24
 8010534:	4618      	mov	r0, r3
 8010536:	f7ff feed 	bl	8010314 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801053a:	f002 faeb 	bl	8012b14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801053e:	2301      	movs	r3, #1
}
 8010540:	4618      	mov	r0, r3
 8010542:	3710      	adds	r7, #16
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	e000ed04 	.word	0xe000ed04

0801054c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801054c:	b580      	push	{r7, lr}
 801054e:	b08e      	sub	sp, #56	; 0x38
 8010550:	af02      	add	r7, sp, #8
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
 8010558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10a      	bne.n	8010576 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010564:	f383 8811 	msr	BASEPRI, r3
 8010568:	f3bf 8f6f 	isb	sy
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010572:	bf00      	nop
 8010574:	e7fe      	b.n	8010574 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10a      	bne.n	8010592 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801058e:	bf00      	nop
 8010590:	e7fe      	b.n	8010590 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d002      	beq.n	801059e <xQueueGenericCreateStatic+0x52>
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <xQueueGenericCreateStatic+0x56>
 801059e:	2301      	movs	r3, #1
 80105a0:	e000      	b.n	80105a4 <xQueueGenericCreateStatic+0x58>
 80105a2:	2300      	movs	r3, #0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d10a      	bne.n	80105be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80105a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ac:	f383 8811 	msr	BASEPRI, r3
 80105b0:	f3bf 8f6f 	isb	sy
 80105b4:	f3bf 8f4f 	dsb	sy
 80105b8:	623b      	str	r3, [r7, #32]
}
 80105ba:	bf00      	nop
 80105bc:	e7fe      	b.n	80105bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d102      	bne.n	80105ca <xQueueGenericCreateStatic+0x7e>
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d101      	bne.n	80105ce <xQueueGenericCreateStatic+0x82>
 80105ca:	2301      	movs	r3, #1
 80105cc:	e000      	b.n	80105d0 <xQueueGenericCreateStatic+0x84>
 80105ce:	2300      	movs	r3, #0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d10a      	bne.n	80105ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80105d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d8:	f383 8811 	msr	BASEPRI, r3
 80105dc:	f3bf 8f6f 	isb	sy
 80105e0:	f3bf 8f4f 	dsb	sy
 80105e4:	61fb      	str	r3, [r7, #28]
}
 80105e6:	bf00      	nop
 80105e8:	e7fe      	b.n	80105e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80105ea:	2350      	movs	r3, #80	; 0x50
 80105ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	2b50      	cmp	r3, #80	; 0x50
 80105f2:	d00a      	beq.n	801060a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80105f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f8:	f383 8811 	msr	BASEPRI, r3
 80105fc:	f3bf 8f6f 	isb	sy
 8010600:	f3bf 8f4f 	dsb	sy
 8010604:	61bb      	str	r3, [r7, #24]
}
 8010606:	bf00      	nop
 8010608:	e7fe      	b.n	8010608 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801060a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00d      	beq.n	8010632 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010618:	2201      	movs	r2, #1
 801061a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801061e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	4613      	mov	r3, r2
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	68b9      	ldr	r1, [r7, #8]
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f000 f83f 	bl	80106b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010634:	4618      	mov	r0, r3
 8010636:	3730      	adds	r7, #48	; 0x30
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801063c:	b580      	push	{r7, lr}
 801063e:	b08a      	sub	sp, #40	; 0x28
 8010640:	af02      	add	r7, sp, #8
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	4613      	mov	r3, r2
 8010648:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d10a      	bne.n	8010666 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	613b      	str	r3, [r7, #16]
}
 8010662:	bf00      	nop
 8010664:	e7fe      	b.n	8010664 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	fb02 f303 	mul.w	r3, r2, r3
 801066e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	3350      	adds	r3, #80	; 0x50
 8010674:	4618      	mov	r0, r3
 8010676:	f002 fb3f 	bl	8012cf8 <pvPortMalloc>
 801067a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d011      	beq.n	80106a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	3350      	adds	r3, #80	; 0x50
 801068a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	2200      	movs	r2, #0
 8010690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010694:	79fa      	ldrb	r2, [r7, #7]
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	4613      	mov	r3, r2
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	68b9      	ldr	r1, [r7, #8]
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f000 f805 	bl	80106b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80106a6:	69bb      	ldr	r3, [r7, #24]
	}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3720      	adds	r7, #32
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	607a      	str	r2, [r7, #4]
 80106bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d103      	bne.n	80106cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	69ba      	ldr	r2, [r7, #24]
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	e002      	b.n	80106d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	68fa      	ldr	r2, [r7, #12]
 80106d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	68ba      	ldr	r2, [r7, #8]
 80106dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80106de:	2101      	movs	r1, #1
 80106e0:	69b8      	ldr	r0, [r7, #24]
 80106e2:	f7ff fecb 	bl	801047c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	78fa      	ldrb	r2, [r7, #3]
 80106ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80106ee:	bf00      	nop
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b08a      	sub	sp, #40	; 0x28
 80106fa:	af02      	add	r7, sp, #8
 80106fc:	60f8      	str	r0, [r7, #12]
 80106fe:	60b9      	str	r1, [r7, #8]
 8010700:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d10a      	bne.n	801071e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070c:	f383 8811 	msr	BASEPRI, r3
 8010710:	f3bf 8f6f 	isb	sy
 8010714:	f3bf 8f4f 	dsb	sy
 8010718:	61bb      	str	r3, [r7, #24]
}
 801071a:	bf00      	nop
 801071c:	e7fe      	b.n	801071c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	429a      	cmp	r2, r3
 8010724:	d90a      	bls.n	801073c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072a:	f383 8811 	msr	BASEPRI, r3
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	f3bf 8f4f 	dsb	sy
 8010736:	617b      	str	r3, [r7, #20]
}
 8010738:	bf00      	nop
 801073a:	e7fe      	b.n	801073a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801073c:	2302      	movs	r3, #2
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2200      	movs	r2, #0
 8010744:	2100      	movs	r1, #0
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f7ff ff00 	bl	801054c <xQueueGenericCreateStatic>
 801074c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801074e:	69fb      	ldr	r3, [r7, #28]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d002      	beq.n	801075a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	68ba      	ldr	r2, [r7, #8]
 8010758:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801075a:	69fb      	ldr	r3, [r7, #28]
	}
 801075c:	4618      	mov	r0, r3
 801075e:	3720      	adds	r7, #32
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d10a      	bne.n	801078a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010778:	f383 8811 	msr	BASEPRI, r3
 801077c:	f3bf 8f6f 	isb	sy
 8010780:	f3bf 8f4f 	dsb	sy
 8010784:	613b      	str	r3, [r7, #16]
}
 8010786:	bf00      	nop
 8010788:	e7fe      	b.n	8010788 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801078a:	683a      	ldr	r2, [r7, #0]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	429a      	cmp	r2, r3
 8010790:	d90a      	bls.n	80107a8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	60fb      	str	r3, [r7, #12]
}
 80107a4:	bf00      	nop
 80107a6:	e7fe      	b.n	80107a6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80107a8:	2202      	movs	r2, #2
 80107aa:	2100      	movs	r1, #0
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7ff ff45 	bl	801063c <xQueueGenericCreate>
 80107b2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d002      	beq.n	80107c0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	683a      	ldr	r2, [r7, #0]
 80107be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80107c0:	697b      	ldr	r3, [r7, #20]
	}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3718      	adds	r7, #24
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
	...

080107cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b08e      	sub	sp, #56	; 0x38
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	607a      	str	r2, [r7, #4]
 80107d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80107da:	2300      	movs	r3, #0
 80107dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10a      	bne.n	80107fe <xQueueGenericSend+0x32>
	__asm volatile
 80107e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ec:	f383 8811 	msr	BASEPRI, r3
 80107f0:	f3bf 8f6f 	isb	sy
 80107f4:	f3bf 8f4f 	dsb	sy
 80107f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80107fa:	bf00      	nop
 80107fc:	e7fe      	b.n	80107fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d103      	bne.n	801080c <xQueueGenericSend+0x40>
 8010804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010808:	2b00      	cmp	r3, #0
 801080a:	d101      	bne.n	8010810 <xQueueGenericSend+0x44>
 801080c:	2301      	movs	r3, #1
 801080e:	e000      	b.n	8010812 <xQueueGenericSend+0x46>
 8010810:	2300      	movs	r3, #0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d10a      	bne.n	801082c <xQueueGenericSend+0x60>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010828:	bf00      	nop
 801082a:	e7fe      	b.n	801082a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	2b02      	cmp	r3, #2
 8010830:	d103      	bne.n	801083a <xQueueGenericSend+0x6e>
 8010832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010836:	2b01      	cmp	r3, #1
 8010838:	d101      	bne.n	801083e <xQueueGenericSend+0x72>
 801083a:	2301      	movs	r3, #1
 801083c:	e000      	b.n	8010840 <xQueueGenericSend+0x74>
 801083e:	2300      	movs	r3, #0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d10a      	bne.n	801085a <xQueueGenericSend+0x8e>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	623b      	str	r3, [r7, #32]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801085a:	f001 fbd1 	bl	8012000 <xTaskGetSchedulerState>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d102      	bne.n	801086a <xQueueGenericSend+0x9e>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d101      	bne.n	801086e <xQueueGenericSend+0xa2>
 801086a:	2301      	movs	r3, #1
 801086c:	e000      	b.n	8010870 <xQueueGenericSend+0xa4>
 801086e:	2300      	movs	r3, #0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d10a      	bne.n	801088a <xQueueGenericSend+0xbe>
	__asm volatile
 8010874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010878:	f383 8811 	msr	BASEPRI, r3
 801087c:	f3bf 8f6f 	isb	sy
 8010880:	f3bf 8f4f 	dsb	sy
 8010884:	61fb      	str	r3, [r7, #28]
}
 8010886:	bf00      	nop
 8010888:	e7fe      	b.n	8010888 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801088a:	f002 f913 	bl	8012ab4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010896:	429a      	cmp	r2, r3
 8010898:	d302      	bcc.n	80108a0 <xQueueGenericSend+0xd4>
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	2b02      	cmp	r3, #2
 801089e:	d129      	bne.n	80108f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80108a0:	683a      	ldr	r2, [r7, #0]
 80108a2:	68b9      	ldr	r1, [r7, #8]
 80108a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108a6:	f000 fb3a 	bl	8010f1e <prvCopyDataToQueue>
 80108aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d010      	beq.n	80108d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b6:	3324      	adds	r3, #36	; 0x24
 80108b8:	4618      	mov	r0, r3
 80108ba:	f001 f9df 	bl	8011c7c <xTaskRemoveFromEventList>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d013      	beq.n	80108ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80108c4:	4b3f      	ldr	r3, [pc, #252]	; (80109c4 <xQueueGenericSend+0x1f8>)
 80108c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	f3bf 8f4f 	dsb	sy
 80108d0:	f3bf 8f6f 	isb	sy
 80108d4:	e00a      	b.n	80108ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80108d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d007      	beq.n	80108ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80108dc:	4b39      	ldr	r3, [pc, #228]	; (80109c4 <xQueueGenericSend+0x1f8>)
 80108de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80108ec:	f002 f912 	bl	8012b14 <vPortExitCritical>
				return pdPASS;
 80108f0:	2301      	movs	r3, #1
 80108f2:	e063      	b.n	80109bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d103      	bne.n	8010902 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108fa:	f002 f90b 	bl	8012b14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80108fe:	2300      	movs	r3, #0
 8010900:	e05c      	b.n	80109bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010904:	2b00      	cmp	r3, #0
 8010906:	d106      	bne.n	8010916 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010908:	f107 0314 	add.w	r3, r7, #20
 801090c:	4618      	mov	r0, r3
 801090e:	f001 fa19 	bl	8011d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010912:	2301      	movs	r3, #1
 8010914:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010916:	f002 f8fd 	bl	8012b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801091a:	f000 ff73 	bl	8011804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801091e:	f002 f8c9 	bl	8012ab4 <vPortEnterCritical>
 8010922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010928:	b25b      	sxtb	r3, r3
 801092a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801092e:	d103      	bne.n	8010938 <xQueueGenericSend+0x16c>
 8010930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010932:	2200      	movs	r2, #0
 8010934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801093e:	b25b      	sxtb	r3, r3
 8010940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010944:	d103      	bne.n	801094e <xQueueGenericSend+0x182>
 8010946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010948:	2200      	movs	r2, #0
 801094a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801094e:	f002 f8e1 	bl	8012b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010952:	1d3a      	adds	r2, r7, #4
 8010954:	f107 0314 	add.w	r3, r7, #20
 8010958:	4611      	mov	r1, r2
 801095a:	4618      	mov	r0, r3
 801095c:	f001 fa08 	bl	8011d70 <xTaskCheckForTimeOut>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d124      	bne.n	80109b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010968:	f000 fbd1 	bl	801110e <prvIsQueueFull>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d018      	beq.n	80109a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010974:	3310      	adds	r3, #16
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	4611      	mov	r1, r2
 801097a:	4618      	mov	r0, r3
 801097c:	f001 f92e 	bl	8011bdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010982:	f000 fb5c 	bl	801103e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010986:	f000 ff4b 	bl	8011820 <xTaskResumeAll>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	f47f af7c 	bne.w	801088a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010992:	4b0c      	ldr	r3, [pc, #48]	; (80109c4 <xQueueGenericSend+0x1f8>)
 8010994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010998:	601a      	str	r2, [r3, #0]
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	e772      	b.n	801088a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80109a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109a6:	f000 fb4a 	bl	801103e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109aa:	f000 ff39 	bl	8011820 <xTaskResumeAll>
 80109ae:	e76c      	b.n	801088a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80109b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109b2:	f000 fb44 	bl	801103e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109b6:	f000 ff33 	bl	8011820 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80109ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3738      	adds	r7, #56	; 0x38
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	e000ed04 	.word	0xe000ed04

080109c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b090      	sub	sp, #64	; 0x40
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
 80109d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d10a      	bne.n	80109f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80109e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e4:	f383 8811 	msr	BASEPRI, r3
 80109e8:	f3bf 8f6f 	isb	sy
 80109ec:	f3bf 8f4f 	dsb	sy
 80109f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80109f2:	bf00      	nop
 80109f4:	e7fe      	b.n	80109f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d103      	bne.n	8010a04 <xQueueGenericSendFromISR+0x3c>
 80109fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d101      	bne.n	8010a08 <xQueueGenericSendFromISR+0x40>
 8010a04:	2301      	movs	r3, #1
 8010a06:	e000      	b.n	8010a0a <xQueueGenericSendFromISR+0x42>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d10a      	bne.n	8010a24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a12:	f383 8811 	msr	BASEPRI, r3
 8010a16:	f3bf 8f6f 	isb	sy
 8010a1a:	f3bf 8f4f 	dsb	sy
 8010a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010a20:	bf00      	nop
 8010a22:	e7fe      	b.n	8010a22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	2b02      	cmp	r3, #2
 8010a28:	d103      	bne.n	8010a32 <xQueueGenericSendFromISR+0x6a>
 8010a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d101      	bne.n	8010a36 <xQueueGenericSendFromISR+0x6e>
 8010a32:	2301      	movs	r3, #1
 8010a34:	e000      	b.n	8010a38 <xQueueGenericSendFromISR+0x70>
 8010a36:	2300      	movs	r3, #0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d10a      	bne.n	8010a52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a40:	f383 8811 	msr	BASEPRI, r3
 8010a44:	f3bf 8f6f 	isb	sy
 8010a48:	f3bf 8f4f 	dsb	sy
 8010a4c:	623b      	str	r3, [r7, #32]
}
 8010a4e:	bf00      	nop
 8010a50:	e7fe      	b.n	8010a50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a52:	f002 f911 	bl	8012c78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010a56:	f3ef 8211 	mrs	r2, BASEPRI
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	f383 8811 	msr	BASEPRI, r3
 8010a62:	f3bf 8f6f 	isb	sy
 8010a66:	f3bf 8f4f 	dsb	sy
 8010a6a:	61fa      	str	r2, [r7, #28]
 8010a6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010a6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d302      	bcc.n	8010a84 <xQueueGenericSendFromISR+0xbc>
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	2b02      	cmp	r3, #2
 8010a82:	d12f      	bne.n	8010ae4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	68b9      	ldr	r1, [r7, #8]
 8010a98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a9a:	f000 fa40 	bl	8010f1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010aa6:	d112      	bne.n	8010ace <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d016      	beq.n	8010ade <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab2:	3324      	adds	r3, #36	; 0x24
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f001 f8e1 	bl	8011c7c <xTaskRemoveFromEventList>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d00e      	beq.n	8010ade <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00b      	beq.n	8010ade <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	601a      	str	r2, [r3, #0]
 8010acc:	e007      	b.n	8010ade <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ace:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	b25a      	sxtb	r2, r3
 8010ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010ae2:	e001      	b.n	8010ae8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010af2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3740      	adds	r7, #64	; 0x40
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b08e      	sub	sp, #56	; 0x38
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10a      	bne.n	8010b28 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b16:	f383 8811 	msr	BASEPRI, r3
 8010b1a:	f3bf 8f6f 	isb	sy
 8010b1e:	f3bf 8f4f 	dsb	sy
 8010b22:	623b      	str	r3, [r7, #32]
}
 8010b24:	bf00      	nop
 8010b26:	e7fe      	b.n	8010b26 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d00a      	beq.n	8010b46 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b34:	f383 8811 	msr	BASEPRI, r3
 8010b38:	f3bf 8f6f 	isb	sy
 8010b3c:	f3bf 8f4f 	dsb	sy
 8010b40:	61fb      	str	r3, [r7, #28]
}
 8010b42:	bf00      	nop
 8010b44:	e7fe      	b.n	8010b44 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d103      	bne.n	8010b56 <xQueueGiveFromISR+0x58>
 8010b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d101      	bne.n	8010b5a <xQueueGiveFromISR+0x5c>
 8010b56:	2301      	movs	r3, #1
 8010b58:	e000      	b.n	8010b5c <xQueueGiveFromISR+0x5e>
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d10a      	bne.n	8010b76 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b64:	f383 8811 	msr	BASEPRI, r3
 8010b68:	f3bf 8f6f 	isb	sy
 8010b6c:	f3bf 8f4f 	dsb	sy
 8010b70:	61bb      	str	r3, [r7, #24]
}
 8010b72:	bf00      	nop
 8010b74:	e7fe      	b.n	8010b74 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b76:	f002 f87f 	bl	8012c78 <vPortValidateInterruptPriority>
	__asm volatile
 8010b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8010b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	617a      	str	r2, [r7, #20]
 8010b90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010b92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d22b      	bcs.n	8010bfe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb2:	1c5a      	adds	r2, r3, #1
 8010bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bc0:	d112      	bne.n	8010be8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d016      	beq.n	8010bf8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bcc:	3324      	adds	r3, #36	; 0x24
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f001 f854 	bl	8011c7c <xTaskRemoveFromEventList>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d00e      	beq.n	8010bf8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d00b      	beq.n	8010bf8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	2201      	movs	r2, #1
 8010be4:	601a      	str	r2, [r3, #0]
 8010be6:	e007      	b.n	8010bf8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bec:	3301      	adds	r3, #1
 8010bee:	b2db      	uxtb	r3, r3
 8010bf0:	b25a      	sxtb	r2, r3
 8010bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8010bfc:	e001      	b.n	8010c02 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	637b      	str	r3, [r7, #52]	; 0x34
 8010c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f383 8811 	msr	BASEPRI, r3
}
 8010c0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3738      	adds	r7, #56	; 0x38
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b08c      	sub	sp, #48	; 0x30
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010c24:	2300      	movs	r3, #0
 8010c26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10a      	bne.n	8010c48 <xQueueReceive+0x30>
	__asm volatile
 8010c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	623b      	str	r3, [r7, #32]
}
 8010c44:	bf00      	nop
 8010c46:	e7fe      	b.n	8010c46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d103      	bne.n	8010c56 <xQueueReceive+0x3e>
 8010c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d101      	bne.n	8010c5a <xQueueReceive+0x42>
 8010c56:	2301      	movs	r3, #1
 8010c58:	e000      	b.n	8010c5c <xQueueReceive+0x44>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d10a      	bne.n	8010c76 <xQueueReceive+0x5e>
	__asm volatile
 8010c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c64:	f383 8811 	msr	BASEPRI, r3
 8010c68:	f3bf 8f6f 	isb	sy
 8010c6c:	f3bf 8f4f 	dsb	sy
 8010c70:	61fb      	str	r3, [r7, #28]
}
 8010c72:	bf00      	nop
 8010c74:	e7fe      	b.n	8010c74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c76:	f001 f9c3 	bl	8012000 <xTaskGetSchedulerState>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d102      	bne.n	8010c86 <xQueueReceive+0x6e>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d101      	bne.n	8010c8a <xQueueReceive+0x72>
 8010c86:	2301      	movs	r3, #1
 8010c88:	e000      	b.n	8010c8c <xQueueReceive+0x74>
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d10a      	bne.n	8010ca6 <xQueueReceive+0x8e>
	__asm volatile
 8010c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c94:	f383 8811 	msr	BASEPRI, r3
 8010c98:	f3bf 8f6f 	isb	sy
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	61bb      	str	r3, [r7, #24]
}
 8010ca2:	bf00      	nop
 8010ca4:	e7fe      	b.n	8010ca4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ca6:	f001 ff05 	bl	8012ab4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d01f      	beq.n	8010cf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010cb6:	68b9      	ldr	r1, [r7, #8]
 8010cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cba:	f000 f99a 	bl	8010ff2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	1e5a      	subs	r2, r3, #1
 8010cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc8:	691b      	ldr	r3, [r3, #16]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00f      	beq.n	8010cee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd0:	3310      	adds	r3, #16
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f000 ffd2 	bl	8011c7c <xTaskRemoveFromEventList>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d007      	beq.n	8010cee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010cde:	4b3d      	ldr	r3, [pc, #244]	; (8010dd4 <xQueueReceive+0x1bc>)
 8010ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010cee:	f001 ff11 	bl	8012b14 <vPortExitCritical>
				return pdPASS;
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e069      	b.n	8010dca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d103      	bne.n	8010d04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010cfc:	f001 ff0a 	bl	8012b14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d00:	2300      	movs	r3, #0
 8010d02:	e062      	b.n	8010dca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d106      	bne.n	8010d18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d0a:	f107 0310 	add.w	r3, r7, #16
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f001 f818 	bl	8011d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d14:	2301      	movs	r3, #1
 8010d16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d18:	f001 fefc 	bl	8012b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d1c:	f000 fd72 	bl	8011804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d20:	f001 fec8 	bl	8012ab4 <vPortEnterCritical>
 8010d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d2a:	b25b      	sxtb	r3, r3
 8010d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d30:	d103      	bne.n	8010d3a <xQueueReceive+0x122>
 8010d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d34:	2200      	movs	r2, #0
 8010d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d40:	b25b      	sxtb	r3, r3
 8010d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d46:	d103      	bne.n	8010d50 <xQueueReceive+0x138>
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d50:	f001 fee0 	bl	8012b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d54:	1d3a      	adds	r2, r7, #4
 8010d56:	f107 0310 	add.w	r3, r7, #16
 8010d5a:	4611      	mov	r1, r2
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f001 f807 	bl	8011d70 <xTaskCheckForTimeOut>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d123      	bne.n	8010db0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d6a:	f000 f9ba 	bl	80110e2 <prvIsQueueEmpty>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d017      	beq.n	8010da4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d76:	3324      	adds	r3, #36	; 0x24
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 ff2d 	bl	8011bdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d84:	f000 f95b 	bl	801103e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010d88:	f000 fd4a 	bl	8011820 <xTaskResumeAll>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d189      	bne.n	8010ca6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010d92:	4b10      	ldr	r3, [pc, #64]	; (8010dd4 <xQueueReceive+0x1bc>)
 8010d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d98:	601a      	str	r2, [r3, #0]
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	f3bf 8f6f 	isb	sy
 8010da2:	e780      	b.n	8010ca6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010da6:	f000 f94a 	bl	801103e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010daa:	f000 fd39 	bl	8011820 <xTaskResumeAll>
 8010dae:	e77a      	b.n	8010ca6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010db2:	f000 f944 	bl	801103e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010db6:	f000 fd33 	bl	8011820 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dbc:	f000 f991 	bl	80110e2 <prvIsQueueEmpty>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f43f af6f 	beq.w	8010ca6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010dc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3730      	adds	r7, #48	; 0x30
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	e000ed04 	.word	0xe000ed04

08010dd8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b08e      	sub	sp, #56	; 0x38
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d10a      	bne.n	8010e04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df2:	f383 8811 	msr	BASEPRI, r3
 8010df6:	f3bf 8f6f 	isb	sy
 8010dfa:	f3bf 8f4f 	dsb	sy
 8010dfe:	623b      	str	r3, [r7, #32]
}
 8010e00:	bf00      	nop
 8010e02:	e7fe      	b.n	8010e02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d103      	bne.n	8010e12 <xQueueReceiveFromISR+0x3a>
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d101      	bne.n	8010e16 <xQueueReceiveFromISR+0x3e>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e000      	b.n	8010e18 <xQueueReceiveFromISR+0x40>
 8010e16:	2300      	movs	r3, #0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10a      	bne.n	8010e32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e20:	f383 8811 	msr	BASEPRI, r3
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	61fb      	str	r3, [r7, #28]
}
 8010e2e:	bf00      	nop
 8010e30:	e7fe      	b.n	8010e30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e32:	f001 ff21 	bl	8012c78 <vPortValidateInterruptPriority>
	__asm volatile
 8010e36:	f3ef 8211 	mrs	r2, BASEPRI
 8010e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e3e:	f383 8811 	msr	BASEPRI, r3
 8010e42:	f3bf 8f6f 	isb	sy
 8010e46:	f3bf 8f4f 	dsb	sy
 8010e4a:	61ba      	str	r2, [r7, #24]
 8010e4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010e4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d02f      	beq.n	8010ebe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e68:	68b9      	ldr	r1, [r7, #8]
 8010e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e6c:	f000 f8c1 	bl	8010ff2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e72:	1e5a      	subs	r2, r3, #1
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010e78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e80:	d112      	bne.n	8010ea8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e84:	691b      	ldr	r3, [r3, #16]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d016      	beq.n	8010eb8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8c:	3310      	adds	r3, #16
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f000 fef4 	bl	8011c7c <xTaskRemoveFromEventList>
 8010e94:	4603      	mov	r3, r0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d00e      	beq.n	8010eb8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00b      	beq.n	8010eb8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	601a      	str	r2, [r3, #0]
 8010ea6:	e007      	b.n	8010eb8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010eac:	3301      	adds	r3, #1
 8010eae:	b2db      	uxtb	r3, r3
 8010eb0:	b25a      	sxtb	r2, r3
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	637b      	str	r3, [r7, #52]	; 0x34
 8010ebc:	e001      	b.n	8010ec2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8010ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	f383 8811 	msr	BASEPRI, r3
}
 8010ecc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3738      	adds	r7, #56	; 0x38
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d10a      	bne.n	8010f00 <vQueueDelete+0x28>
	__asm volatile
 8010eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eee:	f383 8811 	msr	BASEPRI, r3
 8010ef2:	f3bf 8f6f 	isb	sy
 8010ef6:	f3bf 8f4f 	dsb	sy
 8010efa:	60bb      	str	r3, [r7, #8]
}
 8010efc:	bf00      	nop
 8010efe:	e7fe      	b.n	8010efe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f000 f947 	bl	8011194 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d102      	bne.n	8010f16 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f001 ffbd 	bl	8012e90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010f16:	bf00      	nop
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b086      	sub	sp, #24
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	60f8      	str	r0, [r7, #12]
 8010f26:	60b9      	str	r1, [r7, #8]
 8010f28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10d      	bne.n	8010f58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d14d      	bne.n	8010fe0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	689b      	ldr	r3, [r3, #8]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f001 f877 	bl	801203c <xTaskPriorityDisinherit>
 8010f4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2200      	movs	r2, #0
 8010f54:	609a      	str	r2, [r3, #8]
 8010f56:	e043      	b.n	8010fe0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d119      	bne.n	8010f92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	6858      	ldr	r0, [r3, #4]
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f66:	461a      	mov	r2, r3
 8010f68:	68b9      	ldr	r1, [r7, #8]
 8010f6a:	f002 ffd1 	bl	8013f10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	685a      	ldr	r2, [r3, #4]
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f76:	441a      	add	r2, r3
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	685a      	ldr	r2, [r3, #4]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	689b      	ldr	r3, [r3, #8]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d32b      	bcc.n	8010fe0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	605a      	str	r2, [r3, #4]
 8010f90:	e026      	b.n	8010fe0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	68d8      	ldr	r0, [r3, #12]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	68b9      	ldr	r1, [r7, #8]
 8010f9e:	f002 ffb7 	bl	8013f10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	68da      	ldr	r2, [r3, #12]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010faa:	425b      	negs	r3, r3
 8010fac:	441a      	add	r2, r3
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	68da      	ldr	r2, [r3, #12]
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d207      	bcs.n	8010fce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	689a      	ldr	r2, [r3, #8]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fc6:	425b      	negs	r3, r3
 8010fc8:	441a      	add	r2, r3
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	d105      	bne.n	8010fe0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d002      	beq.n	8010fe0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	1c5a      	adds	r2, r3, #1
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010fe8:	697b      	ldr	r3, [r7, #20]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3718      	adds	r7, #24
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b082      	sub	sp, #8
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
 8010ffa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011000:	2b00      	cmp	r3, #0
 8011002:	d018      	beq.n	8011036 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68da      	ldr	r2, [r3, #12]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801100c:	441a      	add	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	68da      	ldr	r2, [r3, #12]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	429a      	cmp	r2, r3
 801101c:	d303      	bcc.n	8011026 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681a      	ldr	r2, [r3, #0]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	68d9      	ldr	r1, [r3, #12]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801102e:	461a      	mov	r2, r3
 8011030:	6838      	ldr	r0, [r7, #0]
 8011032:	f002 ff6d 	bl	8013f10 <memcpy>
	}
}
 8011036:	bf00      	nop
 8011038:	3708      	adds	r7, #8
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011046:	f001 fd35 	bl	8012ab4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011050:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011052:	e011      	b.n	8011078 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011058:	2b00      	cmp	r3, #0
 801105a:	d012      	beq.n	8011082 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	3324      	adds	r3, #36	; 0x24
 8011060:	4618      	mov	r0, r3
 8011062:	f000 fe0b 	bl	8011c7c <xTaskRemoveFromEventList>
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d001      	beq.n	8011070 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801106c:	f000 fee2 	bl	8011e34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011070:	7bfb      	ldrb	r3, [r7, #15]
 8011072:	3b01      	subs	r3, #1
 8011074:	b2db      	uxtb	r3, r3
 8011076:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801107c:	2b00      	cmp	r3, #0
 801107e:	dce9      	bgt.n	8011054 <prvUnlockQueue+0x16>
 8011080:	e000      	b.n	8011084 <prvUnlockQueue+0x46>
					break;
 8011082:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	22ff      	movs	r2, #255	; 0xff
 8011088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801108c:	f001 fd42 	bl	8012b14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011090:	f001 fd10 	bl	8012ab4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801109a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801109c:	e011      	b.n	80110c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	691b      	ldr	r3, [r3, #16]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d012      	beq.n	80110cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	3310      	adds	r3, #16
 80110aa:	4618      	mov	r0, r3
 80110ac:	f000 fde6 	bl	8011c7c <xTaskRemoveFromEventList>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d001      	beq.n	80110ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80110b6:	f000 febd 	bl	8011e34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80110ba:	7bbb      	ldrb	r3, [r7, #14]
 80110bc:	3b01      	subs	r3, #1
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80110c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	dce9      	bgt.n	801109e <prvUnlockQueue+0x60>
 80110ca:	e000      	b.n	80110ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80110cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	22ff      	movs	r2, #255	; 0xff
 80110d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80110d6:	f001 fd1d 	bl	8012b14 <vPortExitCritical>
}
 80110da:	bf00      	nop
 80110dc:	3710      	adds	r7, #16
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b084      	sub	sp, #16
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80110ea:	f001 fce3 	bl	8012ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d102      	bne.n	80110fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80110f6:	2301      	movs	r3, #1
 80110f8:	60fb      	str	r3, [r7, #12]
 80110fa:	e001      	b.n	8011100 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80110fc:	2300      	movs	r3, #0
 80110fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011100:	f001 fd08 	bl	8012b14 <vPortExitCritical>

	return xReturn;
 8011104:	68fb      	ldr	r3, [r7, #12]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b084      	sub	sp, #16
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011116:	f001 fccd 	bl	8012ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011122:	429a      	cmp	r2, r3
 8011124:	d102      	bne.n	801112c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011126:	2301      	movs	r3, #1
 8011128:	60fb      	str	r3, [r7, #12]
 801112a:	e001      	b.n	8011130 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801112c:	2300      	movs	r3, #0
 801112e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011130:	f001 fcf0 	bl	8012b14 <vPortExitCritical>

	return xReturn;
 8011134:	68fb      	ldr	r3, [r7, #12]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
	...

08011140 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801114a:	2300      	movs	r3, #0
 801114c:	60fb      	str	r3, [r7, #12]
 801114e:	e014      	b.n	801117a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011150:	4a0f      	ldr	r2, [pc, #60]	; (8011190 <vQueueAddToRegistry+0x50>)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10b      	bne.n	8011174 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801115c:	490c      	ldr	r1, [pc, #48]	; (8011190 <vQueueAddToRegistry+0x50>)
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	683a      	ldr	r2, [r7, #0]
 8011162:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011166:	4a0a      	ldr	r2, [pc, #40]	; (8011190 <vQueueAddToRegistry+0x50>)
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	00db      	lsls	r3, r3, #3
 801116c:	4413      	add	r3, r2
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011172:	e006      	b.n	8011182 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	3301      	adds	r3, #1
 8011178:	60fb      	str	r3, [r7, #12]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2b07      	cmp	r3, #7
 801117e:	d9e7      	bls.n	8011150 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011180:	bf00      	nop
 8011182:	bf00      	nop
 8011184:	3714      	adds	r7, #20
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr
 801118e:	bf00      	nop
 8011190:	20001074 	.word	0x20001074

08011194 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011194:	b480      	push	{r7}
 8011196:	b085      	sub	sp, #20
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801119c:	2300      	movs	r3, #0
 801119e:	60fb      	str	r3, [r7, #12]
 80111a0:	e016      	b.n	80111d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80111a2:	4a10      	ldr	r2, [pc, #64]	; (80111e4 <vQueueUnregisterQueue+0x50>)
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	00db      	lsls	r3, r3, #3
 80111a8:	4413      	add	r3, r2
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d10b      	bne.n	80111ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80111b2:	4a0c      	ldr	r2, [pc, #48]	; (80111e4 <vQueueUnregisterQueue+0x50>)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2100      	movs	r1, #0
 80111b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80111bc:	4a09      	ldr	r2, [pc, #36]	; (80111e4 <vQueueUnregisterQueue+0x50>)
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	00db      	lsls	r3, r3, #3
 80111c2:	4413      	add	r3, r2
 80111c4:	2200      	movs	r2, #0
 80111c6:	605a      	str	r2, [r3, #4]
				break;
 80111c8:	e006      	b.n	80111d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	3301      	adds	r3, #1
 80111ce:	60fb      	str	r3, [r7, #12]
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2b07      	cmp	r3, #7
 80111d4:	d9e5      	bls.n	80111a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80111d6:	bf00      	nop
 80111d8:	bf00      	nop
 80111da:	3714      	adds	r7, #20
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	20001074 	.word	0x20001074

080111e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b086      	sub	sp, #24
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80111f8:	f001 fc5c 	bl	8012ab4 <vPortEnterCritical>
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011202:	b25b      	sxtb	r3, r3
 8011204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011208:	d103      	bne.n	8011212 <vQueueWaitForMessageRestricted+0x2a>
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	2200      	movs	r2, #0
 801120e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011218:	b25b      	sxtb	r3, r3
 801121a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801121e:	d103      	bne.n	8011228 <vQueueWaitForMessageRestricted+0x40>
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	2200      	movs	r2, #0
 8011224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011228:	f001 fc74 	bl	8012b14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011230:	2b00      	cmp	r3, #0
 8011232:	d106      	bne.n	8011242 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	3324      	adds	r3, #36	; 0x24
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	68b9      	ldr	r1, [r7, #8]
 801123c:	4618      	mov	r0, r3
 801123e:	f000 fcf1 	bl	8011c24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011242:	6978      	ldr	r0, [r7, #20]
 8011244:	f7ff fefb 	bl	801103e <prvUnlockQueue>
	}
 8011248:	bf00      	nop
 801124a:	3718      	adds	r7, #24
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}

08011250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011250:	b580      	push	{r7, lr}
 8011252:	b08e      	sub	sp, #56	; 0x38
 8011254:	af04      	add	r7, sp, #16
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]
 801125c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011260:	2b00      	cmp	r3, #0
 8011262:	d10a      	bne.n	801127a <xTaskCreateStatic+0x2a>
	__asm volatile
 8011264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011268:	f383 8811 	msr	BASEPRI, r3
 801126c:	f3bf 8f6f 	isb	sy
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	623b      	str	r3, [r7, #32]
}
 8011276:	bf00      	nop
 8011278:	e7fe      	b.n	8011278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127c:	2b00      	cmp	r3, #0
 801127e:	d10a      	bne.n	8011296 <xTaskCreateStatic+0x46>
	__asm volatile
 8011280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011284:	f383 8811 	msr	BASEPRI, r3
 8011288:	f3bf 8f6f 	isb	sy
 801128c:	f3bf 8f4f 	dsb	sy
 8011290:	61fb      	str	r3, [r7, #28]
}
 8011292:	bf00      	nop
 8011294:	e7fe      	b.n	8011294 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011296:	23bc      	movs	r3, #188	; 0xbc
 8011298:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	2bbc      	cmp	r3, #188	; 0xbc
 801129e:	d00a      	beq.n	80112b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80112a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a4:	f383 8811 	msr	BASEPRI, r3
 80112a8:	f3bf 8f6f 	isb	sy
 80112ac:	f3bf 8f4f 	dsb	sy
 80112b0:	61bb      	str	r3, [r7, #24]
}
 80112b2:	bf00      	nop
 80112b4:	e7fe      	b.n	80112b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80112b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80112b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d01e      	beq.n	80112fc <xTaskCreateStatic+0xac>
 80112be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d01b      	beq.n	80112fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80112c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80112ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d0:	2202      	movs	r2, #2
 80112d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80112d6:	2300      	movs	r3, #0
 80112d8:	9303      	str	r3, [sp, #12]
 80112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112dc:	9302      	str	r3, [sp, #8]
 80112de:	f107 0314 	add.w	r3, r7, #20
 80112e2:	9301      	str	r3, [sp, #4]
 80112e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	68b9      	ldr	r1, [r7, #8]
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f000 f850 	bl	8011394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80112f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112f6:	f000 f8f3 	bl	80114e0 <prvAddNewTaskToReadyList>
 80112fa:	e001      	b.n	8011300 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80112fc:	2300      	movs	r3, #0
 80112fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011300:	697b      	ldr	r3, [r7, #20]
	}
 8011302:	4618      	mov	r0, r3
 8011304:	3728      	adds	r7, #40	; 0x28
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}

0801130a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801130a:	b580      	push	{r7, lr}
 801130c:	b08c      	sub	sp, #48	; 0x30
 801130e:	af04      	add	r7, sp, #16
 8011310:	60f8      	str	r0, [r7, #12]
 8011312:	60b9      	str	r1, [r7, #8]
 8011314:	603b      	str	r3, [r7, #0]
 8011316:	4613      	mov	r3, r2
 8011318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801131a:	88fb      	ldrh	r3, [r7, #6]
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	4618      	mov	r0, r3
 8011320:	f001 fcea 	bl	8012cf8 <pvPortMalloc>
 8011324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00e      	beq.n	801134a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801132c:	20bc      	movs	r0, #188	; 0xbc
 801132e:	f001 fce3 	bl	8012cf8 <pvPortMalloc>
 8011332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d003      	beq.n	8011342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	697a      	ldr	r2, [r7, #20]
 801133e:	631a      	str	r2, [r3, #48]	; 0x30
 8011340:	e005      	b.n	801134e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011342:	6978      	ldr	r0, [r7, #20]
 8011344:	f001 fda4 	bl	8012e90 <vPortFree>
 8011348:	e001      	b.n	801134e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801134a:	2300      	movs	r3, #0
 801134c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d017      	beq.n	8011384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	2200      	movs	r2, #0
 8011358:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801135c:	88fa      	ldrh	r2, [r7, #6]
 801135e:	2300      	movs	r3, #0
 8011360:	9303      	str	r3, [sp, #12]
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	9302      	str	r3, [sp, #8]
 8011366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011368:	9301      	str	r3, [sp, #4]
 801136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	68b9      	ldr	r1, [r7, #8]
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f000 f80e 	bl	8011394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011378:	69f8      	ldr	r0, [r7, #28]
 801137a:	f000 f8b1 	bl	80114e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801137e:	2301      	movs	r3, #1
 8011380:	61bb      	str	r3, [r7, #24]
 8011382:	e002      	b.n	801138a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801138a:	69bb      	ldr	r3, [r7, #24]
	}
 801138c:	4618      	mov	r0, r3
 801138e:	3720      	adds	r7, #32
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b088      	sub	sp, #32
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
 80113a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80113a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	461a      	mov	r2, r3
 80113ac:	21a5      	movs	r1, #165	; 0xa5
 80113ae:	f002 fdbd 	bl	8013f2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80113b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80113bc:	3b01      	subs	r3, #1
 80113be:	009b      	lsls	r3, r3, #2
 80113c0:	4413      	add	r3, r2
 80113c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	f023 0307 	bic.w	r3, r3, #7
 80113ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80113cc:	69bb      	ldr	r3, [r7, #24]
 80113ce:	f003 0307 	and.w	r3, r3, #7
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d00a      	beq.n	80113ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80113d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113da:	f383 8811 	msr	BASEPRI, r3
 80113de:	f3bf 8f6f 	isb	sy
 80113e2:	f3bf 8f4f 	dsb	sy
 80113e6:	617b      	str	r3, [r7, #20]
}
 80113e8:	bf00      	nop
 80113ea:	e7fe      	b.n	80113ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d01f      	beq.n	8011432 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80113f2:	2300      	movs	r3, #0
 80113f4:	61fb      	str	r3, [r7, #28]
 80113f6:	e012      	b.n	801141e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	4413      	add	r3, r2
 80113fe:	7819      	ldrb	r1, [r3, #0]
 8011400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	4413      	add	r3, r2
 8011406:	3334      	adds	r3, #52	; 0x34
 8011408:	460a      	mov	r2, r1
 801140a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801140c:	68ba      	ldr	r2, [r7, #8]
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	4413      	add	r3, r2
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d006      	beq.n	8011426 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	3301      	adds	r3, #1
 801141c:	61fb      	str	r3, [r7, #28]
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	2b0f      	cmp	r3, #15
 8011422:	d9e9      	bls.n	80113f8 <prvInitialiseNewTask+0x64>
 8011424:	e000      	b.n	8011428 <prvInitialiseNewTask+0x94>
			{
				break;
 8011426:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142a:	2200      	movs	r2, #0
 801142c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011430:	e003      	b.n	801143a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011434:	2200      	movs	r2, #0
 8011436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143c:	2b37      	cmp	r3, #55	; 0x37
 801143e:	d901      	bls.n	8011444 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011440:	2337      	movs	r3, #55	; 0x37
 8011442:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011448:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801144e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011452:	2200      	movs	r2, #0
 8011454:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011458:	3304      	adds	r3, #4
 801145a:	4618      	mov	r0, r3
 801145c:	f7fe ff7a 	bl	8010354 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011462:	3318      	adds	r3, #24
 8011464:	4618      	mov	r0, r3
 8011466:	f7fe ff75 	bl	8010354 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801146e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011472:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011478:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801147a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801147e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011482:	2200      	movs	r2, #0
 8011484:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148a:	2200      	movs	r2, #0
 801148c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011492:	3354      	adds	r3, #84	; 0x54
 8011494:	2260      	movs	r2, #96	; 0x60
 8011496:	2100      	movs	r1, #0
 8011498:	4618      	mov	r0, r3
 801149a:	f002 fd47 	bl	8013f2c <memset>
 801149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a0:	4a0c      	ldr	r2, [pc, #48]	; (80114d4 <prvInitialiseNewTask+0x140>)
 80114a2:	659a      	str	r2, [r3, #88]	; 0x58
 80114a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a6:	4a0c      	ldr	r2, [pc, #48]	; (80114d8 <prvInitialiseNewTask+0x144>)
 80114a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80114aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ac:	4a0b      	ldr	r2, [pc, #44]	; (80114dc <prvInitialiseNewTask+0x148>)
 80114ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80114b0:	683a      	ldr	r2, [r7, #0]
 80114b2:	68f9      	ldr	r1, [r7, #12]
 80114b4:	69b8      	ldr	r0, [r7, #24]
 80114b6:	f001 f9d1 	bl	801285c <pxPortInitialiseStack>
 80114ba:	4602      	mov	r2, r0
 80114bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80114c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d002      	beq.n	80114cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80114c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114cc:	bf00      	nop
 80114ce:	3720      	adds	r7, #32
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	08014360 	.word	0x08014360
 80114d8:	08014380 	.word	0x08014380
 80114dc:	08014340 	.word	0x08014340

080114e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80114e8:	f001 fae4 	bl	8012ab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80114ec:	4b2d      	ldr	r3, [pc, #180]	; (80115a4 <prvAddNewTaskToReadyList+0xc4>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	3301      	adds	r3, #1
 80114f2:	4a2c      	ldr	r2, [pc, #176]	; (80115a4 <prvAddNewTaskToReadyList+0xc4>)
 80114f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80114f6:	4b2c      	ldr	r3, [pc, #176]	; (80115a8 <prvAddNewTaskToReadyList+0xc8>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d109      	bne.n	8011512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80114fe:	4a2a      	ldr	r2, [pc, #168]	; (80115a8 <prvAddNewTaskToReadyList+0xc8>)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011504:	4b27      	ldr	r3, [pc, #156]	; (80115a4 <prvAddNewTaskToReadyList+0xc4>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b01      	cmp	r3, #1
 801150a:	d110      	bne.n	801152e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801150c:	f000 fcb6 	bl	8011e7c <prvInitialiseTaskLists>
 8011510:	e00d      	b.n	801152e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011512:	4b26      	ldr	r3, [pc, #152]	; (80115ac <prvAddNewTaskToReadyList+0xcc>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d109      	bne.n	801152e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801151a:	4b23      	ldr	r3, [pc, #140]	; (80115a8 <prvAddNewTaskToReadyList+0xc8>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011524:	429a      	cmp	r2, r3
 8011526:	d802      	bhi.n	801152e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011528:	4a1f      	ldr	r2, [pc, #124]	; (80115a8 <prvAddNewTaskToReadyList+0xc8>)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801152e:	4b20      	ldr	r3, [pc, #128]	; (80115b0 <prvAddNewTaskToReadyList+0xd0>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	3301      	adds	r3, #1
 8011534:	4a1e      	ldr	r2, [pc, #120]	; (80115b0 <prvAddNewTaskToReadyList+0xd0>)
 8011536:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011538:	4b1d      	ldr	r3, [pc, #116]	; (80115b0 <prvAddNewTaskToReadyList+0xd0>)
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011544:	4b1b      	ldr	r3, [pc, #108]	; (80115b4 <prvAddNewTaskToReadyList+0xd4>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	429a      	cmp	r2, r3
 801154a:	d903      	bls.n	8011554 <prvAddNewTaskToReadyList+0x74>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011550:	4a18      	ldr	r2, [pc, #96]	; (80115b4 <prvAddNewTaskToReadyList+0xd4>)
 8011552:	6013      	str	r3, [r2, #0]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	4a15      	ldr	r2, [pc, #84]	; (80115b8 <prvAddNewTaskToReadyList+0xd8>)
 8011562:	441a      	add	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	3304      	adds	r3, #4
 8011568:	4619      	mov	r1, r3
 801156a:	4610      	mov	r0, r2
 801156c:	f7fe feff 	bl	801036e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011570:	f001 fad0 	bl	8012b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011574:	4b0d      	ldr	r3, [pc, #52]	; (80115ac <prvAddNewTaskToReadyList+0xcc>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d00e      	beq.n	801159a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801157c:	4b0a      	ldr	r3, [pc, #40]	; (80115a8 <prvAddNewTaskToReadyList+0xc8>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011586:	429a      	cmp	r2, r3
 8011588:	d207      	bcs.n	801159a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801158a:	4b0c      	ldr	r3, [pc, #48]	; (80115bc <prvAddNewTaskToReadyList+0xdc>)
 801158c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011590:	601a      	str	r2, [r3, #0]
 8011592:	f3bf 8f4f 	dsb	sy
 8011596:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801159a:	bf00      	nop
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	20001588 	.word	0x20001588
 80115a8:	200010b4 	.word	0x200010b4
 80115ac:	20001594 	.word	0x20001594
 80115b0:	200015a4 	.word	0x200015a4
 80115b4:	20001590 	.word	0x20001590
 80115b8:	200010b8 	.word	0x200010b8
 80115bc:	e000ed04 	.word	0xe000ed04

080115c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b08a      	sub	sp, #40	; 0x28
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80115ca:	2300      	movs	r3, #0
 80115cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d10a      	bne.n	80115ea <vTaskDelayUntil+0x2a>
	__asm volatile
 80115d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d8:	f383 8811 	msr	BASEPRI, r3
 80115dc:	f3bf 8f6f 	isb	sy
 80115e0:	f3bf 8f4f 	dsb	sy
 80115e4:	617b      	str	r3, [r7, #20]
}
 80115e6:	bf00      	nop
 80115e8:	e7fe      	b.n	80115e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d10a      	bne.n	8011606 <vTaskDelayUntil+0x46>
	__asm volatile
 80115f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f4:	f383 8811 	msr	BASEPRI, r3
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	f3bf 8f4f 	dsb	sy
 8011600:	613b      	str	r3, [r7, #16]
}
 8011602:	bf00      	nop
 8011604:	e7fe      	b.n	8011604 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8011606:	4b2a      	ldr	r3, [pc, #168]	; (80116b0 <vTaskDelayUntil+0xf0>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00a      	beq.n	8011624 <vTaskDelayUntil+0x64>
	__asm volatile
 801160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	60fb      	str	r3, [r7, #12]
}
 8011620:	bf00      	nop
 8011622:	e7fe      	b.n	8011622 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8011624:	f000 f8ee 	bl	8011804 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011628:	4b22      	ldr	r3, [pc, #136]	; (80116b4 <vTaskDelayUntil+0xf4>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	683a      	ldr	r2, [r7, #0]
 8011634:	4413      	add	r3, r2
 8011636:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	6a3a      	ldr	r2, [r7, #32]
 801163e:	429a      	cmp	r2, r3
 8011640:	d20b      	bcs.n	801165a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	69fa      	ldr	r2, [r7, #28]
 8011648:	429a      	cmp	r2, r3
 801164a:	d211      	bcs.n	8011670 <vTaskDelayUntil+0xb0>
 801164c:	69fa      	ldr	r2, [r7, #28]
 801164e:	6a3b      	ldr	r3, [r7, #32]
 8011650:	429a      	cmp	r2, r3
 8011652:	d90d      	bls.n	8011670 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011654:	2301      	movs	r3, #1
 8011656:	627b      	str	r3, [r7, #36]	; 0x24
 8011658:	e00a      	b.n	8011670 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	69fa      	ldr	r2, [r7, #28]
 8011660:	429a      	cmp	r2, r3
 8011662:	d303      	bcc.n	801166c <vTaskDelayUntil+0xac>
 8011664:	69fa      	ldr	r2, [r7, #28]
 8011666:	6a3b      	ldr	r3, [r7, #32]
 8011668:	429a      	cmp	r2, r3
 801166a:	d901      	bls.n	8011670 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801166c:	2301      	movs	r3, #1
 801166e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	69fa      	ldr	r2, [r7, #28]
 8011674:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011678:	2b00      	cmp	r3, #0
 801167a:	d006      	beq.n	801168a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801167c:	69fa      	ldr	r2, [r7, #28]
 801167e:	6a3b      	ldr	r3, [r7, #32]
 8011680:	1ad3      	subs	r3, r2, r3
 8011682:	2100      	movs	r1, #0
 8011684:	4618      	mov	r0, r3
 8011686:	f000 fd47 	bl	8012118 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801168a:	f000 f8c9 	bl	8011820 <xTaskResumeAll>
 801168e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d107      	bne.n	80116a6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8011696:	4b08      	ldr	r3, [pc, #32]	; (80116b8 <vTaskDelayUntil+0xf8>)
 8011698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	f3bf 8f4f 	dsb	sy
 80116a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116a6:	bf00      	nop
 80116a8:	3728      	adds	r7, #40	; 0x28
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	200015b0 	.word	0x200015b0
 80116b4:	2000158c 	.word	0x2000158c
 80116b8:	e000ed04 	.word	0xe000ed04

080116bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80116c4:	2300      	movs	r3, #0
 80116c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d017      	beq.n	80116fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80116ce:	4b13      	ldr	r3, [pc, #76]	; (801171c <vTaskDelay+0x60>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00a      	beq.n	80116ec <vTaskDelay+0x30>
	__asm volatile
 80116d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	60bb      	str	r3, [r7, #8]
}
 80116e8:	bf00      	nop
 80116ea:	e7fe      	b.n	80116ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80116ec:	f000 f88a 	bl	8011804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80116f0:	2100      	movs	r1, #0
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 fd10 	bl	8012118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80116f8:	f000 f892 	bl	8011820 <xTaskResumeAll>
 80116fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d107      	bne.n	8011714 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011704:	4b06      	ldr	r3, [pc, #24]	; (8011720 <vTaskDelay+0x64>)
 8011706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801170a:	601a      	str	r2, [r3, #0]
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011714:	bf00      	nop
 8011716:	3710      	adds	r7, #16
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}
 801171c:	200015b0 	.word	0x200015b0
 8011720:	e000ed04 	.word	0xe000ed04

08011724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b08a      	sub	sp, #40	; 0x28
 8011728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801172a:	2300      	movs	r3, #0
 801172c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801172e:	2300      	movs	r3, #0
 8011730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011732:	463a      	mov	r2, r7
 8011734:	1d39      	adds	r1, r7, #4
 8011736:	f107 0308 	add.w	r3, r7, #8
 801173a:	4618      	mov	r0, r3
 801173c:	f7fe fdb6 	bl	80102ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	68ba      	ldr	r2, [r7, #8]
 8011746:	9202      	str	r2, [sp, #8]
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	2300      	movs	r3, #0
 801174c:	9300      	str	r3, [sp, #0]
 801174e:	2300      	movs	r3, #0
 8011750:	460a      	mov	r2, r1
 8011752:	4924      	ldr	r1, [pc, #144]	; (80117e4 <vTaskStartScheduler+0xc0>)
 8011754:	4824      	ldr	r0, [pc, #144]	; (80117e8 <vTaskStartScheduler+0xc4>)
 8011756:	f7ff fd7b 	bl	8011250 <xTaskCreateStatic>
 801175a:	4603      	mov	r3, r0
 801175c:	4a23      	ldr	r2, [pc, #140]	; (80117ec <vTaskStartScheduler+0xc8>)
 801175e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011760:	4b22      	ldr	r3, [pc, #136]	; (80117ec <vTaskStartScheduler+0xc8>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d002      	beq.n	801176e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011768:	2301      	movs	r3, #1
 801176a:	617b      	str	r3, [r7, #20]
 801176c:	e001      	b.n	8011772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801176e:	2300      	movs	r3, #0
 8011770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	2b01      	cmp	r3, #1
 8011776:	d102      	bne.n	801177e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011778:	f000 fd22 	bl	80121c0 <xTimerCreateTimerTask>
 801177c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	2b01      	cmp	r3, #1
 8011782:	d11b      	bne.n	80117bc <vTaskStartScheduler+0x98>
	__asm volatile
 8011784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011788:	f383 8811 	msr	BASEPRI, r3
 801178c:	f3bf 8f6f 	isb	sy
 8011790:	f3bf 8f4f 	dsb	sy
 8011794:	613b      	str	r3, [r7, #16]
}
 8011796:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011798:	4b15      	ldr	r3, [pc, #84]	; (80117f0 <vTaskStartScheduler+0xcc>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	3354      	adds	r3, #84	; 0x54
 801179e:	4a15      	ldr	r2, [pc, #84]	; (80117f4 <vTaskStartScheduler+0xd0>)
 80117a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80117a2:	4b15      	ldr	r3, [pc, #84]	; (80117f8 <vTaskStartScheduler+0xd4>)
 80117a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80117aa:	4b14      	ldr	r3, [pc, #80]	; (80117fc <vTaskStartScheduler+0xd8>)
 80117ac:	2201      	movs	r2, #1
 80117ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80117b0:	4b13      	ldr	r3, [pc, #76]	; (8011800 <vTaskStartScheduler+0xdc>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80117b6:	f001 f8db 	bl	8012970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80117ba:	e00e      	b.n	80117da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117c2:	d10a      	bne.n	80117da <vTaskStartScheduler+0xb6>
	__asm volatile
 80117c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c8:	f383 8811 	msr	BASEPRI, r3
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	60fb      	str	r3, [r7, #12]
}
 80117d6:	bf00      	nop
 80117d8:	e7fe      	b.n	80117d8 <vTaskStartScheduler+0xb4>
}
 80117da:	bf00      	nop
 80117dc:	3718      	adds	r7, #24
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}
 80117e2:	bf00      	nop
 80117e4:	0801418c 	.word	0x0801418c
 80117e8:	08011e4d 	.word	0x08011e4d
 80117ec:	200015ac 	.word	0x200015ac
 80117f0:	200010b4 	.word	0x200010b4
 80117f4:	200003c0 	.word	0x200003c0
 80117f8:	200015a8 	.word	0x200015a8
 80117fc:	20001594 	.word	0x20001594
 8011800:	2000158c 	.word	0x2000158c

08011804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011804:	b480      	push	{r7}
 8011806:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011808:	4b04      	ldr	r3, [pc, #16]	; (801181c <vTaskSuspendAll+0x18>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	3301      	adds	r3, #1
 801180e:	4a03      	ldr	r2, [pc, #12]	; (801181c <vTaskSuspendAll+0x18>)
 8011810:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011812:	bf00      	nop
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr
 801181c:	200015b0 	.word	0x200015b0

08011820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011826:	2300      	movs	r3, #0
 8011828:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801182a:	2300      	movs	r3, #0
 801182c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801182e:	4b42      	ldr	r3, [pc, #264]	; (8011938 <xTaskResumeAll+0x118>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d10a      	bne.n	801184c <xTaskResumeAll+0x2c>
	__asm volatile
 8011836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183a:	f383 8811 	msr	BASEPRI, r3
 801183e:	f3bf 8f6f 	isb	sy
 8011842:	f3bf 8f4f 	dsb	sy
 8011846:	603b      	str	r3, [r7, #0]
}
 8011848:	bf00      	nop
 801184a:	e7fe      	b.n	801184a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801184c:	f001 f932 	bl	8012ab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011850:	4b39      	ldr	r3, [pc, #228]	; (8011938 <xTaskResumeAll+0x118>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	3b01      	subs	r3, #1
 8011856:	4a38      	ldr	r2, [pc, #224]	; (8011938 <xTaskResumeAll+0x118>)
 8011858:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801185a:	4b37      	ldr	r3, [pc, #220]	; (8011938 <xTaskResumeAll+0x118>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d162      	bne.n	8011928 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011862:	4b36      	ldr	r3, [pc, #216]	; (801193c <xTaskResumeAll+0x11c>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d05e      	beq.n	8011928 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801186a:	e02f      	b.n	80118cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801186c:	4b34      	ldr	r3, [pc, #208]	; (8011940 <xTaskResumeAll+0x120>)
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	3318      	adds	r3, #24
 8011878:	4618      	mov	r0, r3
 801187a:	f7fe fdd5 	bl	8010428 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	3304      	adds	r3, #4
 8011882:	4618      	mov	r0, r3
 8011884:	f7fe fdd0 	bl	8010428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801188c:	4b2d      	ldr	r3, [pc, #180]	; (8011944 <xTaskResumeAll+0x124>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	429a      	cmp	r2, r3
 8011892:	d903      	bls.n	801189c <xTaskResumeAll+0x7c>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011898:	4a2a      	ldr	r2, [pc, #168]	; (8011944 <xTaskResumeAll+0x124>)
 801189a:	6013      	str	r3, [r2, #0]
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a0:	4613      	mov	r3, r2
 80118a2:	009b      	lsls	r3, r3, #2
 80118a4:	4413      	add	r3, r2
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	4a27      	ldr	r2, [pc, #156]	; (8011948 <xTaskResumeAll+0x128>)
 80118aa:	441a      	add	r2, r3
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	3304      	adds	r3, #4
 80118b0:	4619      	mov	r1, r3
 80118b2:	4610      	mov	r0, r2
 80118b4:	f7fe fd5b 	bl	801036e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118bc:	4b23      	ldr	r3, [pc, #140]	; (801194c <xTaskResumeAll+0x12c>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d302      	bcc.n	80118cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80118c6:	4b22      	ldr	r3, [pc, #136]	; (8011950 <xTaskResumeAll+0x130>)
 80118c8:	2201      	movs	r2, #1
 80118ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118cc:	4b1c      	ldr	r3, [pc, #112]	; (8011940 <xTaskResumeAll+0x120>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1cb      	bne.n	801186c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d001      	beq.n	80118de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80118da:	f000 fb71 	bl	8011fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80118de:	4b1d      	ldr	r3, [pc, #116]	; (8011954 <xTaskResumeAll+0x134>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d010      	beq.n	801190c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80118ea:	f000 f859 	bl	80119a0 <xTaskIncrementTick>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d002      	beq.n	80118fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80118f4:	4b16      	ldr	r3, [pc, #88]	; (8011950 <xTaskResumeAll+0x130>)
 80118f6:	2201      	movs	r2, #1
 80118f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	3b01      	subs	r3, #1
 80118fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d1f1      	bne.n	80118ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011906:	4b13      	ldr	r3, [pc, #76]	; (8011954 <xTaskResumeAll+0x134>)
 8011908:	2200      	movs	r2, #0
 801190a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801190c:	4b10      	ldr	r3, [pc, #64]	; (8011950 <xTaskResumeAll+0x130>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d009      	beq.n	8011928 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011914:	2301      	movs	r3, #1
 8011916:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011918:	4b0f      	ldr	r3, [pc, #60]	; (8011958 <xTaskResumeAll+0x138>)
 801191a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801191e:	601a      	str	r2, [r3, #0]
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011928:	f001 f8f4 	bl	8012b14 <vPortExitCritical>

	return xAlreadyYielded;
 801192c:	68bb      	ldr	r3, [r7, #8]
}
 801192e:	4618      	mov	r0, r3
 8011930:	3710      	adds	r7, #16
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	200015b0 	.word	0x200015b0
 801193c:	20001588 	.word	0x20001588
 8011940:	20001548 	.word	0x20001548
 8011944:	20001590 	.word	0x20001590
 8011948:	200010b8 	.word	0x200010b8
 801194c:	200010b4 	.word	0x200010b4
 8011950:	2000159c 	.word	0x2000159c
 8011954:	20001598 	.word	0x20001598
 8011958:	e000ed04 	.word	0xe000ed04

0801195c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801195c:	b480      	push	{r7}
 801195e:	b083      	sub	sp, #12
 8011960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011962:	4b05      	ldr	r3, [pc, #20]	; (8011978 <xTaskGetTickCount+0x1c>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011968:	687b      	ldr	r3, [r7, #4]
}
 801196a:	4618      	mov	r0, r3
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop
 8011978:	2000158c 	.word	0x2000158c

0801197c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011982:	f001 f979 	bl	8012c78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011986:	2300      	movs	r3, #0
 8011988:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801198a:	4b04      	ldr	r3, [pc, #16]	; (801199c <xTaskGetTickCountFromISR+0x20>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011990:	683b      	ldr	r3, [r7, #0]
}
 8011992:	4618      	mov	r0, r3
 8011994:	3708      	adds	r7, #8
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	2000158c 	.word	0x2000158c

080119a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b086      	sub	sp, #24
 80119a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80119a6:	2300      	movs	r3, #0
 80119a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119aa:	4b4f      	ldr	r3, [pc, #316]	; (8011ae8 <xTaskIncrementTick+0x148>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	f040 808f 	bne.w	8011ad2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80119b4:	4b4d      	ldr	r3, [pc, #308]	; (8011aec <xTaskIncrementTick+0x14c>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	3301      	adds	r3, #1
 80119ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80119bc:	4a4b      	ldr	r2, [pc, #300]	; (8011aec <xTaskIncrementTick+0x14c>)
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d120      	bne.n	8011a0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80119c8:	4b49      	ldr	r3, [pc, #292]	; (8011af0 <xTaskIncrementTick+0x150>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00a      	beq.n	80119e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80119d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d6:	f383 8811 	msr	BASEPRI, r3
 80119da:	f3bf 8f6f 	isb	sy
 80119de:	f3bf 8f4f 	dsb	sy
 80119e2:	603b      	str	r3, [r7, #0]
}
 80119e4:	bf00      	nop
 80119e6:	e7fe      	b.n	80119e6 <xTaskIncrementTick+0x46>
 80119e8:	4b41      	ldr	r3, [pc, #260]	; (8011af0 <xTaskIncrementTick+0x150>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	60fb      	str	r3, [r7, #12]
 80119ee:	4b41      	ldr	r3, [pc, #260]	; (8011af4 <xTaskIncrementTick+0x154>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	4a3f      	ldr	r2, [pc, #252]	; (8011af0 <xTaskIncrementTick+0x150>)
 80119f4:	6013      	str	r3, [r2, #0]
 80119f6:	4a3f      	ldr	r2, [pc, #252]	; (8011af4 <xTaskIncrementTick+0x154>)
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	6013      	str	r3, [r2, #0]
 80119fc:	4b3e      	ldr	r3, [pc, #248]	; (8011af8 <xTaskIncrementTick+0x158>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	3301      	adds	r3, #1
 8011a02:	4a3d      	ldr	r2, [pc, #244]	; (8011af8 <xTaskIncrementTick+0x158>)
 8011a04:	6013      	str	r3, [r2, #0]
 8011a06:	f000 fadb 	bl	8011fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a0a:	4b3c      	ldr	r3, [pc, #240]	; (8011afc <xTaskIncrementTick+0x15c>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	693a      	ldr	r2, [r7, #16]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d349      	bcc.n	8011aa8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a14:	4b36      	ldr	r3, [pc, #216]	; (8011af0 <xTaskIncrementTick+0x150>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d104      	bne.n	8011a28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a1e:	4b37      	ldr	r3, [pc, #220]	; (8011afc <xTaskIncrementTick+0x15c>)
 8011a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a24:	601a      	str	r2, [r3, #0]
					break;
 8011a26:	e03f      	b.n	8011aa8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a28:	4b31      	ldr	r3, [pc, #196]	; (8011af0 <xTaskIncrementTick+0x150>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	68db      	ldr	r3, [r3, #12]
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011a38:	693a      	ldr	r2, [r7, #16]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d203      	bcs.n	8011a48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011a40:	4a2e      	ldr	r2, [pc, #184]	; (8011afc <xTaskIncrementTick+0x15c>)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011a46:	e02f      	b.n	8011aa8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	3304      	adds	r3, #4
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7fe fceb 	bl	8010428 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d004      	beq.n	8011a64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	3318      	adds	r3, #24
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fe fce2 	bl	8010428 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a68:	4b25      	ldr	r3, [pc, #148]	; (8011b00 <xTaskIncrementTick+0x160>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d903      	bls.n	8011a78 <xTaskIncrementTick+0xd8>
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a74:	4a22      	ldr	r2, [pc, #136]	; (8011b00 <xTaskIncrementTick+0x160>)
 8011a76:	6013      	str	r3, [r2, #0]
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	4413      	add	r3, r2
 8011a82:	009b      	lsls	r3, r3, #2
 8011a84:	4a1f      	ldr	r2, [pc, #124]	; (8011b04 <xTaskIncrementTick+0x164>)
 8011a86:	441a      	add	r2, r3
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	3304      	adds	r3, #4
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	4610      	mov	r0, r2
 8011a90:	f7fe fc6d 	bl	801036e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a98:	4b1b      	ldr	r3, [pc, #108]	; (8011b08 <xTaskIncrementTick+0x168>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d3b8      	bcc.n	8011a14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011aa6:	e7b5      	b.n	8011a14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011aa8:	4b17      	ldr	r3, [pc, #92]	; (8011b08 <xTaskIncrementTick+0x168>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aae:	4915      	ldr	r1, [pc, #84]	; (8011b04 <xTaskIncrementTick+0x164>)
 8011ab0:	4613      	mov	r3, r2
 8011ab2:	009b      	lsls	r3, r3, #2
 8011ab4:	4413      	add	r3, r2
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	440b      	add	r3, r1
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d901      	bls.n	8011ac4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011ac4:	4b11      	ldr	r3, [pc, #68]	; (8011b0c <xTaskIncrementTick+0x16c>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d007      	beq.n	8011adc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011acc:	2301      	movs	r3, #1
 8011ace:	617b      	str	r3, [r7, #20]
 8011ad0:	e004      	b.n	8011adc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011ad2:	4b0f      	ldr	r3, [pc, #60]	; (8011b10 <xTaskIncrementTick+0x170>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	4a0d      	ldr	r2, [pc, #52]	; (8011b10 <xTaskIncrementTick+0x170>)
 8011ada:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011adc:	697b      	ldr	r3, [r7, #20]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3718      	adds	r7, #24
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	200015b0 	.word	0x200015b0
 8011aec:	2000158c 	.word	0x2000158c
 8011af0:	20001540 	.word	0x20001540
 8011af4:	20001544 	.word	0x20001544
 8011af8:	200015a0 	.word	0x200015a0
 8011afc:	200015a8 	.word	0x200015a8
 8011b00:	20001590 	.word	0x20001590
 8011b04:	200010b8 	.word	0x200010b8
 8011b08:	200010b4 	.word	0x200010b4
 8011b0c:	2000159c 	.word	0x2000159c
 8011b10:	20001598 	.word	0x20001598

08011b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b14:	b480      	push	{r7}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b1a:	4b2a      	ldr	r3, [pc, #168]	; (8011bc4 <vTaskSwitchContext+0xb0>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d003      	beq.n	8011b2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b22:	4b29      	ldr	r3, [pc, #164]	; (8011bc8 <vTaskSwitchContext+0xb4>)
 8011b24:	2201      	movs	r2, #1
 8011b26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b28:	e046      	b.n	8011bb8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011b2a:	4b27      	ldr	r3, [pc, #156]	; (8011bc8 <vTaskSwitchContext+0xb4>)
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b30:	4b26      	ldr	r3, [pc, #152]	; (8011bcc <vTaskSwitchContext+0xb8>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	60fb      	str	r3, [r7, #12]
 8011b36:	e010      	b.n	8011b5a <vTaskSwitchContext+0x46>
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d10a      	bne.n	8011b54 <vTaskSwitchContext+0x40>
	__asm volatile
 8011b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b42:	f383 8811 	msr	BASEPRI, r3
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	607b      	str	r3, [r7, #4]
}
 8011b50:	bf00      	nop
 8011b52:	e7fe      	b.n	8011b52 <vTaskSwitchContext+0x3e>
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	3b01      	subs	r3, #1
 8011b58:	60fb      	str	r3, [r7, #12]
 8011b5a:	491d      	ldr	r1, [pc, #116]	; (8011bd0 <vTaskSwitchContext+0xbc>)
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	4413      	add	r3, r2
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	440b      	add	r3, r1
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d0e4      	beq.n	8011b38 <vTaskSwitchContext+0x24>
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	4613      	mov	r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4413      	add	r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4a15      	ldr	r2, [pc, #84]	; (8011bd0 <vTaskSwitchContext+0xbc>)
 8011b7a:	4413      	add	r3, r2
 8011b7c:	60bb      	str	r3, [r7, #8]
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	685a      	ldr	r2, [r3, #4]
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	605a      	str	r2, [r3, #4]
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	685a      	ldr	r2, [r3, #4]
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	3308      	adds	r3, #8
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d104      	bne.n	8011b9e <vTaskSwitchContext+0x8a>
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	685a      	ldr	r2, [r3, #4]
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	605a      	str	r2, [r3, #4]
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	4a0b      	ldr	r2, [pc, #44]	; (8011bd4 <vTaskSwitchContext+0xc0>)
 8011ba6:	6013      	str	r3, [r2, #0]
 8011ba8:	4a08      	ldr	r2, [pc, #32]	; (8011bcc <vTaskSwitchContext+0xb8>)
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011bae:	4b09      	ldr	r3, [pc, #36]	; (8011bd4 <vTaskSwitchContext+0xc0>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	3354      	adds	r3, #84	; 0x54
 8011bb4:	4a08      	ldr	r2, [pc, #32]	; (8011bd8 <vTaskSwitchContext+0xc4>)
 8011bb6:	6013      	str	r3, [r2, #0]
}
 8011bb8:	bf00      	nop
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr
 8011bc4:	200015b0 	.word	0x200015b0
 8011bc8:	2000159c 	.word	0x2000159c
 8011bcc:	20001590 	.word	0x20001590
 8011bd0:	200010b8 	.word	0x200010b8
 8011bd4:	200010b4 	.word	0x200010b4
 8011bd8:	200003c0 	.word	0x200003c0

08011bdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d10a      	bne.n	8011c02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf0:	f383 8811 	msr	BASEPRI, r3
 8011bf4:	f3bf 8f6f 	isb	sy
 8011bf8:	f3bf 8f4f 	dsb	sy
 8011bfc:	60fb      	str	r3, [r7, #12]
}
 8011bfe:	bf00      	nop
 8011c00:	e7fe      	b.n	8011c00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c02:	4b07      	ldr	r3, [pc, #28]	; (8011c20 <vTaskPlaceOnEventList+0x44>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3318      	adds	r3, #24
 8011c08:	4619      	mov	r1, r3
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f7fe fbd3 	bl	80103b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c10:	2101      	movs	r1, #1
 8011c12:	6838      	ldr	r0, [r7, #0]
 8011c14:	f000 fa80 	bl	8012118 <prvAddCurrentTaskToDelayedList>
}
 8011c18:	bf00      	nop
 8011c1a:	3710      	adds	r7, #16
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	200010b4 	.word	0x200010b4

08011c24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b086      	sub	sp, #24
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d10a      	bne.n	8011c4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3a:	f383 8811 	msr	BASEPRI, r3
 8011c3e:	f3bf 8f6f 	isb	sy
 8011c42:	f3bf 8f4f 	dsb	sy
 8011c46:	617b      	str	r3, [r7, #20]
}
 8011c48:	bf00      	nop
 8011c4a:	e7fe      	b.n	8011c4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c4c:	4b0a      	ldr	r3, [pc, #40]	; (8011c78 <vTaskPlaceOnEventListRestricted+0x54>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	3318      	adds	r3, #24
 8011c52:	4619      	mov	r1, r3
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f7fe fb8a 	bl	801036e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d002      	beq.n	8011c66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011c66:	6879      	ldr	r1, [r7, #4]
 8011c68:	68b8      	ldr	r0, [r7, #8]
 8011c6a:	f000 fa55 	bl	8012118 <prvAddCurrentTaskToDelayedList>
	}
 8011c6e:	bf00      	nop
 8011c70:	3718      	adds	r7, #24
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	200010b4 	.word	0x200010b4

08011c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b086      	sub	sp, #24
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d10a      	bne.n	8011ca8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c96:	f383 8811 	msr	BASEPRI, r3
 8011c9a:	f3bf 8f6f 	isb	sy
 8011c9e:	f3bf 8f4f 	dsb	sy
 8011ca2:	60fb      	str	r3, [r7, #12]
}
 8011ca4:	bf00      	nop
 8011ca6:	e7fe      	b.n	8011ca6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	3318      	adds	r3, #24
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fe fbbb 	bl	8010428 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cb2:	4b1e      	ldr	r3, [pc, #120]	; (8011d2c <xTaskRemoveFromEventList+0xb0>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d11d      	bne.n	8011cf6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	3304      	adds	r3, #4
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe fbb2 	bl	8010428 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cc8:	4b19      	ldr	r3, [pc, #100]	; (8011d30 <xTaskRemoveFromEventList+0xb4>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d903      	bls.n	8011cd8 <xTaskRemoveFromEventList+0x5c>
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd4:	4a16      	ldr	r2, [pc, #88]	; (8011d30 <xTaskRemoveFromEventList+0xb4>)
 8011cd6:	6013      	str	r3, [r2, #0]
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cdc:	4613      	mov	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4413      	add	r3, r2
 8011ce2:	009b      	lsls	r3, r3, #2
 8011ce4:	4a13      	ldr	r2, [pc, #76]	; (8011d34 <xTaskRemoveFromEventList+0xb8>)
 8011ce6:	441a      	add	r2, r3
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	3304      	adds	r3, #4
 8011cec:	4619      	mov	r1, r3
 8011cee:	4610      	mov	r0, r2
 8011cf0:	f7fe fb3d 	bl	801036e <vListInsertEnd>
 8011cf4:	e005      	b.n	8011d02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	3318      	adds	r3, #24
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	480e      	ldr	r0, [pc, #56]	; (8011d38 <xTaskRemoveFromEventList+0xbc>)
 8011cfe:	f7fe fb36 	bl	801036e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d06:	4b0d      	ldr	r3, [pc, #52]	; (8011d3c <xTaskRemoveFromEventList+0xc0>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d905      	bls.n	8011d1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011d10:	2301      	movs	r3, #1
 8011d12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011d14:	4b0a      	ldr	r3, [pc, #40]	; (8011d40 <xTaskRemoveFromEventList+0xc4>)
 8011d16:	2201      	movs	r2, #1
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	e001      	b.n	8011d20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011d20:	697b      	ldr	r3, [r7, #20]
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3718      	adds	r7, #24
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	200015b0 	.word	0x200015b0
 8011d30:	20001590 	.word	0x20001590
 8011d34:	200010b8 	.word	0x200010b8
 8011d38:	20001548 	.word	0x20001548
 8011d3c:	200010b4 	.word	0x200010b4
 8011d40:	2000159c 	.word	0x2000159c

08011d44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d4c:	4b06      	ldr	r3, [pc, #24]	; (8011d68 <vTaskInternalSetTimeOutState+0x24>)
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011d54:	4b05      	ldr	r3, [pc, #20]	; (8011d6c <vTaskInternalSetTimeOutState+0x28>)
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	605a      	str	r2, [r3, #4]
}
 8011d5c:	bf00      	nop
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr
 8011d68:	200015a0 	.word	0x200015a0
 8011d6c:	2000158c 	.word	0x2000158c

08011d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b088      	sub	sp, #32
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d10a      	bne.n	8011d96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d84:	f383 8811 	msr	BASEPRI, r3
 8011d88:	f3bf 8f6f 	isb	sy
 8011d8c:	f3bf 8f4f 	dsb	sy
 8011d90:	613b      	str	r3, [r7, #16]
}
 8011d92:	bf00      	nop
 8011d94:	e7fe      	b.n	8011d94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d10a      	bne.n	8011db2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da0:	f383 8811 	msr	BASEPRI, r3
 8011da4:	f3bf 8f6f 	isb	sy
 8011da8:	f3bf 8f4f 	dsb	sy
 8011dac:	60fb      	str	r3, [r7, #12]
}
 8011dae:	bf00      	nop
 8011db0:	e7fe      	b.n	8011db0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011db2:	f000 fe7f 	bl	8012ab4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011db6:	4b1d      	ldr	r3, [pc, #116]	; (8011e2c <xTaskCheckForTimeOut+0xbc>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	69ba      	ldr	r2, [r7, #24]
 8011dc2:	1ad3      	subs	r3, r2, r3
 8011dc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dce:	d102      	bne.n	8011dd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	61fb      	str	r3, [r7, #28]
 8011dd4:	e023      	b.n	8011e1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	4b15      	ldr	r3, [pc, #84]	; (8011e30 <xTaskCheckForTimeOut+0xc0>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d007      	beq.n	8011df2 <xTaskCheckForTimeOut+0x82>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	69ba      	ldr	r2, [r7, #24]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d302      	bcc.n	8011df2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011dec:	2301      	movs	r3, #1
 8011dee:	61fb      	str	r3, [r7, #28]
 8011df0:	e015      	b.n	8011e1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d20b      	bcs.n	8011e14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	1ad2      	subs	r2, r2, r3
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f7ff ff9b 	bl	8011d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	61fb      	str	r3, [r7, #28]
 8011e12:	e004      	b.n	8011e1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	2200      	movs	r2, #0
 8011e18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011e1e:	f000 fe79 	bl	8012b14 <vPortExitCritical>

	return xReturn;
 8011e22:	69fb      	ldr	r3, [r7, #28]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3720      	adds	r7, #32
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	2000158c 	.word	0x2000158c
 8011e30:	200015a0 	.word	0x200015a0

08011e34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e34:	b480      	push	{r7}
 8011e36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e38:	4b03      	ldr	r3, [pc, #12]	; (8011e48 <vTaskMissedYield+0x14>)
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	601a      	str	r2, [r3, #0]
}
 8011e3e:	bf00      	nop
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr
 8011e48:	2000159c 	.word	0x2000159c

08011e4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011e54:	f000 f852 	bl	8011efc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011e58:	4b06      	ldr	r3, [pc, #24]	; (8011e74 <prvIdleTask+0x28>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d9f9      	bls.n	8011e54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011e60:	4b05      	ldr	r3, [pc, #20]	; (8011e78 <prvIdleTask+0x2c>)
 8011e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e66:	601a      	str	r2, [r3, #0]
 8011e68:	f3bf 8f4f 	dsb	sy
 8011e6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011e70:	e7f0      	b.n	8011e54 <prvIdleTask+0x8>
 8011e72:	bf00      	nop
 8011e74:	200010b8 	.word	0x200010b8
 8011e78:	e000ed04 	.word	0xe000ed04

08011e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e82:	2300      	movs	r3, #0
 8011e84:	607b      	str	r3, [r7, #4]
 8011e86:	e00c      	b.n	8011ea2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	4613      	mov	r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4413      	add	r3, r2
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4a12      	ldr	r2, [pc, #72]	; (8011edc <prvInitialiseTaskLists+0x60>)
 8011e94:	4413      	add	r3, r2
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7fe fa3c 	bl	8010314 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	607b      	str	r3, [r7, #4]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2b37      	cmp	r3, #55	; 0x37
 8011ea6:	d9ef      	bls.n	8011e88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011ea8:	480d      	ldr	r0, [pc, #52]	; (8011ee0 <prvInitialiseTaskLists+0x64>)
 8011eaa:	f7fe fa33 	bl	8010314 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011eae:	480d      	ldr	r0, [pc, #52]	; (8011ee4 <prvInitialiseTaskLists+0x68>)
 8011eb0:	f7fe fa30 	bl	8010314 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011eb4:	480c      	ldr	r0, [pc, #48]	; (8011ee8 <prvInitialiseTaskLists+0x6c>)
 8011eb6:	f7fe fa2d 	bl	8010314 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011eba:	480c      	ldr	r0, [pc, #48]	; (8011eec <prvInitialiseTaskLists+0x70>)
 8011ebc:	f7fe fa2a 	bl	8010314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011ec0:	480b      	ldr	r0, [pc, #44]	; (8011ef0 <prvInitialiseTaskLists+0x74>)
 8011ec2:	f7fe fa27 	bl	8010314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011ec6:	4b0b      	ldr	r3, [pc, #44]	; (8011ef4 <prvInitialiseTaskLists+0x78>)
 8011ec8:	4a05      	ldr	r2, [pc, #20]	; (8011ee0 <prvInitialiseTaskLists+0x64>)
 8011eca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011ecc:	4b0a      	ldr	r3, [pc, #40]	; (8011ef8 <prvInitialiseTaskLists+0x7c>)
 8011ece:	4a05      	ldr	r2, [pc, #20]	; (8011ee4 <prvInitialiseTaskLists+0x68>)
 8011ed0:	601a      	str	r2, [r3, #0]
}
 8011ed2:	bf00      	nop
 8011ed4:	3708      	adds	r7, #8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	200010b8 	.word	0x200010b8
 8011ee0:	20001518 	.word	0x20001518
 8011ee4:	2000152c 	.word	0x2000152c
 8011ee8:	20001548 	.word	0x20001548
 8011eec:	2000155c 	.word	0x2000155c
 8011ef0:	20001574 	.word	0x20001574
 8011ef4:	20001540 	.word	0x20001540
 8011ef8:	20001544 	.word	0x20001544

08011efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f02:	e019      	b.n	8011f38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011f04:	f000 fdd6 	bl	8012ab4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f08:	4b10      	ldr	r3, [pc, #64]	; (8011f4c <prvCheckTasksWaitingTermination+0x50>)
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	3304      	adds	r3, #4
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7fe fa87 	bl	8010428 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011f1a:	4b0d      	ldr	r3, [pc, #52]	; (8011f50 <prvCheckTasksWaitingTermination+0x54>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	4a0b      	ldr	r2, [pc, #44]	; (8011f50 <prvCheckTasksWaitingTermination+0x54>)
 8011f22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011f24:	4b0b      	ldr	r3, [pc, #44]	; (8011f54 <prvCheckTasksWaitingTermination+0x58>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	3b01      	subs	r3, #1
 8011f2a:	4a0a      	ldr	r2, [pc, #40]	; (8011f54 <prvCheckTasksWaitingTermination+0x58>)
 8011f2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011f2e:	f000 fdf1 	bl	8012b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f000 f810 	bl	8011f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f38:	4b06      	ldr	r3, [pc, #24]	; (8011f54 <prvCheckTasksWaitingTermination+0x58>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d1e1      	bne.n	8011f04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011f40:	bf00      	nop
 8011f42:	bf00      	nop
 8011f44:	3708      	adds	r7, #8
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	2000155c 	.word	0x2000155c
 8011f50:	20001588 	.word	0x20001588
 8011f54:	20001570 	.word	0x20001570

08011f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	3354      	adds	r3, #84	; 0x54
 8011f64:	4618      	mov	r0, r3
 8011f66:	f001 fff7 	bl	8013f58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d108      	bne.n	8011f86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f000 ff89 	bl	8012e90 <vPortFree>
				vPortFree( pxTCB );
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 ff86 	bl	8012e90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011f84:	e018      	b.n	8011fb8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d103      	bne.n	8011f98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f000 ff7d 	bl	8012e90 <vPortFree>
	}
 8011f96:	e00f      	b.n	8011fb8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011f9e:	2b02      	cmp	r3, #2
 8011fa0:	d00a      	beq.n	8011fb8 <prvDeleteTCB+0x60>
	__asm volatile
 8011fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa6:	f383 8811 	msr	BASEPRI, r3
 8011faa:	f3bf 8f6f 	isb	sy
 8011fae:	f3bf 8f4f 	dsb	sy
 8011fb2:	60fb      	str	r3, [r7, #12]
}
 8011fb4:	bf00      	nop
 8011fb6:	e7fe      	b.n	8011fb6 <prvDeleteTCB+0x5e>
	}
 8011fb8:	bf00      	nop
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011fc6:	4b0c      	ldr	r3, [pc, #48]	; (8011ff8 <prvResetNextTaskUnblockTime+0x38>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d104      	bne.n	8011fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011fd0:	4b0a      	ldr	r3, [pc, #40]	; (8011ffc <prvResetNextTaskUnblockTime+0x3c>)
 8011fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011fd8:	e008      	b.n	8011fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fda:	4b07      	ldr	r3, [pc, #28]	; (8011ff8 <prvResetNextTaskUnblockTime+0x38>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	4a04      	ldr	r2, [pc, #16]	; (8011ffc <prvResetNextTaskUnblockTime+0x3c>)
 8011fea:	6013      	str	r3, [r2, #0]
}
 8011fec:	bf00      	nop
 8011fee:	370c      	adds	r7, #12
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr
 8011ff8:	20001540 	.word	0x20001540
 8011ffc:	200015a8 	.word	0x200015a8

08012000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012006:	4b0b      	ldr	r3, [pc, #44]	; (8012034 <xTaskGetSchedulerState+0x34>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d102      	bne.n	8012014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801200e:	2301      	movs	r3, #1
 8012010:	607b      	str	r3, [r7, #4]
 8012012:	e008      	b.n	8012026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012014:	4b08      	ldr	r3, [pc, #32]	; (8012038 <xTaskGetSchedulerState+0x38>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d102      	bne.n	8012022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801201c:	2302      	movs	r3, #2
 801201e:	607b      	str	r3, [r7, #4]
 8012020:	e001      	b.n	8012026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012022:	2300      	movs	r3, #0
 8012024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012026:	687b      	ldr	r3, [r7, #4]
	}
 8012028:	4618      	mov	r0, r3
 801202a:	370c      	adds	r7, #12
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr
 8012034:	20001594 	.word	0x20001594
 8012038:	200015b0 	.word	0x200015b0

0801203c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012048:	2300      	movs	r3, #0
 801204a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d056      	beq.n	8012100 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012052:	4b2e      	ldr	r3, [pc, #184]	; (801210c <xTaskPriorityDisinherit+0xd0>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	693a      	ldr	r2, [r7, #16]
 8012058:	429a      	cmp	r2, r3
 801205a:	d00a      	beq.n	8012072 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012060:	f383 8811 	msr	BASEPRI, r3
 8012064:	f3bf 8f6f 	isb	sy
 8012068:	f3bf 8f4f 	dsb	sy
 801206c:	60fb      	str	r3, [r7, #12]
}
 801206e:	bf00      	nop
 8012070:	e7fe      	b.n	8012070 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012076:	2b00      	cmp	r3, #0
 8012078:	d10a      	bne.n	8012090 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801207a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801207e:	f383 8811 	msr	BASEPRI, r3
 8012082:	f3bf 8f6f 	isb	sy
 8012086:	f3bf 8f4f 	dsb	sy
 801208a:	60bb      	str	r3, [r7, #8]
}
 801208c:	bf00      	nop
 801208e:	e7fe      	b.n	801208e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012094:	1e5a      	subs	r2, r3, #1
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d02c      	beq.n	8012100 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d128      	bne.n	8012100 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	3304      	adds	r3, #4
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fe f9b8 	bl	8010428 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120d0:	4b0f      	ldr	r3, [pc, #60]	; (8012110 <xTaskPriorityDisinherit+0xd4>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d903      	bls.n	80120e0 <xTaskPriorityDisinherit+0xa4>
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120dc:	4a0c      	ldr	r2, [pc, #48]	; (8012110 <xTaskPriorityDisinherit+0xd4>)
 80120de:	6013      	str	r3, [r2, #0]
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e4:	4613      	mov	r3, r2
 80120e6:	009b      	lsls	r3, r3, #2
 80120e8:	4413      	add	r3, r2
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	4a09      	ldr	r2, [pc, #36]	; (8012114 <xTaskPriorityDisinherit+0xd8>)
 80120ee:	441a      	add	r2, r3
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	3304      	adds	r3, #4
 80120f4:	4619      	mov	r1, r3
 80120f6:	4610      	mov	r0, r2
 80120f8:	f7fe f939 	bl	801036e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80120fc:	2301      	movs	r3, #1
 80120fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012100:	697b      	ldr	r3, [r7, #20]
	}
 8012102:	4618      	mov	r0, r3
 8012104:	3718      	adds	r7, #24
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	200010b4 	.word	0x200010b4
 8012110:	20001590 	.word	0x20001590
 8012114:	200010b8 	.word	0x200010b8

08012118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b084      	sub	sp, #16
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012122:	4b21      	ldr	r3, [pc, #132]	; (80121a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012128:	4b20      	ldr	r3, [pc, #128]	; (80121ac <prvAddCurrentTaskToDelayedList+0x94>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	3304      	adds	r3, #4
 801212e:	4618      	mov	r0, r3
 8012130:	f7fe f97a 	bl	8010428 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801213a:	d10a      	bne.n	8012152 <prvAddCurrentTaskToDelayedList+0x3a>
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d007      	beq.n	8012152 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012142:	4b1a      	ldr	r3, [pc, #104]	; (80121ac <prvAddCurrentTaskToDelayedList+0x94>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	3304      	adds	r3, #4
 8012148:	4619      	mov	r1, r3
 801214a:	4819      	ldr	r0, [pc, #100]	; (80121b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801214c:	f7fe f90f 	bl	801036e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012150:	e026      	b.n	80121a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012152:	68fa      	ldr	r2, [r7, #12]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	4413      	add	r3, r2
 8012158:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801215a:	4b14      	ldr	r3, [pc, #80]	; (80121ac <prvAddCurrentTaskToDelayedList+0x94>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012162:	68ba      	ldr	r2, [r7, #8]
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	429a      	cmp	r2, r3
 8012168:	d209      	bcs.n	801217e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801216a:	4b12      	ldr	r3, [pc, #72]	; (80121b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	4b0f      	ldr	r3, [pc, #60]	; (80121ac <prvAddCurrentTaskToDelayedList+0x94>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	3304      	adds	r3, #4
 8012174:	4619      	mov	r1, r3
 8012176:	4610      	mov	r0, r2
 8012178:	f7fe f91d 	bl	80103b6 <vListInsert>
}
 801217c:	e010      	b.n	80121a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801217e:	4b0e      	ldr	r3, [pc, #56]	; (80121b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	4b0a      	ldr	r3, [pc, #40]	; (80121ac <prvAddCurrentTaskToDelayedList+0x94>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	3304      	adds	r3, #4
 8012188:	4619      	mov	r1, r3
 801218a:	4610      	mov	r0, r2
 801218c:	f7fe f913 	bl	80103b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012190:	4b0a      	ldr	r3, [pc, #40]	; (80121bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	68ba      	ldr	r2, [r7, #8]
 8012196:	429a      	cmp	r2, r3
 8012198:	d202      	bcs.n	80121a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801219a:	4a08      	ldr	r2, [pc, #32]	; (80121bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	6013      	str	r3, [r2, #0]
}
 80121a0:	bf00      	nop
 80121a2:	3710      	adds	r7, #16
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	2000158c 	.word	0x2000158c
 80121ac:	200010b4 	.word	0x200010b4
 80121b0:	20001574 	.word	0x20001574
 80121b4:	20001544 	.word	0x20001544
 80121b8:	20001540 	.word	0x20001540
 80121bc:	200015a8 	.word	0x200015a8

080121c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b08a      	sub	sp, #40	; 0x28
 80121c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80121c6:	2300      	movs	r3, #0
 80121c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80121ca:	f000 fb07 	bl	80127dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80121ce:	4b1c      	ldr	r3, [pc, #112]	; (8012240 <xTimerCreateTimerTask+0x80>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d021      	beq.n	801221a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80121d6:	2300      	movs	r3, #0
 80121d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80121da:	2300      	movs	r3, #0
 80121dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80121de:	1d3a      	adds	r2, r7, #4
 80121e0:	f107 0108 	add.w	r1, r7, #8
 80121e4:	f107 030c 	add.w	r3, r7, #12
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fe f879 	bl	80102e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80121ee:	6879      	ldr	r1, [r7, #4]
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	68fa      	ldr	r2, [r7, #12]
 80121f4:	9202      	str	r2, [sp, #8]
 80121f6:	9301      	str	r3, [sp, #4]
 80121f8:	2302      	movs	r3, #2
 80121fa:	9300      	str	r3, [sp, #0]
 80121fc:	2300      	movs	r3, #0
 80121fe:	460a      	mov	r2, r1
 8012200:	4910      	ldr	r1, [pc, #64]	; (8012244 <xTimerCreateTimerTask+0x84>)
 8012202:	4811      	ldr	r0, [pc, #68]	; (8012248 <xTimerCreateTimerTask+0x88>)
 8012204:	f7ff f824 	bl	8011250 <xTaskCreateStatic>
 8012208:	4603      	mov	r3, r0
 801220a:	4a10      	ldr	r2, [pc, #64]	; (801224c <xTimerCreateTimerTask+0x8c>)
 801220c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801220e:	4b0f      	ldr	r3, [pc, #60]	; (801224c <xTimerCreateTimerTask+0x8c>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012216:	2301      	movs	r3, #1
 8012218:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d10a      	bne.n	8012236 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012224:	f383 8811 	msr	BASEPRI, r3
 8012228:	f3bf 8f6f 	isb	sy
 801222c:	f3bf 8f4f 	dsb	sy
 8012230:	613b      	str	r3, [r7, #16]
}
 8012232:	bf00      	nop
 8012234:	e7fe      	b.n	8012234 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012236:	697b      	ldr	r3, [r7, #20]
}
 8012238:	4618      	mov	r0, r3
 801223a:	3718      	adds	r7, #24
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	200015e4 	.word	0x200015e4
 8012244:	08014194 	.word	0x08014194
 8012248:	08012385 	.word	0x08012385
 801224c:	200015e8 	.word	0x200015e8

08012250 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b08a      	sub	sp, #40	; 0x28
 8012254:	af00      	add	r7, sp, #0
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	60b9      	str	r1, [r7, #8]
 801225a:	607a      	str	r2, [r7, #4]
 801225c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801225e:	2300      	movs	r3, #0
 8012260:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d10a      	bne.n	801227e <xTimerGenericCommand+0x2e>
	__asm volatile
 8012268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226c:	f383 8811 	msr	BASEPRI, r3
 8012270:	f3bf 8f6f 	isb	sy
 8012274:	f3bf 8f4f 	dsb	sy
 8012278:	623b      	str	r3, [r7, #32]
}
 801227a:	bf00      	nop
 801227c:	e7fe      	b.n	801227c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801227e:	4b1a      	ldr	r3, [pc, #104]	; (80122e8 <xTimerGenericCommand+0x98>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d02a      	beq.n	80122dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	2b05      	cmp	r3, #5
 8012296:	dc18      	bgt.n	80122ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012298:	f7ff feb2 	bl	8012000 <xTaskGetSchedulerState>
 801229c:	4603      	mov	r3, r0
 801229e:	2b02      	cmp	r3, #2
 80122a0:	d109      	bne.n	80122b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80122a2:	4b11      	ldr	r3, [pc, #68]	; (80122e8 <xTimerGenericCommand+0x98>)
 80122a4:	6818      	ldr	r0, [r3, #0]
 80122a6:	f107 0110 	add.w	r1, r7, #16
 80122aa:	2300      	movs	r3, #0
 80122ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122ae:	f7fe fa8d 	bl	80107cc <xQueueGenericSend>
 80122b2:	6278      	str	r0, [r7, #36]	; 0x24
 80122b4:	e012      	b.n	80122dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80122b6:	4b0c      	ldr	r3, [pc, #48]	; (80122e8 <xTimerGenericCommand+0x98>)
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	f107 0110 	add.w	r1, r7, #16
 80122be:	2300      	movs	r3, #0
 80122c0:	2200      	movs	r2, #0
 80122c2:	f7fe fa83 	bl	80107cc <xQueueGenericSend>
 80122c6:	6278      	str	r0, [r7, #36]	; 0x24
 80122c8:	e008      	b.n	80122dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80122ca:	4b07      	ldr	r3, [pc, #28]	; (80122e8 <xTimerGenericCommand+0x98>)
 80122cc:	6818      	ldr	r0, [r3, #0]
 80122ce:	f107 0110 	add.w	r1, r7, #16
 80122d2:	2300      	movs	r3, #0
 80122d4:	683a      	ldr	r2, [r7, #0]
 80122d6:	f7fe fb77 	bl	80109c8 <xQueueGenericSendFromISR>
 80122da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80122dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3728      	adds	r7, #40	; 0x28
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	200015e4 	.word	0x200015e4

080122ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b088      	sub	sp, #32
 80122f0:	af02      	add	r7, sp, #8
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122f6:	4b22      	ldr	r3, [pc, #136]	; (8012380 <prvProcessExpiredTimer+0x94>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	68db      	ldr	r3, [r3, #12]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	3304      	adds	r3, #4
 8012304:	4618      	mov	r0, r3
 8012306:	f7fe f88f 	bl	8010428 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012310:	f003 0304 	and.w	r3, r3, #4
 8012314:	2b00      	cmp	r3, #0
 8012316:	d022      	beq.n	801235e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	699a      	ldr	r2, [r3, #24]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	18d1      	adds	r1, r2, r3
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	683a      	ldr	r2, [r7, #0]
 8012324:	6978      	ldr	r0, [r7, #20]
 8012326:	f000 f8d1 	bl	80124cc <prvInsertTimerInActiveList>
 801232a:	4603      	mov	r3, r0
 801232c:	2b00      	cmp	r3, #0
 801232e:	d01f      	beq.n	8012370 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012330:	2300      	movs	r3, #0
 8012332:	9300      	str	r3, [sp, #0]
 8012334:	2300      	movs	r3, #0
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	2100      	movs	r1, #0
 801233a:	6978      	ldr	r0, [r7, #20]
 801233c:	f7ff ff88 	bl	8012250 <xTimerGenericCommand>
 8012340:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d113      	bne.n	8012370 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234c:	f383 8811 	msr	BASEPRI, r3
 8012350:	f3bf 8f6f 	isb	sy
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	60fb      	str	r3, [r7, #12]
}
 801235a:	bf00      	nop
 801235c:	e7fe      	b.n	801235c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012364:	f023 0301 	bic.w	r3, r3, #1
 8012368:	b2da      	uxtb	r2, r3
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	6a1b      	ldr	r3, [r3, #32]
 8012374:	6978      	ldr	r0, [r7, #20]
 8012376:	4798      	blx	r3
}
 8012378:	bf00      	nop
 801237a:	3718      	adds	r7, #24
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	200015dc 	.word	0x200015dc

08012384 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801238c:	f107 0308 	add.w	r3, r7, #8
 8012390:	4618      	mov	r0, r3
 8012392:	f000 f857 	bl	8012444 <prvGetNextExpireTime>
 8012396:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	4619      	mov	r1, r3
 801239c:	68f8      	ldr	r0, [r7, #12]
 801239e:	f000 f803 	bl	80123a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80123a2:	f000 f8d5 	bl	8012550 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80123a6:	e7f1      	b.n	801238c <prvTimerTask+0x8>

080123a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80123b2:	f7ff fa27 	bl	8011804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80123b6:	f107 0308 	add.w	r3, r7, #8
 80123ba:	4618      	mov	r0, r3
 80123bc:	f000 f866 	bl	801248c <prvSampleTimeNow>
 80123c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d130      	bne.n	801242a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d10a      	bne.n	80123e4 <prvProcessTimerOrBlockTask+0x3c>
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d806      	bhi.n	80123e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80123d6:	f7ff fa23 	bl	8011820 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80123da:	68f9      	ldr	r1, [r7, #12]
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff ff85 	bl	80122ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80123e2:	e024      	b.n	801242e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d008      	beq.n	80123fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80123ea:	4b13      	ldr	r3, [pc, #76]	; (8012438 <prvProcessTimerOrBlockTask+0x90>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d101      	bne.n	80123f8 <prvProcessTimerOrBlockTask+0x50>
 80123f4:	2301      	movs	r3, #1
 80123f6:	e000      	b.n	80123fa <prvProcessTimerOrBlockTask+0x52>
 80123f8:	2300      	movs	r3, #0
 80123fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80123fc:	4b0f      	ldr	r3, [pc, #60]	; (801243c <prvProcessTimerOrBlockTask+0x94>)
 80123fe:	6818      	ldr	r0, [r3, #0]
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	1ad3      	subs	r3, r2, r3
 8012406:	683a      	ldr	r2, [r7, #0]
 8012408:	4619      	mov	r1, r3
 801240a:	f7fe feed 	bl	80111e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801240e:	f7ff fa07 	bl	8011820 <xTaskResumeAll>
 8012412:	4603      	mov	r3, r0
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10a      	bne.n	801242e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012418:	4b09      	ldr	r3, [pc, #36]	; (8012440 <prvProcessTimerOrBlockTask+0x98>)
 801241a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801241e:	601a      	str	r2, [r3, #0]
 8012420:	f3bf 8f4f 	dsb	sy
 8012424:	f3bf 8f6f 	isb	sy
}
 8012428:	e001      	b.n	801242e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801242a:	f7ff f9f9 	bl	8011820 <xTaskResumeAll>
}
 801242e:	bf00      	nop
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	200015e0 	.word	0x200015e0
 801243c:	200015e4 	.word	0x200015e4
 8012440:	e000ed04 	.word	0xe000ed04

08012444 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012444:	b480      	push	{r7}
 8012446:	b085      	sub	sp, #20
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801244c:	4b0e      	ldr	r3, [pc, #56]	; (8012488 <prvGetNextExpireTime+0x44>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d101      	bne.n	801245a <prvGetNextExpireTime+0x16>
 8012456:	2201      	movs	r2, #1
 8012458:	e000      	b.n	801245c <prvGetNextExpireTime+0x18>
 801245a:	2200      	movs	r2, #0
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d105      	bne.n	8012474 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012468:	4b07      	ldr	r3, [pc, #28]	; (8012488 <prvGetNextExpireTime+0x44>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	60fb      	str	r3, [r7, #12]
 8012472:	e001      	b.n	8012478 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012474:	2300      	movs	r3, #0
 8012476:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012478:	68fb      	ldr	r3, [r7, #12]
}
 801247a:	4618      	mov	r0, r3
 801247c:	3714      	adds	r7, #20
 801247e:	46bd      	mov	sp, r7
 8012480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop
 8012488:	200015dc 	.word	0x200015dc

0801248c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012494:	f7ff fa62 	bl	801195c <xTaskGetTickCount>
 8012498:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801249a:	4b0b      	ldr	r3, [pc, #44]	; (80124c8 <prvSampleTimeNow+0x3c>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	68fa      	ldr	r2, [r7, #12]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d205      	bcs.n	80124b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80124a4:	f000 f936 	bl	8012714 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2201      	movs	r2, #1
 80124ac:	601a      	str	r2, [r3, #0]
 80124ae:	e002      	b.n	80124b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80124b6:	4a04      	ldr	r2, [pc, #16]	; (80124c8 <prvSampleTimeNow+0x3c>)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80124bc:	68fb      	ldr	r3, [r7, #12]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	200015ec 	.word	0x200015ec

080124cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b086      	sub	sp, #24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
 80124d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80124da:	2300      	movs	r3, #0
 80124dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	68ba      	ldr	r2, [r7, #8]
 80124e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80124ea:	68ba      	ldr	r2, [r7, #8]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d812      	bhi.n	8012518 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124f2:	687a      	ldr	r2, [r7, #4]
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	1ad2      	subs	r2, r2, r3
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	699b      	ldr	r3, [r3, #24]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d302      	bcc.n	8012506 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012500:	2301      	movs	r3, #1
 8012502:	617b      	str	r3, [r7, #20]
 8012504:	e01b      	b.n	801253e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012506:	4b10      	ldr	r3, [pc, #64]	; (8012548 <prvInsertTimerInActiveList+0x7c>)
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	3304      	adds	r3, #4
 801250e:	4619      	mov	r1, r3
 8012510:	4610      	mov	r0, r2
 8012512:	f7fd ff50 	bl	80103b6 <vListInsert>
 8012516:	e012      	b.n	801253e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	429a      	cmp	r2, r3
 801251e:	d206      	bcs.n	801252e <prvInsertTimerInActiveList+0x62>
 8012520:	68ba      	ldr	r2, [r7, #8]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	429a      	cmp	r2, r3
 8012526:	d302      	bcc.n	801252e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012528:	2301      	movs	r3, #1
 801252a:	617b      	str	r3, [r7, #20]
 801252c:	e007      	b.n	801253e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801252e:	4b07      	ldr	r3, [pc, #28]	; (801254c <prvInsertTimerInActiveList+0x80>)
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	3304      	adds	r3, #4
 8012536:	4619      	mov	r1, r3
 8012538:	4610      	mov	r0, r2
 801253a:	f7fd ff3c 	bl	80103b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801253e:	697b      	ldr	r3, [r7, #20]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3718      	adds	r7, #24
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	200015e0 	.word	0x200015e0
 801254c:	200015dc 	.word	0x200015dc

08012550 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b08e      	sub	sp, #56	; 0x38
 8012554:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012556:	e0ca      	b.n	80126ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	da18      	bge.n	8012590 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801255e:	1d3b      	adds	r3, r7, #4
 8012560:	3304      	adds	r3, #4
 8012562:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012566:	2b00      	cmp	r3, #0
 8012568:	d10a      	bne.n	8012580 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256e:	f383 8811 	msr	BASEPRI, r3
 8012572:	f3bf 8f6f 	isb	sy
 8012576:	f3bf 8f4f 	dsb	sy
 801257a:	61fb      	str	r3, [r7, #28]
}
 801257c:	bf00      	nop
 801257e:	e7fe      	b.n	801257e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012586:	6850      	ldr	r0, [r2, #4]
 8012588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801258a:	6892      	ldr	r2, [r2, #8]
 801258c:	4611      	mov	r1, r2
 801258e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	f2c0 80aa 	blt.w	80126ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259e:	695b      	ldr	r3, [r3, #20]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d004      	beq.n	80125ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a6:	3304      	adds	r3, #4
 80125a8:	4618      	mov	r0, r3
 80125aa:	f7fd ff3d 	bl	8010428 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80125ae:	463b      	mov	r3, r7
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7ff ff6b 	bl	801248c <prvSampleTimeNow>
 80125b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b09      	cmp	r3, #9
 80125bc:	f200 8097 	bhi.w	80126ee <prvProcessReceivedCommands+0x19e>
 80125c0:	a201      	add	r2, pc, #4	; (adr r2, 80125c8 <prvProcessReceivedCommands+0x78>)
 80125c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c6:	bf00      	nop
 80125c8:	080125f1 	.word	0x080125f1
 80125cc:	080125f1 	.word	0x080125f1
 80125d0:	080125f1 	.word	0x080125f1
 80125d4:	08012665 	.word	0x08012665
 80125d8:	08012679 	.word	0x08012679
 80125dc:	080126c3 	.word	0x080126c3
 80125e0:	080125f1 	.word	0x080125f1
 80125e4:	080125f1 	.word	0x080125f1
 80125e8:	08012665 	.word	0x08012665
 80125ec:	08012679 	.word	0x08012679
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80125f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125f6:	f043 0301 	orr.w	r3, r3, #1
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012602:	68ba      	ldr	r2, [r7, #8]
 8012604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012606:	699b      	ldr	r3, [r3, #24]
 8012608:	18d1      	adds	r1, r2, r3
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801260e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012610:	f7ff ff5c 	bl	80124cc <prvInsertTimerInActiveList>
 8012614:	4603      	mov	r3, r0
 8012616:	2b00      	cmp	r3, #0
 8012618:	d069      	beq.n	80126ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261c:	6a1b      	ldr	r3, [r3, #32]
 801261e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012620:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012628:	f003 0304 	and.w	r3, r3, #4
 801262c:	2b00      	cmp	r3, #0
 801262e:	d05e      	beq.n	80126ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012630:	68ba      	ldr	r2, [r7, #8]
 8012632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012634:	699b      	ldr	r3, [r3, #24]
 8012636:	441a      	add	r2, r3
 8012638:	2300      	movs	r3, #0
 801263a:	9300      	str	r3, [sp, #0]
 801263c:	2300      	movs	r3, #0
 801263e:	2100      	movs	r1, #0
 8012640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012642:	f7ff fe05 	bl	8012250 <xTimerGenericCommand>
 8012646:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012648:	6a3b      	ldr	r3, [r7, #32]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d14f      	bne.n	80126ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012652:	f383 8811 	msr	BASEPRI, r3
 8012656:	f3bf 8f6f 	isb	sy
 801265a:	f3bf 8f4f 	dsb	sy
 801265e:	61bb      	str	r3, [r7, #24]
}
 8012660:	bf00      	nop
 8012662:	e7fe      	b.n	8012662 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801266a:	f023 0301 	bic.w	r3, r3, #1
 801266e:	b2da      	uxtb	r2, r3
 8012670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012676:	e03a      	b.n	80126ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801267e:	f043 0301 	orr.w	r3, r3, #1
 8012682:	b2da      	uxtb	r2, r3
 8012684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801268a:	68ba      	ldr	r2, [r7, #8]
 801268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012692:	699b      	ldr	r3, [r3, #24]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d10a      	bne.n	80126ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801269c:	f383 8811 	msr	BASEPRI, r3
 80126a0:	f3bf 8f6f 	isb	sy
 80126a4:	f3bf 8f4f 	dsb	sy
 80126a8:	617b      	str	r3, [r7, #20]
}
 80126aa:	bf00      	nop
 80126ac:	e7fe      	b.n	80126ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80126ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b0:	699a      	ldr	r2, [r3, #24]
 80126b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b4:	18d1      	adds	r1, r2, r3
 80126b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126bc:	f7ff ff06 	bl	80124cc <prvInsertTimerInActiveList>
					break;
 80126c0:	e015      	b.n	80126ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80126c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126c8:	f003 0302 	and.w	r3, r3, #2
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d103      	bne.n	80126d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80126d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126d2:	f000 fbdd 	bl	8012e90 <vPortFree>
 80126d6:	e00a      	b.n	80126ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80126d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126de:	f023 0301 	bic.w	r3, r3, #1
 80126e2:	b2da      	uxtb	r2, r3
 80126e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80126ea:	e000      	b.n	80126ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80126ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80126ee:	4b08      	ldr	r3, [pc, #32]	; (8012710 <prvProcessReceivedCommands+0x1c0>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	1d39      	adds	r1, r7, #4
 80126f4:	2200      	movs	r2, #0
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fe fa8e 	bl	8010c18 <xQueueReceive>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	f47f af2a 	bne.w	8012558 <prvProcessReceivedCommands+0x8>
	}
}
 8012704:	bf00      	nop
 8012706:	bf00      	nop
 8012708:	3730      	adds	r7, #48	; 0x30
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	200015e4 	.word	0x200015e4

08012714 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b088      	sub	sp, #32
 8012718:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801271a:	e048      	b.n	80127ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801271c:	4b2d      	ldr	r3, [pc, #180]	; (80127d4 <prvSwitchTimerLists+0xc0>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012726:	4b2b      	ldr	r3, [pc, #172]	; (80127d4 <prvSwitchTimerLists+0xc0>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	68db      	ldr	r3, [r3, #12]
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	3304      	adds	r3, #4
 8012734:	4618      	mov	r0, r3
 8012736:	f7fd fe77 	bl	8010428 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6a1b      	ldr	r3, [r3, #32]
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012748:	f003 0304 	and.w	r3, r3, #4
 801274c:	2b00      	cmp	r3, #0
 801274e:	d02e      	beq.n	80127ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	699b      	ldr	r3, [r3, #24]
 8012754:	693a      	ldr	r2, [r7, #16]
 8012756:	4413      	add	r3, r2
 8012758:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801275a:	68ba      	ldr	r2, [r7, #8]
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	429a      	cmp	r2, r3
 8012760:	d90e      	bls.n	8012780 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	68ba      	ldr	r2, [r7, #8]
 8012766:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	68fa      	ldr	r2, [r7, #12]
 801276c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801276e:	4b19      	ldr	r3, [pc, #100]	; (80127d4 <prvSwitchTimerLists+0xc0>)
 8012770:	681a      	ldr	r2, [r3, #0]
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	3304      	adds	r3, #4
 8012776:	4619      	mov	r1, r3
 8012778:	4610      	mov	r0, r2
 801277a:	f7fd fe1c 	bl	80103b6 <vListInsert>
 801277e:	e016      	b.n	80127ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012780:	2300      	movs	r3, #0
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	2300      	movs	r3, #0
 8012786:	693a      	ldr	r2, [r7, #16]
 8012788:	2100      	movs	r1, #0
 801278a:	68f8      	ldr	r0, [r7, #12]
 801278c:	f7ff fd60 	bl	8012250 <xTimerGenericCommand>
 8012790:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d10a      	bne.n	80127ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801279c:	f383 8811 	msr	BASEPRI, r3
 80127a0:	f3bf 8f6f 	isb	sy
 80127a4:	f3bf 8f4f 	dsb	sy
 80127a8:	603b      	str	r3, [r7, #0]
}
 80127aa:	bf00      	nop
 80127ac:	e7fe      	b.n	80127ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80127ae:	4b09      	ldr	r3, [pc, #36]	; (80127d4 <prvSwitchTimerLists+0xc0>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d1b1      	bne.n	801271c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80127b8:	4b06      	ldr	r3, [pc, #24]	; (80127d4 <prvSwitchTimerLists+0xc0>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80127be:	4b06      	ldr	r3, [pc, #24]	; (80127d8 <prvSwitchTimerLists+0xc4>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	4a04      	ldr	r2, [pc, #16]	; (80127d4 <prvSwitchTimerLists+0xc0>)
 80127c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80127c6:	4a04      	ldr	r2, [pc, #16]	; (80127d8 <prvSwitchTimerLists+0xc4>)
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	6013      	str	r3, [r2, #0]
}
 80127cc:	bf00      	nop
 80127ce:	3718      	adds	r7, #24
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	200015dc 	.word	0x200015dc
 80127d8:	200015e0 	.word	0x200015e0

080127dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80127e2:	f000 f967 	bl	8012ab4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80127e6:	4b15      	ldr	r3, [pc, #84]	; (801283c <prvCheckForValidListAndQueue+0x60>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d120      	bne.n	8012830 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80127ee:	4814      	ldr	r0, [pc, #80]	; (8012840 <prvCheckForValidListAndQueue+0x64>)
 80127f0:	f7fd fd90 	bl	8010314 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80127f4:	4813      	ldr	r0, [pc, #76]	; (8012844 <prvCheckForValidListAndQueue+0x68>)
 80127f6:	f7fd fd8d 	bl	8010314 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80127fa:	4b13      	ldr	r3, [pc, #76]	; (8012848 <prvCheckForValidListAndQueue+0x6c>)
 80127fc:	4a10      	ldr	r2, [pc, #64]	; (8012840 <prvCheckForValidListAndQueue+0x64>)
 80127fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012800:	4b12      	ldr	r3, [pc, #72]	; (801284c <prvCheckForValidListAndQueue+0x70>)
 8012802:	4a10      	ldr	r2, [pc, #64]	; (8012844 <prvCheckForValidListAndQueue+0x68>)
 8012804:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012806:	2300      	movs	r3, #0
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	4b11      	ldr	r3, [pc, #68]	; (8012850 <prvCheckForValidListAndQueue+0x74>)
 801280c:	4a11      	ldr	r2, [pc, #68]	; (8012854 <prvCheckForValidListAndQueue+0x78>)
 801280e:	2110      	movs	r1, #16
 8012810:	200a      	movs	r0, #10
 8012812:	f7fd fe9b 	bl	801054c <xQueueGenericCreateStatic>
 8012816:	4603      	mov	r3, r0
 8012818:	4a08      	ldr	r2, [pc, #32]	; (801283c <prvCheckForValidListAndQueue+0x60>)
 801281a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801281c:	4b07      	ldr	r3, [pc, #28]	; (801283c <prvCheckForValidListAndQueue+0x60>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d005      	beq.n	8012830 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012824:	4b05      	ldr	r3, [pc, #20]	; (801283c <prvCheckForValidListAndQueue+0x60>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	490b      	ldr	r1, [pc, #44]	; (8012858 <prvCheckForValidListAndQueue+0x7c>)
 801282a:	4618      	mov	r0, r3
 801282c:	f7fe fc88 	bl	8011140 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012830:	f000 f970 	bl	8012b14 <vPortExitCritical>
}
 8012834:	bf00      	nop
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	200015e4 	.word	0x200015e4
 8012840:	200015b4 	.word	0x200015b4
 8012844:	200015c8 	.word	0x200015c8
 8012848:	200015dc 	.word	0x200015dc
 801284c:	200015e0 	.word	0x200015e0
 8012850:	20001690 	.word	0x20001690
 8012854:	200015f0 	.word	0x200015f0
 8012858:	0801419c 	.word	0x0801419c

0801285c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801285c:	b480      	push	{r7}
 801285e:	b085      	sub	sp, #20
 8012860:	af00      	add	r7, sp, #0
 8012862:	60f8      	str	r0, [r7, #12]
 8012864:	60b9      	str	r1, [r7, #8]
 8012866:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	3b04      	subs	r3, #4
 801286c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	3b04      	subs	r3, #4
 801287a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	f023 0201 	bic.w	r2, r3, #1
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	3b04      	subs	r3, #4
 801288a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801288c:	4a0c      	ldr	r2, [pc, #48]	; (80128c0 <pxPortInitialiseStack+0x64>)
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	3b14      	subs	r3, #20
 8012896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	3b04      	subs	r3, #4
 80128a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	f06f 0202 	mvn.w	r2, #2
 80128aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	3b20      	subs	r3, #32
 80128b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80128b2:	68fb      	ldr	r3, [r7, #12]
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr
 80128c0:	080128c5 	.word	0x080128c5

080128c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80128c4:	b480      	push	{r7}
 80128c6:	b085      	sub	sp, #20
 80128c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80128ca:	2300      	movs	r3, #0
 80128cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80128ce:	4b12      	ldr	r3, [pc, #72]	; (8012918 <prvTaskExitError+0x54>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128d6:	d00a      	beq.n	80128ee <prvTaskExitError+0x2a>
	__asm volatile
 80128d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128dc:	f383 8811 	msr	BASEPRI, r3
 80128e0:	f3bf 8f6f 	isb	sy
 80128e4:	f3bf 8f4f 	dsb	sy
 80128e8:	60fb      	str	r3, [r7, #12]
}
 80128ea:	bf00      	nop
 80128ec:	e7fe      	b.n	80128ec <prvTaskExitError+0x28>
	__asm volatile
 80128ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f2:	f383 8811 	msr	BASEPRI, r3
 80128f6:	f3bf 8f6f 	isb	sy
 80128fa:	f3bf 8f4f 	dsb	sy
 80128fe:	60bb      	str	r3, [r7, #8]
}
 8012900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012902:	bf00      	nop
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d0fc      	beq.n	8012904 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801290a:	bf00      	nop
 801290c:	bf00      	nop
 801290e:	3714      	adds	r7, #20
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr
 8012918:	20000354 	.word	0x20000354
 801291c:	00000000 	.word	0x00000000

08012920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012920:	4b07      	ldr	r3, [pc, #28]	; (8012940 <pxCurrentTCBConst2>)
 8012922:	6819      	ldr	r1, [r3, #0]
 8012924:	6808      	ldr	r0, [r1, #0]
 8012926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292a:	f380 8809 	msr	PSP, r0
 801292e:	f3bf 8f6f 	isb	sy
 8012932:	f04f 0000 	mov.w	r0, #0
 8012936:	f380 8811 	msr	BASEPRI, r0
 801293a:	4770      	bx	lr
 801293c:	f3af 8000 	nop.w

08012940 <pxCurrentTCBConst2>:
 8012940:	200010b4 	.word	0x200010b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012944:	bf00      	nop
 8012946:	bf00      	nop

08012948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012948:	4808      	ldr	r0, [pc, #32]	; (801296c <prvPortStartFirstTask+0x24>)
 801294a:	6800      	ldr	r0, [r0, #0]
 801294c:	6800      	ldr	r0, [r0, #0]
 801294e:	f380 8808 	msr	MSP, r0
 8012952:	f04f 0000 	mov.w	r0, #0
 8012956:	f380 8814 	msr	CONTROL, r0
 801295a:	b662      	cpsie	i
 801295c:	b661      	cpsie	f
 801295e:	f3bf 8f4f 	dsb	sy
 8012962:	f3bf 8f6f 	isb	sy
 8012966:	df00      	svc	0
 8012968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801296a:	bf00      	nop
 801296c:	e000ed08 	.word	0xe000ed08

08012970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b086      	sub	sp, #24
 8012974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012976:	4b46      	ldr	r3, [pc, #280]	; (8012a90 <xPortStartScheduler+0x120>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4a46      	ldr	r2, [pc, #280]	; (8012a94 <xPortStartScheduler+0x124>)
 801297c:	4293      	cmp	r3, r2
 801297e:	d10a      	bne.n	8012996 <xPortStartScheduler+0x26>
	__asm volatile
 8012980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012984:	f383 8811 	msr	BASEPRI, r3
 8012988:	f3bf 8f6f 	isb	sy
 801298c:	f3bf 8f4f 	dsb	sy
 8012990:	613b      	str	r3, [r7, #16]
}
 8012992:	bf00      	nop
 8012994:	e7fe      	b.n	8012994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012996:	4b3e      	ldr	r3, [pc, #248]	; (8012a90 <xPortStartScheduler+0x120>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4a3f      	ldr	r2, [pc, #252]	; (8012a98 <xPortStartScheduler+0x128>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d10a      	bne.n	80129b6 <xPortStartScheduler+0x46>
	__asm volatile
 80129a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a4:	f383 8811 	msr	BASEPRI, r3
 80129a8:	f3bf 8f6f 	isb	sy
 80129ac:	f3bf 8f4f 	dsb	sy
 80129b0:	60fb      	str	r3, [r7, #12]
}
 80129b2:	bf00      	nop
 80129b4:	e7fe      	b.n	80129b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80129b6:	4b39      	ldr	r3, [pc, #228]	; (8012a9c <xPortStartScheduler+0x12c>)
 80129b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	b2db      	uxtb	r3, r3
 80129c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	22ff      	movs	r2, #255	; 0xff
 80129c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80129d0:	78fb      	ldrb	r3, [r7, #3]
 80129d2:	b2db      	uxtb	r3, r3
 80129d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	4b31      	ldr	r3, [pc, #196]	; (8012aa0 <xPortStartScheduler+0x130>)
 80129dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80129de:	4b31      	ldr	r3, [pc, #196]	; (8012aa4 <xPortStartScheduler+0x134>)
 80129e0:	2207      	movs	r2, #7
 80129e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129e4:	e009      	b.n	80129fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80129e6:	4b2f      	ldr	r3, [pc, #188]	; (8012aa4 <xPortStartScheduler+0x134>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	3b01      	subs	r3, #1
 80129ec:	4a2d      	ldr	r2, [pc, #180]	; (8012aa4 <xPortStartScheduler+0x134>)
 80129ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80129f0:	78fb      	ldrb	r3, [r7, #3]
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	005b      	lsls	r3, r3, #1
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129fa:	78fb      	ldrb	r3, [r7, #3]
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a02:	2b80      	cmp	r3, #128	; 0x80
 8012a04:	d0ef      	beq.n	80129e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012a06:	4b27      	ldr	r3, [pc, #156]	; (8012aa4 <xPortStartScheduler+0x134>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f1c3 0307 	rsb	r3, r3, #7
 8012a0e:	2b04      	cmp	r3, #4
 8012a10:	d00a      	beq.n	8012a28 <xPortStartScheduler+0xb8>
	__asm volatile
 8012a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a16:	f383 8811 	msr	BASEPRI, r3
 8012a1a:	f3bf 8f6f 	isb	sy
 8012a1e:	f3bf 8f4f 	dsb	sy
 8012a22:	60bb      	str	r3, [r7, #8]
}
 8012a24:	bf00      	nop
 8012a26:	e7fe      	b.n	8012a26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012a28:	4b1e      	ldr	r3, [pc, #120]	; (8012aa4 <xPortStartScheduler+0x134>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	021b      	lsls	r3, r3, #8
 8012a2e:	4a1d      	ldr	r2, [pc, #116]	; (8012aa4 <xPortStartScheduler+0x134>)
 8012a30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012a32:	4b1c      	ldr	r3, [pc, #112]	; (8012aa4 <xPortStartScheduler+0x134>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012a3a:	4a1a      	ldr	r2, [pc, #104]	; (8012aa4 <xPortStartScheduler+0x134>)
 8012a3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	b2da      	uxtb	r2, r3
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012a46:	4b18      	ldr	r3, [pc, #96]	; (8012aa8 <xPortStartScheduler+0x138>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	4a17      	ldr	r2, [pc, #92]	; (8012aa8 <xPortStartScheduler+0x138>)
 8012a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a52:	4b15      	ldr	r3, [pc, #84]	; (8012aa8 <xPortStartScheduler+0x138>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	4a14      	ldr	r2, [pc, #80]	; (8012aa8 <xPortStartScheduler+0x138>)
 8012a58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012a5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012a5e:	f000 f8dd 	bl	8012c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012a62:	4b12      	ldr	r3, [pc, #72]	; (8012aac <xPortStartScheduler+0x13c>)
 8012a64:	2200      	movs	r2, #0
 8012a66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012a68:	f000 f8fc 	bl	8012c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012a6c:	4b10      	ldr	r3, [pc, #64]	; (8012ab0 <xPortStartScheduler+0x140>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a0f      	ldr	r2, [pc, #60]	; (8012ab0 <xPortStartScheduler+0x140>)
 8012a72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012a76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012a78:	f7ff ff66 	bl	8012948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012a7c:	f7ff f84a 	bl	8011b14 <vTaskSwitchContext>
	prvTaskExitError();
 8012a80:	f7ff ff20 	bl	80128c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012a84:	2300      	movs	r3, #0
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3718      	adds	r7, #24
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	e000ed00 	.word	0xe000ed00
 8012a94:	410fc271 	.word	0x410fc271
 8012a98:	410fc270 	.word	0x410fc270
 8012a9c:	e000e400 	.word	0xe000e400
 8012aa0:	200016e0 	.word	0x200016e0
 8012aa4:	200016e4 	.word	0x200016e4
 8012aa8:	e000ed20 	.word	0xe000ed20
 8012aac:	20000354 	.word	0x20000354
 8012ab0:	e000ef34 	.word	0xe000ef34

08012ab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
	__asm volatile
 8012aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012abe:	f383 8811 	msr	BASEPRI, r3
 8012ac2:	f3bf 8f6f 	isb	sy
 8012ac6:	f3bf 8f4f 	dsb	sy
 8012aca:	607b      	str	r3, [r7, #4]
}
 8012acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012ace:	4b0f      	ldr	r3, [pc, #60]	; (8012b0c <vPortEnterCritical+0x58>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	4a0d      	ldr	r2, [pc, #52]	; (8012b0c <vPortEnterCritical+0x58>)
 8012ad6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ad8:	4b0c      	ldr	r3, [pc, #48]	; (8012b0c <vPortEnterCritical+0x58>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d10f      	bne.n	8012b00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012ae0:	4b0b      	ldr	r3, [pc, #44]	; (8012b10 <vPortEnterCritical+0x5c>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	b2db      	uxtb	r3, r3
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d00a      	beq.n	8012b00 <vPortEnterCritical+0x4c>
	__asm volatile
 8012aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aee:	f383 8811 	msr	BASEPRI, r3
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	f3bf 8f4f 	dsb	sy
 8012afa:	603b      	str	r3, [r7, #0]
}
 8012afc:	bf00      	nop
 8012afe:	e7fe      	b.n	8012afe <vPortEnterCritical+0x4a>
	}
}
 8012b00:	bf00      	nop
 8012b02:	370c      	adds	r7, #12
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr
 8012b0c:	20000354 	.word	0x20000354
 8012b10:	e000ed04 	.word	0xe000ed04

08012b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012b14:	b480      	push	{r7}
 8012b16:	b083      	sub	sp, #12
 8012b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012b1a:	4b12      	ldr	r3, [pc, #72]	; (8012b64 <vPortExitCritical+0x50>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d10a      	bne.n	8012b38 <vPortExitCritical+0x24>
	__asm volatile
 8012b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b26:	f383 8811 	msr	BASEPRI, r3
 8012b2a:	f3bf 8f6f 	isb	sy
 8012b2e:	f3bf 8f4f 	dsb	sy
 8012b32:	607b      	str	r3, [r7, #4]
}
 8012b34:	bf00      	nop
 8012b36:	e7fe      	b.n	8012b36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012b38:	4b0a      	ldr	r3, [pc, #40]	; (8012b64 <vPortExitCritical+0x50>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	3b01      	subs	r3, #1
 8012b3e:	4a09      	ldr	r2, [pc, #36]	; (8012b64 <vPortExitCritical+0x50>)
 8012b40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012b42:	4b08      	ldr	r3, [pc, #32]	; (8012b64 <vPortExitCritical+0x50>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d105      	bne.n	8012b56 <vPortExitCritical+0x42>
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	f383 8811 	msr	BASEPRI, r3
}
 8012b54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012b56:	bf00      	nop
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	20000354 	.word	0x20000354
	...

08012b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012b70:	f3ef 8009 	mrs	r0, PSP
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	4b15      	ldr	r3, [pc, #84]	; (8012bd0 <pxCurrentTCBConst>)
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	f01e 0f10 	tst.w	lr, #16
 8012b80:	bf08      	it	eq
 8012b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b8a:	6010      	str	r0, [r2, #0]
 8012b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012b94:	f380 8811 	msr	BASEPRI, r0
 8012b98:	f3bf 8f4f 	dsb	sy
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f7fe ffb8 	bl	8011b14 <vTaskSwitchContext>
 8012ba4:	f04f 0000 	mov.w	r0, #0
 8012ba8:	f380 8811 	msr	BASEPRI, r0
 8012bac:	bc09      	pop	{r0, r3}
 8012bae:	6819      	ldr	r1, [r3, #0]
 8012bb0:	6808      	ldr	r0, [r1, #0]
 8012bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb6:	f01e 0f10 	tst.w	lr, #16
 8012bba:	bf08      	it	eq
 8012bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012bc0:	f380 8809 	msr	PSP, r0
 8012bc4:	f3bf 8f6f 	isb	sy
 8012bc8:	4770      	bx	lr
 8012bca:	bf00      	nop
 8012bcc:	f3af 8000 	nop.w

08012bd0 <pxCurrentTCBConst>:
 8012bd0:	200010b4 	.word	0x200010b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012bd4:	bf00      	nop
 8012bd6:	bf00      	nop

08012bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8012bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be2:	f383 8811 	msr	BASEPRI, r3
 8012be6:	f3bf 8f6f 	isb	sy
 8012bea:	f3bf 8f4f 	dsb	sy
 8012bee:	607b      	str	r3, [r7, #4]
}
 8012bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012bf2:	f7fe fed5 	bl	80119a0 <xTaskIncrementTick>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d003      	beq.n	8012c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012bfc:	4b06      	ldr	r3, [pc, #24]	; (8012c18 <xPortSysTickHandler+0x40>)
 8012bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c02:	601a      	str	r2, [r3, #0]
 8012c04:	2300      	movs	r3, #0
 8012c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	f383 8811 	msr	BASEPRI, r3
}
 8012c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012c10:	bf00      	nop
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	e000ed04 	.word	0xe000ed04

08012c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012c20:	4b0b      	ldr	r3, [pc, #44]	; (8012c50 <vPortSetupTimerInterrupt+0x34>)
 8012c22:	2200      	movs	r2, #0
 8012c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012c26:	4b0b      	ldr	r3, [pc, #44]	; (8012c54 <vPortSetupTimerInterrupt+0x38>)
 8012c28:	2200      	movs	r2, #0
 8012c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012c2c:	4b0a      	ldr	r3, [pc, #40]	; (8012c58 <vPortSetupTimerInterrupt+0x3c>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a0a      	ldr	r2, [pc, #40]	; (8012c5c <vPortSetupTimerInterrupt+0x40>)
 8012c32:	fba2 2303 	umull	r2, r3, r2, r3
 8012c36:	099b      	lsrs	r3, r3, #6
 8012c38:	4a09      	ldr	r2, [pc, #36]	; (8012c60 <vPortSetupTimerInterrupt+0x44>)
 8012c3a:	3b01      	subs	r3, #1
 8012c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012c3e:	4b04      	ldr	r3, [pc, #16]	; (8012c50 <vPortSetupTimerInterrupt+0x34>)
 8012c40:	2207      	movs	r2, #7
 8012c42:	601a      	str	r2, [r3, #0]
}
 8012c44:	bf00      	nop
 8012c46:	46bd      	mov	sp, r7
 8012c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4c:	4770      	bx	lr
 8012c4e:	bf00      	nop
 8012c50:	e000e010 	.word	0xe000e010
 8012c54:	e000e018 	.word	0xe000e018
 8012c58:	20000000 	.word	0x20000000
 8012c5c:	10624dd3 	.word	0x10624dd3
 8012c60:	e000e014 	.word	0xe000e014

08012c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012c74 <vPortEnableVFP+0x10>
 8012c68:	6801      	ldr	r1, [r0, #0]
 8012c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012c6e:	6001      	str	r1, [r0, #0]
 8012c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012c72:	bf00      	nop
 8012c74:	e000ed88 	.word	0xe000ed88

08012c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012c78:	b480      	push	{r7}
 8012c7a:	b085      	sub	sp, #20
 8012c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012c7e:	f3ef 8305 	mrs	r3, IPSR
 8012c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	2b0f      	cmp	r3, #15
 8012c88:	d914      	bls.n	8012cb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012c8a:	4a17      	ldr	r2, [pc, #92]	; (8012ce8 <vPortValidateInterruptPriority+0x70>)
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	4413      	add	r3, r2
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012c94:	4b15      	ldr	r3, [pc, #84]	; (8012cec <vPortValidateInterruptPriority+0x74>)
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	7afa      	ldrb	r2, [r7, #11]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d20a      	bcs.n	8012cb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	607b      	str	r3, [r7, #4]
}
 8012cb0:	bf00      	nop
 8012cb2:	e7fe      	b.n	8012cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012cb4:	4b0e      	ldr	r3, [pc, #56]	; (8012cf0 <vPortValidateInterruptPriority+0x78>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012cbc:	4b0d      	ldr	r3, [pc, #52]	; (8012cf4 <vPortValidateInterruptPriority+0x7c>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d90a      	bls.n	8012cda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc8:	f383 8811 	msr	BASEPRI, r3
 8012ccc:	f3bf 8f6f 	isb	sy
 8012cd0:	f3bf 8f4f 	dsb	sy
 8012cd4:	603b      	str	r3, [r7, #0]
}
 8012cd6:	bf00      	nop
 8012cd8:	e7fe      	b.n	8012cd8 <vPortValidateInterruptPriority+0x60>
	}
 8012cda:	bf00      	nop
 8012cdc:	3714      	adds	r7, #20
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop
 8012ce8:	e000e3f0 	.word	0xe000e3f0
 8012cec:	200016e0 	.word	0x200016e0
 8012cf0:	e000ed0c 	.word	0xe000ed0c
 8012cf4:	200016e4 	.word	0x200016e4

08012cf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b08a      	sub	sp, #40	; 0x28
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012d00:	2300      	movs	r3, #0
 8012d02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012d04:	f7fe fd7e 	bl	8011804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012d08:	4b5b      	ldr	r3, [pc, #364]	; (8012e78 <pvPortMalloc+0x180>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d101      	bne.n	8012d14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012d10:	f000 f920 	bl	8012f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d14:	4b59      	ldr	r3, [pc, #356]	; (8012e7c <pvPortMalloc+0x184>)
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	4013      	ands	r3, r2
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	f040 8093 	bne.w	8012e48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d01d      	beq.n	8012d64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012d28:	2208      	movs	r2, #8
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4413      	add	r3, r2
 8012d2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f003 0307 	and.w	r3, r3, #7
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d014      	beq.n	8012d64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f023 0307 	bic.w	r3, r3, #7
 8012d40:	3308      	adds	r3, #8
 8012d42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f003 0307 	and.w	r3, r3, #7
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d00a      	beq.n	8012d64 <pvPortMalloc+0x6c>
	__asm volatile
 8012d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d52:	f383 8811 	msr	BASEPRI, r3
 8012d56:	f3bf 8f6f 	isb	sy
 8012d5a:	f3bf 8f4f 	dsb	sy
 8012d5e:	617b      	str	r3, [r7, #20]
}
 8012d60:	bf00      	nop
 8012d62:	e7fe      	b.n	8012d62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d06e      	beq.n	8012e48 <pvPortMalloc+0x150>
 8012d6a:	4b45      	ldr	r3, [pc, #276]	; (8012e80 <pvPortMalloc+0x188>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d869      	bhi.n	8012e48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012d74:	4b43      	ldr	r3, [pc, #268]	; (8012e84 <pvPortMalloc+0x18c>)
 8012d76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012d78:	4b42      	ldr	r3, [pc, #264]	; (8012e84 <pvPortMalloc+0x18c>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d7e:	e004      	b.n	8012d8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d903      	bls.n	8012d9c <pvPortMalloc+0xa4>
 8012d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d1f1      	bne.n	8012d80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012d9c:	4b36      	ldr	r3, [pc, #216]	; (8012e78 <pvPortMalloc+0x180>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d050      	beq.n	8012e48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012da6:	6a3b      	ldr	r3, [r7, #32]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2208      	movs	r2, #8
 8012dac:	4413      	add	r3, r2
 8012dae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	6a3b      	ldr	r3, [r7, #32]
 8012db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dba:	685a      	ldr	r2, [r3, #4]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	1ad2      	subs	r2, r2, r3
 8012dc0:	2308      	movs	r3, #8
 8012dc2:	005b      	lsls	r3, r3, #1
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d91f      	bls.n	8012e08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	4413      	add	r3, r2
 8012dce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	f003 0307 	and.w	r3, r3, #7
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00a      	beq.n	8012df0 <pvPortMalloc+0xf8>
	__asm volatile
 8012dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dde:	f383 8811 	msr	BASEPRI, r3
 8012de2:	f3bf 8f6f 	isb	sy
 8012de6:	f3bf 8f4f 	dsb	sy
 8012dea:	613b      	str	r3, [r7, #16]
}
 8012dec:	bf00      	nop
 8012dee:	e7fe      	b.n	8012dee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df2:	685a      	ldr	r2, [r3, #4]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	1ad2      	subs	r2, r2, r3
 8012df8:	69bb      	ldr	r3, [r7, #24]
 8012dfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012e02:	69b8      	ldr	r0, [r7, #24]
 8012e04:	f000 f908 	bl	8013018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012e08:	4b1d      	ldr	r3, [pc, #116]	; (8012e80 <pvPortMalloc+0x188>)
 8012e0a:	681a      	ldr	r2, [r3, #0]
 8012e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	1ad3      	subs	r3, r2, r3
 8012e12:	4a1b      	ldr	r2, [pc, #108]	; (8012e80 <pvPortMalloc+0x188>)
 8012e14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012e16:	4b1a      	ldr	r3, [pc, #104]	; (8012e80 <pvPortMalloc+0x188>)
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	4b1b      	ldr	r3, [pc, #108]	; (8012e88 <pvPortMalloc+0x190>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d203      	bcs.n	8012e2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012e22:	4b17      	ldr	r3, [pc, #92]	; (8012e80 <pvPortMalloc+0x188>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4a18      	ldr	r2, [pc, #96]	; (8012e88 <pvPortMalloc+0x190>)
 8012e28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e2c:	685a      	ldr	r2, [r3, #4]
 8012e2e:	4b13      	ldr	r3, [pc, #76]	; (8012e7c <pvPortMalloc+0x184>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	431a      	orrs	r2, r3
 8012e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012e3e:	4b13      	ldr	r3, [pc, #76]	; (8012e8c <pvPortMalloc+0x194>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	3301      	adds	r3, #1
 8012e44:	4a11      	ldr	r2, [pc, #68]	; (8012e8c <pvPortMalloc+0x194>)
 8012e46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012e48:	f7fe fcea 	bl	8011820 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e4c:	69fb      	ldr	r3, [r7, #28]
 8012e4e:	f003 0307 	and.w	r3, r3, #7
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d00a      	beq.n	8012e6c <pvPortMalloc+0x174>
	__asm volatile
 8012e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5a:	f383 8811 	msr	BASEPRI, r3
 8012e5e:	f3bf 8f6f 	isb	sy
 8012e62:	f3bf 8f4f 	dsb	sy
 8012e66:	60fb      	str	r3, [r7, #12]
}
 8012e68:	bf00      	nop
 8012e6a:	e7fe      	b.n	8012e6a <pvPortMalloc+0x172>
	return pvReturn;
 8012e6c:	69fb      	ldr	r3, [r7, #28]
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3728      	adds	r7, #40	; 0x28
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	200052f0 	.word	0x200052f0
 8012e7c:	20005304 	.word	0x20005304
 8012e80:	200052f4 	.word	0x200052f4
 8012e84:	200052e8 	.word	0x200052e8
 8012e88:	200052f8 	.word	0x200052f8
 8012e8c:	200052fc 	.word	0x200052fc

08012e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b086      	sub	sp, #24
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d04d      	beq.n	8012f3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012ea2:	2308      	movs	r3, #8
 8012ea4:	425b      	negs	r3, r3
 8012ea6:	697a      	ldr	r2, [r7, #20]
 8012ea8:	4413      	add	r3, r2
 8012eaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	685a      	ldr	r2, [r3, #4]
 8012eb4:	4b24      	ldr	r3, [pc, #144]	; (8012f48 <vPortFree+0xb8>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	4013      	ands	r3, r2
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d10a      	bne.n	8012ed4 <vPortFree+0x44>
	__asm volatile
 8012ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec2:	f383 8811 	msr	BASEPRI, r3
 8012ec6:	f3bf 8f6f 	isb	sy
 8012eca:	f3bf 8f4f 	dsb	sy
 8012ece:	60fb      	str	r3, [r7, #12]
}
 8012ed0:	bf00      	nop
 8012ed2:	e7fe      	b.n	8012ed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d00a      	beq.n	8012ef2 <vPortFree+0x62>
	__asm volatile
 8012edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee0:	f383 8811 	msr	BASEPRI, r3
 8012ee4:	f3bf 8f6f 	isb	sy
 8012ee8:	f3bf 8f4f 	dsb	sy
 8012eec:	60bb      	str	r3, [r7, #8]
}
 8012eee:	bf00      	nop
 8012ef0:	e7fe      	b.n	8012ef0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	685a      	ldr	r2, [r3, #4]
 8012ef6:	4b14      	ldr	r3, [pc, #80]	; (8012f48 <vPortFree+0xb8>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4013      	ands	r3, r2
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d01e      	beq.n	8012f3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d11a      	bne.n	8012f3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	685a      	ldr	r2, [r3, #4]
 8012f0c:	4b0e      	ldr	r3, [pc, #56]	; (8012f48 <vPortFree+0xb8>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	43db      	mvns	r3, r3
 8012f12:	401a      	ands	r2, r3
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012f18:	f7fe fc74 	bl	8011804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	685a      	ldr	r2, [r3, #4]
 8012f20:	4b0a      	ldr	r3, [pc, #40]	; (8012f4c <vPortFree+0xbc>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4413      	add	r3, r2
 8012f26:	4a09      	ldr	r2, [pc, #36]	; (8012f4c <vPortFree+0xbc>)
 8012f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012f2a:	6938      	ldr	r0, [r7, #16]
 8012f2c:	f000 f874 	bl	8013018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012f30:	4b07      	ldr	r3, [pc, #28]	; (8012f50 <vPortFree+0xc0>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	3301      	adds	r3, #1
 8012f36:	4a06      	ldr	r2, [pc, #24]	; (8012f50 <vPortFree+0xc0>)
 8012f38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012f3a:	f7fe fc71 	bl	8011820 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012f3e:	bf00      	nop
 8012f40:	3718      	adds	r7, #24
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	20005304 	.word	0x20005304
 8012f4c:	200052f4 	.word	0x200052f4
 8012f50:	20005300 	.word	0x20005300

08012f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012f54:	b480      	push	{r7}
 8012f56:	b085      	sub	sp, #20
 8012f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012f5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012f60:	4b27      	ldr	r3, [pc, #156]	; (8013000 <prvHeapInit+0xac>)
 8012f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f003 0307 	and.w	r3, r3, #7
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d00c      	beq.n	8012f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	3307      	adds	r3, #7
 8012f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	f023 0307 	bic.w	r3, r3, #7
 8012f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012f7c:	68ba      	ldr	r2, [r7, #8]
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	1ad3      	subs	r3, r2, r3
 8012f82:	4a1f      	ldr	r2, [pc, #124]	; (8013000 <prvHeapInit+0xac>)
 8012f84:	4413      	add	r3, r2
 8012f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012f8c:	4a1d      	ldr	r2, [pc, #116]	; (8013004 <prvHeapInit+0xb0>)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012f92:	4b1c      	ldr	r3, [pc, #112]	; (8013004 <prvHeapInit+0xb0>)
 8012f94:	2200      	movs	r2, #0
 8012f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	68ba      	ldr	r2, [r7, #8]
 8012f9c:	4413      	add	r3, r2
 8012f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012fa0:	2208      	movs	r2, #8
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	1a9b      	subs	r3, r3, r2
 8012fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	f023 0307 	bic.w	r3, r3, #7
 8012fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	4a15      	ldr	r2, [pc, #84]	; (8013008 <prvHeapInit+0xb4>)
 8012fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012fb6:	4b14      	ldr	r3, [pc, #80]	; (8013008 <prvHeapInit+0xb4>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012fbe:	4b12      	ldr	r3, [pc, #72]	; (8013008 <prvHeapInit+0xb4>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	1ad2      	subs	r2, r2, r3
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012fd4:	4b0c      	ldr	r3, [pc, #48]	; (8013008 <prvHeapInit+0xb4>)
 8012fd6:	681a      	ldr	r2, [r3, #0]
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	4a0a      	ldr	r2, [pc, #40]	; (801300c <prvHeapInit+0xb8>)
 8012fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	4a09      	ldr	r2, [pc, #36]	; (8013010 <prvHeapInit+0xbc>)
 8012fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012fec:	4b09      	ldr	r3, [pc, #36]	; (8013014 <prvHeapInit+0xc0>)
 8012fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012ff2:	601a      	str	r2, [r3, #0]
}
 8012ff4:	bf00      	nop
 8012ff6:	3714      	adds	r7, #20
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffe:	4770      	bx	lr
 8013000:	200016e8 	.word	0x200016e8
 8013004:	200052e8 	.word	0x200052e8
 8013008:	200052f0 	.word	0x200052f0
 801300c:	200052f8 	.word	0x200052f8
 8013010:	200052f4 	.word	0x200052f4
 8013014:	20005304 	.word	0x20005304

08013018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013018:	b480      	push	{r7}
 801301a:	b085      	sub	sp, #20
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013020:	4b28      	ldr	r3, [pc, #160]	; (80130c4 <prvInsertBlockIntoFreeList+0xac>)
 8013022:	60fb      	str	r3, [r7, #12]
 8013024:	e002      	b.n	801302c <prvInsertBlockIntoFreeList+0x14>
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	60fb      	str	r3, [r7, #12]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	429a      	cmp	r2, r3
 8013034:	d8f7      	bhi.n	8013026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	68ba      	ldr	r2, [r7, #8]
 8013040:	4413      	add	r3, r2
 8013042:	687a      	ldr	r2, [r7, #4]
 8013044:	429a      	cmp	r2, r3
 8013046:	d108      	bne.n	801305a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	685a      	ldr	r2, [r3, #4]
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	441a      	add	r2, r3
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	68ba      	ldr	r2, [r7, #8]
 8013064:	441a      	add	r2, r3
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	429a      	cmp	r2, r3
 801306c:	d118      	bne.n	80130a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	4b15      	ldr	r3, [pc, #84]	; (80130c8 <prvInsertBlockIntoFreeList+0xb0>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	429a      	cmp	r2, r3
 8013078:	d00d      	beq.n	8013096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	685a      	ldr	r2, [r3, #4]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	441a      	add	r2, r3
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	601a      	str	r2, [r3, #0]
 8013094:	e008      	b.n	80130a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013096:	4b0c      	ldr	r3, [pc, #48]	; (80130c8 <prvInsertBlockIntoFreeList+0xb0>)
 8013098:	681a      	ldr	r2, [r3, #0]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	601a      	str	r2, [r3, #0]
 801309e:	e003      	b.n	80130a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80130a8:	68fa      	ldr	r2, [r7, #12]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d002      	beq.n	80130b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80130b6:	bf00      	nop
 80130b8:	3714      	adds	r7, #20
 80130ba:	46bd      	mov	sp, r7
 80130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop
 80130c4:	200052e8 	.word	0x200052e8
 80130c8:	200052f0 	.word	0x200052f0

080130cc <vTaskCOM_Runnable>:
{

}

void vTaskCOM_Runnable(void)
{
 80130cc:	b480      	push	{r7}
 80130ce:	af00      	add	r7, sp, #0
	for(;;)
 80130d0:	e7fe      	b.n	80130d0 <vTaskCOM_Runnable+0x4>
	...

080130d4 <DistanceSensor_Init>:

extern osMessageQueueId_t xFIFO_COMHandle;
extern osMessageQueueId_t xFIFO_DistanceHandle;

void DistanceSensor_Init(void)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c1;
 80130da:	4b3a      	ldr	r3, [pc, #232]	; (80131c4 <DistanceSensor_Init+0xf0>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	4a3a      	ldr	r2, [pc, #232]	; (80131c8 <DistanceSensor_Init+0xf4>)
 80130e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = VL53L0X_ADDR;
 80130e4:	4b37      	ldr	r3, [pc, #220]	; (80131c4 <DistanceSensor_Init+0xf0>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2252      	movs	r2, #82	; 0x52
 80130ea:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	//Disable XSHUT
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80130ee:	2200      	movs	r2, #0
 80130f0:	2180      	movs	r1, #128	; 0x80
 80130f2:	4836      	ldr	r0, [pc, #216]	; (80131cc <DistanceSensor_Init+0xf8>)
 80130f4:	f7ef f934 	bl	8002360 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80130f8:	2014      	movs	r0, #20
 80130fa:	f7ee fafb 	bl	80016f4 <HAL_Delay>

	//Enable XSHUT
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 80130fe:	2201      	movs	r2, #1
 8013100:	2180      	movs	r1, #128	; 0x80
 8013102:	4832      	ldr	r0, [pc, #200]	; (80131cc <DistanceSensor_Init+0xf8>)
 8013104:	f7ef f92c 	bl	8002360 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8013108:	2014      	movs	r0, #20
 801310a:	f7ee faf3 	bl	80016f4 <HAL_Delay>

	VL53L0X_WaitDeviceBooted( Dev );
 801310e:	4b2d      	ldr	r3, [pc, #180]	; (80131c4 <DistanceSensor_Init+0xf0>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	4618      	mov	r0, r3
 8013114:	f7f6 f8d8 	bl	80092c8 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8013118:	4b2a      	ldr	r3, [pc, #168]	; (80131c4 <DistanceSensor_Init+0xf0>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	4618      	mov	r0, r3
 801311e:	f7f5 fded 	bl	8008cfc <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8013122:	4b28      	ldr	r3, [pc, #160]	; (80131c4 <DistanceSensor_Init+0xf0>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	4618      	mov	r0, r3
 8013128:	f7f5 ff4c 	bl	8008fc4 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 801312c:	4b25      	ldr	r3, [pc, #148]	; (80131c4 <DistanceSensor_Init+0xf0>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	1c7a      	adds	r2, r7, #1
 8013132:	1cb9      	adds	r1, r7, #2
 8013134:	4618      	mov	r0, r3
 8013136:	f7f6 fde7 	bl	8009d08 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 801313a:	4b22      	ldr	r3, [pc, #136]	; (80131c4 <DistanceSensor_Init+0xf0>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	1cfa      	adds	r2, r7, #3
 8013140:	1d39      	adds	r1, r7, #4
 8013142:	4618      	mov	r0, r3
 8013144:	f7f7 fa6e 	bl	800a624 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8013148:	4b1e      	ldr	r3, [pc, #120]	; (80131c4 <DistanceSensor_Init+0xf0>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	2100      	movs	r1, #0
 801314e:	4618      	mov	r0, r3
 8013150:	f7f6 f958 	bl	8009404 <VL53L0X_SetDeviceMode>
	//HAL_IWDG_Refresh(&hiwdg);

	//Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8013154:	4b1b      	ldr	r3, [pc, #108]	; (80131c4 <DistanceSensor_Init+0xf0>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	2201      	movs	r2, #1
 801315a:	2100      	movs	r1, #0
 801315c:	4618      	mov	r0, r3
 801315e:	f7f6 fbcd 	bl	80098fc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8013162:	4b18      	ldr	r3, [pc, #96]	; (80131c4 <DistanceSensor_Init+0xf0>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2201      	movs	r2, #1
 8013168:	2101      	movs	r1, #1
 801316a:	4618      	mov	r0, r3
 801316c:	f7f6 fbc6 	bl	80098fc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8013170:	4b14      	ldr	r3, [pc, #80]	; (80131c4 <DistanceSensor_Init+0xf0>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f641 1299 	movw	r2, #6553	; 0x1999
 8013178:	2101      	movs	r1, #1
 801317a:	4618      	mov	r0, r3
 801317c:	f7f6 fc6e 	bl	8009a5c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8013180:	4b10      	ldr	r3, [pc, #64]	; (80131c4 <DistanceSensor_Init+0xf0>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8013188:	2100      	movs	r1, #0
 801318a:	4618      	mov	r0, r3
 801318c:	f7f6 fc66 	bl	8009a5c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8013190:	4b0c      	ldr	r3, [pc, #48]	; (80131c4 <DistanceSensor_Init+0xf0>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8013198:	4618      	mov	r0, r3
 801319a:	f7f6 f991 	bl	80094c0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 801319e:	4b09      	ldr	r3, [pc, #36]	; (80131c4 <DistanceSensor_Init+0xf0>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	2212      	movs	r2, #18
 80131a4:	2100      	movs	r1, #0
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f6 f9b0 	bl	800950c <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80131ac:	4b05      	ldr	r3, [pc, #20]	; (80131c4 <DistanceSensor_Init+0xf0>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	220e      	movs	r2, #14
 80131b2:	2101      	movs	r1, #1
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7f6 f9a9 	bl	800950c <VL53L0X_SetVcselPulsePeriod>
	//HAL_IWDG_Refresh(&hiwdg);
}
 80131ba:	bf00      	nop
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	20000358 	.word	0x20000358
 80131c8:	20000440 	.word	0x20000440
 80131cc:	40020400 	.word	0x40020400

080131d0 <DistanceSensor_MainRunnable>:

void DistanceSensor_MainRunnable(void)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
	const uint32_t MeasureTolerance = 5;
 80131d6:	2305      	movs	r3, #5
 80131d8:	60fb      	str	r3, [r7, #12]
	const uint32_t Reference = 520;
 80131da:	f44f 7302 	mov.w	r3, #520	; 0x208
 80131de:	60bb      	str	r3, [r7, #8]
	static uint16_t distance, past_measure;
	PDU_t distance_PDU;

	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80131e0:	4b20      	ldr	r3, [pc, #128]	; (8013264 <DistanceSensor_MainRunnable+0x94>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	4920      	ldr	r1, [pc, #128]	; (8013268 <DistanceSensor_MainRunnable+0x98>)
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7f7 f830 	bl	800a24c <VL53L0X_PerformSingleRangingMeasurement>
	if(RangingData.RangeStatus == 0)
 80131ec:	4b1e      	ldr	r3, [pc, #120]	; (8013268 <DistanceSensor_MainRunnable+0x98>)
 80131ee:	7e1b      	ldrb	r3, [r3, #24]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d12e      	bne.n	8013252 <DistanceSensor_MainRunnable+0x82>
  {
		if(RangingData.RangeMilliMeter > past_measure+MeasureTolerance || RangingData.RangeMilliMeter < past_measure-MeasureTolerance)
 80131f4:	4b1c      	ldr	r3, [pc, #112]	; (8013268 <DistanceSensor_MainRunnable+0x98>)
 80131f6:	891b      	ldrh	r3, [r3, #8]
 80131f8:	461a      	mov	r2, r3
 80131fa:	4b1c      	ldr	r3, [pc, #112]	; (801326c <DistanceSensor_MainRunnable+0x9c>)
 80131fc:	881b      	ldrh	r3, [r3, #0]
 80131fe:	4619      	mov	r1, r3
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	440b      	add	r3, r1
 8013204:	429a      	cmp	r2, r3
 8013206:	d809      	bhi.n	801321c <DistanceSensor_MainRunnable+0x4c>
 8013208:	4b17      	ldr	r3, [pc, #92]	; (8013268 <DistanceSensor_MainRunnable+0x98>)
 801320a:	891b      	ldrh	r3, [r3, #8]
 801320c:	461a      	mov	r2, r3
 801320e:	4b17      	ldr	r3, [pc, #92]	; (801326c <DistanceSensor_MainRunnable+0x9c>)
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	4619      	mov	r1, r3
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	1acb      	subs	r3, r1, r3
 8013218:	429a      	cmp	r2, r3
 801321a:	d21a      	bcs.n	8013252 <DistanceSensor_MainRunnable+0x82>
		{
			distance = Reference - RangingData.RangeMilliMeter;
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	b29a      	uxth	r2, r3
 8013220:	4b11      	ldr	r3, [pc, #68]	; (8013268 <DistanceSensor_MainRunnable+0x98>)
 8013222:	891b      	ldrh	r3, [r3, #8]
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	b29a      	uxth	r2, r3
 8013228:	4b11      	ldr	r3, [pc, #68]	; (8013270 <DistanceSensor_MainRunnable+0xa0>)
 801322a:	801a      	strh	r2, [r3, #0]
			distance_PDU.rawData = distance;
 801322c:	4b10      	ldr	r3, [pc, #64]	; (8013270 <DistanceSensor_MainRunnable+0xa0>)
 801322e:	881b      	ldrh	r3, [r3, #0]
 8013230:	603b      	str	r3, [r7, #0]
			distance_PDU.chunks[4] = 0; /*TODO: Add the message ID*/
 8013232:	2300      	movs	r3, #0
 8013234:	713b      	strb	r3, [r7, #4]
			osMessageQueuePut(xFIFO_DistanceHandle, &distance, 0U, 0U); /*Sending to PID*/
 8013236:	4b0f      	ldr	r3, [pc, #60]	; (8013274 <DistanceSensor_MainRunnable+0xa4>)
 8013238:	6818      	ldr	r0, [r3, #0]
 801323a:	2300      	movs	r3, #0
 801323c:	2200      	movs	r2, #0
 801323e:	490c      	ldr	r1, [pc, #48]	; (8013270 <DistanceSensor_MainRunnable+0xa0>)
 8013240:	f7fc ff76 	bl	8010130 <osMessageQueuePut>
			osMessageQueuePut(xFIFO_COMHandle, &distance_PDU, 0U, 0U); /*Sending to COM*/
 8013244:	4b0c      	ldr	r3, [pc, #48]	; (8013278 <DistanceSensor_MainRunnable+0xa8>)
 8013246:	6818      	ldr	r0, [r3, #0]
 8013248:	4639      	mov	r1, r7
 801324a:	2300      	movs	r3, #0
 801324c:	2200      	movs	r2, #0
 801324e:	f7fc ff6f 	bl	8010130 <osMessageQueuePut>
		}
	}
	past_measure = RangingData.RangeMilliMeter;
 8013252:	4b05      	ldr	r3, [pc, #20]	; (8013268 <DistanceSensor_MainRunnable+0x98>)
 8013254:	891a      	ldrh	r2, [r3, #8]
 8013256:	4b05      	ldr	r3, [pc, #20]	; (801326c <DistanceSensor_MainRunnable+0x9c>)
 8013258:	801a      	strh	r2, [r3, #0]
}
 801325a:	bf00      	nop
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	20000358 	.word	0x20000358
 8013268:	20005498 	.word	0x20005498
 801326c:	200054b4 	.word	0x200054b4
 8013270:	200054b6 	.word	0x200054b6
 8013274:	20000858 	.word	0x20000858
 8013278:	20000854 	.word	0x20000854

0801327c <FAN_Init>:
 *  Created on: May 29, 2024
 *      Author: lord448
 */

void FAN_Init(void)
{
 801327c:	b480      	push	{r7}
 801327e:	af00      	add	r7, sp, #0

}
 8013280:	bf00      	nop
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr

0801328a <FAN_MainRunnable>:

void FAN_MainRunnable(void)
{
 801328a:	b480      	push	{r7}
 801328c:	af00      	add	r7, sp, #0

}
 801328e:	bf00      	nop
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <vTaskModeManager_Runnable>:
 *      Author: lord448
 */


void vTaskModeManager_Runnable(void)
{
 8013298:	b480      	push	{r7}
 801329a:	af00      	add	r7, sp, #0

	for(;;)
 801329c:	e7fe      	b.n	801329c <vTaskModeManager_Runnable+0x4>

0801329e <PID_SetConfigs>:
		.Past_Error = 0,
		.Set_Point = 0
};

static PID_SetConfigs(PIDConfigs *configs)
{
 801329e:	b480      	push	{r7}
 80132a0:	b083      	sub	sp, #12
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
  /*TODO: Change the configs of the global PID structure based on the pointer*/
}
 80132a6:	bf00      	nop
 80132a8:	4618      	mov	r0, r3
 80132aa:	370c      	adds	r7, #12
 80132ac:	46bd      	mov	sp, r7
 80132ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b2:	4770      	bx	lr

080132b4 <vTaskPID_Runnable>:


}

void vTaskPID_Runnable(void)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b088      	sub	sp, #32
 80132b8:	af00      	add	r7, sp, #0
	static uint32_t distance = 0;
	PIDConfigs FIFOConfigs;
	for(;;)
	{
		/*Check if there are some new configurations*/
		if(osMessageQueueGet(xFIFO_PIDConfigsHandle, &FIFOConfigs, NULL, 0) == osOK){
 80132ba:	4b76      	ldr	r3, [pc, #472]	; (8013494 <vTaskPID_Runnable+0x1e0>)
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	1d39      	adds	r1, r7, #4
 80132c0:	2300      	movs	r3, #0
 80132c2:	2200      	movs	r2, #0
 80132c4:	f7fc ff94 	bl	80101f0 <osMessageQueueGet>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d103      	bne.n	80132d6 <vTaskPID_Runnable+0x22>
			/*There are configurations to set*/
			PID_SetConfigs(&FIFOConfigs);
 80132ce:	1d3b      	adds	r3, r7, #4
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7ff ffe4 	bl	801329e <PID_SetConfigs>
		}
		/*Get Distance*/
		(void)osMessageQueueGet(xFIFO_DistanceHandle, &distance, NULL, osWaitForever);
 80132d6:	4b70      	ldr	r3, [pc, #448]	; (8013498 <vTaskPID_Runnable+0x1e4>)
 80132d8:	6818      	ldr	r0, [r3, #0]
 80132da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132de:	2200      	movs	r2, #0
 80132e0:	496e      	ldr	r1, [pc, #440]	; (801349c <vTaskPID_Runnable+0x1e8>)
 80132e2:	f7fc ff85 	bl	80101f0 <osMessageQueueGet>
		PID.Error = PID.Set_Point - distance;
 80132e6:	4b6e      	ldr	r3, [pc, #440]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80132e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132ea:	461a      	mov	r2, r3
 80132ec:	4b6b      	ldr	r3, [pc, #428]	; (801349c <vTaskPID_Runnable+0x1e8>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	1ad3      	subs	r3, r2, r3
 80132f2:	461a      	mov	r2, r3
 80132f4:	4b6a      	ldr	r3, [pc, #424]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80132f6:	62da      	str	r2, [r3, #44]	; 0x2c
		PID.Control.P =  (float)PID.Error * PID.Gains.Kp;
 80132f8:	4b69      	ldr	r3, [pc, #420]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80132fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132fc:	ee07 3a90 	vmov	s15, r3
 8013300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013304:	4b66      	ldr	r3, [pc, #408]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013306:	edd3 7a00 	vldr	s15, [r3]
 801330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801330e:	4b64      	ldr	r3, [pc, #400]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013310:	edc3 7a03 	vstr	s15, [r3, #12]
		PID.Control.I += (float)PID.Error * PID.Gains.Ki;
 8013314:	4b62      	ldr	r3, [pc, #392]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013316:	ed93 7a04 	vldr	s14, [r3, #16]
 801331a:	4b61      	ldr	r3, [pc, #388]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801331e:	ee07 3a90 	vmov	s15, r3
 8013322:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013326:	4b5e      	ldr	r3, [pc, #376]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013328:	edd3 7a01 	vldr	s15, [r3, #4]
 801332c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013334:	4b5a      	ldr	r3, [pc, #360]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013336:	edc3 7a04 	vstr	s15, [r3, #16]
		PID.Control.D =  (float)(PID.Error - PID.Past_Error) * PID.Gains.Kd;
 801333a:	4b59      	ldr	r3, [pc, #356]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801333e:	4b58      	ldr	r3, [pc, #352]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013342:	1ad3      	subs	r3, r2, r3
 8013344:	ee07 3a90 	vmov	s15, r3
 8013348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801334c:	4b54      	ldr	r3, [pc, #336]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801334e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013356:	4b52      	ldr	r3, [pc, #328]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013358:	edc3 7a05 	vstr	s15, [r3, #20]
		/*Constraints check on the PID algorithm (recommended only for I)*/
		if(NO_LIMIT != PID.Limits.P){
 801335c:	4b50      	ldr	r3, [pc, #320]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801335e:	699b      	ldr	r3, [r3, #24]
 8013360:	2200      	movs	r2, #0
 8013362:	4293      	cmp	r3, r2
 8013364:	d016      	beq.n	8013394 <vTaskPID_Runnable+0xe0>
			/*There are constraints on the P control action*/
			if(PID.Control.P > PID.Limits.P) {
 8013366:	4b4e      	ldr	r3, [pc, #312]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013368:	ed93 7a03 	vldr	s14, [r3, #12]
 801336c:	4b4c      	ldr	r3, [pc, #304]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	ee07 3a90 	vmov	s15, r3
 8013374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013380:	dd08      	ble.n	8013394 <vTaskPID_Runnable+0xe0>
				PID.Control.P = PID.Limits.P;
 8013382:	4b47      	ldr	r3, [pc, #284]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013384:	699b      	ldr	r3, [r3, #24]
 8013386:	ee07 3a90 	vmov	s15, r3
 801338a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801338e:	4b44      	ldr	r3, [pc, #272]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013390:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		}
		if(NO_LIMIT != PID.Limits.I){
 8013394:	4b42      	ldr	r3, [pc, #264]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013396:	69db      	ldr	r3, [r3, #28]
 8013398:	2200      	movs	r2, #0
 801339a:	4293      	cmp	r3, r2
 801339c:	d016      	beq.n	80133cc <vTaskPID_Runnable+0x118>
			/*There are constraints on the I control action*/
			if(PID.Control.I > PID.Limits.I) {
 801339e:	4b40      	ldr	r3, [pc, #256]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80133a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80133a4:	4b3e      	ldr	r3, [pc, #248]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80133a6:	69db      	ldr	r3, [r3, #28]
 80133a8:	ee07 3a90 	vmov	s15, r3
 80133ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b8:	dd08      	ble.n	80133cc <vTaskPID_Runnable+0x118>
				PID.Control.I = PID.Limits.I;
 80133ba:	4b39      	ldr	r3, [pc, #228]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80133bc:	69db      	ldr	r3, [r3, #28]
 80133be:	ee07 3a90 	vmov	s15, r3
 80133c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133c6:	4b36      	ldr	r3, [pc, #216]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80133c8:	edc3 7a04 	vstr	s15, [r3, #16]
			}
		}
		if(NO_LIMIT != PID.Limits.D){
 80133cc:	4b34      	ldr	r3, [pc, #208]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80133ce:	6a1b      	ldr	r3, [r3, #32]
 80133d0:	2200      	movs	r2, #0
 80133d2:	4293      	cmp	r3, r2
 80133d4:	d016      	beq.n	8013404 <vTaskPID_Runnable+0x150>
			/*There are constraints on the D control action*/
			if(PID.Control.D > PID.Limits.D) {
 80133d6:	4b32      	ldr	r3, [pc, #200]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80133d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80133dc:	4b30      	ldr	r3, [pc, #192]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80133de:	6a1b      	ldr	r3, [r3, #32]
 80133e0:	ee07 3a90 	vmov	s15, r3
 80133e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f0:	dd08      	ble.n	8013404 <vTaskPID_Runnable+0x150>
				PID.Control.D = PID.Limits.D;
 80133f2:	4b2b      	ldr	r3, [pc, #172]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 80133f4:	6a1b      	ldr	r3, [r3, #32]
 80133f6:	ee07 3a90 	vmov	s15, r3
 80133fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133fe:	4b28      	ldr	r3, [pc, #160]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013400:	edc3 7a05 	vstr	s15, [r3, #20]
			}
		}
		/*Calculating control action*/
		PID.ControlAction = PID.Control.P + PID.Control.I + PID.Control.D;
 8013404:	4b26      	ldr	r3, [pc, #152]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013406:	ed93 7a03 	vldr	s14, [r3, #12]
 801340a:	4b25      	ldr	r3, [pc, #148]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801340c:	edd3 7a04 	vldr	s15, [r3, #16]
 8013410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013414:	4b22      	ldr	r3, [pc, #136]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013416:	edd3 7a05 	vldr	s15, [r3, #20]
 801341a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801341e:	4b20      	ldr	r3, [pc, #128]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013420:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		/*Constraints for the control action*/
		if(PID.ControlAction < 0)
 8013424:	4b1e      	ldr	r3, [pc, #120]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013426:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801342a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013432:	d513      	bpl.n	801345c <vTaskPID_Runnable+0x1a8>
			PID.ControlAction = ABS(PID.ControlAction);
 8013434:	4b1a      	ldr	r3, [pc, #104]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013436:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801343a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013442:	dd03      	ble.n	801344c <vTaskPID_Runnable+0x198>
 8013444:	4b16      	ldr	r3, [pc, #88]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013446:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801344a:	e004      	b.n	8013456 <vTaskPID_Runnable+0x1a2>
 801344c:	4b14      	ldr	r3, [pc, #80]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801344e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013452:	eef1 7a67 	vneg.f32	s15, s15
 8013456:	4b12      	ldr	r3, [pc, #72]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013458:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(PID.ControlAction > PID.Limits.Control)
 801345c:	4b10      	ldr	r3, [pc, #64]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801345e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8013462:	4b0f      	ldr	r3, [pc, #60]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013464:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013470:	dd03      	ble.n	801347a <vTaskPID_Runnable+0x1c6>
			PID.ControlAction = PID.Limits.Control;
 8013472:	4b0b      	ldr	r3, [pc, #44]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013476:	4a0a      	ldr	r2, [pc, #40]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 8013478:	6293      	str	r3, [r2, #40]	; 0x28
		/*Sending to the actuator*/
		osMessageQueuePut(xFIFO_ControlActionHandle, &PID.ControlAction, 0U, 0U);
 801347a:	4b0a      	ldr	r3, [pc, #40]	; (80134a4 <vTaskPID_Runnable+0x1f0>)
 801347c:	6818      	ldr	r0, [r3, #0]
 801347e:	2300      	movs	r3, #0
 8013480:	2200      	movs	r2, #0
 8013482:	4909      	ldr	r1, [pc, #36]	; (80134a8 <vTaskPID_Runnable+0x1f4>)
 8013484:	f7fc fe54 	bl	8010130 <osMessageQueuePut>
		PID.Past_Error = PID.Error;
 8013488:	4b05      	ldr	r3, [pc, #20]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801348c:	4a04      	ldr	r2, [pc, #16]	; (80134a0 <vTaskPID_Runnable+0x1ec>)
 801348e:	6313      	str	r3, [r2, #48]	; 0x30
		if(osMessageQueueGet(xFIFO_PIDConfigsHandle, &FIFOConfigs, NULL, 0) == osOK){
 8013490:	e713      	b.n	80132ba <vTaskPID_Runnable+0x6>
 8013492:	bf00      	nop
 8013494:	20000860 	.word	0x20000860
 8013498:	20000858 	.word	0x20000858
 801349c:	200054f0 	.word	0x200054f0
 80134a0:	200054b8 	.word	0x200054b8
 80134a4:	2000085c 	.word	0x2000085c
 80134a8:	200054e0 	.word	0x200054e0

080134ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80134b0:	2200      	movs	r2, #0
 80134b2:	4912      	ldr	r1, [pc, #72]	; (80134fc <MX_USB_DEVICE_Init+0x50>)
 80134b4:	4812      	ldr	r0, [pc, #72]	; (8013500 <MX_USB_DEVICE_Init+0x54>)
 80134b6:	f7fb f89b 	bl	800e5f0 <USBD_Init>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d001      	beq.n	80134c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80134c0:	f7ed fcf6 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80134c4:	490f      	ldr	r1, [pc, #60]	; (8013504 <MX_USB_DEVICE_Init+0x58>)
 80134c6:	480e      	ldr	r0, [pc, #56]	; (8013500 <MX_USB_DEVICE_Init+0x54>)
 80134c8:	f7fb f8c2 	bl	800e650 <USBD_RegisterClass>
 80134cc:	4603      	mov	r3, r0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d001      	beq.n	80134d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80134d2:	f7ed fced 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80134d6:	490c      	ldr	r1, [pc, #48]	; (8013508 <MX_USB_DEVICE_Init+0x5c>)
 80134d8:	4809      	ldr	r0, [pc, #36]	; (8013500 <MX_USB_DEVICE_Init+0x54>)
 80134da:	f7fa fff9 	bl	800e4d0 <USBD_CDC_RegisterInterface>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d001      	beq.n	80134e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80134e4:	f7ed fce4 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80134e8:	4805      	ldr	r0, [pc, #20]	; (8013500 <MX_USB_DEVICE_Init+0x54>)
 80134ea:	f7fb f8e7 	bl	800e6bc <USBD_Start>
 80134ee:	4603      	mov	r3, r0
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d001      	beq.n	80134f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80134f4:	f7ed fcdc 	bl	8000eb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80134f8:	bf00      	nop
 80134fa:	bd80      	pop	{r7, pc}
 80134fc:	20000370 	.word	0x20000370
 8013500:	200054f4 	.word	0x200054f4
 8013504:	200002d4 	.word	0x200002d4
 8013508:	2000035c 	.word	0x2000035c

0801350c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013510:	2200      	movs	r2, #0
 8013512:	4905      	ldr	r1, [pc, #20]	; (8013528 <CDC_Init_FS+0x1c>)
 8013514:	4805      	ldr	r0, [pc, #20]	; (801352c <CDC_Init_FS+0x20>)
 8013516:	f7fa fff5 	bl	800e504 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801351a:	4905      	ldr	r1, [pc, #20]	; (8013530 <CDC_Init_FS+0x24>)
 801351c:	4803      	ldr	r0, [pc, #12]	; (801352c <CDC_Init_FS+0x20>)
 801351e:	f7fb f813 	bl	800e548 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013522:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013524:	4618      	mov	r0, r3
 8013526:	bd80      	pop	{r7, pc}
 8013528:	20005fd0 	.word	0x20005fd0
 801352c:	200054f4 	.word	0x200054f4
 8013530:	200057d0 	.word	0x200057d0

08013534 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013534:	b480      	push	{r7}
 8013536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013538:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801353a:	4618      	mov	r0, r3
 801353c:	46bd      	mov	sp, r7
 801353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013542:	4770      	bx	lr

08013544 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013544:	b480      	push	{r7}
 8013546:	b083      	sub	sp, #12
 8013548:	af00      	add	r7, sp, #0
 801354a:	4603      	mov	r3, r0
 801354c:	6039      	str	r1, [r7, #0]
 801354e:	71fb      	strb	r3, [r7, #7]
 8013550:	4613      	mov	r3, r2
 8013552:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013554:	79fb      	ldrb	r3, [r7, #7]
 8013556:	2b23      	cmp	r3, #35	; 0x23
 8013558:	d84a      	bhi.n	80135f0 <CDC_Control_FS+0xac>
 801355a:	a201      	add	r2, pc, #4	; (adr r2, 8013560 <CDC_Control_FS+0x1c>)
 801355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013560:	080135f1 	.word	0x080135f1
 8013564:	080135f1 	.word	0x080135f1
 8013568:	080135f1 	.word	0x080135f1
 801356c:	080135f1 	.word	0x080135f1
 8013570:	080135f1 	.word	0x080135f1
 8013574:	080135f1 	.word	0x080135f1
 8013578:	080135f1 	.word	0x080135f1
 801357c:	080135f1 	.word	0x080135f1
 8013580:	080135f1 	.word	0x080135f1
 8013584:	080135f1 	.word	0x080135f1
 8013588:	080135f1 	.word	0x080135f1
 801358c:	080135f1 	.word	0x080135f1
 8013590:	080135f1 	.word	0x080135f1
 8013594:	080135f1 	.word	0x080135f1
 8013598:	080135f1 	.word	0x080135f1
 801359c:	080135f1 	.word	0x080135f1
 80135a0:	080135f1 	.word	0x080135f1
 80135a4:	080135f1 	.word	0x080135f1
 80135a8:	080135f1 	.word	0x080135f1
 80135ac:	080135f1 	.word	0x080135f1
 80135b0:	080135f1 	.word	0x080135f1
 80135b4:	080135f1 	.word	0x080135f1
 80135b8:	080135f1 	.word	0x080135f1
 80135bc:	080135f1 	.word	0x080135f1
 80135c0:	080135f1 	.word	0x080135f1
 80135c4:	080135f1 	.word	0x080135f1
 80135c8:	080135f1 	.word	0x080135f1
 80135cc:	080135f1 	.word	0x080135f1
 80135d0:	080135f1 	.word	0x080135f1
 80135d4:	080135f1 	.word	0x080135f1
 80135d8:	080135f1 	.word	0x080135f1
 80135dc:	080135f1 	.word	0x080135f1
 80135e0:	080135f1 	.word	0x080135f1
 80135e4:	080135f1 	.word	0x080135f1
 80135e8:	080135f1 	.word	0x080135f1
 80135ec:	080135f1 	.word	0x080135f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80135f0:	bf00      	nop
  }

  return (USBD_OK);
 80135f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	370c      	adds	r7, #12
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b084      	sub	sp, #16
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801360a:	6879      	ldr	r1, [r7, #4]
 801360c:	4813      	ldr	r0, [pc, #76]	; (801365c <CDC_Receive_FS+0x5c>)
 801360e:	f7fa ff9b 	bl	800e548 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013612:	4812      	ldr	r0, [pc, #72]	; (801365c <CDC_Receive_FS+0x5c>)
 8013614:	f7fa ffb6 	bl	800e584 <USBD_CDC_ReceivePacket>
  memset(ResBuffer, '\0', 64); //Clear the buffer
 8013618:	2240      	movs	r2, #64	; 0x40
 801361a:	2100      	movs	r1, #0
 801361c:	4810      	ldr	r0, [pc, #64]	; (8013660 <CDC_Receive_FS+0x60>)
 801361e:	f000 fc85 	bl	8013f2c <memset>
  uint8_t len = (uint8_t)*Len;
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	73fb      	strb	r3, [r7, #15]
  memcpy(ResBuffer, Buf, len); //Copy the data to buffer
 8013628:	7bfb      	ldrb	r3, [r7, #15]
 801362a:	461a      	mov	r2, r3
 801362c:	6879      	ldr	r1, [r7, #4]
 801362e:	480c      	ldr	r0, [pc, #48]	; (8013660 <CDC_Receive_FS+0x60>)
 8013630:	f000 fc6e 	bl	8013f10 <memcpy>
  memset(Buf, '\0', len); //Clear Buf
 8013634:	7bfb      	ldrb	r3, [r7, #15]
 8013636:	461a      	mov	r2, r3
 8013638:	2100      	movs	r1, #0
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f000 fc76 	bl	8013f2c <memset>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8013640:	2201      	movs	r2, #1
 8013642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013646:	4807      	ldr	r0, [pc, #28]	; (8013664 <CDC_Receive_FS+0x64>)
 8013648:	f7ee fe8a 	bl	8002360 <HAL_GPIO_WritePin>
  ReceiveFlag = 1;
 801364c:	4b06      	ldr	r3, [pc, #24]	; (8013668 <CDC_Receive_FS+0x68>)
 801364e:	2201      	movs	r2, #1
 8013650:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8013652:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013654:	4618      	mov	r0, r3
 8013656:	3710      	adds	r7, #16
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}
 801365c:	200054f4 	.word	0x200054f4
 8013660:	2000086c 	.word	0x2000086c
 8013664:	40020800 	.word	0x40020800
 8013668:	200008ac 	.word	0x200008ac

0801366c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801366c:	b480      	push	{r7}
 801366e:	b087      	sub	sp, #28
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	4613      	mov	r3, r2
 8013678:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801367a:	2300      	movs	r3, #0
 801367c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801367e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013682:	4618      	mov	r0, r3
 8013684:	371c      	adds	r7, #28
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr
	...

08013690 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013690:	b480      	push	{r7}
 8013692:	b083      	sub	sp, #12
 8013694:	af00      	add	r7, sp, #0
 8013696:	4603      	mov	r3, r0
 8013698:	6039      	str	r1, [r7, #0]
 801369a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	2212      	movs	r2, #18
 80136a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80136a2:	4b03      	ldr	r3, [pc, #12]	; (80136b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr
 80136b0:	2000038c 	.word	0x2000038c

080136b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136b4:	b480      	push	{r7}
 80136b6:	b083      	sub	sp, #12
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	4603      	mov	r3, r0
 80136bc:	6039      	str	r1, [r7, #0]
 80136be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	2204      	movs	r2, #4
 80136c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80136c6:	4b03      	ldr	r3, [pc, #12]	; (80136d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	370c      	adds	r7, #12
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr
 80136d4:	200003a0 	.word	0x200003a0

080136d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
 80136de:	4603      	mov	r3, r0
 80136e0:	6039      	str	r1, [r7, #0]
 80136e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80136e4:	79fb      	ldrb	r3, [r7, #7]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d105      	bne.n	80136f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80136ea:	683a      	ldr	r2, [r7, #0]
 80136ec:	4907      	ldr	r1, [pc, #28]	; (801370c <USBD_FS_ProductStrDescriptor+0x34>)
 80136ee:	4808      	ldr	r0, [pc, #32]	; (8013710 <USBD_FS_ProductStrDescriptor+0x38>)
 80136f0:	f7fc f990 	bl	800fa14 <USBD_GetString>
 80136f4:	e004      	b.n	8013700 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80136f6:	683a      	ldr	r2, [r7, #0]
 80136f8:	4904      	ldr	r1, [pc, #16]	; (801370c <USBD_FS_ProductStrDescriptor+0x34>)
 80136fa:	4805      	ldr	r0, [pc, #20]	; (8013710 <USBD_FS_ProductStrDescriptor+0x38>)
 80136fc:	f7fc f98a 	bl	800fa14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013700:	4b02      	ldr	r3, [pc, #8]	; (801370c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013702:	4618      	mov	r0, r3
 8013704:	3708      	adds	r7, #8
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}
 801370a:	bf00      	nop
 801370c:	200067d0 	.word	0x200067d0
 8013710:	080141a4 	.word	0x080141a4

08013714 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	4603      	mov	r3, r0
 801371c:	6039      	str	r1, [r7, #0]
 801371e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013720:	683a      	ldr	r2, [r7, #0]
 8013722:	4904      	ldr	r1, [pc, #16]	; (8013734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013724:	4804      	ldr	r0, [pc, #16]	; (8013738 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013726:	f7fc f975 	bl	800fa14 <USBD_GetString>
  return USBD_StrDesc;
 801372a:	4b02      	ldr	r3, [pc, #8]	; (8013734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801372c:	4618      	mov	r0, r3
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	200067d0 	.word	0x200067d0
 8013738:	080141bc 	.word	0x080141bc

0801373c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	4603      	mov	r3, r0
 8013744:	6039      	str	r1, [r7, #0]
 8013746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	221a      	movs	r2, #26
 801374c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801374e:	f000 f843 	bl	80137d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013752:	4b02      	ldr	r3, [pc, #8]	; (801375c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013754:	4618      	mov	r0, r3
 8013756:	3708      	adds	r7, #8
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	200003a4 	.word	0x200003a4

08013760 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
 8013766:	4603      	mov	r3, r0
 8013768:	6039      	str	r1, [r7, #0]
 801376a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801376c:	79fb      	ldrb	r3, [r7, #7]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d105      	bne.n	801377e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013772:	683a      	ldr	r2, [r7, #0]
 8013774:	4907      	ldr	r1, [pc, #28]	; (8013794 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013776:	4808      	ldr	r0, [pc, #32]	; (8013798 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013778:	f7fc f94c 	bl	800fa14 <USBD_GetString>
 801377c:	e004      	b.n	8013788 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801377e:	683a      	ldr	r2, [r7, #0]
 8013780:	4904      	ldr	r1, [pc, #16]	; (8013794 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013782:	4805      	ldr	r0, [pc, #20]	; (8013798 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013784:	f7fc f946 	bl	800fa14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013788:	4b02      	ldr	r3, [pc, #8]	; (8013794 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801378a:	4618      	mov	r0, r3
 801378c:	3708      	adds	r7, #8
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
 8013792:	bf00      	nop
 8013794:	200067d0 	.word	0x200067d0
 8013798:	080141d0 	.word	0x080141d0

0801379c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	4603      	mov	r3, r0
 80137a4:	6039      	str	r1, [r7, #0]
 80137a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80137a8:	79fb      	ldrb	r3, [r7, #7]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d105      	bne.n	80137ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80137ae:	683a      	ldr	r2, [r7, #0]
 80137b0:	4907      	ldr	r1, [pc, #28]	; (80137d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80137b2:	4808      	ldr	r0, [pc, #32]	; (80137d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80137b4:	f7fc f92e 	bl	800fa14 <USBD_GetString>
 80137b8:	e004      	b.n	80137c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80137ba:	683a      	ldr	r2, [r7, #0]
 80137bc:	4904      	ldr	r1, [pc, #16]	; (80137d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80137be:	4805      	ldr	r0, [pc, #20]	; (80137d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80137c0:	f7fc f928 	bl	800fa14 <USBD_GetString>
  }
  return USBD_StrDesc;
 80137c4:	4b02      	ldr	r3, [pc, #8]	; (80137d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3708      	adds	r7, #8
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	200067d0 	.word	0x200067d0
 80137d4:	080141dc 	.word	0x080141dc

080137d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80137de:	4b0f      	ldr	r3, [pc, #60]	; (801381c <Get_SerialNum+0x44>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80137e4:	4b0e      	ldr	r3, [pc, #56]	; (8013820 <Get_SerialNum+0x48>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80137ea:	4b0e      	ldr	r3, [pc, #56]	; (8013824 <Get_SerialNum+0x4c>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80137f0:	68fa      	ldr	r2, [r7, #12]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4413      	add	r3, r2
 80137f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d009      	beq.n	8013812 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80137fe:	2208      	movs	r2, #8
 8013800:	4909      	ldr	r1, [pc, #36]	; (8013828 <Get_SerialNum+0x50>)
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f000 f814 	bl	8013830 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013808:	2204      	movs	r2, #4
 801380a:	4908      	ldr	r1, [pc, #32]	; (801382c <Get_SerialNum+0x54>)
 801380c:	68b8      	ldr	r0, [r7, #8]
 801380e:	f000 f80f 	bl	8013830 <IntToUnicode>
  }
}
 8013812:	bf00      	nop
 8013814:	3710      	adds	r7, #16
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
 801381a:	bf00      	nop
 801381c:	1fff7a10 	.word	0x1fff7a10
 8013820:	1fff7a14 	.word	0x1fff7a14
 8013824:	1fff7a18 	.word	0x1fff7a18
 8013828:	200003a6 	.word	0x200003a6
 801382c:	200003b6 	.word	0x200003b6

08013830 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013830:	b480      	push	{r7}
 8013832:	b087      	sub	sp, #28
 8013834:	af00      	add	r7, sp, #0
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	4613      	mov	r3, r2
 801383c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801383e:	2300      	movs	r3, #0
 8013840:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013842:	2300      	movs	r3, #0
 8013844:	75fb      	strb	r3, [r7, #23]
 8013846:	e027      	b.n	8013898 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	0f1b      	lsrs	r3, r3, #28
 801384c:	2b09      	cmp	r3, #9
 801384e:	d80b      	bhi.n	8013868 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	0f1b      	lsrs	r3, r3, #28
 8013854:	b2da      	uxtb	r2, r3
 8013856:	7dfb      	ldrb	r3, [r7, #23]
 8013858:	005b      	lsls	r3, r3, #1
 801385a:	4619      	mov	r1, r3
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	440b      	add	r3, r1
 8013860:	3230      	adds	r2, #48	; 0x30
 8013862:	b2d2      	uxtb	r2, r2
 8013864:	701a      	strb	r2, [r3, #0]
 8013866:	e00a      	b.n	801387e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	0f1b      	lsrs	r3, r3, #28
 801386c:	b2da      	uxtb	r2, r3
 801386e:	7dfb      	ldrb	r3, [r7, #23]
 8013870:	005b      	lsls	r3, r3, #1
 8013872:	4619      	mov	r1, r3
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	440b      	add	r3, r1
 8013878:	3237      	adds	r2, #55	; 0x37
 801387a:	b2d2      	uxtb	r2, r2
 801387c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	011b      	lsls	r3, r3, #4
 8013882:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013884:	7dfb      	ldrb	r3, [r7, #23]
 8013886:	005b      	lsls	r3, r3, #1
 8013888:	3301      	adds	r3, #1
 801388a:	68ba      	ldr	r2, [r7, #8]
 801388c:	4413      	add	r3, r2
 801388e:	2200      	movs	r2, #0
 8013890:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013892:	7dfb      	ldrb	r3, [r7, #23]
 8013894:	3301      	adds	r3, #1
 8013896:	75fb      	strb	r3, [r7, #23]
 8013898:	7dfa      	ldrb	r2, [r7, #23]
 801389a:	79fb      	ldrb	r3, [r7, #7]
 801389c:	429a      	cmp	r2, r3
 801389e:	d3d3      	bcc.n	8013848 <IntToUnicode+0x18>
  }
}
 80138a0:	bf00      	nop
 80138a2:	bf00      	nop
 80138a4:	371c      	adds	r7, #28
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
	...

080138b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b08a      	sub	sp, #40	; 0x28
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80138b8:	f107 0314 	add.w	r3, r7, #20
 80138bc:	2200      	movs	r2, #0
 80138be:	601a      	str	r2, [r3, #0]
 80138c0:	605a      	str	r2, [r3, #4]
 80138c2:	609a      	str	r2, [r3, #8]
 80138c4:	60da      	str	r2, [r3, #12]
 80138c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80138d0:	d13a      	bne.n	8013948 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80138d2:	2300      	movs	r3, #0
 80138d4:	613b      	str	r3, [r7, #16]
 80138d6:	4b1e      	ldr	r3, [pc, #120]	; (8013950 <HAL_PCD_MspInit+0xa0>)
 80138d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138da:	4a1d      	ldr	r2, [pc, #116]	; (8013950 <HAL_PCD_MspInit+0xa0>)
 80138dc:	f043 0301 	orr.w	r3, r3, #1
 80138e0:	6313      	str	r3, [r2, #48]	; 0x30
 80138e2:	4b1b      	ldr	r3, [pc, #108]	; (8013950 <HAL_PCD_MspInit+0xa0>)
 80138e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138e6:	f003 0301 	and.w	r3, r3, #1
 80138ea:	613b      	str	r3, [r7, #16]
 80138ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80138ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80138f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138f4:	2302      	movs	r3, #2
 80138f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138f8:	2300      	movs	r3, #0
 80138fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138fc:	2303      	movs	r3, #3
 80138fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013900:	230a      	movs	r3, #10
 8013902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013904:	f107 0314 	add.w	r3, r7, #20
 8013908:	4619      	mov	r1, r3
 801390a:	4812      	ldr	r0, [pc, #72]	; (8013954 <HAL_PCD_MspInit+0xa4>)
 801390c:	f7ee fba4 	bl	8002058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013910:	4b0f      	ldr	r3, [pc, #60]	; (8013950 <HAL_PCD_MspInit+0xa0>)
 8013912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013914:	4a0e      	ldr	r2, [pc, #56]	; (8013950 <HAL_PCD_MspInit+0xa0>)
 8013916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801391a:	6353      	str	r3, [r2, #52]	; 0x34
 801391c:	2300      	movs	r3, #0
 801391e:	60fb      	str	r3, [r7, #12]
 8013920:	4b0b      	ldr	r3, [pc, #44]	; (8013950 <HAL_PCD_MspInit+0xa0>)
 8013922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013924:	4a0a      	ldr	r2, [pc, #40]	; (8013950 <HAL_PCD_MspInit+0xa0>)
 8013926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801392a:	6453      	str	r3, [r2, #68]	; 0x44
 801392c:	4b08      	ldr	r3, [pc, #32]	; (8013950 <HAL_PCD_MspInit+0xa0>)
 801392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013934:	60fb      	str	r3, [r7, #12]
 8013936:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013938:	2200      	movs	r2, #0
 801393a:	2105      	movs	r1, #5
 801393c:	2043      	movs	r0, #67	; 0x43
 801393e:	f7ed ffd8 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013942:	2043      	movs	r0, #67	; 0x43
 8013944:	f7ed fff1 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013948:	bf00      	nop
 801394a:	3728      	adds	r7, #40	; 0x28
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}
 8013950:	40023800 	.word	0x40023800
 8013954:	40020000 	.word	0x40020000

08013958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801396c:	4619      	mov	r1, r3
 801396e:	4610      	mov	r0, r2
 8013970:	f7fa fef1 	bl	800e756 <USBD_LL_SetupStage>
}
 8013974:	bf00      	nop
 8013976:	3708      	adds	r7, #8
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	460b      	mov	r3, r1
 8013986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801398e:	78fa      	ldrb	r2, [r7, #3]
 8013990:	6879      	ldr	r1, [r7, #4]
 8013992:	4613      	mov	r3, r2
 8013994:	00db      	lsls	r3, r3, #3
 8013996:	4413      	add	r3, r2
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	440b      	add	r3, r1
 801399c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	78fb      	ldrb	r3, [r7, #3]
 80139a4:	4619      	mov	r1, r3
 80139a6:	f7fa ff2b 	bl	800e800 <USBD_LL_DataOutStage>
}
 80139aa:	bf00      	nop
 80139ac:	3708      	adds	r7, #8
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}

080139b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139b2:	b580      	push	{r7, lr}
 80139b4:	b082      	sub	sp, #8
 80139b6:	af00      	add	r7, sp, #0
 80139b8:	6078      	str	r0, [r7, #4]
 80139ba:	460b      	mov	r3, r1
 80139bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80139c4:	78fa      	ldrb	r2, [r7, #3]
 80139c6:	6879      	ldr	r1, [r7, #4]
 80139c8:	4613      	mov	r3, r2
 80139ca:	00db      	lsls	r3, r3, #3
 80139cc:	4413      	add	r3, r2
 80139ce:	009b      	lsls	r3, r3, #2
 80139d0:	440b      	add	r3, r1
 80139d2:	334c      	adds	r3, #76	; 0x4c
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	78fb      	ldrb	r3, [r7, #3]
 80139d8:	4619      	mov	r1, r3
 80139da:	f7fa ffc4 	bl	800e966 <USBD_LL_DataInStage>
}
 80139de:	bf00      	nop
 80139e0:	3708      	adds	r7, #8
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}

080139e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139e6:	b580      	push	{r7, lr}
 80139e8:	b082      	sub	sp, #8
 80139ea:	af00      	add	r7, sp, #0
 80139ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7fb f8f8 	bl	800ebea <USBD_LL_SOF>
}
 80139fa:	bf00      	nop
 80139fc:	3708      	adds	r7, #8
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}

08013a02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a02:	b580      	push	{r7, lr}
 8013a04:	b084      	sub	sp, #16
 8013a06:	af00      	add	r7, sp, #0
 8013a08:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	2b02      	cmp	r3, #2
 8013a14:	d001      	beq.n	8013a1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013a16:	f7ed fa4b 	bl	8000eb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013a20:	7bfa      	ldrb	r2, [r7, #15]
 8013a22:	4611      	mov	r1, r2
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7fb f8a2 	bl	800eb6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fb f84a 	bl	800eaca <USBD_LL_Reset>
}
 8013a36:	bf00      	nop
 8013a38:	3710      	adds	r7, #16
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}
	...

08013a40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b082      	sub	sp, #8
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7fb f89d 	bl	800eb8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	6812      	ldr	r2, [r2, #0]
 8013a62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a66:	f043 0301 	orr.w	r3, r3, #1
 8013a6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	6a1b      	ldr	r3, [r3, #32]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d005      	beq.n	8013a80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013a74:	4b04      	ldr	r3, [pc, #16]	; (8013a88 <HAL_PCD_SuspendCallback+0x48>)
 8013a76:	691b      	ldr	r3, [r3, #16]
 8013a78:	4a03      	ldr	r2, [pc, #12]	; (8013a88 <HAL_PCD_SuspendCallback+0x48>)
 8013a7a:	f043 0306 	orr.w	r3, r3, #6
 8013a7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013a80:	bf00      	nop
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	e000ed00 	.word	0xe000ed00

08013a8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fb f88d 	bl	800ebba <USBD_LL_Resume>
}
 8013aa0:	bf00      	nop
 8013aa2:	3708      	adds	r7, #8
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013aba:	78fa      	ldrb	r2, [r7, #3]
 8013abc:	4611      	mov	r1, r2
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fb f8e5 	bl	800ec8e <USBD_LL_IsoOUTIncomplete>
}
 8013ac4:	bf00      	nop
 8013ac6:	3708      	adds	r7, #8
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013ade:	78fa      	ldrb	r2, [r7, #3]
 8013ae0:	4611      	mov	r1, r2
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fb f8a1 	bl	800ec2a <USBD_LL_IsoINIncomplete>
}
 8013ae8:	bf00      	nop
 8013aea:	3708      	adds	r7, #8
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fb f8f7 	bl	800ecf2 <USBD_LL_DevConnected>
}
 8013b04:	bf00      	nop
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7fb f8f4 	bl	800ed08 <USBD_LL_DevDisconnected>
}
 8013b20:	bf00      	nop
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	781b      	ldrb	r3, [r3, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d13c      	bne.n	8013bb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013b38:	4a20      	ldr	r2, [pc, #128]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	4a1e      	ldr	r2, [pc, #120]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b44:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013b48:	4b1c      	ldr	r3, [pc, #112]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013b4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013b50:	4b1a      	ldr	r3, [pc, #104]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b52:	2204      	movs	r2, #4
 8013b54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013b56:	4b19      	ldr	r3, [pc, #100]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b58:	2202      	movs	r2, #2
 8013b5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013b5c:	4b17      	ldr	r3, [pc, #92]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b5e:	2200      	movs	r2, #0
 8013b60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013b62:	4b16      	ldr	r3, [pc, #88]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b64:	2202      	movs	r2, #2
 8013b66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013b68:	4b14      	ldr	r3, [pc, #80]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013b6e:	4b13      	ldr	r3, [pc, #76]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b70:	2200      	movs	r2, #0
 8013b72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013b74:	4b11      	ldr	r3, [pc, #68]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b76:	2200      	movs	r2, #0
 8013b78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013b7a:	4b10      	ldr	r3, [pc, #64]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013b80:	4b0e      	ldr	r3, [pc, #56]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b82:	2200      	movs	r2, #0
 8013b84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013b86:	480d      	ldr	r0, [pc, #52]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b88:	f7ef fbdb 	bl	8003342 <HAL_PCD_Init>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d001      	beq.n	8013b96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013b92:	f7ed f98d 	bl	8000eb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013b96:	2180      	movs	r1, #128	; 0x80
 8013b98:	4808      	ldr	r0, [pc, #32]	; (8013bbc <USBD_LL_Init+0x94>)
 8013b9a:	f7f0 fe32 	bl	8004802 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013b9e:	2240      	movs	r2, #64	; 0x40
 8013ba0:	2100      	movs	r1, #0
 8013ba2:	4806      	ldr	r0, [pc, #24]	; (8013bbc <USBD_LL_Init+0x94>)
 8013ba4:	f7f0 fde6 	bl	8004774 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013ba8:	2280      	movs	r2, #128	; 0x80
 8013baa:	2101      	movs	r1, #1
 8013bac:	4803      	ldr	r0, [pc, #12]	; (8013bbc <USBD_LL_Init+0x94>)
 8013bae:	f7f0 fde1 	bl	8004774 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013bb2:	2300      	movs	r3, #0
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	200069d0 	.word	0x200069d0

08013bc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ef fcd0 	bl	800357c <HAL_PCD_Start>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013be0:	7bfb      	ldrb	r3, [r7, #15]
 8013be2:	4618      	mov	r0, r3
 8013be4:	f000 f942 	bl	8013e6c <USBD_Get_USB_Status>
 8013be8:	4603      	mov	r3, r0
 8013bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3710      	adds	r7, #16
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}

08013bf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013bf6:	b580      	push	{r7, lr}
 8013bf8:	b084      	sub	sp, #16
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	6078      	str	r0, [r7, #4]
 8013bfe:	4608      	mov	r0, r1
 8013c00:	4611      	mov	r1, r2
 8013c02:	461a      	mov	r2, r3
 8013c04:	4603      	mov	r3, r0
 8013c06:	70fb      	strb	r3, [r7, #3]
 8013c08:	460b      	mov	r3, r1
 8013c0a:	70bb      	strb	r3, [r7, #2]
 8013c0c:	4613      	mov	r3, r2
 8013c0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c10:	2300      	movs	r3, #0
 8013c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c14:	2300      	movs	r3, #0
 8013c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013c1e:	78bb      	ldrb	r3, [r7, #2]
 8013c20:	883a      	ldrh	r2, [r7, #0]
 8013c22:	78f9      	ldrb	r1, [r7, #3]
 8013c24:	f7f0 f9a1 	bl	8003f6a <HAL_PCD_EP_Open>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c2c:	7bfb      	ldrb	r3, [r7, #15]
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f000 f91c 	bl	8013e6c <USBD_Get_USB_Status>
 8013c34:	4603      	mov	r3, r0
 8013c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3710      	adds	r7, #16
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b084      	sub	sp, #16
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
 8013c4a:	460b      	mov	r3, r1
 8013c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c52:	2300      	movs	r3, #0
 8013c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013c5c:	78fa      	ldrb	r2, [r7, #3]
 8013c5e:	4611      	mov	r1, r2
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7f0 f9ea 	bl	800403a <HAL_PCD_EP_Close>
 8013c66:	4603      	mov	r3, r0
 8013c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c6a:	7bfb      	ldrb	r3, [r7, #15]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f000 f8fd 	bl	8013e6c <USBD_Get_USB_Status>
 8013c72:	4603      	mov	r3, r0
 8013c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	460b      	mov	r3, r1
 8013c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c90:	2300      	movs	r3, #0
 8013c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013c9a:	78fa      	ldrb	r2, [r7, #3]
 8013c9c:	4611      	mov	r1, r2
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7f0 fac2 	bl	8004228 <HAL_PCD_EP_SetStall>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ca8:	7bfb      	ldrb	r3, [r7, #15]
 8013caa:	4618      	mov	r0, r3
 8013cac:	f000 f8de 	bl	8013e6c <USBD_Get_USB_Status>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3710      	adds	r7, #16
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}

08013cbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cbe:	b580      	push	{r7, lr}
 8013cc0:	b084      	sub	sp, #16
 8013cc2:	af00      	add	r7, sp, #0
 8013cc4:	6078      	str	r0, [r7, #4]
 8013cc6:	460b      	mov	r3, r1
 8013cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013cd8:	78fa      	ldrb	r2, [r7, #3]
 8013cda:	4611      	mov	r1, r2
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7f0 fb07 	bl	80042f0 <HAL_PCD_EP_ClrStall>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ce6:	7bfb      	ldrb	r3, [r7, #15]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f000 f8bf 	bl	8013e6c <USBD_Get_USB_Status>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3710      	adds	r7, #16
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cfc:	b480      	push	{r7}
 8013cfe:	b085      	sub	sp, #20
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	460b      	mov	r3, r1
 8013d06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013d0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	da0b      	bge.n	8013d30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013d18:	78fb      	ldrb	r3, [r7, #3]
 8013d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013d1e:	68f9      	ldr	r1, [r7, #12]
 8013d20:	4613      	mov	r3, r2
 8013d22:	00db      	lsls	r3, r3, #3
 8013d24:	4413      	add	r3, r2
 8013d26:	009b      	lsls	r3, r3, #2
 8013d28:	440b      	add	r3, r1
 8013d2a:	333e      	adds	r3, #62	; 0x3e
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	e00b      	b.n	8013d48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013d30:	78fb      	ldrb	r3, [r7, #3]
 8013d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013d36:	68f9      	ldr	r1, [r7, #12]
 8013d38:	4613      	mov	r3, r2
 8013d3a:	00db      	lsls	r3, r3, #3
 8013d3c:	4413      	add	r3, r2
 8013d3e:	009b      	lsls	r3, r3, #2
 8013d40:	440b      	add	r3, r1
 8013d42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013d46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3714      	adds	r7, #20
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	460b      	mov	r3, r1
 8013d5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d60:	2300      	movs	r3, #0
 8013d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d64:	2300      	movs	r3, #0
 8013d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013d6e:	78fa      	ldrb	r2, [r7, #3]
 8013d70:	4611      	mov	r1, r2
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7f0 f8d4 	bl	8003f20 <HAL_PCD_SetAddress>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d7c:	7bfb      	ldrb	r3, [r7, #15]
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f000 f874 	bl	8013e6c <USBD_Get_USB_Status>
 8013d84:	4603      	mov	r3, r0
 8013d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3710      	adds	r7, #16
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}

08013d92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013d92:	b580      	push	{r7, lr}
 8013d94:	b086      	sub	sp, #24
 8013d96:	af00      	add	r7, sp, #0
 8013d98:	60f8      	str	r0, [r7, #12]
 8013d9a:	607a      	str	r2, [r7, #4]
 8013d9c:	603b      	str	r3, [r7, #0]
 8013d9e:	460b      	mov	r3, r1
 8013da0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013da2:	2300      	movs	r3, #0
 8013da4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013da6:	2300      	movs	r3, #0
 8013da8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013db0:	7af9      	ldrb	r1, [r7, #11]
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	f7f0 f9ed 	bl	8004194 <HAL_PCD_EP_Transmit>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dbe:	7dfb      	ldrb	r3, [r7, #23]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f000 f853 	bl	8013e6c <USBD_Get_USB_Status>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013dca:	7dbb      	ldrb	r3, [r7, #22]
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3718      	adds	r7, #24
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}

08013dd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b086      	sub	sp, #24
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	607a      	str	r2, [r7, #4]
 8013dde:	603b      	str	r3, [r7, #0]
 8013de0:	460b      	mov	r3, r1
 8013de2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013de4:	2300      	movs	r3, #0
 8013de6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013de8:	2300      	movs	r3, #0
 8013dea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013df2:	7af9      	ldrb	r1, [r7, #11]
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	687a      	ldr	r2, [r7, #4]
 8013df8:	f7f0 f969 	bl	80040ce <HAL_PCD_EP_Receive>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e00:	7dfb      	ldrb	r3, [r7, #23]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f000 f832 	bl	8013e6c <USBD_Get_USB_Status>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013e0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3718      	adds	r7, #24
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b082      	sub	sp, #8
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
 8013e1e:	460b      	mov	r3, r1
 8013e20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e28:	78fa      	ldrb	r2, [r7, #3]
 8013e2a:	4611      	mov	r1, r2
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7f0 f999 	bl	8004164 <HAL_PCD_EP_GetRxCount>
 8013e32:	4603      	mov	r3, r0
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3708      	adds	r7, #8
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}

08013e3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013e3c:	b480      	push	{r7}
 8013e3e:	b083      	sub	sp, #12
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013e44:	4b03      	ldr	r3, [pc, #12]	; (8013e54 <USBD_static_malloc+0x18>)
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	370c      	adds	r7, #12
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e50:	4770      	bx	lr
 8013e52:	bf00      	nop
 8013e54:	20006edc 	.word	0x20006edc

08013e58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b083      	sub	sp, #12
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]

}
 8013e60:	bf00      	nop
 8013e62:	370c      	adds	r7, #12
 8013e64:	46bd      	mov	sp, r7
 8013e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6a:	4770      	bx	lr

08013e6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b085      	sub	sp, #20
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	4603      	mov	r3, r0
 8013e74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e76:	2300      	movs	r3, #0
 8013e78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013e7a:	79fb      	ldrb	r3, [r7, #7]
 8013e7c:	2b03      	cmp	r3, #3
 8013e7e:	d817      	bhi.n	8013eb0 <USBD_Get_USB_Status+0x44>
 8013e80:	a201      	add	r2, pc, #4	; (adr r2, 8013e88 <USBD_Get_USB_Status+0x1c>)
 8013e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e86:	bf00      	nop
 8013e88:	08013e99 	.word	0x08013e99
 8013e8c:	08013e9f 	.word	0x08013e9f
 8013e90:	08013ea5 	.word	0x08013ea5
 8013e94:	08013eab 	.word	0x08013eab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8013e9c:	e00b      	b.n	8013eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013e9e:	2303      	movs	r3, #3
 8013ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8013ea2:	e008      	b.n	8013eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8013ea8:	e005      	b.n	8013eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013eaa:	2303      	movs	r3, #3
 8013eac:	73fb      	strb	r3, [r7, #15]
    break;
 8013eae:	e002      	b.n	8013eb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013eb0:	2303      	movs	r3, #3
 8013eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8013eb4:	bf00      	nop
  }
  return usb_status;
 8013eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3714      	adds	r7, #20
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec2:	4770      	bx	lr

08013ec4 <__libc_init_array>:
 8013ec4:	b570      	push	{r4, r5, r6, lr}
 8013ec6:	4d0d      	ldr	r5, [pc, #52]	; (8013efc <__libc_init_array+0x38>)
 8013ec8:	4c0d      	ldr	r4, [pc, #52]	; (8013f00 <__libc_init_array+0x3c>)
 8013eca:	1b64      	subs	r4, r4, r5
 8013ecc:	10a4      	asrs	r4, r4, #2
 8013ece:	2600      	movs	r6, #0
 8013ed0:	42a6      	cmp	r6, r4
 8013ed2:	d109      	bne.n	8013ee8 <__libc_init_array+0x24>
 8013ed4:	4d0b      	ldr	r5, [pc, #44]	; (8013f04 <__libc_init_array+0x40>)
 8013ed6:	4c0c      	ldr	r4, [pc, #48]	; (8013f08 <__libc_init_array+0x44>)
 8013ed8:	f000 f8fa 	bl	80140d0 <_init>
 8013edc:	1b64      	subs	r4, r4, r5
 8013ede:	10a4      	asrs	r4, r4, #2
 8013ee0:	2600      	movs	r6, #0
 8013ee2:	42a6      	cmp	r6, r4
 8013ee4:	d105      	bne.n	8013ef2 <__libc_init_array+0x2e>
 8013ee6:	bd70      	pop	{r4, r5, r6, pc}
 8013ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013eec:	4798      	blx	r3
 8013eee:	3601      	adds	r6, #1
 8013ef0:	e7ee      	b.n	8013ed0 <__libc_init_array+0xc>
 8013ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ef6:	4798      	blx	r3
 8013ef8:	3601      	adds	r6, #1
 8013efa:	e7f2      	b.n	8013ee2 <__libc_init_array+0x1e>
 8013efc:	080143a8 	.word	0x080143a8
 8013f00:	080143a8 	.word	0x080143a8
 8013f04:	080143a8 	.word	0x080143a8
 8013f08:	080143ac 	.word	0x080143ac

08013f0c <__retarget_lock_acquire_recursive>:
 8013f0c:	4770      	bx	lr

08013f0e <__retarget_lock_release_recursive>:
 8013f0e:	4770      	bx	lr

08013f10 <memcpy>:
 8013f10:	440a      	add	r2, r1
 8013f12:	4291      	cmp	r1, r2
 8013f14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013f18:	d100      	bne.n	8013f1c <memcpy+0xc>
 8013f1a:	4770      	bx	lr
 8013f1c:	b510      	push	{r4, lr}
 8013f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f26:	4291      	cmp	r1, r2
 8013f28:	d1f9      	bne.n	8013f1e <memcpy+0xe>
 8013f2a:	bd10      	pop	{r4, pc}

08013f2c <memset>:
 8013f2c:	4402      	add	r2, r0
 8013f2e:	4603      	mov	r3, r0
 8013f30:	4293      	cmp	r3, r2
 8013f32:	d100      	bne.n	8013f36 <memset+0xa>
 8013f34:	4770      	bx	lr
 8013f36:	f803 1b01 	strb.w	r1, [r3], #1
 8013f3a:	e7f9      	b.n	8013f30 <memset+0x4>

08013f3c <cleanup_glue>:
 8013f3c:	b538      	push	{r3, r4, r5, lr}
 8013f3e:	460c      	mov	r4, r1
 8013f40:	6809      	ldr	r1, [r1, #0]
 8013f42:	4605      	mov	r5, r0
 8013f44:	b109      	cbz	r1, 8013f4a <cleanup_glue+0xe>
 8013f46:	f7ff fff9 	bl	8013f3c <cleanup_glue>
 8013f4a:	4621      	mov	r1, r4
 8013f4c:	4628      	mov	r0, r5
 8013f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f52:	f000 b871 	b.w	8014038 <_free_r>
	...

08013f58 <_reclaim_reent>:
 8013f58:	4b2c      	ldr	r3, [pc, #176]	; (801400c <_reclaim_reent+0xb4>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	4283      	cmp	r3, r0
 8013f5e:	b570      	push	{r4, r5, r6, lr}
 8013f60:	4604      	mov	r4, r0
 8013f62:	d051      	beq.n	8014008 <_reclaim_reent+0xb0>
 8013f64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f66:	b143      	cbz	r3, 8013f7a <_reclaim_reent+0x22>
 8013f68:	68db      	ldr	r3, [r3, #12]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d14a      	bne.n	8014004 <_reclaim_reent+0xac>
 8013f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f70:	6819      	ldr	r1, [r3, #0]
 8013f72:	b111      	cbz	r1, 8013f7a <_reclaim_reent+0x22>
 8013f74:	4620      	mov	r0, r4
 8013f76:	f000 f85f 	bl	8014038 <_free_r>
 8013f7a:	6961      	ldr	r1, [r4, #20]
 8013f7c:	b111      	cbz	r1, 8013f84 <_reclaim_reent+0x2c>
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f000 f85a 	bl	8014038 <_free_r>
 8013f84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013f86:	b111      	cbz	r1, 8013f8e <_reclaim_reent+0x36>
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f000 f855 	bl	8014038 <_free_r>
 8013f8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013f90:	b111      	cbz	r1, 8013f98 <_reclaim_reent+0x40>
 8013f92:	4620      	mov	r0, r4
 8013f94:	f000 f850 	bl	8014038 <_free_r>
 8013f98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013f9a:	b111      	cbz	r1, 8013fa2 <_reclaim_reent+0x4a>
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	f000 f84b 	bl	8014038 <_free_r>
 8013fa2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013fa4:	b111      	cbz	r1, 8013fac <_reclaim_reent+0x54>
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	f000 f846 	bl	8014038 <_free_r>
 8013fac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013fae:	b111      	cbz	r1, 8013fb6 <_reclaim_reent+0x5e>
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f000 f841 	bl	8014038 <_free_r>
 8013fb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013fb8:	b111      	cbz	r1, 8013fc0 <_reclaim_reent+0x68>
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f000 f83c 	bl	8014038 <_free_r>
 8013fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fc2:	b111      	cbz	r1, 8013fca <_reclaim_reent+0x72>
 8013fc4:	4620      	mov	r0, r4
 8013fc6:	f000 f837 	bl	8014038 <_free_r>
 8013fca:	69a3      	ldr	r3, [r4, #24]
 8013fcc:	b1e3      	cbz	r3, 8014008 <_reclaim_reent+0xb0>
 8013fce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	4798      	blx	r3
 8013fd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013fd6:	b1b9      	cbz	r1, 8014008 <_reclaim_reent+0xb0>
 8013fd8:	4620      	mov	r0, r4
 8013fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fde:	f7ff bfad 	b.w	8013f3c <cleanup_glue>
 8013fe2:	5949      	ldr	r1, [r1, r5]
 8013fe4:	b941      	cbnz	r1, 8013ff8 <_reclaim_reent+0xa0>
 8013fe6:	3504      	adds	r5, #4
 8013fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fea:	2d80      	cmp	r5, #128	; 0x80
 8013fec:	68d9      	ldr	r1, [r3, #12]
 8013fee:	d1f8      	bne.n	8013fe2 <_reclaim_reent+0x8a>
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	f000 f821 	bl	8014038 <_free_r>
 8013ff6:	e7ba      	b.n	8013f6e <_reclaim_reent+0x16>
 8013ff8:	680e      	ldr	r6, [r1, #0]
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f000 f81c 	bl	8014038 <_free_r>
 8014000:	4631      	mov	r1, r6
 8014002:	e7ef      	b.n	8013fe4 <_reclaim_reent+0x8c>
 8014004:	2500      	movs	r5, #0
 8014006:	e7ef      	b.n	8013fe8 <_reclaim_reent+0x90>
 8014008:	bd70      	pop	{r4, r5, r6, pc}
 801400a:	bf00      	nop
 801400c:	200003c0 	.word	0x200003c0

08014010 <strcpy>:
 8014010:	4603      	mov	r3, r0
 8014012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014016:	f803 2b01 	strb.w	r2, [r3], #1
 801401a:	2a00      	cmp	r2, #0
 801401c:	d1f9      	bne.n	8014012 <strcpy+0x2>
 801401e:	4770      	bx	lr

08014020 <__malloc_lock>:
 8014020:	4801      	ldr	r0, [pc, #4]	; (8014028 <__malloc_lock+0x8>)
 8014022:	f7ff bf73 	b.w	8013f0c <__retarget_lock_acquire_recursive>
 8014026:	bf00      	nop
 8014028:	200070fc 	.word	0x200070fc

0801402c <__malloc_unlock>:
 801402c:	4801      	ldr	r0, [pc, #4]	; (8014034 <__malloc_unlock+0x8>)
 801402e:	f7ff bf6e 	b.w	8013f0e <__retarget_lock_release_recursive>
 8014032:	bf00      	nop
 8014034:	200070fc 	.word	0x200070fc

08014038 <_free_r>:
 8014038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801403a:	2900      	cmp	r1, #0
 801403c:	d044      	beq.n	80140c8 <_free_r+0x90>
 801403e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014042:	9001      	str	r0, [sp, #4]
 8014044:	2b00      	cmp	r3, #0
 8014046:	f1a1 0404 	sub.w	r4, r1, #4
 801404a:	bfb8      	it	lt
 801404c:	18e4      	addlt	r4, r4, r3
 801404e:	f7ff ffe7 	bl	8014020 <__malloc_lock>
 8014052:	4a1e      	ldr	r2, [pc, #120]	; (80140cc <_free_r+0x94>)
 8014054:	9801      	ldr	r0, [sp, #4]
 8014056:	6813      	ldr	r3, [r2, #0]
 8014058:	b933      	cbnz	r3, 8014068 <_free_r+0x30>
 801405a:	6063      	str	r3, [r4, #4]
 801405c:	6014      	str	r4, [r2, #0]
 801405e:	b003      	add	sp, #12
 8014060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014064:	f7ff bfe2 	b.w	801402c <__malloc_unlock>
 8014068:	42a3      	cmp	r3, r4
 801406a:	d908      	bls.n	801407e <_free_r+0x46>
 801406c:	6825      	ldr	r5, [r4, #0]
 801406e:	1961      	adds	r1, r4, r5
 8014070:	428b      	cmp	r3, r1
 8014072:	bf01      	itttt	eq
 8014074:	6819      	ldreq	r1, [r3, #0]
 8014076:	685b      	ldreq	r3, [r3, #4]
 8014078:	1949      	addeq	r1, r1, r5
 801407a:	6021      	streq	r1, [r4, #0]
 801407c:	e7ed      	b.n	801405a <_free_r+0x22>
 801407e:	461a      	mov	r2, r3
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	b10b      	cbz	r3, 8014088 <_free_r+0x50>
 8014084:	42a3      	cmp	r3, r4
 8014086:	d9fa      	bls.n	801407e <_free_r+0x46>
 8014088:	6811      	ldr	r1, [r2, #0]
 801408a:	1855      	adds	r5, r2, r1
 801408c:	42a5      	cmp	r5, r4
 801408e:	d10b      	bne.n	80140a8 <_free_r+0x70>
 8014090:	6824      	ldr	r4, [r4, #0]
 8014092:	4421      	add	r1, r4
 8014094:	1854      	adds	r4, r2, r1
 8014096:	42a3      	cmp	r3, r4
 8014098:	6011      	str	r1, [r2, #0]
 801409a:	d1e0      	bne.n	801405e <_free_r+0x26>
 801409c:	681c      	ldr	r4, [r3, #0]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	6053      	str	r3, [r2, #4]
 80140a2:	4421      	add	r1, r4
 80140a4:	6011      	str	r1, [r2, #0]
 80140a6:	e7da      	b.n	801405e <_free_r+0x26>
 80140a8:	d902      	bls.n	80140b0 <_free_r+0x78>
 80140aa:	230c      	movs	r3, #12
 80140ac:	6003      	str	r3, [r0, #0]
 80140ae:	e7d6      	b.n	801405e <_free_r+0x26>
 80140b0:	6825      	ldr	r5, [r4, #0]
 80140b2:	1961      	adds	r1, r4, r5
 80140b4:	428b      	cmp	r3, r1
 80140b6:	bf04      	itt	eq
 80140b8:	6819      	ldreq	r1, [r3, #0]
 80140ba:	685b      	ldreq	r3, [r3, #4]
 80140bc:	6063      	str	r3, [r4, #4]
 80140be:	bf04      	itt	eq
 80140c0:	1949      	addeq	r1, r1, r5
 80140c2:	6021      	streq	r1, [r4, #0]
 80140c4:	6054      	str	r4, [r2, #4]
 80140c6:	e7ca      	b.n	801405e <_free_r+0x26>
 80140c8:	b003      	add	sp, #12
 80140ca:	bd30      	pop	{r4, r5, pc}
 80140cc:	20007100 	.word	0x20007100

080140d0 <_init>:
 80140d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140d2:	bf00      	nop
 80140d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140d6:	bc08      	pop	{r3}
 80140d8:	469e      	mov	lr, r3
 80140da:	4770      	bx	lr

080140dc <_fini>:
 80140dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140de:	bf00      	nop
 80140e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140e2:	bc08      	pop	{r3}
 80140e4:	469e      	mov	lr, r3
 80140e6:	4770      	bx	lr
