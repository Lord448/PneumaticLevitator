
MotherboardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08010668  08010668  00020668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107b0  080107b0  00030424  2**0
                  CONTENTS
  4 .ARM          00000008  080107b0  080107b0  000207b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107b8  080107b8  00030424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107b8  080107b8  000207b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080107bc  080107bc  000207bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  080107c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002018  20000424  08010be4  00030424  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000243c  08010be4  0003243c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026349  00000000  00000000  00030454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004787  00000000  00000000  0005679d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d20  00000000  00000000  0005af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b70  00000000  00000000  0005cc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c98b  00000000  00000000  0005e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000255b0  00000000  00000000  0007b143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a182d  00000000  00000000  000a06f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141f20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080a4  00000000  00000000  00141f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000424 	.word	0x20000424
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010650 	.word	0x08010650

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000428 	.word	0x20000428
 80001dc:	08010650 	.word	0x08010650

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fedc 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f8c4 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 faa0 	bl	8000ae4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a4:	f000 f92a 	bl	80007fc <MX_I2C1_Init>
  MX_I2C2_Init();
 80005a8:	f000 f956 	bl	8000858 <MX_I2C2_Init>
  MX_RTC_Init();
 80005ac:	f000 f982 	bl	80008b4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 fa6c 	bl	8000a8c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f00e fe7c 	bl	800f2b0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80005b8:	f000 f9a2 	bl	8000900 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005bc:	f000 f9f0 	bl	80009a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005c0:	484b      	ldr	r0, [pc, #300]	; (80006f0 <main+0x15c>)
 80005c2:	f004 fb75 	bl	8004cb0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART_IncomData, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	494a      	ldr	r1, [pc, #296]	; (80006f4 <main+0x160>)
 80005ca:	484b      	ldr	r0, [pc, #300]	; (80006f8 <main+0x164>)
 80005cc:	f005 fb31 	bl	8005c32 <HAL_UART_Receive_IT>

  /* Init the VL53L0X sensor */
  MaxCCR = htim3.Init.Period;
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <main+0x168>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <main+0x16c>)
 80005d8:	801a      	strh	r2, [r3, #0]
  Dev->I2cHandle = &hi2c1;
 80005da:	4b4a      	ldr	r3, [pc, #296]	; (8000704 <main+0x170>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a4a      	ldr	r2, [pc, #296]	; (8000708 <main+0x174>)
 80005e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev->I2cDevAddr = 0x52;
 80005e4:	4b47      	ldr	r3, [pc, #284]	; (8000704 <main+0x170>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2252      	movs	r2, #82	; 0x52
 80005ea:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  //Disable XSHUT
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	4846      	ldr	r0, [pc, #280]	; (800070c <main+0x178>)
 80005f4:	f001 fa6c 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80005f8:	2014      	movs	r0, #20
 80005fa:	f000 ff1d 	bl	8001438 <HAL_Delay>

  //Enable XSHUT
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	4842      	ldr	r0, [pc, #264]	; (800070c <main+0x178>)
 8000604:	f001 fa64 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000608:	2014      	movs	r0, #20
 800060a:	f000 ff15 	bl	8001438 <HAL_Delay>

  VL53L0X_WaitDeviceBooted( Dev );
 800060e:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <main+0x170>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f008 f980 	bl	8008918 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 8000618:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <main+0x170>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f007 fe95 	bl	800834c <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <main+0x170>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f007 fff4 	bl	8008614 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800062c:	4b35      	ldr	r3, [pc, #212]	; (8000704 <main+0x170>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a37      	ldr	r2, [pc, #220]	; (8000710 <main+0x17c>)
 8000632:	4938      	ldr	r1, [pc, #224]	; (8000714 <main+0x180>)
 8000634:	4618      	mov	r0, r3
 8000636:	f008 fe8f 	bl	8009358 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800063a:	4b32      	ldr	r3, [pc, #200]	; (8000704 <main+0x170>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a36      	ldr	r2, [pc, #216]	; (8000718 <main+0x184>)
 8000640:	4936      	ldr	r1, [pc, #216]	; (800071c <main+0x188>)
 8000642:	4618      	mov	r0, r3
 8000644:	f009 fb16 	bl	8009c74 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <main+0x170>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f008 fa00 	bl	8008a54 <VL53L0X_SetDeviceMode>

  //Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <main+0x170>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2201      	movs	r2, #1
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f008 fc75 	bl	8008f4c <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000662:	4b28      	ldr	r3, [pc, #160]	; (8000704 <main+0x170>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2201      	movs	r2, #1
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f008 fc6e 	bl	8008f4c <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <main+0x170>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f641 1299 	movw	r2, #6553	; 0x1999
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f008 fd16 	bl	80090ac <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <main+0x170>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f008 fd0e 	bl	80090ac <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <main+0x170>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000698:	4618      	mov	r0, r3
 800069a:	f008 fa39 	bl	8008b10 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <main+0x170>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2212      	movs	r2, #18
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f008 fa58 	bl	8008b5c <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <main+0x170>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	220e      	movs	r2, #14
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f008 fa51 	bl	8008b5c <VL53L0X_SetVcselPulsePeriod>

  /*PWM FAN Init*/
  TIM3->CCR1 = 149; //Low PWM signal at start - 5% of Duty
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <main+0x18c>)
 80006bc:	2295      	movs	r2, #149	; 0x95
 80006be:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006c0:	2100      	movs	r1, #0
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <main+0x168>)
 80006c4:	f004 fbb0 	bl	8004e28 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(EnablePWM_GPIO_Port, EnablePWM_Pin, 1); //Turning on the AND gate
 80006c8:	2201      	movs	r2, #1
 80006ca:	2120      	movs	r1, #32
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x178>)
 80006ce:	f001 f9ff 	bl	8001ad0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		//vTaskUSB();
		vTaskUSBSensor();
 80006d2:	f000 faa7 	bl	8000c24 <vTaskUSBSensor>
		vTaskBlink();
 80006d6:	f000 fac1 	bl	8000c5c <vTaskBlink>
		vTaskFan();
 80006da:	f000 faf3 	bl	8000cc4 <vTaskFan>
		ParsedFlag = 1;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <main+0x190>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	801a      	strh	r2, [r3, #0]
		while(ParsedFlag); //Parsed Loop @ 1ms
 80006e4:	bf00      	nop
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <main+0x190>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1fb      	bne.n	80006e6 <main+0x152>
		vTaskUSBSensor();
 80006ee:	e7f0      	b.n	80006d2 <main+0x13e>
 80006f0:	20000508 	.word	0x20000508
 80006f4:	20000609 	.word	0x20000609
 80006f8:	20000598 	.word	0x20000598
 80006fc:	20000550 	.word	0x20000550
 8000700:	2000060c 	.word	0x2000060c
 8000704:	20000004 	.word	0x20000004
 8000708:	20000440 	.word	0x20000440
 800070c:	40020400 	.word	0x40020400
 8000710:	200007a6 	.word	0x200007a6
 8000714:	200007a5 	.word	0x200007a5
 8000718:	200007a4 	.word	0x200007a4
 800071c:	200007a0 	.word	0x200007a0
 8000720:	40000400 	.word	0x40000400
 8000724:	20000000 	.word	0x20000000

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f00f fb1a 	bl	800fd70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a27      	ldr	r2, [pc, #156]	; (80007f4 <SystemClock_Config+0xcc>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd0>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000784:	2305      	movs	r3, #5
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800079c:	2319      	movs	r3, #25
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007a0:	23c0      	movs	r3, #192	; 0xc0
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fbeb 	bl	8003f8c <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007bc:	f000 fb58 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2103      	movs	r1, #3
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fe4d 	bl	800447c <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007e8:	f000 fb42 	bl	8000e70 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	; 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C1_Init+0x50>)
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_I2C1_Init+0x54>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2C1_Init+0x50>)
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_I2C1_Init+0x58>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_I2C1_Init+0x50>)
 800081a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_I2C1_Init+0x50>)
 800083a:	f001 f995 	bl	8001b68 <HAL_I2C_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 fb14 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000440 	.word	0x20000440
 8000850:	40005400 	.word	0x40005400
 8000854:	00061a80 	.word	0x00061a80

08000858 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C2_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C2_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C2_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C2_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C2_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C2_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C2_Init+0x50>)
 8000896:	f001 f967 	bl	8001b68 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 fae6 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000494 	.word	0x20000494
 80008ac:	40005800 	.word	0x40005800
 80008b0:	00061a80 	.word	0x00061a80

080008b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_RTC_Init+0x44>)
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <MX_RTC_Init+0x48>)
 80008bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_RTC_Init+0x44>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_RTC_Init+0x44>)
 80008c6:	227f      	movs	r2, #127	; 0x7f
 80008c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_RTC_Init+0x44>)
 80008cc:	22ff      	movs	r2, #255	; 0xff
 80008ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_RTC_Init+0x44>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_RTC_Init+0x44>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_RTC_Init+0x44>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_RTC_Init+0x44>)
 80008e4:	f004 f89a 	bl	8004a1c <HAL_RTC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80008ee:	f000 fabf 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200004e8 	.word	0x200004e8
 80008fc:	40002800 	.word	0x40002800

08000900 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM1_Init+0x98>)
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <MX_TIM1_Init+0x9c>)
 8000920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_TIM1_Init+0x98>)
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_TIM1_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47999;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM1_Init+0x98>)
 8000930:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_TIM1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_TIM1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_TIM1_Init+0x98>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <MX_TIM1_Init+0x98>)
 800094a:	f004 f961 	bl	8004c10 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 fa8c 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_TIM1_Init+0x98>)
 8000966:	f004 fcd9 	bl	800531c <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000970:	f000 fa7e 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_TIM1_Init+0x98>)
 8000982:	f005 f887 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800098c:	f000 fa70 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000508 	.word	0x20000508
 800099c:	40010000 	.word	0x40010000

080009a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <MX_TIM3_Init+0xe4>)
 80009d2:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <MX_TIM3_Init+0xe8>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <MX_TIM3_Init+0xe4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_TIM3_Init+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <MX_TIM3_Init+0xe4>)
 80009e4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80009e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_TIM3_Init+0xe4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_TIM3_Init+0xe4>)
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009f6:	4823      	ldr	r0, [pc, #140]	; (8000a84 <MX_TIM3_Init+0xe4>)
 80009f8:	f004 f90a 	bl	8004c10 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a02:	f000 fa35 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481c      	ldr	r0, [pc, #112]	; (8000a84 <MX_TIM3_Init+0xe4>)
 8000a14:	f004 fc82 	bl	800531c <HAL_TIM_ConfigClockSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a1e:	f000 fa27 	bl	8000e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a22:	4818      	ldr	r0, [pc, #96]	; (8000a84 <MX_TIM3_Init+0xe4>)
 8000a24:	f004 f9a6 	bl	8004d74 <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a2e:	f000 fa1f 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4810      	ldr	r0, [pc, #64]	; (8000a84 <MX_TIM3_Init+0xe4>)
 8000a42:	f005 f827 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a4c:	f000 fa10 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MX_TIM3_Init+0xe4>)
 8000a68:	f004 fb96 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a72:	f000 f9fd 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MX_TIM3_Init+0xe4>)
 8000a78:	f000 fb20 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000a7c:	bf00      	nop
 8000a7e:	3738      	adds	r7, #56	; 0x38
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000550 	.word	0x20000550
 8000a88:	40000400 	.word	0x40000400

08000a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_USART1_UART_Init+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000a98:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000ac8:	f005 f866 	bl	8005b98 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000ad2:	f000 f9cd 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000598 	.word	0x20000598
 8000ae0:	40011000 	.word	0x40011000

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a44      	ldr	r2, [pc, #272]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a3d      	ldr	r2, [pc, #244]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_GPIO_Init+0x130>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b70:	4829      	ldr	r0, [pc, #164]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b72:	f000 ffad 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPLed1_Pin|GPLed2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2118      	movs	r1, #24
 8000b7a:	4828      	ldr	r0, [pc, #160]	; (8000c1c <MX_GPIO_Init+0x138>)
 8000b7c:	f000 ffa8 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EnablePWM_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	21a0      	movs	r1, #160	; 0xa0
 8000b84:	4826      	ldr	r0, [pc, #152]	; (8000c20 <MX_GPIO_Init+0x13c>)
 8000b86:	f000 ffa3 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481d      	ldr	r0, [pc, #116]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000ba4:	f000 fe10 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DevMode_Pin */
  GPIO_InitStruct.Pin = DevMode_Pin;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DevMode_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4817      	ldr	r0, [pc, #92]	; (8000c1c <MX_GPIO_Init+0x138>)
 8000bbe:	f000 fe03 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPLed1_Pin GPLed2_Pin */
  GPIO_InitStruct.Pin = GPLed1_Pin|GPLed2_Pin;
 8000bc2:	2318      	movs	r3, #24
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <MX_GPIO_Init+0x138>)
 8000bda:	f000 fdf5 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EnablePWM_Pin TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = EnablePWM_Pin|TOF_XSHUT_Pin;
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <MX_GPIO_Init+0x13c>)
 8000bf6:	f000 fde7 	bl	80017c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f000 fd19 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c04:	2006      	movs	r0, #6
 8000c06:	f000 fd32 	bl	800166e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020400 	.word	0x40020400

08000c24 <vTaskUSBSensor>:

/* USER CODE BEGIN 4 */

/* Temporal function for sensor test */
static void vTaskUSBSensor(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
	static uint8_t timeCounter = 0;
	char Buffer[32] = "";
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	615a      	str	r2, [r3, #20]
 8000c3e:	619a      	str	r2, [r3, #24]
				}
				past_measure = distance;
			}
		}
	}
	timeCounter++;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <vTaskUSBSensor+0x34>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <vTaskUSBSensor+0x34>)
 8000c4a:	701a      	strb	r2, [r3, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	3724      	adds	r7, #36	; 0x24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	200007a7 	.word	0x200007a7

08000c5c <vTaskBlink>:
		}
	}
}

static void vTaskBlink(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  static uint32_t Count = 0;
  if(Count == 100)
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <vTaskBlink+0x5c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b64      	cmp	r3, #100	; 0x64
 8000c66:	d105      	bne.n	8000c74 <vTaskBlink+0x18>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <vTaskBlink+0x60>)
 8000c6e:	f000 ff48 	bl	8001b02 <HAL_GPIO_TogglePin>
 8000c72:	e011      	b.n	8000c98 <vTaskBlink+0x3c>
  else if(Count == 200)
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <vTaskBlink+0x5c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2bc8      	cmp	r3, #200	; 0xc8
 8000c7a:	d104      	bne.n	8000c86 <vTaskBlink+0x2a>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <vTaskBlink+0x64>)
 8000c80:	f000 ff3f 	bl	8001b02 <HAL_GPIO_TogglePin>
 8000c84:	e008      	b.n	8000c98 <vTaskBlink+0x3c>
  else if(Count == 300)
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <vTaskBlink+0x5c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c8e:	d103      	bne.n	8000c98 <vTaskBlink+0x3c>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000c90:	2110      	movs	r1, #16
 8000c92:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <vTaskBlink+0x64>)
 8000c94:	f000 ff35 	bl	8001b02 <HAL_GPIO_TogglePin>
  if(Count >= 400)
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <vTaskBlink+0x5c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ca0:	d302      	bcc.n	8000ca8 <vTaskBlink+0x4c>
	  Count = 0;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <vTaskBlink+0x5c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
  Count++;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <vTaskBlink+0x5c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	4a02      	ldr	r2, [pc, #8]	; (8000cb8 <vTaskBlink+0x5c>)
 8000cb0:	6013      	str	r3, [r2, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200007a8 	.word	0x200007a8
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <vTaskFan>:

static void vTaskFan(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
		idle,
		ramp
	}static stateHandler = idle;
  static uint32_t timeCount = 0;

  switch(stateHandler)
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <vTaskFan+0x74>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <vTaskFan+0x12>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d014      	beq.n	8000cfe <vTaskFan+0x3a>
 8000cd4:	e023      	b.n	8000d1e <vTaskFan+0x5a>
  {
  	case idle:
  		TIM3->CCR1 = 149; //5% Duty cycle
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <vTaskFan+0x78>)
 8000cd8:	2295      	movs	r2, #149	; 0x95
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34
  		timeCount++;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <vTaskFan+0x7c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <vTaskFan+0x7c>)
 8000ce4:	6013      	str	r3, [r2, #0]
  		if(timeCount >= 500) { //Wait for 500ms
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <vTaskFan+0x7c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cee:	d31a      	bcc.n	8000d26 <vTaskFan+0x62>
  			stateHandler = ramp;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <vTaskFan+0x74>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
  			timeCount = 0;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <vTaskFan+0x7c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
  		}
  	break;
 8000cfc:	e013      	b.n	8000d26 <vTaskFan+0x62>
  	case ramp:
  		TIM3->CCR1 += 2;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <vTaskFan+0x78>)
 8000d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <vTaskFan+0x78>)
 8000d04:	3302      	adds	r3, #2
 8000d06:	6353      	str	r3, [r2, #52]	; 0x34
  	  //Giving 5% top constraint
  	  if(TIM3->CCR1 >= MaxCCR-149) {
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <vTaskFan+0x78>)
 8000d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <vTaskFan+0x80>)
 8000d0e:	8812      	ldrh	r2, [r2, #0]
 8000d10:	3a95      	subs	r2, #149	; 0x95
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d309      	bcc.n	8000d2a <vTaskFan+0x66>
  	  	stateHandler = idle;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <vTaskFan+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
  	  }
  	break;
 8000d1c:	e005      	b.n	8000d2a <vTaskFan+0x66>
  	default:
  		/* Code should not reach this line */
  		TIM3->CCR1 = 149; //5% Duty cycle
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <vTaskFan+0x78>)
 8000d20:	2295      	movs	r2, #149	; 0x95
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
  	break;
 8000d24:	e002      	b.n	8000d2c <vTaskFan+0x68>
  	break;
 8000d26:	bf00      	nop
 8000d28:	e000      	b.n	8000d2c <vTaskFan+0x68>
  	break;
 8000d2a:	bf00      	nop
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200007ac 	.word	0x200007ac
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	200007b0 	.word	0x200007b0
 8000d44:	2000060c 	.word	0x2000060c

08000d48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	ParsedFlag = 0;
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	801a      	strh	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000000 	.word	0x20000000

08000d68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  const char* RXBufferOverflow = "UART RXBufferOverflow: Size 32\n";
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <HAL_UART_RxCpltCallback+0xb0>)
 8000d72:	60fb      	str	r3, [r7, #12]
  static uint16_t DataCount = 0;
  static char Buffer[32] = "";
  Buffer[DataCount] = UART_IncomData;
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <HAL_UART_RxCpltCallback+0xb4>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <HAL_UART_RxCpltCallback+0xb8>)
 8000d7c:	7819      	ldrb	r1, [r3, #0]
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <HAL_UART_RxCpltCallback+0xbc>)
 8000d80:	5499      	strb	r1, [r3, r2]
  DataCount++;
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_UART_RxCpltCallback+0xb4>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_UART_RxCpltCallback+0xb4>)
 8000d8c:	801a      	strh	r2, [r3, #0]
  if(UART_IncomData == '!')
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_UART_RxCpltCallback+0xb8>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b21      	cmp	r3, #33	; 0x21
 8000d94:	d11f      	bne.n	8000dd6 <HAL_UART_RxCpltCallback+0x6e>
  {
    if(CDC_getReady() == USBD_OK)
 8000d96:	f00e fb81 	bl	800f49c <CDC_getReady>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d110      	bne.n	8000dc2 <HAL_UART_RxCpltCallback+0x5a>
    {
      memset(USBBuffer, '\0', strlen(USBBuffer));
 8000da0:	4821      	ldr	r0, [pc, #132]	; (8000e28 <HAL_UART_RxCpltCallback+0xc0>)
 8000da2:	f7ff fa1d 	bl	80001e0 <strlen>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	2100      	movs	r1, #0
 8000dac:	481e      	ldr	r0, [pc, #120]	; (8000e28 <HAL_UART_RxCpltCallback+0xc0>)
 8000dae:	f00e ffdf 	bl	800fd70 <memset>
      sprintf(USBBuffer, "Incom Data: %s\n", Buffer);
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <HAL_UART_RxCpltCallback+0xbc>)
 8000db4:	491d      	ldr	r1, [pc, #116]	; (8000e2c <HAL_UART_RxCpltCallback+0xc4>)
 8000db6:	481c      	ldr	r0, [pc, #112]	; (8000e28 <HAL_UART_RxCpltCallback+0xc0>)
 8000db8:	f00e ffe2 	bl	800fd80 <siprintf>
      NeedToReport = 1;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_UART_RxCpltCallback+0xc8>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
    }
    memset(Buffer, '\0', DataCount);
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_UART_RxCpltCallback+0xb4>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <HAL_UART_RxCpltCallback+0xbc>)
 8000dcc:	f00e ffd0 	bl	800fd70 <memset>
    DataCount = 0;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_UART_RxCpltCallback+0xb4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	801a      	strh	r2, [r3, #0]
  }
  if(DataCount > 32)
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_UART_RxCpltCallback+0xb4>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	2b20      	cmp	r3, #32
 8000ddc:	d912      	bls.n	8000e04 <HAL_UART_RxCpltCallback+0x9c>
  {
	if(CDC_getReady() == USBD_OK)
 8000dde:	f00e fb5d 	bl	800f49c <CDC_getReady>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d108      	bne.n	8000dfa <HAL_UART_RxCpltCallback+0x92>
	{
	  CDC_Transmit_FS((uint8_t*)RXBufferOverflow, strlen(RXBufferOverflow));
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f7ff f9f9 	bl	80001e0 <strlen>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f00e fb19 	bl	800f42c <CDC_Transmit_FS>
	}
	memset(Buffer, '\0', 32);
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <HAL_UART_RxCpltCallback+0xbc>)
 8000e00:	f00e ffb6 	bl	800fd70 <memset>
  }
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART_IncomData, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	4906      	ldr	r1, [pc, #24]	; (8000e20 <HAL_UART_RxCpltCallback+0xb8>)
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <HAL_UART_RxCpltCallback+0xcc>)
 8000e0a:	f004 ff12 	bl	8005c32 <HAL_UART_Receive_IT>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	080106d0 	.word	0x080106d0
 8000e1c:	200007b4 	.word	0x200007b4
 8000e20:	20000609 	.word	0x20000609
 8000e24:	200007b8 	.word	0x200007b8
 8000e28:	200005dc 	.word	0x200005dc
 8000e2c:	080106f0 	.word	0x080106f0
 8000e30:	2000060a 	.word	0x2000060a
 8000e34:	20000598 	.word	0x20000598

08000e38 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	const char *Buffer = "Pressed Dev Mode\n";
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x34>)
 8000e44:	60fb      	str	r3, [r7, #12]
	if(CDC_getReady() == USBD_OK)
 8000e46:	f00e fb29 	bl	800f49c <CDC_getReady>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d108      	bne.n	8000e62 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		CDC_Transmit_FS((uint8_t*)Buffer, strlen(Buffer));
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f7ff f9c5 	bl	80001e0 <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f00e fae5 	bl	800f42c <CDC_Transmit_FS>
	}
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08010700 	.word	0x08010700

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a3b      	ldr	r2, [pc, #236]	; (8000fd8 <HAL_I2C_MspInit+0x10c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d12d      	bne.n	8000f4a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a39      	ldr	r2, [pc, #228]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f10:	2312      	movs	r3, #18
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	482e      	ldr	r0, [pc, #184]	; (8000fe0 <HAL_I2C_MspInit+0x114>)
 8000f28:	f000 fc4e 	bl	80017c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000f36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f48:	e041      	b.n	8000fce <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <HAL_I2C_MspInit+0x118>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d13c      	bne.n	8000fce <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f76:	2312      	movs	r3, #18
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f82:	2304      	movs	r3, #4
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <HAL_I2C_MspInit+0x114>)
 8000f8e:	f000 fc1b 	bl	80017c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f92:	2308      	movs	r3, #8
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f96:	2312      	movs	r3, #18
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000fa2:	2309      	movs	r3, #9
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <HAL_I2C_MspInit+0x114>)
 8000fae:	f000 fc0b 	bl	80017c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_I2C_MspInit+0x110>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3730      	adds	r7, #48	; 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40005800 	.word	0x40005800

08000fe8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <HAL_RTC_MspInit+0x50>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d111      	bne.n	8001030 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800100c:	2302      	movs	r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001014:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fc0e 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001026:	f7ff ff23 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <HAL_RTC_MspInit+0x54>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40002800 	.word	0x40002800
 800103c:	42470e3c 	.word	0x42470e3c

08001040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_TIM_Base_MspInit+0x70>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d116      	bne.n	8001080 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_TIM_Base_MspInit+0x74>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <HAL_TIM_Base_MspInit+0x74>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_TIM_Base_MspInit+0x74>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2019      	movs	r0, #25
 8001074:	f000 fadf 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001078:	2019      	movs	r0, #25
 800107a:	f000 faf8 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800107e:	e012      	b.n	80010a6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <HAL_TIM_Base_MspInit+0x78>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10d      	bne.n	80010a6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_TIM_Base_MspInit+0x74>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_TIM_Base_MspInit+0x74>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_TIM_Base_MspInit+0x74>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40010000 	.word	0x40010000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40000400 	.word	0x40000400

080010bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <HAL_TIM_MspPostInit+0x68>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d11d      	bne.n	800111a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_TIM_MspPostInit+0x6c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_TIM_MspPostInit+0x6c>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_TIM_MspPostInit+0x6c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin;
 80010fa:	2310      	movs	r3, #16
 80010fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800110a:	2302      	movs	r3, #2
 800110c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_FAN_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_TIM_MspPostInit+0x70>)
 8001116:	f000 fb57 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40000400 	.word	0x40000400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_UART_MspInit+0x94>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d134      	bne.n	80011bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_UART_MspInit+0x98>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <HAL_UART_MspInit+0x98>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_UART_MspInit+0x98>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_UART_MspInit+0x98>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_UART_MspInit+0x98>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_UART_MspInit+0x98>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800118a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800119c:	2307      	movs	r3, #7
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <HAL_UART_MspInit+0x9c>)
 80011a8:	f000 fb0e 	bl	80017c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2025      	movs	r0, #37	; 0x25
 80011b2:	f000 fa40 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b6:	2025      	movs	r0, #37	; 0x25
 80011b8:	f000 fa59 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40011000 	.word	0x40011000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 f8ec 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DevMode_Pin);
 8001228:	2001      	movs	r0, #1
 800122a:	f000 fc85 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800123a:	f003 fea5 	bl	8004f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000508 	.word	0x20000508

08001248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <USART1_IRQHandler+0x10>)
 800124e:	f004 fd21 	bl	8005c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000598 	.word	0x20000598

0800125c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <OTG_FS_IRQHandler+0x10>)
 8001262:	f001 fd66 	bl	8002d32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20001d00 	.word	0x20001d00

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f00e fd2e 	bl	800fd00 <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20020000 	.word	0x20020000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	200007d8 	.word	0x200007d8
 80012d8:	20002440 	.word	0x20002440

080012dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001306:	490e      	ldr	r1, [pc, #56]	; (8001340 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800131c:	4c0b      	ldr	r4, [pc, #44]	; (800134c <LoopFillZerobss+0x26>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800132a:	f7ff ffd7 	bl	80012dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f00e fced 	bl	800fd0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001332:	f7ff f92f 	bl	8000594 <main>
  bx  lr    
 8001336:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 8001344:	080107c0 	.word	0x080107c0
  ldr r2, =_sbss
 8001348:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800134c:	2000243c 	.word	0x2000243c

08001350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC_IRQHandler>
	...

08001354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_Init+0x40>)
 800135e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_Init+0x40>)
 800136a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_Init+0x40>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f94f 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	200f      	movs	r0, #15
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff fd78 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023c00 	.word	0x40023c00

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f967 	bl	800168a <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d4:	f000 f92f 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000010 	.word	0x20000010
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000010 	.word	0x20000010
 800141c:	200007dc 	.word	0x200007dc

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	200007dc 	.word	0x200007dc

08001438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff ffee 	bl	8001420 <HAL_GetTick>
 8001444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001450:	d005      	beq.n	800145e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_Delay+0x44>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800145e:	bf00      	nop
 8001460:	f7ff ffde 	bl	8001420 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d8f7      	bhi.n	8001460 <HAL_Delay+0x28>
  {
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000010 	.word	0x20000010

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff3e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff31 	bl	80014e4 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff feb6 	bl	8001420 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d008      	beq.n	80016d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e052      	b.n	800177a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0216 	bic.w	r2, r2, #22
 80016e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <HAL_DMA_Abort+0x62>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0208 	bic.w	r2, r2, #8
 8001712:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001724:	e013      	b.n	800174e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001726:	f7ff fe7b 	bl	8001420 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b05      	cmp	r3, #5
 8001732:	d90c      	bls.n	800174e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2220      	movs	r2, #32
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e015      	b.n	800177a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e4      	bne.n	8001726 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	223f      	movs	r2, #63	; 0x3f
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d004      	beq.n	80017a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e00c      	b.n	80017ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2205      	movs	r2, #5
 80017a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e159      	b.n	8001a98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f040 8148 	bne.w	8001a92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d005      	beq.n	800181a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	2b02      	cmp	r3, #2
 8001818:	d130      	bne.n	800187c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 0201 	and.w	r2, r3, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b03      	cmp	r3, #3
 8001886:	d017      	beq.n	80018b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d123      	bne.n	800190c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0203 	and.w	r2, r3, #3
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a2 	beq.w	8001a92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <HAL_GPIO_Init+0x2e8>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <HAL_GPIO_Init+0x2e8>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <HAL_GPIO_Init+0x2e8>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800196a:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_GPIO_Init+0x2ec>)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_GPIO_Init+0x2f0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x202>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_GPIO_Init+0x2f4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x1fe>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x1fa>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a46      	ldr	r2, [pc, #280]	; (8001ac4 <HAL_GPIO_Init+0x2fc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x1f6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a45      	ldr	r2, [pc, #276]	; (8001ac8 <HAL_GPIO_Init+0x300>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x1f2>
 80019b6:	2304      	movs	r3, #4
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x204>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x2ec>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_GPIO_Init+0x304>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0e:	4a2f      	ldr	r2, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a38:	4a24      	ldr	r2, [pc, #144]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a62:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f aea2 	bls.w	80017e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40013c00 	.word	0x40013c00

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b14:	887a      	ldrh	r2, [r7, #2]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	041a      	lsls	r2, r3, #16
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	887b      	ldrh	r3, [r7, #2]
 8001b22:	400b      	ands	r3, r1
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f96e 	bl	8000e38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e12b      	b.n	8001dd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff f99c 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bcc:	f002 fe0e 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8001bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a81      	ldr	r2, [pc, #516]	; (8001ddc <HAL_I2C_Init+0x274>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d807      	bhi.n	8001bec <HAL_I2C_Init+0x84>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4a80      	ldr	r2, [pc, #512]	; (8001de0 <HAL_I2C_Init+0x278>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf94      	ite	ls
 8001be4:	2301      	movls	r3, #1
 8001be6:	2300      	movhi	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e006      	b.n	8001bfa <HAL_I2C_Init+0x92>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a7d      	ldr	r2, [pc, #500]	; (8001de4 <HAL_I2C_Init+0x27c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	bf94      	ite	ls
 8001bf4:	2301      	movls	r3, #1
 8001bf6:	2300      	movhi	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0e7      	b.n	8001dd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4a78      	ldr	r2, [pc, #480]	; (8001de8 <HAL_I2C_Init+0x280>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0c9b      	lsrs	r3, r3, #18
 8001c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a6a      	ldr	r2, [pc, #424]	; (8001ddc <HAL_I2C_Init+0x274>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d802      	bhi.n	8001c3c <HAL_I2C_Init+0xd4>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	e009      	b.n	8001c50 <HAL_I2C_Init+0xe8>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_I2C_Init+0x284>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	3301      	adds	r3, #1
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	430b      	orrs	r3, r1
 8001c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	495c      	ldr	r1, [pc, #368]	; (8001ddc <HAL_I2C_Init+0x274>)
 8001c6c:	428b      	cmp	r3, r1
 8001c6e:	d819      	bhi.n	8001ca4 <HAL_I2C_Init+0x13c>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1e59      	subs	r1, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c84:	400b      	ands	r3, r1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <HAL_I2C_Init+0x138>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e59      	subs	r1, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9e:	e051      	b.n	8001d44 <HAL_I2C_Init+0x1dc>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e04f      	b.n	8001d44 <HAL_I2C_Init+0x1dc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_I2C_Init+0x168>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1e58      	subs	r0, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	440b      	add	r3, r1
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e012      	b.n	8001cf6 <HAL_I2C_Init+0x18e>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	0099      	lsls	r1, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Init+0x196>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e022      	b.n	8001d44 <HAL_I2C_Init+0x1dc>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10e      	bne.n	8001d24 <HAL_I2C_Init+0x1bc>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1e58      	subs	r0, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6859      	ldr	r1, [r3, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	440b      	add	r3, r1
 8001d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d22:	e00f      	b.n	8001d44 <HAL_I2C_Init+0x1dc>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1e58      	subs	r0, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	0099      	lsls	r1, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	6809      	ldr	r1, [r1, #0]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6911      	ldr	r1, [r2, #16]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68d2      	ldr	r2, [r2, #12]
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	000186a0 	.word	0x000186a0
 8001de0:	001e847f 	.word	0x001e847f
 8001de4:	003d08ff 	.word	0x003d08ff
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	10624dd3 	.word	0x10624dd3

08001df0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	817b      	strh	r3, [r7, #10]
 8001e00:	4613      	mov	r3, r2
 8001e02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff fb0c 	bl	8001420 <HAL_GetTick>
 8001e08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	f040 80e0 	bne.w	8001fd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2319      	movs	r3, #25
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4970      	ldr	r1, [pc, #448]	; (8001fe4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fc58 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0d3      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_I2C_Master_Transmit+0x50>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0cc      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d007      	beq.n	8001e66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2221      	movs	r2, #33	; 0x21
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2210      	movs	r2, #16
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	893a      	ldrh	r2, [r7, #8]
 8001e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ea8:	8979      	ldrh	r1, [r7, #10]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fac2 	bl	8002438 <I2C_MasterRequestWrite>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e08d      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ed4:	e066      	b.n	8001fa4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fcd2 	bl	8002884 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06b      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d11b      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0x188>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d017      	beq.n	8001f78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6a39      	ldr	r1, [r7, #32]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fcc2 	bl	8002906 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d107      	bne.n	8001fa0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e01a      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d194      	bne.n	8001ed6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	00100002 	.word	0x00100002
 8001fe8:	ffff0000 	.word	0xffff0000

08001fec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	; 0x30
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	817b      	strh	r3, [r7, #10]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff fa0e 	bl	8001420 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	f040 820b 	bne.w	800242a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2319      	movs	r3, #25
 800201a:	2201      	movs	r2, #1
 800201c:	497c      	ldr	r1, [pc, #496]	; (8002210 <HAL_I2C_Master_Receive+0x224>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fb5a 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
 800202c:	e1fe      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_I2C_Master_Receive+0x50>
 8002038:	2302      	movs	r3, #2
 800203a:	e1f7      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d007      	beq.n	8002062 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002070:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2222      	movs	r2, #34	; 0x22
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2210      	movs	r2, #16
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	893a      	ldrh	r2, [r7, #8]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <HAL_I2C_Master_Receive+0x228>)
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fa46 	bl	800253c <I2C_MasterRequestRead>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e1b8      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d113      	bne.n	80020ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	623b      	str	r3, [r7, #32]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e18c      	b.n	8002404 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d11b      	bne.n	800212a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002100:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e16c      	b.n	8002404 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	2b02      	cmp	r3, #2
 8002130:	d11b      	bne.n	800216a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002140:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	e14c      	b.n	8002404 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002190:	e138      	b.n	8002404 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	2b03      	cmp	r3, #3
 8002198:	f200 80f1 	bhi.w	800237e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d123      	bne.n	80021ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fbed 	bl	8002988 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e139      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021ea:	e10b      	b.n	8002404 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d14e      	bne.n	8002292 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	2200      	movs	r2, #0
 80021fc:	4906      	ldr	r1, [pc, #24]	; (8002218 <HAL_I2C_Master_Receive+0x22c>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 fa6a 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e10e      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
 800220e:	bf00      	nop
 8002210:	00100002 	.word	0x00100002
 8002214:	ffff0000 	.word	0xffff0000
 8002218:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002290:	e0b8      	b.n	8002404 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	2200      	movs	r2, #0
 800229a:	4966      	ldr	r1, [pc, #408]	; (8002434 <HAL_I2C_Master_Receive+0x448>)
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fa1b 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0bf      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	2200      	movs	r2, #0
 80022f6:	494f      	ldr	r1, [pc, #316]	; (8002434 <HAL_I2C_Master_Receive+0x448>)
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f9ed 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e091      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800237c:	e042      	b.n	8002404 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fb00 	bl	8002988 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e04c      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d118      	bne.n	8002404 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	f47f aec2 	bne.w	8002192 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
  }
}
 800242c:	4618      	mov	r0, r3
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	00010004 	.word	0x00010004

08002438 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	460b      	mov	r3, r1
 8002446:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d006      	beq.n	8002462 <I2C_MasterRequestWrite+0x2a>
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d003      	beq.n	8002462 <I2C_MasterRequestWrite+0x2a>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002460:	d108      	bne.n	8002474 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e00b      	b.n	800248c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	2b12      	cmp	r3, #18
 800247a:	d107      	bne.n	800248c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800248a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f91d 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b2:	d103      	bne.n	80024bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e035      	b.n	800252c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024c8:	d108      	bne.n	80024dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	e01b      	b.n	8002514 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024dc:	897b      	ldrh	r3, [r7, #10]
 80024de:	11db      	asrs	r3, r3, #7
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f003 0306 	and.w	r3, r3, #6
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f063 030f 	orn	r3, r3, #15
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	490e      	ldr	r1, [pc, #56]	; (8002534 <I2C_MasterRequestWrite+0xfc>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f943 	bl	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e010      	b.n	800252c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800250a:	897b      	ldrh	r3, [r7, #10]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <I2C_MasterRequestWrite+0x100>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f933 	bl	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	00010008 	.word	0x00010008
 8002538:	00010002 	.word	0x00010002

0800253c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002560:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d006      	beq.n	8002576 <I2C_MasterRequestRead+0x3a>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d003      	beq.n	8002576 <I2C_MasterRequestRead+0x3a>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002574:	d108      	bne.n	8002588 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e00b      	b.n	80025a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	2b11      	cmp	r3, #17
 800258e:	d107      	bne.n	80025a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f893 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c6:	d103      	bne.n	80025d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e079      	b.n	80026c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025dc:	d108      	bne.n	80025f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025de:	897b      	ldrh	r3, [r7, #10]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	611a      	str	r2, [r3, #16]
 80025ee:	e05f      	b.n	80026b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	11db      	asrs	r3, r3, #7
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f003 0306 	and.w	r3, r3, #6
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f063 030f 	orn	r3, r3, #15
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4930      	ldr	r1, [pc, #192]	; (80026d0 <I2C_MasterRequestRead+0x194>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f8b9 	bl	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e054      	b.n	80026c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4929      	ldr	r1, [pc, #164]	; (80026d4 <I2C_MasterRequestRead+0x198>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f8a9 	bl	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e044      	b.n	80026c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002662:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f831 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268a:	d103      	bne.n	8002694 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e017      	b.n	80026c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002698:	897b      	ldrh	r3, [r7, #10]
 800269a:	11db      	asrs	r3, r3, #7
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f003 0306 	and.w	r3, r3, #6
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f063 030e 	orn	r3, r3, #14
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <I2C_MasterRequestRead+0x198>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f865 	bl	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	00010008 	.word	0x00010008
 80026d4:	00010002 	.word	0x00010002

080026d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e8:	e025      	b.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f0:	d021      	beq.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7fe fe95 	bl	8001420 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e023      	b.n	800277e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d10d      	bne.n	800275c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	e00c      	b.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4013      	ands	r3, r2
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	429a      	cmp	r2, r3
 800277a:	d0b6      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002794:	e051      	b.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a4:	d123      	bne.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e046      	b.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f4:	d021      	beq.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe fe13 	bl	8001420 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e020      	b.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10c      	bne.n	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e00b      	b.n	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	43da      	mvns	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4013      	ands	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d18d      	bne.n	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002890:	e02d      	b.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f8ce 	bl	8002a34 <I2C_IsAcknowledgeFailed>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e02d      	b.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a8:	d021      	beq.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7fe fdb9 	bl	8001420 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d116      	bne.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e007      	b.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d1ca      	bne.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002912:	e02d      	b.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f88d 	bl	8002a34 <I2C_IsAcknowledgeFailed>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e02d      	b.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800292a:	d021      	beq.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292c:	f7fe fd78 	bl	8001420 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	429a      	cmp	r2, r3
 800293a:	d302      	bcc.n	8002942 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e007      	b.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d1ca      	bne.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002994:	e042      	b.n	8002a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d119      	bne.n	80029d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0210 	mvn.w	r2, #16
 80029ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e029      	b.n	8002a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d8:	f7fe fd22 	bl	8001420 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d302      	bcc.n	80029ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d116      	bne.n	8002a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e007      	b.n	8002a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d1b5      	bne.n	8002996 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4a:	d11b      	bne.n	8002a84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a94:	b08f      	sub	sp, #60	; 0x3c
 8002a96:	af0a      	add	r7, sp, #40	; 0x28
 8002a98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e10f      	b.n	8002cc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f00c fe14 	bl	800f6ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 f8e5 	bl	8006cb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	687e      	ldr	r6, [r7, #4]
 8002af0:	466d      	mov	r5, sp
 8002af2:	f106 0410 	add.w	r4, r6, #16
 8002af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b06:	1d33      	adds	r3, r6, #4
 8002b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0a:	6838      	ldr	r0, [r7, #0]
 8002b0c:	f003 ffbc 	bl	8006a88 <USB_CoreInit>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0d0      	b.n	8002cc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f004 f8d3 	bl	8006cd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e04a      	b.n	8002bca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	333d      	adds	r3, #61	; 0x3d
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	333c      	adds	r3, #60	; 0x3c
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	b298      	uxth	r0, r3
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3344      	adds	r3, #68	; 0x44
 8002b70:	4602      	mov	r2, r0
 8002b72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3340      	adds	r3, #64	; 0x40
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	3348      	adds	r3, #72	; 0x48
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	334c      	adds	r3, #76	; 0x4c
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3354      	adds	r3, #84	; 0x54
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3af      	bcc.n	8002b34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e044      	b.n	8002c64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	3301      	adds	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d3b5      	bcc.n	8002bda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	687e      	ldr	r6, [r7, #4]
 8002c76:	466d      	mov	r5, sp
 8002c78:	f106 0410 	add.w	r4, r6, #16
 8002c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c88:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c8c:	1d33      	adds	r3, r6, #4
 8002c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c90:	6838      	ldr	r0, [r7, #0]
 8002c92:	f004 f86b 	bl	8006d6c <USB_DevInit>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e00d      	b.n	8002cc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 f9ba 	bl	8008036 <USB_DevDisconnect>

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ccc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_PCD_Start+0x1c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e020      	b.n	8002d2a <HAL_PCD_Start+0x5e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d109      	bne.n	8002d0c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d005      	beq.n	8002d0c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 ffbd 	bl	8006c90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f005 f96a 	bl	8007ff4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d32:	b590      	push	{r4, r7, lr}
 8002d34:	b08d      	sub	sp, #52	; 0x34
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f005 fa28 	bl	800819e <USB_GetMode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 848a 	bne.w	800366a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f005 f98c 	bl	8008078 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8480 	beq.w	8003668 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 f979 	bl	8008078 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f002 0202 	and.w	r2, r2, #2
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f005 f967 	bl	8008078 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d161      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0210 	bic.w	r2, r2, #16
 8002dc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 020f 	and.w	r2, r3, #15
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	3304      	adds	r3, #4
 8002de2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	0c5b      	lsrs	r3, r3, #17
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d124      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d035      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6a38      	ldr	r0, [r7, #32]
 8002e10:	f004 ff9e 	bl	8007d50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e20:	441a      	add	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e32:	441a      	add	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	621a      	str	r2, [r3, #32]
 8002e38:	e016      	b.n	8002e68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	0c5b      	lsrs	r3, r3, #17
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d110      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6a38      	ldr	r0, [r7, #32]
 8002e52:	f004 ff7d 	bl	8007d50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e62:	441a      	add	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0210 	orr.w	r2, r2, #16
 8002e76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f005 f8fb 	bl	8008078 <USB_ReadInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e8c:	f040 80a7 	bne.w	8002fde <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 f900 	bl	800809e <USB_ReadDevAllOutEpInterrupt>
 8002e9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ea0:	e099      	b.n	8002fd6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 808e 	beq.w	8002fca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 f924 	bl	8008106 <USB_ReadDevOutEPInterrupt>
 8002ebe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2301      	movs	r3, #1
 8002eda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fec2 	bl	8003c68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2308      	movs	r3, #8
 8002efe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 ff98 	bl	8003e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2310      	movs	r3, #16
 8002f22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d030      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d109      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	78db      	ldrb	r3, [r3, #3]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f00c fcb3 	bl	800f8e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2320      	movs	r3, #32
 8002faa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	3301      	adds	r3, #1
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f af62 	bne.w	8002ea2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 f848 	bl	8008078 <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ff2:	f040 80db 	bne.w	80031ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f005 f869 	bl	80080d2 <USB_ReadDevAllInEpInterrupt>
 8003000:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003006:	e0cd      	b.n	80031a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80c2 	beq.w	8003198 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f005 f88f 	bl	8008142 <USB_ReadDevInEPInterrupt>
 8003024:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d057      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	2201      	movs	r2, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	43db      	mvns	r3, r3
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003050:	4013      	ands	r3, r2
 8003052:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003060:	461a      	mov	r2, r3
 8003062:	2301      	movs	r3, #1
 8003064:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d132      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	334c      	adds	r3, #76	; 0x4c
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4403      	add	r3, r0
 800308e:	3348      	adds	r3, #72	; 0x48
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4419      	add	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4403      	add	r3, r0
 80030a2:	334c      	adds	r3, #76	; 0x4c
 80030a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d113      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3354      	adds	r3, #84	; 0x54
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d108      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030cc:	461a      	mov	r2, r3
 80030ce:	2101      	movs	r1, #1
 80030d0:	f005 f896 	bl	8008200 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f00c fb87 	bl	800f7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f6:	461a      	mov	r2, r3
 80030f8:	2308      	movs	r3, #8
 80030fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003112:	461a      	mov	r2, r3
 8003114:	2310      	movs	r3, #16
 8003116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312e:	461a      	mov	r2, r3
 8003130:	2340      	movs	r3, #64	; 0x40
 8003132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d023      	beq.n	8003186 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800313e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003140:	6a38      	ldr	r0, [r7, #32]
 8003142:	f003 ff77 	bl	8007034 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	3338      	adds	r3, #56	; 0x38
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	78db      	ldrb	r3, [r3, #3]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	b2db      	uxtb	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f00c fbca 	bl	800f908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	461a      	mov	r2, r3
 8003182:	2302      	movs	r3, #2
 8003184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fcdb 	bl	8003b4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	3301      	adds	r3, #1
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f47f af2e 	bne.w	8003008 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 ff61 	bl	8008078 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031c0:	d122      	bne.n	8003208 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031e8:	2100      	movs	r1, #0
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fec2 	bl	8003f74 <HAL_PCDEx_LPM_Callback>
 80031f0:	e002      	b.n	80031f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f00c fb68 	bl	800f8c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f004 ff33 	bl	8008078 <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800321c:	d112      	bne.n	8003244 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f00c fb24 	bl	800f87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003242:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f004 ff15 	bl	8008078 <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	f040 80b7 	bne.w	80033ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2110      	movs	r1, #16
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fedc 	bl	8007034 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003280:	e046      	b.n	8003310 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328e:	461a      	mov	r2, r3
 8003290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003294:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032da:	0151      	lsls	r1, r2, #5
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	440a      	add	r2, r1
 80032e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fa:	0151      	lsls	r1, r2, #5
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	440a      	add	r2, r1
 8003300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003308:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	3301      	adds	r3, #1
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003316:	429a      	cmp	r2, r3
 8003318:	d3b3      	bcc.n	8003282 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003328:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800332c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003346:	f043 030b 	orr.w	r3, r3, #11
 800334a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800335c:	f043 030b 	orr.w	r3, r3, #11
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	e015      	b.n	8003390 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003376:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800337a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800338a:	f043 030b 	orr.w	r3, r3, #11
 800338e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033b4:	461a      	mov	r2, r3
 80033b6:	f004 ff23 	bl	8008200 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 fe52 	bl	8008078 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033de:	d124      	bne.n	800342a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 fee8 	bl	80081ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 fe9d 	bl	800712e <USB_GetDevSpeed>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681c      	ldr	r4, [r3, #0]
 8003400:	f001 f9e8 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8003404:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4620      	mov	r0, r4
 8003410:	f003 fb9c 	bl	8006b4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f00c fa12 	bl	800f83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003428:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fe22 	bl	8008078 <USB_ReadInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b08      	cmp	r3, #8
 800343c:	d10a      	bne.n	8003454 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f00c f9ef 	bl	800f822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f002 0208 	and.w	r2, r2, #8
 8003452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f004 fe0d 	bl	8008078 <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d122      	bne.n	80034ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003474:	2301      	movs	r3, #1
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	e014      	b.n	80034a4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	b2db      	uxtb	r3, r3
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fb27 	bl	8003aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	3301      	adds	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3e5      	bcc.n	800347a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fde0 	bl	8008078 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c2:	d13b      	bne.n	800353c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c4:	2301      	movs	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	e02b      	b.n	8003522 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3340      	adds	r3, #64	; 0x40
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d115      	bne.n	800351c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da12      	bge.n	800351c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	333f      	adds	r3, #63	; 0x3f
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fae8 	bl	8003aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	3301      	adds	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	429a      	cmp	r2, r3
 800352a:	d3ce      	bcc.n	80034ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800353a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f004 fd99 	bl	8008078 <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003550:	d155      	bne.n	80035fe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003552:	2301      	movs	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	e045      	b.n	80035e4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d12e      	bne.n	80035de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003580:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003582:	2b00      	cmp	r3, #0
 8003584:	da2b      	bge.n	80035de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003592:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003596:	429a      	cmp	r2, r3
 8003598:	d121      	bne.n	80035de <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035da:	6053      	str	r3, [r2, #4]
            break;
 80035dc:	e007      	b.n	80035ee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	3301      	adds	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3b4      	bcc.n	8003558 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fd38 	bl	8008078 <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d10a      	bne.n	800362a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f00c f989 	bl	800f92c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 fd22 	bl	8008078 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d115      	bne.n	800366a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f00c f979 	bl	800f948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	e000      	b.n	800366a <HAL_PCD_IRQHandler+0x938>
      return;
 8003668:	bf00      	nop
    }
  }
}
 800366a:	3734      	adds	r7, #52	; 0x34
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}

08003670 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_PCD_SetAddress+0x1a>
 8003686:	2302      	movs	r3, #2
 8003688:	e013      	b.n	80036b2 <HAL_PCD_SetAddress+0x42>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f004 fc80 	bl	8007fa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	4608      	mov	r0, r1
 80036c4:	4611      	mov	r1, r2
 80036c6:	461a      	mov	r2, r3
 80036c8:	4603      	mov	r3, r0
 80036ca:	70fb      	strb	r3, [r7, #3]
 80036cc:	460b      	mov	r3, r1
 80036ce:	803b      	strh	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	da0f      	bge.n	8003700 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	f003 020f 	and.w	r2, r3, #15
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	3338      	adds	r3, #56	; 0x38
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4413      	add	r3, r2
 80036f4:	3304      	adds	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	705a      	strb	r2, [r3, #1]
 80036fe:	e00f      	b.n	8003720 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	f003 020f 	and.w	r2, r3, #15
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800372c:	883a      	ldrh	r2, [r7, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	78ba      	ldrb	r2, [r7, #2]
 8003736:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	785b      	ldrb	r3, [r3, #1]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800374a:	78bb      	ldrb	r3, [r7, #2]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d102      	bne.n	8003756 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_PCD_EP_Open+0xaa>
 8003760:	2302      	movs	r3, #2
 8003762:	e00e      	b.n	8003782 <HAL_PCD_EP_Open+0xc8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68f9      	ldr	r1, [r7, #12]
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fd00 	bl	8007178 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003780:	7afb      	ldrb	r3, [r7, #11]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800379a:	2b00      	cmp	r3, #0
 800379c:	da0f      	bge.n	80037be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	3338      	adds	r3, #56	; 0x38
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4413      	add	r3, r2
 80037b2:	3304      	adds	r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	705a      	strb	r2, [r3, #1]
 80037bc:	e00f      	b.n	80037de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	f003 020f 	and.w	r2, r3, #15
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_PCD_EP_Close+0x6e>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e00e      	b.n	8003816 <HAL_PCD_EP_Close+0x8c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	4618      	mov	r0, r3
 8003808:	f003 fd3e 	bl	8007288 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	460b      	mov	r3, r1
 800382c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382e:	7afb      	ldrb	r3, [r7, #11]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2200      	movs	r2, #0
 8003858:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003860:	7afb      	ldrb	r3, [r7, #11]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	b2da      	uxtb	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d102      	bne.n	800387a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	6979      	ldr	r1, [r7, #20]
 8003892:	f004 f81d 	bl	80078d0 <USB_EP0StartXfer>
 8003896:	e008      	b.n	80038aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	6979      	ldr	r1, [r7, #20]
 80038a6:	f003 fdcb 	bl	8007440 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	460b      	mov	r3, r1
 80038f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f4:	7afb      	ldrb	r3, [r7, #11]
 80038f6:	f003 020f 	and.w	r2, r3, #15
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3338      	adds	r3, #56	; 0x38
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2200      	movs	r2, #0
 800391c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2201      	movs	r2, #1
 8003922:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003924:	7afb      	ldrb	r3, [r7, #11]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	b2da      	uxtb	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d102      	bne.n	800393e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393e:	7afb      	ldrb	r3, [r7, #11]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	6979      	ldr	r1, [r7, #20]
 8003956:	f003 ffbb 	bl	80078d0 <USB_EP0StartXfer>
 800395a:	e008      	b.n	800396e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	6979      	ldr	r1, [r7, #20]
 800396a:	f003 fd69 	bl	8007440 <USB_EPStartXfer>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	f003 020f 	and.w	r2, r3, #15
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d901      	bls.n	8003996 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e050      	b.n	8003a38 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800399a:	2b00      	cmp	r3, #0
 800399c:	da0f      	bge.n	80039be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 020f 	and.w	r2, r3, #15
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	3338      	adds	r3, #56	; 0x38
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	3304      	adds	r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	705a      	strb	r2, [r3, #1]
 80039bc:	e00d      	b.n	80039da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_PCD_EP_SetStall+0x82>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e01e      	b.n	8003a38 <HAL_PCD_EP_SetStall+0xc0>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f004 f9f9 	bl	8007e00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	b2d9      	uxtb	r1, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f004 fbe9 	bl	8008200 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d901      	bls.n	8003a5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e042      	b.n	8003ae4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da0f      	bge.n	8003a86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 020f 	and.w	r2, r3, #15
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	3338      	adds	r3, #56	; 0x38
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	705a      	strb	r2, [r3, #1]
 8003a84:	e00f      	b.n	8003aa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 020f 	and.w	r2, r3, #15
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_PCD_EP_ClrStall+0x86>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e00e      	b.n	8003ae4 <HAL_PCD_EP_ClrStall+0xa4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f004 fa01 	bl	8007edc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	da0c      	bge.n	8003b1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	3338      	adds	r3, #56	; 0x38
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e00c      	b.n	8003b34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	3304      	adds	r3, #4
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 f820 	bl	8007b80 <USB_EPStopXfer>
 8003b40:	4603      	mov	r3, r0
 8003b42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b44:	7afb      	ldrb	r3, [r7, #11]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b08a      	sub	sp, #40	; 0x28
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	3338      	adds	r3, #56	; 0x38
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	3304      	adds	r3, #4
 8003b74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d901      	bls.n	8003b86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e06c      	b.n	8003c60 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d902      	bls.n	8003ba2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3303      	adds	r3, #3
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003baa:	e02b      	b.n	8003c04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d902      	bls.n	8003bc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3303      	adds	r3, #3
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6919      	ldr	r1, [r3, #16]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4603      	mov	r3, r0
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f004 f874 	bl	8007cd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	441a      	add	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	441a      	add	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d809      	bhi.n	8003c2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d203      	bcs.n	8003c2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1be      	bne.n	8003bac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d811      	bhi.n	8003c5e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	2201      	movs	r2, #1
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	6939      	ldr	r1, [r7, #16]
 8003c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	333c      	adds	r3, #60	; 0x3c
 8003c80:	3304      	adds	r3, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d17b      	bne.n	8003d96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	4a61      	ldr	r2, [pc, #388]	; (8003e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	f240 80b9 	bls.w	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80b3 	beq.w	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd0:	6093      	str	r3, [r2, #8]
 8003cd2:	e0a7      	b.n	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	461a      	mov	r2, r3
 8003cec:	2320      	movs	r3, #32
 8003cee:	6093      	str	r3, [r2, #8]
 8003cf0:	e098      	b.n	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 8093 	bne.w	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4a4b      	ldr	r2, [pc, #300]	; (8003e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d90f      	bls.n	8003d26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d22:	6093      	str	r3, [r2, #8]
 8003d24:	e07e      	b.n	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	3304      	adds	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	0159      	lsls	r1, r3, #5
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	440b      	add	r3, r1
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d52:	1ad2      	subs	r2, r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d114      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d70:	461a      	mov	r2, r3
 8003d72:	2101      	movs	r1, #1
 8003d74:	f004 fa44 	bl	8008200 <USB_EP0_OutStart>
 8003d78:	e006      	b.n	8003d88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	441a      	add	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f00b fd12 	bl	800f7b8 <HAL_PCD_DataOutStageCallback>
 8003d94:	e046      	b.n	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d124      	bne.n	8003de8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db4:	461a      	mov	r2, r3
 8003db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dba:	6093      	str	r3, [r2, #8]
 8003dbc:	e032      	b.n	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f00b fce9 	bl	800f7b8 <HAL_PCD_DataOutStageCallback>
 8003de6:	e01d      	b.n	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d114      	bne.n	8003e18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d108      	bne.n	8003e18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e10:	461a      	mov	r2, r3
 8003e12:	2100      	movs	r1, #0
 8003e14:	f004 f9f4 	bl	8008200 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f00b fcca 	bl	800f7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	4f54300a 	.word	0x4f54300a
 8003e34:	4f54310a 	.word	0x4f54310a

08003e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	333c      	adds	r3, #60	; 0x3c
 8003e50:	3304      	adds	r3, #4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d90e      	bls.n	8003e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d009      	beq.n	8003e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	461a      	mov	r2, r3
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f00b fc81 	bl	800f794 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d90c      	bls.n	8003eb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d108      	bne.n	8003eb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003eac:	461a      	mov	r2, r3
 8003eae:	2101      	movs	r1, #1
 8003eb0:	f004 f9a6 	bl	8008200 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	4f54300a 	.word	0x4f54300a

08003ec4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d107      	bne.n	8003ef2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ee2:	883b      	ldrh	r3, [r7, #0]
 8003ee4:	0419      	lsls	r1, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef0:	e028      	b.n	8003f44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4413      	add	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]
 8003f04:	e00d      	b.n	8003f22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	3340      	adds	r3, #64	; 0x40
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	4413      	add	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d3ec      	bcc.n	8003f06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f2c:	883b      	ldrh	r3, [r7, #0]
 8003f2e:	0418      	lsls	r0, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	4302      	orrs	r2, r0
 8003f3c:	3340      	adds	r3, #64	; 0x40
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e267      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d075      	beq.n	8004096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003faa:	4b88      	ldr	r3, [pc, #544]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d00c      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb6:	4b85      	ldr	r3, [pc, #532]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d112      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc2:	4b82      	ldr	r3, [pc, #520]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fce:	d10b      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	4b7e      	ldr	r3, [pc, #504]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d05b      	beq.n	8004094 <HAL_RCC_OscConfig+0x108>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d157      	bne.n	8004094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e242      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff0:	d106      	bne.n	8004000 <HAL_RCC_OscConfig+0x74>
 8003ff2:	4b76      	ldr	r3, [pc, #472]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a75      	ldr	r2, [pc, #468]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e01d      	b.n	800403c <HAL_RCC_OscConfig+0xb0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x98>
 800400a:	4b70      	ldr	r3, [pc, #448]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a6f      	ldr	r2, [pc, #444]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b6d      	ldr	r3, [pc, #436]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a6c      	ldr	r2, [pc, #432]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e00b      	b.n	800403c <HAL_RCC_OscConfig+0xb0>
 8004024:	4b69      	ldr	r3, [pc, #420]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a68      	ldr	r2, [pc, #416]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 800402a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b66      	ldr	r3, [pc, #408]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a65      	ldr	r2, [pc, #404]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d013      	beq.n	800406c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fd f9ec 	bl	8001420 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd f9e8 	bl	8001420 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e207      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4b5b      	ldr	r3, [pc, #364]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0xc0>
 800406a:	e014      	b.n	8004096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fd f9d8 	bl	8001420 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004074:	f7fd f9d4 	bl	8001420 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e1f3      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004086:	4b51      	ldr	r3, [pc, #324]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0xe8>
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d063      	beq.n	800416a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040a2:	4b4a      	ldr	r3, [pc, #296]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d11c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ba:	4b44      	ldr	r3, [pc, #272]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d116      	bne.n	80040f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	4b41      	ldr	r3, [pc, #260]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_RCC_OscConfig+0x152>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e1c7      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4937      	ldr	r1, [pc, #220]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f2:	e03a      	b.n	800416a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d020      	beq.n	800413e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fc:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_RCC_OscConfig+0x244>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004102:	f7fd f98d 	bl	8001420 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410a:	f7fd f989 	bl	8001420 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e1a8      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004128:	4b28      	ldr	r3, [pc, #160]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4925      	ldr	r1, [pc, #148]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]
 800413c:	e015      	b.n	800416a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x244>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fd f96c 	bl	8001420 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414c:	f7fd f968 	bl	8001420 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e187      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d036      	beq.n	80041e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d016      	beq.n	80041ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <HAL_RCC_OscConfig+0x248>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fd f94c 	bl	8001420 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418c:	f7fd f948 	bl	8001420 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e167      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_OscConfig+0x240>)
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x200>
 80041aa:	e01b      	b.n	80041e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_OscConfig+0x248>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b2:	f7fd f935 	bl	8001420 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b8:	e00e      	b.n	80041d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ba:	f7fd f931 	bl	8001420 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d907      	bls.n	80041d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e150      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
 80041cc:	40023800 	.word	0x40023800
 80041d0:	42470000 	.word	0x42470000
 80041d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	4b88      	ldr	r3, [pc, #544]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 80041da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ea      	bne.n	80041ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8097 	beq.w	8004320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b81      	ldr	r3, [pc, #516]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	4b7d      	ldr	r3, [pc, #500]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	4a7c      	ldr	r2, [pc, #496]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004210:	6413      	str	r3, [r2, #64]	; 0x40
 8004212:	4b7a      	ldr	r3, [pc, #488]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	4b77      	ldr	r3, [pc, #476]	; (8004400 <HAL_RCC_OscConfig+0x474>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d118      	bne.n	8004260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422e:	4b74      	ldr	r3, [pc, #464]	; (8004400 <HAL_RCC_OscConfig+0x474>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a73      	ldr	r2, [pc, #460]	; (8004400 <HAL_RCC_OscConfig+0x474>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423a:	f7fd f8f1 	bl	8001420 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004242:	f7fd f8ed 	bl	8001420 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e10c      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	4b6a      	ldr	r3, [pc, #424]	; (8004400 <HAL_RCC_OscConfig+0x474>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x2ea>
 8004268:	4b64      	ldr	r3, [pc, #400]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a63      	ldr	r2, [pc, #396]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
 8004274:	e01c      	b.n	80042b0 <HAL_RCC_OscConfig+0x324>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b05      	cmp	r3, #5
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x30c>
 800427e:	4b5f      	ldr	r3, [pc, #380]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a5e      	ldr	r2, [pc, #376]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	4b5c      	ldr	r3, [pc, #368]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a5b      	ldr	r2, [pc, #364]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	e00b      	b.n	80042b0 <HAL_RCC_OscConfig+0x324>
 8004298:	4b58      	ldr	r3, [pc, #352]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a57      	ldr	r2, [pc, #348]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
 80042a4:	4b55      	ldr	r3, [pc, #340]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	4a54      	ldr	r2, [pc, #336]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 80042aa:	f023 0304 	bic.w	r3, r3, #4
 80042ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d015      	beq.n	80042e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd f8b2 	bl	8001420 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fd f8ae 	bl	8001420 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e0cb      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d6:	4b49      	ldr	r3, [pc, #292]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0ee      	beq.n	80042c0 <HAL_RCC_OscConfig+0x334>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e4:	f7fd f89c 	bl	8001420 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fd f898 	bl	8001420 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0b5      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004302:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1ee      	bne.n	80042ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d105      	bne.n	8004320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004314:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	4a38      	ldr	r2, [pc, #224]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 800431a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80a1 	beq.w	800446c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800432a:	4b34      	ldr	r3, [pc, #208]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b08      	cmp	r3, #8
 8004334:	d05c      	beq.n	80043f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d141      	bne.n	80043c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_RCC_OscConfig+0x478>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd f86c 	bl	8001420 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd f868 	bl	8001420 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e087      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	019b      	lsls	r3, r3, #6
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	491b      	ldr	r1, [pc, #108]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x478>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7fd f841 	bl	8001420 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a2:	f7fd f83d 	bl	8001420 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e05c      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x416>
 80043c0:	e054      	b.n	800446c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_RCC_OscConfig+0x478>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fd f82a 	bl	8001420 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fd f826 	bl	8001420 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e045      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_RCC_OscConfig+0x470>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x444>
 80043ee:	e03d      	b.n	800446c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e038      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
 80043fc:	40023800 	.word	0x40023800
 8004400:	40007000 	.word	0x40007000
 8004404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCC_OscConfig+0x4ec>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d028      	beq.n	8004468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d121      	bne.n	8004468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d11a      	bne.n	8004468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004438:	4013      	ands	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800443e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004440:	4293      	cmp	r3, r2
 8004442:	d111      	bne.n	8004468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	3b01      	subs	r3, #1
 8004452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d107      	bne.n	8004468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800

0800447c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0cc      	b.n	800462a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004490:	4b68      	ldr	r3, [pc, #416]	; (8004634 <HAL_RCC_ClockConfig+0x1b8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d90c      	bls.n	80044b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449e:	4b65      	ldr	r3, [pc, #404]	; (8004634 <HAL_RCC_ClockConfig+0x1b8>)
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b63      	ldr	r3, [pc, #396]	; (8004634 <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0b8      	b.n	800462a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d020      	beq.n	8004506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d0:	4b59      	ldr	r3, [pc, #356]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4a58      	ldr	r2, [pc, #352]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e8:	4b53      	ldr	r3, [pc, #332]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a52      	ldr	r2, [pc, #328]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f4:	4b50      	ldr	r3, [pc, #320]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	494d      	ldr	r1, [pc, #308]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d044      	beq.n	800459c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d119      	bne.n	800455a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e07f      	b.n	800462a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d003      	beq.n	800453a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004536:	2b03      	cmp	r3, #3
 8004538:	d107      	bne.n	800454a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453a:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e06f      	b.n	800462a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454a:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e067      	b.n	800462a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800455a:	4b37      	ldr	r3, [pc, #220]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f023 0203 	bic.w	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4934      	ldr	r1, [pc, #208]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	4313      	orrs	r3, r2
 800456a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800456c:	f7fc ff58 	bl	8001420 <HAL_GetTick>
 8004570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004572:	e00a      	b.n	800458a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004574:	f7fc ff54 	bl	8001420 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e04f      	b.n	800462a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458a:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 020c 	and.w	r2, r3, #12
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	429a      	cmp	r2, r3
 800459a:	d1eb      	bne.n	8004574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800459c:	4b25      	ldr	r3, [pc, #148]	; (8004634 <HAL_RCC_ClockConfig+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d20c      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b22      	ldr	r3, [pc, #136]	; (8004634 <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b20      	ldr	r3, [pc, #128]	; (8004634 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e032      	b.n	800462a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4916      	ldr	r1, [pc, #88]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	490e      	ldr	r1, [pc, #56]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004602:	f000 f821 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 8004606:	4602      	mov	r2, r0
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	490a      	ldr	r1, [pc, #40]	; (800463c <HAL_RCC_ClockConfig+0x1c0>)
 8004614:	5ccb      	ldrb	r3, [r1, r3]
 8004616:	fa22 f303 	lsr.w	r3, r2, r3
 800461a:	4a09      	ldr	r2, [pc, #36]	; (8004640 <HAL_RCC_ClockConfig+0x1c4>)
 800461c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <HAL_RCC_ClockConfig+0x1c8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fc feb8 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023c00 	.word	0x40023c00
 8004638:	40023800 	.word	0x40023800
 800463c:	08010764 	.word	0x08010764
 8004640:	20000008 	.word	0x20000008
 8004644:	2000000c 	.word	0x2000000c

08004648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800464c:	b090      	sub	sp, #64	; 0x40
 800464e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
 8004654:	2300      	movs	r3, #0
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004658:	2300      	movs	r3, #0
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004660:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b08      	cmp	r3, #8
 800466a:	d00d      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x40>
 800466c:	2b08      	cmp	r3, #8
 800466e:	f200 80a1 	bhi.w	80047b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x34>
 8004676:	2b04      	cmp	r3, #4
 8004678:	d003      	beq.n	8004682 <HAL_RCC_GetSysClockFreq+0x3a>
 800467a:	e09b      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800467c:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCC_GetSysClockFreq+0x184>)
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004680:	e09b      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004682:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004686:	e098      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004688:	4b4f      	ldr	r3, [pc, #316]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d028      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	2200      	movs	r2, #0
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	627a      	str	r2, [r7, #36]	; 0x24
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046b0:	2100      	movs	r1, #0
 80046b2:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b4:	fb03 f201 	mul.w	r2, r3, r1
 80046b8:	2300      	movs	r3, #0
 80046ba:	fb00 f303 	mul.w	r3, r0, r3
 80046be:	4413      	add	r3, r2
 80046c0:	4a43      	ldr	r2, [pc, #268]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c2:	fba0 1202 	umull	r1, r2, r0, r2
 80046c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046c8:	460a      	mov	r2, r1
 80046ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80046cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ce:	4413      	add	r3, r2
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	2200      	movs	r2, #0
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	61fa      	str	r2, [r7, #28]
 80046da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046e2:	f7fb fdd5 	bl	8000290 <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4613      	mov	r3, r2
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ee:	e053      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f0:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	2200      	movs	r2, #0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	617a      	str	r2, [r7, #20]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004702:	f04f 0b00 	mov.w	fp, #0
 8004706:	4652      	mov	r2, sl
 8004708:	465b      	mov	r3, fp
 800470a:	f04f 0000 	mov.w	r0, #0
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	0159      	lsls	r1, r3, #5
 8004714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004718:	0150      	lsls	r0, r2, #5
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	ebb2 080a 	subs.w	r8, r2, sl
 8004722:	eb63 090b 	sbc.w	r9, r3, fp
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800473a:	ebb2 0408 	subs.w	r4, r2, r8
 800473e:	eb63 0509 	sbc.w	r5, r3, r9
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	00eb      	lsls	r3, r5, #3
 800474c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004750:	00e2      	lsls	r2, r4, #3
 8004752:	4614      	mov	r4, r2
 8004754:	461d      	mov	r5, r3
 8004756:	eb14 030a 	adds.w	r3, r4, sl
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	eb45 030b 	adc.w	r3, r5, fp
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800476e:	4629      	mov	r1, r5
 8004770:	028b      	lsls	r3, r1, #10
 8004772:	4621      	mov	r1, r4
 8004774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004778:	4621      	mov	r1, r4
 800477a:	028a      	lsls	r2, r1, #10
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	2200      	movs	r2, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	60fa      	str	r2, [r7, #12]
 8004788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800478c:	f7fb fd80 	bl	8000290 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	3301      	adds	r3, #1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetSysClockFreq+0x184>)
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3740      	adds	r7, #64	; 0x40
 80047c0:	46bd      	mov	sp, r7
 80047c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	017d7840 	.word	0x017d7840

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000008 	.word	0x20000008

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff0 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	08010774 	.word	0x08010774

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffdc 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0b5b      	lsrs	r3, r3, #13
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	08010774 	.word	0x08010774

0800483c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d105      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004860:	2b00      	cmp	r3, #0
 8004862:	d038      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004864:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800486a:	f7fc fdd9 	bl	8001420 <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004872:	f7fc fdd5 	bl	8001420 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0bd      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004884:	4b61      	ldr	r3, [pc, #388]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	495a      	ldr	r1, [pc, #360]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048aa:	4b57      	ldr	r3, [pc, #348]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048b0:	f7fc fdb6 	bl	8001420 <HAL_GetTick>
 80048b4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048b8:	f7fc fdb2 	bl	8001420 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e09a      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ca:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8083 	beq.w	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	4b48      	ldr	r3, [pc, #288]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4a47      	ldr	r2, [pc, #284]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6413      	str	r3, [r2, #64]	; 0x40
 80048f4:	4b45      	ldr	r3, [pc, #276]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004900:	4b43      	ldr	r3, [pc, #268]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a42      	ldr	r2, [pc, #264]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800490c:	f7fc fd88 	bl	8001420 <HAL_GetTick>
 8004910:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004914:	f7fc fd84 	bl	8001420 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e06c      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004926:	4b3a      	ldr	r3, [pc, #232]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004932:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d02f      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	429a      	cmp	r2, r3
 800494e:	d028      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004950:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004958:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800495a:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004960:	4b2c      	ldr	r3, [pc, #176]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004966:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800496c:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b01      	cmp	r3, #1
 8004976:	d114      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004978:	f7fc fd52 	bl	8001420 <HAL_GetTick>
 800497c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497e:	e00a      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004980:	f7fc fd4e 	bl	8001420 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e034      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0ee      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ae:	d10d      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80049b0:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c4:	4911      	ldr	r1, [pc, #68]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
 80049ca:	e005      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049d6:	6093      	str	r3, [r2, #8]
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e4:	4909      	ldr	r1, [pc, #36]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	7d1a      	ldrb	r2, [r3, #20]
 80049fa:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80049fc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	42470068 	.word	0x42470068
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40007000 	.word	0x40007000
 8004a14:	42470e40 	.word	0x42470e40
 8004a18:	424711e0 	.word	0x424711e0

08004a1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e066      	b.n	8004b00 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7f5b      	ldrb	r3, [r3, #29]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc fad0 	bl	8000fe8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	22ca      	movs	r2, #202	; 0xca
 8004a54:	625a      	str	r2, [r3, #36]	; 0x24
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2253      	movs	r2, #83	; 0x53
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f87a 	bl	8004b58 <RTC_EnterInitMode>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d12c      	bne.n	8004ac8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a80:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6899      	ldr	r1, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68d2      	ldr	r2, [r2, #12]
 8004aa8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6919      	ldr	r1, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	041a      	lsls	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f881 	bl	8004bc6 <RTC_ExitInitMode>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d113      	bne.n	8004af6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	22ff      	movs	r2, #255	; 0xff
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b24:	f7fc fc7c 	bl	8001420 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b2a:	e009      	b.n	8004b40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b2c:	f7fc fc78 	bl	8001420 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3a:	d901      	bls.n	8004b40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e007      	b.n	8004b50 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ee      	beq.n	8004b2c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d122      	bne.n	8004bbc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b86:	f7fc fc4b 	bl	8001420 <HAL_GetTick>
 8004b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b8c:	e00c      	b.n	8004ba8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b8e:	f7fc fc47 	bl	8001420 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b9c:	d904      	bls.n	8004ba8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <RTC_EnterInitMode+0x64>
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d1e8      	bne.n	8004b8e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ff89 	bl	8004b08 <HAL_RTC_WaitForSynchro>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e041      	b.n	8004ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fa02 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f000 fc54 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d001      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e044      	b.n	8004d52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x6c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d013      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x6c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <HAL_TIM_Base_Start_IT+0xb4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00e      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x6c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x6c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <HAL_TIM_Base_Start_IT+0xbc>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x6c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d111      	bne.n	8004d40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b06      	cmp	r3, #6
 8004d2c:	d010      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	e007      	b.n	8004d50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000

08004d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e041      	b.n	8004e0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f839 	bl	8004e12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f000 fba2 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_TIM_PWM_Start+0x24>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e022      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d109      	bne.n	8004e66 <HAL_TIM_PWM_Start+0x3e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	bf14      	ite	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	2300      	moveq	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	e015      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d109      	bne.n	8004e80 <HAL_TIM_PWM_Start+0x58>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e008      	b.n	8004e92 <HAL_TIM_PWM_Start+0x6a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf14      	ite	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	2300      	moveq	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e068      	b.n	8004f6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <HAL_TIM_PWM_Start+0x82>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea8:	e013      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_PWM_Start+0x92>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb8:	e00b      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0xa2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec8:	e003      	b.n	8004ed2 <HAL_TIM_PWM_Start+0xaa>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fdb4 	bl	8005a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a23      	ldr	r2, [pc, #140]	; (8004f74 <HAL_TIM_PWM_Start+0x14c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_TIM_PWM_Start+0x14c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x10e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0c:	d013      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x10e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <HAL_TIM_PWM_Start+0x150>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x10e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <HAL_TIM_PWM_Start+0x154>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x10e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <HAL_TIM_PWM_Start+0x158>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x10e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a14      	ldr	r2, [pc, #80]	; (8004f84 <HAL_TIM_PWM_Start+0x15c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d111      	bne.n	8004f5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d010      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f58:	e007      	b.n	8004f6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40000c00 	.word	0x40000c00
 8004f84:	40014000 	.word	0x40014000

08004f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d122      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d11b      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0202 	mvn.w	r2, #2
 8004fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa77 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8004fd0:	e005      	b.n	8004fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa69 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fa7a 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d122      	bne.n	8005038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d11b      	bne.n	8005038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0204 	mvn.w	r2, #4
 8005008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa4d 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005024:	e005      	b.n	8005032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa3f 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fa50 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b08      	cmp	r3, #8
 8005044:	d122      	bne.n	800508c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b08      	cmp	r3, #8
 8005052:	d11b      	bne.n	800508c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0208 	mvn.w	r2, #8
 800505c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2204      	movs	r2, #4
 8005062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa23 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005078:	e005      	b.n	8005086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa15 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa26 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b10      	cmp	r3, #16
 8005098:	d122      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d11b      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0210 	mvn.w	r2, #16
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2208      	movs	r2, #8
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f9f9 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f9eb 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f9fc 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d10e      	bne.n	800510c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d107      	bne.n	800510c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0201 	mvn.w	r2, #1
 8005104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fb fe1e 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d10e      	bne.n	8005138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	2b80      	cmp	r3, #128	; 0x80
 8005126:	d107      	bne.n	8005138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fd26 	bl	8005b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d10e      	bne.n	8005164 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d107      	bne.n	8005164 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800515c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f9c1 	bl	80054e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b20      	cmp	r3, #32
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b20      	cmp	r3, #32
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0220 	mvn.w	r2, #32
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fcf0 	bl	8005b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e0ae      	b.n	8005314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	f200 809f 	bhi.w	8005304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	08005201 	.word	0x08005201
 80051d0:	08005305 	.word	0x08005305
 80051d4:	08005305 	.word	0x08005305
 80051d8:	08005305 	.word	0x08005305
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005305 	.word	0x08005305
 80051e4:	08005305 	.word	0x08005305
 80051e8:	08005305 	.word	0x08005305
 80051ec:	08005283 	.word	0x08005283
 80051f0:	08005305 	.word	0x08005305
 80051f4:	08005305 	.word	0x08005305
 80051f8:	08005305 	.word	0x08005305
 80051fc:	080052c3 	.word	0x080052c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f9f8 	bl	80055fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0208 	orr.w	r2, r2, #8
 800521a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0204 	bic.w	r2, r2, #4
 800522a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6999      	ldr	r1, [r3, #24]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	619a      	str	r2, [r3, #24]
      break;
 800523e:	e064      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fa3e 	bl	80056c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800525a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800526a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6999      	ldr	r1, [r3, #24]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	021a      	lsls	r2, r3, #8
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	619a      	str	r2, [r3, #24]
      break;
 8005280:	e043      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fa89 	bl	80057a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0208 	orr.w	r2, r2, #8
 800529c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0204 	bic.w	r2, r2, #4
 80052ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69d9      	ldr	r1, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	61da      	str	r2, [r3, #28]
      break;
 80052c0:	e023      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fad3 	bl	8005874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69d9      	ldr	r1, [r3, #28]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	021a      	lsls	r2, r3, #8
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	61da      	str	r2, [r3, #28]
      break;
 8005302:	e002      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	75fb      	strb	r3, [r7, #23]
      break;
 8005308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005312:	7dfb      	ldrb	r3, [r7, #23]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIM_ConfigClockSource+0x1c>
 8005334:	2302      	movs	r3, #2
 8005336:	e0b4      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x186>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005370:	d03e      	beq.n	80053f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005376:	f200 8087 	bhi.w	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537e:	f000 8086 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x172>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005386:	d87f      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b70      	cmp	r3, #112	; 0x70
 800538a:	d01a      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0xa6>
 800538c:	2b70      	cmp	r3, #112	; 0x70
 800538e:	d87b      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b60      	cmp	r3, #96	; 0x60
 8005392:	d050      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x11a>
 8005394:	2b60      	cmp	r3, #96	; 0x60
 8005396:	d877      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b50      	cmp	r3, #80	; 0x50
 800539a:	d03c      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0xfa>
 800539c:	2b50      	cmp	r3, #80	; 0x50
 800539e:	d873      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d058      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x13a>
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d86f      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b30      	cmp	r3, #48	; 0x30
 80053aa:	d064      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15a>
 80053ac:	2b30      	cmp	r3, #48	; 0x30
 80053ae:	d86b      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d060      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15a>
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d867      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d05c      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d05a      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15a>
 80053c0:	e062      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6899      	ldr	r1, [r3, #8]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f000 fb19 	bl	8005a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	609a      	str	r2, [r3, #8]
      break;
 80053ee:	e04f      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	6899      	ldr	r1, [r3, #8]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f000 fb02 	bl	8005a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005412:	609a      	str	r2, [r3, #8]
      break;
 8005414:	e03c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	461a      	mov	r2, r3
 8005424:	f000 fa76 	bl	8005914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2150      	movs	r1, #80	; 0x50
 800542e:	4618      	mov	r0, r3
 8005430:	f000 facf 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005434:	e02c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	461a      	mov	r2, r3
 8005444:	f000 fa95 	bl	8005972 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2160      	movs	r1, #96	; 0x60
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fabf 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005454:	e01c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6859      	ldr	r1, [r3, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	461a      	mov	r2, r3
 8005464:	f000 fa56 	bl	8005914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2140      	movs	r1, #64	; 0x40
 800546e:	4618      	mov	r0, r3
 8005470:	f000 faaf 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005474:	e00c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f000 faa6 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005486:	e003      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e000      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800548e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a34      	ldr	r2, [pc, #208]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a31      	ldr	r2, [pc, #196]	; (80055e4 <TIM_Base_SetConfig+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a30      	ldr	r2, [pc, #192]	; (80055e8 <TIM_Base_SetConfig+0xec>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a2f      	ldr	r2, [pc, #188]	; (80055ec <TIM_Base_SetConfig+0xf0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <TIM_Base_SetConfig+0xe8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <TIM_Base_SetConfig+0xec>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a20      	ldr	r2, [pc, #128]	; (80055ec <TIM_Base_SetConfig+0xf0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <TIM_Base_SetConfig+0xf4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <TIM_Base_SetConfig+0xf8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <TIM_Base_SetConfig+0xfc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <TIM_Base_SetConfig+0xe4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d103      	bne.n	80055cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	615a      	str	r2, [r3, #20]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40000c00 	.word	0x40000c00
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800

080055fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f023 0201 	bic.w	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f023 0302 	bic.w	r3, r3, #2
 8005644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <TIM_OC1_SetConfig+0xc8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d10c      	bne.n	8005672 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0308 	bic.w	r3, r3, #8
 800565e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 0304 	bic.w	r3, r3, #4
 8005670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <TIM_OC1_SetConfig+0xc8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d111      	bne.n	800569e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40010000 	.word	0x40010000

080056c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f023 0210 	bic.w	r2, r3, #16
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0320 	bic.w	r3, r3, #32
 8005712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a1e      	ldr	r2, [pc, #120]	; (800579c <TIM_OC2_SetConfig+0xd4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d10d      	bne.n	8005744 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a15      	ldr	r2, [pc, #84]	; (800579c <TIM_OC2_SetConfig+0xd4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d113      	bne.n	8005774 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800575a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000

080057a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <TIM_OC3_SetConfig+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d10d      	bne.n	800581a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a14      	ldr	r2, [pc, #80]	; (8005870 <TIM_OC3_SetConfig+0xd0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d113      	bne.n	800584a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	621a      	str	r2, [r3, #32]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40010000 	.word	0x40010000

08005874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	031b      	lsls	r3, r3, #12
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a10      	ldr	r2, [pc, #64]	; (8005910 <TIM_OC4_SetConfig+0x9c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d109      	bne.n	80058e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000

08005914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0201 	bic.w	r2, r3, #1
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800593e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 030a 	bic.w	r3, r3, #10
 8005950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005972:	b480      	push	{r7}
 8005974:	b087      	sub	sp, #28
 8005976:	af00      	add	r7, sp, #0
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f023 0210 	bic.w	r2, r3, #16
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800599c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	031b      	lsls	r3, r3, #12
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f043 0307 	orr.w	r3, r3, #7
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	431a      	orrs	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e050      	b.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d013      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a15      	ldr	r2, [pc, #84]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10c      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40014000 	.word	0x40014000

08005b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e03f      	b.n	8005c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb fab6 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fcdf 	bl	80065a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d11d      	bne.n	8005c88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Receive_IT+0x26>
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e016      	b.n	8005c8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Receive_IT+0x38>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e00f      	b.n	8005c8a <HAL_UART_Receive_IT+0x58>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fab6 	bl	80061f0 <UART_Start_Receive_IT>
 8005c84:	4603      	mov	r3, r0
 8005c86:	e000      	b.n	8005c8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b0ba      	sub	sp, #232	; 0xe8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10f      	bne.n	8005cfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_UART_IRQHandler+0x66>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fb99 	bl	800642a <UART_Receive_IT>
      return;
 8005cf8:	e256      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80de 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x22c>
 8005d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80d1 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <HAL_UART_IRQHandler+0xae>
 8005d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HAL_UART_IRQHandler+0xd2>
 8005d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0202 	orr.w	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_UART_IRQHandler+0xf6>
 8005d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f043 0204 	orr.w	r2, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d011      	beq.n	8005dba <HAL_UART_IRQHandler+0x126>
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f043 0208 	orr.w	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 81ed 	beq.w	800619e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_UART_IRQHandler+0x14e>
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fb24 	bl	800642a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d103      	bne.n	8005e0e <HAL_UART_IRQHandler+0x17a>
 8005e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d04f      	beq.n	8005eae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa2c 	bl	800626c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d141      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3314      	adds	r3, #20
 8005e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3314      	adds	r3, #20
 8005e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1d9      	bne.n	8005e22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d013      	beq.n	8005e9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	4a7d      	ldr	r2, [pc, #500]	; (8006070 <HAL_UART_IRQHandler+0x3dc>)
 8005e7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fb fc7d 	bl	8001782 <HAL_DMA_Abort_IT>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d016      	beq.n	8005ebc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e9c:	e00e      	b.n	8005ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f990 	bl	80061c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	e00a      	b.n	8005ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f98c 	bl	80061c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	e006      	b.n	8005ebc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f988 	bl	80061c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005eba:	e170      	b.n	800619e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	bf00      	nop
    return;
 8005ebe:	e16e      	b.n	800619e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	f040 814a 	bne.w	800615e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8143 	beq.w	800615e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 813c 	beq.w	800615e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	f040 80b4 	bne.w	8006074 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8140 	beq.w	80061a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	f080 8139 	bcs.w	80061a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f42:	f000 8088 	beq.w	8006056 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1d9      	bne.n	8005f46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3314      	adds	r3, #20
 8005f98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e1      	bne.n	8005f92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ff8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e3      	bne.n	8005fce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006038:	65ba      	str	r2, [r7, #88]	; 0x58
 800603a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800603e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e3      	bne.n	8006014 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	4618      	mov	r0, r3
 8006052:	f7fb fb26 	bl	80016a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800605e:	b29b      	uxth	r3, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	b29b      	uxth	r3, r3
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f8b6 	bl	80061d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800606c:	e099      	b.n	80061a2 <HAL_UART_IRQHandler+0x50e>
 800606e:	bf00      	nop
 8006070:	08006333 	.word	0x08006333
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800607c:	b29b      	uxth	r3, r3
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 808b 	beq.w	80061a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8086 	beq.w	80061a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060be:	647a      	str	r2, [r7, #68]	; 0x44
 80060c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e3      	bne.n	800609a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	623b      	str	r3, [r7, #32]
   return(result);
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3314      	adds	r3, #20
 80060f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060f6:	633a      	str	r2, [r7, #48]	; 0x30
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e3      	bne.n	80060d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	60fb      	str	r3, [r7, #12]
   return(result);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0310 	bic.w	r3, r3, #16
 800612e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800613c:	61fa      	str	r2, [r7, #28]
 800613e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	69b9      	ldr	r1, [r7, #24]
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	617b      	str	r3, [r7, #20]
   return(result);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e3      	bne.n	8006118 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f83e 	bl	80061d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800615c:	e023      	b.n	80061a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_UART_IRQHandler+0x4ea>
 800616a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8ef 	bl	800635a <UART_Transmit_IT>
    return;
 800617c:	e014      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00e      	beq.n	80061a8 <HAL_UART_IRQHandler+0x514>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f92f 	bl	80063fa <UART_EndTransmit_IT>
    return;
 800619c:	e004      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
    return;
 800619e:	bf00      	nop
 80061a0:	e002      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
      return;
 80061a2:	bf00      	nop
 80061a4:	e000      	b.n	80061a8 <HAL_UART_IRQHandler+0x514>
      return;
 80061a6:	bf00      	nop
  }
}
 80061a8:	37e8      	adds	r7, #232	; 0xe8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop

080061b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4613      	mov	r3, r2
 80061fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	88fa      	ldrh	r2, [r7, #6]
 8006208:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	88fa      	ldrh	r2, [r7, #6]
 800620e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2222      	movs	r2, #34	; 0x22
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800623c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695a      	ldr	r2, [r3, #20]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0201 	orr.w	r2, r2, #1
 800624c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0220 	orr.w	r2, r2, #32
 800625c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b095      	sub	sp, #84	; 0x54
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800628a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006294:	643a      	str	r2, [r7, #64]	; 0x40
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800629a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e5      	bne.n	8006274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3314      	adds	r3, #20
 80062ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3314      	adds	r3, #20
 80062c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e5      	bne.n	80062a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d119      	bne.n	8006318 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f023 0310 	bic.w	r3, r3, #16
 80062fa:	647b      	str	r3, [r7, #68]	; 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006304:	61ba      	str	r2, [r7, #24]
 8006306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6979      	ldr	r1, [r7, #20]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	613b      	str	r3, [r7, #16]
   return(result);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e5      	bne.n	80062e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006326:	bf00      	nop
 8006328:	3754      	adds	r7, #84	; 0x54
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff ff39 	bl	80061c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b21      	cmp	r3, #33	; 0x21
 800636c:	d13e      	bne.n	80063ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	d114      	bne.n	80063a2 <UART_Transmit_IT+0x48>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d110      	bne.n	80063a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006394:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	1c9a      	adds	r2, r3, #2
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]
 80063a0:	e008      	b.n	80063b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	1c59      	adds	r1, r3, #1
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6211      	str	r1, [r2, #32]
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29b      	uxth	r3, r3
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	4619      	mov	r1, r3
 80063c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10f      	bne.n	80063e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006410:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fec8 	bl	80061b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b08c      	sub	sp, #48	; 0x30
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b22      	cmp	r3, #34	; 0x22
 800643c:	f040 80ab 	bne.w	8006596 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d117      	bne.n	800647a <UART_Receive_IT+0x50>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d113      	bne.n	800647a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006468:	b29a      	uxth	r2, r3
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28
 8006478:	e026      	b.n	80064c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d007      	beq.n	800649e <UART_Receive_IT+0x74>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <UART_Receive_IT+0x82>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e008      	b.n	80064be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4619      	mov	r1, r3
 80064d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d15a      	bne.n	8006592 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0220 	bic.w	r2, r2, #32
 80064ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	2b01      	cmp	r3, #1
 800651a:	d135      	bne.n	8006588 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	613b      	str	r3, [r7, #16]
   return(result);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f023 0310 	bic.w	r3, r3, #16
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	623a      	str	r2, [r7, #32]
 8006544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	69f9      	ldr	r1, [r7, #28]
 8006548:	6a3a      	ldr	r2, [r7, #32]
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e5      	bne.n	8006522 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b10      	cmp	r3, #16
 8006562:	d10a      	bne.n	800657a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fe29 	bl	80061d8 <HAL_UARTEx_RxEventCallback>
 8006586:	e002      	b.n	800658e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7fa fbed 	bl	8000d68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e002      	b.n	8006598 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e000      	b.n	8006598 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006596:	2302      	movs	r3, #2
  }
}
 8006598:	4618      	mov	r0, r3
 800659a:	3730      	adds	r7, #48	; 0x30
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a4:	b0c0      	sub	sp, #256	; 0x100
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	68d9      	ldr	r1, [r3, #12]
 80065be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	ea40 0301 	orr.w	r3, r0, r1
 80065c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	431a      	orrs	r2, r3
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065f8:	f021 010c 	bic.w	r1, r1, #12
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006606:	430b      	orrs	r3, r1
 8006608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	6999      	ldr	r1, [r3, #24]
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	ea40 0301 	orr.w	r3, r0, r1
 8006626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4b8f      	ldr	r3, [pc, #572]	; (800686c <UART_SetConfig+0x2cc>)
 8006630:	429a      	cmp	r2, r3
 8006632:	d005      	beq.n	8006640 <UART_SetConfig+0xa0>
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4b8d      	ldr	r3, [pc, #564]	; (8006870 <UART_SetConfig+0x2d0>)
 800663c:	429a      	cmp	r2, r3
 800663e:	d104      	bne.n	800664a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7fe f8e8 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8006644:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006648:	e003      	b.n	8006652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800664a:	f7fe f8cf 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 800664e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665c:	f040 810c 	bne.w	8006878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006664:	2200      	movs	r2, #0
 8006666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800666a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800666e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	1891      	adds	r1, r2, r2
 8006678:	65b9      	str	r1, [r7, #88]	; 0x58
 800667a:	415b      	adcs	r3, r3
 800667c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006682:	4621      	mov	r1, r4
 8006684:	eb12 0801 	adds.w	r8, r2, r1
 8006688:	4629      	mov	r1, r5
 800668a:	eb43 0901 	adc.w	r9, r3, r1
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800669a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800669e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066a2:	4690      	mov	r8, r2
 80066a4:	4699      	mov	r9, r3
 80066a6:	4623      	mov	r3, r4
 80066a8:	eb18 0303 	adds.w	r3, r8, r3
 80066ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066b0:	462b      	mov	r3, r5
 80066b2:	eb49 0303 	adc.w	r3, r9, r3
 80066b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066ce:	460b      	mov	r3, r1
 80066d0:	18db      	adds	r3, r3, r3
 80066d2:	653b      	str	r3, [r7, #80]	; 0x50
 80066d4:	4613      	mov	r3, r2
 80066d6:	eb42 0303 	adc.w	r3, r2, r3
 80066da:	657b      	str	r3, [r7, #84]	; 0x54
 80066dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066e4:	f7f9 fdd4 	bl	8000290 <__aeabi_uldivmod>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4b61      	ldr	r3, [pc, #388]	; (8006874 <UART_SetConfig+0x2d4>)
 80066ee:	fba3 2302 	umull	r2, r3, r3, r2
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	011c      	lsls	r4, r3, #4
 80066f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006700:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006708:	4642      	mov	r2, r8
 800670a:	464b      	mov	r3, r9
 800670c:	1891      	adds	r1, r2, r2
 800670e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006710:	415b      	adcs	r3, r3
 8006712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006718:	4641      	mov	r1, r8
 800671a:	eb12 0a01 	adds.w	sl, r2, r1
 800671e:	4649      	mov	r1, r9
 8006720:	eb43 0b01 	adc.w	fp, r3, r1
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006738:	4692      	mov	sl, r2
 800673a:	469b      	mov	fp, r3
 800673c:	4643      	mov	r3, r8
 800673e:	eb1a 0303 	adds.w	r3, sl, r3
 8006742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006746:	464b      	mov	r3, r9
 8006748:	eb4b 0303 	adc.w	r3, fp, r3
 800674c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800675c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006764:	460b      	mov	r3, r1
 8006766:	18db      	adds	r3, r3, r3
 8006768:	643b      	str	r3, [r7, #64]	; 0x40
 800676a:	4613      	mov	r3, r2
 800676c:	eb42 0303 	adc.w	r3, r2, r3
 8006770:	647b      	str	r3, [r7, #68]	; 0x44
 8006772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800677a:	f7f9 fd89 	bl	8000290 <__aeabi_uldivmod>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4611      	mov	r1, r2
 8006784:	4b3b      	ldr	r3, [pc, #236]	; (8006874 <UART_SetConfig+0x2d4>)
 8006786:	fba3 2301 	umull	r2, r3, r3, r1
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2264      	movs	r2, #100	; 0x64
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	1acb      	subs	r3, r1, r3
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800679a:	4b36      	ldr	r3, [pc, #216]	; (8006874 <UART_SetConfig+0x2d4>)
 800679c:	fba3 2302 	umull	r2, r3, r3, r2
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a8:	441c      	add	r4, r3
 80067aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067bc:	4642      	mov	r2, r8
 80067be:	464b      	mov	r3, r9
 80067c0:	1891      	adds	r1, r2, r2
 80067c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80067c4:	415b      	adcs	r3, r3
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067cc:	4641      	mov	r1, r8
 80067ce:	1851      	adds	r1, r2, r1
 80067d0:	6339      	str	r1, [r7, #48]	; 0x30
 80067d2:	4649      	mov	r1, r9
 80067d4:	414b      	adcs	r3, r1
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067e4:	4659      	mov	r1, fp
 80067e6:	00cb      	lsls	r3, r1, #3
 80067e8:	4651      	mov	r1, sl
 80067ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ee:	4651      	mov	r1, sl
 80067f0:	00ca      	lsls	r2, r1, #3
 80067f2:	4610      	mov	r0, r2
 80067f4:	4619      	mov	r1, r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	4642      	mov	r2, r8
 80067fa:	189b      	adds	r3, r3, r2
 80067fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006800:	464b      	mov	r3, r9
 8006802:	460a      	mov	r2, r1
 8006804:	eb42 0303 	adc.w	r3, r2, r3
 8006808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006818:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800681c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006820:	460b      	mov	r3, r1
 8006822:	18db      	adds	r3, r3, r3
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
 8006826:	4613      	mov	r3, r2
 8006828:	eb42 0303 	adc.w	r3, r2, r3
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006836:	f7f9 fd2b 	bl	8000290 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <UART_SetConfig+0x2d4>)
 8006840:	fba3 1302 	umull	r1, r3, r3, r2
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	2164      	movs	r1, #100	; 0x64
 8006848:	fb01 f303 	mul.w	r3, r1, r3
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	3332      	adds	r3, #50	; 0x32
 8006852:	4a08      	ldr	r2, [pc, #32]	; (8006874 <UART_SetConfig+0x2d4>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	f003 0207 	and.w	r2, r3, #7
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4422      	add	r2, r4
 8006866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006868:	e105      	b.n	8006a76 <UART_SetConfig+0x4d6>
 800686a:	bf00      	nop
 800686c:	40011000 	.word	0x40011000
 8006870:	40011400 	.word	0x40011400
 8006874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800687c:	2200      	movs	r2, #0
 800687e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800688a:	4642      	mov	r2, r8
 800688c:	464b      	mov	r3, r9
 800688e:	1891      	adds	r1, r2, r2
 8006890:	6239      	str	r1, [r7, #32]
 8006892:	415b      	adcs	r3, r3
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
 8006896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800689a:	4641      	mov	r1, r8
 800689c:	1854      	adds	r4, r2, r1
 800689e:	4649      	mov	r1, r9
 80068a0:	eb43 0501 	adc.w	r5, r3, r1
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	00eb      	lsls	r3, r5, #3
 80068ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068b2:	00e2      	lsls	r2, r4, #3
 80068b4:	4614      	mov	r4, r2
 80068b6:	461d      	mov	r5, r3
 80068b8:	4643      	mov	r3, r8
 80068ba:	18e3      	adds	r3, r4, r3
 80068bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068c0:	464b      	mov	r3, r9
 80068c2:	eb45 0303 	adc.w	r3, r5, r3
 80068c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068e6:	4629      	mov	r1, r5
 80068e8:	008b      	lsls	r3, r1, #2
 80068ea:	4621      	mov	r1, r4
 80068ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f0:	4621      	mov	r1, r4
 80068f2:	008a      	lsls	r2, r1, #2
 80068f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068f8:	f7f9 fcca 	bl	8000290 <__aeabi_uldivmod>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4b60      	ldr	r3, [pc, #384]	; (8006a84 <UART_SetConfig+0x4e4>)
 8006902:	fba3 2302 	umull	r2, r3, r3, r2
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	011c      	lsls	r4, r3, #4
 800690a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690e:	2200      	movs	r2, #0
 8006910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800691c:	4642      	mov	r2, r8
 800691e:	464b      	mov	r3, r9
 8006920:	1891      	adds	r1, r2, r2
 8006922:	61b9      	str	r1, [r7, #24]
 8006924:	415b      	adcs	r3, r3
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800692c:	4641      	mov	r1, r8
 800692e:	1851      	adds	r1, r2, r1
 8006930:	6139      	str	r1, [r7, #16]
 8006932:	4649      	mov	r1, r9
 8006934:	414b      	adcs	r3, r1
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006944:	4659      	mov	r1, fp
 8006946:	00cb      	lsls	r3, r1, #3
 8006948:	4651      	mov	r1, sl
 800694a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694e:	4651      	mov	r1, sl
 8006950:	00ca      	lsls	r2, r1, #3
 8006952:	4610      	mov	r0, r2
 8006954:	4619      	mov	r1, r3
 8006956:	4603      	mov	r3, r0
 8006958:	4642      	mov	r2, r8
 800695a:	189b      	adds	r3, r3, r2
 800695c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006960:	464b      	mov	r3, r9
 8006962:	460a      	mov	r2, r1
 8006964:	eb42 0303 	adc.w	r3, r2, r3
 8006968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	67bb      	str	r3, [r7, #120]	; 0x78
 8006976:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006984:	4649      	mov	r1, r9
 8006986:	008b      	lsls	r3, r1, #2
 8006988:	4641      	mov	r1, r8
 800698a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698e:	4641      	mov	r1, r8
 8006990:	008a      	lsls	r2, r1, #2
 8006992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006996:	f7f9 fc7b 	bl	8000290 <__aeabi_uldivmod>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <UART_SetConfig+0x4e4>)
 80069a0:	fba3 1302 	umull	r1, r3, r3, r2
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	2164      	movs	r1, #100	; 0x64
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	3332      	adds	r3, #50	; 0x32
 80069b2:	4a34      	ldr	r2, [pc, #208]	; (8006a84 <UART_SetConfig+0x4e4>)
 80069b4:	fba2 2303 	umull	r2, r3, r2, r3
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069be:	441c      	add	r4, r3
 80069c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c4:	2200      	movs	r2, #0
 80069c6:	673b      	str	r3, [r7, #112]	; 0x70
 80069c8:	677a      	str	r2, [r7, #116]	; 0x74
 80069ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069ce:	4642      	mov	r2, r8
 80069d0:	464b      	mov	r3, r9
 80069d2:	1891      	adds	r1, r2, r2
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	415b      	adcs	r3, r3
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069de:	4641      	mov	r1, r8
 80069e0:	1851      	adds	r1, r2, r1
 80069e2:	6039      	str	r1, [r7, #0]
 80069e4:	4649      	mov	r1, r9
 80069e6:	414b      	adcs	r3, r1
 80069e8:	607b      	str	r3, [r7, #4]
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069f6:	4659      	mov	r1, fp
 80069f8:	00cb      	lsls	r3, r1, #3
 80069fa:	4651      	mov	r1, sl
 80069fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a00:	4651      	mov	r1, sl
 8006a02:	00ca      	lsls	r2, r1, #3
 8006a04:	4610      	mov	r0, r2
 8006a06:	4619      	mov	r1, r3
 8006a08:	4603      	mov	r3, r0
 8006a0a:	4642      	mov	r2, r8
 8006a0c:	189b      	adds	r3, r3, r2
 8006a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a10:	464b      	mov	r3, r9
 8006a12:	460a      	mov	r2, r1
 8006a14:	eb42 0303 	adc.w	r3, r2, r3
 8006a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	663b      	str	r3, [r7, #96]	; 0x60
 8006a24:	667a      	str	r2, [r7, #100]	; 0x64
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a32:	4649      	mov	r1, r9
 8006a34:	008b      	lsls	r3, r1, #2
 8006a36:	4641      	mov	r1, r8
 8006a38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	008a      	lsls	r2, r1, #2
 8006a40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a44:	f7f9 fc24 	bl	8000290 <__aeabi_uldivmod>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <UART_SetConfig+0x4e4>)
 8006a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2164      	movs	r1, #100	; 0x64
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	3332      	adds	r3, #50	; 0x32
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <UART_SetConfig+0x4e4>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f003 020f 	and.w	r2, r3, #15
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4422      	add	r2, r4
 8006a74:	609a      	str	r2, [r3, #8]
}
 8006a76:	bf00      	nop
 8006a78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a82:	bf00      	nop
 8006a84:	51eb851f 	.word	0x51eb851f

08006a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a88:	b084      	sub	sp, #16
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	f107 001c 	add.w	r0, r7, #28
 8006a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d122      	bne.n	8006ae6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d105      	bne.n	8006ada <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fbee 	bl	80082bc <USB_CoreReset>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]
 8006ae4:	e01a      	b.n	8006b1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fbe2 	bl	80082bc <USB_CoreReset>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b0e:	e005      	b.n	8006b1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d10b      	bne.n	8006b3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f043 0206 	orr.w	r2, r3, #6
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f043 0220 	orr.w	r2, r3, #32
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b46:	b004      	add	sp, #16
 8006b48:	4770      	bx	lr
	...

08006b4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	4613      	mov	r3, r2
 8006b58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d165      	bne.n	8006c2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4a41      	ldr	r2, [pc, #260]	; (8006c68 <USB_SetTurnaroundTime+0x11c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d906      	bls.n	8006b76 <USB_SetTurnaroundTime+0x2a>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4a40      	ldr	r2, [pc, #256]	; (8006c6c <USB_SetTurnaroundTime+0x120>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d202      	bcs.n	8006b76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b70:	230f      	movs	r3, #15
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e062      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4a3c      	ldr	r2, [pc, #240]	; (8006c6c <USB_SetTurnaroundTime+0x120>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d306      	bcc.n	8006b8c <USB_SetTurnaroundTime+0x40>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4a3b      	ldr	r2, [pc, #236]	; (8006c70 <USB_SetTurnaroundTime+0x124>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d202      	bcs.n	8006b8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b86:	230e      	movs	r3, #14
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	e057      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4a38      	ldr	r2, [pc, #224]	; (8006c70 <USB_SetTurnaroundTime+0x124>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d306      	bcc.n	8006ba2 <USB_SetTurnaroundTime+0x56>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4a37      	ldr	r2, [pc, #220]	; (8006c74 <USB_SetTurnaroundTime+0x128>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d202      	bcs.n	8006ba2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b9c:	230d      	movs	r3, #13
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	e04c      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4a33      	ldr	r2, [pc, #204]	; (8006c74 <USB_SetTurnaroundTime+0x128>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d306      	bcc.n	8006bb8 <USB_SetTurnaroundTime+0x6c>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	4a32      	ldr	r2, [pc, #200]	; (8006c78 <USB_SetTurnaroundTime+0x12c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d802      	bhi.n	8006bb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	e041      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a2f      	ldr	r2, [pc, #188]	; (8006c78 <USB_SetTurnaroundTime+0x12c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d906      	bls.n	8006bce <USB_SetTurnaroundTime+0x82>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4a2e      	ldr	r2, [pc, #184]	; (8006c7c <USB_SetTurnaroundTime+0x130>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d802      	bhi.n	8006bce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006bc8:	230b      	movs	r3, #11
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e036      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <USB_SetTurnaroundTime+0x130>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d906      	bls.n	8006be4 <USB_SetTurnaroundTime+0x98>
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	4a29      	ldr	r2, [pc, #164]	; (8006c80 <USB_SetTurnaroundTime+0x134>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d802      	bhi.n	8006be4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bde:	230a      	movs	r3, #10
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e02b      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4a26      	ldr	r2, [pc, #152]	; (8006c80 <USB_SetTurnaroundTime+0x134>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d906      	bls.n	8006bfa <USB_SetTurnaroundTime+0xae>
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <USB_SetTurnaroundTime+0x138>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d202      	bcs.n	8006bfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bf4:	2309      	movs	r3, #9
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e020      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <USB_SetTurnaroundTime+0x138>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d306      	bcc.n	8006c10 <USB_SetTurnaroundTime+0xc4>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <USB_SetTurnaroundTime+0x13c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d802      	bhi.n	8006c10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e015      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4a1d      	ldr	r2, [pc, #116]	; (8006c88 <USB_SetTurnaroundTime+0x13c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d906      	bls.n	8006c26 <USB_SetTurnaroundTime+0xda>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4a1c      	ldr	r2, [pc, #112]	; (8006c8c <USB_SetTurnaroundTime+0x140>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d202      	bcs.n	8006c26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c20:	2307      	movs	r3, #7
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e00a      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c26:	2306      	movs	r3, #6
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	e007      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c32:	2309      	movs	r3, #9
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	e001      	b.n	8006c3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c38:	2309      	movs	r3, #9
 8006c3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	029b      	lsls	r3, r3, #10
 8006c50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c54:	431a      	orrs	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	00d8acbf 	.word	0x00d8acbf
 8006c6c:	00e4e1c0 	.word	0x00e4e1c0
 8006c70:	00f42400 	.word	0x00f42400
 8006c74:	01067380 	.word	0x01067380
 8006c78:	011a499f 	.word	0x011a499f
 8006c7c:	01312cff 	.word	0x01312cff
 8006c80:	014ca43f 	.word	0x014ca43f
 8006c84:	016e3600 	.word	0x016e3600
 8006c88:	01a6ab1f 	.word	0x01a6ab1f
 8006c8c:	01e84800 	.word	0x01e84800

08006c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f043 0201 	orr.w	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f023 0201 	bic.w	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d115      	bne.n	8006d22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d02:	2001      	movs	r0, #1
 8006d04:	f7fa fb98 	bl	8001438 <HAL_Delay>
      ms++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fa45 	bl	800819e <USB_GetMode>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d01e      	beq.n	8006d58 <USB_SetCurrentMode+0x84>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b31      	cmp	r3, #49	; 0x31
 8006d1e:	d9f0      	bls.n	8006d02 <USB_SetCurrentMode+0x2e>
 8006d20:	e01a      	b.n	8006d58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d115      	bne.n	8006d54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d34:	2001      	movs	r0, #1
 8006d36:	f7fa fb7f 	bl	8001438 <HAL_Delay>
      ms++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fa2c 	bl	800819e <USB_GetMode>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <USB_SetCurrentMode+0x84>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b31      	cmp	r3, #49	; 0x31
 8006d50:	d9f0      	bls.n	8006d34 <USB_SetCurrentMode+0x60>
 8006d52:	e001      	b.n	8006d58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e005      	b.n	8006d64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b32      	cmp	r3, #50	; 0x32
 8006d5c:	d101      	bne.n	8006d62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	e009      	b.n	8006da0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3340      	adds	r3, #64	; 0x40
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b0e      	cmp	r3, #14
 8006da4:	d9f2      	bls.n	8006d8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d11c      	bne.n	8006de6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dba:	f043 0302 	orr.w	r3, r3, #2
 8006dbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
 8006de4:	e00b      	b.n	8006dfe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e04:	461a      	mov	r2, r3
 8006e06:	2300      	movs	r3, #0
 8006e08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e10:	4619      	mov	r1, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e18:	461a      	mov	r2, r3
 8006e1a:	680b      	ldr	r3, [r1, #0]
 8006e1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d10c      	bne.n	8006e3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f965 	bl	80070fc <USB_SetDevSpeed>
 8006e32:	e008      	b.n	8006e46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e34:	2101      	movs	r1, #1
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f960 	bl	80070fc <USB_SetDevSpeed>
 8006e3c:	e003      	b.n	8006e46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e3e:	2103      	movs	r1, #3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f95b 	bl	80070fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e46:	2110      	movs	r1, #16
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f8f3 	bl	8007034 <USB_FlushTxFifo>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f91f 	bl	800709c <USB_FlushRxFifo>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6e:	461a      	mov	r2, r3
 8006e70:	2300      	movs	r3, #0
 8006e72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	461a      	mov	r2, r3
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	e043      	b.n	8006f1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea8:	d118      	bne.n	8006edc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	e013      	b.n	8006eee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e008      	b.n	8006eee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2300      	movs	r3, #0
 8006eec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	461a      	mov	r2, r3
 8006efc:	2300      	movs	r3, #0
 8006efe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	3301      	adds	r3, #1
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d3b7      	bcc.n	8006e92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f22:	2300      	movs	r3, #0
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	e043      	b.n	8006fb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f3e:	d118      	bne.n	8006f72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f52:	461a      	mov	r2, r3
 8006f54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e013      	b.n	8006f84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	e008      	b.n	8006f84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2300      	movs	r3, #0
 8006f82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f90:	461a      	mov	r2, r3
 8006f92:	2300      	movs	r3, #0
 8006f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	3301      	adds	r3, #1
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d3b7      	bcc.n	8006f28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	f043 0210 	orr.w	r2, r3, #16
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <USB_DevInit+0x2c4>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f043 0208 	orr.w	r2, r3, #8
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800700a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700c:	2b01      	cmp	r3, #1
 800700e:	d107      	bne.n	8007020 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007018:	f043 0304 	orr.w	r3, r3, #4
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800702c:	b004      	add	sp, #16
 800702e:	4770      	bx	lr
 8007030:	803c3800 	.word	0x803c3800

08007034 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4a13      	ldr	r2, [pc, #76]	; (8007098 <USB_FlushTxFifo+0x64>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d901      	bls.n	8007054 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e01b      	b.n	800708c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	daf2      	bge.n	8007042 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	019b      	lsls	r3, r3, #6
 8007064:	f043 0220 	orr.w	r2, r3, #32
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4a08      	ldr	r2, [pc, #32]	; (8007098 <USB_FlushTxFifo+0x64>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d901      	bls.n	800707e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e006      	b.n	800708c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b20      	cmp	r3, #32
 8007088:	d0f0      	beq.n	800706c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	00030d40 	.word	0x00030d40

0800709c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4a11      	ldr	r2, [pc, #68]	; (80070f8 <USB_FlushRxFifo+0x5c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e018      	b.n	80070ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	daf2      	bge.n	80070a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2210      	movs	r2, #16
 80070ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <USB_FlushRxFifo+0x5c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d901      	bls.n	80070de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e006      	b.n	80070ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d0f0      	beq.n	80070cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	00030d40 	.word	0x00030d40

080070fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800711c:	4313      	orrs	r3, r2
 800711e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800712e:	b480      	push	{r7}
 8007130:	b087      	sub	sp, #28
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0306 	and.w	r3, r3, #6
 8007146:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]
 8007152:	e00a      	b.n	800716a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d002      	beq.n	8007160 <USB_GetDevSpeed+0x32>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b06      	cmp	r3, #6
 800715e:	d102      	bne.n	8007166 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007160:	2302      	movs	r3, #2
 8007162:	75fb      	strb	r3, [r7, #23]
 8007164:	e001      	b.n	800716a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007166:	230f      	movs	r3, #15
 8007168:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
}
 800716c:	4618      	mov	r0, r3
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d13a      	bne.n	800720a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 030f 	and.w	r3, r3, #15
 80071a4:	2101      	movs	r1, #1
 80071a6:	fa01 f303 	lsl.w	r3, r1, r3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	68f9      	ldr	r1, [r7, #12]
 80071ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b2:	4313      	orrs	r3, r2
 80071b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d155      	bne.n	8007278 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	791b      	ldrb	r3, [r3, #4]
 80071e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	059b      	lsls	r3, r3, #22
 80071ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071f0:	4313      	orrs	r3, r2
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	e036      	b.n	8007278 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007210:	69da      	ldr	r2, [r3, #28]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	2101      	movs	r1, #1
 800721c:	fa01 f303 	lsl.w	r3, r1, r3
 8007220:	041b      	lsls	r3, r3, #16
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007228:	4313      	orrs	r3, r2
 800722a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d11a      	bne.n	8007278 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	791b      	ldrb	r3, [r3, #4]
 800725c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800725e:	430b      	orrs	r3, r1
 8007260:	4313      	orrs	r3, r2
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	0151      	lsls	r1, r2, #5
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	440a      	add	r2, r1
 800726a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800726e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007276:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d161      	bne.n	8007368 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ba:	d11f      	bne.n	80072fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	0151      	lsls	r1, r2, #5
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	440a      	add	r2, r1
 80072d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	f003 030f 	and.w	r3, r3, #15
 800730c:	2101      	movs	r1, #1
 800730e:	fa01 f303 	lsl.w	r3, r1, r3
 8007312:	b29b      	uxth	r3, r3
 8007314:	43db      	mvns	r3, r3
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800731c:	4013      	ands	r3, r2
 800731e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	2101      	movs	r1, #1
 8007332:	fa01 f303 	lsl.w	r3, r1, r3
 8007336:	b29b      	uxth	r3, r3
 8007338:	43db      	mvns	r3, r3
 800733a:	68f9      	ldr	r1, [r7, #12]
 800733c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007340:	4013      	ands	r3, r2
 8007342:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	0159      	lsls	r1, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	440b      	add	r3, r1
 800735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735e:	4619      	mov	r1, r3
 8007360:	4b35      	ldr	r3, [pc, #212]	; (8007438 <USB_DeactivateEndpoint+0x1b0>)
 8007362:	4013      	ands	r3, r2
 8007364:	600b      	str	r3, [r1, #0]
 8007366:	e060      	b.n	800742a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800737a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800737e:	d11f      	bne.n	80073c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	440a      	add	r2, r1
 8007396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800739a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800739e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	2101      	movs	r1, #1
 80073d2:	fa01 f303 	lsl.w	r3, r1, r3
 80073d6:	041b      	lsls	r3, r3, #16
 80073d8:	43db      	mvns	r3, r3
 80073da:	68f9      	ldr	r1, [r7, #12]
 80073dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073e0:	4013      	ands	r3, r2
 80073e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	2101      	movs	r1, #1
 80073f6:	fa01 f303 	lsl.w	r3, r1, r3
 80073fa:	041b      	lsls	r3, r3, #16
 80073fc:	43db      	mvns	r3, r3
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007404:	4013      	ands	r3, r2
 8007406:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	0159      	lsls	r1, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	440b      	add	r3, r1
 800741e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007422:	4619      	mov	r1, r3
 8007424:	4b05      	ldr	r3, [pc, #20]	; (800743c <USB_DeactivateEndpoint+0x1b4>)
 8007426:	4013      	ands	r3, r2
 8007428:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	ec337800 	.word	0xec337800
 800743c:	eff37800 	.word	0xeff37800

08007440 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af02      	add	r7, sp, #8
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	785b      	ldrb	r3, [r3, #1]
 800745c:	2b01      	cmp	r3, #1
 800745e:	f040 815c 	bne.w	800771a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d132      	bne.n	80074d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	440a      	add	r2, r1
 8007480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007484:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007488:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800748c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c8:	0cdb      	lsrs	r3, r3, #19
 80074ca:	04db      	lsls	r3, r3, #19
 80074cc:	6113      	str	r3, [r2, #16]
 80074ce:	e074      	b.n	80075ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ea:	0cdb      	lsrs	r3, r3, #19
 80074ec:	04db      	lsls	r3, r3, #19
 80074ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800750e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6999      	ldr	r1, [r3, #24]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	440b      	add	r3, r1
 800752c:	1e59      	subs	r1, r3, #1
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	fbb1 f3f3 	udiv	r3, r1, r3
 8007536:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007538:	4b9d      	ldr	r3, [pc, #628]	; (80077b0 <USB_EPStartXfer+0x370>)
 800753a:	400b      	ands	r3, r1
 800753c:	69b9      	ldr	r1, [r7, #24]
 800753e:	0148      	lsls	r0, r1, #5
 8007540:	69f9      	ldr	r1, [r7, #28]
 8007542:	4401      	add	r1, r0
 8007544:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007548:	4313      	orrs	r3, r2
 800754a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007562:	69b9      	ldr	r1, [r7, #24]
 8007564:	0148      	lsls	r0, r1, #5
 8007566:	69f9      	ldr	r1, [r7, #28]
 8007568:	4401      	add	r1, r0
 800756a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800756e:	4313      	orrs	r3, r2
 8007570:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	791b      	ldrb	r3, [r3, #4]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d11f      	bne.n	80075ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	0151      	lsls	r1, r2, #5
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	440a      	add	r2, r1
 8007590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007594:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007598:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d14b      	bne.n	8007658 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d009      	beq.n	80075dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	461a      	mov	r2, r3
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	791b      	ldrb	r3, [r3, #4]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d128      	bne.n	8007636 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d110      	bne.n	8007616 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	440a      	add	r2, r1
 800760a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	e00f      	b.n	8007636 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	0151      	lsls	r1, r2, #5
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	440a      	add	r2, r1
 800762c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007634:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	440a      	add	r2, r1
 800764c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007650:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	e133      	b.n	80078c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	440a      	add	r2, r1
 800766e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007672:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007676:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	791b      	ldrb	r3, [r3, #4]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d015      	beq.n	80076ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 811b 	beq.w	80078c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	2101      	movs	r1, #1
 800769c:	fa01 f303 	lsl.w	r3, r1, r3
 80076a0:	69f9      	ldr	r1, [r7, #28]
 80076a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a6:	4313      	orrs	r3, r2
 80076a8:	634b      	str	r3, [r1, #52]	; 0x34
 80076aa:	e109      	b.n	80078c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d110      	bne.n	80076de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	e00f      	b.n	80076fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6919      	ldr	r1, [r3, #16]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	b298      	uxth	r0, r3
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	4603      	mov	r3, r0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fade 	bl	8007cd4 <USB_WritePacket>
 8007718:	e0d2      	b.n	80078c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007734:	0cdb      	lsrs	r3, r3, #19
 8007736:	04db      	lsls	r3, r3, #19
 8007738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007754:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007758:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800775c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d126      	bne.n	80077b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800777c:	69b9      	ldr	r1, [r7, #24]
 800777e:	0148      	lsls	r0, r1, #5
 8007780:	69f9      	ldr	r1, [r7, #28]
 8007782:	4401      	add	r1, r0
 8007784:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007788:	4313      	orrs	r3, r2
 800778a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077aa:	6113      	str	r3, [r2, #16]
 80077ac:	e03a      	b.n	8007824 <USB_EPStartXfer+0x3e4>
 80077ae:	bf00      	nop
 80077b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	699a      	ldr	r2, [r3, #24]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	1e5a      	subs	r2, r3, #1
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	8afa      	ldrh	r2, [r7, #22]
 80077d0:	fb03 f202 	mul.w	r2, r3, r2
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	8afb      	ldrh	r3, [r7, #22]
 80077e8:	04d9      	lsls	r1, r3, #19
 80077ea:	4b38      	ldr	r3, [pc, #224]	; (80078cc <USB_EPStartXfer+0x48c>)
 80077ec:	400b      	ands	r3, r1
 80077ee:	69b9      	ldr	r1, [r7, #24]
 80077f0:	0148      	lsls	r0, r1, #5
 80077f2:	69f9      	ldr	r1, [r7, #28]
 80077f4:	4401      	add	r1, r0
 80077f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077fa:	4313      	orrs	r3, r2
 80077fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007814:	69b9      	ldr	r1, [r7, #24]
 8007816:	0148      	lsls	r0, r1, #5
 8007818:	69f9      	ldr	r1, [r7, #28]
 800781a:	4401      	add	r1, r0
 800781c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007820:	4313      	orrs	r3, r2
 8007822:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d10d      	bne.n	8007846 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6919      	ldr	r1, [r3, #16]
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007842:	460a      	mov	r2, r1
 8007844:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	791b      	ldrb	r3, [r3, #4]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d128      	bne.n	80078a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785a:	2b00      	cmp	r3, #0
 800785c:	d110      	bne.n	8007880 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	0151      	lsls	r1, r2, #5
 8007870:	69fa      	ldr	r2, [r7, #28]
 8007872:	440a      	add	r2, r1
 8007874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	e00f      	b.n	80078a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	440a      	add	r2, r1
 8007896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800789a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800789e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	1ff80000 	.word	0x1ff80000

080078d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4613      	mov	r3, r2
 80078dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	f040 80ce 	bne.w	8007a8e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d132      	bne.n	8007960 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	0151      	lsls	r1, r2, #5
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	440a      	add	r2, r1
 8007910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007914:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007918:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800791c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800793c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007958:	0cdb      	lsrs	r3, r3, #19
 800795a:	04db      	lsls	r3, r3, #19
 800795c:	6113      	str	r3, [r2, #16]
 800795e:	e04e      	b.n	80079fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800797a:	0cdb      	lsrs	r3, r3, #19
 800797c:	04db      	lsls	r3, r3, #19
 800797e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800799e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	699a      	ldr	r2, [r3, #24]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d903      	bls.n	80079b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	691a      	ldr	r2, [r3, #16]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ee:	6939      	ldr	r1, [r7, #16]
 80079f0:	0148      	lsls	r0, r1, #5
 80079f2:	6979      	ldr	r1, [r7, #20]
 80079f4:	4401      	add	r1, r0
 80079f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079fa:	4313      	orrs	r3, r2
 80079fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d11e      	bne.n	8007a42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d009      	beq.n	8007a20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	e097      	b.n	8007b72 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8083 	beq.w	8007b72 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a82:	6979      	ldr	r1, [r7, #20]
 8007a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	634b      	str	r3, [r1, #52]	; 0x34
 8007a8c:	e071      	b.n	8007b72 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa8:	0cdb      	lsrs	r3, r3, #19
 8007aaa:	04db      	lsls	r3, r3, #19
 8007aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007acc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ad0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b20:	6939      	ldr	r1, [r7, #16]
 8007b22:	0148      	lsls	r0, r1, #5
 8007b24:	6979      	ldr	r1, [r7, #20]
 8007b26:	4401      	add	r1, r0
 8007b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d10d      	bne.n	8007b52 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6919      	ldr	r1, [r3, #16]
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4e:	460a      	mov	r2, r1
 8007b50:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	0151      	lsls	r1, r2, #5
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	440a      	add	r2, r1
 8007b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d14a      	bne.n	8007c34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb6:	f040 8086 	bne.w	8007cc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	7812      	ldrb	r2, [r2, #0]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bdc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	7812      	ldrb	r2, [r2, #0]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d902      	bls.n	8007c18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	75fb      	strb	r3, [r7, #23]
          break;
 8007c16:	e056      	b.n	8007cc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c30:	d0e7      	beq.n	8007c02 <USB_EPStopXfer+0x82>
 8007c32:	e048      	b.n	8007cc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c4c:	d13b      	bne.n	8007cc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	7812      	ldrb	r2, [r2, #0]
 8007c62:	0151      	lsls	r1, r2, #5
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	440a      	add	r2, r1
 8007c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	7812      	ldrb	r2, [r2, #0]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d902      	bls.n	8007cac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8007caa:	e00c      	b.n	8007cc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cc4:	d0e7      	beq.n	8007c96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b089      	sub	sp, #36	; 0x24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	71fb      	strb	r3, [r7, #7]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007cf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d123      	bne.n	8007d42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007cfa:	88bb      	ldrh	r3, [r7, #4]
 8007cfc:	3303      	adds	r3, #3
 8007cfe:	089b      	lsrs	r3, r3, #2
 8007d00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d02:	2300      	movs	r3, #0
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	e018      	b.n	8007d3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	031a      	lsls	r2, r3, #12
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d14:	461a      	mov	r2, r3
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	3301      	adds	r3, #1
 8007d26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	3301      	adds	r3, #1
 8007d32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d3e2      	bcc.n	8007d08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3724      	adds	r7, #36	; 0x24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b08b      	sub	sp, #44	; 0x2c
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	089b      	lsrs	r3, r3, #2
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	f003 0303 	and.w	r3, r3, #3
 8007d74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d76:	2300      	movs	r3, #0
 8007d78:	623b      	str	r3, [r7, #32]
 8007d7a:	e014      	b.n	8007da6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	3301      	adds	r3, #1
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	3301      	adds	r3, #1
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	3301      	adds	r3, #1
 8007da4:	623b      	str	r3, [r7, #32]
 8007da6:	6a3a      	ldr	r2, [r7, #32]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d3e6      	bcc.n	8007d7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dae:	8bfb      	ldrh	r3, [r7, #30]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01e      	beq.n	8007df2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f107 0310 	add.w	r3, r7, #16
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	701a      	strb	r2, [r3, #0]
      i++;
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	623b      	str	r3, [r7, #32]
      pDest++;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	3301      	adds	r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007de6:	8bfb      	ldrh	r3, [r7, #30]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007dec:	8bfb      	ldrh	r3, [r7, #30]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1ea      	bne.n	8007dc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	372c      	adds	r7, #44	; 0x2c
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d12c      	bne.n	8007e76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	db12      	blt.n	8007e54 <USB_EPSetStall+0x54>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00f      	beq.n	8007e54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	0151      	lsls	r1, r2, #5
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	440a      	add	r2, r1
 8007e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	e02b      	b.n	8007ece <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	db12      	blt.n	8007eae <USB_EPSetStall+0xae>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00f      	beq.n	8007eae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ea8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007eac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	0151      	lsls	r1, r2, #5
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	440a      	add	r2, r1
 8007ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ecc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d128      	bne.n	8007f4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	791b      	ldrb	r3, [r3, #4]
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d003      	beq.n	8007f28 <USB_EPClearStall+0x4c>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	791b      	ldrb	r3, [r3, #4]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d138      	bne.n	8007f9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	e027      	b.n	8007f9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	791b      	ldrb	r3, [r3, #4]
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d003      	beq.n	8007f7a <USB_EPClearStall+0x9e>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	791b      	ldrb	r3, [r3, #4]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d10f      	bne.n	8007f9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007fdc:	68f9      	ldr	r1, [r7, #12]
 8007fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800800e:	f023 0303 	bic.w	r3, r3, #3
 8008012:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008022:	f023 0302 	bic.w	r3, r3, #2
 8008026:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008050:	f023 0303 	bic.w	r3, r3, #3
 8008054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008064:	f043 0302 	orr.w	r3, r3, #2
 8008068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4013      	ands	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008090:	68fb      	ldr	r3, [r7, #12]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800809e:	b480      	push	{r7}
 80080a0:	b085      	sub	sp, #20
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	4013      	ands	r3, r2
 80080c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	0c1b      	lsrs	r3, r3, #16
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b085      	sub	sp, #20
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	4013      	ands	r3, r2
 80080f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	b29b      	uxth	r3, r3
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008106:	b480      	push	{r7}
 8008108:	b085      	sub	sp, #20
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	4013      	ands	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008134:	68bb      	ldr	r3, [r7, #8]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008142:	b480      	push	{r7}
 8008144:	b087      	sub	sp, #28
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008164:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008166:	78fb      	ldrb	r3, [r7, #3]
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	fa22 f303 	lsr.w	r3, r2, r3
 8008172:	01db      	lsls	r3, r3, #7
 8008174:	b2db      	uxtb	r3, r3
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4013      	ands	r3, r2
 800818e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008190:	68bb      	ldr	r3, [r7, #8]
}
 8008192:	4618      	mov	r0, r3
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f003 0301 	and.w	r3, r3, #1
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081d8:	f023 0307 	bic.w	r3, r3, #7
 80081dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	460b      	mov	r3, r1
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	333c      	adds	r3, #60	; 0x3c
 8008216:	3304      	adds	r3, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	4a26      	ldr	r2, [pc, #152]	; (80082b8 <USB_EP0_OutStart+0xb8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d90a      	bls.n	800823a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008234:	d101      	bne.n	800823a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	e037      	b.n	80082aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008240:	461a      	mov	r2, r3
 8008242:	2300      	movs	r3, #0
 8008244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008268:	f043 0318 	orr.w	r3, r3, #24
 800826c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800827c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008280:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008282:	7afb      	ldrb	r3, [r7, #11]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d10f      	bne.n	80082a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	461a      	mov	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80082a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	4f54300a 	.word	0x4f54300a

080082bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3301      	adds	r3, #1
 80082cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a13      	ldr	r2, [pc, #76]	; (8008320 <USB_CoreReset+0x64>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d901      	bls.n	80082da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e01b      	b.n	8008312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	daf2      	bge.n	80082c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f043 0201 	orr.w	r2, r3, #1
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4a09      	ldr	r2, [pc, #36]	; (8008320 <USB_CoreReset+0x64>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d901      	bls.n	8008304 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e006      	b.n	8008312 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b01      	cmp	r3, #1
 800830e:	d0f0      	beq.n	80082f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	00030d40 	.word	0x00030d40

08008324 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fcb2 	bl	8009c9e <VL53L0X_get_offset_calibration_data_micro_meter>
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800833e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800834c:	b5b0      	push	{r4, r5, r7, lr}
 800834e:	b096      	sub	sp, #88	; 0x58
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008354:	2300      	movs	r3, #0
 8008356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800835a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800835e:	2b00      	cmp	r3, #0
 8008360:	d107      	bne.n	8008372 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8008362:	2200      	movs	r2, #0
 8008364:	2188      	movs	r1, #136	; 0x88
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f004 feaa 	bl	800d0c0 <VL53L0X_WrByte>
 800836c:	4603      	mov	r3, r0
 800836e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008380:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800838a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a9e      	ldr	r2, [pc, #632]	; (800860c <VL53L0X_DataInit+0x2c0>)
 8008392:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a9d      	ldr	r2, [pc, #628]	; (8008610 <VL53L0X_DataInit+0x2c4>)
 800839a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80083a4:	f107 0310 	add.w	r3, r7, #16
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fac2 	bl	8008934 <VL53L0X_GetDeviceParameters>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80083b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d112      	bne.n	80083e4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80083be:	2300      	movs	r3, #0
 80083c0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80083c2:	2300      	movs	r3, #0
 80083c4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f103 0410 	add.w	r4, r3, #16
 80083cc:	f107 0510 	add.w	r5, r7, #16
 80083d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80083e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2264      	movs	r2, #100	; 0x64
 80083e8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f44f 7261 	mov.w	r2, #900	; 0x384
 80083f2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80083fc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008406:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008412:	2201      	movs	r2, #1
 8008414:	2180      	movs	r1, #128	; 0x80
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f004 fe52 	bl	800d0c0 <VL53L0X_WrByte>
 800841c:	4603      	mov	r3, r0
 800841e:	461a      	mov	r2, r3
 8008420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008424:	4313      	orrs	r3, r2
 8008426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800842a:	2201      	movs	r2, #1
 800842c:	21ff      	movs	r1, #255	; 0xff
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f004 fe46 	bl	800d0c0 <VL53L0X_WrByte>
 8008434:	4603      	mov	r3, r0
 8008436:	461a      	mov	r2, r3
 8008438:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800843c:	4313      	orrs	r3, r2
 800843e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008442:	2200      	movs	r2, #0
 8008444:	2100      	movs	r1, #0
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f004 fe3a 	bl	800d0c0 <VL53L0X_WrByte>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008454:	4313      	orrs	r3, r2
 8008456:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800845a:	f107 030f 	add.w	r3, r7, #15
 800845e:	461a      	mov	r2, r3
 8008460:	2191      	movs	r1, #145	; 0x91
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f004 feae 	bl	800d1c4 <VL53L0X_RdByte>
 8008468:	4603      	mov	r3, r0
 800846a:	461a      	mov	r2, r3
 800846c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008470:	4313      	orrs	r3, r2
 8008472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8008476:	7bfa      	ldrb	r2, [r7, #15]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800847e:	2201      	movs	r2, #1
 8008480:	2100      	movs	r1, #0
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f004 fe1c 	bl	800d0c0 <VL53L0X_WrByte>
 8008488:	4603      	mov	r3, r0
 800848a:	461a      	mov	r2, r3
 800848c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008490:	4313      	orrs	r3, r2
 8008492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008496:	2200      	movs	r2, #0
 8008498:	21ff      	movs	r1, #255	; 0xff
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f004 fe10 	bl	800d0c0 <VL53L0X_WrByte>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
 80084a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084a8:	4313      	orrs	r3, r2
 80084aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80084ae:	2200      	movs	r2, #0
 80084b0:	2180      	movs	r1, #128	; 0x80
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f004 fe04 	bl	800d0c0 <VL53L0X_WrByte>
 80084b8:	4603      	mov	r3, r0
 80084ba:	461a      	mov	r2, r3
 80084bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80084c6:	2300      	movs	r3, #0
 80084c8:	653b      	str	r3, [r7, #80]	; 0x50
 80084ca:	e014      	b.n	80084f6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80084cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d114      	bne.n	80084fe <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80084d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2201      	movs	r2, #1
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fd35 	bl	8008f4c <VL53L0X_SetLimitCheckEnable>
 80084e2:	4603      	mov	r3, r0
 80084e4:	461a      	mov	r2, r3
 80084e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80084f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f2:	3301      	adds	r3, #1
 80084f4:	653b      	str	r3, [r7, #80]	; 0x50
 80084f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f8:	2b05      	cmp	r3, #5
 80084fa:	dde7      	ble.n	80084cc <VL53L0X_DataInit+0x180>
 80084fc:	e000      	b.n	8008500 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80084fe:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008500:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008504:	2b00      	cmp	r3, #0
 8008506:	d107      	bne.n	8008518 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008508:	2200      	movs	r2, #0
 800850a:	2102      	movs	r1, #2
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fd1d 	bl	8008f4c <VL53L0X_SetLimitCheckEnable>
 8008512:	4603      	mov	r3, r0
 8008514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008518:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800851c:	2b00      	cmp	r3, #0
 800851e:	d107      	bne.n	8008530 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008520:	2200      	movs	r2, #0
 8008522:	2103      	movs	r1, #3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fd11 	bl	8008f4c <VL53L0X_SetLimitCheckEnable>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008530:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008534:	2b00      	cmp	r3, #0
 8008536:	d107      	bne.n	8008548 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008538:	2200      	movs	r2, #0
 800853a:	2104      	movs	r1, #4
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fd05 	bl	8008f4c <VL53L0X_SetLimitCheckEnable>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008548:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800854c:	2b00      	cmp	r3, #0
 800854e:	d107      	bne.n	8008560 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008550:	2200      	movs	r2, #0
 8008552:	2105      	movs	r1, #5
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fcf9 	bl	8008f4c <VL53L0X_SetLimitCheckEnable>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008560:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008564:	2b00      	cmp	r3, #0
 8008566:	d108      	bne.n	800857a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008568:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800856c:	2100      	movs	r1, #0
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fd9c 	bl	80090ac <VL53L0X_SetLimitCheckValue>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800857a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800857e:	2b00      	cmp	r3, #0
 8008580:	d108      	bne.n	8008594 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008586:	2101      	movs	r1, #1
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fd8f 	bl	80090ac <VL53L0X_SetLimitCheckValue>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008594:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008598:	2b00      	cmp	r3, #0
 800859a:	d108      	bne.n	80085ae <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800859c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80085a0:	2102      	movs	r1, #2
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fd82 	bl	80090ac <VL53L0X_SetLimitCheckValue>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80085ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d107      	bne.n	80085c6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80085b6:	2200      	movs	r2, #0
 80085b8:	2103      	movs	r1, #3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fd76 	bl	80090ac <VL53L0X_SetLimitCheckValue>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80085c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10f      	bne.n	80085ee <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	22ff      	movs	r2, #255	; 0xff
 80085d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80085d6:	22ff      	movs	r2, #255	; 0xff
 80085d8:	2101      	movs	r1, #1
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f004 fd70 	bl	800d0c0 <VL53L0X_WrByte>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80085ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d103      	bne.n	80085fe <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80085fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008602:	4618      	mov	r0, r3
 8008604:	3758      	adds	r7, #88	; 0x58
 8008606:	46bd      	mov	sp, r7
 8008608:	bdb0      	pop	{r4, r5, r7, pc}
 800860a:	bf00      	nop
 800860c:	00016b85 	.word	0x00016b85
 8008610:	000970a4 	.word	0x000970a4

08008614 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8008614:	b5b0      	push	{r4, r5, r7, lr}
 8008616:	b09e      	sub	sp, #120	; 0x78
 8008618:	af02      	add	r7, sp, #8
 800861a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800861c:	2300      	movs	r3, #0
 800861e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008622:	f107 031c 	add.w	r3, r7, #28
 8008626:	2240      	movs	r2, #64	; 0x40
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f007 fba0 	bl	800fd70 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008650:	2101      	movs	r1, #1
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f002 fa79 	bl	800ab4a <VL53L0X_get_info_from_device>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8008664:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800866c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8008670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008674:	2b01      	cmp	r3, #1
 8008676:	d80d      	bhi.n	8008694 <VL53L0X_StaticInit+0x80>
 8008678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800867c:	2b01      	cmp	r3, #1
 800867e:	d102      	bne.n	8008686 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8008680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008682:	2b20      	cmp	r3, #32
 8008684:	d806      	bhi.n	8008694 <VL53L0X_StaticInit+0x80>
 8008686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10e      	bne.n	80086ac <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800868e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008690:	2b0c      	cmp	r3, #12
 8008692:	d90b      	bls.n	80086ac <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8008694:	f107 0218 	add.w	r2, r7, #24
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 fcf8 	bl	800a094 <VL53L0X_perform_ref_spad_management>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80086aa:	e009      	b.n	80086c0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80086ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086b0:	461a      	mov	r2, r3
 80086b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fef9 	bl	800a4ac <VL53L0X_set_reference_spads>
 80086ba:	4603      	mov	r3, r0
 80086bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80086c0:	4b94      	ldr	r3, [pc, #592]	; (8008914 <VL53L0X_StaticInit+0x300>)
 80086c2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80086c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10f      	bne.n	80086ec <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80086d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80086d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80086e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80086e6:	e001      	b.n	80086ec <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80086e8:	4b8a      	ldr	r3, [pc, #552]	; (8008914 <VL53L0X_StaticInit+0x300>)
 80086ea:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80086ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d106      	bne.n	8008702 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80086f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f003 fdcc 	bl	800c294 <VL53L0X_load_tuning_settings>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8008702:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800870a:	2300      	movs	r3, #0
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	2304      	movs	r3, #4
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 f8f1 	bl	80098fc <VL53L0X_SetGpioConfig>
 800871a:	4603      	mov	r3, r0
 800871c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008720:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008724:	2b00      	cmp	r3, #0
 8008726:	d121      	bne.n	800876c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008728:	2201      	movs	r2, #1
 800872a:	21ff      	movs	r1, #255	; 0xff
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f004 fcc7 	bl	800d0c0 <VL53L0X_WrByte>
 8008732:	4603      	mov	r3, r0
 8008734:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008738:	f107 031a 	add.w	r3, r7, #26
 800873c:	461a      	mov	r2, r3
 800873e:	2184      	movs	r1, #132	; 0x84
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f004 fd69 	bl	800d218 <VL53L0X_RdWord>
 8008746:	4603      	mov	r3, r0
 8008748:	461a      	mov	r2, r3
 800874a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800874e:	4313      	orrs	r3, r2
 8008750:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008754:	2200      	movs	r2, #0
 8008756:	21ff      	movs	r1, #255	; 0xff
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f004 fcb1 	bl	800d0c0 <VL53L0X_WrByte>
 800875e:	4603      	mov	r3, r0
 8008760:	461a      	mov	r2, r3
 8008762:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008766:	4313      	orrs	r3, r2
 8008768:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800876c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008770:	2b00      	cmp	r3, #0
 8008772:	d105      	bne.n	8008780 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8008774:	8b7b      	ldrh	r3, [r7, #26]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	461a      	mov	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8008780:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008784:	2b00      	cmp	r3, #0
 8008786:	d108      	bne.n	800879a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008788:	f107 031c 	add.w	r3, r7, #28
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f8d0 	bl	8008934 <VL53L0X_GetDeviceParameters>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800879a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d110      	bne.n	80087c4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80087a2:	f107 0319 	add.w	r3, r7, #25
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f992 	bl	8008ad2 <VL53L0X_GetFractionEnable>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80087b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80087bc:	7e7a      	ldrb	r2, [r7, #25]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80087c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10e      	bne.n	80087ea <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f103 0410 	add.w	r4, r3, #16
 80087d2:	f107 051c 	add.w	r5, r7, #28
 80087d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80087ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d111      	bne.n	8008816 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80087f2:	f107 0319 	add.w	r3, r7, #25
 80087f6:	461a      	mov	r2, r3
 80087f8:	2101      	movs	r1, #1
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f004 fce2 	bl	800d1c4 <VL53L0X_RdByte>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8008806:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800880e:	7e7a      	ldrb	r2, [r7, #25]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8008816:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800881a:	2b00      	cmp	r3, #0
 800881c:	d107      	bne.n	800882e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800881e:	2200      	movs	r2, #0
 8008820:	2100      	movs	r1, #0
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f9ca 	bl	8008bbc <VL53L0X_SetSequenceStepEnable>
 8008828:	4603      	mov	r3, r0
 800882a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800882e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008832:	2b00      	cmp	r3, #0
 8008834:	d107      	bne.n	8008846 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008836:	2200      	movs	r2, #0
 8008838:	2102      	movs	r1, #2
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f9be 	bl	8008bbc <VL53L0X_SetSequenceStepEnable>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8008846:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800884a:	2b00      	cmp	r3, #0
 800884c:	d103      	bne.n	8008856 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2203      	movs	r2, #3
 8008852:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008856:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800885e:	f107 0313 	add.w	r3, r7, #19
 8008862:	461a      	mov	r2, r3
 8008864:	2100      	movs	r1, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f990 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008872:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008876:	2b00      	cmp	r3, #0
 8008878:	d103      	bne.n	8008882 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800887a:	7cfa      	ldrb	r2, [r7, #19]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008882:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800888a:	f107 0313 	add.w	r3, r7, #19
 800888e:	461a      	mov	r2, r3
 8008890:	2101      	movs	r1, #1
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f97a 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800889e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d103      	bne.n	80088ae <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80088a6:	7cfa      	ldrb	r2, [r7, #19]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80088ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d109      	bne.n	80088ca <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80088b6:	f107 030c 	add.w	r3, r7, #12
 80088ba:	461a      	mov	r2, r3
 80088bc:	2103      	movs	r1, #3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f002 fec4 	bl	800b64c <get_sequence_step_timeout>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80088ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80088da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80088e2:	f107 030c 	add.w	r3, r7, #12
 80088e6:	461a      	mov	r2, r3
 80088e8:	2104      	movs	r1, #4
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f002 feae 	bl	800b64c <get_sequence_step_timeout>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80088f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d103      	bne.n	8008906 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008906:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800890a:	4618      	mov	r0, r3
 800890c:	3770      	adds	r7, #112	; 0x70
 800890e:	46bd      	mov	sp, r7
 8008910:	bdb0      	pop	{r4, r5, r7, pc}
 8008912:	bf00      	nop
 8008914:	200001cc 	.word	0x200001cc

08008918 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8008920:	239d      	movs	r3, #157	; 0x9d
 8008922:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8008924:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f8b0 	bl	8008aac <VL53L0X_GetDeviceMode>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d107      	bne.n	8008968 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa78 	bl	8008e54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2200      	movs	r2, #0
 8008974:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8008976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d107      	bne.n	800898e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	3310      	adds	r3, #16
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 faae 	bl	8008ee6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800898a:	4603      	mov	r3, r0
 800898c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800898e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d107      	bne.n	80089a6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	3314      	adds	r3, #20
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff fcc1 	bl	8008324 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80089a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d134      	bne.n	8008a18 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	e02a      	b.n	8008a0a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80089b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d12a      	bne.n	8008a12 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	b299      	uxth	r1, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	3308      	adds	r3, #8
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	4413      	add	r3, r2
 80089ca:	3304      	adds	r3, #4
 80089cc:	461a      	mov	r2, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fbce 	bl	8009170 <VL53L0X_GetLimitCheckValue>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4313      	orrs	r3, r2
 80089dc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80089de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d117      	bne.n	8008a16 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	b299      	uxth	r1, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	3318      	adds	r3, #24
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4413      	add	r3, r2
 80089f2:	461a      	mov	r2, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fb35 	bl	8009064 <VL53L0X_GetLimitCheckEnable>
 80089fa:	4603      	mov	r3, r0
 80089fc:	461a      	mov	r2, r3
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	3301      	adds	r3, #1
 8008a08:	60bb      	str	r3, [r7, #8]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b05      	cmp	r3, #5
 8008a0e:	ddd1      	ble.n	80089b4 <VL53L0X_GetDeviceParameters+0x80>
 8008a10:	e002      	b.n	8008a18 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8008a12:	bf00      	nop
 8008a14:	e000      	b.n	8008a18 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8008a16:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d107      	bne.n	8008a30 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	333c      	adds	r3, #60	; 0x3c
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fc30 	bl	800928c <VL53L0X_GetWrapAroundCheckEnable>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d107      	bne.n	8008a48 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f879 	bl	8008b36 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	2b15      	cmp	r3, #21
 8008a68:	bf8c      	ite	hi
 8008a6a:	2201      	movhi	r2, #1
 8008a6c:	2200      	movls	r2, #0
 8008a6e:	b2d2      	uxtb	r2, r2
 8008a70:	2a00      	cmp	r2, #0
 8008a72:	d10e      	bne.n	8008a92 <VL53L0X_SetDeviceMode+0x3e>
 8008a74:	2201      	movs	r2, #1
 8008a76:	409a      	lsls	r2, r3
 8008a78:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <VL53L0X_SetDeviceMode+0x54>)
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bf14      	ite	ne
 8008a80:	2301      	movne	r3, #1
 8008a82:	2300      	moveq	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	741a      	strb	r2, [r3, #16]
		break;
 8008a90:	e001      	b.n	8008a96 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008a92:	23f8      	movs	r3, #248	; 0xf8
 8008a94:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	0030000b 	.word	0x0030000b

08008aac <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	7c1a      	ldrb	r2, [r3, #16]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	2109      	movs	r1, #9
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f004 fb6d 	bl	800d1c4 <VL53L0X_RdByte>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f003 fa26 	bl	800bf72 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8008b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f003 faf3 	bl	800c132 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8008b70:	78ba      	ldrb	r2, [r7, #2]
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f002 ff3b 	bl	800b9f2 <VL53L0X_set_vcsel_pulse_period>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	460b      	mov	r3, r1
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f003 f9ad 	bl	800bf04 <VL53L0X_get_vcsel_pulse_period>
 8008baa:	4603      	mov	r3, r0
 8008bac:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008bd8:	f107 030f 	add.w	r3, r7, #15
 8008bdc:	461a      	mov	r2, r3
 8008bde:	2101      	movs	r1, #1
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f004 faef 	bl	800d1c4 <VL53L0X_RdByte>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8008bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d15a      	bne.n	8008cac <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8008bf6:	78bb      	ldrb	r3, [r7, #2]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d12b      	bne.n	8008c54 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d825      	bhi.n	8008c4e <VL53L0X_SetSequenceStepEnable+0x92>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c1d 	.word	0x08008c1d
 8008c0c:	08008c27 	.word	0x08008c27
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	08008c3b 	.word	0x08008c3b
 8008c18:	08008c45 	.word	0x08008c45
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8008c1c:	7dbb      	ldrb	r3, [r7, #22]
 8008c1e:	f043 0310 	orr.w	r3, r3, #16
 8008c22:	75bb      	strb	r3, [r7, #22]
				break;
 8008c24:	e043      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8008c26:	7dbb      	ldrb	r3, [r7, #22]
 8008c28:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008c2c:	75bb      	strb	r3, [r7, #22]
				break;
 8008c2e:	e03e      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8008c30:	7dbb      	ldrb	r3, [r7, #22]
 8008c32:	f043 0304 	orr.w	r3, r3, #4
 8008c36:	75bb      	strb	r3, [r7, #22]
				break;
 8008c38:	e039      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8008c3a:	7dbb      	ldrb	r3, [r7, #22]
 8008c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c40:	75bb      	strb	r3, [r7, #22]
				break;
 8008c42:	e034      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8008c44:	7dbb      	ldrb	r3, [r7, #22]
 8008c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c4a:	75bb      	strb	r3, [r7, #22]
				break;
 8008c4c:	e02f      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c4e:	23fc      	movs	r3, #252	; 0xfc
 8008c50:	75fb      	strb	r3, [r7, #23]
 8008c52:	e02c      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d825      	bhi.n	8008ca6 <VL53L0X_SetSequenceStepEnable+0xea>
 8008c5a:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c75 	.word	0x08008c75
 8008c64:	08008c7f 	.word	0x08008c7f
 8008c68:	08008c89 	.word	0x08008c89
 8008c6c:	08008c93 	.word	0x08008c93
 8008c70:	08008c9d 	.word	0x08008c9d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8008c74:	7dbb      	ldrb	r3, [r7, #22]
 8008c76:	f023 0310 	bic.w	r3, r3, #16
 8008c7a:	75bb      	strb	r3, [r7, #22]
				break;
 8008c7c:	e017      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8008c7e:	7dbb      	ldrb	r3, [r7, #22]
 8008c80:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8008c84:	75bb      	strb	r3, [r7, #22]
				break;
 8008c86:	e012      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8008c88:	7dbb      	ldrb	r3, [r7, #22]
 8008c8a:	f023 0304 	bic.w	r3, r3, #4
 8008c8e:	75bb      	strb	r3, [r7, #22]
				break;
 8008c90:	e00d      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8008c92:	7dbb      	ldrb	r3, [r7, #22]
 8008c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c98:	75bb      	strb	r3, [r7, #22]
				break;
 8008c9a:	e008      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8008c9c:	7dbb      	ldrb	r3, [r7, #22]
 8008c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca2:	75bb      	strb	r3, [r7, #22]
				break;
 8008ca4:	e003      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ca6:	23fc      	movs	r3, #252	; 0xfc
 8008ca8:	75fb      	strb	r3, [r7, #23]
 8008caa:	e000      	b.n	8008cae <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8008cac:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	7dba      	ldrb	r2, [r7, #22]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d01e      	beq.n	8008cf4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8008cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d107      	bne.n	8008cce <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8008cbe:	7dbb      	ldrb	r3, [r7, #22]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f004 f9fb 	bl	800d0c0 <VL53L0X_WrByte>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8008cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d103      	bne.n	8008cde <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7dba      	ldrb	r2, [r7, #22]
 8008cda:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008cec:	6939      	ldr	r1, [r7, #16]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff ff0e 	bl	8008b10 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	607b      	str	r3, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	72fb      	strb	r3, [r7, #11]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d836      	bhi.n	8008d90 <sequence_step_enabled+0x90>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <sequence_step_enabled+0x28>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008d3d 	.word	0x08008d3d
 8008d2c:	08008d4f 	.word	0x08008d4f
 8008d30:	08008d61 	.word	0x08008d61
 8008d34:	08008d73 	.word	0x08008d73
 8008d38:	08008d85 	.word	0x08008d85
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008d3c:	7abb      	ldrb	r3, [r7, #10]
 8008d3e:	111b      	asrs	r3, r3, #4
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	701a      	strb	r2, [r3, #0]
		break;
 8008d4c:	e022      	b.n	8008d94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008d4e:	7abb      	ldrb	r3, [r7, #10]
 8008d50:	10db      	asrs	r3, r3, #3
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	701a      	strb	r2, [r3, #0]
		break;
 8008d5e:	e019      	b.n	8008d94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008d60:	7abb      	ldrb	r3, [r7, #10]
 8008d62:	109b      	asrs	r3, r3, #2
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	701a      	strb	r2, [r3, #0]
		break;
 8008d70:	e010      	b.n	8008d94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8008d72:	7abb      	ldrb	r3, [r7, #10]
 8008d74:	119b      	asrs	r3, r3, #6
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	701a      	strb	r2, [r3, #0]
		break;
 8008d82:	e007      	b.n	8008d94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8008d84:	7abb      	ldrb	r3, [r7, #10]
 8008d86:	09db      	lsrs	r3, r3, #7
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	701a      	strb	r2, [r3, #0]
		break;
 8008d8e:	e001      	b.n	8008d94 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d90:	23fc      	movs	r3, #252	; 0xfc
 8008d92:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	371c      	adds	r7, #28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008db6:	f107 030e 	add.w	r3, r7, #14
 8008dba:	461a      	mov	r2, r3
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f004 fa00 	bl	800d1c4 <VL53L0X_RdByte>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8008dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008dd0:	7bba      	ldrb	r2, [r7, #14]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff ff92 	bl	8008d00 <sequence_step_enabled>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d108      	bne.n	8008dfa <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008de8:	7bba      	ldrb	r2, [r7, #14]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	3302      	adds	r3, #2
 8008dee:	2101      	movs	r1, #1
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff ff85 	bl	8008d00 <sequence_step_enabled>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d108      	bne.n	8008e14 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8008e02:	7bba      	ldrb	r2, [r7, #14]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	3301      	adds	r3, #1
 8008e08:	2102      	movs	r1, #2
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff ff78 	bl	8008d00 <sequence_step_enabled>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d108      	bne.n	8008e2e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008e1c:	7bba      	ldrb	r2, [r7, #14]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	3303      	adds	r3, #3
 8008e22:	2103      	movs	r1, #3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff ff6b 	bl	8008d00 <sequence_step_enabled>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d108      	bne.n	8008e48 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8008e36:	7bba      	ldrb	r2, [r7, #14]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	2104      	movs	r1, #4
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff ff5e 	bl	8008d00 <sequence_step_enabled>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8008e62:	f107 030c 	add.w	r3, r7, #12
 8008e66:	461a      	mov	r2, r3
 8008e68:	21f8      	movs	r1, #248	; 0xf8
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f004 f9d4 	bl	800d218 <VL53L0X_RdWord>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8008e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d108      	bne.n	8008e8e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008e7c:	f107 0308 	add.w	r3, r7, #8
 8008e80:	461a      	mov	r2, r3
 8008e82:	2104      	movs	r1, #4
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f004 f9ff 	bl	800d288 <VL53L0X_RdDWord>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10c      	bne.n	8008eb0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8008e96:	89bb      	ldrh	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	89ba      	ldrh	r2, [r7, #12]
 8008ea0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7f1b      	ldrb	r3, [r3, #28]
 8008ece:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	7bba      	ldrb	r2, [r7, #14]
 8008ed4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008ef4:	f107 030e 	add.w	r3, r7, #14
 8008ef8:	461a      	mov	r2, r3
 8008efa:	2120      	movs	r1, #32
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f004 f98b 	bl	800d218 <VL53L0X_RdWord>
 8008f02:	4603      	mov	r3, r0
 8008f04:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d118      	bne.n	8008f40 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008f0e:	89fb      	ldrh	r3, [r7, #14]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	771a      	strb	r2, [r3, #28]
 8008f26:	e00b      	b.n	8008f40 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8008f28:	89fb      	ldrh	r3, [r7, #14]
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008f6c:	887b      	ldrh	r3, [r7, #2]
 8008f6e:	2b05      	cmp	r3, #5
 8008f70:	d902      	bls.n	8008f78 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f72:	23fc      	movs	r3, #252	; 0xfc
 8008f74:	75fb      	strb	r3, [r7, #23]
 8008f76:	e05b      	b.n	8009030 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008f78:	787b      	ldrb	r3, [r7, #1]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8008f86:	2301      	movs	r3, #1
 8008f88:	73bb      	strb	r3, [r7, #14]
 8008f8a:	e00a      	b.n	8008fa2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008f8c:	887b      	ldrh	r3, [r7, #2]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	330c      	adds	r3, #12
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	2b05      	cmp	r3, #5
 8008fa6:	d841      	bhi.n	800902c <VL53L0X_SetLimitCheckEnable+0xe0>
 8008fa8:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <VL53L0X_SetLimitCheckEnable+0x64>)
 8008faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fae:	bf00      	nop
 8008fb0:	08008fc9 	.word	0x08008fc9
 8008fb4:	08008fd3 	.word	0x08008fd3
 8008fb8:	08008fe9 	.word	0x08008fe9
 8008fbc:	08008ff3 	.word	0x08008ff3
 8008fc0:	08008ffd 	.word	0x08008ffd
 8008fc4:	08009015 	.word	0x08009015

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7bfa      	ldrb	r2, [r7, #15]
 8008fcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008fd0:	e02e      	b.n	8009030 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	2144      	movs	r1, #68	; 0x44
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f004 f893 	bl	800d108 <VL53L0X_WrWord>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]

			break;
 8008fe6:	e023      	b.n	8009030 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	7bfa      	ldrb	r2, [r7, #15]
 8008fec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008ff0:	e01e      	b.n	8009030 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7bfa      	ldrb	r2, [r7, #15]
 8008ff6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8008ffa:	e019      	b.n	8009030 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009002:	7b7b      	ldrb	r3, [r7, #13]
 8009004:	22fe      	movs	r2, #254	; 0xfe
 8009006:	2160      	movs	r1, #96	; 0x60
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f004 f8a7 	bl	800d15c <VL53L0X_UpdateByte>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009012:	e00d      	b.n	8009030 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800901a:	7b7b      	ldrb	r3, [r7, #13]
 800901c:	22ef      	movs	r2, #239	; 0xef
 800901e:	2160      	movs	r1, #96	; 0x60
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f004 f89b 	bl	800d15c <VL53L0X_UpdateByte>
 8009026:	4603      	mov	r3, r0
 8009028:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800902a:	e001      	b.n	8009030 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800902c:	23fc      	movs	r3, #252	; 0xfc
 800902e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10f      	bne.n	8009058 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009038:	787b      	ldrb	r3, [r7, #1]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800903e:	887b      	ldrh	r3, [r7, #2]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	4413      	add	r3, r2
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800904a:	e005      	b.n	8009058 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800904c:	887b      	ldrh	r3, [r7, #2]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009064:	b480      	push	{r7}
 8009066:	b087      	sub	sp, #28
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	460b      	mov	r3, r1
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009076:	897b      	ldrh	r3, [r7, #10]
 8009078:	2b05      	cmp	r3, #5
 800907a:	d905      	bls.n	8009088 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800907c:	23fc      	movs	r3, #252	; 0xfc
 800907e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	e008      	b.n	800909a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009088:	897b      	ldrh	r3, [r7, #10]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4413      	add	r3, r2
 800908e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009092:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7dba      	ldrb	r2, [r7, #22]
 8009098:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800909a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
	...

080090ac <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	460b      	mov	r3, r1
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80090be:	897b      	ldrh	r3, [r7, #10]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80090ca:	7dbb      	ldrb	r3, [r7, #22]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d107      	bne.n	80090e0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80090d0:	897b      	ldrh	r3, [r7, #10]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	330c      	adds	r3, #12
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	e040      	b.n	8009162 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80090e0:	897b      	ldrh	r3, [r7, #10]
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d830      	bhi.n	8009148 <VL53L0X_SetLimitCheckValue+0x9c>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <VL53L0X_SetLimitCheckValue+0x40>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009105 	.word	0x08009105
 80090f0:	0800910d 	.word	0x0800910d
 80090f4:	08009123 	.word	0x08009123
 80090f8:	0800912b 	.word	0x0800912b
 80090fc:	08009133 	.word	0x08009133
 8009100:	08009133 	.word	0x08009133

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800910a:	e01f      	b.n	800914c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009110:	b29b      	uxth	r3, r3
 8009112:	461a      	mov	r2, r3
 8009114:	2144      	movs	r1, #68	; 0x44
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f003 fff6 	bl	800d108 <VL53L0X_WrWord>
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009120:	e014      	b.n	800914c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009128:	e010      	b.n	800914c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009130:	e00c      	b.n	800914c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009136:	b29b      	uxth	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	2164      	movs	r1, #100	; 0x64
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f003 ffe3 	bl	800d108 <VL53L0X_WrWord>
 8009142:	4603      	mov	r3, r0
 8009144:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009146:	e001      	b.n	800914c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009148:	23fc      	movs	r3, #252	; 0xfc
 800914a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800914c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009154:	897b      	ldrh	r3, [r7, #10]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	330c      	adds	r3, #12
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop

08009170 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	460b      	mov	r3, r1
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800917e:	2300      	movs	r3, #0
 8009180:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009186:	897b      	ldrh	r3, [r7, #10]
 8009188:	2b05      	cmp	r3, #5
 800918a:	d847      	bhi.n	800921c <VL53L0X_GetLimitCheckValue+0xac>
 800918c:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <VL53L0X_GetLimitCheckValue+0x24>)
 800918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009192:	bf00      	nop
 8009194:	080091ad 	.word	0x080091ad
 8009198:	080091b9 	.word	0x080091b9
 800919c:	080091df 	.word	0x080091df
 80091a0:	080091eb 	.word	0x080091eb
 80091a4:	080091f7 	.word	0x080091f7
 80091a8:	080091f7 	.word	0x080091f7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	77bb      	strb	r3, [r7, #30]
		break;
 80091b6:	e033      	b.n	8009220 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80091b8:	f107 0316 	add.w	r3, r7, #22
 80091bc:	461a      	mov	r2, r3
 80091be:	2144      	movs	r1, #68	; 0x44
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f004 f829 	bl	800d218 <VL53L0X_RdWord>
 80091c6:	4603      	mov	r3, r0
 80091c8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80091ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d102      	bne.n	80091d8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80091d2:	8afb      	ldrh	r3, [r7, #22]
 80091d4:	025b      	lsls	r3, r3, #9
 80091d6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80091d8:	2301      	movs	r3, #1
 80091da:	77bb      	strb	r3, [r7, #30]
		break;
 80091dc:	e020      	b.n	8009220 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	77bb      	strb	r3, [r7, #30]
		break;
 80091e8:	e01a      	b.n	8009220 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ee:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	77bb      	strb	r3, [r7, #30]
		break;
 80091f4:	e014      	b.n	8009220 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80091f6:	f107 0316 	add.w	r3, r7, #22
 80091fa:	461a      	mov	r2, r3
 80091fc:	2164      	movs	r1, #100	; 0x64
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f004 f80a 	bl	800d218 <VL53L0X_RdWord>
 8009204:	4603      	mov	r3, r0
 8009206:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009208:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009210:	8afb      	ldrh	r3, [r7, #22]
 8009212:	025b      	lsls	r3, r3, #9
 8009214:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	77bb      	strb	r3, [r7, #30]
		break;
 800921a:	e001      	b.n	8009220 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800921c:	23fc      	movs	r3, #252	; 0xfc
 800921e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009220:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d12a      	bne.n	800927e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009228:	7fbb      	ldrb	r3, [r7, #30]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d124      	bne.n	8009278 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d110      	bne.n	8009256 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009234:	897b      	ldrh	r3, [r7, #10]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	330c      	adds	r3, #12
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009248:	897b      	ldrh	r3, [r7, #10]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	4413      	add	r3, r2
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009254:	e013      	b.n	800927e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800925c:	897b      	ldrh	r3, [r7, #10]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	330c      	adds	r3, #12
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800926a:	897b      	ldrh	r3, [r7, #10]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009276:	e002      	b.n	800927e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800927e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009282:	4618      	mov	r0, r3
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop

0800928c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800929a:	f107 030e 	add.w	r3, r7, #14
 800929e:	461a      	mov	r2, r3
 80092a0:	2101      	movs	r1, #1
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f003 ff8e 	bl	800d1c4 <VL53L0X_RdByte>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80092ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10e      	bne.n	80092d2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80092b4:	7bba      	ldrb	r2, [r7, #14]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	b25b      	sxtb	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	da03      	bge.n	80092cc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2201      	movs	r2, #1
 80092c8:	701a      	strb	r2, [r3, #0]
 80092ca:	e002      	b.n	80092d2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80092d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d104      	bne.n	80092e4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80092fc:	f107 030e 	add.w	r3, r7, #14
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fbd2 	bl	8008aac <VL53L0X_GetDeviceMode>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800930c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d107      	bne.n	8009324 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f898 	bl	8009450 <VL53L0X_StartMeasurement>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 fb3f 	bl	800a9b0 <VL53L0X_measurement_poll_for_completion>
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d106      	bne.n	800934c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2203      	movs	r2, #3
 8009348:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800934c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009364:	2300      	movs	r3, #0
 8009366:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009368:	2301      	movs	r3, #1
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	68b9      	ldr	r1, [r7, #8]
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f001 fae1 	bl	800a936 <VL53L0X_perform_ref_calibration>
 8009374:	4603      	mov	r3, r0
 8009376:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009390:	2300      	movs	r3, #0
 8009392:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800939a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800939c:	7dbb      	ldrb	r3, [r7, #22]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d005      	beq.n	80093ae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80093a2:	7dbb      	ldrb	r3, [r7, #22]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d002      	beq.n	80093ae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80093a8:	7dbb      	ldrb	r3, [r7, #22]
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d147      	bne.n	800943e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	f107 0210 	add.w	r2, r7, #16
 80093b6:	2101      	movs	r1, #1
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fbc3 	bl	8009b44 <VL53L0X_GetInterruptThresholds>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80093c8:	d803      	bhi.n	80093d2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80093ca:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80093cc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80093d0:	d935      	bls.n	800943e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80093d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d131      	bne.n	800943e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d006      	beq.n	80093ee <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80093e0:	491a      	ldr	r1, [pc, #104]	; (800944c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f002 ff56 	bl	800c294 <VL53L0X_load_tuning_settings>
 80093e8:	4603      	mov	r3, r0
 80093ea:	75fb      	strb	r3, [r7, #23]
 80093ec:	e027      	b.n	800943e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80093ee:	2204      	movs	r2, #4
 80093f0:	21ff      	movs	r1, #255	; 0xff
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f003 fe64 	bl	800d0c0 <VL53L0X_WrByte>
 80093f8:	4603      	mov	r3, r0
 80093fa:	461a      	mov	r2, r3
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	4313      	orrs	r3, r2
 8009400:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009402:	2200      	movs	r2, #0
 8009404:	2170      	movs	r1, #112	; 0x70
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f003 fe5a 	bl	800d0c0 <VL53L0X_WrByte>
 800940c:	4603      	mov	r3, r0
 800940e:	461a      	mov	r2, r3
 8009410:	7dfb      	ldrb	r3, [r7, #23]
 8009412:	4313      	orrs	r3, r2
 8009414:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009416:	2200      	movs	r2, #0
 8009418:	21ff      	movs	r1, #255	; 0xff
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f003 fe50 	bl	800d0c0 <VL53L0X_WrByte>
 8009420:	4603      	mov	r3, r0
 8009422:	461a      	mov	r2, r3
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	4313      	orrs	r3, r2
 8009428:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800942a:	2200      	movs	r2, #0
 800942c:	2180      	movs	r1, #128	; 0x80
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f003 fe46 	bl	800d0c0 <VL53L0X_WrByte>
 8009434:	4603      	mov	r3, r0
 8009436:	461a      	mov	r2, r3
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	4313      	orrs	r3, r2
 800943c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800943e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000014 	.word	0x20000014

08009450 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009458:	2300      	movs	r3, #0
 800945a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800945c:	2301      	movs	r3, #1
 800945e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009460:	f107 030e 	add.w	r3, r7, #14
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff fb20 	bl	8008aac <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800946c:	2201      	movs	r2, #1
 800946e:	2180      	movs	r1, #128	; 0x80
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f003 fe25 	bl	800d0c0 <VL53L0X_WrByte>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800947a:	2201      	movs	r2, #1
 800947c:	21ff      	movs	r1, #255	; 0xff
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f003 fe1e 	bl	800d0c0 <VL53L0X_WrByte>
 8009484:	4603      	mov	r3, r0
 8009486:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009488:	2200      	movs	r2, #0
 800948a:	2100      	movs	r1, #0
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f003 fe17 	bl	800d0c0 <VL53L0X_WrByte>
 8009492:	4603      	mov	r3, r0
 8009494:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800949c:	461a      	mov	r2, r3
 800949e:	2191      	movs	r1, #145	; 0x91
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f003 fe0d 	bl	800d0c0 <VL53L0X_WrByte>
 80094a6:	4603      	mov	r3, r0
 80094a8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80094aa:	2201      	movs	r2, #1
 80094ac:	2100      	movs	r1, #0
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f003 fe06 	bl	800d0c0 <VL53L0X_WrByte>
 80094b4:	4603      	mov	r3, r0
 80094b6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094b8:	2200      	movs	r2, #0
 80094ba:	21ff      	movs	r1, #255	; 0xff
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f003 fdff 	bl	800d0c0 <VL53L0X_WrByte>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80094c6:	2200      	movs	r2, #0
 80094c8:	2180      	movs	r1, #128	; 0x80
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f003 fdf8 	bl	800d0c0 <VL53L0X_WrByte>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d054      	beq.n	8009584 <VL53L0X_StartMeasurement+0x134>
 80094da:	2b03      	cmp	r3, #3
 80094dc:	dc6c      	bgt.n	80095b8 <VL53L0X_StartMeasurement+0x168>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <VL53L0X_StartMeasurement+0x98>
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d034      	beq.n	8009550 <VL53L0X_StartMeasurement+0x100>
 80094e6:	e067      	b.n	80095b8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80094e8:	2201      	movs	r2, #1
 80094ea:	2100      	movs	r1, #0
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f003 fde7 	bl	800d0c0 <VL53L0X_WrByte>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80094fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d15d      	bne.n	80095be <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d008      	beq.n	800951e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800950c:	f107 030d 	add.w	r3, r7, #13
 8009510:	461a      	mov	r2, r3
 8009512:	2100      	movs	r1, #0
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f003 fe55 	bl	800d1c4 <VL53L0X_RdByte>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	3301      	adds	r3, #1
 8009522:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009524:	7b7a      	ldrb	r2, [r7, #13]
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	4013      	ands	r3, r2
 800952a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800952c:	7bfa      	ldrb	r2, [r7, #15]
 800952e:	429a      	cmp	r2, r3
 8009530:	d107      	bne.n	8009542 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8009532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d103      	bne.n	8009542 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009540:	d3e1      	bcc.n	8009506 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009548:	d339      	bcc.n	80095be <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800954a:	23f9      	movs	r3, #249	; 0xf9
 800954c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800954e:	e036      	b.n	80095be <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d105      	bne.n	8009564 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009558:	2101      	movs	r1, #1
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff ff12 	bl	8009384 <VL53L0X_CheckAndLoadInterruptSettings>
 8009560:	4603      	mov	r3, r0
 8009562:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009564:	2202      	movs	r2, #2
 8009566:	2100      	movs	r1, #0
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f003 fda9 	bl	800d0c0 <VL53L0X_WrByte>
 800956e:	4603      	mov	r3, r0
 8009570:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8009572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d123      	bne.n	80095c2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2204      	movs	r2, #4
 800957e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009582:	e01e      	b.n	80095c2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800958c:	2101      	movs	r1, #1
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7ff fef8 	bl	8009384 <VL53L0X_CheckAndLoadInterruptSettings>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009598:	2204      	movs	r2, #4
 800959a:	2100      	movs	r1, #0
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f003 fd8f 	bl	800d0c0 <VL53L0X_WrByte>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80095a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10b      	bne.n	80095c6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2204      	movs	r2, #4
 80095b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80095b6:	e006      	b.n	80095c6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80095b8:	23f8      	movs	r3, #248	; 0xf8
 80095ba:	75fb      	strb	r3, [r7, #23]
 80095bc:	e004      	b.n	80095c8 <VL53L0X_StartMeasurement+0x178>
		break;
 80095be:	bf00      	nop
 80095c0:	e002      	b.n	80095c8 <VL53L0X_StartMeasurement+0x178>
		break;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <VL53L0X_StartMeasurement+0x178>
		break;
 80095c6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80095c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80095e8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d112      	bne.n	8009616 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80095f0:	f107 0308 	add.w	r3, r7, #8
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fb1a 	bl	8009c30 <VL53L0X_GetInterruptMaskStatus>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b04      	cmp	r3, #4
 8009604:	d103      	bne.n	800960e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2201      	movs	r2, #1
 800960a:	701a      	strb	r2, [r3, #0]
 800960c:	e01c      	b.n	8009648 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2200      	movs	r2, #0
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	e018      	b.n	8009648 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009616:	f107 030d 	add.w	r3, r7, #13
 800961a:	461a      	mov	r2, r3
 800961c:	2114      	movs	r1, #20
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f003 fdd0 	bl	800d1c4 <VL53L0X_RdByte>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10b      	bne.n	8009648 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009630:	7b7b      	ldrb	r3, [r7, #13]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2201      	movs	r2, #1
 800963e:	701a      	strb	r2, [r3, #0]
 8009640:	e002      	b.n	8009648 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2200      	movs	r2, #0
 8009646:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009654:	b5b0      	push	{r4, r5, r7, lr}
 8009656:	b096      	sub	sp, #88	; 0x58
 8009658:	af02      	add	r7, sp, #8
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800965e:	2300      	movs	r3, #0
 8009660:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009664:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009668:	230c      	movs	r3, #12
 800966a:	2114      	movs	r1, #20
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f003 fcfb 	bl	800d068 <VL53L0X_ReadMulti>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009678:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800967c:	2b00      	cmp	r3, #0
 800967e:	f040 80d1 	bne.w	8009824 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2200      	movs	r2, #0
 8009686:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800968e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009692:	b29b      	uxth	r3, r3
 8009694:	021b      	lsls	r3, r3, #8
 8009696:	b29a      	uxth	r2, r3
 8009698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800969c:	b29b      	uxth	r3, r3
 800969e:	4413      	add	r3, r2
 80096a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2200      	movs	r2, #0
 80096a8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80096aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	4413      	add	r3, r2
 80096bc:	b29b      	uxth	r3, r3
 80096be:	025b      	lsls	r3, r3, #9
 80096c0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096c6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80096c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	4413      	add	r3, r2
 80096da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80096de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80096e2:	025b      	lsls	r3, r3, #9
 80096e4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80096ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4413      	add	r3, r2
 80096fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009706:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8009708:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800970c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8009716:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800971e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8009722:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009728:	d046      	beq.n	80097b8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800972a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800972c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009730:	fb02 f303 	mul.w	r3, r2, r3
 8009734:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009738:	4a57      	ldr	r2, [pc, #348]	; (8009898 <VL53L0X_GetRangingMeasurementData+0x244>)
 800973a:	fb82 1203 	smull	r1, r2, r2, r3
 800973e:	1192      	asrs	r2, r2, #6
 8009740:	17db      	asrs	r3, r3, #31
 8009742:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009744:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7f1b      	ldrb	r3, [r3, #28]
 8009752:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800975a:	2b00      	cmp	r3, #0
 800975c:	d02c      	beq.n	80097b8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800975e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009760:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009764:	fb02 f303 	mul.w	r3, r2, r3
 8009768:	121a      	asrs	r2, r3, #8
					<= 0) {
 800976a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800976c:	429a      	cmp	r2, r3
 800976e:	d10d      	bne.n	800978c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8009770:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8009778:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800977c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009780:	e016      	b.n	80097b0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8009782:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009786:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800978a:	e011      	b.n	80097b0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800978c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009792:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8009796:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009798:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800979c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80097a0:	121b      	asrs	r3, r3, #8
 80097a2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80097a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80097a8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80097ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80097b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80097b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80097b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00d      	beq.n	80097dc <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80097c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80097c4:	089b      	lsrs	r3, r3, #2
 80097c6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80097cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	019b      	lsls	r3, r3, #6
 80097d4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	75da      	strb	r2, [r3, #23]
 80097da:	e006      	b.n	80097ea <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80097e2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	2200      	movs	r2, #0
 80097e8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80097ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80097ee:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80097f2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f003 f9e5 	bl	800cbd0 <VL53L0X_get_pal_range_status>
 8009806:	4603      	mov	r3, r0
 8009808:	461a      	mov	r2, r3
 800980a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800980e:	4313      	orrs	r3, r2
 8009810:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8009814:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009818:	2b00      	cmp	r3, #0
 800981a:	d103      	bne.n	8009824 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800981c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009824:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009828:	2b00      	cmp	r3, #0
 800982a:	d12f      	bne.n	800988c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f107 040c 	add.w	r4, r7, #12
 8009832:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800983a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800983e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8009846:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800984c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009854:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800985a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8009860:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009866:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800986c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8009872:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800987c:	f107 050c 	add.w	r5, r7, #12
 8009880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009884:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009888:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800988c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8009890:	4618      	mov	r0, r3
 8009892:	3750      	adds	r7, #80	; 0x50
 8009894:	46bd      	mov	sp, r7
 8009896:	bdb0      	pop	{r4, r5, r7, pc}
 8009898:	10624dd3 	.word	0x10624dd3

0800989c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80098aa:	2100      	movs	r1, #0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff f8d1 	bl	8008a54 <VL53L0X_SetDeviceMode>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80098b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff fd16 	bl	80092f0 <VL53L0X_PerformSingleMeasurement>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80098c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d105      	bne.n	80098dc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff febe 	bl	8009654 <VL53L0X_GetRangingMeasurementData>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80098dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d105      	bne.n	80098f0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80098e4:	2100      	movs	r1, #0
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f962 	bl	8009bb0 <VL53L0X_ClearInterruptMask>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80098f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	4608      	mov	r0, r1
 8009906:	4611      	mov	r1, r2
 8009908:	461a      	mov	r2, r3
 800990a:	4603      	mov	r3, r0
 800990c:	70fb      	strb	r3, [r7, #3]
 800990e:	460b      	mov	r3, r1
 8009910:	70bb      	strb	r3, [r7, #2]
 8009912:	4613      	mov	r3, r2
 8009914:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009920:	23f6      	movs	r3, #246	; 0xf6
 8009922:	73fb      	strb	r3, [r7, #15]
 8009924:	e107      	b.n	8009b36 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009926:	78bb      	ldrb	r3, [r7, #2]
 8009928:	2b14      	cmp	r3, #20
 800992a:	d110      	bne.n	800994e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800992c:	7e3b      	ldrb	r3, [r7, #24]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8009932:	2310      	movs	r3, #16
 8009934:	73bb      	strb	r3, [r7, #14]
 8009936:	e001      	b.n	800993c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009938:	2301      	movs	r3, #1
 800993a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	461a      	mov	r2, r3
 8009940:	2184      	movs	r1, #132	; 0x84
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f003 fbbc 	bl	800d0c0 <VL53L0X_WrByte>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]
 800994c:	e0f3      	b.n	8009b36 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800994e:	78bb      	ldrb	r3, [r7, #2]
 8009950:	2b15      	cmp	r3, #21
 8009952:	f040 8097 	bne.w	8009a84 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009956:	2201      	movs	r2, #1
 8009958:	21ff      	movs	r1, #255	; 0xff
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f003 fbb0 	bl	800d0c0 <VL53L0X_WrByte>
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	4313      	orrs	r3, r2
 8009968:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800996a:	2200      	movs	r2, #0
 800996c:	2100      	movs	r1, #0
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f003 fba6 	bl	800d0c0 <VL53L0X_WrByte>
 8009974:	4603      	mov	r3, r0
 8009976:	461a      	mov	r2, r3
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	4313      	orrs	r3, r2
 800997c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800997e:	2200      	movs	r2, #0
 8009980:	21ff      	movs	r1, #255	; 0xff
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f003 fb9c 	bl	800d0c0 <VL53L0X_WrByte>
 8009988:	4603      	mov	r3, r0
 800998a:	461a      	mov	r2, r3
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	4313      	orrs	r3, r2
 8009990:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009992:	2201      	movs	r2, #1
 8009994:	2180      	movs	r1, #128	; 0x80
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f003 fb92 	bl	800d0c0 <VL53L0X_WrByte>
 800999c:	4603      	mov	r3, r0
 800999e:	461a      	mov	r2, r3
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80099a6:	2202      	movs	r2, #2
 80099a8:	2185      	movs	r1, #133	; 0x85
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f003 fb88 	bl	800d0c0 <VL53L0X_WrByte>
 80099b0:	4603      	mov	r3, r0
 80099b2:	461a      	mov	r2, r3
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80099ba:	2204      	movs	r2, #4
 80099bc:	21ff      	movs	r1, #255	; 0xff
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f003 fb7e 	bl	800d0c0 <VL53L0X_WrByte>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461a      	mov	r2, r3
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80099ce:	2200      	movs	r2, #0
 80099d0:	21cd      	movs	r1, #205	; 0xcd
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f003 fb74 	bl	800d0c0 <VL53L0X_WrByte>
 80099d8:	4603      	mov	r3, r0
 80099da:	461a      	mov	r2, r3
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	4313      	orrs	r3, r2
 80099e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80099e2:	2211      	movs	r2, #17
 80099e4:	21cc      	movs	r1, #204	; 0xcc
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f003 fb6a 	bl	800d0c0 <VL53L0X_WrByte>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80099f6:	2207      	movs	r2, #7
 80099f8:	21ff      	movs	r1, #255	; 0xff
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f003 fb60 	bl	800d0c0 <VL53L0X_WrByte>
 8009a00:	4603      	mov	r3, r0
 8009a02:	461a      	mov	r2, r3
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	21be      	movs	r1, #190	; 0xbe
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f003 fb56 	bl	800d0c0 <VL53L0X_WrByte>
 8009a14:	4603      	mov	r3, r0
 8009a16:	461a      	mov	r2, r3
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8009a1e:	2206      	movs	r2, #6
 8009a20:	21ff      	movs	r1, #255	; 0xff
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f003 fb4c 	bl	800d0c0 <VL53L0X_WrByte>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8009a32:	2209      	movs	r2, #9
 8009a34:	21cc      	movs	r1, #204	; 0xcc
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f003 fb42 	bl	800d0c0 <VL53L0X_WrByte>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	461a      	mov	r2, r3
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009a46:	2200      	movs	r2, #0
 8009a48:	21ff      	movs	r1, #255	; 0xff
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f003 fb38 	bl	800d0c0 <VL53L0X_WrByte>
 8009a50:	4603      	mov	r3, r0
 8009a52:	461a      	mov	r2, r3
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	21ff      	movs	r1, #255	; 0xff
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f003 fb2e 	bl	800d0c0 <VL53L0X_WrByte>
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f003 fb24 	bl	800d0c0 <VL53L0X_WrByte>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	73fb      	strb	r3, [r7, #15]
 8009a82:	e058      	b.n	8009b36 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8009a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d121      	bne.n	8009ad0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8009a8c:	787b      	ldrb	r3, [r7, #1]
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d81b      	bhi.n	8009aca <VL53L0X_SetGpioConfig+0x1ce>
 8009a92:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <VL53L0X_SetGpioConfig+0x19c>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009aad 	.word	0x08009aad
 8009a9c:	08009ab3 	.word	0x08009ab3
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009abf 	.word	0x08009abf
 8009aa8:	08009ac5 	.word	0x08009ac5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73bb      	strb	r3, [r7, #14]
				break;
 8009ab0:	e00f      	b.n	8009ad2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	73bb      	strb	r3, [r7, #14]
				break;
 8009ab6:	e00c      	b.n	8009ad2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	73bb      	strb	r3, [r7, #14]
				break;
 8009abc:	e009      	b.n	8009ad2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	73bb      	strb	r3, [r7, #14]
				break;
 8009ac2:	e006      	b.n	8009ad2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	73bb      	strb	r3, [r7, #14]
				break;
 8009ac8:	e003      	b.n	8009ad2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8009aca:	23f5      	movs	r3, #245	; 0xf5
 8009acc:	73fb      	strb	r3, [r7, #15]
 8009ace:	e000      	b.n	8009ad2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8009ad0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8009ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d107      	bne.n	8009aea <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	461a      	mov	r2, r3
 8009ade:	210a      	movs	r1, #10
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f003 faed 	bl	800d0c0 <VL53L0X_WrByte>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8009aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10f      	bne.n	8009b12 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009af2:	7e3b      	ldrb	r3, [r7, #24]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73bb      	strb	r3, [r7, #14]
 8009afc:	e001      	b.n	8009b02 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8009afe:	2310      	movs	r3, #16
 8009b00:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	22ef      	movs	r2, #239	; 0xef
 8009b06:	2184      	movs	r1, #132	; 0x84
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f003 fb27 	bl	800d15c <VL53L0X_UpdateByte>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8009b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	787a      	ldrb	r2, [r7, #1]
 8009b1e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8009b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f83f 	bl	8009bb0 <VL53L0X_ClearInterruptMask>
 8009b32:	4603      	mov	r3, r0
 8009b34:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop

08009b44 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	607a      	str	r2, [r7, #4]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	460b      	mov	r3, r1
 8009b52:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009b58:	f107 0314 	add.w	r3, r7, #20
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	210e      	movs	r1, #14
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f003 fb59 	bl	800d218 <VL53L0X_RdWord>
 8009b66:	4603      	mov	r3, r0
 8009b68:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009b6a:	8abb      	ldrh	r3, [r7, #20]
 8009b6c:	045b      	lsls	r3, r3, #17
 8009b6e:	461a      	mov	r2, r3
 8009b70:	4b0e      	ldr	r3, [pc, #56]	; (8009bac <VL53L0X_GetInterruptThresholds+0x68>)
 8009b72:	4013      	ands	r3, r2
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8009b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10f      	bne.n	8009ba0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8009b80:	f107 0314 	add.w	r3, r7, #20
 8009b84:	461a      	mov	r2, r3
 8009b86:	210c      	movs	r1, #12
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f003 fb45 	bl	800d218 <VL53L0X_RdWord>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009b92:	8abb      	ldrh	r3, [r7, #20]
 8009b94:	045b      	lsls	r3, r3, #17
 8009b96:	461a      	mov	r2, r3
 8009b98:	4b04      	ldr	r3, [pc, #16]	; (8009bac <VL53L0X_GetInterruptThresholds+0x68>)
 8009b9a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	1ffe0000 	.word	0x1ffe0000

08009bb0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	210b      	movs	r1, #11
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f003 fa7a 	bl	800d0c0 <VL53L0X_WrByte>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	210b      	movs	r1, #11
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f003 fa73 	bl	800d0c0 <VL53L0X_WrByte>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	461a      	mov	r2, r3
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8009be4:	f107 030d 	add.w	r3, r7, #13
 8009be8:	461a      	mov	r2, r3
 8009bea:	2113      	movs	r1, #19
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f003 fae9 	bl	800d1c4 <VL53L0X_RdByte>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8009c02:	7b7b      	ldrb	r3, [r7, #13]
 8009c04:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d006      	beq.n	8009c1a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d803      	bhi.n	8009c1a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8009c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0d3      	beq.n	8009bc2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009c20:	23f4      	movs	r3, #244	; 0xf4
 8009c22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8009c3e:	f107 030e 	add.w	r3, r7, #14
 8009c42:	461a      	mov	r2, r3
 8009c44:	2113      	movs	r1, #19
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f003 fabc 	bl	800d1c4 <VL53L0X_RdByte>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8009c50:	7bbb      	ldrb	r3, [r7, #14]
 8009c52:	f003 0207 	and.w	r2, r3, #7
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	f003 0318 	and.w	r3, r3, #24
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8009c64:	23fa      	movs	r3, #250	; 0xfa
 8009c66:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 fa03 	bl	800a094 <VL53L0X_perform_ref_spad_management>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8009c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8009cac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009cb0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8009cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cb6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8009cb8:	f107 0308 	add.w	r3, r7, #8
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	2128      	movs	r1, #40	; 0x28
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f003 faa9 	bl	800d218 <VL53L0X_RdWord>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8009cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d11e      	bne.n	8009d10 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8009cd2:	893b      	ldrh	r3, [r7, #8]
 8009cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009cdc:	893b      	ldrh	r3, [r7, #8]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	dd0b      	ble.n	8009d00 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009ce8:	893a      	ldrh	r2, [r7, #8]
 8009cea:	897b      	ldrh	r3, [r7, #10]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	b21b      	sxth	r3, r3
 8009cf2:	461a      	mov	r2, r3
					* 250;
 8009cf4:	23fa      	movs	r3, #250	; 0xfa
 8009cf6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	e007      	b.n	8009d10 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009d00:	893b      	ldrh	r3, [r7, #8]
 8009d02:	b21b      	sxth	r3, r3
 8009d04:	461a      	mov	r2, r3
 8009d06:	23fa      	movs	r3, #250	; 0xfa
 8009d08:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b08b      	sub	sp, #44	; 0x2c
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8009d2a:	2308      	movs	r3, #8
 8009d2c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d38:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d42:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d4c:	69b9      	ldr	r1, [r7, #24]
 8009d4e:	fb01 f202 	mul.w	r2, r1, r2
 8009d52:	1a9b      	subs	r3, r3, r2
 8009d54:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5a:	e030      	b.n	8009dbe <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	4413      	add	r3, r2
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8009d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d11e      	bne.n	8009db0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8009d72:	7ffa      	ldrb	r2, [r7, #31]
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	fa42 f303 	asr.w	r3, r2, r3
 8009d7a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8009d80:	e016      	b.n	8009db0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8009d82:	7ffb      	ldrb	r3, [r7, #31]
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <get_next_good_spad+0x88>
				success = 1;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	fb03 f202 	mul.w	r2, r3, r2
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	601a      	str	r2, [r3, #0]
				break;
 8009da2:	e009      	b.n	8009db8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8009da4:	7ffb      	ldrb	r3, [r7, #31]
 8009da6:	085b      	lsrs	r3, r3, #1
 8009da8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	3301      	adds	r3, #1
 8009dae:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d3e4      	bcc.n	8009d82 <get_next_good_spad+0x66>
				coarseIndex++) {
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	3301      	adds	r3, #1
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d202      	bcs.n	8009dcc <get_next_good_spad+0xb0>
 8009dc6:	7fbb      	ldrb	r3, [r7, #30]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0c7      	beq.n	8009d5c <get_next_good_spad+0x40>
		}
	}
}
 8009dcc:	bf00      	nop
 8009dce:	372c      	adds	r7, #44	; 0x2c
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009de0:	2301      	movs	r3, #1
 8009de2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	099b      	lsrs	r3, r3, #6
 8009de8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009dea:	4a07      	ldr	r2, [pc, #28]	; (8009e08 <is_aperture+0x30>)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <is_aperture+0x22>
		isAperture = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	200002c0 	.word	0x200002c0

08009e0c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b089      	sub	sp, #36	; 0x24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e28:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e32:	69b9      	ldr	r1, [r7, #24]
 8009e34:	fb01 f202 	mul.w	r2, r1, r2
 8009e38:	1a9b      	subs	r3, r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d302      	bcc.n	8009e4a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009e44:	23ce      	movs	r3, #206	; 0xce
 8009e46:	77fb      	strb	r3, [r7, #31]
 8009e48:	e010      	b.n	8009e6c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	4413      	add	r3, r2
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b25a      	sxtb	r2, r3
 8009e54:	2101      	movs	r1, #1
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5c:	b25b      	sxtb	r3, r3
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	b259      	sxtb	r1, r3
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	4413      	add	r3, r2
 8009e68:	b2ca      	uxtb	r2, r1
 8009e6a:	701a      	strb	r2, [r3, #0]

	return status;
 8009e6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3724      	adds	r7, #36	; 0x24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009e86:	2306      	movs	r3, #6
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	21b0      	movs	r1, #176	; 0xb0
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f003 f8bb 	bl	800d008 <VL53L0X_WriteMulti>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8009eac:	2306      	movs	r3, #6
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	21b0      	movs	r1, #176	; 0xb0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f003 f8d8 	bl	800d068 <VL53L0X_ReadMulti>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08c      	sub	sp, #48	; 0x30
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eea:	e02b      	b.n	8009f44 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009eec:	f107 031c 	add.w	r3, r7, #28
 8009ef0:	6a3a      	ldr	r2, [r7, #32]
 8009ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff ff11 	bl	8009d1c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f00:	d103      	bne.n	8009f0a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009f02:	23ce      	movs	r3, #206	; 0xce
 8009f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009f08:	e020      	b.n	8009f4c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f10:	4413      	add	r3, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff ff60 	bl	8009dd8 <is_aperture>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d003      	beq.n	8009f2a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009f22:	23ce      	movs	r3, #206	; 0xce
 8009f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009f28:	e010      	b.n	8009f4c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009f2e:	6a3a      	ldr	r2, [r7, #32]
 8009f30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f32:	6838      	ldr	r0, [r7, #0]
 8009f34:	f7ff ff6a 	bl	8009e0c <enable_spad_bit>
		currentSpad++;
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	3301      	adds	r3, #1
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d3cf      	bcc.n	8009eec <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8009f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f4e:	6a3a      	ldr	r2, [r7, #32]
 8009f50:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009f52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff ff8d 	bl	8009e7c <set_ref_spad_map>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009f68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d121      	bne.n	8009fb4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009f70:	f107 0314 	add.w	r3, r7, #20
 8009f74:	4619      	mov	r1, r3
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f7ff ff93 	bl	8009ea2 <get_ref_spad_map>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009f86:	e011      	b.n	8009fac <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	4413      	add	r3, r2
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	f107 0114 	add.w	r1, r7, #20
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	440b      	add	r3, r1
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d003      	beq.n	8009fa6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009f9e:	23ce      	movs	r3, #206	; 0xce
 8009fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009fa4:	e006      	b.n	8009fb4 <enable_ref_spads+0xec>
			}
			i++;
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	3301      	adds	r3, #1
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8009fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d3e9      	bcc.n	8009f88 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009fb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3730      	adds	r7, #48	; 0x30
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08a      	sub	sp, #40	; 0x28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009fe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d107      	bne.n	8009ff8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009fe8:	22c0      	movs	r2, #192	; 0xc0
 8009fea:	2101      	movs	r1, #1
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f003 f867 	bl	800d0c0 <VL53L0X_WrByte>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009ff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d108      	bne.n	800a012 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800a000:	f107 0308 	add.w	r3, r7, #8
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7ff fc48 	bl	800989c <VL53L0X_PerformSingleRangingMeasurement>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800a012:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a016:	2b00      	cmp	r3, #0
 800a018:	d107      	bne.n	800a02a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a01a:	2201      	movs	r2, #1
 800a01c:	21ff      	movs	r1, #255	; 0xff
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f003 f84e 	bl	800d0c0 <VL53L0X_WrByte>
 800a024:	4603      	mov	r3, r0
 800a026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800a02a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d107      	bne.n	800a042 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	21b6      	movs	r1, #182	; 0xb6
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f003 f8ee 	bl	800d218 <VL53L0X_RdWord>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800a042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a046:	2b00      	cmp	r3, #0
 800a048:	d107      	bne.n	800a05a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a04a:	2200      	movs	r2, #0
 800a04c:	21ff      	movs	r1, #255	; 0xff
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f003 f836 	bl	800d0c0 <VL53L0X_WrByte>
 800a054:	4603      	mov	r3, r0
 800a056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800a05a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d112      	bne.n	800a088 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a062:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a066:	461a      	mov	r2, r3
 800a068:	2101      	movs	r1, #1
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f003 f828 	bl	800d0c0 <VL53L0X_WrByte>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800a076:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d104      	bne.n	800a088 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a084:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800a088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3728      	adds	r7, #40	; 0x28
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800a094:	b590      	push	{r4, r7, lr}
 800a096:	b09d      	sub	sp, #116	; 0x74
 800a098:	af06      	add	r7, sp, #24
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800a0a6:	23b4      	movs	r3, #180	; 0xb4
 800a0a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800a0b0:	232c      	movs	r3, #44	; 0x2c
 800a0b2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800a0c0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a0c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800a0ce:	2306      	movs	r3, #6
 800a0d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800a0f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0fe:	e009      	b.n	800a114 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a104:	4413      	add	r3, r2
 800a106:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a110:	3301      	adds	r3, #1
 800a112:	64bb      	str	r3, [r7, #72]	; 0x48
 800a114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	429a      	cmp	r2, r3
 800a11a:	d3f1      	bcc.n	800a100 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a11c:	2201      	movs	r2, #1
 800a11e:	21ff      	movs	r1, #255	; 0xff
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f002 ffcd 	bl	800d0c0 <VL53L0X_WrByte>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800a12c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a130:	2b00      	cmp	r3, #0
 800a132:	d107      	bne.n	800a144 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800a134:	2200      	movs	r2, #0
 800a136:	214f      	movs	r1, #79	; 0x4f
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f002 ffc1 	bl	800d0c0 <VL53L0X_WrByte>
 800a13e:	4603      	mov	r3, r0
 800a140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a144:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d107      	bne.n	800a15c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800a14c:	222c      	movs	r2, #44	; 0x2c
 800a14e:	214e      	movs	r1, #78	; 0x4e
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f002 ffb5 	bl	800d0c0 <VL53L0X_WrByte>
 800a156:	4603      	mov	r3, r0
 800a158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a15c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a160:	2b00      	cmp	r3, #0
 800a162:	d107      	bne.n	800a174 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a164:	2200      	movs	r2, #0
 800a166:	21ff      	movs	r1, #255	; 0xff
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f002 ffa9 	bl	800d0c0 <VL53L0X_WrByte>
 800a16e:	4603      	mov	r3, r0
 800a170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800a174:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d109      	bne.n	800a190 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800a17c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a180:	461a      	mov	r2, r3
 800a182:	21b6      	movs	r1, #182	; 0xb6
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f002 ff9b 	bl	800d0c0 <VL53L0X_WrByte>
 800a18a:	4603      	mov	r3, r0
 800a18c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800a190:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a194:	2b00      	cmp	r3, #0
 800a196:	d107      	bne.n	800a1a8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800a198:	2200      	movs	r2, #0
 800a19a:	2180      	movs	r1, #128	; 0x80
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f002 ff8f 	bl	800d0c0 <VL53L0X_WrByte>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800a1a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800a1b0:	f107 0210 	add.w	r2, r7, #16
 800a1b4:	f107 0111 	add.w	r1, r7, #17
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fbbb 	bl	800a936 <VL53L0X_perform_ref_calibration>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800a1c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d121      	bne.n	800a212 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800a1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800a1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1dc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800a1ea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a1ee:	f107 0218 	add.w	r2, r7, #24
 800a1f2:	9204      	str	r2, [sp, #16]
 800a1f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1f6:	9203      	str	r2, [sp, #12]
 800a1f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1fa:	9202      	str	r2, [sp, #8]
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	4623      	mov	r3, r4
 800a204:	4602      	mov	r2, r0
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f7ff fe5e 	bl	8009ec8 <enable_ref_spads>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a212:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a216:	2b00      	cmp	r3, #0
 800a218:	d174      	bne.n	800a304 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800a21e:	f107 0312 	add.w	r3, r7, #18
 800a222:	4619      	mov	r1, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7ff fecb 	bl	8009fc0 <perform_ref_signal_measurement>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800a230:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a234:	2b00      	cmp	r3, #0
 800a236:	d161      	bne.n	800a2fc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800a238:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800a23a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d25d      	bcs.n	800a2fc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800a240:	2300      	movs	r3, #0
 800a242:	64bb      	str	r3, [r7, #72]	; 0x48
 800a244:	e009      	b.n	800a25a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a250:	2200      	movs	r2, #0
 800a252:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800a254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a256:	3301      	adds	r3, #1
 800a258:	64bb      	str	r3, [r7, #72]	; 0x48
 800a25a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	429a      	cmp	r2, r3
 800a260:	d3f1      	bcc.n	800a246 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800a262:	e002      	b.n	800a26a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800a264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a266:	3301      	adds	r3, #1
 800a268:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800a26a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800a26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a270:	4413      	add	r3, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff fdb0 	bl	8009dd8 <is_aperture>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800a27e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	429a      	cmp	r2, r3
 800a284:	d3ee      	bcc.n	800a264 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800a286:	2301      	movs	r3, #1
 800a288:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800a28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a28c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800a29a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a29e:	f107 0218 	add.w	r2, r7, #24
 800a2a2:	9204      	str	r2, [sp, #16]
 800a2a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2a6:	9203      	str	r2, [sp, #12]
 800a2a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2aa:	9202      	str	r2, [sp, #8]
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	4623      	mov	r3, r4
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff fe06 	bl	8009ec8 <enable_ref_spads>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800a2c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d11b      	bne.n	800a302 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800a2ce:	f107 0312 	add.w	r3, r7, #18
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f7ff fe73 	bl	8009fc0 <perform_ref_signal_measurement>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800a2e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10c      	bne.n	800a302 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800a2e8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800a2ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d208      	bcs.n	800a302 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800a2fa:	e002      	b.n	800a302 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a300:	e000      	b.n	800a304 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800a302:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a304:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f040 80af 	bne.w	800a46c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800a30e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800a310:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a312:	429a      	cmp	r2, r3
 800a314:	f240 80aa 	bls.w	800a46c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800a318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a31a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a320:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800a328:	f107 031c 	add.w	r3, r7, #28
 800a32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a32e:	4618      	mov	r0, r3
 800a330:	f005 fd10 	bl	800fd54 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800a334:	8a7b      	ldrh	r3, [r7, #18]
 800a336:	461a      	mov	r2, r3
 800a338:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	bfb8      	it	lt
 800a340:	425b      	neglt	r3, r3
 800a342:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800a344:	2300      	movs	r3, #0
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800a34a:	e086      	b.n	800a45a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800a352:	f107 0314 	add.w	r3, r7, #20
 800a356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a35a:	f7ff fcdf 	bl	8009d1c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a364:	d103      	bne.n	800a36e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a366:	23ce      	movs	r3, #206	; 0xce
 800a368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800a36c:	e07e      	b.n	800a46c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800a36e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	4413      	add	r3, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff fd2e 	bl	8009dd8 <is_aperture>
 800a37c:	4603      	mov	r3, r0
 800a37e:	461a      	mov	r2, r3
 800a380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a382:	4293      	cmp	r3, r2
 800a384:	d003      	beq.n	800a38e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800a38c:	e06e      	b.n	800a46c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800a38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a390:	3301      	adds	r3, #1
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800a39e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff fd32 	bl	8009e0c <enable_spad_bit>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800a3ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800a3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f7ff fd59 	bl	8009e7c <set_ref_spad_map>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800a3d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d146      	bne.n	800a466 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800a3d8:	f107 0312 	add.w	r3, r7, #18
 800a3dc:	4619      	mov	r1, r3
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7ff fdee 	bl	8009fc0 <perform_ref_signal_measurement>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800a3ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d13b      	bne.n	800a46a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800a3f2:	8a7b      	ldrh	r3, [r7, #18]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bfb8      	it	lt
 800a3fe:	425b      	neglt	r3, r3
 800a400:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800a402:	8a7b      	ldrh	r3, [r7, #18]
 800a404:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a406:	429a      	cmp	r2, r3
 800a408:	d21c      	bcs.n	800a444 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800a40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a40e:	429a      	cmp	r2, r3
 800a410:	d914      	bls.n	800a43c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800a412:	f107 031c 	add.w	r3, r7, #28
 800a416:	4619      	mov	r1, r3
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff fd2f 	bl	8009e7c <set_ref_spad_map>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800a42a:	f107 011c 	add.w	r1, r7, #28
 800a42e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a430:	4618      	mov	r0, r3
 800a432:	f005 fc8f 	bl	800fd54 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800a436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a438:	3b01      	subs	r3, #1
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a442:	e00a      	b.n	800a45a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800a44e:	f107 031c 	add.w	r3, r7, #28
 800a452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a454:	4618      	mov	r0, r3
 800a456:	f005 fc7d 	bl	800fd54 <memcpy>
		while (!complete) {
 800a45a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f43f af74 	beq.w	800a34c <VL53L0X_perform_ref_spad_management+0x2b8>
 800a464:	e002      	b.n	800a46c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a466:	bf00      	nop
 800a468:	e000      	b.n	800a46c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a46a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a46c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a470:	2b00      	cmp	r3, #0
 800a472:	d115      	bne.n	800a4a0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a478:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800a480:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	781a      	ldrb	r2, [r3, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800a4a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	375c      	adds	r7, #92	; 0x5c
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd90      	pop	{r4, r7, pc}

0800a4ac <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800a4ac:	b590      	push	{r4, r7, lr}
 800a4ae:	b093      	sub	sp, #76	; 0x4c
 800a4b0:	af06      	add	r7, sp, #24
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800a4c4:	23b4      	movs	r3, #180	; 0xb4
 800a4c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800a4ca:	2306      	movs	r3, #6
 800a4cc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800a4ce:	232c      	movs	r3, #44	; 0x2c
 800a4d0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	21ff      	movs	r1, #255	; 0xff
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f002 fdf2 	bl	800d0c0 <VL53L0X_WrByte>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a4e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d107      	bne.n	800a4fa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	214f      	movs	r1, #79	; 0x4f
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f002 fde6 	bl	800d0c0 <VL53L0X_WrByte>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a4fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d107      	bne.n	800a512 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800a502:	222c      	movs	r2, #44	; 0x2c
 800a504:	214e      	movs	r1, #78	; 0x4e
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f002 fdda 	bl	800d0c0 <VL53L0X_WrByte>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a512:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a516:	2b00      	cmp	r3, #0
 800a518:	d107      	bne.n	800a52a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a51a:	2200      	movs	r2, #0
 800a51c:	21ff      	movs	r1, #255	; 0xff
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f002 fdce 	bl	800d0c0 <VL53L0X_WrByte>
 800a524:	4603      	mov	r3, r0
 800a526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a52a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d109      	bne.n	800a546 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800a532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a536:	461a      	mov	r2, r3
 800a538:	21b6      	movs	r1, #182	; 0xb6
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f002 fdc0 	bl	800d0c0 <VL53L0X_WrByte>
 800a540:	4603      	mov	r3, r0
 800a542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800a546:	2300      	movs	r3, #0
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
 800a54a:	e009      	b.n	800a560 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	4413      	add	r3, r2
 800a552:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a556:	2200      	movs	r2, #0
 800a558:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	3301      	adds	r3, #1
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
 800a560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	429a      	cmp	r2, r3
 800a566:	d3f1      	bcc.n	800a54c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d011      	beq.n	800a592 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a56e:	e002      	b.n	800a576 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800a570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a572:	3301      	adds	r3, #1
 800a574:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a576:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	4413      	add	r3, r2
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fc2a 	bl	8009dd8 <is_aperture>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d103      	bne.n	800a592 <VL53L0X_set_reference_spads+0xe6>
 800a58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d3ee      	bcc.n	800a570 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800a59e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5a2:	79f9      	ldrb	r1, [r7, #7]
 800a5a4:	f107 0214 	add.w	r2, r7, #20
 800a5a8:	9204      	str	r2, [sp, #16]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	9203      	str	r2, [sp, #12]
 800a5ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5b0:	9202      	str	r2, [sp, #8]
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	4623      	mov	r3, r4
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f7ff fc83 	bl	8009ec8 <enable_ref_spads>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800a5c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10c      	bne.n	800a5ea <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	79fa      	ldrb	r2, [r7, #7]
 800a5e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800a5ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3734      	adds	r7, #52	; 0x34
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd90      	pop	{r4, r7, pc}

0800a5f6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a602:	2300      	movs	r3, #0
 800a604:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10a      	bne.n	800a624 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	f043 0301 	orr.w	r3, r3, #1
 800a614:	b2db      	uxtb	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	2100      	movs	r1, #0
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f002 fd50 	bl	800d0c0 <VL53L0X_WrByte>
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800a624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d104      	bne.n	800a636 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f9bf 	bl	800a9b0 <VL53L0X_measurement_poll_for_completion>
 800a632:	4603      	mov	r3, r0
 800a634:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d105      	bne.n	800a64a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a63e:	2100      	movs	r1, #0
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff fab5 	bl	8009bb0 <VL53L0X_ClearInterruptMask>
 800a646:	4603      	mov	r3, r0
 800a648:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a652:	2200      	movs	r2, #0
 800a654:	2100      	movs	r1, #0
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f002 fd32 	bl	800d0c0 <VL53L0X_WrByte>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800a660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	4608      	mov	r0, r1
 800a676:	4611      	mov	r1, r2
 800a678:	461a      	mov	r2, r3
 800a67a:	4603      	mov	r3, r0
 800a67c:	70fb      	strb	r3, [r7, #3]
 800a67e:	460b      	mov	r3, r1
 800a680:	70bb      	strb	r3, [r7, #2]
 800a682:	4613      	mov	r3, r2
 800a684:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a68e:	2201      	movs	r2, #1
 800a690:	21ff      	movs	r1, #255	; 0xff
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f002 fd14 	bl	800d0c0 <VL53L0X_WrByte>
 800a698:	4603      	mov	r3, r0
 800a69a:	461a      	mov	r2, r3
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f002 fd0a 	bl	800d0c0 <VL53L0X_WrByte>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	21ff      	movs	r1, #255	; 0xff
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f002 fd00 	bl	800d0c0 <VL53L0X_WrByte>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d01e      	beq.n	800a70e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800a6d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d009      	beq.n	800a6ec <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	21cb      	movs	r1, #203	; 0xcb
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f002 fd71 	bl	800d1c4 <VL53L0X_RdByte>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a6ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d02a      	beq.n	800a74a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a6f4:	f107 030e 	add.w	r3, r7, #14
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	21ee      	movs	r1, #238	; 0xee
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 fd61 	bl	800d1c4 <VL53L0X_RdByte>
 800a702:	4603      	mov	r3, r0
 800a704:	461a      	mov	r2, r3
 800a706:	7bfb      	ldrb	r3, [r7, #15]
 800a708:	4313      	orrs	r3, r2
 800a70a:	73fb      	strb	r3, [r7, #15]
 800a70c:	e01d      	b.n	800a74a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800a70e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a716:	78bb      	ldrb	r3, [r7, #2]
 800a718:	461a      	mov	r2, r3
 800a71a:	21cb      	movs	r1, #203	; 0xcb
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f002 fccf 	bl	800d0c0 <VL53L0X_WrByte>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	4313      	orrs	r3, r2
 800a72a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a72c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00a      	beq.n	800a74a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a734:	787b      	ldrb	r3, [r7, #1]
 800a736:	2280      	movs	r2, #128	; 0x80
 800a738:	21ee      	movs	r1, #238	; 0xee
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f002 fd0e 	bl	800d15c <VL53L0X_UpdateByte>
 800a740:	4603      	mov	r3, r0
 800a742:	461a      	mov	r2, r3
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	4313      	orrs	r3, r2
 800a748:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a74a:	2201      	movs	r2, #1
 800a74c:	21ff      	movs	r1, #255	; 0xff
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f002 fcb6 	bl	800d0c0 <VL53L0X_WrByte>
 800a754:	4603      	mov	r3, r0
 800a756:	461a      	mov	r2, r3
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a75e:	2201      	movs	r2, #1
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f002 fcac 	bl	800d0c0 <VL53L0X_WrByte>
 800a768:	4603      	mov	r3, r0
 800a76a:	461a      	mov	r2, r3
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	4313      	orrs	r3, r2
 800a770:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a772:	2200      	movs	r2, #0
 800a774:	21ff      	movs	r1, #255	; 0xff
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f002 fca2 	bl	800d0c0 <VL53L0X_WrByte>
 800a77c:	4603      	mov	r3, r0
 800a77e:	461a      	mov	r2, r3
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	4313      	orrs	r3, r2
 800a784:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a786:	7bbb      	ldrb	r3, [r7, #14]
 800a788:	f023 0310 	bic.w	r3, r3, #16
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	701a      	strb	r2, [r3, #0]

	return Status;
 800a792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b08a      	sub	sp, #40	; 0x28
 800a7a2:	af04      	add	r7, sp, #16
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	71fb      	strb	r3, [r7, #7]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a7c8:	79bb      	ldrb	r3, [r7, #6]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a7d4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	2101      	movs	r1, #1
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f002 fc70 	bl	800d0c0 <VL53L0X_WrByte>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a7e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a7ec:	2140      	movs	r1, #64	; 0x40
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7ff ff01 	bl	800a5f6 <VL53L0X_perform_single_ref_calibration>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a7f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d115      	bne.n	800a82c <VL53L0X_perform_vhv_calibration+0x8e>
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d112      	bne.n	800a82c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a806:	7d39      	ldrb	r1, [r7, #20]
 800a808:	7d7a      	ldrb	r2, [r7, #21]
 800a80a:	2300      	movs	r3, #0
 800a80c:	9303      	str	r3, [sp, #12]
 800a80e:	2301      	movs	r3, #1
 800a810:	9302      	str	r3, [sp, #8]
 800a812:	f107 0313 	add.w	r3, r7, #19
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	460b      	mov	r3, r1
 800a81e:	2101      	movs	r1, #1
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7ff ff23 	bl	800a66c <VL53L0X_ref_calibration_io>
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]
 800a82a:	e002      	b.n	800a832 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d112      	bne.n	800a860 <VL53L0X_perform_vhv_calibration+0xc2>
 800a83a:	79bb      	ldrb	r3, [r7, #6]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00f      	beq.n	800a860 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a840:	7dbb      	ldrb	r3, [r7, #22]
 800a842:	461a      	mov	r2, r3
 800a844:	2101      	movs	r1, #1
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f002 fc3a 	bl	800d0c0 <VL53L0X_WrByte>
 800a84c:	4603      	mov	r3, r0
 800a84e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d103      	bne.n	800a860 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	7dba      	ldrb	r2, [r7, #22]
 800a85c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a860:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08a      	sub	sp, #40	; 0x28
 800a870:	af04      	add	r7, sp, #16
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	4611      	mov	r1, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	460b      	mov	r3, r1
 800a87c:	71fb      	strb	r3, [r7, #7]
 800a87e:	4613      	mov	r3, r2
 800a880:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a882:	2300      	movs	r3, #0
 800a884:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a892:	79bb      	ldrb	r3, [r7, #6]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d003      	beq.n	800a8a0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a89e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f002 fc0b 	bl	800d0c0 <VL53L0X_WrByte>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d105      	bne.n	800a8c2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f7ff fe9c 	bl	800a5f6 <VL53L0X_perform_single_ref_calibration>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d115      	bne.n	800a8f6 <VL53L0X_perform_phase_calibration+0x8a>
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d112      	bne.n	800a8f6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a8d0:	7d39      	ldrb	r1, [r7, #20]
 800a8d2:	7d7a      	ldrb	r2, [r7, #21]
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	9303      	str	r3, [sp, #12]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9302      	str	r3, [sp, #8]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	f107 0313 	add.w	r3, r7, #19
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7ff febe 	bl	800a66c <VL53L0X_ref_calibration_io>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	75fb      	strb	r3, [r7, #23]
 800a8f4:	e002      	b.n	800a8fc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a8fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d112      	bne.n	800a92a <VL53L0X_perform_phase_calibration+0xbe>
 800a904:	79bb      	ldrb	r3, [r7, #6]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00f      	beq.n	800a92a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a90a:	7dbb      	ldrb	r3, [r7, #22]
 800a90c:	461a      	mov	r2, r3
 800a90e:	2101      	movs	r1, #1
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f002 fbd5 	bl	800d0c0 <VL53L0X_WrByte>
 800a916:	4603      	mov	r3, r0
 800a918:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a91a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d103      	bne.n	800a92a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	7dba      	ldrb	r2, [r7, #22]
 800a926:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a92a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b086      	sub	sp, #24
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	60f8      	str	r0, [r7, #12]
 800a93e:	60b9      	str	r1, [r7, #8]
 800a940:	607a      	str	r2, [r7, #4]
 800a942:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a944:	2300      	movs	r3, #0
 800a946:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a952:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a954:	78fa      	ldrb	r2, [r7, #3]
 800a956:	2300      	movs	r3, #0
 800a958:	68b9      	ldr	r1, [r7, #8]
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f7ff ff1f 	bl	800a79e <VL53L0X_perform_vhv_calibration>
 800a960:	4603      	mov	r3, r0
 800a962:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d107      	bne.n	800a97c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a96c:	78fa      	ldrb	r2, [r7, #3]
 800a96e:	2300      	movs	r3, #0
 800a970:	6879      	ldr	r1, [r7, #4]
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f7ff ff7a 	bl	800a86c <VL53L0X_perform_phase_calibration>
 800a978:	4603      	mov	r3, r0
 800a97a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10f      	bne.n	800a9a4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a984:	7dbb      	ldrb	r3, [r7, #22]
 800a986:	461a      	mov	r2, r3
 800a988:	2101      	movs	r1, #1
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f002 fb98 	bl	800d0c0 <VL53L0X_WrByte>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d103      	bne.n	800a9a4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	7dba      	ldrb	r2, [r7, #22]
 800a9a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a9a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3718      	adds	r7, #24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a9c4:	f107 030f 	add.w	r3, r7, #15
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7fe fe02 	bl	80095d4 <VL53L0X_GetMeasurementDataReady>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a9d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d110      	bne.n	800a9fe <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d00f      	beq.n	800aa02 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a9ee:	d302      	bcc.n	800a9f6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a9f0:	23f9      	movs	r3, #249	; 0xf9
 800a9f2:	75fb      	strb	r3, [r7, #23]
			break;
 800a9f4:	e006      	b.n	800aa04 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f002 fc82 	bl	800d300 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a9fc:	e7e2      	b.n	800a9c4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a9fe:	bf00      	nop
 800aa00:	e000      	b.n	800aa04 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800aa02:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800aa04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	3301      	adds	r3, #1
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b085      	sub	sp, #20
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	085b      	lsrs	r3, r3, #1
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800aa68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa6c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800aa6e:	e002      	b.n	800aa76 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	089b      	lsrs	r3, r3, #2
 800aa74:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d8f8      	bhi.n	800aa70 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800aa7e:	e017      	b.n	800aab0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	4413      	add	r3, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d30b      	bcc.n	800aaa4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4413      	add	r3, r2
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	085b      	lsrs	r3, r3, #1
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e002      	b.n	800aaaa <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	085b      	lsrs	r3, r3, #1
 800aaa8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	089b      	lsrs	r3, r3, #2
 800aaae:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e4      	bne.n	800aa80 <VL53L0X_isqrt+0x24>
	}

	return res;
 800aab6:	68fb      	ldr	r3, [r7, #12]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aacc:	2300      	movs	r3, #0
 800aace:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800aad0:	2200      	movs	r2, #0
 800aad2:	2183      	movs	r1, #131	; 0x83
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f002 faf3 	bl	800d0c0 <VL53L0X_WrByte>
 800aada:	4603      	mov	r3, r0
 800aadc:	461a      	mov	r2, r3
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800aae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d11e      	bne.n	800ab2a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800aaf0:	f107 030f 	add.w	r3, r7, #15
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	2183      	movs	r1, #131	; 0x83
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f002 fb63 	bl	800d1c4 <VL53L0X_RdByte>
 800aafe:	4603      	mov	r3, r0
 800ab00:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10a      	bne.n	800ab1e <VL53L0X_device_read_strobe+0x5a>
 800ab08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3301      	adds	r3, #1
 800ab14:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab1c:	d3e8      	bcc.n	800aaf0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab24:	d301      	bcc.n	800ab2a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800ab26:	23f9      	movs	r3, #249	; 0xf9
 800ab28:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	2183      	movs	r1, #131	; 0x83
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f002 fac6 	bl	800d0c0 <VL53L0X_WrByte>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461a      	mov	r2, r3
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800ab3e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b098      	sub	sp, #96	; 0x60
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab56:	2300      	movs	r3, #0
 800ab58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800ab7a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800ab7e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ab92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800ab96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab9a:	2b07      	cmp	r3, #7
 800ab9c:	f000 8408 	beq.w	800b3b0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800aba0:	2201      	movs	r2, #1
 800aba2:	2180      	movs	r1, #128	; 0x80
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f002 fa8b 	bl	800d0c0 <VL53L0X_WrByte>
 800abaa:	4603      	mov	r3, r0
 800abac:	461a      	mov	r2, r3
 800abae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abb2:	4313      	orrs	r3, r2
 800abb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800abb8:	2201      	movs	r2, #1
 800abba:	21ff      	movs	r1, #255	; 0xff
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f002 fa7f 	bl	800d0c0 <VL53L0X_WrByte>
 800abc2:	4603      	mov	r3, r0
 800abc4:	461a      	mov	r2, r3
 800abc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abca:	4313      	orrs	r3, r2
 800abcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800abd0:	2200      	movs	r2, #0
 800abd2:	2100      	movs	r1, #0
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f002 fa73 	bl	800d0c0 <VL53L0X_WrByte>
 800abda:	4603      	mov	r3, r0
 800abdc:	461a      	mov	r2, r3
 800abde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abe2:	4313      	orrs	r3, r2
 800abe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800abe8:	2206      	movs	r2, #6
 800abea:	21ff      	movs	r1, #255	; 0xff
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f002 fa67 	bl	800d0c0 <VL53L0X_WrByte>
 800abf2:	4603      	mov	r3, r0
 800abf4:	461a      	mov	r2, r3
 800abf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abfa:	4313      	orrs	r3, r2
 800abfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800ac00:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ac04:	461a      	mov	r2, r3
 800ac06:	2183      	movs	r1, #131	; 0x83
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f002 fadb 	bl	800d1c4 <VL53L0X_RdByte>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	461a      	mov	r2, r3
 800ac12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac16:	4313      	orrs	r3, r2
 800ac18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800ac1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac20:	f043 0304 	orr.w	r3, r3, #4
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	461a      	mov	r2, r3
 800ac28:	2183      	movs	r1, #131	; 0x83
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f002 fa48 	bl	800d0c0 <VL53L0X_WrByte>
 800ac30:	4603      	mov	r3, r0
 800ac32:	461a      	mov	r2, r3
 800ac34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800ac3e:	2207      	movs	r2, #7
 800ac40:	21ff      	movs	r1, #255	; 0xff
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f002 fa3c 	bl	800d0c0 <VL53L0X_WrByte>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac50:	4313      	orrs	r3, r2
 800ac52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800ac56:	2201      	movs	r2, #1
 800ac58:	2181      	movs	r1, #129	; 0x81
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f002 fa30 	bl	800d0c0 <VL53L0X_WrByte>
 800ac60:	4603      	mov	r3, r0
 800ac62:	461a      	mov	r2, r3
 800ac64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f002 fb46 	bl	800d300 <VL53L0X_PollingDelay>
 800ac74:	4603      	mov	r3, r0
 800ac76:	461a      	mov	r2, r3
 800ac78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ac82:	2201      	movs	r2, #1
 800ac84:	2180      	movs	r1, #128	; 0x80
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f002 fa1a 	bl	800d0c0 <VL53L0X_WrByte>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac94:	4313      	orrs	r3, r2
 800ac96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8098 	beq.w	800add6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800aca6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800acaa:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f040 8091 	bne.w	800add6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800acb4:	226b      	movs	r2, #107	; 0x6b
 800acb6:	2194      	movs	r1, #148	; 0x94
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f002 fa01 	bl	800d0c0 <VL53L0X_WrByte>
 800acbe:	4603      	mov	r3, r0
 800acc0:	461a      	mov	r2, r3
 800acc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc6:	4313      	orrs	r3, r2
 800acc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff fef9 	bl	800aac4 <VL53L0X_device_read_strobe>
 800acd2:	4603      	mov	r3, r0
 800acd4:	461a      	mov	r2, r3
 800acd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acda:	4313      	orrs	r3, r2
 800acdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ace0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ace4:	461a      	mov	r2, r3
 800ace6:	2190      	movs	r1, #144	; 0x90
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f002 facd 	bl	800d288 <VL53L0X_RdDWord>
 800acee:	4603      	mov	r3, r0
 800acf0:	461a      	mov	r2, r3
 800acf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	0a1b      	lsrs	r3, r3, #8
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	0bdb      	lsrs	r3, r3, #15
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	f003 0301 	and.w	r3, r3, #1
 800ad14:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800ad18:	2224      	movs	r2, #36	; 0x24
 800ad1a:	2194      	movs	r1, #148	; 0x94
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f002 f9cf 	bl	800d0c0 <VL53L0X_WrByte>
 800ad22:	4603      	mov	r3, r0
 800ad24:	461a      	mov	r2, r3
 800ad26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff fec7 	bl	800aac4 <VL53L0X_device_read_strobe>
 800ad36:	4603      	mov	r3, r0
 800ad38:	461a      	mov	r2, r3
 800ad3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad48:	461a      	mov	r2, r3
 800ad4a:	2190      	movs	r1, #144	; 0x90
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f002 fa9b 	bl	800d288 <VL53L0X_RdDWord>
 800ad52:	4603      	mov	r3, r0
 800ad54:	461a      	mov	r2, r3
 800ad56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	0e1b      	lsrs	r3, r3, #24
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	0c1b      	lsrs	r3, r3, #16
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	0a1b      	lsrs	r3, r3, #8
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800ad7e:	2225      	movs	r2, #37	; 0x25
 800ad80:	2194      	movs	r1, #148	; 0x94
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f002 f99c 	bl	800d0c0 <VL53L0X_WrByte>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad90:	4313      	orrs	r3, r2
 800ad92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fe94 	bl	800aac4 <VL53L0X_device_read_strobe>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ada4:	4313      	orrs	r3, r2
 800ada6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800adaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800adae:	461a      	mov	r2, r3
 800adb0:	2190      	movs	r1, #144	; 0x90
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f002 fa68 	bl	800d288 <VL53L0X_RdDWord>
 800adb8:	4603      	mov	r3, r0
 800adba:	461a      	mov	r2, r3
 800adbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adc0:	4313      	orrs	r3, r2
 800adc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	0e1b      	lsrs	r3, r3, #24
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	0c1b      	lsrs	r3, r3, #16
 800add2:	b2db      	uxtb	r3, r3
 800add4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	f003 0302 	and.w	r3, r3, #2
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8189 	beq.w	800b0f4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ade2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ade6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 8182 	bne.w	800b0f4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800adf0:	2202      	movs	r2, #2
 800adf2:	2194      	movs	r1, #148	; 0x94
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f002 f963 	bl	800d0c0 <VL53L0X_WrByte>
 800adfa:	4603      	mov	r3, r0
 800adfc:	461a      	mov	r2, r3
 800adfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae02:	4313      	orrs	r3, r2
 800ae04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff fe5b 	bl	800aac4 <VL53L0X_device_read_strobe>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	461a      	mov	r2, r3
 800ae12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae16:	4313      	orrs	r3, r2
 800ae18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800ae1c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800ae20:	461a      	mov	r2, r3
 800ae22:	2190      	movs	r1, #144	; 0x90
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f002 f9cd 	bl	800d1c4 <VL53L0X_RdByte>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae32:	4313      	orrs	r3, r2
 800ae34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ae38:	227b      	movs	r2, #123	; 0x7b
 800ae3a:	2194      	movs	r1, #148	; 0x94
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f002 f93f 	bl	800d0c0 <VL53L0X_WrByte>
 800ae42:	4603      	mov	r3, r0
 800ae44:	461a      	mov	r2, r3
 800ae46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff fe37 	bl	800aac4 <VL53L0X_device_read_strobe>
 800ae56:	4603      	mov	r3, r0
 800ae58:	461a      	mov	r2, r3
 800ae5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800ae64:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2190      	movs	r1, #144	; 0x90
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f002 f9a9 	bl	800d1c4 <VL53L0X_RdByte>
 800ae72:	4603      	mov	r3, r0
 800ae74:	461a      	mov	r2, r3
 800ae76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800ae80:	2277      	movs	r2, #119	; 0x77
 800ae82:	2194      	movs	r1, #148	; 0x94
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f002 f91b 	bl	800d0c0 <VL53L0X_WrByte>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae92:	4313      	orrs	r3, r2
 800ae94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7ff fe13 	bl	800aac4 <VL53L0X_device_read_strobe>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	461a      	mov	r2, r3
 800aea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aea6:	4313      	orrs	r3, r2
 800aea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aeac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	2190      	movs	r1, #144	; 0x90
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f002 f9e7 	bl	800d288 <VL53L0X_RdDWord>
 800aeba:	4603      	mov	r3, r0
 800aebc:	461a      	mov	r2, r3
 800aebe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	0e5b      	lsrs	r3, r3, #25
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	0c9b      	lsrs	r3, r3, #18
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	0adb      	lsrs	r3, r3, #11
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	091b      	lsrs	r3, r3, #4
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	b2db      	uxtb	r3, r3
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	b2db      	uxtb	r3, r3
 800af08:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800af12:	2278      	movs	r2, #120	; 0x78
 800af14:	2194      	movs	r1, #148	; 0x94
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f002 f8d2 	bl	800d0c0 <VL53L0X_WrByte>
 800af1c:	4603      	mov	r3, r0
 800af1e:	461a      	mov	r2, r3
 800af20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af24:	4313      	orrs	r3, r2
 800af26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7ff fdca 	bl	800aac4 <VL53L0X_device_read_strobe>
 800af30:	4603      	mov	r3, r0
 800af32:	461a      	mov	r2, r3
 800af34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af38:	4313      	orrs	r3, r2
 800af3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800af3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af42:	461a      	mov	r2, r3
 800af44:	2190      	movs	r1, #144	; 0x90
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f002 f99e 	bl	800d288 <VL53L0X_RdDWord>
 800af4c:	4603      	mov	r3, r0
 800af4e:	461a      	mov	r2, r3
 800af50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af54:	4313      	orrs	r3, r2
 800af56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	0f5b      	lsrs	r3, r3, #29
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af64:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800af66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af6a:	4413      	add	r3, r2
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	0d9b      	lsrs	r3, r3, #22
 800af74:	b2db      	uxtb	r3, r3
 800af76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	0bdb      	lsrs	r3, r3, #15
 800af82:	b2db      	uxtb	r3, r3
 800af84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	0a1b      	lsrs	r3, r3, #8
 800af90:	b2db      	uxtb	r3, r3
 800af92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af96:	b2db      	uxtb	r3, r3
 800af98:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800afa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	019b      	lsls	r3, r3, #6
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800afba:	2279      	movs	r2, #121	; 0x79
 800afbc:	2194      	movs	r1, #148	; 0x94
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f002 f87e 	bl	800d0c0 <VL53L0X_WrByte>
 800afc4:	4603      	mov	r3, r0
 800afc6:	461a      	mov	r2, r3
 800afc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afcc:	4313      	orrs	r3, r2
 800afce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7ff fd76 	bl	800aac4 <VL53L0X_device_read_strobe>
 800afd8:	4603      	mov	r3, r0
 800afda:	461a      	mov	r2, r3
 800afdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afe0:	4313      	orrs	r3, r2
 800afe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800afe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afea:	461a      	mov	r2, r3
 800afec:	2190      	movs	r1, #144	; 0x90
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f002 f94a 	bl	800d288 <VL53L0X_RdDWord>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800affc:	4313      	orrs	r3, r2
 800affe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	0e9b      	lsrs	r3, r3, #26
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800b00e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b012:	4413      	add	r3, r2
 800b014:	b2db      	uxtb	r3, r3
 800b016:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	0cdb      	lsrs	r3, r3, #19
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b022:	b2db      	uxtb	r3, r3
 800b024:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	0b1b      	lsrs	r3, r3, #12
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b030:	b2db      	uxtb	r3, r3
 800b032:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	095b      	lsrs	r3, r3, #5
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	b2db      	uxtb	r3, r3
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800b054:	227a      	movs	r2, #122	; 0x7a
 800b056:	2194      	movs	r1, #148	; 0x94
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f002 f831 	bl	800d0c0 <VL53L0X_WrByte>
 800b05e:	4603      	mov	r3, r0
 800b060:	461a      	mov	r2, r3
 800b062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b066:	4313      	orrs	r3, r2
 800b068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff fd29 	bl	800aac4 <VL53L0X_device_read_strobe>
 800b072:	4603      	mov	r3, r0
 800b074:	461a      	mov	r2, r3
 800b076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b07a:	4313      	orrs	r3, r2
 800b07c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b084:	461a      	mov	r2, r3
 800b086:	2190      	movs	r1, #144	; 0x90
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f002 f8fd 	bl	800d288 <VL53L0X_RdDWord>
 800b08e:	4603      	mov	r3, r0
 800b090:	461a      	mov	r2, r3
 800b092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b096:	4313      	orrs	r3, r2
 800b098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	0f9b      	lsrs	r3, r3, #30
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800b0a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0ac:	4413      	add	r3, r2
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	0ddb      	lsrs	r3, r3, #23
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	0c1b      	lsrs	r3, r3, #16
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	0a5b      	lsrs	r3, r3, #9
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	089b      	lsrs	r3, r3, #2
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800b0f4:	78fb      	ldrb	r3, [r7, #3]
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f000 80f1 	beq.w	800b2e2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b100:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b104:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f040 80ea 	bne.w	800b2e2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b10e:	227b      	movs	r2, #123	; 0x7b
 800b110:	2194      	movs	r1, #148	; 0x94
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 ffd4 	bl	800d0c0 <VL53L0X_WrByte>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b120:	4313      	orrs	r3, r2
 800b122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff fccc 	bl	800aac4 <VL53L0X_device_read_strobe>
 800b12c:	4603      	mov	r3, r0
 800b12e:	461a      	mov	r2, r3
 800b130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b134:	4313      	orrs	r3, r2
 800b136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800b13a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b13e:	461a      	mov	r2, r3
 800b140:	2190      	movs	r1, #144	; 0x90
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f002 f8a0 	bl	800d288 <VL53L0X_RdDWord>
 800b148:	4603      	mov	r3, r0
 800b14a:	461a      	mov	r2, r3
 800b14c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b150:	4313      	orrs	r3, r2
 800b152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800b156:	227c      	movs	r2, #124	; 0x7c
 800b158:	2194      	movs	r1, #148	; 0x94
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f001 ffb0 	bl	800d0c0 <VL53L0X_WrByte>
 800b160:	4603      	mov	r3, r0
 800b162:	461a      	mov	r2, r3
 800b164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b168:	4313      	orrs	r3, r2
 800b16a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7ff fca8 	bl	800aac4 <VL53L0X_device_read_strobe>
 800b174:	4603      	mov	r3, r0
 800b176:	461a      	mov	r2, r3
 800b178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b17c:	4313      	orrs	r3, r2
 800b17e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800b182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b186:	461a      	mov	r2, r3
 800b188:	2190      	movs	r1, #144	; 0x90
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f002 f87c 	bl	800d288 <VL53L0X_RdDWord>
 800b190:	4603      	mov	r3, r0
 800b192:	461a      	mov	r2, r3
 800b194:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b198:	4313      	orrs	r3, r2
 800b19a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800b19e:	2273      	movs	r2, #115	; 0x73
 800b1a0:	2194      	movs	r1, #148	; 0x94
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f001 ff8c 	bl	800d0c0 <VL53L0X_WrByte>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff fc84 	bl	800aac4 <VL53L0X_device_read_strobe>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b1ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	2190      	movs	r1, #144	; 0x90
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f002 f858 	bl	800d288 <VL53L0X_RdDWord>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800b1ee:	2274      	movs	r2, #116	; 0x74
 800b1f0:	2194      	movs	r1, #148	; 0x94
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f001 ff64 	bl	800d0c0 <VL53L0X_WrByte>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b200:	4313      	orrs	r3, r2
 800b202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff fc5c 	bl	800aac4 <VL53L0X_device_read_strobe>
 800b20c:	4603      	mov	r3, r0
 800b20e:	461a      	mov	r2, r3
 800b210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b214:	4313      	orrs	r3, r2
 800b216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b21a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b21e:	461a      	mov	r2, r3
 800b220:	2190      	movs	r1, #144	; 0x90
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f002 f830 	bl	800d288 <VL53L0X_RdDWord>
 800b228:	4603      	mov	r3, r0
 800b22a:	461a      	mov	r2, r3
 800b22c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b230:	4313      	orrs	r3, r2
 800b232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800b23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b23c:	4313      	orrs	r3, r2
 800b23e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800b240:	2275      	movs	r2, #117	; 0x75
 800b242:	2194      	movs	r1, #148	; 0x94
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f001 ff3b 	bl	800d0c0 <VL53L0X_WrByte>
 800b24a:	4603      	mov	r3, r0
 800b24c:	461a      	mov	r2, r3
 800b24e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b252:	4313      	orrs	r3, r2
 800b254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff fc33 	bl	800aac4 <VL53L0X_device_read_strobe>
 800b25e:	4603      	mov	r3, r0
 800b260:	461a      	mov	r2, r3
 800b262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b266:	4313      	orrs	r3, r2
 800b268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b26c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b270:	461a      	mov	r2, r3
 800b272:	2190      	movs	r1, #144	; 0x90
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f002 f807 	bl	800d288 <VL53L0X_RdDWord>
 800b27a:	4603      	mov	r3, r0
 800b27c:	461a      	mov	r2, r3
 800b27e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b282:	4313      	orrs	r3, r2
 800b284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800b290:	2276      	movs	r2, #118	; 0x76
 800b292:	2194      	movs	r1, #148	; 0x94
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f001 ff13 	bl	800d0c0 <VL53L0X_WrByte>
 800b29a:	4603      	mov	r3, r0
 800b29c:	461a      	mov	r2, r3
 800b29e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7ff fc0b 	bl	800aac4 <VL53L0X_device_read_strobe>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b2bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	2190      	movs	r1, #144	; 0x90
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 ffdf 	bl	800d288 <VL53L0X_RdDWord>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2da:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800b2dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2181      	movs	r1, #129	; 0x81
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 feea 	bl	800d0c0 <VL53L0X_WrByte>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b2fa:	2206      	movs	r2, #6
 800b2fc:	21ff      	movs	r1, #255	; 0xff
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f001 fede 	bl	800d0c0 <VL53L0X_WrByte>
 800b304:	4603      	mov	r3, r0
 800b306:	461a      	mov	r2, r3
 800b308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b30c:	4313      	orrs	r3, r2
 800b30e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b312:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b316:	461a      	mov	r2, r3
 800b318:	2183      	movs	r1, #131	; 0x83
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f001 ff52 	bl	800d1c4 <VL53L0X_RdByte>
 800b320:	4603      	mov	r3, r0
 800b322:	461a      	mov	r2, r3
 800b324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b328:	4313      	orrs	r3, r2
 800b32a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800b32e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b332:	f023 0304 	bic.w	r3, r3, #4
 800b336:	b2db      	uxtb	r3, r3
 800b338:	461a      	mov	r2, r3
 800b33a:	2183      	movs	r1, #131	; 0x83
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f001 febf 	bl	800d0c0 <VL53L0X_WrByte>
 800b342:	4603      	mov	r3, r0
 800b344:	461a      	mov	r2, r3
 800b346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b34a:	4313      	orrs	r3, r2
 800b34c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b350:	2201      	movs	r2, #1
 800b352:	21ff      	movs	r1, #255	; 0xff
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 feb3 	bl	800d0c0 <VL53L0X_WrByte>
 800b35a:	4603      	mov	r3, r0
 800b35c:	461a      	mov	r2, r3
 800b35e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b362:	4313      	orrs	r3, r2
 800b364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b368:	2201      	movs	r2, #1
 800b36a:	2100      	movs	r1, #0
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f001 fea7 	bl	800d0c0 <VL53L0X_WrByte>
 800b372:	4603      	mov	r3, r0
 800b374:	461a      	mov	r2, r3
 800b376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b37a:	4313      	orrs	r3, r2
 800b37c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b380:	2200      	movs	r2, #0
 800b382:	21ff      	movs	r1, #255	; 0xff
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f001 fe9b 	bl	800d0c0 <VL53L0X_WrByte>
 800b38a:	4603      	mov	r3, r0
 800b38c:	461a      	mov	r2, r3
 800b38e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b392:	4313      	orrs	r3, r2
 800b394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b398:	2200      	movs	r2, #0
 800b39a:	2180      	movs	r1, #128	; 0x80
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f001 fe8f 	bl	800d0c0 <VL53L0X_WrByte>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b3b0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f040 808f 	bne.w	800b4d8 <VL53L0X_get_info_from_device+0x98e>
 800b3ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3be:	2b07      	cmp	r3, #7
 800b3c0:	f000 808a 	beq.w	800b4d8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d024      	beq.n	800b418 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b3ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3d2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d11e      	bne.n	800b418 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800b3e0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800b3ea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3f2:	e00e      	b.n	800b412 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800b3f4:	f107 0208 	add.w	r2, r7, #8
 800b3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3fa:	4413      	add	r3, r2
 800b3fc:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b402:	4413      	add	r3, r2
 800b404:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b408:	460a      	mov	r2, r1
 800b40a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b40e:	3301      	adds	r3, #1
 800b410:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b414:	2b05      	cmp	r3, #5
 800b416:	dded      	ble.n	800b3f4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	f003 0302 	and.w	r3, r3, #2
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d018      	beq.n	800b454 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b422:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b426:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d112      	bne.n	800b454 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b42e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b438:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	33f3      	adds	r3, #243	; 0xf3
 800b446:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800b448:	f107 0310 	add.w	r3, r7, #16
 800b44c:	4619      	mov	r1, r3
 800b44e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b450:	f004 fcb6 	bl	800fdc0 <strcpy>

		}

		if (((option & 4) == 4) &&
 800b454:	78fb      	ldrb	r3, [r7, #3]
 800b456:	f003 0304 	and.w	r3, r3, #4
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d030      	beq.n	800b4c0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b45e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b462:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b466:	2b00      	cmp	r3, #0
 800b468:	d12a      	bne.n	800b4c0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800b47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b47c:	025b      	lsls	r3, r3, #9
 800b47e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b484:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800b48e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b490:	2b00      	cmp	r3, #0
 800b492:	d011      	beq.n	800b4b8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800b494:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800b49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b49e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4a2:	fb02 f303 	mul.w	r3, r2, r3
 800b4a6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800b4a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800b4ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b4b0:	425b      	negs	r3, r3
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800b4b8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800b4c0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800b4ce:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b4d8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3760      	adds	r7, #96	; 0x60
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b087      	sub	sp, #28
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800b4f0:	f240 6277 	movw	r2, #1655	; 0x677
 800b4f4:	f04f 0300 	mov.w	r3, #0
 800b4f8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800b4fc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b500:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	fb02 f303 	mul.w	r3, r2, r3
 800b510:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800b512:	68bb      	ldr	r3, [r7, #8]
}
 800b514:	4618      	mov	r0, r3
 800b516:	371c      	adds	r7, #28
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d017      	beq.n	800b56a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b540:	e005      	b.n	800b54e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b548:	89fb      	ldrh	r3, [r7, #14]
 800b54a:	3301      	adds	r3, #1
 800b54c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1f4      	bne.n	800b542 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b558:	89fb      	ldrh	r3, [r7, #14]
 800b55a:	021b      	lsls	r3, r3, #8
 800b55c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	b29b      	uxth	r3, r3
 800b562:	b2db      	uxtb	r3, r3
 800b564:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b566:	4413      	add	r3, r2
 800b568:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b56a:	8afb      	ldrh	r3, [r7, #22]

}
 800b56c:	4618      	mov	r0, r3
 800b56e:	371c      	adds	r7, #28
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b58a:	88fa      	ldrh	r2, [r7, #6]
 800b58c:	0a12      	lsrs	r2, r2, #8
 800b58e:	b292      	uxth	r2, r2
 800b590:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b592:	3301      	adds	r3, #1
 800b594:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b596:	68fb      	ldr	r3, [r7, #12]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7ff ff92 	bl	800b4e4 <VL53L0X_calc_macro_period_ps>
 800b5c0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b5c8:	4a0a      	ldr	r2, [pc, #40]	; (800b5f4 <VL53L0X_calc_timeout_mclks+0x50>)
 800b5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ce:	099b      	lsrs	r3, r3, #6
 800b5d0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5d8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	085b      	lsrs	r3, r3, #1
 800b5e0:	441a      	add	r2, r3
	timeout_period_mclks =
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800b5ea:	69fb      	ldr	r3, [r7, #28]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3720      	adds	r7, #32
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	10624dd3 	.word	0x10624dd3

0800b5f8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	807b      	strh	r3, [r7, #2]
 800b604:	4613      	mov	r3, r2
 800b606:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b60c:	787b      	ldrb	r3, [r7, #1]
 800b60e:	4619      	mov	r1, r3
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff ff67 	bl	800b4e4 <VL53L0X_calc_macro_period_ps>
 800b616:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b61e:	4a0a      	ldr	r2, [pc, #40]	; (800b648 <VL53L0X_calc_timeout_us+0x50>)
 800b620:	fba2 2303 	umull	r2, r3, r2, r3
 800b624:	099b      	lsrs	r3, r3, #6
 800b626:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800b628:	887b      	ldrh	r3, [r7, #2]
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	fb02 f303 	mul.w	r3, r2, r3
 800b630:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800b634:	4a04      	ldr	r2, [pc, #16]	; (800b648 <VL53L0X_calc_timeout_us+0x50>)
 800b636:	fba2 2303 	umull	r2, r3, r2, r3
 800b63a:	099b      	lsrs	r3, r3, #6
 800b63c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800b63e:	697b      	ldr	r3, [r7, #20]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	10624dd3 	.word	0x10624dd3

0800b64c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08c      	sub	sp, #48	; 0x30
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	460b      	mov	r3, r1
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <get_sequence_step_timeout+0x38>
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d002      	beq.n	800b684 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b67e:	7afb      	ldrb	r3, [r7, #11]
 800b680:	2b02      	cmp	r3, #2
 800b682:	d128      	bne.n	800b6d6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b684:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b688:	461a      	mov	r2, r3
 800b68a:	2100      	movs	r1, #0
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f7fd fa7d 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800b698:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d109      	bne.n	800b6b4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800b6a0:	f107 0320 	add.w	r3, r7, #32
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	2146      	movs	r1, #70	; 0x46
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f001 fd8b 	bl	800d1c4 <VL53L0X_RdByte>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800b6b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff ff5c 	bl	800b578 <VL53L0X_decode_timeout>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b6c4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b6c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7ff ff93 	bl	800b5f8 <VL53L0X_calc_timeout_us>
 800b6d2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b6d4:	e092      	b.n	800b7fc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b6d6:	7afb      	ldrb	r3, [r7, #11]
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d135      	bne.n	800b748 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b6dc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7fd fa51 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b6f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f040 8081 	bne.w	800b7fc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b6fa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b6fe:	461a      	mov	r2, r3
 800b700:	2100      	movs	r1, #0
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7fd fa42 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800b70e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b712:	2b00      	cmp	r3, #0
 800b714:	d109      	bne.n	800b72a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800b716:	f107 031e 	add.w	r3, r7, #30
 800b71a:	461a      	mov	r2, r3
 800b71c:	2151      	movs	r1, #81	; 0x51
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f001 fd7a 	bl	800d218 <VL53L0X_RdWord>
 800b724:	4603      	mov	r3, r0
 800b726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b72a:	8bfb      	ldrh	r3, [r7, #30]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff ff23 	bl	800b578 <VL53L0X_decode_timeout>
 800b732:	4603      	mov	r3, r0
 800b734:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b736:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b73a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b73c:	4619      	mov	r1, r3
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff ff5a 	bl	800b5f8 <VL53L0X_calc_timeout_us>
 800b744:	62b8      	str	r0, [r7, #40]	; 0x28
 800b746:	e059      	b.n	800b7fc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b748:	7afb      	ldrb	r3, [r7, #11]
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	d156      	bne.n	800b7fc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b74e:	f107 0314 	add.w	r3, r7, #20
 800b752:	4619      	mov	r1, r3
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7fd fb25 	bl	8008da4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d01d      	beq.n	800b7a0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b764:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b768:	461a      	mov	r2, r3
 800b76a:	2100      	movs	r1, #0
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7fd fa0d 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b772:	4603      	mov	r3, r0
 800b774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800b778:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10f      	bne.n	800b7a0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800b780:	f107 031e 	add.w	r3, r7, #30
 800b784:	461a      	mov	r2, r3
 800b786:	2151      	movs	r1, #81	; 0x51
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f001 fd45 	bl	800d218 <VL53L0X_RdWord>
 800b78e:	4603      	mov	r3, r0
 800b790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b794:	8bfb      	ldrh	r3, [r7, #30]
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff feee 	bl	800b578 <VL53L0X_decode_timeout>
 800b79c:	4603      	mov	r3, r0
 800b79e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b7a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d109      	bne.n	800b7bc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b7a8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f7fd f9eb 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b7bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10f      	bne.n	800b7e4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800b7c4:	f107 031c 	add.w	r3, r7, #28
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	2171      	movs	r1, #113	; 0x71
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f001 fd23 	bl	800d218 <VL53L0X_RdWord>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b7d8:	8bbb      	ldrh	r3, [r7, #28]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff fecc 	bl	800b578 <VL53L0X_decode_timeout>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b7e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b7ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b7f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f7ff feff 	bl	800b5f8 <VL53L0X_calc_timeout_us>
 800b7fa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b800:	601a      	str	r2, [r3, #0]

	return Status;
 800b802:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b806:	4618      	mov	r0, r3
 800b808:	3730      	adds	r7, #48	; 0x30
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b08a      	sub	sp, #40	; 0x28
 800b812:	af00      	add	r7, sp, #0
 800b814:	60f8      	str	r0, [r7, #12]
 800b816:	460b      	mov	r3, r1
 800b818:	607a      	str	r2, [r7, #4]
 800b81a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b81c:	2300      	movs	r3, #0
 800b81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b822:	7afb      	ldrb	r3, [r7, #11]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d005      	beq.n	800b834 <set_sequence_step_timeout+0x26>
 800b828:	7afb      	ldrb	r3, [r7, #11]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d002      	beq.n	800b834 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b82e:	7afb      	ldrb	r3, [r7, #11]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d138      	bne.n	800b8a6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b834:	f107 031b 	add.w	r3, r7, #27
 800b838:	461a      	mov	r2, r3
 800b83a:	2100      	movs	r1, #0
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f7fd f9a5 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b842:	4603      	mov	r3, r0
 800b844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800b848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d11a      	bne.n	800b886 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b850:	7efb      	ldrb	r3, [r7, #27]
 800b852:	461a      	mov	r2, r3
 800b854:	6879      	ldr	r1, [r7, #4]
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f7ff fea4 	bl	800b5a4 <VL53L0X_calc_timeout_mclks>
 800b85c:	4603      	mov	r3, r0
 800b85e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b860:	8bbb      	ldrh	r3, [r7, #28]
 800b862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b866:	d903      	bls.n	800b870 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b868:	23ff      	movs	r3, #255	; 0xff
 800b86a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b86e:	e004      	b.n	800b87a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b870:	8bbb      	ldrh	r3, [r7, #28]
 800b872:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b874:	3b01      	subs	r3, #1
 800b876:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b87a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b87e:	b29a      	uxth	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f040 80ab 	bne.w	800b9e6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b894:	461a      	mov	r2, r3
 800b896:	2146      	movs	r1, #70	; 0x46
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f001 fc11 	bl	800d0c0 <VL53L0X_WrByte>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b8a4:	e09f      	b.n	800b9e6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b8a6:	7afb      	ldrb	r3, [r7, #11]
 800b8a8:	2b03      	cmp	r3, #3
 800b8aa:	d135      	bne.n	800b918 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b8ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d11b      	bne.n	800b8ec <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b8b4:	f107 031b 	add.w	r3, r7, #27
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7fd f965 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b8c8:	7efb      	ldrb	r3, [r7, #27]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	6879      	ldr	r1, [r7, #4]
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f7ff fe68 	bl	800b5a4 <VL53L0X_calc_timeout_mclks>
 800b8d4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b8d6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7ff fe20 	bl	800b520 <VL53L0X_encode_timeout>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b8e4:	8b3a      	ldrh	r2, [r7, #24]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b8ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d108      	bne.n	800b906 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b8f4:	8b3b      	ldrh	r3, [r7, #24]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	2151      	movs	r1, #81	; 0x51
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f001 fc04 	bl	800d108 <VL53L0X_WrWord>
 800b900:	4603      	mov	r3, r0
 800b902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b906:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d16b      	bne.n	800b9e6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b916:	e066      	b.n	800b9e6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	d160      	bne.n	800b9e0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b91e:	f107 0310 	add.w	r3, r7, #16
 800b922:	4619      	mov	r1, r3
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f7fd fa3d 	bl	8008da4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b92e:	7cfb      	ldrb	r3, [r7, #19]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d01d      	beq.n	800b970 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b934:	f107 031b 	add.w	r3, r7, #27
 800b938:	461a      	mov	r2, r3
 800b93a:	2100      	movs	r1, #0
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7fd f925 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b942:	4603      	mov	r3, r0
 800b944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b948:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10f      	bne.n	800b970 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b950:	f107 0318 	add.w	r3, r7, #24
 800b954:	461a      	mov	r2, r3
 800b956:	2151      	movs	r1, #81	; 0x51
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f001 fc5d 	bl	800d218 <VL53L0X_RdWord>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b964:	8b3b      	ldrh	r3, [r7, #24]
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff fe06 	bl	800b578 <VL53L0X_decode_timeout>
 800b96c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b96e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b970:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b974:	2b00      	cmp	r3, #0
 800b976:	d109      	bne.n	800b98c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b978:	f107 031b 	add.w	r3, r7, #27
 800b97c:	461a      	mov	r2, r3
 800b97e:	2101      	movs	r1, #1
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7fd f903 	bl	8008b8c <VL53L0X_GetVcselPulsePeriod>
 800b986:	4603      	mov	r3, r0
 800b988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b98c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b990:	2b00      	cmp	r3, #0
 800b992:	d128      	bne.n	800b9e6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b994:	7efb      	ldrb	r3, [r7, #27]
 800b996:	461a      	mov	r2, r3
 800b998:	6879      	ldr	r1, [r7, #4]
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff fe02 	bl	800b5a4 <VL53L0X_calc_timeout_mclks>
 800b9a0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a4:	6a3a      	ldr	r2, [r7, #32]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b9aa:	6a38      	ldr	r0, [r7, #32]
 800b9ac:	f7ff fdb8 	bl	800b520 <VL53L0X_encode_timeout>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800b9b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d108      	bne.n	800b9ce <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b9bc:	8bfb      	ldrh	r3, [r7, #30]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	2171      	movs	r1, #113	; 0x71
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f001 fba0 	bl	800d108 <VL53L0X_WrWord>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b9ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d107      	bne.n	800b9e6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b9de:	e002      	b.n	800b9e6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b9e0:	23fc      	movs	r3, #252	; 0xfc
 800b9e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b9e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3728      	adds	r7, #40	; 0x28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b08a      	sub	sp, #40	; 0x28
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba02:	2300      	movs	r3, #0
 800ba04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800ba08:	230c      	movs	r3, #12
 800ba0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800ba0e:	2312      	movs	r3, #18
 800ba10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800ba14:	2308      	movs	r3, #8
 800ba16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800ba1a:	230e      	movs	r3, #14
 800ba1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800ba24:	78bb      	ldrb	r3, [r7, #2]
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d003      	beq.n	800ba38 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba30:	23fc      	movs	r3, #252	; 0xfc
 800ba32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba36:	e020      	b.n	800ba7a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10d      	bne.n	800ba5a <VL53L0X_set_vcsel_pulse_period+0x68>
 800ba3e:	78ba      	ldrb	r2, [r7, #2]
 800ba40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d304      	bcc.n	800ba52 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800ba48:	78ba      	ldrb	r2, [r7, #2]
 800ba4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d903      	bls.n	800ba5a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba52:	23fc      	movs	r3, #252	; 0xfc
 800ba54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba58:	e00f      	b.n	800ba7a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d10c      	bne.n	800ba7a <VL53L0X_set_vcsel_pulse_period+0x88>
 800ba60:	78ba      	ldrb	r2, [r7, #2]
 800ba62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d304      	bcc.n	800ba74 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800ba6a:	78ba      	ldrb	r2, [r7, #2]
 800ba6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d902      	bls.n	800ba7a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba74:	23fc      	movs	r3, #252	; 0xfc
 800ba76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800ba7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800ba82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba86:	e239      	b.n	800befc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d150      	bne.n	800bb30 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800ba8e:	78bb      	ldrb	r3, [r7, #2]
 800ba90:	2b0c      	cmp	r3, #12
 800ba92:	d110      	bne.n	800bab6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800ba94:	2218      	movs	r2, #24
 800ba96:	2157      	movs	r1, #87	; 0x57
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f001 fb11 	bl	800d0c0 <VL53L0X_WrByte>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800baa4:	2208      	movs	r2, #8
 800baa6:	2156      	movs	r1, #86	; 0x56
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 fb09 	bl	800d0c0 <VL53L0X_WrByte>
 800baae:	4603      	mov	r3, r0
 800bab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bab4:	e17f      	b.n	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800bab6:	78bb      	ldrb	r3, [r7, #2]
 800bab8:	2b0e      	cmp	r3, #14
 800baba:	d110      	bne.n	800bade <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800babc:	2230      	movs	r2, #48	; 0x30
 800babe:	2157      	movs	r1, #87	; 0x57
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 fafd 	bl	800d0c0 <VL53L0X_WrByte>
 800bac6:	4603      	mov	r3, r0
 800bac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800bacc:	2208      	movs	r2, #8
 800bace:	2156      	movs	r1, #86	; 0x56
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f001 faf5 	bl	800d0c0 <VL53L0X_WrByte>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800badc:	e16b      	b.n	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800bade:	78bb      	ldrb	r3, [r7, #2]
 800bae0:	2b10      	cmp	r3, #16
 800bae2:	d110      	bne.n	800bb06 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800bae4:	2240      	movs	r2, #64	; 0x40
 800bae6:	2157      	movs	r1, #87	; 0x57
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f001 fae9 	bl	800d0c0 <VL53L0X_WrByte>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800baf4:	2208      	movs	r2, #8
 800baf6:	2156      	movs	r1, #86	; 0x56
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f001 fae1 	bl	800d0c0 <VL53L0X_WrByte>
 800bafe:	4603      	mov	r3, r0
 800bb00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb04:	e157      	b.n	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800bb06:	78bb      	ldrb	r3, [r7, #2]
 800bb08:	2b12      	cmp	r3, #18
 800bb0a:	f040 8154 	bne.w	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800bb0e:	2250      	movs	r2, #80	; 0x50
 800bb10:	2157      	movs	r1, #87	; 0x57
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 fad4 	bl	800d0c0 <VL53L0X_WrByte>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800bb1e:	2208      	movs	r2, #8
 800bb20:	2156      	movs	r1, #86	; 0x56
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f001 facc 	bl	800d0c0 <VL53L0X_WrByte>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb2e:	e142      	b.n	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	f040 813f 	bne.w	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800bb38:	78bb      	ldrb	r3, [r7, #2]
 800bb3a:	2b08      	cmp	r3, #8
 800bb3c:	d14c      	bne.n	800bbd8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800bb3e:	2210      	movs	r2, #16
 800bb40:	2148      	movs	r1, #72	; 0x48
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 fabc 	bl	800d0c0 <VL53L0X_WrByte>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800bb4e:	2208      	movs	r2, #8
 800bb50:	2147      	movs	r1, #71	; 0x47
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 fab4 	bl	800d0c0 <VL53L0X_WrByte>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800bb5e:	2202      	movs	r2, #2
 800bb60:	2132      	movs	r1, #50	; 0x32
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f001 faac 	bl	800d0c0 <VL53L0X_WrByte>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb70:	4313      	orrs	r3, r2
 800bb72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800bb76:	220c      	movs	r2, #12
 800bb78:	2130      	movs	r1, #48	; 0x30
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 faa0 	bl	800d0c0 <VL53L0X_WrByte>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800bb8e:	2201      	movs	r2, #1
 800bb90:	21ff      	movs	r1, #255	; 0xff
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f001 fa94 	bl	800d0c0 <VL53L0X_WrByte>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba0:	4313      	orrs	r3, r2
 800bba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800bba6:	2230      	movs	r2, #48	; 0x30
 800bba8:	2130      	movs	r1, #48	; 0x30
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f001 fa88 	bl	800d0c0 <VL53L0X_WrByte>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	21ff      	movs	r1, #255	; 0xff
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f001 fa7c 	bl	800d0c0 <VL53L0X_WrByte>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbd6:	e0ee      	b.n	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800bbd8:	78bb      	ldrb	r3, [r7, #2]
 800bbda:	2b0a      	cmp	r3, #10
 800bbdc:	d14c      	bne.n	800bc78 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800bbde:	2228      	movs	r2, #40	; 0x28
 800bbe0:	2148      	movs	r1, #72	; 0x48
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f001 fa6c 	bl	800d0c0 <VL53L0X_WrByte>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800bbee:	2208      	movs	r2, #8
 800bbf0:	2147      	movs	r1, #71	; 0x47
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f001 fa64 	bl	800d0c0 <VL53L0X_WrByte>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800bbfe:	2203      	movs	r2, #3
 800bc00:	2132      	movs	r1, #50	; 0x32
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f001 fa5c 	bl	800d0c0 <VL53L0X_WrByte>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc10:	4313      	orrs	r3, r2
 800bc12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800bc16:	2209      	movs	r2, #9
 800bc18:	2130      	movs	r1, #48	; 0x30
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f001 fa50 	bl	800d0c0 <VL53L0X_WrByte>
 800bc20:	4603      	mov	r3, r0
 800bc22:	461a      	mov	r2, r3
 800bc24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800bc2e:	2201      	movs	r2, #1
 800bc30:	21ff      	movs	r1, #255	; 0xff
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f001 fa44 	bl	800d0c0 <VL53L0X_WrByte>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc40:	4313      	orrs	r3, r2
 800bc42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800bc46:	2220      	movs	r2, #32
 800bc48:	2130      	movs	r1, #48	; 0x30
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f001 fa38 	bl	800d0c0 <VL53L0X_WrByte>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800bc5e:	2200      	movs	r2, #0
 800bc60:	21ff      	movs	r1, #255	; 0xff
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f001 fa2c 	bl	800d0c0 <VL53L0X_WrByte>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc70:	4313      	orrs	r3, r2
 800bc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc76:	e09e      	b.n	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800bc78:	78bb      	ldrb	r3, [r7, #2]
 800bc7a:	2b0c      	cmp	r3, #12
 800bc7c:	d14c      	bne.n	800bd18 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800bc7e:	2238      	movs	r2, #56	; 0x38
 800bc80:	2148      	movs	r1, #72	; 0x48
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 fa1c 	bl	800d0c0 <VL53L0X_WrByte>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800bc8e:	2208      	movs	r2, #8
 800bc90:	2147      	movs	r1, #71	; 0x47
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f001 fa14 	bl	800d0c0 <VL53L0X_WrByte>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800bc9e:	2203      	movs	r2, #3
 800bca0:	2132      	movs	r1, #50	; 0x32
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 fa0c 	bl	800d0c0 <VL53L0X_WrByte>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800bcb6:	2208      	movs	r2, #8
 800bcb8:	2130      	movs	r1, #48	; 0x30
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f001 fa00 	bl	800d0c0 <VL53L0X_WrByte>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800bcce:	2201      	movs	r2, #1
 800bcd0:	21ff      	movs	r1, #255	; 0xff
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f001 f9f4 	bl	800d0c0 <VL53L0X_WrByte>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce0:	4313      	orrs	r3, r2
 800bce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800bce6:	2220      	movs	r2, #32
 800bce8:	2130      	movs	r1, #48	; 0x30
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f001 f9e8 	bl	800d0c0 <VL53L0X_WrByte>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800bcfe:	2200      	movs	r2, #0
 800bd00:	21ff      	movs	r1, #255	; 0xff
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f001 f9dc 	bl	800d0c0 <VL53L0X_WrByte>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd10:	4313      	orrs	r3, r2
 800bd12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd16:	e04e      	b.n	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800bd18:	78bb      	ldrb	r3, [r7, #2]
 800bd1a:	2b0e      	cmp	r3, #14
 800bd1c:	d14b      	bne.n	800bdb6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800bd1e:	2248      	movs	r2, #72	; 0x48
 800bd20:	2148      	movs	r1, #72	; 0x48
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f001 f9cc 	bl	800d0c0 <VL53L0X_WrByte>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800bd2e:	2208      	movs	r2, #8
 800bd30:	2147      	movs	r1, #71	; 0x47
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f001 f9c4 	bl	800d0c0 <VL53L0X_WrByte>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800bd3e:	2203      	movs	r2, #3
 800bd40:	2132      	movs	r1, #50	; 0x32
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f001 f9bc 	bl	800d0c0 <VL53L0X_WrByte>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd50:	4313      	orrs	r3, r2
 800bd52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800bd56:	2207      	movs	r2, #7
 800bd58:	2130      	movs	r1, #48	; 0x30
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 f9b0 	bl	800d0c0 <VL53L0X_WrByte>
 800bd60:	4603      	mov	r3, r0
 800bd62:	461a      	mov	r2, r3
 800bd64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800bd6e:	2201      	movs	r2, #1
 800bd70:	21ff      	movs	r1, #255	; 0xff
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f001 f9a4 	bl	800d0c0 <VL53L0X_WrByte>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd80:	4313      	orrs	r3, r2
 800bd82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800bd86:	2220      	movs	r2, #32
 800bd88:	2130      	movs	r1, #48	; 0x30
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f001 f998 	bl	800d0c0 <VL53L0X_WrByte>
 800bd90:	4603      	mov	r3, r0
 800bd92:	461a      	mov	r2, r3
 800bd94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800bd9e:	2200      	movs	r2, #0
 800bda0:	21ff      	movs	r1, #255	; 0xff
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f001 f98c 	bl	800d0c0 <VL53L0X_WrByte>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800bdb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d17f      	bne.n	800bebe <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800bdbe:	78bb      	ldrb	r3, [r7, #2]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe fe38 	bl	800aa36 <VL53L0X_encode_vcsel_period>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800bdcc:	78fb      	ldrb	r3, [r7, #3]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d045      	beq.n	800be62 <VL53L0X_set_vcsel_pulse_period+0x470>
 800bdd6:	e06e      	b.n	800beb6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800bdd8:	f107 0314 	add.w	r3, r7, #20
 800bddc:	461a      	mov	r2, r3
 800bdde:	2103      	movs	r1, #3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff fc33 	bl	800b64c <get_sequence_step_timeout>
 800bde6:	4603      	mov	r3, r0
 800bde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800bdec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d109      	bne.n	800be08 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800bdf4:	f107 0310 	add.w	r3, r7, #16
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	2102      	movs	r1, #2
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff fc25 	bl	800b64c <get_sequence_step_timeout>
 800be02:	4603      	mov	r3, r0
 800be04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800be08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d109      	bne.n	800be24 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800be10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800be14:	461a      	mov	r2, r3
 800be16:	2150      	movs	r1, #80	; 0x50
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f001 f951 	bl	800d0c0 <VL53L0X_WrByte>
 800be1e:	4603      	mov	r3, r0
 800be20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800be24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d108      	bne.n	800be3e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	461a      	mov	r2, r3
 800be30:	2103      	movs	r1, #3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fceb 	bl	800b80e <set_sequence_step_timeout>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800be3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be42:	2b00      	cmp	r3, #0
 800be44:	d108      	bne.n	800be58 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	461a      	mov	r2, r3
 800be4a:	2102      	movs	r1, #2
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff fcde 	bl	800b80e <set_sequence_step_timeout>
 800be52:	4603      	mov	r3, r0
 800be54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	78ba      	ldrb	r2, [r7, #2]
 800be5c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800be60:	e02e      	b.n	800bec0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800be62:	f107 0318 	add.w	r3, r7, #24
 800be66:	461a      	mov	r2, r3
 800be68:	2104      	movs	r1, #4
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7ff fbee 	bl	800b64c <get_sequence_step_timeout>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800be76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d109      	bne.n	800be92 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800be7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800be82:	461a      	mov	r2, r3
 800be84:	2170      	movs	r1, #112	; 0x70
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f001 f91a 	bl	800d0c0 <VL53L0X_WrByte>
 800be8c:	4603      	mov	r3, r0
 800be8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800be92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be96:	2b00      	cmp	r3, #0
 800be98:	d108      	bne.n	800beac <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	461a      	mov	r2, r3
 800be9e:	2104      	movs	r1, #4
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff fcb4 	bl	800b80e <set_sequence_step_timeout>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	78ba      	ldrb	r2, [r7, #2]
 800beb0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800beb4:	e004      	b.n	800bec0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800beb6:	23fc      	movs	r3, #252	; 0xfc
 800beb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bebc:	e000      	b.n	800bec0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800bebe:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800bec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d109      	bne.n	800bedc <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800bece:	69f9      	ldr	r1, [r7, #28]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7fc fe1d 	bl	8008b10 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800bed6:	4603      	mov	r3, r0
 800bed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800bedc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d109      	bne.n	800bef8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800bee4:	f107 010f 	add.w	r1, r7, #15
 800bee8:	2301      	movs	r3, #1
 800beea:	2200      	movs	r2, #0
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7fe fcbd 	bl	800a86c <VL53L0X_perform_phase_calibration>
 800bef2:	4603      	mov	r3, r0
 800bef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800bef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800befc:	4618      	mov	r0, r3
 800befe:	3728      	adds	r7, #40	; 0x28
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	607a      	str	r2, [r7, #4]
 800bf10:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf12:	2300      	movs	r3, #0
 800bf14:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800bf16:	7afb      	ldrb	r3, [r7, #11]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d00a      	beq.n	800bf36 <VL53L0X_get_vcsel_pulse_period+0x32>
 800bf20:	e013      	b.n	800bf4a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800bf22:	f107 0316 	add.w	r3, r7, #22
 800bf26:	461a      	mov	r2, r3
 800bf28:	2150      	movs	r1, #80	; 0x50
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f001 f94a 	bl	800d1c4 <VL53L0X_RdByte>
 800bf30:	4603      	mov	r3, r0
 800bf32:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800bf34:	e00b      	b.n	800bf4e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800bf36:	f107 0316 	add.w	r3, r7, #22
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	2170      	movs	r1, #112	; 0x70
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f001 f940 	bl	800d1c4 <VL53L0X_RdByte>
 800bf44:	4603      	mov	r3, r0
 800bf46:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800bf48:	e001      	b.n	800bf4e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bf4a:	23fc      	movs	r3, #252	; 0xfc
 800bf4c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800bf4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d107      	bne.n	800bf66 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800bf56:	7dbb      	ldrb	r3, [r7, #22]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fe fd59 	bl	800aa10 <VL53L0X_decode_vcsel_period>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	701a      	strb	r2, [r3, #0]

	return Status;
 800bf66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b092      	sub	sp, #72	; 0x48
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bf82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bf86:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bf88:	f240 7376 	movw	r3, #1910	; 0x776
 800bf8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800bf8e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bf92:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bf94:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800bf9a:	f240 234e 	movw	r3, #590	; 0x24e
 800bf9e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800bfa0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bfa6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bfac:	f240 2326 	movw	r3, #550	; 0x226
 800bfb0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800bfb6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bfba:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	6a3b      	ldr	r3, [r7, #32]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d205      	bcs.n	800bfd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bfc8:	23fc      	movs	r3, #252	; 0xfc
 800bfca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800bfce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bfd2:	e0aa      	b.n	800c12a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800bfd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bfe0:	f107 0314 	add.w	r3, r7, #20
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7fc fedc 	bl	8008da4 <VL53L0X_GetSequenceStepEnables>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800bff2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d15b      	bne.n	800c0b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800bffa:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d105      	bne.n	800c00c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800c000:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800c002:	2b00      	cmp	r3, #0
 800c004:	d102      	bne.n	800c00c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800c006:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d052      	beq.n	800c0b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800c00c:	f107 0310 	add.w	r3, r7, #16
 800c010:	461a      	mov	r2, r3
 800c012:	2102      	movs	r1, #2
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff fb19 	bl	800b64c <get_sequence_step_timeout>
 800c01a:	4603      	mov	r3, r0
 800c01c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800c020:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800c028:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c02c:	e07d      	b.n	800c12a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800c02e:	7d3b      	ldrb	r3, [r7, #20]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00f      	beq.n	800c054 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800c034:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800c036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c038:	4413      	add	r3, r2
 800c03a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800c03c:	69fa      	ldr	r2, [r7, #28]
 800c03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c040:	429a      	cmp	r2, r3
 800c042:	d204      	bcs.n	800c04e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800c044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	643b      	str	r3, [r7, #64]	; 0x40
 800c04c:	e002      	b.n	800c054 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c04e:	23fc      	movs	r3, #252	; 0xfc
 800c050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800c054:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d002      	beq.n	800c062 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800c05c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c060:	e063      	b.n	800c12a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800c062:	7dbb      	ldrb	r3, [r7, #22]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d011      	beq.n	800c08c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800c068:	693a      	ldr	r2, [r7, #16]
 800c06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06c:	4413      	add	r3, r2
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c072:	69fa      	ldr	r2, [r7, #28]
 800c074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c076:	429a      	cmp	r2, r3
 800c078:	d204      	bcs.n	800c084 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c07a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	643b      	str	r3, [r7, #64]	; 0x40
 800c082:	e016      	b.n	800c0b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c084:	23fc      	movs	r3, #252	; 0xfc
 800c086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c08a:	e012      	b.n	800c0b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800c08c:	7d7b      	ldrb	r3, [r7, #21]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00f      	beq.n	800c0b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c096:	4413      	add	r3, r2
 800c098:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c09a:	69fa      	ldr	r2, [r7, #28]
 800c09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d204      	bcs.n	800c0ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c0a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	643b      	str	r3, [r7, #64]	; 0x40
 800c0aa:	e002      	b.n	800c0b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c0ac:	23fc      	movs	r3, #252	; 0xfc
 800c0ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c0b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d002      	beq.n	800c0c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c0ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c0be:	e034      	b.n	800c12a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d019      	beq.n	800c0fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800c0c6:	f107 030c 	add.w	r3, r7, #12
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	2103      	movs	r1, #3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff fabc 	bl	800b64c <get_sequence_step_timeout>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0de:	4413      	add	r3, r2
 800c0e0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d204      	bcs.n	800c0f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800c0ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	643b      	str	r3, [r7, #64]	; 0x40
 800c0f2:	e002      	b.n	800c0fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c0f4:	23fc      	movs	r3, #252	; 0xfc
 800c0f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800c0fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d111      	bne.n	800c126 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800c102:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00e      	beq.n	800c126 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800c108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800c110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c112:	2104      	movs	r1, #4
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff fb7a 	bl	800b80e <set_sequence_step_timeout>
 800c11a:	4603      	mov	r3, r0
 800c11c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800c126:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3748      	adds	r7, #72	; 0x48
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b090      	sub	sp, #64	; 0x40
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c13c:	2300      	movs	r3, #0
 800c13e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c142:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c146:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c148:	f240 7376 	movw	r3, #1910	; 0x776
 800c14c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800c14e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c152:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c154:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c158:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800c15a:	f240 234e 	movw	r3, #590	; 0x24e
 800c15e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800c160:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c164:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c166:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c16c:	f240 2326 	movw	r3, #550	; 0x226
 800c170:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c172:	2300      	movs	r3, #0
 800c174:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800c176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c17a:	441a      	add	r2, r3
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c180:	f107 0318 	add.w	r3, r7, #24
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7fc fe0c 	bl	8008da4 <VL53L0X_GetSequenceStepEnables>
 800c18c:	4603      	mov	r3, r0
 800c18e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800c192:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c19a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c19e:	e075      	b.n	800c28c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800c1a0:	7e3b      	ldrb	r3, [r7, #24]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d105      	bne.n	800c1b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800c1a6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800c1ac:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d030      	beq.n	800c214 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800c1b2:	f107 0310 	add.w	r3, r7, #16
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	2102      	movs	r1, #2
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff fa46 	bl	800b64c <get_sequence_step_timeout>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800c1c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d122      	bne.n	800c214 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800c1ce:	7e3b      	ldrb	r3, [r7, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d007      	beq.n	800c1e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c1d8:	6939      	ldr	r1, [r7, #16]
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c1de:	441a      	add	r2, r3
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800c1e4:	7ebb      	ldrb	r3, [r7, #26]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d009      	beq.n	800c1fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800c1ee:	6939      	ldr	r1, [r7, #16]
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	440b      	add	r3, r1
 800c1f4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c1f6:	441a      	add	r2, r3
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	e00a      	b.n	800c214 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800c1fe:	7e7b      	ldrb	r3, [r7, #25]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d007      	beq.n	800c214 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c208:	6939      	ldr	r1, [r7, #16]
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c20e:	441a      	add	r2, r3
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c214:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d114      	bne.n	800c246 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800c21c:	7efb      	ldrb	r3, [r7, #27]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d011      	beq.n	800c246 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800c222:	f107 030c 	add.w	r3, r7, #12
 800c226:	461a      	mov	r2, r3
 800c228:	2103      	movs	r1, #3
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff fa0e 	bl	800b64c <get_sequence_step_timeout>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800c23a:	68f9      	ldr	r1, [r7, #12]
 800c23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c240:	441a      	add	r2, r3
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c246:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d114      	bne.n	800c278 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800c24e:	7f3b      	ldrb	r3, [r7, #28]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d011      	beq.n	800c278 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800c254:	f107 0314 	add.w	r3, r7, #20
 800c258:	461a      	mov	r2, r3
 800c25a:	2104      	movs	r1, #4
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f7ff f9f5 	bl	800b64c <get_sequence_step_timeout>
 800c262:	4603      	mov	r3, r0
 800c264:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800c26c:	6979      	ldr	r1, [r7, #20]
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c272:	441a      	add	r2, r3
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c278:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d103      	bne.n	800c288 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c288:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3740      	adds	r7, #64	; 0x40
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c2a6:	e0c6      	b.n	800c436 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	683a      	ldr	r2, [r7, #0]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800c2b8:	7cfb      	ldrb	r3, [r7, #19]
 800c2ba:	2bff      	cmp	r3, #255	; 0xff
 800c2bc:	f040 808d 	bne.w	800c3da <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	747b      	strb	r3, [r7, #17]
			Index++;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800c2d0:	7c7b      	ldrb	r3, [r7, #17]
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d87e      	bhi.n	800c3d4 <VL53L0X_load_tuning_settings+0x140>
 800c2d6:	a201      	add	r2, pc, #4	; (adr r2, 800c2dc <VL53L0X_load_tuning_settings+0x48>)
 800c2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2dc:	0800c2ed 	.word	0x0800c2ed
 800c2e0:	0800c327 	.word	0x0800c327
 800c2e4:	0800c361 	.word	0x0800c361
 800c2e8:	0800c39b 	.word	0x0800c39b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	743b      	strb	r3, [r7, #16]
				Index++;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	4413      	add	r3, r2
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	3301      	adds	r3, #1
 800c30a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c30c:	7c3b      	ldrb	r3, [r7, #16]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	021b      	lsls	r3, r3, #8
 800c312:	b29a      	uxth	r2, r3
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	b29b      	uxth	r3, r3
 800c318:	4413      	add	r3, r2
 800c31a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	89ba      	ldrh	r2, [r7, #12]
 800c320:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800c324:	e087      	b.n	800c436 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	683a      	ldr	r2, [r7, #0]
 800c32a:	4413      	add	r3, r2
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	743b      	strb	r3, [r7, #16]
				Index++;
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	3301      	adds	r3, #1
 800c334:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	683a      	ldr	r2, [r7, #0]
 800c33a:	4413      	add	r3, r2
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	3301      	adds	r3, #1
 800c344:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c346:	7c3b      	ldrb	r3, [r7, #16]
 800c348:	b29b      	uxth	r3, r3
 800c34a:	021b      	lsls	r3, r3, #8
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	b29b      	uxth	r3, r3
 800c352:	4413      	add	r3, r2
 800c354:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	89ba      	ldrh	r2, [r7, #12]
 800c35a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800c35e:	e06a      	b.n	800c436 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	683a      	ldr	r2, [r7, #0]
 800c364:	4413      	add	r3, r2
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	743b      	strb	r3, [r7, #16]
				Index++;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	3301      	adds	r3, #1
 800c36e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	4413      	add	r3, r2
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	3301      	adds	r3, #1
 800c37e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c380:	7c3b      	ldrb	r3, [r7, #16]
 800c382:	b29b      	uxth	r3, r3
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	b29a      	uxth	r2, r3
 800c388:	7bfb      	ldrb	r3, [r7, #15]
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	4413      	add	r3, r2
 800c38e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	89ba      	ldrh	r2, [r7, #12]
 800c394:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800c398:	e04d      	b.n	800c436 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	4413      	add	r3, r2
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	743b      	strb	r3, [r7, #16]
				Index++;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c3ba:	7c3b      	ldrb	r3, [r7, #16]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	021b      	lsls	r3, r3, #8
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	4413      	add	r3, r2
 800c3c8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	89ba      	ldrh	r2, [r7, #12]
 800c3ce:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800c3d2:	e030      	b.n	800c436 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c3d4:	23fc      	movs	r3, #252	; 0xfc
 800c3d6:	77fb      	strb	r3, [r7, #31]
 800c3d8:	e02d      	b.n	800c436 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800c3da:	7cfb      	ldrb	r3, [r7, #19]
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d828      	bhi.n	800c432 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	61bb      	str	r3, [r7, #24]
 800c3f4:	e00f      	b.n	800c416 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	7819      	ldrb	r1, [r3, #0]
 800c3fe:	f107 0208 	add.w	r2, r7, #8
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	4413      	add	r3, r2
 800c406:	460a      	mov	r2, r1
 800c408:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	3301      	adds	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	3301      	adds	r3, #1
 800c414:	61bb      	str	r3, [r7, #24]
 800c416:	7cfb      	ldrb	r3, [r7, #19]
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	dbeb      	blt.n	800c3f6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800c41e:	7cfb      	ldrb	r3, [r7, #19]
 800c420:	f107 0208 	add.w	r2, r7, #8
 800c424:	7cb9      	ldrb	r1, [r7, #18]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fdee 	bl	800d008 <VL53L0X_WriteMulti>
 800c42c:	4603      	mov	r3, r0
 800c42e:	77fb      	strb	r3, [r7, #31]
 800c430:	e001      	b.n	800c436 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c432:	23fc      	movs	r3, #252	; 0xfc
 800c434:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	4413      	add	r3, r2
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d004      	beq.n	800c44c <VL53L0X_load_tuning_settings+0x1b8>
 800c442:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f43f af2e 	beq.w	800c2a8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c44c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3720      	adds	r7, #32
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c464:	2300      	movs	r3, #0
 800c466:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800c46e:	f107 0313 	add.w	r3, r7, #19
 800c472:	4619      	mov	r1, r3
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f7fc fd21 	bl	8008ebc <VL53L0X_GetXTalkCompensationEnable>
 800c47a:	4603      	mov	r3, r0
 800c47c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800c47e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d111      	bne.n	800c4aa <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800c486:	7cfb      	ldrb	r3, [r7, #19]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00e      	beq.n	800c4aa <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	8a9b      	ldrh	r3, [r3, #20]
 800c496:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	fb02 f303 	mul.w	r3, r2, r3
 800c49e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	3380      	adds	r3, #128	; 0x80
 800c4a4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800c4aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3720      	adds	r7, #32
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b086      	sub	sp, #24
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	60b9      	str	r1, [r7, #8]
 800c4c0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800c4ce:	f107 0310 	add.w	r3, r7, #16
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	68b9      	ldr	r1, [r7, #8]
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f7ff ffbe 	bl	800c458 <VL53L0X_get_total_xtalk_rate>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800c4e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d105      	bne.n	800c4f4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	441a      	add	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	601a      	str	r2, [r3, #0]

	return Status;
 800c4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3718      	adds	r7, #24
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b09a      	sub	sp, #104	; 0x68
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800c50e:	2312      	movs	r3, #18
 800c510:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800c512:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c516:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800c518:	2342      	movs	r3, #66	; 0x42
 800c51a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800c51c:	2306      	movs	r3, #6
 800c51e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800c520:	2307      	movs	r3, #7
 800c522:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c524:	2300      	movs	r3, #0
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800c530:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c538:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800c53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c53c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c53e:	fb02 f303 	mul.w	r3, r2, r3
 800c542:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800c544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c546:	3380      	adds	r3, #128	; 0x80
 800c548:	0a1b      	lsrs	r3, r3, #8
 800c54a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800c54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c550:	fb02 f303 	mul.w	r3, r2, r3
 800c554:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01a      	beq.n	800c596 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	029b      	lsls	r3, r3, #10
 800c564:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800c56a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c56c:	4413      	add	r3, r2
 800c56e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c570:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	fbb2 f3f3 	udiv	r3, r2, r3
 800c578:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800c57a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c57c:	4613      	mov	r3, r2
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	4413      	add	r3, r2
 800c582:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c586:	fb03 f303 	mul.w	r3, r3, r3
 800c58a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c58e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c592:	0c1b      	lsrs	r3, r3, #16
 800c594:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c59a:	fb02 f303 	mul.w	r3, r2, r3
 800c59e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c5a6:	0c1b      	lsrs	r3, r3, #16
 800c5a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ac:	fb03 f303 	mul.w	r3, r3, r3
 800c5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800c5b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c5b8:	0c1b      	lsrs	r3, r3, #16
 800c5ba:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5be:	085a      	lsrs	r2, r3, #1
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	441a      	add	r2, r3
 800c5c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5ca:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5d0:	fb02 f303 	mul.w	r3, r2, r3
 800c5d4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5dc:	d302      	bcc.n	800c5e4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800c5de:	4b54      	ldr	r3, [pc, #336]	; (800c730 <VL53L0X_calc_dmax+0x230>)
 800c5e0:	663b      	str	r3, [r7, #96]	; 0x60
 800c5e2:	e015      	b.n	800c610 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800c5e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5e6:	085a      	lsrs	r2, r3, #1
 800c5e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ea:	441a      	add	r2, r3
 800c5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5f2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c5f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5f8:	fb02 f303 	mul.w	r3, r2, r3
 800c5fc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c5fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c600:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c604:	0c1b      	lsrs	r3, r3, #16
 800c606:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c60a:	fb03 f303 	mul.w	r3, r3, r3
 800c60e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800c610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c612:	039b      	lsls	r3, r3, #14
 800c614:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c618:	4a46      	ldr	r2, [pc, #280]	; (800c734 <VL53L0X_calc_dmax+0x234>)
 800c61a:	fba2 2303 	umull	r2, r3, r2, r3
 800c61e:	099b      	lsrs	r3, r3, #6
 800c620:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	fb03 f303 	mul.w	r3, r3, r3
 800c628:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800c62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c62c:	fb03 f303 	mul.w	r3, r3, r3
 800c630:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800c632:	6a3b      	ldr	r3, [r7, #32]
 800c634:	3308      	adds	r3, #8
 800c636:	091b      	lsrs	r3, r3, #4
 800c638:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800c63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800c642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c644:	4613      	mov	r3, r2
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	4413      	add	r3, r2
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c654:	0b9b      	lsrs	r3, r3, #14
 800c656:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800c658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c65c:	4413      	add	r3, r2
 800c65e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800c660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c662:	085b      	lsrs	r3, r3, #1
 800c664:	69ba      	ldr	r2, [r7, #24]
 800c666:	4413      	add	r3, r2
 800c668:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800c66a:	69ba      	ldr	r2, [r7, #24]
 800c66c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c672:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	039b      	lsls	r3, r3, #14
 800c678:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	085b      	lsrs	r3, r3, #1
 800c67e:	69ba      	ldr	r2, [r7, #24]
 800c680:	4413      	add	r3, r2
 800c682:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800c684:	69ba      	ldr	r2, [r7, #24]
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	fbb2 f3f3 	udiv	r3, r2, r3
 800c68c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c692:	fb02 f303 	mul.w	r3, r2, r3
 800c696:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c69e:	4a25      	ldr	r2, [pc, #148]	; (800c734 <VL53L0X_calc_dmax+0x234>)
 800c6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a4:	099b      	lsrs	r3, r3, #6
 800c6a6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c6b4:	4a1f      	ldr	r2, [pc, #124]	; (800c734 <VL53L0X_calc_dmax+0x234>)
 800c6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ba:	099b      	lsrs	r3, r3, #6
 800c6bc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800c6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6c0:	3380      	adds	r3, #128	; 0x80
 800c6c2:	0a1b      	lsrs	r3, r3, #8
 800c6c4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d008      	beq.n	800c6de <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	085a      	lsrs	r2, r3, #1
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d2:	441a      	add	r2, r3
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6da:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6dc:	e001      	b.n	800c6e2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800c6e2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c6e4:	f7fe f9ba 	bl	800aa5c <VL53L0X_isqrt>
 800c6e8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d008      	beq.n	800c702 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	085a      	lsrs	r2, r3, #1
 800c6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f6:	441a      	add	r2, r3
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c700:	e001      	b.n	800c706 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800c706:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c708:	f7fe f9a8 	bl	800aa5c <VL53L0X_isqrt>
 800c70c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800c70e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c718:	429a      	cmp	r2, r3
 800c71a:	d902      	bls.n	800c722 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800c71c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c71e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c720:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800c722:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800c726:	4618      	mov	r0, r3
 800c728:	3768      	adds	r7, #104	; 0x68
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	fff00000 	.word	0xfff00000
 800c734:	10624dd3 	.word	0x10624dd3

0800c738 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b0b4      	sub	sp, #208	; 0xd0
 800c73c:	af04      	add	r7, sp, #16
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
 800c744:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800c746:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c74a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c74e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800c756:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800c75a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800c75e:	f241 235c 	movw	r3, #4700	; 0x125c
 800c762:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800c766:	4b9e      	ldr	r3, [pc, #632]	; (800c9e0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800c768:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800c76c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c770:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800c772:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800c776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c77e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800c780:	4b98      	ldr	r3, [pc, #608]	; (800c9e4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800c782:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800c784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c788:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800c78a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c78e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800c790:	f240 6377 	movw	r3, #1655	; 0x677
 800c794:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c796:	2300      	movs	r3, #0
 800c798:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6a1b      	ldr	r3, [r3, #32]
 800c7a0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c7aa:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800c7ae:	0c1b      	lsrs	r3, r3, #16
 800c7b0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800c7b8:	f107 0310 	add.w	r3, r7, #16
 800c7bc:	461a      	mov	r2, r3
 800c7be:	68b9      	ldr	r1, [r7, #8]
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f7ff fe78 	bl	800c4b6 <VL53L0X_get_total_signal_rate>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800c7cc:	f107 0314 	add.w	r3, r7, #20
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	68b9      	ldr	r1, [r7, #8]
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f7ff fe3f 	bl	800c458 <VL53L0X_get_total_xtalk_rate>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c7e6:	fb02 f303 	mul.w	r3, r2, r3
 800c7ea:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c7ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c7f2:	0c1b      	lsrs	r3, r3, #16
 800c7f4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c7fc:	fb02 f303 	mul.w	r3, r2, r3
 800c800:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c804:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d902      	bls.n	800c814 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800c814:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d168      	bne.n	800c8ee <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c822:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800c82c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c830:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c834:	461a      	mov	r2, r3
 800c836:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7fe feb2 	bl	800b5a4 <VL53L0X_calc_timeout_mclks>
 800c840:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800c852:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c856:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c85a:	461a      	mov	r2, r3
 800c85c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f7fe fe9f 	bl	800b5a4 <VL53L0X_calc_timeout_mclks>
 800c866:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c868:	2303      	movs	r3, #3
 800c86a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800c86e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c872:	2b08      	cmp	r3, #8
 800c874:	d102      	bne.n	800c87c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800c876:	2302      	movs	r3, #2
 800c878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c87c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c87e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c880:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c882:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c886:	fb02 f303 	mul.w	r3, r2, r3
 800c88a:	02db      	lsls	r3, r3, #11
 800c88c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c890:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c894:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c898:	4a53      	ldr	r2, [pc, #332]	; (800c9e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c89a:	fba2 2303 	umull	r2, r3, r2, r3
 800c89e:	099b      	lsrs	r3, r3, #6
 800c8a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800c8a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c8aa:	fb02 f303 	mul.w	r3, r2, r3
 800c8ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c8b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c8ba:	4a4b      	ldr	r2, [pc, #300]	; (800c9e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c8bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c0:	099b      	lsrs	r3, r3, #6
 800c8c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	3380      	adds	r3, #128	; 0x80
 800c8ca:	0a1b      	lsrs	r3, r3, #8
 800c8cc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8d4:	fb02 f303 	mul.w	r3, r2, r3
 800c8d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c8dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c8e0:	3380      	adds	r3, #128	; 0x80
 800c8e2:	0a1b      	lsrs	r3, r3, #8
 800c8e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	021b      	lsls	r3, r3, #8
 800c8ec:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c8ee:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d002      	beq.n	800c8fc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800c8f6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c8fa:	e15e      	b.n	800cbba <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800c8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10c      	bne.n	800c91c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c908:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c910:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2200      	movs	r2, #0
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	e14c      	b.n	800cbb6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800c91c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c920:	2b00      	cmp	r3, #0
 800c922:	d102      	bne.n	800c92a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800c924:	2301      	movs	r3, #1
 800c926:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c92a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c92e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c932:	041a      	lsls	r2, r3, #16
 800c934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c936:	fbb2 f3f3 	udiv	r3, r2, r3
 800c93a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c93e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c944:	429a      	cmp	r2, r3
 800c946:	d902      	bls.n	800c94e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c94a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c94e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c952:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c956:	fb02 f303 	mul.w	r3, r2, r3
 800c95a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c95e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c962:	4613      	mov	r3, r2
 800c964:	005b      	lsls	r3, r3, #1
 800c966:	4413      	add	r3, r2
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe f876 	bl	800aa5c <VL53L0X_isqrt>
 800c970:	4603      	mov	r3, r0
 800c972:	005b      	lsls	r3, r3, #1
 800c974:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	891b      	ldrh	r3, [r3, #8]
 800c97a:	461a      	mov	r2, r3
 800c97c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c97e:	fb02 f303 	mul.w	r3, r2, r3
 800c982:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c986:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c988:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c98c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c98e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c990:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c994:	4a14      	ldr	r2, [pc, #80]	; (800c9e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c996:	fba2 2303 	umull	r2, r3, r2, r3
 800c99a:	099b      	lsrs	r3, r3, #6
 800c99c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800c99e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9a0:	041b      	lsls	r3, r3, #16
 800c9a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c9a6:	4a10      	ldr	r2, [pc, #64]	; (800c9e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ac:	099b      	lsrs	r3, r3, #6
 800c9ae:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c9b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	bfb8      	it	lt
 800c9c2:	425b      	neglt	r3, r3
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	7e1b      	ldrb	r3, [r3, #24]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00b      	beq.n	800c9ec <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800c9d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c9d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c9dc:	e033      	b.n	800ca46 <VL53L0X_calc_sigma_estimate+0x30e>
 800c9de:	bf00      	nop
 800c9e0:	028f87ae 	.word	0x028f87ae
 800c9e4:	0006999a 	.word	0x0006999a
 800c9e8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c9ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800c9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800ca00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca04:	fb02 f303 	mul.w	r3, r2, r3
 800ca08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800ca0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ca10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca12:	4413      	add	r3, r2
 800ca14:	0c1b      	lsrs	r3, r3, #16
 800ca16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800ca1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca1e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ca22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800ca26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca2a:	085b      	lsrs	r3, r3, #1
 800ca2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ca30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca34:	fb03 f303 	mul.w	r3, r3, r3
 800ca38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800ca3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca40:	0b9b      	lsrs	r3, r3, #14
 800ca42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800ca46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca4c:	fb02 f303 	mul.w	r3, r2, r3
 800ca50:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ca58:	0c1b      	lsrs	r3, r3, #16
 800ca5a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5e:	fb03 f303 	mul.w	r3, r3, r3
 800ca62:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800ca64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ca68:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ca70:	0c1b      	lsrs	r3, r3, #16
 800ca72:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800ca74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca76:	fb03 f303 	mul.w	r3, r3, r3
 800ca7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800ca7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	4413      	add	r3, r2
 800ca82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800ca84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca86:	f7fd ffe9 	bl	800aa5c <VL53L0X_isqrt>
 800ca8a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	041b      	lsls	r3, r3, #16
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	3332      	adds	r3, #50	; 0x32
 800ca96:	4a4b      	ldr	r2, [pc, #300]	; (800cbc4 <VL53L0X_calc_sigma_estimate+0x48c>)
 800ca98:	fba2 2303 	umull	r2, r3, r2, r3
 800ca9c:	095a      	lsrs	r2, r3, #5
 800ca9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800caa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800caac:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800cab0:	fb02 f303 	mul.w	r3, r2, r3
 800cab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800cab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cabc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800cac0:	3308      	adds	r3, #8
 800cac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800cac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800caca:	4a3f      	ldr	r2, [pc, #252]	; (800cbc8 <VL53L0X_calc_sigma_estimate+0x490>)
 800cacc:	fba2 2303 	umull	r2, r3, r2, r3
 800cad0:	0b5b      	lsrs	r3, r3, #13
 800cad2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800cad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cadc:	429a      	cmp	r2, r3
 800cade:	d902      	bls.n	800cae6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800cae0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800cae6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800caea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800caee:	4413      	add	r3, r2
 800caf0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800caf4:	4a35      	ldr	r2, [pc, #212]	; (800cbcc <VL53L0X_calc_sigma_estimate+0x494>)
 800caf6:	fba2 2303 	umull	r2, r3, r2, r3
 800cafa:	099b      	lsrs	r3, r3, #6
 800cafc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800cafe:	6a3b      	ldr	r3, [r7, #32]
 800cb00:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800cb02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb06:	441a      	add	r2, r3
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fd ffa4 	bl	800aa5c <VL53L0X_isqrt>
 800cb14:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	021b      	lsls	r3, r3, #8
 800cb1a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cb22:	4a2a      	ldr	r2, [pc, #168]	; (800cbcc <VL53L0X_calc_sigma_estimate+0x494>)
 800cb24:	fba2 2303 	umull	r2, r3, r2, r3
 800cb28:	099b      	lsrs	r3, r3, #6
 800cb2a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800cb2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cb30:	fb03 f303 	mul.w	r3, r3, r3
 800cb34:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	fb03 f303 	mul.w	r3, r3, r3
 800cb3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800cb3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	4413      	add	r3, r2
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fd ff89 	bl	800aa5c <VL53L0X_isqrt>
 800cb4a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb52:	fb02 f303 	mul.w	r3, r2, r3
 800cb56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800cb5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d009      	beq.n	800cb74 <VL53L0X_calc_sigma_estimate+0x43c>
 800cb60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d005      	beq.n	800cb74 <VL53L0X_calc_sigma_estimate+0x43c>
 800cb68:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cb6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d903      	bls.n	800cb7c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800cb74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cb82:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800cb8e:	6939      	ldr	r1, [r7, #16]
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	9303      	str	r3, [sp, #12]
 800cb94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb98:	9302      	str	r3, [sp, #8]
 800cb9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cba8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f7ff fca8 	bl	800c500 <VL53L0X_calc_dmax>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cbb6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	37c0      	adds	r7, #192	; 0xc0
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	51eb851f 	.word	0x51eb851f
 800cbc8:	d1b71759 	.word	0xd1b71759
 800cbcc:	10624dd3 	.word	0x10624dd3

0800cbd0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b090      	sub	sp, #64	; 0x40
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	607a      	str	r2, [r7, #4]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	460b      	mov	r3, r1
 800cbde:	72fb      	strb	r3, [r7, #11]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800cc14:	2300      	movs	r3, #0
 800cc16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800cc22:	7afb      	ldrb	r3, [r7, #11]
 800cc24:	10db      	asrs	r3, r3, #3
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	f003 030f 	and.w	r3, r3, #15
 800cc2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800cc30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d017      	beq.n	800cc68 <VL53L0X_get_pal_range_status+0x98>
 800cc38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cc3c:	2b05      	cmp	r3, #5
 800cc3e:	d013      	beq.n	800cc68 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800cc40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cc44:	2b07      	cmp	r3, #7
 800cc46:	d00f      	beq.n	800cc68 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800cc48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cc4c:	2b0c      	cmp	r3, #12
 800cc4e:	d00b      	beq.n	800cc68 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800cc50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cc54:	2b0d      	cmp	r3, #13
 800cc56:	d007      	beq.n	800cc68 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800cc58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cc5c:	2b0e      	cmp	r3, #14
 800cc5e:	d003      	beq.n	800cc68 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800cc60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cc64:	2b0f      	cmp	r3, #15
 800cc66:	d103      	bne.n	800cc70 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800cc6e:	e002      	b.n	800cc76 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800cc76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d109      	bne.n	800cc92 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800cc7e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800cc82:	461a      	mov	r2, r3
 800cc84:	2100      	movs	r1, #0
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7fc f9ec 	bl	8009064 <VL53L0X_GetLimitCheckEnable>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800cc92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d02e      	beq.n	800ccf8 <VL53L0X_get_pal_range_status+0x128>
 800cc9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d12a      	bne.n	800ccf8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800cca2:	f107 0310 	add.w	r3, r7, #16
 800cca6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ccaa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f7ff fd43 	bl	800c738 <VL53L0X_calc_sigma_estimate>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800ccb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d103      	bne.n	800ccc8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccc6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ccc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d113      	bne.n	800ccf8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ccd0:	f107 0320 	add.w	r3, r7, #32
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f7fc fa49 	bl	8009170 <VL53L0X_GetLimitCheckValue>
 800ccde:	4603      	mov	r3, r0
 800cce0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d006      	beq.n	800ccf8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ccea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccec:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d902      	bls.n	800ccf8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ccf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d109      	bne.n	800cd14 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800cd00:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800cd04:	461a      	mov	r2, r3
 800cd06:	2102      	movs	r1, #2
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7fc f9ab 	bl	8009064 <VL53L0X_GetLimitCheckEnable>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800cd14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d044      	beq.n	800cda6 <VL53L0X_get_pal_range_status+0x1d6>
 800cd1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d140      	bne.n	800cda6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800cd24:	f107 031c 	add.w	r3, r7, #28
 800cd28:	461a      	mov	r2, r3
 800cd2a:	2102      	movs	r1, #2
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7fc fa1f 	bl	8009170 <VL53L0X_GetLimitCheckValue>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800cd38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d107      	bne.n	800cd50 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cd40:	2201      	movs	r2, #1
 800cd42:	21ff      	movs	r1, #255	; 0xff
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f000 f9bb 	bl	800d0c0 <VL53L0X_WrByte>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800cd50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d109      	bne.n	800cd6c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800cd58:	f107 0316 	add.w	r3, r7, #22
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	21b6      	movs	r1, #182	; 0xb6
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 fa59 	bl	800d218 <VL53L0X_RdWord>
 800cd66:	4603      	mov	r3, r0
 800cd68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800cd6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d107      	bne.n	800cd84 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cd74:	2200      	movs	r2, #0
 800cd76:	21ff      	movs	r1, #255	; 0xff
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f000 f9a1 	bl	800d0c0 <VL53L0X_WrByte>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800cd84:	8afb      	ldrh	r3, [r7, #22]
 800cd86:	025b      	lsls	r3, r3, #9
 800cd88:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd8e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800cd98:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800cd9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d902      	bls.n	800cda6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800cda0:	2301      	movs	r3, #1
 800cda2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800cda6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d109      	bne.n	800cdc2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800cdae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	2103      	movs	r1, #3
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7fc f954 	bl	8009064 <VL53L0X_GetLimitCheckEnable>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800cdc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d023      	beq.n	800ce12 <VL53L0X_get_pal_range_status+0x242>
 800cdca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d11f      	bne.n	800ce12 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800cdd2:	893b      	ldrh	r3, [r7, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d102      	bne.n	800cdde <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	637b      	str	r3, [r7, #52]	; 0x34
 800cddc:	e005      	b.n	800cdea <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	021a      	lsls	r2, r3, #8
 800cde2:	893b      	ldrh	r3, [r7, #8]
 800cde4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cde8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800cdea:	f107 0318 	add.w	r3, r7, #24
 800cdee:	461a      	mov	r2, r3
 800cdf0:	2103      	movs	r1, #3
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f7fc f9bc 	bl	8009170 <VL53L0X_GetLimitCheckValue>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d006      	beq.n	800ce12 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ce04:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ce06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d202      	bcs.n	800ce12 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ce12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d14a      	bne.n	800ceb0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ce1a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d103      	bne.n	800ce2a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ce22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce24:	22ff      	movs	r2, #255	; 0xff
 800ce26:	701a      	strb	r2, [r3, #0]
 800ce28:	e042      	b.n	800ceb0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ce2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d007      	beq.n	800ce42 <VL53L0X_get_pal_range_status+0x272>
 800ce32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d003      	beq.n	800ce42 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ce3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d103      	bne.n	800ce4a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ce42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce44:	2205      	movs	r2, #5
 800ce46:	701a      	strb	r2, [r3, #0]
 800ce48:	e032      	b.n	800ceb0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ce4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ce4e:	2b06      	cmp	r3, #6
 800ce50:	d003      	beq.n	800ce5a <VL53L0X_get_pal_range_status+0x28a>
 800ce52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ce56:	2b09      	cmp	r3, #9
 800ce58:	d103      	bne.n	800ce62 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ce5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce5c:	2204      	movs	r2, #4
 800ce5e:	701a      	strb	r2, [r3, #0]
 800ce60:	e026      	b.n	800ceb0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ce62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ce66:	2b08      	cmp	r3, #8
 800ce68:	d007      	beq.n	800ce7a <VL53L0X_get_pal_range_status+0x2aa>
 800ce6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ce6e:	2b0a      	cmp	r3, #10
 800ce70:	d003      	beq.n	800ce7a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800ce72:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d103      	bne.n	800ce82 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ce7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce7c:	2203      	movs	r2, #3
 800ce7e:	701a      	strb	r2, [r3, #0]
 800ce80:	e016      	b.n	800ceb0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ce82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ce86:	2b04      	cmp	r3, #4
 800ce88:	d003      	beq.n	800ce92 <VL53L0X_get_pal_range_status+0x2c2>
 800ce8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d103      	bne.n	800ce9a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ce92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce94:	2202      	movs	r2, #2
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	e00a      	b.n	800ceb0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ce9a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d103      	bne.n	800ceaa <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800cea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea4:	2201      	movs	r2, #1
 800cea6:	701a      	strb	r2, [r3, #0]
 800cea8:	e002      	b.n	800ceb0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ceaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceac:	2200      	movs	r2, #0
 800ceae:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800ceb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800ceb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ceba:	2200      	movs	r2, #0
 800cebc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800cebe:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800cec2:	461a      	mov	r2, r3
 800cec4:	2101      	movs	r1, #1
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f7fc f8cc 	bl	8009064 <VL53L0X_GetLimitCheckEnable>
 800cecc:	4603      	mov	r3, r0
 800cece:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ced2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d14f      	bne.n	800cf7a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ceda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d003      	beq.n	800ceea <VL53L0X_get_pal_range_status+0x31a>
 800cee2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d103      	bne.n	800cef2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ceea:	2301      	movs	r3, #1
 800ceec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cef0:	e002      	b.n	800cef8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cefe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800cf02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf06:	2b04      	cmp	r3, #4
 800cf08:	d003      	beq.n	800cf12 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800cf0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d103      	bne.n	800cf1a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800cf12:	2301      	movs	r3, #1
 800cf14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf18:	e002      	b.n	800cf20 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cf26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800cf2a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d003      	beq.n	800cf3a <VL53L0X_get_pal_range_status+0x36a>
 800cf32:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d103      	bne.n	800cf42 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf40:	e002      	b.n	800cf48 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cf4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800cf52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <VL53L0X_get_pal_range_status+0x392>
 800cf5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d103      	bne.n	800cf6a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800cf62:	2301      	movs	r3, #1
 800cf64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf68:	e002      	b.n	800cf70 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800cf76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cf7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3740      	adds	r7, #64	; 0x40
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b088      	sub	sp, #32
 800cf8a:	af02      	add	r7, sp, #8
 800cf8c:	60f8      	str	r0, [r7, #12]
 800cf8e:	60b9      	str	r1, [r7, #8]
 800cf90:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	330a      	adds	r3, #10
 800cf96:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cfa4:	b299      	uxth	r1, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	9300      	str	r3, [sp, #0]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	f7f4 ff1d 	bl	8001df0 <HAL_I2C_Master_Transmit>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800cfba:	693b      	ldr	r3, [r7, #16]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af02      	add	r7, sp, #8
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	330a      	adds	r3, #10
 800cfd4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cfe2:	f043 0301 	orr.w	r3, r3, #1
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	b299      	uxth	r1, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	4613      	mov	r3, r2
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	f7f4 fff9 	bl	8001fec <HAL_I2C_Master_Receive>
 800cffa:	4603      	mov	r3, r0
 800cffc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800cffe:	693b      	ldr	r3, [r7, #16]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3718      	adds	r7, #24
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	607a      	str	r2, [r7, #4]
 800d012:	603b      	str	r3, [r7, #0]
 800d014:	460b      	mov	r3, r1
 800d016:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d018:	2300      	movs	r3, #0
 800d01a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	2b3f      	cmp	r3, #63	; 0x3f
 800d020:	d902      	bls.n	800d028 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800d022:	f06f 0303 	mvn.w	r3, #3
 800d026:	e016      	b.n	800d056 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800d028:	4a0d      	ldr	r2, [pc, #52]	; (800d060 <VL53L0X_WriteMulti+0x58>)
 800d02a:	7afb      	ldrb	r3, [r7, #11]
 800d02c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	6879      	ldr	r1, [r7, #4]
 800d032:	480c      	ldr	r0, [pc, #48]	; (800d064 <VL53L0X_WriteMulti+0x5c>)
 800d034:	f002 fe8e 	bl	800fd54 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	3301      	adds	r3, #1
 800d03c:	461a      	mov	r2, r3
 800d03e:	4908      	ldr	r1, [pc, #32]	; (800d060 <VL53L0X_WriteMulti+0x58>)
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f7ff ffa0 	bl	800cf86 <_I2CWrite>
 800d046:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d001      	beq.n	800d052 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d04e:	23ec      	movs	r3, #236	; 0xec
 800d050:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3718      	adds	r7, #24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	200007e0 	.word	0x200007e0
 800d064:	200007e1 	.word	0x200007e1

0800d068 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d068:	b580      	push	{r7, lr}
 800d06a:	b086      	sub	sp, #24
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	607a      	str	r2, [r7, #4]
 800d072:	603b      	str	r3, [r7, #0]
 800d074:	460b      	mov	r3, r1
 800d076:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d078:	2300      	movs	r3, #0
 800d07a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d07c:	f107 030b 	add.w	r3, r7, #11
 800d080:	2201      	movs	r2, #1
 800d082:	4619      	mov	r1, r3
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f7ff ff7e 	bl	800cf86 <_I2CWrite>
 800d08a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d092:	23ec      	movs	r3, #236	; 0xec
 800d094:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d096:	e00c      	b.n	800d0b2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	6879      	ldr	r1, [r7, #4]
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff ff91 	bl	800cfc4 <_I2CRead>
 800d0a2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d0aa:	23ec      	movs	r3, #236	; 0xec
 800d0ac:	75fb      	strb	r3, [r7, #23]
 800d0ae:	e000      	b.n	800d0b2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800d0b0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800d0b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3718      	adds	r7, #24
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
	...

0800d0c0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d0d4:	4a0b      	ldr	r2, [pc, #44]	; (800d104 <VL53L0X_WrByte+0x44>)
 800d0d6:	78fb      	ldrb	r3, [r7, #3]
 800d0d8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800d0da:	4a0a      	ldr	r2, [pc, #40]	; (800d104 <VL53L0X_WrByte+0x44>)
 800d0dc:	78bb      	ldrb	r3, [r7, #2]
 800d0de:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	4908      	ldr	r1, [pc, #32]	; (800d104 <VL53L0X_WrByte+0x44>)
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7ff ff4e 	bl	800cf86 <_I2CWrite>
 800d0ea:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d0f2:	23ec      	movs	r3, #236	; 0xec
 800d0f4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	200007e0 	.word	0x200007e0

0800d108 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	70fb      	strb	r3, [r7, #3]
 800d114:	4613      	mov	r3, r2
 800d116:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d118:	2300      	movs	r3, #0
 800d11a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d11c:	4a0e      	ldr	r2, [pc, #56]	; (800d158 <VL53L0X_WrWord+0x50>)
 800d11e:	78fb      	ldrb	r3, [r7, #3]
 800d120:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800d122:	883b      	ldrh	r3, [r7, #0]
 800d124:	0a1b      	lsrs	r3, r3, #8
 800d126:	b29b      	uxth	r3, r3
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	4b0b      	ldr	r3, [pc, #44]	; (800d158 <VL53L0X_WrWord+0x50>)
 800d12c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800d12e:	883b      	ldrh	r3, [r7, #0]
 800d130:	b2da      	uxtb	r2, r3
 800d132:	4b09      	ldr	r3, [pc, #36]	; (800d158 <VL53L0X_WrWord+0x50>)
 800d134:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d136:	2203      	movs	r2, #3
 800d138:	4907      	ldr	r1, [pc, #28]	; (800d158 <VL53L0X_WrWord+0x50>)
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff ff23 	bl	800cf86 <_I2CWrite>
 800d140:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d148:	23ec      	movs	r3, #236	; 0xec
 800d14a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d14c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	200007e0 	.word	0x200007e0

0800d15c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	4608      	mov	r0, r1
 800d166:	4611      	mov	r1, r2
 800d168:	461a      	mov	r2, r3
 800d16a:	4603      	mov	r3, r0
 800d16c:	70fb      	strb	r3, [r7, #3]
 800d16e:	460b      	mov	r3, r1
 800d170:	70bb      	strb	r3, [r7, #2]
 800d172:	4613      	mov	r3, r2
 800d174:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d176:	2300      	movs	r3, #0
 800d178:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800d17a:	f107 020e 	add.w	r2, r7, #14
 800d17e:	78fb      	ldrb	r3, [r7, #3]
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f81e 	bl	800d1c4 <VL53L0X_RdByte>
 800d188:	4603      	mov	r3, r0
 800d18a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800d18c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d110      	bne.n	800d1b6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800d194:	7bba      	ldrb	r2, [r7, #14]
 800d196:	78bb      	ldrb	r3, [r7, #2]
 800d198:	4013      	ands	r3, r2
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	787b      	ldrb	r3, [r7, #1]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800d1a4:	7bba      	ldrb	r2, [r7, #14]
 800d1a6:	78fb      	ldrb	r3, [r7, #3]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff ff88 	bl	800d0c0 <VL53L0X_WrByte>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73fb      	strb	r3, [r7, #15]
 800d1b4:	e000      	b.n	800d1b8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800d1b6:	bf00      	nop
done:
    return Status;
 800d1b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d1d6:	f107 030b 	add.w	r3, r7, #11
 800d1da:	2201      	movs	r2, #1
 800d1dc:	4619      	mov	r1, r3
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f7ff fed1 	bl	800cf86 <_I2CWrite>
 800d1e4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d1ec:	23ec      	movs	r3, #236	; 0xec
 800d1ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d1f0:	e00c      	b.n	800d20c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	6879      	ldr	r1, [r7, #4]
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f7ff fee4 	bl	800cfc4 <_I2CRead>
 800d1fc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d204:	23ec      	movs	r3, #236	; 0xec
 800d206:	75fb      	strb	r3, [r7, #23]
 800d208:	e000      	b.n	800d20c <VL53L0X_RdByte+0x48>
    }
done:
 800d20a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800d20c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3718      	adds	r7, #24
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	460b      	mov	r3, r1
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d226:	2300      	movs	r3, #0
 800d228:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d22a:	f107 030b 	add.w	r3, r7, #11
 800d22e:	2201      	movs	r2, #1
 800d230:	4619      	mov	r1, r3
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f7ff fea7 	bl	800cf86 <_I2CWrite>
 800d238:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d240:	23ec      	movs	r3, #236	; 0xec
 800d242:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d244:	e017      	b.n	800d276 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800d246:	2202      	movs	r2, #2
 800d248:	490e      	ldr	r1, [pc, #56]	; (800d284 <VL53L0X_RdWord+0x6c>)
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f7ff feba 	bl	800cfc4 <_I2CRead>
 800d250:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d258:	23ec      	movs	r3, #236	; 0xec
 800d25a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d25c:	e00b      	b.n	800d276 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800d25e:	4b09      	ldr	r3, [pc, #36]	; (800d284 <VL53L0X_RdWord+0x6c>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	b29b      	uxth	r3, r3
 800d264:	021b      	lsls	r3, r3, #8
 800d266:	b29a      	uxth	r2, r3
 800d268:	4b06      	ldr	r3, [pc, #24]	; (800d284 <VL53L0X_RdWord+0x6c>)
 800d26a:	785b      	ldrb	r3, [r3, #1]
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	4413      	add	r3, r2
 800d270:	b29a      	uxth	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800d276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	200007e0 	.word	0x200007e0

0800d288 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	460b      	mov	r3, r1
 800d292:	607a      	str	r2, [r7, #4]
 800d294:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d296:	2300      	movs	r3, #0
 800d298:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d29a:	f107 030b 	add.w	r3, r7, #11
 800d29e:	2201      	movs	r2, #1
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f7ff fe6f 	bl	800cf86 <_I2CWrite>
 800d2a8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d2b0:	23ec      	movs	r3, #236	; 0xec
 800d2b2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d2b4:	e01b      	b.n	800d2ee <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800d2b6:	2204      	movs	r2, #4
 800d2b8:	4910      	ldr	r1, [pc, #64]	; (800d2fc <VL53L0X_RdDWord+0x74>)
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f7ff fe82 	bl	800cfc4 <_I2CRead>
 800d2c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d2c8:	23ec      	movs	r3, #236	; 0xec
 800d2ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d2cc:	e00f      	b.n	800d2ee <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800d2ce:	4b0b      	ldr	r3, [pc, #44]	; (800d2fc <VL53L0X_RdDWord+0x74>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	061a      	lsls	r2, r3, #24
 800d2d4:	4b09      	ldr	r3, [pc, #36]	; (800d2fc <VL53L0X_RdDWord+0x74>)
 800d2d6:	785b      	ldrb	r3, [r3, #1]
 800d2d8:	041b      	lsls	r3, r3, #16
 800d2da:	441a      	add	r2, r3
 800d2dc:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <VL53L0X_RdDWord+0x74>)
 800d2de:	789b      	ldrb	r3, [r3, #2]
 800d2e0:	021b      	lsls	r3, r3, #8
 800d2e2:	4413      	add	r3, r2
 800d2e4:	4a05      	ldr	r2, [pc, #20]	; (800d2fc <VL53L0X_RdDWord+0x74>)
 800d2e6:	78d2      	ldrb	r2, [r2, #3]
 800d2e8:	441a      	add	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800d2ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	200007e0 	.word	0x200007e0

0800d300 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d308:	2300      	movs	r3, #0
 800d30a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800d30c:	2002      	movs	r0, #2
 800d30e:	f7f4 f893 	bl	8001438 <HAL_Delay>
    return status;
 800d312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
	...

0800d320 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d32c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d330:	f002 fca2 	bl	800fc78 <USBD_static_malloc>
 800d334:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d109      	bne.n	800d350 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	32b0      	adds	r2, #176	; 0xb0
 800d346:	2100      	movs	r1, #0
 800d348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d34c:	2302      	movs	r3, #2
 800d34e:	e0d4      	b.n	800d4fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d350:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d354:	2100      	movs	r1, #0
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f002 fd0a 	bl	800fd70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	32b0      	adds	r2, #176	; 0xb0
 800d366:	68f9      	ldr	r1, [r7, #12]
 800d368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	32b0      	adds	r2, #176	; 0xb0
 800d376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	7c1b      	ldrb	r3, [r3, #16]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d138      	bne.n	800d3fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d388:	4b5e      	ldr	r3, [pc, #376]	; (800d504 <USBD_CDC_Init+0x1e4>)
 800d38a:	7819      	ldrb	r1, [r3, #0]
 800d38c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d390:	2202      	movs	r2, #2
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f002 fb4d 	bl	800fa32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d398:	4b5a      	ldr	r3, [pc, #360]	; (800d504 <USBD_CDC_Init+0x1e4>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	f003 020f 	and.w	r2, r3, #15
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	440b      	add	r3, r1
 800d3ac:	3324      	adds	r3, #36	; 0x24
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d3b2:	4b55      	ldr	r3, [pc, #340]	; (800d508 <USBD_CDC_Init+0x1e8>)
 800d3b4:	7819      	ldrb	r1, [r3, #0]
 800d3b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f002 fb38 	bl	800fa32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d3c2:	4b51      	ldr	r3, [pc, #324]	; (800d508 <USBD_CDC_Init+0x1e8>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	f003 020f 	and.w	r2, r3, #15
 800d3ca:	6879      	ldr	r1, [r7, #4]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	4413      	add	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	440b      	add	r3, r1
 800d3d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d3da:	2201      	movs	r2, #1
 800d3dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d3de:	4b4b      	ldr	r3, [pc, #300]	; (800d50c <USBD_CDC_Init+0x1ec>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f003 020f 	and.w	r2, r3, #15
 800d3e6:	6879      	ldr	r1, [r7, #4]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	440b      	add	r3, r1
 800d3f2:	3326      	adds	r3, #38	; 0x26
 800d3f4:	2210      	movs	r2, #16
 800d3f6:	801a      	strh	r2, [r3, #0]
 800d3f8:	e035      	b.n	800d466 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d3fa:	4b42      	ldr	r3, [pc, #264]	; (800d504 <USBD_CDC_Init+0x1e4>)
 800d3fc:	7819      	ldrb	r1, [r3, #0]
 800d3fe:	2340      	movs	r3, #64	; 0x40
 800d400:	2202      	movs	r2, #2
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f002 fb15 	bl	800fa32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d408:	4b3e      	ldr	r3, [pc, #248]	; (800d504 <USBD_CDC_Init+0x1e4>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	f003 020f 	and.w	r2, r3, #15
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	4613      	mov	r3, r2
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	4413      	add	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	440b      	add	r3, r1
 800d41c:	3324      	adds	r3, #36	; 0x24
 800d41e:	2201      	movs	r2, #1
 800d420:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d422:	4b39      	ldr	r3, [pc, #228]	; (800d508 <USBD_CDC_Init+0x1e8>)
 800d424:	7819      	ldrb	r1, [r3, #0]
 800d426:	2340      	movs	r3, #64	; 0x40
 800d428:	2202      	movs	r2, #2
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f002 fb01 	bl	800fa32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d430:	4b35      	ldr	r3, [pc, #212]	; (800d508 <USBD_CDC_Init+0x1e8>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	f003 020f 	and.w	r2, r3, #15
 800d438:	6879      	ldr	r1, [r7, #4]
 800d43a:	4613      	mov	r3, r2
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	4413      	add	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	440b      	add	r3, r1
 800d444:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d448:	2201      	movs	r2, #1
 800d44a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d44c:	4b2f      	ldr	r3, [pc, #188]	; (800d50c <USBD_CDC_Init+0x1ec>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	f003 020f 	and.w	r2, r3, #15
 800d454:	6879      	ldr	r1, [r7, #4]
 800d456:	4613      	mov	r3, r2
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	4413      	add	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	440b      	add	r3, r1
 800d460:	3326      	adds	r3, #38	; 0x26
 800d462:	2210      	movs	r2, #16
 800d464:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d466:	4b29      	ldr	r3, [pc, #164]	; (800d50c <USBD_CDC_Init+0x1ec>)
 800d468:	7819      	ldrb	r1, [r3, #0]
 800d46a:	2308      	movs	r3, #8
 800d46c:	2203      	movs	r2, #3
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f002 fadf 	bl	800fa32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d474:	4b25      	ldr	r3, [pc, #148]	; (800d50c <USBD_CDC_Init+0x1ec>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	f003 020f 	and.w	r2, r3, #15
 800d47c:	6879      	ldr	r1, [r7, #4]
 800d47e:	4613      	mov	r3, r2
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4413      	add	r3, r2
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	440b      	add	r3, r1
 800d488:	3324      	adds	r3, #36	; 0x24
 800d48a:	2201      	movs	r2, #1
 800d48c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2200      	movs	r2, #0
 800d492:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	33b0      	adds	r3, #176	; 0xb0
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	4413      	add	r3, r2
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d101      	bne.n	800d4c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d4c4:	2302      	movs	r3, #2
 800d4c6:	e018      	b.n	800d4fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	7c1b      	ldrb	r3, [r3, #16]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10a      	bne.n	800d4e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d4d0:	4b0d      	ldr	r3, [pc, #52]	; (800d508 <USBD_CDC_Init+0x1e8>)
 800d4d2:	7819      	ldrb	r1, [r3, #0]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f002 fb96 	bl	800fc10 <USBD_LL_PrepareReceive>
 800d4e4:	e008      	b.n	800d4f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d4e6:	4b08      	ldr	r3, [pc, #32]	; (800d508 <USBD_CDC_Init+0x1e8>)
 800d4e8:	7819      	ldrb	r1, [r3, #0]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4f0:	2340      	movs	r3, #64	; 0x40
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f002 fb8c 	bl	800fc10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	20000357 	.word	0x20000357
 800d508:	20000358 	.word	0x20000358
 800d50c:	20000359 	.word	0x20000359

0800d510 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d51c:	4b3a      	ldr	r3, [pc, #232]	; (800d608 <USBD_CDC_DeInit+0xf8>)
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	4619      	mov	r1, r3
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f002 faab 	bl	800fa7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d528:	4b37      	ldr	r3, [pc, #220]	; (800d608 <USBD_CDC_DeInit+0xf8>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	f003 020f 	and.w	r2, r3, #15
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	4613      	mov	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4413      	add	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	440b      	add	r3, r1
 800d53c:	3324      	adds	r3, #36	; 0x24
 800d53e:	2200      	movs	r2, #0
 800d540:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d542:	4b32      	ldr	r3, [pc, #200]	; (800d60c <USBD_CDC_DeInit+0xfc>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f002 fa98 	bl	800fa7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d54e:	4b2f      	ldr	r3, [pc, #188]	; (800d60c <USBD_CDC_DeInit+0xfc>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	f003 020f 	and.w	r2, r3, #15
 800d556:	6879      	ldr	r1, [r7, #4]
 800d558:	4613      	mov	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4413      	add	r3, r2
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	440b      	add	r3, r1
 800d562:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d566:	2200      	movs	r2, #0
 800d568:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d56a:	4b29      	ldr	r3, [pc, #164]	; (800d610 <USBD_CDC_DeInit+0x100>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	4619      	mov	r1, r3
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f002 fa84 	bl	800fa7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d576:	4b26      	ldr	r3, [pc, #152]	; (800d610 <USBD_CDC_DeInit+0x100>)
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	f003 020f 	and.w	r2, r3, #15
 800d57e:	6879      	ldr	r1, [r7, #4]
 800d580:	4613      	mov	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	440b      	add	r3, r1
 800d58a:	3324      	adds	r3, #36	; 0x24
 800d58c:	2200      	movs	r2, #0
 800d58e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d590:	4b1f      	ldr	r3, [pc, #124]	; (800d610 <USBD_CDC_DeInit+0x100>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	f003 020f 	and.w	r2, r3, #15
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	4613      	mov	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	440b      	add	r3, r1
 800d5a4:	3326      	adds	r3, #38	; 0x26
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	32b0      	adds	r2, #176	; 0xb0
 800d5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d01f      	beq.n	800d5fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	33b0      	adds	r3, #176	; 0xb0
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	4413      	add	r3, r2
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	32b0      	adds	r2, #176	; 0xb0
 800d5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f002 fb58 	bl	800fc94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	32b0      	adds	r2, #176	; 0xb0
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	20000357 	.word	0x20000357
 800d60c:	20000358 	.word	0x20000358
 800d610:	20000359 	.word	0x20000359

0800d614 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	32b0      	adds	r2, #176	; 0xb0
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d62e:	2300      	movs	r3, #0
 800d630:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d632:	2300      	movs	r3, #0
 800d634:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d640:	2303      	movs	r3, #3
 800d642:	e0bf      	b.n	800d7c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d050      	beq.n	800d6f2 <USBD_CDC_Setup+0xde>
 800d650:	2b20      	cmp	r3, #32
 800d652:	f040 80af 	bne.w	800d7b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	88db      	ldrh	r3, [r3, #6]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d03a      	beq.n	800d6d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	b25b      	sxtb	r3, r3
 800d664:	2b00      	cmp	r3, #0
 800d666:	da1b      	bge.n	800d6a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	33b0      	adds	r3, #176	; 0xb0
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d67e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	88d2      	ldrh	r2, [r2, #6]
 800d684:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	88db      	ldrh	r3, [r3, #6]
 800d68a:	2b07      	cmp	r3, #7
 800d68c:	bf28      	it	cs
 800d68e:	2307      	movcs	r3, #7
 800d690:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	89fa      	ldrh	r2, [r7, #14]
 800d696:	4619      	mov	r1, r3
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f001 fd89 	bl	800f1b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d69e:	e090      	b.n	800d7c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	785a      	ldrb	r2, [r3, #1]
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	88db      	ldrh	r3, [r3, #6]
 800d6ae:	2b3f      	cmp	r3, #63	; 0x3f
 800d6b0:	d803      	bhi.n	800d6ba <USBD_CDC_Setup+0xa6>
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	88db      	ldrh	r3, [r3, #6]
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	e000      	b.n	800d6bc <USBD_CDC_Setup+0xa8>
 800d6ba:	2240      	movs	r2, #64	; 0x40
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d6c2:	6939      	ldr	r1, [r7, #16]
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f001 fd9b 	bl	800f208 <USBD_CtlPrepareRx>
      break;
 800d6d2:	e076      	b.n	800d7c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	33b0      	adds	r3, #176	; 0xb0
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	4413      	add	r3, r2
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	7850      	ldrb	r0, [r2, #1]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	6839      	ldr	r1, [r7, #0]
 800d6ee:	4798      	blx	r3
      break;
 800d6f0:	e067      	b.n	800d7c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	785b      	ldrb	r3, [r3, #1]
 800d6f6:	2b0b      	cmp	r3, #11
 800d6f8:	d851      	bhi.n	800d79e <USBD_CDC_Setup+0x18a>
 800d6fa:	a201      	add	r2, pc, #4	; (adr r2, 800d700 <USBD_CDC_Setup+0xec>)
 800d6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d700:	0800d731 	.word	0x0800d731
 800d704:	0800d7ad 	.word	0x0800d7ad
 800d708:	0800d79f 	.word	0x0800d79f
 800d70c:	0800d79f 	.word	0x0800d79f
 800d710:	0800d79f 	.word	0x0800d79f
 800d714:	0800d79f 	.word	0x0800d79f
 800d718:	0800d79f 	.word	0x0800d79f
 800d71c:	0800d79f 	.word	0x0800d79f
 800d720:	0800d79f 	.word	0x0800d79f
 800d724:	0800d79f 	.word	0x0800d79f
 800d728:	0800d75b 	.word	0x0800d75b
 800d72c:	0800d785 	.word	0x0800d785
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d736:	b2db      	uxtb	r3, r3
 800d738:	2b03      	cmp	r3, #3
 800d73a:	d107      	bne.n	800d74c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d73c:	f107 030a 	add.w	r3, r7, #10
 800d740:	2202      	movs	r2, #2
 800d742:	4619      	mov	r1, r3
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f001 fd33 	bl	800f1b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d74a:	e032      	b.n	800d7b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f001 fcbd 	bl	800f0ce <USBD_CtlError>
            ret = USBD_FAIL;
 800d754:	2303      	movs	r3, #3
 800d756:	75fb      	strb	r3, [r7, #23]
          break;
 800d758:	e02b      	b.n	800d7b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b03      	cmp	r3, #3
 800d764:	d107      	bne.n	800d776 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d766:	f107 030d 	add.w	r3, r7, #13
 800d76a:	2201      	movs	r2, #1
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f001 fd1e 	bl	800f1b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d774:	e01d      	b.n	800d7b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f001 fca8 	bl	800f0ce <USBD_CtlError>
            ret = USBD_FAIL;
 800d77e:	2303      	movs	r3, #3
 800d780:	75fb      	strb	r3, [r7, #23]
          break;
 800d782:	e016      	b.n	800d7b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b03      	cmp	r3, #3
 800d78e:	d00f      	beq.n	800d7b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d790:	6839      	ldr	r1, [r7, #0]
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f001 fc9b 	bl	800f0ce <USBD_CtlError>
            ret = USBD_FAIL;
 800d798:	2303      	movs	r3, #3
 800d79a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d79c:	e008      	b.n	800d7b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d79e:	6839      	ldr	r1, [r7, #0]
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f001 fc94 	bl	800f0ce <USBD_CtlError>
          ret = USBD_FAIL;
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	75fb      	strb	r3, [r7, #23]
          break;
 800d7aa:	e002      	b.n	800d7b2 <USBD_CDC_Setup+0x19e>
          break;
 800d7ac:	bf00      	nop
 800d7ae:	e008      	b.n	800d7c2 <USBD_CDC_Setup+0x1ae>
          break;
 800d7b0:	bf00      	nop
      }
      break;
 800d7b2:	e006      	b.n	800d7c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f001 fc89 	bl	800f0ce <USBD_CtlError>
      ret = USBD_FAIL;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	75fb      	strb	r3, [r7, #23]
      break;
 800d7c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3718      	adds	r7, #24
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d7de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	32b0      	adds	r2, #176	; 0xb0
 800d7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d7f2:	2303      	movs	r3, #3
 800d7f4:	e065      	b.n	800d8c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	32b0      	adds	r2, #176	; 0xb0
 800d800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d804:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d806:	78fb      	ldrb	r3, [r7, #3]
 800d808:	f003 020f 	and.w	r2, r3, #15
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	4613      	mov	r3, r2
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4413      	add	r3, r2
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	440b      	add	r3, r1
 800d818:	3318      	adds	r3, #24
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d02f      	beq.n	800d880 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d820:	78fb      	ldrb	r3, [r7, #3]
 800d822:	f003 020f 	and.w	r2, r3, #15
 800d826:	6879      	ldr	r1, [r7, #4]
 800d828:	4613      	mov	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	440b      	add	r3, r1
 800d832:	3318      	adds	r3, #24
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	78fb      	ldrb	r3, [r7, #3]
 800d838:	f003 010f 	and.w	r1, r3, #15
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	460b      	mov	r3, r1
 800d840:	00db      	lsls	r3, r3, #3
 800d842:	440b      	add	r3, r1
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	4403      	add	r3, r0
 800d848:	3348      	adds	r3, #72	; 0x48
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d850:	fb01 f303 	mul.w	r3, r1, r3
 800d854:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d856:	2b00      	cmp	r3, #0
 800d858:	d112      	bne.n	800d880 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	f003 020f 	and.w	r2, r3, #15
 800d860:	6879      	ldr	r1, [r7, #4]
 800d862:	4613      	mov	r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4413      	add	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	440b      	add	r3, r1
 800d86c:	3318      	adds	r3, #24
 800d86e:	2200      	movs	r2, #0
 800d870:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d872:	78f9      	ldrb	r1, [r7, #3]
 800d874:	2300      	movs	r3, #0
 800d876:	2200      	movs	r2, #0
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f002 f9a8 	bl	800fbce <USBD_LL_Transmit>
 800d87e:	e01f      	b.n	800d8c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	2200      	movs	r2, #0
 800d884:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	33b0      	adds	r3, #176	; 0xb0
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4413      	add	r3, r2
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d010      	beq.n	800d8c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	33b0      	adds	r3, #176	; 0xb0
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4413      	add	r3, r2
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d8bc:	78fa      	ldrb	r2, [r7, #3]
 800d8be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b084      	sub	sp, #16
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	32b0      	adds	r2, #176	; 0xb0
 800d8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	32b0      	adds	r2, #176	; 0xb0
 800d8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	e01a      	b.n	800d932 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d8fc:	78fb      	ldrb	r3, [r7, #3]
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f002 f9a6 	bl	800fc52 <USBD_LL_GetRxDataSize>
 800d906:	4602      	mov	r2, r0
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	33b0      	adds	r3, #176	; 0xb0
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4413      	add	r3, r2
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d92c:	4611      	mov	r1, r2
 800d92e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b084      	sub	sp, #16
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	32b0      	adds	r2, #176	; 0xb0
 800d94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d950:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d101      	bne.n	800d95c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d958:	2303      	movs	r3, #3
 800d95a:	e025      	b.n	800d9a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	33b0      	adds	r3, #176	; 0xb0
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d01a      	beq.n	800d9a6 <USBD_CDC_EP0_RxReady+0x6c>
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d976:	2bff      	cmp	r3, #255	; 0xff
 800d978:	d015      	beq.n	800d9a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	33b0      	adds	r3, #176	; 0xb0
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	4413      	add	r3, r2
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d992:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d99a:	b292      	uxth	r2, r2
 800d99c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	22ff      	movs	r2, #255	; 0xff
 800d9a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d9b8:	2182      	movs	r1, #130	; 0x82
 800d9ba:	4818      	ldr	r0, [pc, #96]	; (800da1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d9bc:	f000 fd4f 	bl	800e45e <USBD_GetEpDesc>
 800d9c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d9c2:	2101      	movs	r1, #1
 800d9c4:	4815      	ldr	r0, [pc, #84]	; (800da1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d9c6:	f000 fd4a 	bl	800e45e <USBD_GetEpDesc>
 800d9ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d9cc:	2181      	movs	r1, #129	; 0x81
 800d9ce:	4813      	ldr	r0, [pc, #76]	; (800da1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d9d0:	f000 fd45 	bl	800e45e <USBD_GetEpDesc>
 800d9d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2210      	movs	r2, #16
 800d9e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d006      	beq.n	800d9f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9f0:	711a      	strb	r2, [r3, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d006      	beq.n	800da0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da04:	711a      	strb	r2, [r3, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2243      	movs	r2, #67	; 0x43
 800da0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800da10:	4b02      	ldr	r3, [pc, #8]	; (800da1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800da12:	4618      	mov	r0, r3
 800da14:	3718      	adds	r7, #24
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	20000314 	.word	0x20000314

0800da20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800da28:	2182      	movs	r1, #130	; 0x82
 800da2a:	4818      	ldr	r0, [pc, #96]	; (800da8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800da2c:	f000 fd17 	bl	800e45e <USBD_GetEpDesc>
 800da30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800da32:	2101      	movs	r1, #1
 800da34:	4815      	ldr	r0, [pc, #84]	; (800da8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800da36:	f000 fd12 	bl	800e45e <USBD_GetEpDesc>
 800da3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800da3c:	2181      	movs	r1, #129	; 0x81
 800da3e:	4813      	ldr	r0, [pc, #76]	; (800da8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800da40:	f000 fd0d 	bl	800e45e <USBD_GetEpDesc>
 800da44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	2210      	movs	r2, #16
 800da50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d006      	beq.n	800da66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	2200      	movs	r2, #0
 800da5c:	711a      	strb	r2, [r3, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	f042 0202 	orr.w	r2, r2, #2
 800da64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d006      	beq.n	800da7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2200      	movs	r2, #0
 800da70:	711a      	strb	r2, [r3, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	f042 0202 	orr.w	r2, r2, #2
 800da78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2243      	movs	r2, #67	; 0x43
 800da7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800da80:	4b02      	ldr	r3, [pc, #8]	; (800da8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800da82:	4618      	mov	r0, r3
 800da84:	3718      	adds	r7, #24
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	20000314 	.word	0x20000314

0800da90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800da98:	2182      	movs	r1, #130	; 0x82
 800da9a:	4818      	ldr	r0, [pc, #96]	; (800dafc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800da9c:	f000 fcdf 	bl	800e45e <USBD_GetEpDesc>
 800daa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800daa2:	2101      	movs	r1, #1
 800daa4:	4815      	ldr	r0, [pc, #84]	; (800dafc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800daa6:	f000 fcda 	bl	800e45e <USBD_GetEpDesc>
 800daaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800daac:	2181      	movs	r1, #129	; 0x81
 800daae:	4813      	ldr	r0, [pc, #76]	; (800dafc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dab0:	f000 fcd5 	bl	800e45e <USBD_GetEpDesc>
 800dab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	2210      	movs	r2, #16
 800dac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d006      	beq.n	800dad6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2200      	movs	r2, #0
 800dacc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dad0:	711a      	strb	r2, [r3, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d006      	beq.n	800daea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dae4:	711a      	strb	r2, [r3, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2243      	movs	r2, #67	; 0x43
 800daee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800daf0:	4b02      	ldr	r3, [pc, #8]	; (800dafc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3718      	adds	r7, #24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20000314 	.word	0x20000314

0800db00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	220a      	movs	r2, #10
 800db0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800db0e:	4b03      	ldr	r3, [pc, #12]	; (800db1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	200002d0 	.word	0x200002d0

0800db20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800db30:	2303      	movs	r3, #3
 800db32:	e009      	b.n	800db48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	33b0      	adds	r3, #176	; 0xb0
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800db54:	b480      	push	{r7}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	32b0      	adds	r2, #176	; 0xb0
 800db6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db6e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800db76:	2303      	movs	r3, #3
 800db78:	e008      	b.n	800db8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	371c      	adds	r7, #28
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	32b0      	adds	r2, #176	; 0xb0
 800dbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d101      	bne.n	800dbbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dbb8:	2303      	movs	r3, #3
 800dbba:	e004      	b.n	800dbc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
	...

0800dbd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	32b0      	adds	r2, #176	; 0xb0
 800dbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dbec:	2301      	movs	r3, #1
 800dbee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	32b0      	adds	r2, #176	; 0xb0
 800dbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dc02:	2303      	movs	r3, #3
 800dc04:	e025      	b.n	800dc52 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d11f      	bne.n	800dc50 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dc18:	4b10      	ldr	r3, [pc, #64]	; (800dc5c <USBD_CDC_TransmitPacket+0x88>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	f003 020f 	and.w	r2, r3, #15
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	4413      	add	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4403      	add	r3, r0
 800dc32:	3318      	adds	r3, #24
 800dc34:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dc36:	4b09      	ldr	r3, [pc, #36]	; (800dc5c <USBD_CDC_TransmitPacket+0x88>)
 800dc38:	7819      	ldrb	r1, [r3, #0]
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f001 ffc1 	bl	800fbce <USBD_LL_Transmit>

    ret = USBD_OK;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20000357 	.word	0x20000357

0800dc60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	32b0      	adds	r2, #176	; 0xb0
 800dc72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	32b0      	adds	r2, #176	; 0xb0
 800dc82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	e018      	b.n	800dcc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	7c1b      	ldrb	r3, [r3, #16]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10a      	bne.n	800dcac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc96:	4b0c      	ldr	r3, [pc, #48]	; (800dcc8 <USBD_CDC_ReceivePacket+0x68>)
 800dc98:	7819      	ldrb	r1, [r3, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f001 ffb3 	bl	800fc10 <USBD_LL_PrepareReceive>
 800dcaa:	e008      	b.n	800dcbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dcac:	4b06      	ldr	r3, [pc, #24]	; (800dcc8 <USBD_CDC_ReceivePacket+0x68>)
 800dcae:	7819      	ldrb	r1, [r3, #0]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dcb6:	2340      	movs	r3, #64	; 0x40
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f001 ffa9 	bl	800fc10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	20000358 	.word	0x20000358

0800dccc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b086      	sub	sp, #24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dce0:	2303      	movs	r3, #3
 800dce2:	e01f      	b.n	800dd24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d003      	beq.n	800dd0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	79fa      	ldrb	r2, [r7, #7]
 800dd16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f001 fe23 	bl	800f964 <USBD_LL_Init>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dd22:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd36:	2300      	movs	r3, #0
 800dd38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e025      	b.n	800dd90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	32ae      	adds	r2, #174	; 0xae
 800dd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00f      	beq.n	800dd80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	32ae      	adds	r2, #174	; 0xae
 800dd6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd70:	f107 020e 	add.w	r2, r7, #14
 800dd74:	4610      	mov	r0, r2
 800dd76:	4798      	blx	r3
 800dd78:	4602      	mov	r2, r0
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd86:	1c5a      	adds	r2, r3, #1
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dd8e:	2300      	movs	r3, #0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f001 fe2b 	bl	800f9fc <USBD_LL_Start>
 800dda6:	4603      	mov	r3, r0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ddb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b084      	sub	sp, #16
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	460b      	mov	r3, r1
 800ddd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d009      	beq.n	800ddf4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	78fa      	ldrb	r2, [r7, #3]
 800ddea:	4611      	mov	r1, r2
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	4798      	blx	r3
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	78fa      	ldrb	r2, [r7, #3]
 800de18:	4611      	mov	r1, r2
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	4798      	blx	r3
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d001      	beq.n	800de28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800de24:	2303      	movs	r3, #3
 800de26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800de28:	7bfb      	ldrb	r3, [r7, #15]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b084      	sub	sp, #16
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
 800de3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de42:	6839      	ldr	r1, [r7, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	f001 f908 	bl	800f05a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2201      	movs	r2, #1
 800de4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800de58:	461a      	mov	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de66:	f003 031f 	and.w	r3, r3, #31
 800de6a:	2b02      	cmp	r3, #2
 800de6c:	d01a      	beq.n	800dea4 <USBD_LL_SetupStage+0x72>
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d822      	bhi.n	800deb8 <USBD_LL_SetupStage+0x86>
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <USBD_LL_SetupStage+0x4a>
 800de76:	2b01      	cmp	r3, #1
 800de78:	d00a      	beq.n	800de90 <USBD_LL_SetupStage+0x5e>
 800de7a:	e01d      	b.n	800deb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de82:	4619      	mov	r1, r3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 fb5f 	bl	800e548 <USBD_StdDevReq>
 800de8a:	4603      	mov	r3, r0
 800de8c:	73fb      	strb	r3, [r7, #15]
      break;
 800de8e:	e020      	b.n	800ded2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fbc7 	bl	800e62c <USBD_StdItfReq>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73fb      	strb	r3, [r7, #15]
      break;
 800dea2:	e016      	b.n	800ded2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800deaa:	4619      	mov	r1, r3
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fc29 	bl	800e704 <USBD_StdEPReq>
 800deb2:	4603      	mov	r3, r0
 800deb4:	73fb      	strb	r3, [r7, #15]
      break;
 800deb6:	e00c      	b.n	800ded2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800debe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	4619      	mov	r1, r3
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f001 fdf8 	bl	800fabc <USBD_LL_StallEP>
 800decc:	4603      	mov	r3, r0
 800dece:	73fb      	strb	r3, [r7, #15]
      break;
 800ded0:	bf00      	nop
  }

  return ret;
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	460b      	mov	r3, r1
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800deee:	7afb      	ldrb	r3, [r7, #11]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d16e      	bne.n	800dfd2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800defa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df02:	2b03      	cmp	r3, #3
 800df04:	f040 8098 	bne.w	800e038 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	689a      	ldr	r2, [r3, #8]
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	429a      	cmp	r2, r3
 800df12:	d913      	bls.n	800df3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	689a      	ldr	r2, [r3, #8]
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	1ad2      	subs	r2, r2, r3
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	68da      	ldr	r2, [r3, #12]
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	4293      	cmp	r3, r2
 800df2c:	bf28      	it	cs
 800df2e:	4613      	movcs	r3, r2
 800df30:	461a      	mov	r2, r3
 800df32:	6879      	ldr	r1, [r7, #4]
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f001 f984 	bl	800f242 <USBD_CtlContinueRx>
 800df3a:	e07d      	b.n	800e038 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800df42:	f003 031f 	and.w	r3, r3, #31
 800df46:	2b02      	cmp	r3, #2
 800df48:	d014      	beq.n	800df74 <USBD_LL_DataOutStage+0x98>
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	d81d      	bhi.n	800df8a <USBD_LL_DataOutStage+0xae>
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <USBD_LL_DataOutStage+0x7c>
 800df52:	2b01      	cmp	r3, #1
 800df54:	d003      	beq.n	800df5e <USBD_LL_DataOutStage+0x82>
 800df56:	e018      	b.n	800df8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800df58:	2300      	movs	r3, #0
 800df5a:	75bb      	strb	r3, [r7, #22]
            break;
 800df5c:	e018      	b.n	800df90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800df64:	b2db      	uxtb	r3, r3
 800df66:	4619      	mov	r1, r3
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f000 fa5e 	bl	800e42a <USBD_CoreFindIF>
 800df6e:	4603      	mov	r3, r0
 800df70:	75bb      	strb	r3, [r7, #22]
            break;
 800df72:	e00d      	b.n	800df90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	4619      	mov	r1, r3
 800df7e:	68f8      	ldr	r0, [r7, #12]
 800df80:	f000 fa60 	bl	800e444 <USBD_CoreFindEP>
 800df84:	4603      	mov	r3, r0
 800df86:	75bb      	strb	r3, [r7, #22]
            break;
 800df88:	e002      	b.n	800df90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800df8a:	2300      	movs	r3, #0
 800df8c:	75bb      	strb	r3, [r7, #22]
            break;
 800df8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800df90:	7dbb      	ldrb	r3, [r7, #22]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d119      	bne.n	800dfca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b03      	cmp	r3, #3
 800dfa0:	d113      	bne.n	800dfca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dfa2:	7dba      	ldrb	r2, [r7, #22]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	32ae      	adds	r2, #174	; 0xae
 800dfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00b      	beq.n	800dfca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dfb2:	7dba      	ldrb	r2, [r7, #22]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dfba:	7dba      	ldrb	r2, [r7, #22]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	32ae      	adds	r2, #174	; 0xae
 800dfc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f001 f94a 	bl	800f264 <USBD_CtlSendStatus>
 800dfd0:	e032      	b.n	800e038 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dfd2:	7afb      	ldrb	r3, [r7, #11]
 800dfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	4619      	mov	r1, r3
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f000 fa31 	bl	800e444 <USBD_CoreFindEP>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dfe6:	7dbb      	ldrb	r3, [r7, #22]
 800dfe8:	2bff      	cmp	r3, #255	; 0xff
 800dfea:	d025      	beq.n	800e038 <USBD_LL_DataOutStage+0x15c>
 800dfec:	7dbb      	ldrb	r3, [r7, #22]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d122      	bne.n	800e038 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	d117      	bne.n	800e02e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dffe:	7dba      	ldrb	r2, [r7, #22]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	32ae      	adds	r2, #174	; 0xae
 800e004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e008:	699b      	ldr	r3, [r3, #24]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00f      	beq.n	800e02e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e00e:	7dba      	ldrb	r2, [r7, #22]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e016:	7dba      	ldrb	r2, [r7, #22]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	32ae      	adds	r2, #174	; 0xae
 800e01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e020:	699b      	ldr	r3, [r3, #24]
 800e022:	7afa      	ldrb	r2, [r7, #11]
 800e024:	4611      	mov	r1, r2
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	4798      	blx	r3
 800e02a:	4603      	mov	r3, r0
 800e02c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d001      	beq.n	800e038 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	e000      	b.n	800e03a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3718      	adds	r7, #24
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b086      	sub	sp, #24
 800e046:	af00      	add	r7, sp, #0
 800e048:	60f8      	str	r0, [r7, #12]
 800e04a:	460b      	mov	r3, r1
 800e04c:	607a      	str	r2, [r7, #4]
 800e04e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e050:	7afb      	ldrb	r3, [r7, #11]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d16f      	bne.n	800e136 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3314      	adds	r3, #20
 800e05a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e062:	2b02      	cmp	r3, #2
 800e064:	d15a      	bne.n	800e11c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	689a      	ldr	r2, [r3, #8]
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d914      	bls.n	800e09c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	689a      	ldr	r2, [r3, #8]
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	1ad2      	subs	r2, r2, r3
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	461a      	mov	r2, r3
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f001 f8ac 	bl	800f1e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e08e:	2300      	movs	r3, #0
 800e090:	2200      	movs	r2, #0
 800e092:	2100      	movs	r1, #0
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f001 fdbb 	bl	800fc10 <USBD_LL_PrepareReceive>
 800e09a:	e03f      	b.n	800e11c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	68da      	ldr	r2, [r3, #12]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d11c      	bne.n	800e0e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	685a      	ldr	r2, [r3, #4]
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d316      	bcc.n	800e0e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d20f      	bcs.n	800e0e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f001 f88d 	bl	800f1e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	2100      	movs	r1, #0
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f001 fd98 	bl	800fc10 <USBD_LL_PrepareReceive>
 800e0e0:	e01c      	b.n	800e11c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d10f      	bne.n	800e10e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d009      	beq.n	800e10e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e10e:	2180      	movs	r1, #128	; 0x80
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f001 fcd3 	bl	800fabc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f001 f8b7 	bl	800f28a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d03a      	beq.n	800e19c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f7ff fe42 	bl	800ddb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e134:	e032      	b.n	800e19c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e136:	7afb      	ldrb	r3, [r7, #11]
 800e138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	4619      	mov	r1, r3
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f000 f97f 	bl	800e444 <USBD_CoreFindEP>
 800e146:	4603      	mov	r3, r0
 800e148:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
 800e14c:	2bff      	cmp	r3, #255	; 0xff
 800e14e:	d025      	beq.n	800e19c <USBD_LL_DataInStage+0x15a>
 800e150:	7dfb      	ldrb	r3, [r7, #23]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d122      	bne.n	800e19c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d11c      	bne.n	800e19c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e162:	7dfa      	ldrb	r2, [r7, #23]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	32ae      	adds	r2, #174	; 0xae
 800e168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d014      	beq.n	800e19c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e172:	7dfa      	ldrb	r2, [r7, #23]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e17a:	7dfa      	ldrb	r2, [r7, #23]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	32ae      	adds	r2, #174	; 0xae
 800e180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e184:	695b      	ldr	r3, [r3, #20]
 800e186:	7afa      	ldrb	r2, [r7, #11]
 800e188:	4611      	mov	r1, r2
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	4798      	blx	r3
 800e18e:	4603      	mov	r3, r0
 800e190:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e192:	7dbb      	ldrb	r3, [r7, #22]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e198:	7dbb      	ldrb	r3, [r7, #22]
 800e19a:	e000      	b.n	800e19e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b084      	sub	sp, #16
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d014      	beq.n	800e20c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00e      	beq.n	800e20c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	6852      	ldr	r2, [r2, #4]
 800e1fa:	b2d2      	uxtb	r2, r2
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	4798      	blx	r3
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e208:	2303      	movs	r3, #3
 800e20a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e20c:	2340      	movs	r3, #64	; 0x40
 800e20e:	2200      	movs	r2, #0
 800e210:	2100      	movs	r1, #0
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f001 fc0d 	bl	800fa32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2240      	movs	r2, #64	; 0x40
 800e224:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e228:	2340      	movs	r3, #64	; 0x40
 800e22a:	2200      	movs	r2, #0
 800e22c:	2180      	movs	r1, #128	; 0x80
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f001 fbff 	bl	800fa32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2201      	movs	r2, #1
 800e238:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2240      	movs	r2, #64	; 0x40
 800e23e:	621a      	str	r2, [r3, #32]

  return ret;
 800e240:	7bfb      	ldrb	r3, [r7, #15]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e24a:	b480      	push	{r7}
 800e24c:	b083      	sub	sp, #12
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
 800e252:	460b      	mov	r3, r1
 800e254:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	78fa      	ldrb	r2, [r7, #3]
 800e25a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	370c      	adds	r7, #12
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr

0800e26a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e26a:	b480      	push	{r7}
 800e26c:	b083      	sub	sp, #12
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2204      	movs	r2, #4
 800e284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e296:	b480      	push	{r7}
 800e298:	b083      	sub	sp, #12
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b04      	cmp	r3, #4
 800e2a8:	d106      	bne.n	800e2b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e2b8:	2300      	movs	r3, #0
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b082      	sub	sp, #8
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b03      	cmp	r3, #3
 800e2d8:	d110      	bne.n	800e2fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00b      	beq.n	800e2fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2ea:	69db      	ldr	r3, [r3, #28]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d005      	beq.n	800e2fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2f6:	69db      	ldr	r3, [r3, #28]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	460b      	mov	r3, r1
 800e310:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	32ae      	adds	r2, #174	; 0xae
 800e31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d101      	bne.n	800e328 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e324:	2303      	movs	r3, #3
 800e326:	e01c      	b.n	800e362 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	2b03      	cmp	r3, #3
 800e332:	d115      	bne.n	800e360 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	32ae      	adds	r2, #174	; 0xae
 800e33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e342:	6a1b      	ldr	r3, [r3, #32]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00b      	beq.n	800e360 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	32ae      	adds	r2, #174	; 0xae
 800e352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e356:	6a1b      	ldr	r3, [r3, #32]
 800e358:	78fa      	ldrb	r2, [r7, #3]
 800e35a:	4611      	mov	r1, r2
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b082      	sub	sp, #8
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	460b      	mov	r3, r1
 800e374:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	32ae      	adds	r2, #174	; 0xae
 800e380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e388:	2303      	movs	r3, #3
 800e38a:	e01c      	b.n	800e3c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b03      	cmp	r3, #3
 800e396:	d115      	bne.n	800e3c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	32ae      	adds	r2, #174	; 0xae
 800e3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00b      	beq.n	800e3c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	32ae      	adds	r2, #174	; 0xae
 800e3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3bc:	78fa      	ldrb	r2, [r7, #3]
 800e3be:	4611      	mov	r1, r2
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b083      	sub	sp, #12
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00e      	beq.n	800e420 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	6852      	ldr	r2, [r2, #4]
 800e40e:	b2d2      	uxtb	r2, r2
 800e410:	4611      	mov	r1, r2
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	4798      	blx	r3
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d001      	beq.n	800e420 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e41c:	2303      	movs	r3, #3
 800e41e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e420:	7bfb      	ldrb	r3, [r7, #15]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e42a:	b480      	push	{r7}
 800e42c:	b083      	sub	sp, #12
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
 800e432:	460b      	mov	r3, r1
 800e434:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e436:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e438:	4618      	mov	r0, r3
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	460b      	mov	r3, r1
 800e44e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e450:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e452:	4618      	mov	r0, r3
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr

0800e45e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b086      	sub	sp, #24
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	460b      	mov	r3, r1
 800e468:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	885b      	ldrh	r3, [r3, #2]
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	b29b      	uxth	r3, r3
 800e482:	429a      	cmp	r2, r3
 800e484:	d920      	bls.n	800e4c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e48e:	e013      	b.n	800e4b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e490:	f107 030a 	add.w	r3, r7, #10
 800e494:	4619      	mov	r1, r3
 800e496:	6978      	ldr	r0, [r7, #20]
 800e498:	f000 f81b 	bl	800e4d2 <USBD_GetNextDesc>
 800e49c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	785b      	ldrb	r3, [r3, #1]
 800e4a2:	2b05      	cmp	r3, #5
 800e4a4:	d108      	bne.n	800e4b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	789b      	ldrb	r3, [r3, #2]
 800e4ae:	78fa      	ldrb	r2, [r7, #3]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d008      	beq.n	800e4c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	885b      	ldrh	r3, [r3, #2]
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	897b      	ldrh	r3, [r7, #10]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d8e5      	bhi.n	800e490 <USBD_GetEpDesc+0x32>
 800e4c4:	e000      	b.n	800e4c8 <USBD_GetEpDesc+0x6a>
          break;
 800e4c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e4c8:	693b      	ldr	r3, [r7, #16]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e4d2:	b480      	push	{r7}
 800e4d4:	b085      	sub	sp, #20
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	881a      	ldrh	r2, [r3, #0]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	4413      	add	r3, r2
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3714      	adds	r7, #20
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr

0800e50c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b087      	sub	sp, #28
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	3301      	adds	r3, #1
 800e522:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e52a:	8a3b      	ldrh	r3, [r7, #16]
 800e52c:	021b      	lsls	r3, r3, #8
 800e52e:	b21a      	sxth	r2, r3
 800e530:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e534:	4313      	orrs	r3, r2
 800e536:	b21b      	sxth	r3, r3
 800e538:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e53a:	89fb      	ldrh	r3, [r7, #14]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	371c      	adds	r7, #28
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e552:	2300      	movs	r3, #0
 800e554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e55e:	2b40      	cmp	r3, #64	; 0x40
 800e560:	d005      	beq.n	800e56e <USBD_StdDevReq+0x26>
 800e562:	2b40      	cmp	r3, #64	; 0x40
 800e564:	d857      	bhi.n	800e616 <USBD_StdDevReq+0xce>
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00f      	beq.n	800e58a <USBD_StdDevReq+0x42>
 800e56a:	2b20      	cmp	r3, #32
 800e56c:	d153      	bne.n	800e616 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	32ae      	adds	r2, #174	; 0xae
 800e578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	4798      	blx	r3
 800e584:	4603      	mov	r3, r0
 800e586:	73fb      	strb	r3, [r7, #15]
      break;
 800e588:	e04a      	b.n	800e620 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	785b      	ldrb	r3, [r3, #1]
 800e58e:	2b09      	cmp	r3, #9
 800e590:	d83b      	bhi.n	800e60a <USBD_StdDevReq+0xc2>
 800e592:	a201      	add	r2, pc, #4	; (adr r2, 800e598 <USBD_StdDevReq+0x50>)
 800e594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e598:	0800e5ed 	.word	0x0800e5ed
 800e59c:	0800e601 	.word	0x0800e601
 800e5a0:	0800e60b 	.word	0x0800e60b
 800e5a4:	0800e5f7 	.word	0x0800e5f7
 800e5a8:	0800e60b 	.word	0x0800e60b
 800e5ac:	0800e5cb 	.word	0x0800e5cb
 800e5b0:	0800e5c1 	.word	0x0800e5c1
 800e5b4:	0800e60b 	.word	0x0800e60b
 800e5b8:	0800e5e3 	.word	0x0800e5e3
 800e5bc:	0800e5d5 	.word	0x0800e5d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e5c0:	6839      	ldr	r1, [r7, #0]
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fa3c 	bl	800ea40 <USBD_GetDescriptor>
          break;
 800e5c8:	e024      	b.n	800e614 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e5ca:	6839      	ldr	r1, [r7, #0]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 fba1 	bl	800ed14 <USBD_SetAddress>
          break;
 800e5d2:	e01f      	b.n	800e614 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e5d4:	6839      	ldr	r1, [r7, #0]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fbe0 	bl	800ed9c <USBD_SetConfig>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	73fb      	strb	r3, [r7, #15]
          break;
 800e5e0:	e018      	b.n	800e614 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fc83 	bl	800eef0 <USBD_GetConfig>
          break;
 800e5ea:	e013      	b.n	800e614 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 fcb4 	bl	800ef5c <USBD_GetStatus>
          break;
 800e5f4:	e00e      	b.n	800e614 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 fce3 	bl	800efc4 <USBD_SetFeature>
          break;
 800e5fe:	e009      	b.n	800e614 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 fd07 	bl	800f016 <USBD_ClrFeature>
          break;
 800e608:	e004      	b.n	800e614 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e60a:	6839      	ldr	r1, [r7, #0]
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 fd5e 	bl	800f0ce <USBD_CtlError>
          break;
 800e612:	bf00      	nop
      }
      break;
 800e614:	e004      	b.n	800e620 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 fd58 	bl	800f0ce <USBD_CtlError>
      break;
 800e61e:	bf00      	nop
  }

  return ret;
 800e620:	7bfb      	ldrb	r3, [r7, #15]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop

0800e62c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e642:	2b40      	cmp	r3, #64	; 0x40
 800e644:	d005      	beq.n	800e652 <USBD_StdItfReq+0x26>
 800e646:	2b40      	cmp	r3, #64	; 0x40
 800e648:	d852      	bhi.n	800e6f0 <USBD_StdItfReq+0xc4>
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d001      	beq.n	800e652 <USBD_StdItfReq+0x26>
 800e64e:	2b20      	cmp	r3, #32
 800e650:	d14e      	bne.n	800e6f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	3b01      	subs	r3, #1
 800e65c:	2b02      	cmp	r3, #2
 800e65e:	d840      	bhi.n	800e6e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	889b      	ldrh	r3, [r3, #4]
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b01      	cmp	r3, #1
 800e668:	d836      	bhi.n	800e6d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	889b      	ldrh	r3, [r3, #4]
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	4619      	mov	r1, r3
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7ff fed9 	bl	800e42a <USBD_CoreFindIF>
 800e678:	4603      	mov	r3, r0
 800e67a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e67c:	7bbb      	ldrb	r3, [r7, #14]
 800e67e:	2bff      	cmp	r3, #255	; 0xff
 800e680:	d01d      	beq.n	800e6be <USBD_StdItfReq+0x92>
 800e682:	7bbb      	ldrb	r3, [r7, #14]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d11a      	bne.n	800e6be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e688:	7bba      	ldrb	r2, [r7, #14]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	32ae      	adds	r2, #174	; 0xae
 800e68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00f      	beq.n	800e6b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e698:	7bba      	ldrb	r2, [r7, #14]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e6a0:	7bba      	ldrb	r2, [r7, #14]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	32ae      	adds	r2, #174	; 0xae
 800e6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	6839      	ldr	r1, [r7, #0]
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	4798      	blx	r3
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e6b6:	e004      	b.n	800e6c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e6bc:	e001      	b.n	800e6c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	88db      	ldrh	r3, [r3, #6]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d110      	bne.n	800e6ec <USBD_StdItfReq+0xc0>
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d10d      	bne.n	800e6ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 fdc7 	bl	800f264 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e6d6:	e009      	b.n	800e6ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fcf7 	bl	800f0ce <USBD_CtlError>
          break;
 800e6e0:	e004      	b.n	800e6ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 fcf2 	bl	800f0ce <USBD_CtlError>
          break;
 800e6ea:	e000      	b.n	800e6ee <USBD_StdItfReq+0xc2>
          break;
 800e6ec:	bf00      	nop
      }
      break;
 800e6ee:	e004      	b.n	800e6fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e6f0:	6839      	ldr	r1, [r7, #0]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fceb 	bl	800f0ce <USBD_CtlError>
      break;
 800e6f8:	bf00      	nop
  }

  return ret;
 800e6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e70e:	2300      	movs	r3, #0
 800e710:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	889b      	ldrh	r3, [r3, #4]
 800e716:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e720:	2b40      	cmp	r3, #64	; 0x40
 800e722:	d007      	beq.n	800e734 <USBD_StdEPReq+0x30>
 800e724:	2b40      	cmp	r3, #64	; 0x40
 800e726:	f200 817f 	bhi.w	800ea28 <USBD_StdEPReq+0x324>
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d02a      	beq.n	800e784 <USBD_StdEPReq+0x80>
 800e72e:	2b20      	cmp	r3, #32
 800e730:	f040 817a 	bne.w	800ea28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e734:	7bbb      	ldrb	r3, [r7, #14]
 800e736:	4619      	mov	r1, r3
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f7ff fe83 	bl	800e444 <USBD_CoreFindEP>
 800e73e:	4603      	mov	r3, r0
 800e740:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e742:	7b7b      	ldrb	r3, [r7, #13]
 800e744:	2bff      	cmp	r3, #255	; 0xff
 800e746:	f000 8174 	beq.w	800ea32 <USBD_StdEPReq+0x32e>
 800e74a:	7b7b      	ldrb	r3, [r7, #13]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f040 8170 	bne.w	800ea32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e752:	7b7a      	ldrb	r2, [r7, #13]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e75a:	7b7a      	ldrb	r2, [r7, #13]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	32ae      	adds	r2, #174	; 0xae
 800e760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	f000 8163 	beq.w	800ea32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e76c:	7b7a      	ldrb	r2, [r7, #13]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	32ae      	adds	r2, #174	; 0xae
 800e772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	6839      	ldr	r1, [r7, #0]
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	4798      	blx	r3
 800e77e:	4603      	mov	r3, r0
 800e780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e782:	e156      	b.n	800ea32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	785b      	ldrb	r3, [r3, #1]
 800e788:	2b03      	cmp	r3, #3
 800e78a:	d008      	beq.n	800e79e <USBD_StdEPReq+0x9a>
 800e78c:	2b03      	cmp	r3, #3
 800e78e:	f300 8145 	bgt.w	800ea1c <USBD_StdEPReq+0x318>
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 809b 	beq.w	800e8ce <USBD_StdEPReq+0x1ca>
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d03c      	beq.n	800e816 <USBD_StdEPReq+0x112>
 800e79c:	e13e      	b.n	800ea1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	d002      	beq.n	800e7b0 <USBD_StdEPReq+0xac>
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d016      	beq.n	800e7dc <USBD_StdEPReq+0xd8>
 800e7ae:	e02c      	b.n	800e80a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7b0:	7bbb      	ldrb	r3, [r7, #14]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d00d      	beq.n	800e7d2 <USBD_StdEPReq+0xce>
 800e7b6:	7bbb      	ldrb	r3, [r7, #14]
 800e7b8:	2b80      	cmp	r3, #128	; 0x80
 800e7ba:	d00a      	beq.n	800e7d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7bc:	7bbb      	ldrb	r3, [r7, #14]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f001 f97b 	bl	800fabc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7c6:	2180      	movs	r1, #128	; 0x80
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f001 f977 	bl	800fabc <USBD_LL_StallEP>
 800e7ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7d0:	e020      	b.n	800e814 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e7d2:	6839      	ldr	r1, [r7, #0]
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 fc7a 	bl	800f0ce <USBD_CtlError>
              break;
 800e7da:	e01b      	b.n	800e814 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	885b      	ldrh	r3, [r3, #2]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10e      	bne.n	800e802 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e7e4:	7bbb      	ldrb	r3, [r7, #14]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00b      	beq.n	800e802 <USBD_StdEPReq+0xfe>
 800e7ea:	7bbb      	ldrb	r3, [r7, #14]
 800e7ec:	2b80      	cmp	r3, #128	; 0x80
 800e7ee:	d008      	beq.n	800e802 <USBD_StdEPReq+0xfe>
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	88db      	ldrh	r3, [r3, #6]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d104      	bne.n	800e802 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7f8:	7bbb      	ldrb	r3, [r7, #14]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f001 f95d 	bl	800fabc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fd2e 	bl	800f264 <USBD_CtlSendStatus>

              break;
 800e808:	e004      	b.n	800e814 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 fc5e 	bl	800f0ce <USBD_CtlError>
              break;
 800e812:	bf00      	nop
          }
          break;
 800e814:	e107      	b.n	800ea26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d002      	beq.n	800e828 <USBD_StdEPReq+0x124>
 800e822:	2b03      	cmp	r3, #3
 800e824:	d016      	beq.n	800e854 <USBD_StdEPReq+0x150>
 800e826:	e04b      	b.n	800e8c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e828:	7bbb      	ldrb	r3, [r7, #14]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00d      	beq.n	800e84a <USBD_StdEPReq+0x146>
 800e82e:	7bbb      	ldrb	r3, [r7, #14]
 800e830:	2b80      	cmp	r3, #128	; 0x80
 800e832:	d00a      	beq.n	800e84a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e834:	7bbb      	ldrb	r3, [r7, #14]
 800e836:	4619      	mov	r1, r3
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f001 f93f 	bl	800fabc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e83e:	2180      	movs	r1, #128	; 0x80
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f001 f93b 	bl	800fabc <USBD_LL_StallEP>
 800e846:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e848:	e040      	b.n	800e8cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e84a:	6839      	ldr	r1, [r7, #0]
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 fc3e 	bl	800f0ce <USBD_CtlError>
              break;
 800e852:	e03b      	b.n	800e8cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	885b      	ldrh	r3, [r3, #2]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d136      	bne.n	800e8ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e85c:	7bbb      	ldrb	r3, [r7, #14]
 800e85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e862:	2b00      	cmp	r3, #0
 800e864:	d004      	beq.n	800e870 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e866:	7bbb      	ldrb	r3, [r7, #14]
 800e868:	4619      	mov	r1, r3
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f001 f945 	bl	800fafa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 fcf7 	bl	800f264 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e876:	7bbb      	ldrb	r3, [r7, #14]
 800e878:	4619      	mov	r1, r3
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7ff fde2 	bl	800e444 <USBD_CoreFindEP>
 800e880:	4603      	mov	r3, r0
 800e882:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e884:	7b7b      	ldrb	r3, [r7, #13]
 800e886:	2bff      	cmp	r3, #255	; 0xff
 800e888:	d01f      	beq.n	800e8ca <USBD_StdEPReq+0x1c6>
 800e88a:	7b7b      	ldrb	r3, [r7, #13]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d11c      	bne.n	800e8ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e890:	7b7a      	ldrb	r2, [r7, #13]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e898:	7b7a      	ldrb	r2, [r7, #13]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	32ae      	adds	r2, #174	; 0xae
 800e89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d010      	beq.n	800e8ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e8a8:	7b7a      	ldrb	r2, [r7, #13]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	32ae      	adds	r2, #174	; 0xae
 800e8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	6839      	ldr	r1, [r7, #0]
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	4798      	blx	r3
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e8be:	e004      	b.n	800e8ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e8c0:	6839      	ldr	r1, [r7, #0]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fc03 	bl	800f0ce <USBD_CtlError>
              break;
 800e8c8:	e000      	b.n	800e8cc <USBD_StdEPReq+0x1c8>
              break;
 800e8ca:	bf00      	nop
          }
          break;
 800e8cc:	e0ab      	b.n	800ea26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d002      	beq.n	800e8e0 <USBD_StdEPReq+0x1dc>
 800e8da:	2b03      	cmp	r3, #3
 800e8dc:	d032      	beq.n	800e944 <USBD_StdEPReq+0x240>
 800e8de:	e097      	b.n	800ea10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e8e0:	7bbb      	ldrb	r3, [r7, #14]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d007      	beq.n	800e8f6 <USBD_StdEPReq+0x1f2>
 800e8e6:	7bbb      	ldrb	r3, [r7, #14]
 800e8e8:	2b80      	cmp	r3, #128	; 0x80
 800e8ea:	d004      	beq.n	800e8f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e8ec:	6839      	ldr	r1, [r7, #0]
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fbed 	bl	800f0ce <USBD_CtlError>
                break;
 800e8f4:	e091      	b.n	800ea1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	da0b      	bge.n	800e916 <USBD_StdEPReq+0x212>
 800e8fe:	7bbb      	ldrb	r3, [r7, #14]
 800e900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e904:	4613      	mov	r3, r2
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	4413      	add	r3, r2
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	3310      	adds	r3, #16
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	4413      	add	r3, r2
 800e912:	3304      	adds	r3, #4
 800e914:	e00b      	b.n	800e92e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e916:	7bbb      	ldrb	r3, [r7, #14]
 800e918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e91c:	4613      	mov	r3, r2
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4413      	add	r3, r2
 800e92c:	3304      	adds	r3, #4
 800e92e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	2200      	movs	r2, #0
 800e934:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	2202      	movs	r2, #2
 800e93a:	4619      	mov	r1, r3
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 fc37 	bl	800f1b0 <USBD_CtlSendData>
              break;
 800e942:	e06a      	b.n	800ea1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	da11      	bge.n	800e970 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	f003 020f 	and.w	r2, r3, #15
 800e952:	6879      	ldr	r1, [r7, #4]
 800e954:	4613      	mov	r3, r2
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	4413      	add	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	440b      	add	r3, r1
 800e95e:	3324      	adds	r3, #36	; 0x24
 800e960:	881b      	ldrh	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d117      	bne.n	800e996 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fbb0 	bl	800f0ce <USBD_CtlError>
                  break;
 800e96e:	e054      	b.n	800ea1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e970:	7bbb      	ldrb	r3, [r7, #14]
 800e972:	f003 020f 	and.w	r2, r3, #15
 800e976:	6879      	ldr	r1, [r7, #4]
 800e978:	4613      	mov	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	440b      	add	r3, r1
 800e982:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e986:	881b      	ldrh	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d104      	bne.n	800e996 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 fb9d 	bl	800f0ce <USBD_CtlError>
                  break;
 800e994:	e041      	b.n	800ea1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	da0b      	bge.n	800e9b6 <USBD_StdEPReq+0x2b2>
 800e99e:	7bbb      	ldrb	r3, [r7, #14]
 800e9a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	4413      	add	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	3310      	adds	r3, #16
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	e00b      	b.n	800e9ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e9b6:	7bbb      	ldrb	r3, [r7, #14]
 800e9b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e9bc:	4613      	mov	r3, r2
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4413      	add	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e9d0:	7bbb      	ldrb	r3, [r7, #14]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <USBD_StdEPReq+0x2d8>
 800e9d6:	7bbb      	ldrb	r3, [r7, #14]
 800e9d8:	2b80      	cmp	r3, #128	; 0x80
 800e9da:	d103      	bne.n	800e9e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	601a      	str	r2, [r3, #0]
 800e9e2:	e00e      	b.n	800ea02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e9e4:	7bbb      	ldrb	r3, [r7, #14]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f001 f8a5 	bl	800fb38 <USBD_LL_IsStallEP>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d003      	beq.n	800e9fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	601a      	str	r2, [r3, #0]
 800e9fa:	e002      	b.n	800ea02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	2202      	movs	r2, #2
 800ea06:	4619      	mov	r1, r3
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fbd1 	bl	800f1b0 <USBD_CtlSendData>
              break;
 800ea0e:	e004      	b.n	800ea1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ea10:	6839      	ldr	r1, [r7, #0]
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 fb5b 	bl	800f0ce <USBD_CtlError>
              break;
 800ea18:	bf00      	nop
          }
          break;
 800ea1a:	e004      	b.n	800ea26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ea1c:	6839      	ldr	r1, [r7, #0]
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 fb55 	bl	800f0ce <USBD_CtlError>
          break;
 800ea24:	bf00      	nop
      }
      break;
 800ea26:	e005      	b.n	800ea34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 fb4f 	bl	800f0ce <USBD_CtlError>
      break;
 800ea30:	e000      	b.n	800ea34 <USBD_StdEPReq+0x330>
      break;
 800ea32:	bf00      	nop
  }

  return ret;
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
	...

0800ea40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ea52:	2300      	movs	r3, #0
 800ea54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	885b      	ldrh	r3, [r3, #2]
 800ea5a:	0a1b      	lsrs	r3, r3, #8
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	2b06      	cmp	r3, #6
 800ea62:	f200 8128 	bhi.w	800ecb6 <USBD_GetDescriptor+0x276>
 800ea66:	a201      	add	r2, pc, #4	; (adr r2, 800ea6c <USBD_GetDescriptor+0x2c>)
 800ea68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6c:	0800ea89 	.word	0x0800ea89
 800ea70:	0800eaa1 	.word	0x0800eaa1
 800ea74:	0800eae1 	.word	0x0800eae1
 800ea78:	0800ecb7 	.word	0x0800ecb7
 800ea7c:	0800ecb7 	.word	0x0800ecb7
 800ea80:	0800ec57 	.word	0x0800ec57
 800ea84:	0800ec83 	.word	0x0800ec83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	7c12      	ldrb	r2, [r2, #16]
 800ea94:	f107 0108 	add.w	r1, r7, #8
 800ea98:	4610      	mov	r0, r2
 800ea9a:	4798      	blx	r3
 800ea9c:	60f8      	str	r0, [r7, #12]
      break;
 800ea9e:	e112      	b.n	800ecc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	7c1b      	ldrb	r3, [r3, #16]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d10d      	bne.n	800eac4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab0:	f107 0208 	add.w	r2, r7, #8
 800eab4:	4610      	mov	r0, r2
 800eab6:	4798      	blx	r3
 800eab8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	3301      	adds	r3, #1
 800eabe:	2202      	movs	r2, #2
 800eac0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800eac2:	e100      	b.n	800ecc6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eacc:	f107 0208 	add.w	r2, r7, #8
 800ead0:	4610      	mov	r0, r2
 800ead2:	4798      	blx	r3
 800ead4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	3301      	adds	r3, #1
 800eada:	2202      	movs	r2, #2
 800eadc:	701a      	strb	r2, [r3, #0]
      break;
 800eade:	e0f2      	b.n	800ecc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	885b      	ldrh	r3, [r3, #2]
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b05      	cmp	r3, #5
 800eae8:	f200 80ac 	bhi.w	800ec44 <USBD_GetDescriptor+0x204>
 800eaec:	a201      	add	r2, pc, #4	; (adr r2, 800eaf4 <USBD_GetDescriptor+0xb4>)
 800eaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf2:	bf00      	nop
 800eaf4:	0800eb0d 	.word	0x0800eb0d
 800eaf8:	0800eb41 	.word	0x0800eb41
 800eafc:	0800eb75 	.word	0x0800eb75
 800eb00:	0800eba9 	.word	0x0800eba9
 800eb04:	0800ebdd 	.word	0x0800ebdd
 800eb08:	0800ec11 	.word	0x0800ec11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d00b      	beq.n	800eb30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	7c12      	ldrb	r2, [r2, #16]
 800eb24:	f107 0108 	add.w	r1, r7, #8
 800eb28:	4610      	mov	r0, r2
 800eb2a:	4798      	blx	r3
 800eb2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb2e:	e091      	b.n	800ec54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb30:	6839      	ldr	r1, [r7, #0]
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 facb 	bl	800f0ce <USBD_CtlError>
            err++;
 800eb38:	7afb      	ldrb	r3, [r7, #11]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb3e:	e089      	b.n	800ec54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d00b      	beq.n	800eb64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	7c12      	ldrb	r2, [r2, #16]
 800eb58:	f107 0108 	add.w	r1, r7, #8
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	4798      	blx	r3
 800eb60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb62:	e077      	b.n	800ec54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb64:	6839      	ldr	r1, [r7, #0]
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 fab1 	bl	800f0ce <USBD_CtlError>
            err++;
 800eb6c:	7afb      	ldrb	r3, [r7, #11]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	72fb      	strb	r3, [r7, #11]
          break;
 800eb72:	e06f      	b.n	800ec54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00b      	beq.n	800eb98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	687a      	ldr	r2, [r7, #4]
 800eb8a:	7c12      	ldrb	r2, [r2, #16]
 800eb8c:	f107 0108 	add.w	r1, r7, #8
 800eb90:	4610      	mov	r0, r2
 800eb92:	4798      	blx	r3
 800eb94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb96:	e05d      	b.n	800ec54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb98:	6839      	ldr	r1, [r7, #0]
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 fa97 	bl	800f0ce <USBD_CtlError>
            err++;
 800eba0:	7afb      	ldrb	r3, [r7, #11]
 800eba2:	3301      	adds	r3, #1
 800eba4:	72fb      	strb	r3, [r7, #11]
          break;
 800eba6:	e055      	b.n	800ec54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00b      	beq.n	800ebcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	7c12      	ldrb	r2, [r2, #16]
 800ebc0:	f107 0108 	add.w	r1, r7, #8
 800ebc4:	4610      	mov	r0, r2
 800ebc6:	4798      	blx	r3
 800ebc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebca:	e043      	b.n	800ec54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ebcc:	6839      	ldr	r1, [r7, #0]
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 fa7d 	bl	800f0ce <USBD_CtlError>
            err++;
 800ebd4:	7afb      	ldrb	r3, [r7, #11]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	72fb      	strb	r3, [r7, #11]
          break;
 800ebda:	e03b      	b.n	800ec54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebe2:	695b      	ldr	r3, [r3, #20]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00b      	beq.n	800ec00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebee:	695b      	ldr	r3, [r3, #20]
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	7c12      	ldrb	r2, [r2, #16]
 800ebf4:	f107 0108 	add.w	r1, r7, #8
 800ebf8:	4610      	mov	r0, r2
 800ebfa:	4798      	blx	r3
 800ebfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebfe:	e029      	b.n	800ec54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fa63 	bl	800f0ce <USBD_CtlError>
            err++;
 800ec08:	7afb      	ldrb	r3, [r7, #11]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ec0e:	e021      	b.n	800ec54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec16:	699b      	ldr	r3, [r3, #24]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00b      	beq.n	800ec34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec22:	699b      	ldr	r3, [r3, #24]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	7c12      	ldrb	r2, [r2, #16]
 800ec28:	f107 0108 	add.w	r1, r7, #8
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	4798      	blx	r3
 800ec30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec32:	e00f      	b.n	800ec54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ec34:	6839      	ldr	r1, [r7, #0]
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fa49 	bl	800f0ce <USBD_CtlError>
            err++;
 800ec3c:	7afb      	ldrb	r3, [r7, #11]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	72fb      	strb	r3, [r7, #11]
          break;
 800ec42:	e007      	b.n	800ec54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ec44:	6839      	ldr	r1, [r7, #0]
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 fa41 	bl	800f0ce <USBD_CtlError>
          err++;
 800ec4c:	7afb      	ldrb	r3, [r7, #11]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ec52:	bf00      	nop
      }
      break;
 800ec54:	e037      	b.n	800ecc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	7c1b      	ldrb	r3, [r3, #16]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d109      	bne.n	800ec72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec66:	f107 0208 	add.w	r2, r7, #8
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	4798      	blx	r3
 800ec6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec70:	e029      	b.n	800ecc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fa2a 	bl	800f0ce <USBD_CtlError>
        err++;
 800ec7a:	7afb      	ldrb	r3, [r7, #11]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ec80:	e021      	b.n	800ecc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	7c1b      	ldrb	r3, [r3, #16]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d10d      	bne.n	800eca6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec92:	f107 0208 	add.w	r2, r7, #8
 800ec96:	4610      	mov	r0, r2
 800ec98:	4798      	blx	r3
 800ec9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	2207      	movs	r2, #7
 800eca2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eca4:	e00f      	b.n	800ecc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 fa10 	bl	800f0ce <USBD_CtlError>
        err++;
 800ecae:	7afb      	ldrb	r3, [r7, #11]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	72fb      	strb	r3, [r7, #11]
      break;
 800ecb4:	e007      	b.n	800ecc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 fa08 	bl	800f0ce <USBD_CtlError>
      err++;
 800ecbe:	7afb      	ldrb	r3, [r7, #11]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	72fb      	strb	r3, [r7, #11]
      break;
 800ecc4:	bf00      	nop
  }

  if (err != 0U)
 800ecc6:	7afb      	ldrb	r3, [r7, #11]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d11e      	bne.n	800ed0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	88db      	ldrh	r3, [r3, #6]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d016      	beq.n	800ed02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ecd4:	893b      	ldrh	r3, [r7, #8]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00e      	beq.n	800ecf8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	88da      	ldrh	r2, [r3, #6]
 800ecde:	893b      	ldrh	r3, [r7, #8]
 800ece0:	4293      	cmp	r3, r2
 800ece2:	bf28      	it	cs
 800ece4:	4613      	movcs	r3, r2
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ecea:	893b      	ldrh	r3, [r7, #8]
 800ecec:	461a      	mov	r2, r3
 800ecee:	68f9      	ldr	r1, [r7, #12]
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 fa5d 	bl	800f1b0 <USBD_CtlSendData>
 800ecf6:	e009      	b.n	800ed0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ecf8:	6839      	ldr	r1, [r7, #0]
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 f9e7 	bl	800f0ce <USBD_CtlError>
 800ed00:	e004      	b.n	800ed0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 faae 	bl	800f264 <USBD_CtlSendStatus>
 800ed08:	e000      	b.n	800ed0c <USBD_GetDescriptor+0x2cc>
    return;
 800ed0a:	bf00      	nop
  }
}
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop

0800ed14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	889b      	ldrh	r3, [r3, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d131      	bne.n	800ed8a <USBD_SetAddress+0x76>
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	88db      	ldrh	r3, [r3, #6]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d12d      	bne.n	800ed8a <USBD_SetAddress+0x76>
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	885b      	ldrh	r3, [r3, #2]
 800ed32:	2b7f      	cmp	r3, #127	; 0x7f
 800ed34:	d829      	bhi.n	800ed8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	885b      	ldrh	r3, [r3, #2]
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	d104      	bne.n	800ed58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 f9bc 	bl	800f0ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed56:	e01d      	b.n	800ed94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	7bfa      	ldrb	r2, [r7, #15]
 800ed5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed60:	7bfb      	ldrb	r3, [r7, #15]
 800ed62:	4619      	mov	r1, r3
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 ff13 	bl	800fb90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 fa7a 	bl	800f264 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d004      	beq.n	800ed80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2202      	movs	r2, #2
 800ed7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed7e:	e009      	b.n	800ed94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed88:	e004      	b.n	800ed94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed8a:	6839      	ldr	r1, [r7, #0]
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 f99e 	bl	800f0ce <USBD_CtlError>
  }
}
 800ed92:	bf00      	nop
 800ed94:	bf00      	nop
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eda6:	2300      	movs	r3, #0
 800eda8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	885b      	ldrh	r3, [r3, #2]
 800edae:	b2da      	uxtb	r2, r3
 800edb0:	4b4e      	ldr	r3, [pc, #312]	; (800eeec <USBD_SetConfig+0x150>)
 800edb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800edb4:	4b4d      	ldr	r3, [pc, #308]	; (800eeec <USBD_SetConfig+0x150>)
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d905      	bls.n	800edc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f985 	bl	800f0ce <USBD_CtlError>
    return USBD_FAIL;
 800edc4:	2303      	movs	r3, #3
 800edc6:	e08c      	b.n	800eee2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	d002      	beq.n	800edda <USBD_SetConfig+0x3e>
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d029      	beq.n	800ee2c <USBD_SetConfig+0x90>
 800edd8:	e075      	b.n	800eec6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800edda:	4b44      	ldr	r3, [pc, #272]	; (800eeec <USBD_SetConfig+0x150>)
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d020      	beq.n	800ee24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ede2:	4b42      	ldr	r3, [pc, #264]	; (800eeec <USBD_SetConfig+0x150>)
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edec:	4b3f      	ldr	r3, [pc, #252]	; (800eeec <USBD_SetConfig+0x150>)
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	4619      	mov	r1, r3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7fe ffe7 	bl	800ddc6 <USBD_SetClassConfig>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d008      	beq.n	800ee14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 f962 	bl	800f0ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee12:	e065      	b.n	800eee0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 fa25 	bl	800f264 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2203      	movs	r2, #3
 800ee1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ee22:	e05d      	b.n	800eee0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 fa1d 	bl	800f264 <USBD_CtlSendStatus>
      break;
 800ee2a:	e059      	b.n	800eee0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ee2c:	4b2f      	ldr	r3, [pc, #188]	; (800eeec <USBD_SetConfig+0x150>)
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d112      	bne.n	800ee5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2202      	movs	r2, #2
 800ee38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ee3c:	4b2b      	ldr	r3, [pc, #172]	; (800eeec <USBD_SetConfig+0x150>)
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	461a      	mov	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee46:	4b29      	ldr	r3, [pc, #164]	; (800eeec <USBD_SetConfig+0x150>)
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7fe ffd6 	bl	800ddfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fa06 	bl	800f264 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee58:	e042      	b.n	800eee0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ee5a:	4b24      	ldr	r3, [pc, #144]	; (800eeec <USBD_SetConfig+0x150>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	461a      	mov	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d02a      	beq.n	800eebe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	4619      	mov	r1, r3
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7fe ffc4 	bl	800ddfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee76:	4b1d      	ldr	r3, [pc, #116]	; (800eeec <USBD_SetConfig+0x150>)
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee80:	4b1a      	ldr	r3, [pc, #104]	; (800eeec <USBD_SetConfig+0x150>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	4619      	mov	r1, r3
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7fe ff9d 	bl	800ddc6 <USBD_SetClassConfig>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00f      	beq.n	800eeb6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ee96:	6839      	ldr	r1, [r7, #0]
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 f918 	bl	800f0ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	4619      	mov	r1, r3
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7fe ffa9 	bl	800ddfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2202      	movs	r2, #2
 800eeb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eeb4:	e014      	b.n	800eee0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f9d4 	bl	800f264 <USBD_CtlSendStatus>
      break;
 800eebc:	e010      	b.n	800eee0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f9d0 	bl	800f264 <USBD_CtlSendStatus>
      break;
 800eec4:	e00c      	b.n	800eee0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eec6:	6839      	ldr	r1, [r7, #0]
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 f900 	bl	800f0ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eece:	4b07      	ldr	r3, [pc, #28]	; (800eeec <USBD_SetConfig+0x150>)
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	4619      	mov	r1, r3
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f7fe ff92 	bl	800ddfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eeda:	2303      	movs	r3, #3
 800eedc:	73fb      	strb	r3, [r7, #15]
      break;
 800eede:	bf00      	nop
  }

  return ret;
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	20000820 	.word	0x20000820

0800eef0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	88db      	ldrh	r3, [r3, #6]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d004      	beq.n	800ef0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ef02:	6839      	ldr	r1, [r7, #0]
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f8e2 	bl	800f0ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ef0a:	e023      	b.n	800ef54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	dc02      	bgt.n	800ef1e <USBD_GetConfig+0x2e>
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	dc03      	bgt.n	800ef24 <USBD_GetConfig+0x34>
 800ef1c:	e015      	b.n	800ef4a <USBD_GetConfig+0x5a>
 800ef1e:	2b03      	cmp	r3, #3
 800ef20:	d00b      	beq.n	800ef3a <USBD_GetConfig+0x4a>
 800ef22:	e012      	b.n	800ef4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	3308      	adds	r3, #8
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4619      	mov	r1, r3
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 f93c 	bl	800f1b0 <USBD_CtlSendData>
        break;
 800ef38:	e00c      	b.n	800ef54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	2201      	movs	r2, #1
 800ef40:	4619      	mov	r1, r3
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f934 	bl	800f1b0 <USBD_CtlSendData>
        break;
 800ef48:	e004      	b.n	800ef54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ef4a:	6839      	ldr	r1, [r7, #0]
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 f8be 	bl	800f0ce <USBD_CtlError>
        break;
 800ef52:	bf00      	nop
}
 800ef54:	bf00      	nop
 800ef56:	3708      	adds	r7, #8
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	2b02      	cmp	r3, #2
 800ef72:	d81e      	bhi.n	800efb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	88db      	ldrh	r3, [r3, #6]
 800ef78:	2b02      	cmp	r3, #2
 800ef7a:	d004      	beq.n	800ef86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef7c:	6839      	ldr	r1, [r7, #0]
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 f8a5 	bl	800f0ce <USBD_CtlError>
        break;
 800ef84:	e01a      	b.n	800efbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2201      	movs	r2, #1
 800ef8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d005      	beq.n	800efa2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	f043 0202 	orr.w	r2, r3, #2
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	330c      	adds	r3, #12
 800efa6:	2202      	movs	r2, #2
 800efa8:	4619      	mov	r1, r3
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 f900 	bl	800f1b0 <USBD_CtlSendData>
      break;
 800efb0:	e004      	b.n	800efbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800efb2:	6839      	ldr	r1, [r7, #0]
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 f88a 	bl	800f0ce <USBD_CtlError>
      break;
 800efba:	bf00      	nop
  }
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	885b      	ldrh	r3, [r3, #2]
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d107      	bne.n	800efe6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2201      	movs	r2, #1
 800efda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 f940 	bl	800f264 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800efe4:	e013      	b.n	800f00e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	885b      	ldrh	r3, [r3, #2]
 800efea:	2b02      	cmp	r3, #2
 800efec:	d10b      	bne.n	800f006 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	889b      	ldrh	r3, [r3, #4]
 800eff2:	0a1b      	lsrs	r3, r3, #8
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 f930 	bl	800f264 <USBD_CtlSendStatus>
}
 800f004:	e003      	b.n	800f00e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f006:	6839      	ldr	r1, [r7, #0]
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 f860 	bl	800f0ce <USBD_CtlError>
}
 800f00e:	bf00      	nop
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b082      	sub	sp, #8
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
 800f01e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f026:	b2db      	uxtb	r3, r3
 800f028:	3b01      	subs	r3, #1
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d80b      	bhi.n	800f046 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	885b      	ldrh	r3, [r3, #2]
 800f032:	2b01      	cmp	r3, #1
 800f034:	d10c      	bne.n	800f050 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 f910 	bl	800f264 <USBD_CtlSendStatus>
      }
      break;
 800f044:	e004      	b.n	800f050 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f046:	6839      	ldr	r1, [r7, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f840 	bl	800f0ce <USBD_CtlError>
      break;
 800f04e:	e000      	b.n	800f052 <USBD_ClrFeature+0x3c>
      break;
 800f050:	bf00      	nop
  }
}
 800f052:	bf00      	nop
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b084      	sub	sp, #16
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	781a      	ldrb	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3301      	adds	r3, #1
 800f074:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	781a      	ldrb	r2, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	3301      	adds	r3, #1
 800f082:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f084:	68f8      	ldr	r0, [r7, #12]
 800f086:	f7ff fa41 	bl	800e50c <SWAPBYTE>
 800f08a:	4603      	mov	r3, r0
 800f08c:	461a      	mov	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3301      	adds	r3, #1
 800f096:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	3301      	adds	r3, #1
 800f09c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f7ff fa34 	bl	800e50c <SWAPBYTE>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f7ff fa27 	bl	800e50c <SWAPBYTE>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	80da      	strh	r2, [r3, #6]
}
 800f0c6:	bf00      	nop
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b082      	sub	sp, #8
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0d8:	2180      	movs	r1, #128	; 0x80
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fcee 	bl	800fabc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 fcea 	bl	800fabc <USBD_LL_StallEP>
}
 800f0e8:	bf00      	nop
 800f0ea:	3708      	adds	r7, #8
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b086      	sub	sp, #24
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d036      	beq.n	800f174 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f10a:	6938      	ldr	r0, [r7, #16]
 800f10c:	f000 f836 	bl	800f17c <USBD_GetLen>
 800f110:	4603      	mov	r3, r0
 800f112:	3301      	adds	r3, #1
 800f114:	b29b      	uxth	r3, r3
 800f116:	005b      	lsls	r3, r3, #1
 800f118:	b29a      	uxth	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f11e:	7dfb      	ldrb	r3, [r7, #23]
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	4413      	add	r3, r2
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	7812      	ldrb	r2, [r2, #0]
 800f128:	701a      	strb	r2, [r3, #0]
  idx++;
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
 800f12c:	3301      	adds	r3, #1
 800f12e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f130:	7dfb      	ldrb	r3, [r7, #23]
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	4413      	add	r3, r2
 800f136:	2203      	movs	r2, #3
 800f138:	701a      	strb	r2, [r3, #0]
  idx++;
 800f13a:	7dfb      	ldrb	r3, [r7, #23]
 800f13c:	3301      	adds	r3, #1
 800f13e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f140:	e013      	b.n	800f16a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f142:	7dfb      	ldrb	r3, [r7, #23]
 800f144:	68ba      	ldr	r2, [r7, #8]
 800f146:	4413      	add	r3, r2
 800f148:	693a      	ldr	r2, [r7, #16]
 800f14a:	7812      	ldrb	r2, [r2, #0]
 800f14c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	3301      	adds	r3, #1
 800f152:	613b      	str	r3, [r7, #16]
    idx++;
 800f154:	7dfb      	ldrb	r3, [r7, #23]
 800f156:	3301      	adds	r3, #1
 800f158:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f15a:	7dfb      	ldrb	r3, [r7, #23]
 800f15c:	68ba      	ldr	r2, [r7, #8]
 800f15e:	4413      	add	r3, r2
 800f160:	2200      	movs	r2, #0
 800f162:	701a      	strb	r2, [r3, #0]
    idx++;
 800f164:	7dfb      	ldrb	r3, [r7, #23]
 800f166:	3301      	adds	r3, #1
 800f168:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1e7      	bne.n	800f142 <USBD_GetString+0x52>
 800f172:	e000      	b.n	800f176 <USBD_GetString+0x86>
    return;
 800f174:	bf00      	nop
  }
}
 800f176:	3718      	adds	r7, #24
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f184:	2300      	movs	r3, #0
 800f186:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f18c:	e005      	b.n	800f19a <USBD_GetLen+0x1e>
  {
    len++;
 800f18e:	7bfb      	ldrb	r3, [r7, #15]
 800f190:	3301      	adds	r3, #1
 800f192:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	3301      	adds	r3, #1
 800f198:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1f5      	bne.n	800f18e <USBD_GetLen+0x12>
  }

  return len;
 800f1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3714      	adds	r7, #20
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2202      	movs	r2, #2
 800f1c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	68ba      	ldr	r2, [r7, #8]
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	68f8      	ldr	r0, [r7, #12]
 800f1d8:	f000 fcf9 	bl	800fbce <USBD_LL_Transmit>

  return USBD_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}

0800f1e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f1e6:	b580      	push	{r7, lr}
 800f1e8:	b084      	sub	sp, #16
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	60f8      	str	r0, [r7, #12]
 800f1ee:	60b9      	str	r1, [r7, #8]
 800f1f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	68ba      	ldr	r2, [r7, #8]
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f000 fce8 	bl	800fbce <USBD_LL_Transmit>

  return USBD_OK;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2203      	movs	r2, #3
 800f218:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	2100      	movs	r1, #0
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f000 fcec 	bl	800fc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}

0800f242 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b084      	sub	sp, #16
 800f246:	af00      	add	r7, sp, #0
 800f248:	60f8      	str	r0, [r7, #12]
 800f24a:	60b9      	str	r1, [r7, #8]
 800f24c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	2100      	movs	r1, #0
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f000 fcdb 	bl	800fc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f25a:	2300      	movs	r3, #0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2204      	movs	r2, #4
 800f270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f274:	2300      	movs	r3, #0
 800f276:	2200      	movs	r2, #0
 800f278:	2100      	movs	r1, #0
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fca7 	bl	800fbce <USBD_LL_Transmit>

  return USBD_OK;
 800f280:	2300      	movs	r3, #0
}
 800f282:	4618      	mov	r0, r3
 800f284:	3708      	adds	r7, #8
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b082      	sub	sp, #8
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2205      	movs	r2, #5
 800f296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f29a:	2300      	movs	r3, #0
 800f29c:	2200      	movs	r2, #0
 800f29e:	2100      	movs	r1, #0
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 fcb5 	bl	800fc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	4912      	ldr	r1, [pc, #72]	; (800f300 <MX_USB_DEVICE_Init+0x50>)
 800f2b8:	4812      	ldr	r0, [pc, #72]	; (800f304 <MX_USB_DEVICE_Init+0x54>)
 800f2ba:	f7fe fd07 	bl	800dccc <USBD_Init>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f2c4:	f7f1 fdd4 	bl	8000e70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f2c8:	490f      	ldr	r1, [pc, #60]	; (800f308 <MX_USB_DEVICE_Init+0x58>)
 800f2ca:	480e      	ldr	r0, [pc, #56]	; (800f304 <MX_USB_DEVICE_Init+0x54>)
 800f2cc:	f7fe fd2e 	bl	800dd2c <USBD_RegisterClass>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d001      	beq.n	800f2da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f2d6:	f7f1 fdcb 	bl	8000e70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f2da:	490c      	ldr	r1, [pc, #48]	; (800f30c <MX_USB_DEVICE_Init+0x5c>)
 800f2dc:	4809      	ldr	r0, [pc, #36]	; (800f304 <MX_USB_DEVICE_Init+0x54>)
 800f2de:	f7fe fc1f 	bl	800db20 <USBD_CDC_RegisterInterface>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d001      	beq.n	800f2ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f2e8:	f7f1 fdc2 	bl	8000e70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f2ec:	4805      	ldr	r0, [pc, #20]	; (800f304 <MX_USB_DEVICE_Init+0x54>)
 800f2ee:	f7fe fd53 	bl	800dd98 <USBD_Start>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d001      	beq.n	800f2fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f2f8:	f7f1 fdba 	bl	8000e70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f2fc:	bf00      	nop
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	20000370 	.word	0x20000370
 800f304:	20000824 	.word	0x20000824
 800f308:	200002dc 	.word	0x200002dc
 800f30c:	2000035c 	.word	0x2000035c

0800f310 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f314:	2200      	movs	r2, #0
 800f316:	4905      	ldr	r1, [pc, #20]	; (800f32c <CDC_Init_FS+0x1c>)
 800f318:	4805      	ldr	r0, [pc, #20]	; (800f330 <CDC_Init_FS+0x20>)
 800f31a:	f7fe fc1b 	bl	800db54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f31e:	4905      	ldr	r1, [pc, #20]	; (800f334 <CDC_Init_FS+0x24>)
 800f320:	4803      	ldr	r0, [pc, #12]	; (800f330 <CDC_Init_FS+0x20>)
 800f322:	f7fe fc39 	bl	800db98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f326:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f328:	4618      	mov	r0, r3
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	20001300 	.word	0x20001300
 800f330:	20000824 	.word	0x20000824
 800f334:	20000b00 	.word	0x20000b00

0800f338 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f338:	b480      	push	{r7}
 800f33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f33c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f33e:	4618      	mov	r0, r3
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	4603      	mov	r3, r0
 800f350:	6039      	str	r1, [r7, #0]
 800f352:	71fb      	strb	r3, [r7, #7]
 800f354:	4613      	mov	r3, r2
 800f356:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f358:	79fb      	ldrb	r3, [r7, #7]
 800f35a:	2b23      	cmp	r3, #35	; 0x23
 800f35c:	d84a      	bhi.n	800f3f4 <CDC_Control_FS+0xac>
 800f35e:	a201      	add	r2, pc, #4	; (adr r2, 800f364 <CDC_Control_FS+0x1c>)
 800f360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f364:	0800f3f5 	.word	0x0800f3f5
 800f368:	0800f3f5 	.word	0x0800f3f5
 800f36c:	0800f3f5 	.word	0x0800f3f5
 800f370:	0800f3f5 	.word	0x0800f3f5
 800f374:	0800f3f5 	.word	0x0800f3f5
 800f378:	0800f3f5 	.word	0x0800f3f5
 800f37c:	0800f3f5 	.word	0x0800f3f5
 800f380:	0800f3f5 	.word	0x0800f3f5
 800f384:	0800f3f5 	.word	0x0800f3f5
 800f388:	0800f3f5 	.word	0x0800f3f5
 800f38c:	0800f3f5 	.word	0x0800f3f5
 800f390:	0800f3f5 	.word	0x0800f3f5
 800f394:	0800f3f5 	.word	0x0800f3f5
 800f398:	0800f3f5 	.word	0x0800f3f5
 800f39c:	0800f3f5 	.word	0x0800f3f5
 800f3a0:	0800f3f5 	.word	0x0800f3f5
 800f3a4:	0800f3f5 	.word	0x0800f3f5
 800f3a8:	0800f3f5 	.word	0x0800f3f5
 800f3ac:	0800f3f5 	.word	0x0800f3f5
 800f3b0:	0800f3f5 	.word	0x0800f3f5
 800f3b4:	0800f3f5 	.word	0x0800f3f5
 800f3b8:	0800f3f5 	.word	0x0800f3f5
 800f3bc:	0800f3f5 	.word	0x0800f3f5
 800f3c0:	0800f3f5 	.word	0x0800f3f5
 800f3c4:	0800f3f5 	.word	0x0800f3f5
 800f3c8:	0800f3f5 	.word	0x0800f3f5
 800f3cc:	0800f3f5 	.word	0x0800f3f5
 800f3d0:	0800f3f5 	.word	0x0800f3f5
 800f3d4:	0800f3f5 	.word	0x0800f3f5
 800f3d8:	0800f3f5 	.word	0x0800f3f5
 800f3dc:	0800f3f5 	.word	0x0800f3f5
 800f3e0:	0800f3f5 	.word	0x0800f3f5
 800f3e4:	0800f3f5 	.word	0x0800f3f5
 800f3e8:	0800f3f5 	.word	0x0800f3f5
 800f3ec:	0800f3f5 	.word	0x0800f3f5
 800f3f0:	0800f3f5 	.word	0x0800f3f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f3f4:	bf00      	nop
  }

  return (USBD_OK);
 800f3f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f40e:	6879      	ldr	r1, [r7, #4]
 800f410:	4805      	ldr	r0, [pc, #20]	; (800f428 <CDC_Receive_FS+0x24>)
 800f412:	f7fe fbc1 	bl	800db98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f416:	4804      	ldr	r0, [pc, #16]	; (800f428 <CDC_Receive_FS+0x24>)
 800f418:	f7fe fc22 	bl	800dc60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f41c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	20000824 	.word	0x20000824

0800f42c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	460b      	mov	r3, r1
 800f436:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f438:	2300      	movs	r3, #0
 800f43a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f43c:	4b0d      	ldr	r3, [pc, #52]	; (800f474 <CDC_Transmit_FS+0x48>)
 800f43e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f442:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f44e:	2301      	movs	r3, #1
 800f450:	e00b      	b.n	800f46a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f452:	887b      	ldrh	r3, [r7, #2]
 800f454:	461a      	mov	r2, r3
 800f456:	6879      	ldr	r1, [r7, #4]
 800f458:	4806      	ldr	r0, [pc, #24]	; (800f474 <CDC_Transmit_FS+0x48>)
 800f45a:	f7fe fb7b 	bl	800db54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f45e:	4805      	ldr	r0, [pc, #20]	; (800f474 <CDC_Transmit_FS+0x48>)
 800f460:	f7fe fbb8 	bl	800dbd4 <USBD_CDC_TransmitPacket>
 800f464:	4603      	mov	r3, r0
 800f466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f468:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	20000824 	.word	0x20000824

0800f478 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f478:	b480      	push	{r7}
 800f47a:	b087      	sub	sp, #28
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	4613      	mov	r3, r2
 800f484:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f486:	2300      	movs	r3, #0
 800f488:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f48a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	371c      	adds	r7, #28
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr
	...

0800f49c <CDC_getReady>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_getReady(void)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 800f4a2:	4b09      	ldr	r3, [pc, #36]	; (800f4c8 <CDC_getReady+0x2c>)
 800f4a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4a8:	607b      	str	r3, [r7, #4]
	if(hcdc -> TxState != 0)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <CDC_getReady+0x1c>
	{
		return USBD_BUSY;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	e000      	b.n	800f4ba <CDC_getReady+0x1e>
	}
	else
	{
		return USBD_OK;
 800f4b8:	2300      	movs	r3, #0
	}
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	370c      	adds	r7, #12
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	20000824 	.word	0x20000824

0800f4cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	6039      	str	r1, [r7, #0]
 800f4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	2212      	movs	r2, #18
 800f4dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f4de:	4b03      	ldr	r3, [pc, #12]	; (800f4ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	2000038c 	.word	0x2000038c

0800f4f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	6039      	str	r1, [r7, #0]
 800f4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	2204      	movs	r2, #4
 800f500:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f502:	4b03      	ldr	r3, [pc, #12]	; (800f510 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f504:	4618      	mov	r0, r3
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	200003a0 	.word	0x200003a0

0800f514 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	4603      	mov	r3, r0
 800f51c:	6039      	str	r1, [r7, #0]
 800f51e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f520:	79fb      	ldrb	r3, [r7, #7]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d105      	bne.n	800f532 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f526:	683a      	ldr	r2, [r7, #0]
 800f528:	4907      	ldr	r1, [pc, #28]	; (800f548 <USBD_FS_ProductStrDescriptor+0x34>)
 800f52a:	4808      	ldr	r0, [pc, #32]	; (800f54c <USBD_FS_ProductStrDescriptor+0x38>)
 800f52c:	f7ff fde0 	bl	800f0f0 <USBD_GetString>
 800f530:	e004      	b.n	800f53c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	4904      	ldr	r1, [pc, #16]	; (800f548 <USBD_FS_ProductStrDescriptor+0x34>)
 800f536:	4805      	ldr	r0, [pc, #20]	; (800f54c <USBD_FS_ProductStrDescriptor+0x38>)
 800f538:	f7ff fdda 	bl	800f0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f53c:	4b02      	ldr	r3, [pc, #8]	; (800f548 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3708      	adds	r7, #8
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20001b00 	.word	0x20001b00
 800f54c:	08010714 	.word	0x08010714

0800f550 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	6039      	str	r1, [r7, #0]
 800f55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f55c:	683a      	ldr	r2, [r7, #0]
 800f55e:	4904      	ldr	r1, [pc, #16]	; (800f570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f560:	4804      	ldr	r0, [pc, #16]	; (800f574 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f562:	f7ff fdc5 	bl	800f0f0 <USBD_GetString>
  return USBD_StrDesc;
 800f566:	4b02      	ldr	r3, [pc, #8]	; (800f570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	20001b00 	.word	0x20001b00
 800f574:	08010734 	.word	0x08010734

0800f578 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	6039      	str	r1, [r7, #0]
 800f582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	221a      	movs	r2, #26
 800f588:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f58a:	f000 f843 	bl	800f614 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f58e:	4b02      	ldr	r3, [pc, #8]	; (800f598 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	200003a4 	.word	0x200003a4

0800f59c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	6039      	str	r1, [r7, #0]
 800f5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f5a8:	79fb      	ldrb	r3, [r7, #7]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d105      	bne.n	800f5ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5ae:	683a      	ldr	r2, [r7, #0]
 800f5b0:	4907      	ldr	r1, [pc, #28]	; (800f5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f5b2:	4808      	ldr	r0, [pc, #32]	; (800f5d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f5b4:	f7ff fd9c 	bl	800f0f0 <USBD_GetString>
 800f5b8:	e004      	b.n	800f5c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5ba:	683a      	ldr	r2, [r7, #0]
 800f5bc:	4904      	ldr	r1, [pc, #16]	; (800f5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f5be:	4805      	ldr	r0, [pc, #20]	; (800f5d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f5c0:	f7ff fd96 	bl	800f0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5c4:	4b02      	ldr	r3, [pc, #8]	; (800f5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20001b00 	.word	0x20001b00
 800f5d4:	08010748 	.word	0x08010748

0800f5d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	6039      	str	r1, [r7, #0]
 800f5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f5e4:	79fb      	ldrb	r3, [r7, #7]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d105      	bne.n	800f5f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	4907      	ldr	r1, [pc, #28]	; (800f60c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5ee:	4808      	ldr	r0, [pc, #32]	; (800f610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5f0:	f7ff fd7e 	bl	800f0f0 <USBD_GetString>
 800f5f4:	e004      	b.n	800f600 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5f6:	683a      	ldr	r2, [r7, #0]
 800f5f8:	4904      	ldr	r1, [pc, #16]	; (800f60c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5fa:	4805      	ldr	r0, [pc, #20]	; (800f610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5fc:	f7ff fd78 	bl	800f0f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f600:	4b02      	ldr	r3, [pc, #8]	; (800f60c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f602:	4618      	mov	r0, r3
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	20001b00 	.word	0x20001b00
 800f610:	08010754 	.word	0x08010754

0800f614 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f61a:	4b0f      	ldr	r3, [pc, #60]	; (800f658 <Get_SerialNum+0x44>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f620:	4b0e      	ldr	r3, [pc, #56]	; (800f65c <Get_SerialNum+0x48>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f626:	4b0e      	ldr	r3, [pc, #56]	; (800f660 <Get_SerialNum+0x4c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4413      	add	r3, r2
 800f632:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d009      	beq.n	800f64e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f63a:	2208      	movs	r2, #8
 800f63c:	4909      	ldr	r1, [pc, #36]	; (800f664 <Get_SerialNum+0x50>)
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f000 f814 	bl	800f66c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f644:	2204      	movs	r2, #4
 800f646:	4908      	ldr	r1, [pc, #32]	; (800f668 <Get_SerialNum+0x54>)
 800f648:	68b8      	ldr	r0, [r7, #8]
 800f64a:	f000 f80f 	bl	800f66c <IntToUnicode>
  }
}
 800f64e:	bf00      	nop
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	1fff7a10 	.word	0x1fff7a10
 800f65c:	1fff7a14 	.word	0x1fff7a14
 800f660:	1fff7a18 	.word	0x1fff7a18
 800f664:	200003a6 	.word	0x200003a6
 800f668:	200003b6 	.word	0x200003b6

0800f66c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	4613      	mov	r3, r2
 800f678:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f67e:	2300      	movs	r3, #0
 800f680:	75fb      	strb	r3, [r7, #23]
 800f682:	e027      	b.n	800f6d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	0f1b      	lsrs	r3, r3, #28
 800f688:	2b09      	cmp	r3, #9
 800f68a:	d80b      	bhi.n	800f6a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	0f1b      	lsrs	r3, r3, #28
 800f690:	b2da      	uxtb	r2, r3
 800f692:	7dfb      	ldrb	r3, [r7, #23]
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	4619      	mov	r1, r3
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	440b      	add	r3, r1
 800f69c:	3230      	adds	r2, #48	; 0x30
 800f69e:	b2d2      	uxtb	r2, r2
 800f6a0:	701a      	strb	r2, [r3, #0]
 800f6a2:	e00a      	b.n	800f6ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	0f1b      	lsrs	r3, r3, #28
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	7dfb      	ldrb	r3, [r7, #23]
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	440b      	add	r3, r1
 800f6b4:	3237      	adds	r2, #55	; 0x37
 800f6b6:	b2d2      	uxtb	r2, r2
 800f6b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	011b      	lsls	r3, r3, #4
 800f6be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f6c0:	7dfb      	ldrb	r3, [r7, #23]
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f6ce:	7dfb      	ldrb	r3, [r7, #23]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	75fb      	strb	r3, [r7, #23]
 800f6d4:	7dfa      	ldrb	r2, [r7, #23]
 800f6d6:	79fb      	ldrb	r3, [r7, #7]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d3d3      	bcc.n	800f684 <IntToUnicode+0x18>
  }
}
 800f6dc:	bf00      	nop
 800f6de:	bf00      	nop
 800f6e0:	371c      	adds	r7, #28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
	...

0800f6ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b08a      	sub	sp, #40	; 0x28
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6f4:	f107 0314 	add.w	r3, r7, #20
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	601a      	str	r2, [r3, #0]
 800f6fc:	605a      	str	r2, [r3, #4]
 800f6fe:	609a      	str	r2, [r3, #8]
 800f700:	60da      	str	r2, [r3, #12]
 800f702:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f70c:	d13a      	bne.n	800f784 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f70e:	2300      	movs	r3, #0
 800f710:	613b      	str	r3, [r7, #16]
 800f712:	4b1e      	ldr	r3, [pc, #120]	; (800f78c <HAL_PCD_MspInit+0xa0>)
 800f714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f716:	4a1d      	ldr	r2, [pc, #116]	; (800f78c <HAL_PCD_MspInit+0xa0>)
 800f718:	f043 0301 	orr.w	r3, r3, #1
 800f71c:	6313      	str	r3, [r2, #48]	; 0x30
 800f71e:	4b1b      	ldr	r3, [pc, #108]	; (800f78c <HAL_PCD_MspInit+0xa0>)
 800f720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	613b      	str	r3, [r7, #16]
 800f728:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f72a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f72e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f730:	2302      	movs	r3, #2
 800f732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f734:	2300      	movs	r3, #0
 800f736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f738:	2303      	movs	r3, #3
 800f73a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f73c:	230a      	movs	r3, #10
 800f73e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f740:	f107 0314 	add.w	r3, r7, #20
 800f744:	4619      	mov	r1, r3
 800f746:	4812      	ldr	r0, [pc, #72]	; (800f790 <HAL_PCD_MspInit+0xa4>)
 800f748:	f7f2 f83e 	bl	80017c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f74c:	4b0f      	ldr	r3, [pc, #60]	; (800f78c <HAL_PCD_MspInit+0xa0>)
 800f74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f750:	4a0e      	ldr	r2, [pc, #56]	; (800f78c <HAL_PCD_MspInit+0xa0>)
 800f752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f756:	6353      	str	r3, [r2, #52]	; 0x34
 800f758:	2300      	movs	r3, #0
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	4b0b      	ldr	r3, [pc, #44]	; (800f78c <HAL_PCD_MspInit+0xa0>)
 800f75e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f760:	4a0a      	ldr	r2, [pc, #40]	; (800f78c <HAL_PCD_MspInit+0xa0>)
 800f762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f766:	6453      	str	r3, [r2, #68]	; 0x44
 800f768:	4b08      	ldr	r3, [pc, #32]	; (800f78c <HAL_PCD_MspInit+0xa0>)
 800f76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f76c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f770:	60fb      	str	r3, [r7, #12]
 800f772:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f774:	2200      	movs	r2, #0
 800f776:	2100      	movs	r1, #0
 800f778:	2043      	movs	r0, #67	; 0x43
 800f77a:	f7f1 ff5c 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f77e:	2043      	movs	r0, #67	; 0x43
 800f780:	f7f1 ff75 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f784:	bf00      	nop
 800f786:	3728      	adds	r7, #40	; 0x28
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	40023800 	.word	0x40023800
 800f790:	40020000 	.word	0x40020000

0800f794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	4610      	mov	r0, r2
 800f7ac:	f7fe fb41 	bl	800de32 <USBD_LL_SetupStage>
}
 800f7b0:	bf00      	nop
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f7ca:	78fa      	ldrb	r2, [r7, #3]
 800f7cc:	6879      	ldr	r1, [r7, #4]
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	00db      	lsls	r3, r3, #3
 800f7d2:	4413      	add	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	440b      	add	r3, r1
 800f7d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	78fb      	ldrb	r3, [r7, #3]
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	f7fe fb7b 	bl	800dedc <USBD_LL_DataOutStage>
}
 800f7e6:	bf00      	nop
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b082      	sub	sp, #8
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f800:	78fa      	ldrb	r2, [r7, #3]
 800f802:	6879      	ldr	r1, [r7, #4]
 800f804:	4613      	mov	r3, r2
 800f806:	00db      	lsls	r3, r3, #3
 800f808:	4413      	add	r3, r2
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	440b      	add	r3, r1
 800f80e:	334c      	adds	r3, #76	; 0x4c
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	78fb      	ldrb	r3, [r7, #3]
 800f814:	4619      	mov	r1, r3
 800f816:	f7fe fc14 	bl	800e042 <USBD_LL_DataInStage>
}
 800f81a:	bf00      	nop
 800f81c:	3708      	adds	r7, #8
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b082      	sub	sp, #8
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f830:	4618      	mov	r0, r3
 800f832:	f7fe fd48 	bl	800e2c6 <USBD_LL_SOF>
}
 800f836:	bf00      	nop
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b084      	sub	sp, #16
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f846:	2301      	movs	r3, #1
 800f848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	2b02      	cmp	r3, #2
 800f850:	d001      	beq.n	800f856 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f852:	f7f1 fb0d 	bl	8000e70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f85c:	7bfa      	ldrb	r2, [r7, #15]
 800f85e:	4611      	mov	r1, r2
 800f860:	4618      	mov	r0, r3
 800f862:	f7fe fcf2 	bl	800e24a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7fe fc9a 	bl	800e1a6 <USBD_LL_Reset>
}
 800f872:	bf00      	nop
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
	...

0800f87c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fe fced 	bl	800e26a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	6812      	ldr	r2, [r2, #0]
 800f89e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f8a2:	f043 0301 	orr.w	r3, r3, #1
 800f8a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a1b      	ldr	r3, [r3, #32]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d005      	beq.n	800f8bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8b0:	4b04      	ldr	r3, [pc, #16]	; (800f8c4 <HAL_PCD_SuspendCallback+0x48>)
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	4a03      	ldr	r2, [pc, #12]	; (800f8c4 <HAL_PCD_SuspendCallback+0x48>)
 800f8b6:	f043 0306 	orr.w	r3, r3, #6
 800f8ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f8bc:	bf00      	nop
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	e000ed00 	.word	0xe000ed00

0800f8c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fe fcdd 	bl	800e296 <USBD_LL_Resume>
}
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8f6:	78fa      	ldrb	r2, [r7, #3]
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fe fd35 	bl	800e36a <USBD_LL_IsoOUTIncomplete>
}
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	460b      	mov	r3, r1
 800f912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f91a:	78fa      	ldrb	r2, [r7, #3]
 800f91c:	4611      	mov	r1, r2
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fe fcf1 	bl	800e306 <USBD_LL_IsoINIncomplete>
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fe fd47 	bl	800e3ce <USBD_LL_DevConnected>
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe fd44 	bl	800e3e4 <USBD_LL_DevDisconnected>
}
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d13c      	bne.n	800f9ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f974:	4a20      	ldr	r2, [pc, #128]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4a1e      	ldr	r2, [pc, #120]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f980:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f984:	4b1c      	ldr	r3, [pc, #112]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f98a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f98c:	4b1a      	ldr	r3, [pc, #104]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f98e:	2204      	movs	r2, #4
 800f990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f992:	4b19      	ldr	r3, [pc, #100]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f994:	2202      	movs	r2, #2
 800f996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f998:	4b17      	ldr	r3, [pc, #92]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f99e:	4b16      	ldr	r3, [pc, #88]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9a0:	2202      	movs	r2, #2
 800f9a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9a4:	4b14      	ldr	r3, [pc, #80]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f9aa:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f9b0:	4b11      	ldr	r3, [pc, #68]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f9b6:	4b10      	ldr	r3, [pc, #64]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f9bc:	4b0e      	ldr	r3, [pc, #56]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9be:	2200      	movs	r2, #0
 800f9c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f9c2:	480d      	ldr	r0, [pc, #52]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9c4:	f7f3 f865 	bl	8002a92 <HAL_PCD_Init>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d001      	beq.n	800f9d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f9ce:	f7f1 fa4f 	bl	8000e70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f9d2:	2180      	movs	r1, #128	; 0x80
 800f9d4:	4808      	ldr	r0, [pc, #32]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9d6:	f7f4 fabc 	bl	8003f52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f9da:	2240      	movs	r2, #64	; 0x40
 800f9dc:	2100      	movs	r1, #0
 800f9de:	4806      	ldr	r0, [pc, #24]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9e0:	f7f4 fa70 	bl	8003ec4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f9e4:	2280      	movs	r2, #128	; 0x80
 800f9e6:	2101      	movs	r1, #1
 800f9e8:	4803      	ldr	r0, [pc, #12]	; (800f9f8 <USBD_LL_Init+0x94>)
 800f9ea:	f7f4 fa6b 	bl	8003ec4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	20001d00 	.word	0x20001d00

0800f9fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7f3 f95a 	bl	8002ccc <HAL_PCD_Start>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f000 f942 	bl	800fca8 <USBD_Get_USB_Status>
 800fa24:	4603      	mov	r3, r0
 800fa26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa28:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b084      	sub	sp, #16
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
 800fa3a:	4608      	mov	r0, r1
 800fa3c:	4611      	mov	r1, r2
 800fa3e:	461a      	mov	r2, r3
 800fa40:	4603      	mov	r3, r0
 800fa42:	70fb      	strb	r3, [r7, #3]
 800fa44:	460b      	mov	r3, r1
 800fa46:	70bb      	strb	r3, [r7, #2]
 800fa48:	4613      	mov	r3, r2
 800fa4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa50:	2300      	movs	r3, #0
 800fa52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fa5a:	78bb      	ldrb	r3, [r7, #2]
 800fa5c:	883a      	ldrh	r2, [r7, #0]
 800fa5e:	78f9      	ldrb	r1, [r7, #3]
 800fa60:	f7f3 fe2b 	bl	80036ba <HAL_PCD_EP_Open>
 800fa64:	4603      	mov	r3, r0
 800fa66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa68:	7bfb      	ldrb	r3, [r7, #15]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f000 f91c 	bl	800fca8 <USBD_Get_USB_Status>
 800fa70:	4603      	mov	r3, r0
 800fa72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa74:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b084      	sub	sp, #16
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	460b      	mov	r3, r1
 800fa88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa98:	78fa      	ldrb	r2, [r7, #3]
 800fa9a:	4611      	mov	r1, r2
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7f3 fe74 	bl	800378a <HAL_PCD_EP_Close>
 800faa2:	4603      	mov	r3, r0
 800faa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faa6:	7bfb      	ldrb	r3, [r7, #15]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f000 f8fd 	bl	800fca8 <USBD_Get_USB_Status>
 800faae:	4603      	mov	r3, r0
 800fab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3710      	adds	r7, #16
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	460b      	mov	r3, r1
 800fac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac8:	2300      	movs	r3, #0
 800faca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800facc:	2300      	movs	r3, #0
 800face:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fad6:	78fa      	ldrb	r2, [r7, #3]
 800fad8:	4611      	mov	r1, r2
 800fada:	4618      	mov	r0, r3
 800fadc:	f7f3 ff4c 	bl	8003978 <HAL_PCD_EP_SetStall>
 800fae0:	4603      	mov	r3, r0
 800fae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fae4:	7bfb      	ldrb	r3, [r7, #15]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f000 f8de 	bl	800fca8 <USBD_Get_USB_Status>
 800faec:	4603      	mov	r3, r0
 800faee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b084      	sub	sp, #16
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	460b      	mov	r3, r1
 800fb04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb06:	2300      	movs	r3, #0
 800fb08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb14:	78fa      	ldrb	r2, [r7, #3]
 800fb16:	4611      	mov	r1, r2
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7f3 ff91 	bl	8003a40 <HAL_PCD_EP_ClrStall>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb22:	7bfb      	ldrb	r3, [r7, #15]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f000 f8bf 	bl	800fca8 <USBD_Get_USB_Status>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3710      	adds	r7, #16
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	460b      	mov	r3, r1
 800fb42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fb4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	da0b      	bge.n	800fb6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fb54:	78fb      	ldrb	r3, [r7, #3]
 800fb56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb5a:	68f9      	ldr	r1, [r7, #12]
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	00db      	lsls	r3, r3, #3
 800fb60:	4413      	add	r3, r2
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	440b      	add	r3, r1
 800fb66:	333e      	adds	r3, #62	; 0x3e
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	e00b      	b.n	800fb84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fb6c:	78fb      	ldrb	r3, [r7, #3]
 800fb6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb72:	68f9      	ldr	r1, [r7, #12]
 800fb74:	4613      	mov	r3, r2
 800fb76:	00db      	lsls	r3, r3, #3
 800fb78:	4413      	add	r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	440b      	add	r3, r1
 800fb7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fb82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3714      	adds	r7, #20
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbaa:	78fa      	ldrb	r2, [r7, #3]
 800fbac:	4611      	mov	r1, r2
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7f3 fd5e 	bl	8003670 <HAL_PCD_SetAddress>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbb8:	7bfb      	ldrb	r3, [r7, #15]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f000 f874 	bl	800fca8 <USBD_Get_USB_Status>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3710      	adds	r7, #16
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b086      	sub	sp, #24
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	60f8      	str	r0, [r7, #12]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	603b      	str	r3, [r7, #0]
 800fbda:	460b      	mov	r3, r1
 800fbdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbec:	7af9      	ldrb	r1, [r7, #11]
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	f7f3 fe77 	bl	80038e4 <HAL_PCD_EP_Transmit>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbfa:	7dfb      	ldrb	r3, [r7, #23]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f000 f853 	bl	800fca8 <USBD_Get_USB_Status>
 800fc02:	4603      	mov	r3, r0
 800fc04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc06:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3718      	adds	r7, #24
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	607a      	str	r2, [r7, #4]
 800fc1a:	603b      	str	r3, [r7, #0]
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc24:	2300      	movs	r3, #0
 800fc26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc2e:	7af9      	ldrb	r1, [r7, #11]
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	f7f3 fdf3 	bl	800381e <HAL_PCD_EP_Receive>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f000 f832 	bl	800fca8 <USBD_Get_USB_Status>
 800fc44:	4603      	mov	r3, r0
 800fc46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc48:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3718      	adds	r7, #24
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}

0800fc52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b082      	sub	sp, #8
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc64:	78fa      	ldrb	r2, [r7, #3]
 800fc66:	4611      	mov	r1, r2
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7f3 fe23 	bl	80038b4 <HAL_PCD_EP_GetRxCount>
 800fc6e:	4603      	mov	r3, r0
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fc80:	4b03      	ldr	r3, [pc, #12]	; (800fc90 <USBD_static_malloc+0x18>)
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	370c      	adds	r7, #12
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	2000220c 	.word	0x2000220c

0800fc94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b083      	sub	sp, #12
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]

}
 800fc9c:	bf00      	nop
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b085      	sub	sp, #20
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	4603      	mov	r3, r0
 800fcb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fcb6:	79fb      	ldrb	r3, [r7, #7]
 800fcb8:	2b03      	cmp	r3, #3
 800fcba:	d817      	bhi.n	800fcec <USBD_Get_USB_Status+0x44>
 800fcbc:	a201      	add	r2, pc, #4	; (adr r2, 800fcc4 <USBD_Get_USB_Status+0x1c>)
 800fcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc2:	bf00      	nop
 800fcc4:	0800fcd5 	.word	0x0800fcd5
 800fcc8:	0800fcdb 	.word	0x0800fcdb
 800fccc:	0800fce1 	.word	0x0800fce1
 800fcd0:	0800fce7 	.word	0x0800fce7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	73fb      	strb	r3, [r7, #15]
    break;
 800fcd8:	e00b      	b.n	800fcf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fcda:	2303      	movs	r3, #3
 800fcdc:	73fb      	strb	r3, [r7, #15]
    break;
 800fcde:	e008      	b.n	800fcf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fce0:	2301      	movs	r3, #1
 800fce2:	73fb      	strb	r3, [r7, #15]
    break;
 800fce4:	e005      	b.n	800fcf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fce6:	2303      	movs	r3, #3
 800fce8:	73fb      	strb	r3, [r7, #15]
    break;
 800fcea:	e002      	b.n	800fcf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fcec:	2303      	movs	r3, #3
 800fcee:	73fb      	strb	r3, [r7, #15]
    break;
 800fcf0:	bf00      	nop
  }
  return usb_status;
 800fcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3714      	adds	r7, #20
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr

0800fd00 <__errno>:
 800fd00:	4b01      	ldr	r3, [pc, #4]	; (800fd08 <__errno+0x8>)
 800fd02:	6818      	ldr	r0, [r3, #0]
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	200003c0 	.word	0x200003c0

0800fd0c <__libc_init_array>:
 800fd0c:	b570      	push	{r4, r5, r6, lr}
 800fd0e:	4d0d      	ldr	r5, [pc, #52]	; (800fd44 <__libc_init_array+0x38>)
 800fd10:	4c0d      	ldr	r4, [pc, #52]	; (800fd48 <__libc_init_array+0x3c>)
 800fd12:	1b64      	subs	r4, r4, r5
 800fd14:	10a4      	asrs	r4, r4, #2
 800fd16:	2600      	movs	r6, #0
 800fd18:	42a6      	cmp	r6, r4
 800fd1a:	d109      	bne.n	800fd30 <__libc_init_array+0x24>
 800fd1c:	4d0b      	ldr	r5, [pc, #44]	; (800fd4c <__libc_init_array+0x40>)
 800fd1e:	4c0c      	ldr	r4, [pc, #48]	; (800fd50 <__libc_init_array+0x44>)
 800fd20:	f000 fc96 	bl	8010650 <_init>
 800fd24:	1b64      	subs	r4, r4, r5
 800fd26:	10a4      	asrs	r4, r4, #2
 800fd28:	2600      	movs	r6, #0
 800fd2a:	42a6      	cmp	r6, r4
 800fd2c:	d105      	bne.n	800fd3a <__libc_init_array+0x2e>
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd34:	4798      	blx	r3
 800fd36:	3601      	adds	r6, #1
 800fd38:	e7ee      	b.n	800fd18 <__libc_init_array+0xc>
 800fd3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd3e:	4798      	blx	r3
 800fd40:	3601      	adds	r6, #1
 800fd42:	e7f2      	b.n	800fd2a <__libc_init_array+0x1e>
 800fd44:	080107b8 	.word	0x080107b8
 800fd48:	080107b8 	.word	0x080107b8
 800fd4c:	080107b8 	.word	0x080107b8
 800fd50:	080107bc 	.word	0x080107bc

0800fd54 <memcpy>:
 800fd54:	440a      	add	r2, r1
 800fd56:	4291      	cmp	r1, r2
 800fd58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fd5c:	d100      	bne.n	800fd60 <memcpy+0xc>
 800fd5e:	4770      	bx	lr
 800fd60:	b510      	push	{r4, lr}
 800fd62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd6a:	4291      	cmp	r1, r2
 800fd6c:	d1f9      	bne.n	800fd62 <memcpy+0xe>
 800fd6e:	bd10      	pop	{r4, pc}

0800fd70 <memset>:
 800fd70:	4402      	add	r2, r0
 800fd72:	4603      	mov	r3, r0
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d100      	bne.n	800fd7a <memset+0xa>
 800fd78:	4770      	bx	lr
 800fd7a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd7e:	e7f9      	b.n	800fd74 <memset+0x4>

0800fd80 <siprintf>:
 800fd80:	b40e      	push	{r1, r2, r3}
 800fd82:	b500      	push	{lr}
 800fd84:	b09c      	sub	sp, #112	; 0x70
 800fd86:	ab1d      	add	r3, sp, #116	; 0x74
 800fd88:	9002      	str	r0, [sp, #8]
 800fd8a:	9006      	str	r0, [sp, #24]
 800fd8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd90:	4809      	ldr	r0, [pc, #36]	; (800fdb8 <siprintf+0x38>)
 800fd92:	9107      	str	r1, [sp, #28]
 800fd94:	9104      	str	r1, [sp, #16]
 800fd96:	4909      	ldr	r1, [pc, #36]	; (800fdbc <siprintf+0x3c>)
 800fd98:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd9c:	9105      	str	r1, [sp, #20]
 800fd9e:	6800      	ldr	r0, [r0, #0]
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	a902      	add	r1, sp, #8
 800fda4:	f000 f870 	bl	800fe88 <_svfiprintf_r>
 800fda8:	9b02      	ldr	r3, [sp, #8]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	701a      	strb	r2, [r3, #0]
 800fdae:	b01c      	add	sp, #112	; 0x70
 800fdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdb4:	b003      	add	sp, #12
 800fdb6:	4770      	bx	lr
 800fdb8:	200003c0 	.word	0x200003c0
 800fdbc:	ffff0208 	.word	0xffff0208

0800fdc0 <strcpy>:
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdc6:	f803 2b01 	strb.w	r2, [r3], #1
 800fdca:	2a00      	cmp	r2, #0
 800fdcc:	d1f9      	bne.n	800fdc2 <strcpy+0x2>
 800fdce:	4770      	bx	lr

0800fdd0 <__ssputs_r>:
 800fdd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdd4:	688e      	ldr	r6, [r1, #8]
 800fdd6:	429e      	cmp	r6, r3
 800fdd8:	4682      	mov	sl, r0
 800fdda:	460c      	mov	r4, r1
 800fddc:	4690      	mov	r8, r2
 800fdde:	461f      	mov	r7, r3
 800fde0:	d838      	bhi.n	800fe54 <__ssputs_r+0x84>
 800fde2:	898a      	ldrh	r2, [r1, #12]
 800fde4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fde8:	d032      	beq.n	800fe50 <__ssputs_r+0x80>
 800fdea:	6825      	ldr	r5, [r4, #0]
 800fdec:	6909      	ldr	r1, [r1, #16]
 800fdee:	eba5 0901 	sub.w	r9, r5, r1
 800fdf2:	6965      	ldr	r5, [r4, #20]
 800fdf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	444b      	add	r3, r9
 800fe00:	106d      	asrs	r5, r5, #1
 800fe02:	429d      	cmp	r5, r3
 800fe04:	bf38      	it	cc
 800fe06:	461d      	movcc	r5, r3
 800fe08:	0553      	lsls	r3, r2, #21
 800fe0a:	d531      	bpl.n	800fe70 <__ssputs_r+0xa0>
 800fe0c:	4629      	mov	r1, r5
 800fe0e:	f000 fb55 	bl	80104bc <_malloc_r>
 800fe12:	4606      	mov	r6, r0
 800fe14:	b950      	cbnz	r0, 800fe2c <__ssputs_r+0x5c>
 800fe16:	230c      	movs	r3, #12
 800fe18:	f8ca 3000 	str.w	r3, [sl]
 800fe1c:	89a3      	ldrh	r3, [r4, #12]
 800fe1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe22:	81a3      	strh	r3, [r4, #12]
 800fe24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe2c:	6921      	ldr	r1, [r4, #16]
 800fe2e:	464a      	mov	r2, r9
 800fe30:	f7ff ff90 	bl	800fd54 <memcpy>
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe3e:	81a3      	strh	r3, [r4, #12]
 800fe40:	6126      	str	r6, [r4, #16]
 800fe42:	6165      	str	r5, [r4, #20]
 800fe44:	444e      	add	r6, r9
 800fe46:	eba5 0509 	sub.w	r5, r5, r9
 800fe4a:	6026      	str	r6, [r4, #0]
 800fe4c:	60a5      	str	r5, [r4, #8]
 800fe4e:	463e      	mov	r6, r7
 800fe50:	42be      	cmp	r6, r7
 800fe52:	d900      	bls.n	800fe56 <__ssputs_r+0x86>
 800fe54:	463e      	mov	r6, r7
 800fe56:	6820      	ldr	r0, [r4, #0]
 800fe58:	4632      	mov	r2, r6
 800fe5a:	4641      	mov	r1, r8
 800fe5c:	f000 faa8 	bl	80103b0 <memmove>
 800fe60:	68a3      	ldr	r3, [r4, #8]
 800fe62:	1b9b      	subs	r3, r3, r6
 800fe64:	60a3      	str	r3, [r4, #8]
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	4433      	add	r3, r6
 800fe6a:	6023      	str	r3, [r4, #0]
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	e7db      	b.n	800fe28 <__ssputs_r+0x58>
 800fe70:	462a      	mov	r2, r5
 800fe72:	f000 fb97 	bl	80105a4 <_realloc_r>
 800fe76:	4606      	mov	r6, r0
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d1e1      	bne.n	800fe40 <__ssputs_r+0x70>
 800fe7c:	6921      	ldr	r1, [r4, #16]
 800fe7e:	4650      	mov	r0, sl
 800fe80:	f000 fab0 	bl	80103e4 <_free_r>
 800fe84:	e7c7      	b.n	800fe16 <__ssputs_r+0x46>
	...

0800fe88 <_svfiprintf_r>:
 800fe88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8c:	4698      	mov	r8, r3
 800fe8e:	898b      	ldrh	r3, [r1, #12]
 800fe90:	061b      	lsls	r3, r3, #24
 800fe92:	b09d      	sub	sp, #116	; 0x74
 800fe94:	4607      	mov	r7, r0
 800fe96:	460d      	mov	r5, r1
 800fe98:	4614      	mov	r4, r2
 800fe9a:	d50e      	bpl.n	800feba <_svfiprintf_r+0x32>
 800fe9c:	690b      	ldr	r3, [r1, #16]
 800fe9e:	b963      	cbnz	r3, 800feba <_svfiprintf_r+0x32>
 800fea0:	2140      	movs	r1, #64	; 0x40
 800fea2:	f000 fb0b 	bl	80104bc <_malloc_r>
 800fea6:	6028      	str	r0, [r5, #0]
 800fea8:	6128      	str	r0, [r5, #16]
 800feaa:	b920      	cbnz	r0, 800feb6 <_svfiprintf_r+0x2e>
 800feac:	230c      	movs	r3, #12
 800feae:	603b      	str	r3, [r7, #0]
 800feb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800feb4:	e0d1      	b.n	801005a <_svfiprintf_r+0x1d2>
 800feb6:	2340      	movs	r3, #64	; 0x40
 800feb8:	616b      	str	r3, [r5, #20]
 800feba:	2300      	movs	r3, #0
 800febc:	9309      	str	r3, [sp, #36]	; 0x24
 800febe:	2320      	movs	r3, #32
 800fec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fec4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fec8:	2330      	movs	r3, #48	; 0x30
 800feca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010074 <_svfiprintf_r+0x1ec>
 800fece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fed2:	f04f 0901 	mov.w	r9, #1
 800fed6:	4623      	mov	r3, r4
 800fed8:	469a      	mov	sl, r3
 800feda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fede:	b10a      	cbz	r2, 800fee4 <_svfiprintf_r+0x5c>
 800fee0:	2a25      	cmp	r2, #37	; 0x25
 800fee2:	d1f9      	bne.n	800fed8 <_svfiprintf_r+0x50>
 800fee4:	ebba 0b04 	subs.w	fp, sl, r4
 800fee8:	d00b      	beq.n	800ff02 <_svfiprintf_r+0x7a>
 800feea:	465b      	mov	r3, fp
 800feec:	4622      	mov	r2, r4
 800feee:	4629      	mov	r1, r5
 800fef0:	4638      	mov	r0, r7
 800fef2:	f7ff ff6d 	bl	800fdd0 <__ssputs_r>
 800fef6:	3001      	adds	r0, #1
 800fef8:	f000 80aa 	beq.w	8010050 <_svfiprintf_r+0x1c8>
 800fefc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fefe:	445a      	add	r2, fp
 800ff00:	9209      	str	r2, [sp, #36]	; 0x24
 800ff02:	f89a 3000 	ldrb.w	r3, [sl]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f000 80a2 	beq.w	8010050 <_svfiprintf_r+0x1c8>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff16:	f10a 0a01 	add.w	sl, sl, #1
 800ff1a:	9304      	str	r3, [sp, #16]
 800ff1c:	9307      	str	r3, [sp, #28]
 800ff1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff22:	931a      	str	r3, [sp, #104]	; 0x68
 800ff24:	4654      	mov	r4, sl
 800ff26:	2205      	movs	r2, #5
 800ff28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff2c:	4851      	ldr	r0, [pc, #324]	; (8010074 <_svfiprintf_r+0x1ec>)
 800ff2e:	f7f0 f95f 	bl	80001f0 <memchr>
 800ff32:	9a04      	ldr	r2, [sp, #16]
 800ff34:	b9d8      	cbnz	r0, 800ff6e <_svfiprintf_r+0xe6>
 800ff36:	06d0      	lsls	r0, r2, #27
 800ff38:	bf44      	itt	mi
 800ff3a:	2320      	movmi	r3, #32
 800ff3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff40:	0711      	lsls	r1, r2, #28
 800ff42:	bf44      	itt	mi
 800ff44:	232b      	movmi	r3, #43	; 0x2b
 800ff46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ff50:	d015      	beq.n	800ff7e <_svfiprintf_r+0xf6>
 800ff52:	9a07      	ldr	r2, [sp, #28]
 800ff54:	4654      	mov	r4, sl
 800ff56:	2000      	movs	r0, #0
 800ff58:	f04f 0c0a 	mov.w	ip, #10
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff62:	3b30      	subs	r3, #48	; 0x30
 800ff64:	2b09      	cmp	r3, #9
 800ff66:	d94e      	bls.n	8010006 <_svfiprintf_r+0x17e>
 800ff68:	b1b0      	cbz	r0, 800ff98 <_svfiprintf_r+0x110>
 800ff6a:	9207      	str	r2, [sp, #28]
 800ff6c:	e014      	b.n	800ff98 <_svfiprintf_r+0x110>
 800ff6e:	eba0 0308 	sub.w	r3, r0, r8
 800ff72:	fa09 f303 	lsl.w	r3, r9, r3
 800ff76:	4313      	orrs	r3, r2
 800ff78:	9304      	str	r3, [sp, #16]
 800ff7a:	46a2      	mov	sl, r4
 800ff7c:	e7d2      	b.n	800ff24 <_svfiprintf_r+0x9c>
 800ff7e:	9b03      	ldr	r3, [sp, #12]
 800ff80:	1d19      	adds	r1, r3, #4
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	9103      	str	r1, [sp, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	bfbb      	ittet	lt
 800ff8a:	425b      	neglt	r3, r3
 800ff8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff90:	9307      	strge	r3, [sp, #28]
 800ff92:	9307      	strlt	r3, [sp, #28]
 800ff94:	bfb8      	it	lt
 800ff96:	9204      	strlt	r2, [sp, #16]
 800ff98:	7823      	ldrb	r3, [r4, #0]
 800ff9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ff9c:	d10c      	bne.n	800ffb8 <_svfiprintf_r+0x130>
 800ff9e:	7863      	ldrb	r3, [r4, #1]
 800ffa0:	2b2a      	cmp	r3, #42	; 0x2a
 800ffa2:	d135      	bne.n	8010010 <_svfiprintf_r+0x188>
 800ffa4:	9b03      	ldr	r3, [sp, #12]
 800ffa6:	1d1a      	adds	r2, r3, #4
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	9203      	str	r2, [sp, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	bfb8      	it	lt
 800ffb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ffb4:	3402      	adds	r4, #2
 800ffb6:	9305      	str	r3, [sp, #20]
 800ffb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010084 <_svfiprintf_r+0x1fc>
 800ffbc:	7821      	ldrb	r1, [r4, #0]
 800ffbe:	2203      	movs	r2, #3
 800ffc0:	4650      	mov	r0, sl
 800ffc2:	f7f0 f915 	bl	80001f0 <memchr>
 800ffc6:	b140      	cbz	r0, 800ffda <_svfiprintf_r+0x152>
 800ffc8:	2340      	movs	r3, #64	; 0x40
 800ffca:	eba0 000a 	sub.w	r0, r0, sl
 800ffce:	fa03 f000 	lsl.w	r0, r3, r0
 800ffd2:	9b04      	ldr	r3, [sp, #16]
 800ffd4:	4303      	orrs	r3, r0
 800ffd6:	3401      	adds	r4, #1
 800ffd8:	9304      	str	r3, [sp, #16]
 800ffda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffde:	4826      	ldr	r0, [pc, #152]	; (8010078 <_svfiprintf_r+0x1f0>)
 800ffe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffe4:	2206      	movs	r2, #6
 800ffe6:	f7f0 f903 	bl	80001f0 <memchr>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d038      	beq.n	8010060 <_svfiprintf_r+0x1d8>
 800ffee:	4b23      	ldr	r3, [pc, #140]	; (801007c <_svfiprintf_r+0x1f4>)
 800fff0:	bb1b      	cbnz	r3, 801003a <_svfiprintf_r+0x1b2>
 800fff2:	9b03      	ldr	r3, [sp, #12]
 800fff4:	3307      	adds	r3, #7
 800fff6:	f023 0307 	bic.w	r3, r3, #7
 800fffa:	3308      	adds	r3, #8
 800fffc:	9303      	str	r3, [sp, #12]
 800fffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010000:	4433      	add	r3, r6
 8010002:	9309      	str	r3, [sp, #36]	; 0x24
 8010004:	e767      	b.n	800fed6 <_svfiprintf_r+0x4e>
 8010006:	fb0c 3202 	mla	r2, ip, r2, r3
 801000a:	460c      	mov	r4, r1
 801000c:	2001      	movs	r0, #1
 801000e:	e7a5      	b.n	800ff5c <_svfiprintf_r+0xd4>
 8010010:	2300      	movs	r3, #0
 8010012:	3401      	adds	r4, #1
 8010014:	9305      	str	r3, [sp, #20]
 8010016:	4619      	mov	r1, r3
 8010018:	f04f 0c0a 	mov.w	ip, #10
 801001c:	4620      	mov	r0, r4
 801001e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010022:	3a30      	subs	r2, #48	; 0x30
 8010024:	2a09      	cmp	r2, #9
 8010026:	d903      	bls.n	8010030 <_svfiprintf_r+0x1a8>
 8010028:	2b00      	cmp	r3, #0
 801002a:	d0c5      	beq.n	800ffb8 <_svfiprintf_r+0x130>
 801002c:	9105      	str	r1, [sp, #20]
 801002e:	e7c3      	b.n	800ffb8 <_svfiprintf_r+0x130>
 8010030:	fb0c 2101 	mla	r1, ip, r1, r2
 8010034:	4604      	mov	r4, r0
 8010036:	2301      	movs	r3, #1
 8010038:	e7f0      	b.n	801001c <_svfiprintf_r+0x194>
 801003a:	ab03      	add	r3, sp, #12
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	462a      	mov	r2, r5
 8010040:	4b0f      	ldr	r3, [pc, #60]	; (8010080 <_svfiprintf_r+0x1f8>)
 8010042:	a904      	add	r1, sp, #16
 8010044:	4638      	mov	r0, r7
 8010046:	f3af 8000 	nop.w
 801004a:	1c42      	adds	r2, r0, #1
 801004c:	4606      	mov	r6, r0
 801004e:	d1d6      	bne.n	800fffe <_svfiprintf_r+0x176>
 8010050:	89ab      	ldrh	r3, [r5, #12]
 8010052:	065b      	lsls	r3, r3, #25
 8010054:	f53f af2c 	bmi.w	800feb0 <_svfiprintf_r+0x28>
 8010058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801005a:	b01d      	add	sp, #116	; 0x74
 801005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010060:	ab03      	add	r3, sp, #12
 8010062:	9300      	str	r3, [sp, #0]
 8010064:	462a      	mov	r2, r5
 8010066:	4b06      	ldr	r3, [pc, #24]	; (8010080 <_svfiprintf_r+0x1f8>)
 8010068:	a904      	add	r1, sp, #16
 801006a:	4638      	mov	r0, r7
 801006c:	f000 f87a 	bl	8010164 <_printf_i>
 8010070:	e7eb      	b.n	801004a <_svfiprintf_r+0x1c2>
 8010072:	bf00      	nop
 8010074:	0801077c 	.word	0x0801077c
 8010078:	08010786 	.word	0x08010786
 801007c:	00000000 	.word	0x00000000
 8010080:	0800fdd1 	.word	0x0800fdd1
 8010084:	08010782 	.word	0x08010782

08010088 <_printf_common>:
 8010088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801008c:	4616      	mov	r6, r2
 801008e:	4699      	mov	r9, r3
 8010090:	688a      	ldr	r2, [r1, #8]
 8010092:	690b      	ldr	r3, [r1, #16]
 8010094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010098:	4293      	cmp	r3, r2
 801009a:	bfb8      	it	lt
 801009c:	4613      	movlt	r3, r2
 801009e:	6033      	str	r3, [r6, #0]
 80100a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100a4:	4607      	mov	r7, r0
 80100a6:	460c      	mov	r4, r1
 80100a8:	b10a      	cbz	r2, 80100ae <_printf_common+0x26>
 80100aa:	3301      	adds	r3, #1
 80100ac:	6033      	str	r3, [r6, #0]
 80100ae:	6823      	ldr	r3, [r4, #0]
 80100b0:	0699      	lsls	r1, r3, #26
 80100b2:	bf42      	ittt	mi
 80100b4:	6833      	ldrmi	r3, [r6, #0]
 80100b6:	3302      	addmi	r3, #2
 80100b8:	6033      	strmi	r3, [r6, #0]
 80100ba:	6825      	ldr	r5, [r4, #0]
 80100bc:	f015 0506 	ands.w	r5, r5, #6
 80100c0:	d106      	bne.n	80100d0 <_printf_common+0x48>
 80100c2:	f104 0a19 	add.w	sl, r4, #25
 80100c6:	68e3      	ldr	r3, [r4, #12]
 80100c8:	6832      	ldr	r2, [r6, #0]
 80100ca:	1a9b      	subs	r3, r3, r2
 80100cc:	42ab      	cmp	r3, r5
 80100ce:	dc26      	bgt.n	801011e <_printf_common+0x96>
 80100d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80100d4:	1e13      	subs	r3, r2, #0
 80100d6:	6822      	ldr	r2, [r4, #0]
 80100d8:	bf18      	it	ne
 80100da:	2301      	movne	r3, #1
 80100dc:	0692      	lsls	r2, r2, #26
 80100de:	d42b      	bmi.n	8010138 <_printf_common+0xb0>
 80100e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100e4:	4649      	mov	r1, r9
 80100e6:	4638      	mov	r0, r7
 80100e8:	47c0      	blx	r8
 80100ea:	3001      	adds	r0, #1
 80100ec:	d01e      	beq.n	801012c <_printf_common+0xa4>
 80100ee:	6823      	ldr	r3, [r4, #0]
 80100f0:	68e5      	ldr	r5, [r4, #12]
 80100f2:	6832      	ldr	r2, [r6, #0]
 80100f4:	f003 0306 	and.w	r3, r3, #6
 80100f8:	2b04      	cmp	r3, #4
 80100fa:	bf08      	it	eq
 80100fc:	1aad      	subeq	r5, r5, r2
 80100fe:	68a3      	ldr	r3, [r4, #8]
 8010100:	6922      	ldr	r2, [r4, #16]
 8010102:	bf0c      	ite	eq
 8010104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010108:	2500      	movne	r5, #0
 801010a:	4293      	cmp	r3, r2
 801010c:	bfc4      	itt	gt
 801010e:	1a9b      	subgt	r3, r3, r2
 8010110:	18ed      	addgt	r5, r5, r3
 8010112:	2600      	movs	r6, #0
 8010114:	341a      	adds	r4, #26
 8010116:	42b5      	cmp	r5, r6
 8010118:	d11a      	bne.n	8010150 <_printf_common+0xc8>
 801011a:	2000      	movs	r0, #0
 801011c:	e008      	b.n	8010130 <_printf_common+0xa8>
 801011e:	2301      	movs	r3, #1
 8010120:	4652      	mov	r2, sl
 8010122:	4649      	mov	r1, r9
 8010124:	4638      	mov	r0, r7
 8010126:	47c0      	blx	r8
 8010128:	3001      	adds	r0, #1
 801012a:	d103      	bne.n	8010134 <_printf_common+0xac>
 801012c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010134:	3501      	adds	r5, #1
 8010136:	e7c6      	b.n	80100c6 <_printf_common+0x3e>
 8010138:	18e1      	adds	r1, r4, r3
 801013a:	1c5a      	adds	r2, r3, #1
 801013c:	2030      	movs	r0, #48	; 0x30
 801013e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010142:	4422      	add	r2, r4
 8010144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801014c:	3302      	adds	r3, #2
 801014e:	e7c7      	b.n	80100e0 <_printf_common+0x58>
 8010150:	2301      	movs	r3, #1
 8010152:	4622      	mov	r2, r4
 8010154:	4649      	mov	r1, r9
 8010156:	4638      	mov	r0, r7
 8010158:	47c0      	blx	r8
 801015a:	3001      	adds	r0, #1
 801015c:	d0e6      	beq.n	801012c <_printf_common+0xa4>
 801015e:	3601      	adds	r6, #1
 8010160:	e7d9      	b.n	8010116 <_printf_common+0x8e>
	...

08010164 <_printf_i>:
 8010164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010168:	7e0f      	ldrb	r7, [r1, #24]
 801016a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801016c:	2f78      	cmp	r7, #120	; 0x78
 801016e:	4691      	mov	r9, r2
 8010170:	4680      	mov	r8, r0
 8010172:	460c      	mov	r4, r1
 8010174:	469a      	mov	sl, r3
 8010176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801017a:	d807      	bhi.n	801018c <_printf_i+0x28>
 801017c:	2f62      	cmp	r7, #98	; 0x62
 801017e:	d80a      	bhi.n	8010196 <_printf_i+0x32>
 8010180:	2f00      	cmp	r7, #0
 8010182:	f000 80d8 	beq.w	8010336 <_printf_i+0x1d2>
 8010186:	2f58      	cmp	r7, #88	; 0x58
 8010188:	f000 80a3 	beq.w	80102d2 <_printf_i+0x16e>
 801018c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010194:	e03a      	b.n	801020c <_printf_i+0xa8>
 8010196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801019a:	2b15      	cmp	r3, #21
 801019c:	d8f6      	bhi.n	801018c <_printf_i+0x28>
 801019e:	a101      	add	r1, pc, #4	; (adr r1, 80101a4 <_printf_i+0x40>)
 80101a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101a4:	080101fd 	.word	0x080101fd
 80101a8:	08010211 	.word	0x08010211
 80101ac:	0801018d 	.word	0x0801018d
 80101b0:	0801018d 	.word	0x0801018d
 80101b4:	0801018d 	.word	0x0801018d
 80101b8:	0801018d 	.word	0x0801018d
 80101bc:	08010211 	.word	0x08010211
 80101c0:	0801018d 	.word	0x0801018d
 80101c4:	0801018d 	.word	0x0801018d
 80101c8:	0801018d 	.word	0x0801018d
 80101cc:	0801018d 	.word	0x0801018d
 80101d0:	0801031d 	.word	0x0801031d
 80101d4:	08010241 	.word	0x08010241
 80101d8:	080102ff 	.word	0x080102ff
 80101dc:	0801018d 	.word	0x0801018d
 80101e0:	0801018d 	.word	0x0801018d
 80101e4:	0801033f 	.word	0x0801033f
 80101e8:	0801018d 	.word	0x0801018d
 80101ec:	08010241 	.word	0x08010241
 80101f0:	0801018d 	.word	0x0801018d
 80101f4:	0801018d 	.word	0x0801018d
 80101f8:	08010307 	.word	0x08010307
 80101fc:	682b      	ldr	r3, [r5, #0]
 80101fe:	1d1a      	adds	r2, r3, #4
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	602a      	str	r2, [r5, #0]
 8010204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801020c:	2301      	movs	r3, #1
 801020e:	e0a3      	b.n	8010358 <_printf_i+0x1f4>
 8010210:	6820      	ldr	r0, [r4, #0]
 8010212:	6829      	ldr	r1, [r5, #0]
 8010214:	0606      	lsls	r6, r0, #24
 8010216:	f101 0304 	add.w	r3, r1, #4
 801021a:	d50a      	bpl.n	8010232 <_printf_i+0xce>
 801021c:	680e      	ldr	r6, [r1, #0]
 801021e:	602b      	str	r3, [r5, #0]
 8010220:	2e00      	cmp	r6, #0
 8010222:	da03      	bge.n	801022c <_printf_i+0xc8>
 8010224:	232d      	movs	r3, #45	; 0x2d
 8010226:	4276      	negs	r6, r6
 8010228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801022c:	485e      	ldr	r0, [pc, #376]	; (80103a8 <_printf_i+0x244>)
 801022e:	230a      	movs	r3, #10
 8010230:	e019      	b.n	8010266 <_printf_i+0x102>
 8010232:	680e      	ldr	r6, [r1, #0]
 8010234:	602b      	str	r3, [r5, #0]
 8010236:	f010 0f40 	tst.w	r0, #64	; 0x40
 801023a:	bf18      	it	ne
 801023c:	b236      	sxthne	r6, r6
 801023e:	e7ef      	b.n	8010220 <_printf_i+0xbc>
 8010240:	682b      	ldr	r3, [r5, #0]
 8010242:	6820      	ldr	r0, [r4, #0]
 8010244:	1d19      	adds	r1, r3, #4
 8010246:	6029      	str	r1, [r5, #0]
 8010248:	0601      	lsls	r1, r0, #24
 801024a:	d501      	bpl.n	8010250 <_printf_i+0xec>
 801024c:	681e      	ldr	r6, [r3, #0]
 801024e:	e002      	b.n	8010256 <_printf_i+0xf2>
 8010250:	0646      	lsls	r6, r0, #25
 8010252:	d5fb      	bpl.n	801024c <_printf_i+0xe8>
 8010254:	881e      	ldrh	r6, [r3, #0]
 8010256:	4854      	ldr	r0, [pc, #336]	; (80103a8 <_printf_i+0x244>)
 8010258:	2f6f      	cmp	r7, #111	; 0x6f
 801025a:	bf0c      	ite	eq
 801025c:	2308      	moveq	r3, #8
 801025e:	230a      	movne	r3, #10
 8010260:	2100      	movs	r1, #0
 8010262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010266:	6865      	ldr	r5, [r4, #4]
 8010268:	60a5      	str	r5, [r4, #8]
 801026a:	2d00      	cmp	r5, #0
 801026c:	bfa2      	ittt	ge
 801026e:	6821      	ldrge	r1, [r4, #0]
 8010270:	f021 0104 	bicge.w	r1, r1, #4
 8010274:	6021      	strge	r1, [r4, #0]
 8010276:	b90e      	cbnz	r6, 801027c <_printf_i+0x118>
 8010278:	2d00      	cmp	r5, #0
 801027a:	d04d      	beq.n	8010318 <_printf_i+0x1b4>
 801027c:	4615      	mov	r5, r2
 801027e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010282:	fb03 6711 	mls	r7, r3, r1, r6
 8010286:	5dc7      	ldrb	r7, [r0, r7]
 8010288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801028c:	4637      	mov	r7, r6
 801028e:	42bb      	cmp	r3, r7
 8010290:	460e      	mov	r6, r1
 8010292:	d9f4      	bls.n	801027e <_printf_i+0x11a>
 8010294:	2b08      	cmp	r3, #8
 8010296:	d10b      	bne.n	80102b0 <_printf_i+0x14c>
 8010298:	6823      	ldr	r3, [r4, #0]
 801029a:	07de      	lsls	r6, r3, #31
 801029c:	d508      	bpl.n	80102b0 <_printf_i+0x14c>
 801029e:	6923      	ldr	r3, [r4, #16]
 80102a0:	6861      	ldr	r1, [r4, #4]
 80102a2:	4299      	cmp	r1, r3
 80102a4:	bfde      	ittt	le
 80102a6:	2330      	movle	r3, #48	; 0x30
 80102a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80102b0:	1b52      	subs	r2, r2, r5
 80102b2:	6122      	str	r2, [r4, #16]
 80102b4:	f8cd a000 	str.w	sl, [sp]
 80102b8:	464b      	mov	r3, r9
 80102ba:	aa03      	add	r2, sp, #12
 80102bc:	4621      	mov	r1, r4
 80102be:	4640      	mov	r0, r8
 80102c0:	f7ff fee2 	bl	8010088 <_printf_common>
 80102c4:	3001      	adds	r0, #1
 80102c6:	d14c      	bne.n	8010362 <_printf_i+0x1fe>
 80102c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102cc:	b004      	add	sp, #16
 80102ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102d2:	4835      	ldr	r0, [pc, #212]	; (80103a8 <_printf_i+0x244>)
 80102d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80102d8:	6829      	ldr	r1, [r5, #0]
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80102e0:	6029      	str	r1, [r5, #0]
 80102e2:	061d      	lsls	r5, r3, #24
 80102e4:	d514      	bpl.n	8010310 <_printf_i+0x1ac>
 80102e6:	07df      	lsls	r7, r3, #31
 80102e8:	bf44      	itt	mi
 80102ea:	f043 0320 	orrmi.w	r3, r3, #32
 80102ee:	6023      	strmi	r3, [r4, #0]
 80102f0:	b91e      	cbnz	r6, 80102fa <_printf_i+0x196>
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	f023 0320 	bic.w	r3, r3, #32
 80102f8:	6023      	str	r3, [r4, #0]
 80102fa:	2310      	movs	r3, #16
 80102fc:	e7b0      	b.n	8010260 <_printf_i+0xfc>
 80102fe:	6823      	ldr	r3, [r4, #0]
 8010300:	f043 0320 	orr.w	r3, r3, #32
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	2378      	movs	r3, #120	; 0x78
 8010308:	4828      	ldr	r0, [pc, #160]	; (80103ac <_printf_i+0x248>)
 801030a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801030e:	e7e3      	b.n	80102d8 <_printf_i+0x174>
 8010310:	0659      	lsls	r1, r3, #25
 8010312:	bf48      	it	mi
 8010314:	b2b6      	uxthmi	r6, r6
 8010316:	e7e6      	b.n	80102e6 <_printf_i+0x182>
 8010318:	4615      	mov	r5, r2
 801031a:	e7bb      	b.n	8010294 <_printf_i+0x130>
 801031c:	682b      	ldr	r3, [r5, #0]
 801031e:	6826      	ldr	r6, [r4, #0]
 8010320:	6961      	ldr	r1, [r4, #20]
 8010322:	1d18      	adds	r0, r3, #4
 8010324:	6028      	str	r0, [r5, #0]
 8010326:	0635      	lsls	r5, r6, #24
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	d501      	bpl.n	8010330 <_printf_i+0x1cc>
 801032c:	6019      	str	r1, [r3, #0]
 801032e:	e002      	b.n	8010336 <_printf_i+0x1d2>
 8010330:	0670      	lsls	r0, r6, #25
 8010332:	d5fb      	bpl.n	801032c <_printf_i+0x1c8>
 8010334:	8019      	strh	r1, [r3, #0]
 8010336:	2300      	movs	r3, #0
 8010338:	6123      	str	r3, [r4, #16]
 801033a:	4615      	mov	r5, r2
 801033c:	e7ba      	b.n	80102b4 <_printf_i+0x150>
 801033e:	682b      	ldr	r3, [r5, #0]
 8010340:	1d1a      	adds	r2, r3, #4
 8010342:	602a      	str	r2, [r5, #0]
 8010344:	681d      	ldr	r5, [r3, #0]
 8010346:	6862      	ldr	r2, [r4, #4]
 8010348:	2100      	movs	r1, #0
 801034a:	4628      	mov	r0, r5
 801034c:	f7ef ff50 	bl	80001f0 <memchr>
 8010350:	b108      	cbz	r0, 8010356 <_printf_i+0x1f2>
 8010352:	1b40      	subs	r0, r0, r5
 8010354:	6060      	str	r0, [r4, #4]
 8010356:	6863      	ldr	r3, [r4, #4]
 8010358:	6123      	str	r3, [r4, #16]
 801035a:	2300      	movs	r3, #0
 801035c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010360:	e7a8      	b.n	80102b4 <_printf_i+0x150>
 8010362:	6923      	ldr	r3, [r4, #16]
 8010364:	462a      	mov	r2, r5
 8010366:	4649      	mov	r1, r9
 8010368:	4640      	mov	r0, r8
 801036a:	47d0      	blx	sl
 801036c:	3001      	adds	r0, #1
 801036e:	d0ab      	beq.n	80102c8 <_printf_i+0x164>
 8010370:	6823      	ldr	r3, [r4, #0]
 8010372:	079b      	lsls	r3, r3, #30
 8010374:	d413      	bmi.n	801039e <_printf_i+0x23a>
 8010376:	68e0      	ldr	r0, [r4, #12]
 8010378:	9b03      	ldr	r3, [sp, #12]
 801037a:	4298      	cmp	r0, r3
 801037c:	bfb8      	it	lt
 801037e:	4618      	movlt	r0, r3
 8010380:	e7a4      	b.n	80102cc <_printf_i+0x168>
 8010382:	2301      	movs	r3, #1
 8010384:	4632      	mov	r2, r6
 8010386:	4649      	mov	r1, r9
 8010388:	4640      	mov	r0, r8
 801038a:	47d0      	blx	sl
 801038c:	3001      	adds	r0, #1
 801038e:	d09b      	beq.n	80102c8 <_printf_i+0x164>
 8010390:	3501      	adds	r5, #1
 8010392:	68e3      	ldr	r3, [r4, #12]
 8010394:	9903      	ldr	r1, [sp, #12]
 8010396:	1a5b      	subs	r3, r3, r1
 8010398:	42ab      	cmp	r3, r5
 801039a:	dcf2      	bgt.n	8010382 <_printf_i+0x21e>
 801039c:	e7eb      	b.n	8010376 <_printf_i+0x212>
 801039e:	2500      	movs	r5, #0
 80103a0:	f104 0619 	add.w	r6, r4, #25
 80103a4:	e7f5      	b.n	8010392 <_printf_i+0x22e>
 80103a6:	bf00      	nop
 80103a8:	0801078d 	.word	0x0801078d
 80103ac:	0801079e 	.word	0x0801079e

080103b0 <memmove>:
 80103b0:	4288      	cmp	r0, r1
 80103b2:	b510      	push	{r4, lr}
 80103b4:	eb01 0402 	add.w	r4, r1, r2
 80103b8:	d902      	bls.n	80103c0 <memmove+0x10>
 80103ba:	4284      	cmp	r4, r0
 80103bc:	4623      	mov	r3, r4
 80103be:	d807      	bhi.n	80103d0 <memmove+0x20>
 80103c0:	1e43      	subs	r3, r0, #1
 80103c2:	42a1      	cmp	r1, r4
 80103c4:	d008      	beq.n	80103d8 <memmove+0x28>
 80103c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103ce:	e7f8      	b.n	80103c2 <memmove+0x12>
 80103d0:	4402      	add	r2, r0
 80103d2:	4601      	mov	r1, r0
 80103d4:	428a      	cmp	r2, r1
 80103d6:	d100      	bne.n	80103da <memmove+0x2a>
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103e2:	e7f7      	b.n	80103d4 <memmove+0x24>

080103e4 <_free_r>:
 80103e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103e6:	2900      	cmp	r1, #0
 80103e8:	d044      	beq.n	8010474 <_free_r+0x90>
 80103ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103ee:	9001      	str	r0, [sp, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f1a1 0404 	sub.w	r4, r1, #4
 80103f6:	bfb8      	it	lt
 80103f8:	18e4      	addlt	r4, r4, r3
 80103fa:	f000 f913 	bl	8010624 <__malloc_lock>
 80103fe:	4a1e      	ldr	r2, [pc, #120]	; (8010478 <_free_r+0x94>)
 8010400:	9801      	ldr	r0, [sp, #4]
 8010402:	6813      	ldr	r3, [r2, #0]
 8010404:	b933      	cbnz	r3, 8010414 <_free_r+0x30>
 8010406:	6063      	str	r3, [r4, #4]
 8010408:	6014      	str	r4, [r2, #0]
 801040a:	b003      	add	sp, #12
 801040c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010410:	f000 b90e 	b.w	8010630 <__malloc_unlock>
 8010414:	42a3      	cmp	r3, r4
 8010416:	d908      	bls.n	801042a <_free_r+0x46>
 8010418:	6825      	ldr	r5, [r4, #0]
 801041a:	1961      	adds	r1, r4, r5
 801041c:	428b      	cmp	r3, r1
 801041e:	bf01      	itttt	eq
 8010420:	6819      	ldreq	r1, [r3, #0]
 8010422:	685b      	ldreq	r3, [r3, #4]
 8010424:	1949      	addeq	r1, r1, r5
 8010426:	6021      	streq	r1, [r4, #0]
 8010428:	e7ed      	b.n	8010406 <_free_r+0x22>
 801042a:	461a      	mov	r2, r3
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	b10b      	cbz	r3, 8010434 <_free_r+0x50>
 8010430:	42a3      	cmp	r3, r4
 8010432:	d9fa      	bls.n	801042a <_free_r+0x46>
 8010434:	6811      	ldr	r1, [r2, #0]
 8010436:	1855      	adds	r5, r2, r1
 8010438:	42a5      	cmp	r5, r4
 801043a:	d10b      	bne.n	8010454 <_free_r+0x70>
 801043c:	6824      	ldr	r4, [r4, #0]
 801043e:	4421      	add	r1, r4
 8010440:	1854      	adds	r4, r2, r1
 8010442:	42a3      	cmp	r3, r4
 8010444:	6011      	str	r1, [r2, #0]
 8010446:	d1e0      	bne.n	801040a <_free_r+0x26>
 8010448:	681c      	ldr	r4, [r3, #0]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	6053      	str	r3, [r2, #4]
 801044e:	4421      	add	r1, r4
 8010450:	6011      	str	r1, [r2, #0]
 8010452:	e7da      	b.n	801040a <_free_r+0x26>
 8010454:	d902      	bls.n	801045c <_free_r+0x78>
 8010456:	230c      	movs	r3, #12
 8010458:	6003      	str	r3, [r0, #0]
 801045a:	e7d6      	b.n	801040a <_free_r+0x26>
 801045c:	6825      	ldr	r5, [r4, #0]
 801045e:	1961      	adds	r1, r4, r5
 8010460:	428b      	cmp	r3, r1
 8010462:	bf04      	itt	eq
 8010464:	6819      	ldreq	r1, [r3, #0]
 8010466:	685b      	ldreq	r3, [r3, #4]
 8010468:	6063      	str	r3, [r4, #4]
 801046a:	bf04      	itt	eq
 801046c:	1949      	addeq	r1, r1, r5
 801046e:	6021      	streq	r1, [r4, #0]
 8010470:	6054      	str	r4, [r2, #4]
 8010472:	e7ca      	b.n	801040a <_free_r+0x26>
 8010474:	b003      	add	sp, #12
 8010476:	bd30      	pop	{r4, r5, pc}
 8010478:	2000242c 	.word	0x2000242c

0801047c <sbrk_aligned>:
 801047c:	b570      	push	{r4, r5, r6, lr}
 801047e:	4e0e      	ldr	r6, [pc, #56]	; (80104b8 <sbrk_aligned+0x3c>)
 8010480:	460c      	mov	r4, r1
 8010482:	6831      	ldr	r1, [r6, #0]
 8010484:	4605      	mov	r5, r0
 8010486:	b911      	cbnz	r1, 801048e <sbrk_aligned+0x12>
 8010488:	f000 f8bc 	bl	8010604 <_sbrk_r>
 801048c:	6030      	str	r0, [r6, #0]
 801048e:	4621      	mov	r1, r4
 8010490:	4628      	mov	r0, r5
 8010492:	f000 f8b7 	bl	8010604 <_sbrk_r>
 8010496:	1c43      	adds	r3, r0, #1
 8010498:	d00a      	beq.n	80104b0 <sbrk_aligned+0x34>
 801049a:	1cc4      	adds	r4, r0, #3
 801049c:	f024 0403 	bic.w	r4, r4, #3
 80104a0:	42a0      	cmp	r0, r4
 80104a2:	d007      	beq.n	80104b4 <sbrk_aligned+0x38>
 80104a4:	1a21      	subs	r1, r4, r0
 80104a6:	4628      	mov	r0, r5
 80104a8:	f000 f8ac 	bl	8010604 <_sbrk_r>
 80104ac:	3001      	adds	r0, #1
 80104ae:	d101      	bne.n	80104b4 <sbrk_aligned+0x38>
 80104b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80104b4:	4620      	mov	r0, r4
 80104b6:	bd70      	pop	{r4, r5, r6, pc}
 80104b8:	20002430 	.word	0x20002430

080104bc <_malloc_r>:
 80104bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c0:	1ccd      	adds	r5, r1, #3
 80104c2:	f025 0503 	bic.w	r5, r5, #3
 80104c6:	3508      	adds	r5, #8
 80104c8:	2d0c      	cmp	r5, #12
 80104ca:	bf38      	it	cc
 80104cc:	250c      	movcc	r5, #12
 80104ce:	2d00      	cmp	r5, #0
 80104d0:	4607      	mov	r7, r0
 80104d2:	db01      	blt.n	80104d8 <_malloc_r+0x1c>
 80104d4:	42a9      	cmp	r1, r5
 80104d6:	d905      	bls.n	80104e4 <_malloc_r+0x28>
 80104d8:	230c      	movs	r3, #12
 80104da:	603b      	str	r3, [r7, #0]
 80104dc:	2600      	movs	r6, #0
 80104de:	4630      	mov	r0, r6
 80104e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104e4:	4e2e      	ldr	r6, [pc, #184]	; (80105a0 <_malloc_r+0xe4>)
 80104e6:	f000 f89d 	bl	8010624 <__malloc_lock>
 80104ea:	6833      	ldr	r3, [r6, #0]
 80104ec:	461c      	mov	r4, r3
 80104ee:	bb34      	cbnz	r4, 801053e <_malloc_r+0x82>
 80104f0:	4629      	mov	r1, r5
 80104f2:	4638      	mov	r0, r7
 80104f4:	f7ff ffc2 	bl	801047c <sbrk_aligned>
 80104f8:	1c43      	adds	r3, r0, #1
 80104fa:	4604      	mov	r4, r0
 80104fc:	d14d      	bne.n	801059a <_malloc_r+0xde>
 80104fe:	6834      	ldr	r4, [r6, #0]
 8010500:	4626      	mov	r6, r4
 8010502:	2e00      	cmp	r6, #0
 8010504:	d140      	bne.n	8010588 <_malloc_r+0xcc>
 8010506:	6823      	ldr	r3, [r4, #0]
 8010508:	4631      	mov	r1, r6
 801050a:	4638      	mov	r0, r7
 801050c:	eb04 0803 	add.w	r8, r4, r3
 8010510:	f000 f878 	bl	8010604 <_sbrk_r>
 8010514:	4580      	cmp	r8, r0
 8010516:	d13a      	bne.n	801058e <_malloc_r+0xd2>
 8010518:	6821      	ldr	r1, [r4, #0]
 801051a:	3503      	adds	r5, #3
 801051c:	1a6d      	subs	r5, r5, r1
 801051e:	f025 0503 	bic.w	r5, r5, #3
 8010522:	3508      	adds	r5, #8
 8010524:	2d0c      	cmp	r5, #12
 8010526:	bf38      	it	cc
 8010528:	250c      	movcc	r5, #12
 801052a:	4629      	mov	r1, r5
 801052c:	4638      	mov	r0, r7
 801052e:	f7ff ffa5 	bl	801047c <sbrk_aligned>
 8010532:	3001      	adds	r0, #1
 8010534:	d02b      	beq.n	801058e <_malloc_r+0xd2>
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	442b      	add	r3, r5
 801053a:	6023      	str	r3, [r4, #0]
 801053c:	e00e      	b.n	801055c <_malloc_r+0xa0>
 801053e:	6822      	ldr	r2, [r4, #0]
 8010540:	1b52      	subs	r2, r2, r5
 8010542:	d41e      	bmi.n	8010582 <_malloc_r+0xc6>
 8010544:	2a0b      	cmp	r2, #11
 8010546:	d916      	bls.n	8010576 <_malloc_r+0xba>
 8010548:	1961      	adds	r1, r4, r5
 801054a:	42a3      	cmp	r3, r4
 801054c:	6025      	str	r5, [r4, #0]
 801054e:	bf18      	it	ne
 8010550:	6059      	strne	r1, [r3, #4]
 8010552:	6863      	ldr	r3, [r4, #4]
 8010554:	bf08      	it	eq
 8010556:	6031      	streq	r1, [r6, #0]
 8010558:	5162      	str	r2, [r4, r5]
 801055a:	604b      	str	r3, [r1, #4]
 801055c:	4638      	mov	r0, r7
 801055e:	f104 060b 	add.w	r6, r4, #11
 8010562:	f000 f865 	bl	8010630 <__malloc_unlock>
 8010566:	f026 0607 	bic.w	r6, r6, #7
 801056a:	1d23      	adds	r3, r4, #4
 801056c:	1af2      	subs	r2, r6, r3
 801056e:	d0b6      	beq.n	80104de <_malloc_r+0x22>
 8010570:	1b9b      	subs	r3, r3, r6
 8010572:	50a3      	str	r3, [r4, r2]
 8010574:	e7b3      	b.n	80104de <_malloc_r+0x22>
 8010576:	6862      	ldr	r2, [r4, #4]
 8010578:	42a3      	cmp	r3, r4
 801057a:	bf0c      	ite	eq
 801057c:	6032      	streq	r2, [r6, #0]
 801057e:	605a      	strne	r2, [r3, #4]
 8010580:	e7ec      	b.n	801055c <_malloc_r+0xa0>
 8010582:	4623      	mov	r3, r4
 8010584:	6864      	ldr	r4, [r4, #4]
 8010586:	e7b2      	b.n	80104ee <_malloc_r+0x32>
 8010588:	4634      	mov	r4, r6
 801058a:	6876      	ldr	r6, [r6, #4]
 801058c:	e7b9      	b.n	8010502 <_malloc_r+0x46>
 801058e:	230c      	movs	r3, #12
 8010590:	603b      	str	r3, [r7, #0]
 8010592:	4638      	mov	r0, r7
 8010594:	f000 f84c 	bl	8010630 <__malloc_unlock>
 8010598:	e7a1      	b.n	80104de <_malloc_r+0x22>
 801059a:	6025      	str	r5, [r4, #0]
 801059c:	e7de      	b.n	801055c <_malloc_r+0xa0>
 801059e:	bf00      	nop
 80105a0:	2000242c 	.word	0x2000242c

080105a4 <_realloc_r>:
 80105a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a8:	4680      	mov	r8, r0
 80105aa:	4614      	mov	r4, r2
 80105ac:	460e      	mov	r6, r1
 80105ae:	b921      	cbnz	r1, 80105ba <_realloc_r+0x16>
 80105b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105b4:	4611      	mov	r1, r2
 80105b6:	f7ff bf81 	b.w	80104bc <_malloc_r>
 80105ba:	b92a      	cbnz	r2, 80105c8 <_realloc_r+0x24>
 80105bc:	f7ff ff12 	bl	80103e4 <_free_r>
 80105c0:	4625      	mov	r5, r4
 80105c2:	4628      	mov	r0, r5
 80105c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c8:	f000 f838 	bl	801063c <_malloc_usable_size_r>
 80105cc:	4284      	cmp	r4, r0
 80105ce:	4607      	mov	r7, r0
 80105d0:	d802      	bhi.n	80105d8 <_realloc_r+0x34>
 80105d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80105d6:	d812      	bhi.n	80105fe <_realloc_r+0x5a>
 80105d8:	4621      	mov	r1, r4
 80105da:	4640      	mov	r0, r8
 80105dc:	f7ff ff6e 	bl	80104bc <_malloc_r>
 80105e0:	4605      	mov	r5, r0
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d0ed      	beq.n	80105c2 <_realloc_r+0x1e>
 80105e6:	42bc      	cmp	r4, r7
 80105e8:	4622      	mov	r2, r4
 80105ea:	4631      	mov	r1, r6
 80105ec:	bf28      	it	cs
 80105ee:	463a      	movcs	r2, r7
 80105f0:	f7ff fbb0 	bl	800fd54 <memcpy>
 80105f4:	4631      	mov	r1, r6
 80105f6:	4640      	mov	r0, r8
 80105f8:	f7ff fef4 	bl	80103e4 <_free_r>
 80105fc:	e7e1      	b.n	80105c2 <_realloc_r+0x1e>
 80105fe:	4635      	mov	r5, r6
 8010600:	e7df      	b.n	80105c2 <_realloc_r+0x1e>
	...

08010604 <_sbrk_r>:
 8010604:	b538      	push	{r3, r4, r5, lr}
 8010606:	4d06      	ldr	r5, [pc, #24]	; (8010620 <_sbrk_r+0x1c>)
 8010608:	2300      	movs	r3, #0
 801060a:	4604      	mov	r4, r0
 801060c:	4608      	mov	r0, r1
 801060e:	602b      	str	r3, [r5, #0]
 8010610:	f7f0 fe2e 	bl	8001270 <_sbrk>
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	d102      	bne.n	801061e <_sbrk_r+0x1a>
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	b103      	cbz	r3, 801061e <_sbrk_r+0x1a>
 801061c:	6023      	str	r3, [r4, #0]
 801061e:	bd38      	pop	{r3, r4, r5, pc}
 8010620:	20002434 	.word	0x20002434

08010624 <__malloc_lock>:
 8010624:	4801      	ldr	r0, [pc, #4]	; (801062c <__malloc_lock+0x8>)
 8010626:	f000 b811 	b.w	801064c <__retarget_lock_acquire_recursive>
 801062a:	bf00      	nop
 801062c:	20002438 	.word	0x20002438

08010630 <__malloc_unlock>:
 8010630:	4801      	ldr	r0, [pc, #4]	; (8010638 <__malloc_unlock+0x8>)
 8010632:	f000 b80c 	b.w	801064e <__retarget_lock_release_recursive>
 8010636:	bf00      	nop
 8010638:	20002438 	.word	0x20002438

0801063c <_malloc_usable_size_r>:
 801063c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010640:	1f18      	subs	r0, r3, #4
 8010642:	2b00      	cmp	r3, #0
 8010644:	bfbc      	itt	lt
 8010646:	580b      	ldrlt	r3, [r1, r0]
 8010648:	18c0      	addlt	r0, r0, r3
 801064a:	4770      	bx	lr

0801064c <__retarget_lock_acquire_recursive>:
 801064c:	4770      	bx	lr

0801064e <__retarget_lock_release_recursive>:
 801064e:	4770      	bx	lr

08010650 <_init>:
 8010650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010652:	bf00      	nop
 8010654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010656:	bc08      	pop	{r3}
 8010658:	469e      	mov	lr, r3
 801065a:	4770      	bx	lr

0801065c <_fini>:
 801065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065e:	bf00      	nop
 8010660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010662:	bc08      	pop	{r3}
 8010664:	469e      	mov	lr, r3
 8010666:	4770      	bx	lr
