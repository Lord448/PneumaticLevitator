
DaughterBoardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a21c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001f3d0  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802978c  0802978c  00040098  2**0
                  CONTENTS
  4 .ARM          00000008  0802978c  0802978c  0003978c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029794  08029794  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029794  08029794  00039794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029798  08029798  00039798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0802979c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000098  08029834  00040098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08029834  00040520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a9c  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003336  00000000  00000000  00058b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0005bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0005d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190d7  00000000  00000000  0005e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183f3  00000000  00000000  000779a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094649  00000000  00000000  0008fd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001243e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006034  00000000  00000000  00124434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3a4 	.word	0x0800a3a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	0800a3a4 	.word	0x0800a3a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
bool ParsedFlag = true;
MenuStage menuStage = sInitialAnim;
Input input;

int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  HAL_Init();
 8000598:	f002 f816 	bl	80025c8 <HAL_Init>
  SystemClock_Config();
 800059c:	f000 f96c 	bl	8000878 <SystemClock_Config>
  MX_GPIO_Init();
 80005a0:	f000 fb44 	bl	8000c2c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 fad6 	bl	8000b54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 faa8 	bl	8000afc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005ac:	f000 f9cc 	bl	8000948 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005b0:	f000 fa00 	bl	80009b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b4:	f000 fa56 	bl	8000a64 <MX_TIM2_Init>

  LCD_init();
 80005b8:	f001 fa28 	bl	8001a0c <LCD_init>

#ifdef LCD_TEST
  LCD_Test();
 80005bc:	f001 face 	bl	8001b5c <LCD_Test>
  UG_FillScreen(0);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f005 f9ef 	bl	80059a4 <UG_FillScreen>
  UG_Update();
 80005c6:	f007 f819 	bl	80075fc <UG_Update>
#endif

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005ca:	213c      	movs	r1, #60	; 0x3c
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <main+0x64>)
 80005ce:	f004 f946 	bl	800485e <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80005d2:	480a      	ldr	r0, [pc, #40]	; (80005fc <main+0x68>)
 80005d4:	f004 f80c 	bl	80045f0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  vTaskEncoder();
 80005d8:	f000 f818 	bl	800060c <vTaskEncoder>
	  vTaskUI(&menuStage, &input);
 80005dc:	4908      	ldr	r1, [pc, #32]	; (8000600 <main+0x6c>)
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x70>)
 80005e0:	f009 f9d2 	bl	8009988 <vTaskUI>
	  ParsedFlag = true;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <main+0x74>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
	  while(ParsedFlag);
 80005ea:	bf00      	nop
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <main+0x74>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1fb      	bne.n	80005ec <main+0x58>
	  vTaskEncoder();
 80005f4:	e7f0      	b.n	80005d8 <main+0x44>
 80005f6:	bf00      	nop
 80005f8:	2000016c 	.word	0x2000016c
 80005fc:	200001b4 	.word	0x200001b4
 8000600:	200002a9 	.word	0x200002a9
 8000604:	200002a8 	.word	0x200002a8
 8000608:	20000000 	.word	0x20000000

0800060c <vTaskEncoder>:
  }
}

static void vTaskEncoder(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
	static uint16_t EncoderCount = TimerMiddleValue;
	static uint16_t EncoderPastCount = TimerMiddleValue;
	char Buffer[32] = "";
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

	EncoderGetVal(EncoderCount);
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <vTaskEncoder+0x74>)
 800062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062c:	089b      	lsrs	r3, r3, #2
 800062e:	b29b      	uxth	r3, r3
 8000630:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000634:	3b1f      	subs	r3, #31
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <vTaskEncoder+0x78>)
 800063a:	801a      	strh	r2, [r3, #0]
	if(EncoderCount != EncoderPastCount)
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <vTaskEncoder+0x78>)
 800063e:	881a      	ldrh	r2, [r3, #0]
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <vTaskEncoder+0x7c>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	d012      	beq.n	800066e <vTaskEncoder+0x62>
	{
		sprintf(Buffer, "Encoder: %d!", (int)EncoderCount);
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <vTaskEncoder+0x78>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	463b      	mov	r3, r7
 8000650:	490e      	ldr	r1, [pc, #56]	; (800068c <vTaskEncoder+0x80>)
 8000652:	4618      	mov	r0, r3
 8000654:	f009 fb28 	bl	8009ca8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, strlen(Buffer), 100);
 8000658:	463b      	mov	r3, r7
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdc0 	bl	80001e0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	4639      	mov	r1, r7
 8000666:	2364      	movs	r3, #100	; 0x64
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <vTaskEncoder+0x84>)
 800066a:	f004 fd8c 	bl	8005186 <HAL_UART_Transmit>
	}
	EncoderPastCount = EncoderCount;
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <vTaskEncoder+0x78>)
 8000670:	881a      	ldrh	r2, [r3, #0]
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <vTaskEncoder+0x7c>)
 8000674:	801a      	strh	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40010000 	.word	0x40010000
 8000684:	20000002 	.word	0x20000002
 8000688:	20000004 	.word	0x20000004
 800068c:	0800a3c0 	.word	0x0800a3c0
 8000690:	200001fc 	.word	0x200001fc

08000694 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Ok_IT_Pin)
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d110      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0x32>
	{
		char *Buffer = "OK!";
 80006a4:	4b51      	ldr	r3, [pc, #324]	; (80007ec <HAL_GPIO_EXTI_Callback+0x158>)
 80006a6:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 3, 100);
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	2203      	movs	r2, #3
 80006ac:	68b9      	ldr	r1, [r7, #8]
 80006ae:	4850      	ldr	r0, [pc, #320]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80006b0:	f004 fd69 	bl	8005186 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	484e      	ldr	r0, [pc, #312]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x160>)
 80006ba:	f002 febc 	bl	8003436 <HAL_GPIO_TogglePin>
		input = iOk;
 80006be:	4b4e      	ldr	r3, [pc, #312]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x164>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
		char *Buffer = "EncoderSW!";
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 10, 100);
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		input = iEncoder;
	}
}
 80006c4:	e08e      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Up_IT_Pin)
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	2b08      	cmp	r3, #8
 80006ca:	d110      	bne.n	80006ee <HAL_GPIO_EXTI_Callback+0x5a>
		char *Buffer = "Up!";
 80006cc:	4b4b      	ldr	r3, [pc, #300]	; (80007fc <HAL_GPIO_EXTI_Callback+0x168>)
 80006ce:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 3, 100);
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	2203      	movs	r2, #3
 80006d4:	68f9      	ldr	r1, [r7, #12]
 80006d6:	4846      	ldr	r0, [pc, #280]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80006d8:	f004 fd55 	bl	8005186 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	4844      	ldr	r0, [pc, #272]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x160>)
 80006e2:	f002 fea8 	bl	8003436 <HAL_GPIO_TogglePin>
		input = iUp;
 80006e6:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x164>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	e07a      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Down_IT_Pin)
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006f4:	d110      	bne.n	8000718 <HAL_GPIO_EXTI_Callback+0x84>
		char *Buffer = "Down!";
 80006f6:	4b42      	ldr	r3, [pc, #264]	; (8000800 <HAL_GPIO_EXTI_Callback+0x16c>)
 80006f8:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 5, 100);
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2205      	movs	r2, #5
 80006fe:	6939      	ldr	r1, [r7, #16]
 8000700:	483b      	ldr	r0, [pc, #236]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000702:	f004 fd40 	bl	8005186 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070a:	483a      	ldr	r0, [pc, #232]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x160>)
 800070c:	f002 fe93 	bl	8003436 <HAL_GPIO_TogglePin>
		input = iDown;
 8000710:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000712:	2202      	movs	r2, #2
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	e065      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Right_IT_Pin)
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	2b04      	cmp	r3, #4
 800071c:	d110      	bne.n	8000740 <HAL_GPIO_EXTI_Callback+0xac>
		char *Buffer = "Right!";
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <HAL_GPIO_EXTI_Callback+0x170>)
 8000720:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 6, 100);
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	2206      	movs	r2, #6
 8000726:	6979      	ldr	r1, [r7, #20]
 8000728:	4831      	ldr	r0, [pc, #196]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800072a:	f004 fd2c 	bl	8005186 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800072e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000732:	4830      	ldr	r0, [pc, #192]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x160>)
 8000734:	f002 fe7f 	bl	8003436 <HAL_GPIO_TogglePin>
		input = iRight;
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x164>)
 800073a:	2204      	movs	r2, #4
 800073c:	701a      	strb	r2, [r3, #0]
}
 800073e:	e051      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Left_IT_Pin)
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d110      	bne.n	8000768 <HAL_GPIO_EXTI_Callback+0xd4>
		char *Buffer = "Left!";
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <HAL_GPIO_EXTI_Callback+0x174>)
 8000748:	61bb      	str	r3, [r7, #24]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 5, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2205      	movs	r2, #5
 800074e:	69b9      	ldr	r1, [r7, #24]
 8000750:	4827      	ldr	r0, [pc, #156]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000752:	f004 fd18 	bl	8005186 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4826      	ldr	r0, [pc, #152]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x160>)
 800075c:	f002 fe6b 	bl	8003436 <HAL_GPIO_TogglePin>
		input = iLeft;
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000762:	2203      	movs	r2, #3
 8000764:	701a      	strb	r2, [r3, #0]
}
 8000766:	e03d      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Menu_IT_Pin)
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800076e:	d110      	bne.n	8000792 <HAL_GPIO_EXTI_Callback+0xfe>
		char *Buffer = "Menu!";
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <HAL_GPIO_EXTI_Callback+0x178>)
 8000772:	61fb      	str	r3, [r7, #28]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 5, 100);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	2205      	movs	r2, #5
 8000778:	69f9      	ldr	r1, [r7, #28]
 800077a:	481d      	ldr	r0, [pc, #116]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800077c:	f004 fd03 	bl	8005186 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000784:	481b      	ldr	r0, [pc, #108]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x160>)
 8000786:	f002 fe56 	bl	8003436 <HAL_GPIO_TogglePin>
		input = iMenu;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x164>)
 800078c:	2205      	movs	r2, #5
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	e028      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Reset_IT_Pin)
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000798:	d110      	bne.n	80007bc <HAL_GPIO_EXTI_Callback+0x128>
		char *Buffer = "Reset!";
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <HAL_GPIO_EXTI_Callback+0x17c>)
 800079c:	623b      	str	r3, [r7, #32]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 6, 100);
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	2206      	movs	r2, #6
 80007a2:	6a39      	ldr	r1, [r7, #32]
 80007a4:	4812      	ldr	r0, [pc, #72]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80007a6:	f004 fcee 	bl	8005186 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x160>)
 80007b0:	f002 fe41 	bl	8003436 <HAL_GPIO_TogglePin>
		input = iReset;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x164>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	701a      	strb	r2, [r3, #0]
}
 80007ba:	e013      	b.n	80007e4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == EncoderSW_Pin)
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007c2:	d10f      	bne.n	80007e4 <HAL_GPIO_EXTI_Callback+0x150>
		char *Buffer = "EncoderSW!";
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <HAL_GPIO_EXTI_Callback+0x180>)
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 10, 100);
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	220a      	movs	r2, #10
 80007cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007ce:	4808      	ldr	r0, [pc, #32]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80007d0:	f004 fcd9 	bl	8005186 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x160>)
 80007da:	f002 fe2c 	bl	8003436 <HAL_GPIO_TogglePin>
		input = iEncoder;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x164>)
 80007e0:	2206      	movs	r2, #6
 80007e2:	701a      	strb	r2, [r3, #0]
}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	0800a3d0 	.word	0x0800a3d0
 80007f0:	200001fc 	.word	0x200001fc
 80007f4:	40020800 	.word	0x40020800
 80007f8:	200002a9 	.word	0x200002a9
 80007fc:	0800a3d4 	.word	0x0800a3d4
 8000800:	0800a3d8 	.word	0x0800a3d8
 8000804:	0800a3e0 	.word	0x0800a3e0
 8000808:	0800a3e8 	.word	0x0800a3e8
 800080c:	0800a3f0 	.word	0x0800a3f0
 8000810:	0800a3f8 	.word	0x0800a3f8
 8000814:	0800a400 	.word	0x0800a400

08000818 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	ParsedFlag = false;
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000000 	.word	0x20000000

08000838 <TransferComplete>:

static void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  transferCompleteDetected = 1;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <TransferComplete+0x1c>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	200002a4 	.word	0x200002a4

08000858 <TransferError>:

static void TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  transferErrorDetected = 1;
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <TransferError+0x1c>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	200002a0 	.word	0x200002a0

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f009 f900 	bl	8009a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <SystemClock_Config+0xc8>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a26      	ldr	r2, [pc, #152]	; (8000940 <SystemClock_Config+0xc8>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <SystemClock_Config+0xc8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <SystemClock_Config+0xcc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a20      	ldr	r2, [pc, #128]	; (8000944 <SystemClock_Config+0xcc>)
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80008e8:	230c      	movs	r3, #12
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fde9 	bl	80034d4 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000908:	f000 fa6c 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2103      	movs	r1, #3
 8000928:	4618      	mov	r0, r3
 800092a:	f003 f84b 	bl	80039c4 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000934:	f000 fa56 	bl	8000de4 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3750      	adds	r7, #80	; 0x50
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_SPI1_Init+0x64>)
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_SPI1_Init+0x64>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_SPI1_Init+0x64>)
 8000968:	2202      	movs	r2, #2
 800096a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_SPI1_Init+0x64>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_SPI1_Init+0x64>)
 800097c:	2208      	movs	r2, #8
 800097e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_SPI1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_SPI1_Init+0x64>)
 8000994:	220a      	movs	r2, #10
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_SPI1_Init+0x64>)
 800099a:	f003 f9f3 	bl	8003d84 <HAL_SPI_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a4:	f000 fa1e 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000b4 	.word	0x200000b4
 80009b0:	40013000 	.word	0x40013000

080009b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2224      	movs	r2, #36	; 0x24
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 f862 	bl	8009a8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <MX_TIM1_Init+0xac>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a14:	2301      	movs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_TIM1_Init+0xa8>)
 8000a28:	f003 fe73 	bl	8004712 <HAL_TIM_Encoder_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a32:	f000 f9d7 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_TIM1_Init+0xa8>)
 8000a44:	f004 fad0 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a4e:	f000 f9c9 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000016c 	.word	0x2000016c
 8000a60:	40010000 	.word	0x40010000

08000a64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a96:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000aaa:	f003 fd51 	bl	8004550 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ab4:	f000 f996 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000ac6:	f004 f860 	bl	8004b8a <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f000 f988 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000ae2:	f004 fa81 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f000 f97a 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001b4 	.word	0x200001b4

08000afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <MX_USART1_UART_Init+0x54>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b08:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b14:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x50>)
 8000b38:	f004 fad8 	bl	80050ec <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000b42:	f000 f94f 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001fc 	.word	0x200001fc
 8000b50:	40011000 	.word	0x40011000

08000b54 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <MX_DMA_Init+0xc4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a2d      	ldr	r2, [pc, #180]	; (8000c18 <MX_DMA_Init+0xc4>)
 8000b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <MX_DMA_Init+0xc4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000b78:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <MX_DMA_Init+0xcc>)
 8000b7a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b96:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b9e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000bce:	f001 fec3 	bl	8002958 <HAL_DMA_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8000bd8:	f000 f904 	bl	8000de4 <Error_Handler>
  }

  /* USER CODE BEGIN DMA_Init */
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 8000bdc:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <MX_DMA_Init+0xd0>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	480e      	ldr	r0, [pc, #56]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000be2:	f002 f949 	bl	8002e78 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <MX_DMA_Init+0xd4>)
 8000be8:	2104      	movs	r1, #4
 8000bea:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MX_DMA_Init+0xc8>)
 8000bec:	f002 f944 	bl	8002e78 <HAL_DMA_RegisterCallback>
  /* USER CODE END DMA_Init */

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2038      	movs	r0, #56	; 0x38
 8000bf6:	f001 fe78 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bfa:	2038      	movs	r0, #56	; 0x38
 8000bfc:	f001 fe91 	bl	8002922 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	203a      	movs	r0, #58	; 0x3a
 8000c06:	f001 fe70 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c0a:	203a      	movs	r0, #58	; 0x3a
 8000c0c:	f001 fe89 	bl	8002922 <HAL_NVIC_EnableIRQ>

}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	20000240 	.word	0x20000240
 8000c20:	40026410 	.word	0x40026410
 8000c24:	08000839 	.word	0x08000839
 8000c28:	08000859 	.word	0x08000859

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b63      	ldr	r3, [pc, #396]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a62      	ldr	r2, [pc, #392]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b60      	ldr	r3, [pc, #384]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a5b      	ldr	r2, [pc, #364]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a54      	ldr	r2, [pc, #336]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a4d      	ldr	r2, [pc, #308]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <MX_GPIO_Init+0x1a8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4847      	ldr	r0, [pc, #284]	; (8000dd8 <MX_GPIO_Init+0x1ac>)
 8000cba:	f002 fba3 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2150      	movs	r1, #80	; 0x50
 8000cc2:	4846      	ldr	r0, [pc, #280]	; (8000ddc <MX_GPIO_Init+0x1b0>)
 8000cc4:	f002 fb9e 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2103      	movs	r1, #3
 8000ccc:	4844      	ldr	r0, [pc, #272]	; (8000de0 <MX_GPIO_Init+0x1b4>)
 8000cce:	f002 fb99 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	483b      	ldr	r0, [pc, #236]	; (8000dd8 <MX_GPIO_Init+0x1ac>)
 8000cec:	f002 fa06 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_IT_Pin */
  GPIO_InitStruct.Pin = Down_IT_Pin;
 8000cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Down_IT_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4834      	ldr	r0, [pc, #208]	; (8000dd8 <MX_GPIO_Init+0x1ac>)
 8000d08:	f002 f9f8 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IT_Pin Ok_IT_Pin Right_IT_Pin Up_IT_Pin
                           EncoderSW_Pin Menu_IT_Pin */
  GPIO_InitStruct.Pin = Left_IT_Pin|Ok_IT_Pin|Right_IT_Pin|Up_IT_Pin
 8000d0c:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000d10:	617b      	str	r3, [r7, #20]
                          |EncoderSW_Pin|Menu_IT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	482e      	ldr	r0, [pc, #184]	; (8000ddc <MX_GPIO_Init+0x1b0>)
 8000d24:	f002 f9ea 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8000d28:	2350      	movs	r3, #80	; 0x50
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4827      	ldr	r0, [pc, #156]	; (8000ddc <MX_GPIO_Init+0x1b0>)
 8000d40:	f002 f9dc 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_BLK_Pin;
 8000d44:	2303      	movs	r3, #3
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4821      	ldr	r0, [pc, #132]	; (8000de0 <MX_GPIO_Init+0x1b4>)
 8000d5c:	f002 f9ce 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_IT_Pin */
  GPIO_InitStruct.Pin = Reset_IT_Pin;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reset_IT_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	481a      	ldr	r0, [pc, #104]	; (8000de0 <MX_GPIO_Init+0x1b4>)
 8000d78:	f002 f9c0 	bl	80030fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2006      	movs	r0, #6
 8000d82:	f001 fdb2 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d86:	2006      	movs	r0, #6
 8000d88:	f001 fdcb 	bl	8002922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2007      	movs	r0, #7
 8000d92:	f001 fdaa 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d96:	2007      	movs	r0, #7
 8000d98:	f001 fdc3 	bl	8002922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2008      	movs	r0, #8
 8000da2:	f001 fda2 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000da6:	2008      	movs	r0, #8
 8000da8:	f001 fdbb 	bl	8002922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2009      	movs	r0, #9
 8000db2:	f001 fd9a 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000db6:	2009      	movs	r0, #9
 8000db8:	f001 fdb3 	bl	8002922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2028      	movs	r0, #40	; 0x28
 8000dc2:	f001 fd92 	bl	80028ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc6:	2028      	movs	r0, #40	; 0x28
 8000dc8:	f001 fdab 	bl	8002922 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dea:	b672      	cpsid	i
}
 8000dec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <Error_Handler+0x2c>)
 8000df4:	f002 fb1f 	bl	8003436 <HAL_GPIO_TogglePin>
	  for(uint32_t i = 0; i < 500000; i++);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	e002      	b.n	8000e04 <Error_Handler+0x20>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3301      	adds	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <Error_Handler+0x30>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d9f8      	bls.n	8000dfe <Error_Handler+0x1a>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e0c:	e7ef      	b.n	8000dee <Error_Handler+0xa>
 8000e0e:	bf00      	nop
 8000e10:	40020800 	.word	0x40020800
 8000e14:	0007a11f 	.word	0x0007a11f

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a30      	ldr	r2, [pc, #192]	; (8000f48 <HAL_SPI_MspInit+0xe0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d15a      	bne.n	8000f40 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <HAL_SPI_MspInit+0xe4>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a2e      	ldr	r2, [pc, #184]	; (8000f4c <HAL_SPI_MspInit+0xe4>)
 8000e94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <HAL_SPI_MspInit+0xe4>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <HAL_SPI_MspInit+0xe4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <HAL_SPI_MspInit+0xe4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <HAL_SPI_MspInit+0xe4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDO_Pin;
 8000ec2:	23a0      	movs	r3, #160	; 0xa0
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <HAL_SPI_MspInit+0xe8>)
 8000ede:	f002 f90d 	bl	80030fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <HAL_SPI_MspInit+0xf0>)
 8000ee6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000eea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000ef2:	2240      	movs	r2, #64	; 0x40
 8000ef4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f02:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000f18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f1c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000f26:	f001 fd17 	bl	8002958 <HAL_DMA_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000f30:	f7ff ff58 	bl	8000de4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000f38:	649a      	str	r2, [r3, #72]	; 0x48
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_SPI_MspInit+0xec>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40013000 	.word	0x40013000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	2000010c 	.word	0x2000010c
 8000f58:	40026440 	.word	0x40026440

08000f5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d12c      	bne.n	8000fd8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8000fb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000fd4:	f002 f892 	bl	80030fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ffc:	d115      	bne.n	800102a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_TIM_Base_MspInit+0x48>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <HAL_TIM_Base_MspInit+0x48>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_TIM_Base_MspInit+0x48>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	201c      	movs	r0, #28
 8001020:	f001 fc63 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001024:	201c      	movs	r0, #28
 8001026:	f001 fc7c 	bl	8002922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a28      	ldr	r2, [pc, #160]	; (80010f8 <HAL_UART_MspInit+0xc0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d14a      	bne.n	80010f0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_UART_MspInit+0xc4>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_UART_MspInit+0xc4>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_UART_MspInit+0xc4>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_UART_MspInit+0xc4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_UART_MspInit+0xc4>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_UART_MspInit+0xc4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_UART_MspInit+0xc4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a18      	ldr	r2, [pc, #96]	; (80010fc <HAL_UART_MspInit+0xc4>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_UART_MspInit+0xc4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c0:	2307      	movs	r3, #7
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <HAL_UART_MspInit+0xc8>)
 80010cc:	f002 f816 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010d0:	2308      	movs	r3, #8
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010e0:	2307      	movs	r3, #7
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <HAL_UART_MspInit+0xcc>)
 80010ec:	f002 f806 	bl	80030fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40011000 	.word	0x40011000
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020400 	.word	0x40020400

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8001112:	f7ff fe67 	bl	8000de4 <Error_Handler>
 8001116:	e7fc      	b.n	8001112 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f001 fa88 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_IT_Pin);
 8001164:	2001      	movs	r0, #1
 8001166:	f002 f981 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ok_IT_Pin);
 8001172:	2002      	movs	r0, #2
 8001174:	f002 f97a 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_IT_Pin);
 8001180:	2004      	movs	r0, #4
 8001182:	f002 f973 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_IT_Pin);
 800118e:	2008      	movs	r0, #8
 8001190:	f002 f96c 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <TIM2_IRQHandler+0x10>)
 800119e:	f003 fbec 	bl	800497a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001b4 	.word	0x200001b4

080011ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderSW_Pin);
 80011b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011b4:	f002 f95a 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Menu_IT_Pin);
 80011b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011bc:	f002 f956 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Reset_IT_Pin);
 80011c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011c4:	f002 f952 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Down_IT_Pin);
 80011c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011cc:	f002 f94e 	bl	800346c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA2_Stream0_IRQHandler+0x10>)
 80011da:	f001 fcc3 	bl	8002b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000240 	.word	0x20000240

080011e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DMA2_Stream2_IRQHandler+0x10>)
 80011ee:	f001 fcb9 	bl	8002b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000010c 	.word	0x2000010c

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f008 fbfc 	bl	8009a28 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20020000 	.word	0x20020000
 800125c:	00000400 	.word	0x00000400
 8001260:	200002ac 	.word	0x200002ac
 8001264:	20000520 	.word	0x20000520

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b6:	f7ff ffd7 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f008 fbbb 	bl	8009a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff f969 	bl	8000594 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80012d0:	0802979c 	.word	0x0802979c
  ldr r2, =_sbss
 80012d4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80012d8:	20000520 	.word	0x20000520

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <setSPI_Size+0x84>)
 80012ec:	f993 3000 	ldrsb.w	r3, [r3]
 80012f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d02e      	beq.n	8001356 <setSPI_Size+0x76>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <setSPI_Size+0x88>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <setSPI_Size+0x88>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001306:	601a      	str	r2, [r3, #0]

    config.spi_sz=size;
 8001308:	4a16      	ldr	r2, [pc, #88]	; (8001364 <setSPI_Size+0x84>)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d10c      	bne.n	8001330 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <setSPI_Size+0x88>)
 8001318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800131c:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <setSPI_Size+0x88>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <setSPI_Size+0x88>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <setSPI_Size+0x66>
    }
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <setSPI_Size+0x88>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <setSPI_Size+0x88>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <setSPI_Size+0x88>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001344:	601a      	str	r2, [r3, #0]
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <setSPI_Size+0x88>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <setSPI_Size+0x88>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001354:	601a      	str	r2, [r3, #0]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c
 8001368:	200000b4 	.word	0x200000b4

0800136c <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	460a      	mov	r2, r1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	4613      	mov	r3, r2
 800137a:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 800137c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffad 	bl	80012e0 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <setDMAMemMode+0x120>)
 8001388:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800138c:	461a      	mov	r2, r3
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	429a      	cmp	r2, r3
 8001392:	d106      	bne.n	80013a2 <setDMAMemMode+0x36>
 8001394:	4b3d      	ldr	r3, [pc, #244]	; (800148c <setDMAMemMode+0x120>)
 8001396:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800139a:	461a      	mov	r2, r3
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d06f      	beq.n	8001482 <setDMAMemMode+0x116>
    config.dma_sz =size;
 80013a2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <setDMAMemMode+0x120>)
 80013a8:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80013aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <setDMAMemMode+0x120>)
 80013b0:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <setDMAMemMode+0x124>)
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b35      	ldr	r3, [pc, #212]	; (8001490 <setDMAMemMode+0x124>)
 80013bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 80013c6:	bf00      	nop
 80013c8:	4b31      	ldr	r3, [pc, #196]	; (8001490 <setDMAMemMode+0x124>)
 80013ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f7      	bne.n	80013c8 <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10f      	bne.n	80013fe <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <setDMAMemMode+0x124>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e6:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <setDMAMemMode+0x124>)
 80013ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <setDMAMemMode+0x124>)
 80013f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e00d      	b.n	800141a <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <setDMAMemMode+0x124>)
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <setDMAMemMode+0x124>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <setDMAMemMode+0x124>)
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001418:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d116      	bne.n	800144e <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <setDMAMemMode+0x124>)
 8001422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001428:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <setDMAMemMode+0x124>)
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001432:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <setDMAMemMode+0x124>)
 8001436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <setDMAMemMode+0x124>)
 8001442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e011      	b.n	8001472 <setDMAMemMode+0x106>
                                                   (1<<DMA_CCR_PSIZE_Pos | 1<<DMA_CCR_MSIZE_Pos);
#endif

    }
    else{
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <setDMAMemMode+0x124>)
 8001450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <setDMAMemMode+0x124>)
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <setDMAMemMode+0x124>)
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <setDMAMemMode+0x124>)
 8001468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001470:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <setDMAMemMode+0x124>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <setDMAMemMode+0x124>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001480:	601a      	str	r2, [r3, #0]
  }
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000000c 	.word	0x2000000c
 8001490:	200000b4 	.word	0x200000b4

08001494 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ff1d 	bl	80012e0 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <LCD_WriteCommand+0x5c>)
 80014a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ac:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <LCD_WriteCommand+0x60>)
 80014b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014b4:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ba:	2201      	movs	r2, #1
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <LCD_WriteCommand+0x64>)
 80014c0:	f002 fce9 	bl	8003e96 <HAL_SPI_Transmit>
  if(argc){
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <LCD_WriteCommand+0x4e>
    LCD_PIN(LCD_DC,SET);
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <LCD_WriteCommand+0x5c>)
 80014cc:	2210      	movs	r2, #16
 80014ce:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	1c59      	adds	r1, r3, #1
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014dc:	4806      	ldr	r0, [pc, #24]	; (80014f8 <LCD_WriteCommand+0x64>)
 80014de:	f002 fcda 	bl	8003e96 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <LCD_WriteCommand+0x60>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	619a      	str	r2, [r3, #24]
#endif
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	200000b4 	.word	0x200000b4

080014fc <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <LCD_WriteData+0xc4>)
 8001508:	2210      	movs	r2, #16
 800150a:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <LCD_WriteData+0xc8>)
 800150e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001512:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8001514:	e049      	b.n	80015aa <LCD_WriteData+0xae>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151c:	4293      	cmp	r3, r2
 800151e:	bf28      	it	cs
 8001520:	4613      	movcs	r3, r2
 8001522:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d924      	bls.n	8001574 <LCD_WriteData+0x78>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	461a      	mov	r2, r3
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4825      	ldr	r0, [pc, #148]	; (80015c8 <LCD_WriteData+0xcc>)
 8001532:	f002 fded 	bl	8004110 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!= HAL_DMA_STATE_READY);
 8001536:	bf00      	nop
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <LCD_WriteData+0xcc>)
 800153a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153c:	4618      	mov	r0, r3
 800153e:	f001 fcef 	bl	8002f20 <HAL_DMA_GetState>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	d1f7      	bne.n	8001538 <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <LCD_WriteData+0xd0>)
 800154a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d127      	bne.n	80015a2 <LCD_WriteData+0xa6>
        if(config.dma_sz==mode_16bit)
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <LCD_WriteData+0xd0>)
 8001554:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d104      	bne.n	8001566 <LCD_WriteData+0x6a>
          buff += chunk_size;
 800155c:	89fb      	ldrh	r3, [r7, #14]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	e01d      	b.n	80015a2 <LCD_WriteData+0xa6>
        else
          buff += chunk_size*2;
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	e016      	b.n	80015a2 <LCD_WriteData+0xa6>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001574:	89fa      	ldrh	r2, [r7, #14]
 8001576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4812      	ldr	r0, [pc, #72]	; (80015c8 <LCD_WriteData+0xcc>)
 800157e:	f002 fc8a 	bl	8003e96 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <LCD_WriteData+0xd0>)
 8001584:	f993 3000 	ldrsb.w	r3, [r3]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d104      	bne.n	8001596 <LCD_WriteData+0x9a>
        buff += chunk_size;
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	e005      	b.n	80015a2 <LCD_WriteData+0xa6>
      else
        buff += chunk_size*2;
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	607b      	str	r3, [r7, #4]

    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1b2      	bne.n	8001516 <LCD_WriteData+0x1a>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <LCD_WriteData+0xc8>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	619a      	str	r2, [r3, #24]
#endif
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	200000b4 	.word	0x200000b4
 80015cc:	2000000c 	.word	0x2000000c

080015d0 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4604      	mov	r4, r0
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4623      	mov	r3, r4
 80015e0:	80fb      	strh	r3, [r7, #6]
 80015e2:	4603      	mov	r3, r0
 80015e4:	80bb      	strh	r3, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	807b      	strh	r3, [r7, #2]
 80015ea:	4613      	mov	r3, r2
 80015ec:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	847b      	strh	r3, [r7, #34]	; 0x22
 80015fa:	883b      	ldrh	r3, [r7, #0]
 80015fc:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80015fe:	232a      	movs	r3, #42	; 0x2a
 8001600:	763b      	strb	r3, [r7, #24]
 8001602:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001606:	121b      	asrs	r3, r3, #8
 8001608:	b21b      	sxth	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	767b      	strb	r3, [r7, #25]
 800160e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001610:	b2db      	uxtb	r3, r3
 8001612:	76bb      	strb	r3, [r7, #26]
 8001614:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001618:	121b      	asrs	r3, r3, #8
 800161a:	b21b      	sxth	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	76fb      	strb	r3, [r7, #27]
 8001620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001622:	b2db      	uxtb	r3, r3
 8001624:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	2104      	movs	r1, #4
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff31 	bl	8001494 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001632:	232b      	movs	r3, #43	; 0x2b
 8001634:	743b      	strb	r3, [r7, #16]
 8001636:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800163a:	121b      	asrs	r3, r3, #8
 800163c:	b21b      	sxth	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	747b      	strb	r3, [r7, #17]
 8001642:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001644:	b2db      	uxtb	r3, r3
 8001646:	74bb      	strb	r3, [r7, #18]
 8001648:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800164c:	121b      	asrs	r3, r3, #8
 800164e:	b21b      	sxth	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	74fb      	strb	r3, [r7, #19]
 8001654:	8c3b      	ldrh	r3, [r7, #32]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	2104      	movs	r1, #4
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff17 	bl	8001494 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001666:	232c      	movs	r3, #44	; 0x2c
 8001668:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff0f 	bl	8001494 <LCD_WriteCommand>
  }
}
 8001676:	bf00      	nop
 8001678:	372c      	adds	r7, #44	; 0x2c
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
	...

08001680 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
 800168a:	460b      	mov	r3, r1
 800168c:	80bb      	strh	r3, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db30      	blt.n	80016fc <LCD_DrawPixel+0x7c>
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	2bef      	cmp	r3, #239	; 0xef
 80016a0:	dc2c      	bgt.n	80016fc <LCD_DrawPixel+0x7c>
 80016a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db28      	blt.n	80016fc <LCD_DrawPixel+0x7c>
     (y < 0) || (y > LCD_HEIGHT-1))
 80016aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ae:	2bef      	cmp	r3, #239	; 0xef
 80016b0:	dc24      	bgt.n	80016fc <LCD_DrawPixel+0x7c>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	733b      	strb	r3, [r7, #12]
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80016c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016d2:	f7ff ff7d 	bl	80015d0 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <LCD_DrawPixel+0x84>)
 80016d8:	2210      	movs	r2, #16
 80016da:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <LCD_DrawPixel+0x88>)
 80016de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016e2:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80016e4:	f107 010c 	add.w	r1, r7, #12
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ec:	2202      	movs	r2, #2
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <LCD_DrawPixel+0x8c>)
 80016f0:	f002 fbd1 	bl	8003e96 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <LCD_DrawPixel+0x88>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	619a      	str	r2, [r3, #24]
 80016fa:	e000      	b.n	80016fe <LCD_DrawPixel+0x7e>
    return;
 80016fc:	bf00      	nop
#endif
}
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400
 800170c:	200000b4 	.word	0x200000b4

08001710 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001710:	b580      	push	{r7, lr}
 8001712:	b0a4      	sub	sp, #144	; 0x90
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d905      	bls.n	800172e <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8001722:	1cbb      	adds	r3, r7, #2
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fee8 	bl	80014fc <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 800172c:	e02f      	b.n	800178e <LCD_FillPixels+0x7e>
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 800172e:	2300      	movs	r3, #0
 8001730:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001734:	e00c      	b.n	8001750 <LCD_FillPixels+0x40>
      fill[t]=color;
 8001736:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	3390      	adds	r3, #144	; 0x90
 8001740:	443b      	add	r3, r7
 8001742:	f823 2c84 	strh.w	r2, [r3, #-132]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 8001746:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800174a:	3301      	adds	r3, #1
 800174c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001750:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b40      	cmp	r3, #64	; 0x40
 8001758:	bf28      	it	cs
 800175a:	2340      	movcs	r3, #64	; 0x40
 800175c:	429a      	cmp	r2, r3
 800175e:	d3ea      	bcc.n	8001736 <LCD_FillPixels+0x26>
    while(pixels){                                                                    // Send 64 pixel blocks
 8001760:	e012      	b.n	8001788 <LCD_FillPixels+0x78>
      uint8_t sz = (pixels<64 ? pixels : 64);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b40      	cmp	r3, #64	; 0x40
 8001766:	bf28      	it	cs
 8001768:	2340      	movcs	r3, #64	; 0x40
 800176a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
      LCD_WriteData((uint8_t*)fill, sz);
 800176e:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff febf 	bl	80014fc <LCD_WriteData>
      pixels-=sz;
 800177e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                    // Send 64 pixel blocks
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1e9      	bne.n	8001762 <LCD_FillPixels+0x52>
}
 800178e:	bf00      	nop
 8001790:	3790      	adds	r7, #144	; 0x90
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	4603      	mov	r3, r0
 80017ac:	80bb      	strh	r3, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017be:	d105      	bne.n	80017cc <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80017c0:	2100      	movs	r1, #0
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff fdd2 	bl	800136c <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e011      	b.n	80017f0 <LCD_FillArea+0x58>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80017cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017d0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017dc:	f7ff fef8 	bl	80015d0 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit); //setDMAMemMode(mem_fixed, mode_16bit);
 80017e0:	2101      	movs	r1, #1
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff fdc2 	bl	800136c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <LCD_FillArea+0x60>)
 80017ea:	2210      	movs	r2, #16
 80017ec:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 80017ee:	4b03      	ldr	r3, [pc, #12]	; (80017fc <LCD_FillArea+0x64>)
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	40020000 	.word	0x40020000
 80017fc:	08001711 	.word	0x08001711

08001800 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	80fb      	strh	r3, [r7, #6]
 8001812:	4603      	mov	r3, r0
 8001814:	80bb      	strh	r3, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]
 800181a:	4613      	mov	r3, r2
 800181c:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	3301      	adds	r3, #1
 8001826:	4619      	mov	r1, r3
 8001828:	883a      	ldrh	r2, [r7, #0]
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	3301      	adds	r3, #1
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001836:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800183a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800183e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001842:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001846:	f7ff fec3 	bl	80015d0 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 800184a:	2101      	movs	r1, #1
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff fd8d 	bl	800136c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8001852:	8c3b      	ldrh	r3, [r7, #32]
 8001854:	4619      	mov	r1, r3
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff ff5a 	bl	8001710 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); //setDMAMemMode(mem_increase, mode_16bit);
 800185c:	2100      	movs	r1, #0
 800185e:	2001      	movs	r0, #1
 8001860:	f7ff fd84 	bl	800136c <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}

0800186e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800186e:	b590      	push	{r4, r7, lr}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	603a      	str	r2, [r7, #0]
 8001878:	80fb      	strh	r3, [r7, #6]
 800187a:	460b      	mov	r3, r1
 800187c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	88db      	ldrh	r3, [r3, #6]
 8001888:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	2bef      	cmp	r3, #239	; 0xef
 800188e:	d837      	bhi.n	8001900 <LCD_DrawImage+0x92>
 8001890:	88bb      	ldrh	r3, [r7, #4]
 8001892:	2bef      	cmp	r3, #239	; 0xef
 8001894:	d834      	bhi.n	8001900 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	4413      	add	r3, r2
 800189c:	2bf0      	cmp	r3, #240	; 0xf0
 800189e:	dc31      	bgt.n	8001904 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80018a0:	88ba      	ldrh	r2, [r7, #4]
 80018a2:	89bb      	ldrh	r3, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	2bf0      	cmp	r3, #240	; 0xf0
 80018a8:	dc2e      	bgt.n	8001908 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	7a1b      	ldrb	r3, [r3, #8]
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d12c      	bne.n	800190c <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80018b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018ba:	88fa      	ldrh	r2, [r7, #6]
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b21c      	sxth	r4, r3
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	89bb      	ldrh	r3, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	4622      	mov	r2, r4
 80018d8:	f7ff fe7a 	bl	80015d0 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);  //setDMAMemMode(mem_increase, mode_16bit);                                                          // Set SPI and DMA to 16 bit, enable memory increase
 80018dc:	2101      	movs	r1, #1
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff fd44 	bl	800136c <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	89fb      	ldrh	r3, [r7, #14]
 80018ea:	89ba      	ldrh	r2, [r7, #12]
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff fe03 	bl	80014fc <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80018f6:	2100      	movs	r1, #0
 80018f8:	2001      	movs	r0, #1
 80018fa:	f7ff fd37 	bl	800136c <setDMAMemMode>
 80018fe:	e006      	b.n	800190e <LCD_DrawImage+0xa0>
    return;
 8001900:	bf00      	nop
 8001902:	e004      	b.n	800190e <LCD_DrawImage+0xa0>
    return;
 8001904:	bf00      	nop
 8001906:	e002      	b.n	800190e <LCD_DrawImage+0xa0>
    return;
 8001908:	bf00      	nop
 800190a:	e000      	b.n	800190e <LCD_DrawImage+0xa0>
    return;
 800190c:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b087      	sub	sp, #28
 8001918:	af02      	add	r7, sp, #8
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	80fb      	strh	r3, [r7, #6]
 8001926:	4603      	mov	r3, r0
 8001928:	80bb      	strh	r3, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]
 800192e:	4613      	mov	r3, r2
 8001930:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	429a      	cmp	r2, r3
 8001938:	d10a      	bne.n	8001950 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 800193a:	88ba      	ldrh	r2, [r7, #4]
 800193c:	883b      	ldrh	r3, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d918      	bls.n	8001974 <LCD_DrawLine+0x60>
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	81bb      	strh	r3, [r7, #12]
 8001946:	883b      	ldrh	r3, [r7, #0]
 8001948:	80bb      	strh	r3, [r7, #4]
 800194a:	89bb      	ldrh	r3, [r7, #12]
 800194c:	803b      	strh	r3, [r7, #0]
 800194e:	e011      	b.n	8001974 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001950:	88ba      	ldrh	r2, [r7, #4]
 8001952:	883b      	ldrh	r3, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d10a      	bne.n	800196e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	429a      	cmp	r2, r3
 800195e:	d909      	bls.n	8001974 <LCD_DrawLine+0x60>
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	81fb      	strh	r3, [r7, #14]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	80fb      	strh	r3, [r7, #6]
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	e002      	b.n	8001974 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001972:	e009      	b.n	8001988 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001974:	883c      	ldrh	r4, [r7, #0]
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	88b9      	ldrh	r1, [r7, #4]
 800197a:	88f8      	ldrh	r0, [r7, #6]
 800197c:	8c3b      	ldrh	r3, [r7, #32]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	4623      	mov	r3, r4
 8001982:	f7ff ff3d 	bl	8001800 <LCD_Fill>
  return UG_RESULT_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60ba      	str	r2, [r7, #8]
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4603      	mov	r3, r0
 800199c:	81fb      	strh	r3, [r7, #14]
 800199e:	460b      	mov	r3, r1
 80019a0:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f003 ffee 	bl	8005984 <UG_FontSelect>
  UG_SetForecolor(color);
 80019a8:	8b3b      	ldrh	r3, [r7, #24]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fe32 	bl	8006614 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80019b0:	8bbb      	ldrh	r3, [r7, #28]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fe40 	bl	8006638 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80019b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019bc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 fd9e 	bl	8006504 <UG_PutString>
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <LCD_setPower+0x14>
 80019e0:	2329      	movs	r3, #41	; 0x29
 80019e2:	e000      	b.n	80019e6 <LCD_setPower+0x16>
 80019e4:	2328      	movs	r3, #40	; 0x28
 80019e6:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fd50 	bl	8001494 <LCD_WriteCommand>
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <LCD_Update>:

static void LCD_Update(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001a00:	2100      	movs	r1, #0
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff fcb2 	bl	800136c <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <LCD_init+0xa8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <LCD_init+0xac>)
 8001a1a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a1e:	619a      	str	r2, [r3, #24]
  HAL_Delay(25);
 8001a20:	2019      	movs	r0, #25
 8001a22:	f000 fe43 	bl	80026ac <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <LCD_init+0xac>)
 8001a28:	2240      	movs	r2, #64	; 0x40
 8001a2a:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001a2c:	20c8      	movs	r0, #200	; 0xc8
 8001a2e:	f000 fe3d 	bl	80026ac <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001a32:	4922      	ldr	r1, [pc, #136]	; (8001abc <LCD_init+0xb0>)
 8001a34:	4822      	ldr	r0, [pc, #136]	; (8001ac0 <LCD_init+0xb4>)
 8001a36:	f003 ff33 	bl	80058a0 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001a3a:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <LCD_init+0xb8>)
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f005 fdbb 	bl	80075b8 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001a42:	4921      	ldr	r1, [pc, #132]	; (8001ac8 <LCD_init+0xbc>)
 8001a44:	2001      	movs	r0, #1
 8001a46:	f005 fdb7 	bl	80075b8 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001a4a:	4920      	ldr	r1, [pc, #128]	; (8001acc <LCD_init+0xc0>)
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f005 fdb3 	bl	80075b8 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001a52:	491f      	ldr	r1, [pc, #124]	; (8001ad0 <LCD_init+0xc4>)
 8001a54:	2003      	movs	r0, #3
 8001a56:	f005 fdaf 	bl	80075b8 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f004 fe1a 	bl	8006694 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f004 fe2b 	bl	80066bc <UG_FontSetVSpace>

  //LCD_SetRotation(LCD_ROTATION_CMD);
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001a66:	2300      	movs	r3, #0
 8001a68:	80fb      	strh	r3, [r7, #6]
 8001a6a:	e013      	b.n	8001a94 <LCD_init+0x88>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <LCD_init+0xc8>)
 8001a72:	441a      	add	r2, r3
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4917      	ldr	r1, [pc, #92]	; (8001ad4 <LCD_init+0xc8>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f7ff fd09 	bl	8001494 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <LCD_init+0xc8>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3302      	adds	r3, #2
 8001a92:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	2b4b      	cmp	r3, #75	; 0x4b
 8001a98:	d9e8      	bls.n	8001a6c <LCD_init+0x60>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f003 ff82 	bl	80059a4 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff ff95 	bl	80019d0 <LCD_setPower>
  UG_Update();
 8001aa6:	f005 fda9 	bl	80075fc <UG_Update>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	20000010 	.word	0x20000010
 8001ac0:	200002d0 	.word	0x200002d0
 8001ac4:	08001915 	.word	0x08001915
 8001ac8:	08001801 	.word	0x08001801
 8001acc:	08001799 	.word	0x08001799
 8001ad0:	0800186f 	.word	0x0800186f
 8001ad4:	0800a52c 	.word	0x0800a52c

08001ad8 <clearTime>:


#define DEFAULT_FONT FONT_6X8

static uint32_t draw_time=0;
static void clearTime(void){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  draw_time=HAL_GetTick();
 8001adc:	f000 fdda 	bl	8002694 <HAL_GetTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a02      	ldr	r2, [pc, #8]	; (8001aec <clearTime+0x14>)
 8001ae4:	6013      	str	r3, [r2, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000032c 	.word	0x2000032c

08001af0 <printTime>:
static void printTime(void){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
  char str[8];
  uint8_t t = UG_FontGetTransparency();
 8001af6:	f004 fe07 	bl	8006708 <UG_FontGetTransparency>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
  sprintf(str,"%lums",HAL_GetTick()-draw_time);
 8001afe:	f000 fdc9 	bl	8002694 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <printTime+0x60>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	1ad2      	subs	r2, r2, r3
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4911      	ldr	r1, [pc, #68]	; (8001b54 <printTime+0x64>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f008 f8ca 	bl	8009ca8 <siprintf>
  UG_FontSelect(DEFAULT_FONT);
 8001b14:	4810      	ldr	r0, [pc, #64]	; (8001b58 <printTime+0x68>)
 8001b16:	f003 ff35 	bl	8005984 <UG_FontSelect>
  UG_SetForecolor(C_YELLOW);
 8001b1a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001b1e:	f004 fd79 	bl	8006614 <UG_SetForecolor>
  UG_SetBackcolor(C_BLACK);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f004 fd88 	bl	8006638 <UG_SetBackcolor>
  UG_FontSetTransparency(0);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f004 fddb 	bl	80066e4 <UG_FontSetTransparency>
  UG_PutString(10, 15, str);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	461a      	mov	r2, r3
 8001b32:	210f      	movs	r1, #15
 8001b34:	200a      	movs	r0, #10
 8001b36:	f004 fce5 	bl	8006504 <UG_PutString>
  UG_FontSetTransparency(t);
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fdd1 	bl	80066e4 <UG_FontSetTransparency>
  UG_Update();
 8001b42:	f005 fd5b 	bl	80075fc <UG_Update>
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000032c 	.word	0x2000032c
 8001b54:	0800a40c 	.word	0x0800a40c
 8001b58:	0801ce74 	.word	0x0801ce74

08001b5c <LCD_Test>:
static UG_BUTTON button_1;
static UG_TEXTBOX textbox_1;
static UG_OBJECT obj_buff_wnd_1[MAX_OBJECTS];
static UG_PROGRESS pgb;
void LCD_Test(void)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b091      	sub	sp, #68	; 0x44
 8001b60:	af04      	add	r7, sp, #16

  int16_t x=40,y=40,rad=20,count=0;
 8001b62:	2328      	movs	r3, #40	; 0x28
 8001b64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b66:	2328      	movs	r3, #40	; 0x28
 8001b68:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001b6a:	2314      	movs	r3, #20
 8001b6c:	827b      	strh	r3, [r7, #18]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	857b      	strh	r3, [r7, #42]	; 0x2a
  int8_t xadd=2,yadd=2,dstep=2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001b7e:	2302      	movs	r3, #2
 8001b80:	747b      	strb	r3, [r7, #17]
  uint8_t r=0,g=0,b=0, t;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t start, show;

  UG_FontSetTransparency(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f004 fda5 	bl	80066e4 <UG_FontSetTransparency>

  UG_FillScreen(C_BLACK);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f003 ff02 	bl	80059a4 <UG_FillScreen>

  LCD_PutStr(50, 56, "STARTING TEST", DEFAULT_FONT, C_GREEN, C_BLACK);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4bc0      	ldr	r3, [pc, #768]	; (8001eac <LCD_Test+0x350>)
 8001bac:	4ac0      	ldr	r2, [pc, #768]	; (8001eb0 <LCD_Test+0x354>)
 8001bae:	2138      	movs	r1, #56	; 0x38
 8001bb0:	2032      	movs	r0, #50	; 0x32
 8001bb2:	f7ff feed 	bl	8001990 <LCD_PutStr>
  HAL_Delay(500);
 8001bb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bba:	f000 fd77 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f003 fef0 	bl	80059a4 <UG_FillScreen>
  show=start=HAL_GetTick();
 8001bc4:	f000 fd66 	bl	8002694 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	623b      	str	r3, [r7, #32]
  t = UG_FontGetTransparency();
 8001bce:	f004 fd9b 	bl	8006708 <UG_FontGetTransparency>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	72fb      	strb	r3, [r7, #11]
  while(HAL_GetTick()-start<4000){
 8001bd6:	e0a8      	b.n	8001d2a <LCD_Test+0x1ce>
    UG_FillFrame(x-rad, y-rad, x+rad, y+rad, C_BLACK);
 8001bd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001bda:	8a7b      	ldrh	r3, [r7, #18]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b218      	sxth	r0, r3
 8001be2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001be4:	8a7b      	ldrh	r3, [r7, #18]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	b219      	sxth	r1, r3
 8001bec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001bee:	8a7b      	ldrh	r3, [r7, #18]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b21c      	sxth	r4, r3
 8001bf6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001bf8:	8a7b      	ldrh	r3, [r7, #18]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	2200      	movs	r2, #0
 8001c02:	9200      	str	r2, [sp, #0]
 8001c04:	4622      	mov	r2, r4
 8001c06:	f003 fef1 	bl	80059ec <UG_FillFrame>
    x+=xadd;
 8001c0a:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c12:	4413      	add	r3, r2
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	85fb      	strh	r3, [r7, #46]	; 0x2e
    y+=yadd;
 8001c18:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c20:	4413      	add	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x-rad<1){
 8001c26:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	dc0a      	bgt.n	8001c4a <LCD_Test+0xee>
      xadd=dstep;
 8001c34:	7c7b      	ldrb	r3, [r7, #17]
 8001c36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001c3a:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c42:	4413      	add	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c48:	e012      	b.n	8001c70 <LCD_Test+0x114>
    }
    else if(x+rad>(LCD_WIDTH-1)){
 8001c4a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001c4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c52:	4413      	add	r3, r2
 8001c54:	2bef      	cmp	r3, #239	; 0xef
 8001c56:	dd0b      	ble.n	8001c70 <LCD_Test+0x114>
      xadd=-dstep;
 8001c58:	7c7b      	ldrb	r3, [r7, #17]
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001c62:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if(y-rad<1){
 8001c70:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001c74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc0a      	bgt.n	8001c94 <LCD_Test+0x138>
      yadd=dstep;
 8001c7e:	7c7b      	ldrb	r3, [r7, #17]
 8001c80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001c84:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001c92:	e012      	b.n	8001cba <LCD_Test+0x15e>
    }
    else if(y+rad>(LCD_HEIGHT-1)){
 8001c94:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	2bef      	cmp	r3, #239	; 0xef
 8001ca0:	dd0b      	ble.n	8001cba <LCD_Test+0x15e>
      yadd=-dstep;
 8001ca2:	7c7b      	ldrb	r3, [r7, #17]
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001cac:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    UG_FillCircle(x, y, rad, C_WHITE);
 8001cba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cbe:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001cc2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cca:	f004 f8bf 	bl	8005e4c <UG_FillCircle>
    UG_FontSetTransparency(0);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f004 fd08 	bl	80066e4 <UG_FontSetTransparency>
    LCD_PutStr(0, 0, str, DEFAULT_FONT, C_RED, C_BLACK);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4b73      	ldr	r3, [pc, #460]	; (8001eac <LCD_Test+0x350>)
 8001ce0:	4a74      	ldr	r2, [pc, #464]	; (8001eb4 <LCD_Test+0x358>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff fe53 	bl	8001990 <LCD_PutStr>
    UG_FontSetTransparency(t);
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f004 fcf9 	bl	80066e4 <UG_FontSetTransparency>
    UG_Update();
 8001cf2:	f005 fc83 	bl	80075fc <UG_Update>
    count++;
 8001cf6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(HAL_GetTick()-show>999){
 8001d02:	f000 fcc7 	bl	8002694 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d10:	d30b      	bcc.n	8001d2a <LCD_Test+0x1ce>
      show=HAL_GetTick();
 8001d12:	f000 fcbf 	bl	8002694 <HAL_GetTick>
 8001d16:	6238      	str	r0, [r7, #32]
      sprintf(str,"%dFPS",count);
 8001d18:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4966      	ldr	r1, [pc, #408]	; (8001eb8 <LCD_Test+0x35c>)
 8001d20:	4864      	ldr	r0, [pc, #400]	; (8001eb4 <LCD_Test+0x358>)
 8001d22:	f007 ffc1 	bl	8009ca8 <siprintf>
      count=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	857b      	strh	r3, [r7, #42]	; 0x2a
  while(HAL_GetTick()-start<4000){
 8001d2a:	f000 fcb3 	bl	8002694 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001d38:	f4ff af4e 	bcc.w	8001bd8 <LCD_Test+0x7c>
    }
  }

  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d42:	e019      	b.n	8001d78 <LCD_Test+0x21c>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d48:	02db      	lsls	r3, r3, #11
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d50:	015b      	lsls	r3, r3, #5
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fe1d 	bl	80059a4 <UG_FillScreen>
    UG_Update();
 8001d6a:	f005 fc47 	bl	80075fc <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d72:	3301      	adds	r3, #1
 8001d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d7c:	2b1f      	cmp	r3, #31
 8001d7e:	d9e1      	bls.n	8001d44 <LCD_Test+0x1e8>
  }
  r=31;
 8001d80:	231f      	movs	r3, #31
 8001d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d8c:	e019      	b.n	8001dc2 <LCD_Test+0x266>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d92:	02db      	lsls	r3, r3, #11
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d9a:	015b      	lsls	r3, r3, #5
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fdf8 	bl	80059a4 <UG_FillScreen>
    UG_Update();
 8001db4:	f005 fc22 	bl	80075fc <UG_Update>
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8001dc8:	d9e1      	bls.n	8001d8e <LCD_Test+0x232>
  }
  g=63;
 8001dca:	233f      	movs	r3, #63	; 0x3f
 8001dcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001dd0:	231c      	movs	r3, #28
 8001dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dd6:	e019      	b.n	8001e0c <LCD_Test+0x2b0>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ddc:	02db      	lsls	r3, r3, #11
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fdd3 	bl	80059a4 <UG_FillScreen>
    UG_Update();
 8001dfe:	f005 fbfd 	bl	80075fc <UG_Update>
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e1      	bne.n	8001dd8 <LCD_Test+0x27c>
  }
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001e14:	2300      	movs	r3, #0
 8001e16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e1a:	e019      	b.n	8001e50 <LCD_Test+0x2f4>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e20:	02db      	lsls	r3, r3, #11
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e28:	015b      	lsls	r3, r3, #5
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4313      	orrs	r3, r2
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fdb1 	bl	80059a4 <UG_FillScreen>
    UG_Update();
 8001e42:	f005 fbdb 	bl	80075fc <UG_Update>
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001e46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e54:	2b1f      	cmp	r3, #31
 8001e56:	d9e1      	bls.n	8001e1c <LCD_Test+0x2c0>
  }
  b=31;
 8001e58:	231f      	movs	r3, #31
 8001e5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001e5e:	2338      	movs	r3, #56	; 0x38
 8001e60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e64:	e019      	b.n	8001e9a <LCD_Test+0x33e>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6a:	02db      	lsls	r3, r3, #11
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e72:	015b      	lsls	r3, r3, #5
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fd8c 	bl	80059a4 <UG_FillScreen>
    UG_Update();
 8001e8c:	f005 fbb6 	bl	80075fc <UG_Update>
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001e90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e94:	3b02      	subs	r3, #2
 8001e96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1e1      	bne.n	8001e66 <LCD_Test+0x30a>
  }
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ea8:	e022      	b.n	8001ef0 <LCD_Test+0x394>
 8001eaa:	bf00      	nop
 8001eac:	0801ce74 	.word	0x0801ce74
 8001eb0:	0800a414 	.word	0x0800a414
 8001eb4:	200002b0 	.word	0x200002b0
 8001eb8:	0800a424 	.word	0x0800a424
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec0:	02db      	lsls	r3, r3, #11
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ec8:	015b      	lsls	r3, r3, #5
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fd61 	bl	80059a4 <UG_FillScreen>
    UG_Update();
 8001ee2:	f005 fb8b 	bl	80075fc <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eea:	3301      	adds	r3, #1
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef4:	2b1f      	cmp	r3, #31
 8001ef6:	d9e1      	bls.n	8001ebc <LCD_Test+0x360>
  }
  r=31;
 8001ef8:	231f      	movs	r3, #31
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f04:	e019      	b.n	8001f3a <LCD_Test+0x3de>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f0a:	02db      	lsls	r3, r3, #11
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f12:	015b      	lsls	r3, r3, #5
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fd3c 	bl	80059a4 <UG_FillScreen>
    UG_Update();
 8001f2c:	f005 fb66 	bl	80075fc <UG_Update>
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001f30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f34:	3302      	adds	r3, #2
 8001f36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001f40:	d9e1      	bls.n	8001f06 <LCD_Test+0x3aa>
  }


  UG_FillScreen(C_RED);
 8001f42:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f46:	f003 fd2d 	bl	80059a4 <UG_FillScreen>
  UG_Update();
 8001f4a:	f005 fb57 	bl	80075fc <UG_Update>
  HAL_Delay(500);
 8001f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f52:	f000 fbab 	bl	80026ac <HAL_Delay>
  UG_FillScreen(C_GREEN);
 8001f56:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001f5a:	f003 fd23 	bl	80059a4 <UG_FillScreen>
  UG_Update();
 8001f5e:	f005 fb4d 	bl	80075fc <UG_Update>
  HAL_Delay(500);
 8001f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f66:	f000 fba1 	bl	80026ac <HAL_Delay>
  UG_FillScreen(C_BLUE);
 8001f6a:	201f      	movs	r0, #31
 8001f6c:	f003 fd1a 	bl	80059a4 <UG_FillScreen>
  UG_Update();
 8001f70:	f005 fb44 	bl	80075fc <UG_Update>
  HAL_Delay(500);
 8001f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f78:	f000 fb98 	bl	80026ac <HAL_Delay>
  UG_FillScreen(C_BLACK);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f003 fd11 	bl	80059a4 <UG_FillScreen>
  UG_Update();
 8001f82:	f005 fb3b 	bl	80075fc <UG_Update>
  HAL_Delay(500);
 8001f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f8a:	f000 fb8f 	bl	80026ac <HAL_Delay>

  clearTime();
 8001f8e:	f7ff fda3 	bl	8001ad8 <clearTime>
  UG_FillScreen(C_WHITE);
 8001f92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f96:	f003 fd05 	bl	80059a4 <UG_FillScreen>
  printTime();
 8001f9a:	f7ff fda9 	bl	8001af0 <printTime>
  LCD_PutStr(10, 5, "Fill", DEFAULT_FONT, C_RED, C_WHITE);
 8001f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4bd6      	ldr	r3, [pc, #856]	; (8002304 <LCD_Test+0x7a8>)
 8001fac:	4ad6      	ldr	r2, [pc, #856]	; (8002308 <LCD_Test+0x7ac>)
 8001fae:	2105      	movs	r1, #5
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	f7ff fced 	bl	8001990 <LCD_PutStr>
  UG_Update();
 8001fb6:	f005 fb21 	bl	80075fc <UG_Update>
  HAL_Delay(1000);
 8001fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fbe:	f000 fb75 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f003 fcee 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Font", DEFAULT_FONT, C_RED, C_BLACK);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4bcc      	ldr	r3, [pc, #816]	; (8002304 <LCD_Test+0x7a8>)
 8001fd4:	4acd      	ldr	r2, [pc, #820]	; (800230c <LCD_Test+0x7b0>)
 8001fd6:	2105      	movs	r1, #5
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f7ff fcd9 	bl	8001990 <LCD_PutStr>
  clearTime();
 8001fde:	f7ff fd7b 	bl	8001ad8 <clearTime>
  LCD_PutStr(10, 35, "Hello Steve!", DEFAULT_FONT, C_CYAN, C_BLACK);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	4bc5      	ldr	r3, [pc, #788]	; (8002304 <LCD_Test+0x7a8>)
 8001fee:	4ac8      	ldr	r2, [pc, #800]	; (8002310 <LCD_Test+0x7b4>)
 8001ff0:	2123      	movs	r1, #35	; 0x23
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f7ff fccc 	bl	8001990 <LCD_PutStr>
  LCD_PutStr(10, 55, "Hello Steve!", DEFAULT_FONT, C_ORANGE_RED, C_BLACK);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f64f 2320 	movw	r3, #64032	; 0xfa20
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4bc0      	ldr	r3, [pc, #768]	; (8002304 <LCD_Test+0x7a8>)
 8002004:	4ac2      	ldr	r2, [pc, #776]	; (8002310 <LCD_Test+0x7b4>)
 8002006:	2137      	movs	r1, #55	; 0x37
 8002008:	200a      	movs	r0, #10
 800200a:	f7ff fcc1 	bl	8001990 <LCD_PutStr>
  LCD_PutStr(10, 75, "Hello Steve!", DEFAULT_FONT, C_LIME_GREEN, C_BLACK);
 800200e:	2300      	movs	r3, #0
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	f243 6366 	movw	r3, #13926	; 0x3666
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	4bba      	ldr	r3, [pc, #744]	; (8002304 <LCD_Test+0x7a8>)
 800201a:	4abd      	ldr	r2, [pc, #756]	; (8002310 <LCD_Test+0x7b4>)
 800201c:	214b      	movs	r1, #75	; 0x4b
 800201e:	200a      	movs	r0, #10
 8002020:	f7ff fcb6 	bl	8001990 <LCD_PutStr>
  LCD_PutStr(10, 95, "Hello Steve!", DEFAULT_FONT, C_HOT_PINK, C_BLACK);
 8002024:	2300      	movs	r3, #0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	f64f 3356 	movw	r3, #64342	; 0xfb56
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	4bb5      	ldr	r3, [pc, #724]	; (8002304 <LCD_Test+0x7a8>)
 8002030:	4ab7      	ldr	r2, [pc, #732]	; (8002310 <LCD_Test+0x7b4>)
 8002032:	215f      	movs	r1, #95	; 0x5f
 8002034:	200a      	movs	r0, #10
 8002036:	f7ff fcab 	bl	8001990 <LCD_PutStr>
  UG_Update();
 800203a:	f005 fadf 	bl	80075fc <UG_Update>
  printTime();
 800203e:	f7ff fd57 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 8002042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002046:	f000 fb31 	bl	80026ac <HAL_Delay>

#if DEMO_FLASH_KB >=128
  UG_FillScreen(C_BLACK);
 800204a:	2000      	movs	r0, #0
 800204c:	f003 fcaa 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Big font", DEFAULT_FONT, C_RED, C_BLACK);
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4baa      	ldr	r3, [pc, #680]	; (8002304 <LCD_Test+0x7a8>)
 800205c:	4aad      	ldr	r2, [pc, #692]	; (8002314 <LCD_Test+0x7b8>)
 800205e:	2105      	movs	r1, #5
 8002060:	200a      	movs	r0, #10
 8002062:	f7ff fc95 	bl	8001990 <LCD_PutStr>
  clearTime();
 8002066:	f7ff fd37 	bl	8001ad8 <clearTime>
  LCD_PutStr(10, 35, "Hello", FONT_arial_49X57, C_CYAN, C_BLACK);
 800206a:	2300      	movs	r3, #0
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4ba8      	ldr	r3, [pc, #672]	; (8002318 <LCD_Test+0x7bc>)
 8002076:	4aa9      	ldr	r2, [pc, #676]	; (800231c <LCD_Test+0x7c0>)
 8002078:	2123      	movs	r1, #35	; 0x23
 800207a:	200a      	movs	r0, #10
 800207c:	f7ff fc88 	bl	8001990 <LCD_PutStr>
  LCD_PutStr(10, 80, "Steve!", FONT_arial_49X57, C_CYAN, C_BLACK);
 8002080:	2300      	movs	r3, #0
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4ba3      	ldr	r3, [pc, #652]	; (8002318 <LCD_Test+0x7bc>)
 800208c:	4aa4      	ldr	r2, [pc, #656]	; (8002320 <LCD_Test+0x7c4>)
 800208e:	2150      	movs	r1, #80	; 0x50
 8002090:	200a      	movs	r0, #10
 8002092:	f7ff fc7d 	bl	8001990 <LCD_PutStr>
  UG_Update();
 8002096:	f005 fab1 	bl	80075fc <UG_Update>
  printTime();
 800209a:	f7ff fd29 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 800209e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a2:	f000 fb03 	bl	80026ac <HAL_Delay>
#endif

  UG_FillScreen(C_RED);
 80020a6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80020aa:	f003 fc7b 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Line", DEFAULT_FONT, C_YELLOW, C_RED);
 80020ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	4b92      	ldr	r3, [pc, #584]	; (8002304 <LCD_Test+0x7a8>)
 80020bc:	4a99      	ldr	r2, [pc, #612]	; (8002324 <LCD_Test+0x7c8>)
 80020be:	2105      	movs	r1, #5
 80020c0:	200a      	movs	r0, #10
 80020c2:	f7ff fc65 	bl	8001990 <LCD_PutStr>
  clearTime();
 80020c6:	f7ff fd07 	bl	8001ad8 <clearTime>
  UG_DrawLine(10, 30, 10, 100, C_WHITE);
 80020ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2364      	movs	r3, #100	; 0x64
 80020d2:	220a      	movs	r2, #10
 80020d4:	211e      	movs	r1, #30
 80020d6:	200a      	movs	r0, #10
 80020d8:	f003 ff92 	bl	8006000 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 30, C_WHITE);
 80020dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	231e      	movs	r3, #30
 80020e4:	2264      	movs	r2, #100	; 0x64
 80020e6:	211e      	movs	r1, #30
 80020e8:	200a      	movs	r0, #10
 80020ea:	f003 ff89 	bl	8006000 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 100, C_WHITE);
 80020ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2364      	movs	r3, #100	; 0x64
 80020f6:	2264      	movs	r2, #100	; 0x64
 80020f8:	211e      	movs	r1, #30
 80020fa:	200a      	movs	r0, #10
 80020fc:	f003 ff80 	bl	8006000 <UG_DrawLine>
  UG_Update();
 8002100:	f005 fa7c 	bl	80075fc <UG_Update>
  printTime();
 8002104:	f7ff fcf4 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 8002108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800210c:	f000 face 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_RED);
 8002110:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002114:	f003 fc46 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8002118:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	4b77      	ldr	r3, [pc, #476]	; (8002304 <LCD_Test+0x7a8>)
 8002126:	4a80      	ldr	r2, [pc, #512]	; (8002328 <LCD_Test+0x7cc>)
 8002128:	2105      	movs	r1, #5
 800212a:	200a      	movs	r0, #10
 800212c:	f7ff fc30 	bl	8001990 <LCD_PutStr>
  clearTime();
 8002130:	f7ff fcd2 	bl	8001ad8 <clearTime>
  UG_DrawFrame(10, 30, 100, 100, C_WHITE);
 8002134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2364      	movs	r3, #100	; 0x64
 800213c:	2264      	movs	r2, #100	; 0x64
 800213e:	211e      	movs	r1, #30
 8002140:	200a      	movs	r0, #10
 8002142:	f003 fd3c 	bl	8005bbe <UG_DrawFrame>
  UG_Update();
 8002146:	f005 fa59 	bl	80075fc <UG_Update>
  printTime();
 800214a:	f7ff fcd1 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 800214e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002152:	f000 faab 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_RED);
 8002156:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800215a:	f003 fc23 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 800215e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	4b66      	ldr	r3, [pc, #408]	; (8002304 <LCD_Test+0x7a8>)
 800216c:	4a6f      	ldr	r2, [pc, #444]	; (800232c <LCD_Test+0x7d0>)
 800216e:	2105      	movs	r1, #5
 8002170:	200a      	movs	r0, #10
 8002172:	f7ff fc0d 	bl	8001990 <LCD_PutStr>
  clearTime();
 8002176:	f7ff fcaf 	bl	8001ad8 <clearTime>
  UG_FillFrame(10, 30, 100, 100, C_WHITE);
 800217a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2364      	movs	r3, #100	; 0x64
 8002182:	2264      	movs	r2, #100	; 0x64
 8002184:	211e      	movs	r1, #30
 8002186:	200a      	movs	r0, #10
 8002188:	f003 fc30 	bl	80059ec <UG_FillFrame>
  UG_Update();
 800218c:	f005 fa36 	bl	80075fc <UG_Update>
  printTime();
 8002190:	f7ff fcae 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 8002194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002198:	f000 fa88 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_RED);
 800219c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80021a0:	f003 fc00 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Mesh.", DEFAULT_FONT, C_YELLOW, C_RED);
 80021a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	4b54      	ldr	r3, [pc, #336]	; (8002304 <LCD_Test+0x7a8>)
 80021b2:	4a5f      	ldr	r2, [pc, #380]	; (8002330 <LCD_Test+0x7d4>)
 80021b4:	2105      	movs	r1, #5
 80021b6:	200a      	movs	r0, #10
 80021b8:	f7ff fbea 	bl	8001990 <LCD_PutStr>
  clearTime();
 80021bc:	f7ff fc8c 	bl	8001ad8 <clearTime>
  UG_DrawMesh(10, 30, 100, 100, 5, C_WHITE);
 80021c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	2305      	movs	r3, #5
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2364      	movs	r3, #100	; 0x64
 80021cc:	2264      	movs	r2, #100	; 0x64
 80021ce:	211e      	movs	r1, #30
 80021d0:	200a      	movs	r0, #10
 80021d2:	f003 fc7d 	bl	8005ad0 <UG_DrawMesh>
  UG_Update();
 80021d6:	f005 fa11 	bl	80075fc <UG_Update>
  printTime();
 80021da:	f7ff fc89 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 80021de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021e2:	f000 fa63 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_RED);
 80021e6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80021ea:	f003 fbdb 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 80021ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4b42      	ldr	r3, [pc, #264]	; (8002304 <LCD_Test+0x7a8>)
 80021fc:	4a4d      	ldr	r2, [pc, #308]	; (8002334 <LCD_Test+0x7d8>)
 80021fe:	2105      	movs	r1, #5
 8002200:	200a      	movs	r0, #10
 8002202:	f7ff fbc5 	bl	8001990 <LCD_PutStr>
  clearTime();
 8002206:	f7ff fc67 	bl	8001ad8 <clearTime>
  UG_DrawCircle(45, 65, 30, C_WHITE);
 800220a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220e:	221e      	movs	r2, #30
 8002210:	2141      	movs	r1, #65	; 0x41
 8002212:	202d      	movs	r0, #45	; 0x2d
 8002214:	f003 fd34 	bl	8005c80 <UG_DrawCircle>
  UG_Update();
 8002218:	f005 f9f0 	bl	80075fc <UG_Update>
  printTime();
 800221c:	f7ff fc68 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 8002220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002224:	f000 fa42 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_RED);
 8002228:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800222c:	f003 fbba 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8002230:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <LCD_Test+0x7a8>)
 800223e:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <LCD_Test+0x7dc>)
 8002240:	2105      	movs	r1, #5
 8002242:	200a      	movs	r0, #10
 8002244:	f7ff fba4 	bl	8001990 <LCD_PutStr>
  UG_Update();
 8002248:	f005 f9d8 	bl	80075fc <UG_Update>
  clearTime();
 800224c:	f7ff fc44 	bl	8001ad8 <clearTime>
  UG_FillCircle(45, 65, 30, C_WHITE);
 8002250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002254:	221e      	movs	r2, #30
 8002256:	2141      	movs	r1, #65	; 0x41
 8002258:	202d      	movs	r0, #45	; 0x2d
 800225a:	f003 fdf7 	bl	8005e4c <UG_FillCircle>
  UG_Update();
 800225e:	f005 f9cd 	bl	80075fc <UG_Update>
  printTime();
 8002262:	f7ff fc45 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 8002266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800226a:	f000 fa1f 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_RED);
 800226e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002272:	f003 fb97 	bl	80059a4 <UG_FillScreen>
  LCD_PutStr(10, 5, "Triangle", DEFAULT_FONT, C_YELLOW, C_RED);
 8002276:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <LCD_Test+0x7a8>)
 8002284:	4a2d      	ldr	r2, [pc, #180]	; (800233c <LCD_Test+0x7e0>)
 8002286:	2105      	movs	r1, #5
 8002288:	200a      	movs	r0, #10
 800228a:	f7ff fb81 	bl	8001990 <LCD_PutStr>
  clearTime();
 800228e:	f7ff fc23 	bl	8001ad8 <clearTime>
  UG_DrawTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 8002292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002296:	9302      	str	r3, [sp, #8]
 8002298:	2364      	movs	r3, #100	; 0x64
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2332      	movs	r3, #50	; 0x32
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	231e      	movs	r3, #30
 80022a2:	2264      	movs	r2, #100	; 0x64
 80022a4:	211e      	movs	r1, #30
 80022a6:	200a      	movs	r0, #10
 80022a8:	f003 ff8a 	bl	80061c0 <UG_DrawTriangle>
  UG_Update();
 80022ac:	f005 f9a6 	bl	80075fc <UG_Update>
  printTime();
 80022b0:	f7ff fc1e 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 80022b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022b8:	f000 f9f8 	bl	80026ac <HAL_Delay>

  UG_FillScreen(C_RED);
 80022bc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80022c0:	f003 fb70 	bl	80059a4 <UG_FillScreen>
  clearTime();
 80022c4:	f7ff fc08 	bl	8001ad8 <clearTime>
  LCD_PutStr(10, 5, "Filled Tri.", DEFAULT_FONT, C_YELLOW, C_RED);
 80022c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <LCD_Test+0x7a8>)
 80022d6:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <LCD_Test+0x7e4>)
 80022d8:	2105      	movs	r1, #5
 80022da:	200a      	movs	r0, #10
 80022dc:	f7ff fb58 	bl	8001990 <LCD_PutStr>
  UG_FillTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 80022e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2364      	movs	r3, #100	; 0x64
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2332      	movs	r3, #50	; 0x32
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	231e      	movs	r3, #30
 80022f0:	2264      	movs	r2, #100	; 0x64
 80022f2:	211e      	movs	r1, #30
 80022f4:	200a      	movs	r0, #10
 80022f6:	f003 ff9d 	bl	8006234 <UG_FillTriangle>
  UG_Update();
 80022fa:	f005 f97f 	bl	80075fc <UG_Update>
  printTime();
 80022fe:	f7ff fbf7 	bl	8001af0 <printTime>
 8002302:	e01f      	b.n	8002344 <LCD_Test+0x7e8>
 8002304:	0801ce74 	.word	0x0801ce74
 8002308:	0800a42c 	.word	0x0800a42c
 800230c:	0800a434 	.word	0x0800a434
 8002310:	0800a43c 	.word	0x0800a43c
 8002314:	0800a44c 	.word	0x0800a44c
 8002318:	0800a580 	.word	0x0800a580
 800231c:	0800a458 	.word	0x0800a458
 8002320:	0800a460 	.word	0x0800a460
 8002324:	0800a468 	.word	0x0800a468
 8002328:	0800a470 	.word	0x0800a470
 800232c:	0800a478 	.word	0x0800a478
 8002330:	0800a484 	.word	0x0800a484
 8002334:	0800a48c 	.word	0x0800a48c
 8002338:	0800a494 	.word	0x0800a494
 800233c:	0800a4a4 	.word	0x0800a4a4
 8002340:	0800a4b0 	.word	0x0800a4b0
  HAL_Delay(1000);
 8002344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002348:	f000 f9b0 	bl	80026ac <HAL_Delay>

  clearTime();
 800234c:	f7ff fbc4 	bl	8001ad8 <clearTime>
  // Create the window
  UG_WindowCreate(&window_1, obj_buff_wnd_1, MAX_OBJECTS, window_1_callback);
 8002350:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <LCD_Test+0xa24>)
 8002352:	220a      	movs	r2, #10
 8002354:	498b      	ldr	r1, [pc, #556]	; (8002584 <LCD_Test+0xa28>)
 8002356:	488c      	ldr	r0, [pc, #560]	; (8002588 <LCD_Test+0xa2c>)
 8002358:	f005 fb30 	bl	80079bc <UG_WindowCreate>
  // Window Title
  UG_WindowSetTitleText(&window_1, "Test Window");
 800235c:	498b      	ldr	r1, [pc, #556]	; (800258c <LCD_Test+0xa30>)
 800235e:	488a      	ldr	r0, [pc, #552]	; (8002588 <LCD_Test+0xa2c>)
 8002360:	f005 fd82 	bl	8007e68 <UG_WindowSetTitleText>
  UG_WindowSetTitleTextFont(&window_1, DEFAULT_FONT);
 8002364:	498a      	ldr	r1, [pc, #552]	; (8002590 <LCD_Test+0xa34>)
 8002366:	4888      	ldr	r0, [pc, #544]	; (8002588 <LCD_Test+0xa2c>)
 8002368:	f005 fda0 	bl	8007eac <UG_WindowSetTitleTextFont>
  UG_WindowSetTitleHeight(&window_1, 15);
 800236c:	210f      	movs	r1, #15
 800236e:	4886      	ldr	r0, [pc, #536]	; (8002588 <LCD_Test+0xa2c>)
 8002370:	f005 fdd7 	bl	8007f22 <UG_WindowSetTitleHeight>
  UG_WindowSetXStart(&window_1, 0);
 8002374:	2100      	movs	r1, #0
 8002376:	4884      	ldr	r0, [pc, #528]	; (8002588 <LCD_Test+0xa2c>)
 8002378:	f005 fdfe 	bl	8007f78 <UG_WindowSetXStart>
  UG_WindowSetYStart(&window_1, 0);
 800237c:	2100      	movs	r1, #0
 800237e:	4882      	ldr	r0, [pc, #520]	; (8002588 <LCD_Test+0xa2c>)
 8002380:	f005 fe2c 	bl	8007fdc <UG_WindowSetYStart>
  UG_WindowSetXEnd(&window_1, LCD_WIDTH-1);
 8002384:	21ef      	movs	r1, #239	; 0xef
 8002386:	4880      	ldr	r0, [pc, #512]	; (8002588 <LCD_Test+0xa2c>)
 8002388:	f005 fe5a 	bl	8008040 <UG_WindowSetXEnd>
  UG_WindowSetYEnd(&window_1, LCD_HEIGHT-1);
 800238c:	21ef      	movs	r1, #239	; 0xef
 800238e:	487e      	ldr	r0, [pc, #504]	; (8002588 <LCD_Test+0xa2c>)
 8002390:	f005 fe88 	bl	80080a4 <UG_WindowSetYEnd>

  // Create Buttons
  UG_ButtonCreate(&window_1, &button_1, BTN_ID_0, 5, 5, 70, 35);
 8002394:	2323      	movs	r3, #35	; 0x23
 8002396:	9302      	str	r3, [sp, #8]
 8002398:	2346      	movs	r3, #70	; 0x46
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	2305      	movs	r3, #5
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2305      	movs	r3, #5
 80023a2:	2200      	movs	r2, #0
 80023a4:	497b      	ldr	r1, [pc, #492]	; (8002594 <LCD_Test+0xa38>)
 80023a6:	4878      	ldr	r0, [pc, #480]	; (8002588 <LCD_Test+0xa2c>)
 80023a8:	f006 f8d6 	bl	8008558 <UG_ButtonCreate>
  //Label Buttons
  UG_ButtonSetFont(&window_1,BTN_ID_0,DEFAULT_FONT);
 80023ac:	4a78      	ldr	r2, [pc, #480]	; (8002590 <LCD_Test+0xa34>)
 80023ae:	2100      	movs	r1, #0
 80023b0:	4875      	ldr	r0, [pc, #468]	; (8002588 <LCD_Test+0xa2c>)
 80023b2:	f006 f9d1 	bl	8008758 <UG_ButtonSetFont>
  UG_ButtonSetForeColor(&window_1,BTN_ID_0, C_BLACK);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	4873      	ldr	r0, [pc, #460]	; (8002588 <LCD_Test+0xa2c>)
 80023bc:	f006 f94c 	bl	8008658 <UG_ButtonSetForeColor>
  UG_ButtonSetBackColor(&window_1, BTN_ID_0, C_LIGHT_GRAY);
 80023c0:	f24d 629a 	movw	r2, #54938	; 0xd69a
 80023c4:	2100      	movs	r1, #0
 80023c6:	4870      	ldr	r0, [pc, #448]	; (8002588 <LCD_Test+0xa2c>)
 80023c8:	f006 f971 	bl	80086ae <UG_ButtonSetBackColor>
  UG_ButtonSetText(&window_1,BTN_ID_0,"3D Btn");
 80023cc:	4a72      	ldr	r2, [pc, #456]	; (8002598 <LCD_Test+0xa3c>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	486d      	ldr	r0, [pc, #436]	; (8002588 <LCD_Test+0xa2c>)
 80023d2:	f006 f997 	bl	8008704 <UG_ButtonSetText>

  // Create Textbox
  UG_TextboxCreate(&window_1, &textbox_1, TXB_ID_0, 10, 40, LCD_WIDTH-20, 65);
 80023d6:	2341      	movs	r3, #65	; 0x41
 80023d8:	9302      	str	r3, [sp, #8]
 80023da:	23dc      	movs	r3, #220	; 0xdc
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2328      	movs	r3, #40	; 0x28
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	230a      	movs	r3, #10
 80023e4:	2200      	movs	r2, #0
 80023e6:	496d      	ldr	r1, [pc, #436]	; (800259c <LCD_Test+0xa40>)
 80023e8:	4867      	ldr	r0, [pc, #412]	; (8002588 <LCD_Test+0xa2c>)
 80023ea:	f006 fe89 	bl	8009100 <UG_TextboxCreate>
  UG_TextboxSetFont(&window_1, TXB_ID_0, DEFAULT_FONT);
 80023ee:	4a68      	ldr	r2, [pc, #416]	; (8002590 <LCD_Test+0xa34>)
 80023f0:	2100      	movs	r1, #0
 80023f2:	4865      	ldr	r0, [pc, #404]	; (8002588 <LCD_Test+0xa2c>)
 80023f4:	f006 ff7e 	bl	80092f4 <UG_TextboxSetFont>
  UG_TextboxSetText(&window_1, TXB_ID_0, "Some Text");
 80023f8:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <LCD_Test+0xa44>)
 80023fa:	2100      	movs	r1, #0
 80023fc:	4862      	ldr	r0, [pc, #392]	; (8002588 <LCD_Test+0xa2c>)
 80023fe:	f006 ff4f 	bl	80092a0 <UG_TextboxSetText>
  UG_TextboxSetBackColor(&window_1, TXB_ID_0, C_LIGHT_YELLOW);
 8002402:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8002406:	2100      	movs	r1, #0
 8002408:	485f      	ldr	r0, [pc, #380]	; (8002588 <LCD_Test+0xa2c>)
 800240a:	f006 ff1e 	bl	800924a <UG_TextboxSetBackColor>
  UG_TextboxSetForeColor(&window_1, TXB_ID_0, C_BLACK);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	485d      	ldr	r0, [pc, #372]	; (8002588 <LCD_Test+0xa2c>)
 8002414:	f006 feee 	bl	80091f4 <UG_TextboxSetForeColor>
  UG_TextboxSetAlignment(&window_1, TXB_ID_0, ALIGN_CENTER);
 8002418:	2212      	movs	r2, #18
 800241a:	2100      	movs	r1, #0
 800241c:	485a      	ldr	r0, [pc, #360]	; (8002588 <LCD_Test+0xa2c>)
 800241e:	f006 ff93 	bl	8009348 <UG_TextboxSetAlignment>

  // Create progress bar
  UG_ProgressCreate(&window_1, &pgb, PGB_ID_0, 10, 72, LCD_WIDTH-20, 85);
 8002422:	2355      	movs	r3, #85	; 0x55
 8002424:	9302      	str	r3, [sp, #8]
 8002426:	23dc      	movs	r3, #220	; 0xdc
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	2348      	movs	r3, #72	; 0x48
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	230a      	movs	r3, #10
 8002430:	2200      	movs	r2, #0
 8002432:	495c      	ldr	r1, [pc, #368]	; (80025a4 <LCD_Test+0xa48>)
 8002434:	4854      	ldr	r0, [pc, #336]	; (8002588 <LCD_Test+0xa2c>)
 8002436:	f006 fbd7 	bl	8008be8 <UG_ProgressCreate>
  UG_ProgressSetForeColor(&window_1, PGB_ID_0, C_ROYAL_BLUE);
 800243a:	f244 325b 	movw	r2, #17243	; 0x435b
 800243e:	2100      	movs	r1, #0
 8002440:	4851      	ldr	r0, [pc, #324]	; (8002588 <LCD_Test+0xa2c>)
 8002442:	f006 fc35 	bl	8008cb0 <UG_ProgressSetForeColor>

  UG_WindowShow(&window_1);
 8002446:	4850      	ldr	r0, [pc, #320]	; (8002588 <LCD_Test+0xa2c>)
 8002448:	f005 fb86 	bl	8007b58 <UG_WindowShow>
  UG_Update();
 800244c:	f005 f8d6 	bl	80075fc <UG_Update>
  printTime();
 8002450:	f7ff fb4e 	bl	8001af0 <printTime>
  HAL_Delay(1000);
 8002454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002458:	f000 f928 	bl	80026ac <HAL_Delay>
  uint32_t btn_time,progress_time,now;
  uint8_t i=0, j=0,u=0;
 800245c:	2300      	movs	r3, #0
 800245e:	75fb      	strb	r3, [r7, #23]
 8002460:	2300      	movs	r3, #0
 8002462:	75bb      	strb	r3, [r7, #22]
 8002464:	2300      	movs	r3, #0
 8002466:	757b      	strb	r3, [r7, #21]
  btn_time = progress_time = HAL_GetTick();
 8002468:	f000 f914 	bl	8002694 <HAL_GetTick>
 800246c:	61b8      	str	r0, [r7, #24]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	61fb      	str	r3, [r7, #28]
  while(1){
    now=HAL_GetTick();
 8002472:	f000 f90f 	bl	8002694 <HAL_GetTick>
 8002476:	6078      	str	r0, [r7, #4]
    if(now-btn_time>199){
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2bc7      	cmp	r3, #199	; 0xc7
 8002480:	d916      	bls.n	80024b0 <LCD_Test+0x954>
      btn_time=now;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	61fb      	str	r3, [r7, #28]
      u=1;
 8002486:	2301      	movs	r3, #1
 8002488:	757b      	strb	r3, [r7, #21]
      i++;
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	3301      	adds	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
      //UG_TouchUpdate((i&1 ? 10 : -1), (i&1 ? 31 : -1), OBJ_TOUCH_STATE_CHANGED | (i&1 ? OBJ_TOUCH_STATE_IS_PRESSED : 0));
      if(i==9){
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	2b09      	cmp	r3, #9
 8002494:	d109      	bne.n	80024aa <LCD_Test+0x94e>
        UG_ButtonSetText(&window_1,BTN_ID_0,"2D Btn");
 8002496:	4a44      	ldr	r2, [pc, #272]	; (80025a8 <LCD_Test+0xa4c>)
 8002498:	2100      	movs	r1, #0
 800249a:	483b      	ldr	r0, [pc, #236]	; (8002588 <LCD_Test+0xa2c>)
 800249c:	f006 f932 	bl	8008704 <UG_ButtonSetText>
        UG_ButtonSetStyle(&window_1, BTN_ID_0, BTN_STYLE_2D);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	4838      	ldr	r0, [pc, #224]	; (8002588 <LCD_Test+0xa2c>)
 80024a6:	f006 f981 	bl	80087ac <UG_ButtonSetStyle>
      }
      if(i>19){
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	2b13      	cmp	r3, #19
 80024ae:	d81e      	bhi.n	80024ee <LCD_Test+0x992>
        break;
      }
    }
    if(now-progress_time>19){
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b13      	cmp	r3, #19
 80024b8:	d911      	bls.n	80024de <LCD_Test+0x982>
      progress_time=now;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	61bb      	str	r3, [r7, #24]
      u=1;
 80024be:	2301      	movs	r3, #1
 80024c0:	757b      	strb	r3, [r7, #21]
      if(++j>100)
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	3301      	adds	r3, #1
 80024c6:	75bb      	strb	r3, [r7, #22]
 80024c8:	7dbb      	ldrb	r3, [r7, #22]
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <LCD_Test+0x976>
        j=0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	75bb      	strb	r3, [r7, #22]
      UG_ProgressSetProgress(&window_1, PGB_ID_0, j);
 80024d2:	7dbb      	ldrb	r3, [r7, #22]
 80024d4:	461a      	mov	r2, r3
 80024d6:	2100      	movs	r1, #0
 80024d8:	482b      	ldr	r0, [pc, #172]	; (8002588 <LCD_Test+0xa2c>)
 80024da:	f006 fc14 	bl	8008d06 <UG_ProgressSetProgress>
    }
    if(u){
 80024de:	7d7b      	ldrb	r3, [r7, #21]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0c6      	beq.n	8002472 <LCD_Test+0x916>
      u=0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	757b      	strb	r3, [r7, #21]
      UG_Update();
 80024e8:	f005 f888 	bl	80075fc <UG_Update>
    now=HAL_GetTick();
 80024ec:	e7c1      	b.n	8002472 <LCD_Test+0x916>
        break;
 80024ee:	bf00      	nop
    }
  }
  UG_WindowHide(&window_1);
 80024f0:	4825      	ldr	r0, [pc, #148]	; (8002588 <LCD_Test+0xa2c>)
 80024f2:	f005 fb57 	bl	8007ba4 <UG_WindowHide>
  UG_WindowDelete(&window_1);
 80024f6:	4824      	ldr	r0, [pc, #144]	; (8002588 <LCD_Test+0xa2c>)
 80024f8:	f005 faf0 	bl	8007adc <UG_WindowDelete>
  UG_Update();
 80024fc:	f005 f87e 	bl	80075fc <UG_Update>
  t = UG_FontGetTransparency();
 8002500:	f004 f902 	bl	8006708 <UG_FontGetTransparency>
 8002504:	4603      	mov	r3, r0
 8002506:	72fb      	strb	r3, [r7, #11]
#if DEMO_FLASH_KB >=64
  UG_FillScreen(0x4b10);
 8002508:	f644 3010 	movw	r0, #19216	; 0x4b10
 800250c:	f003 fa4a 	bl	80059a4 <UG_FillScreen>
  clearTime();
 8002510:	f7ff fae2 	bl	8001ad8 <clearTime>
  UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogo);
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <LCD_Test+0xa50>)
 8002516:	889b      	ldrh	r3, [r3, #4]
 8002518:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800251c:	0fda      	lsrs	r2, r3, #31
 800251e:	4413      	add	r3, r2
 8002520:	105b      	asrs	r3, r3, #1
 8002522:	b218      	sxth	r0, r3
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <LCD_Test+0xa50>)
 8002526:	88db      	ldrh	r3, [r3, #6]
 8002528:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800252c:	0fda      	lsrs	r2, r3, #31
 800252e:	4413      	add	r3, r2
 8002530:	105b      	asrs	r3, r3, #1
 8002532:	b21b      	sxth	r3, r3
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <LCD_Test+0xa50>)
 8002536:	4619      	mov	r1, r3
 8002538:	f005 f920 	bl	800777c <UG_DrawBMP>
  UG_Update();
 800253c:	f005 f85e 	bl	80075fc <UG_Update>
  printTime();
 8002540:	f7ff fad6 	bl	8001af0 <printTime>
  UG_FontSetTransparency(0);
 8002544:	2000      	movs	r0, #0
 8002546:	f004 f8cd 	bl	80066e4 <UG_FontSetTransparency>
  LCD_PutStr(10, 5, "Image", DEFAULT_FONT, C_YELLOW, C_RED);
 800254a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <LCD_Test+0xa34>)
 8002558:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <LCD_Test+0xa54>)
 800255a:	2105      	movs	r1, #5
 800255c:	200a      	movs	r0, #10
 800255e:	f7ff fa17 	bl	8001990 <LCD_PutStr>
  UG_Update();
 8002562:	f005 f84b 	bl	80075fc <UG_Update>
  UG_FontSetTransparency(t);
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	4618      	mov	r0, r3
 800256a:	f004 f8bb 	bl	80066e4 <UG_FontSetTransparency>
#endif
  HAL_Delay(1000);
 800256e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002572:	f000 f89b 	bl	80026ac <HAL_Delay>
}
 8002576:	bf00      	nop
 8002578:	3734      	adds	r7, #52	; 0x34
 800257a:	46bd      	mov	sp, r7
 800257c:	bd90      	pop	{r4, r7, pc}
 800257e:	bf00      	nop
 8002580:	080025b5 	.word	0x080025b5
 8002584:	20000390 	.word	0x20000390
 8002588:	20000330 	.word	0x20000330
 800258c:	0800a4bc 	.word	0x0800a4bc
 8002590:	0801ce74 	.word	0x0801ce74
 8002594:	20000364 	.word	0x20000364
 8002598:	0800a4c8 	.word	0x0800a4c8
 800259c:	2000037c 	.word	0x2000037c
 80025a0:	0800a4d0 	.word	0x0800a4d0
 80025a4:	200004d0 	.word	0x200004d0
 80025a8:	0800a4dc 	.word	0x0800a4dc
 80025ac:	20000024 	.word	0x20000024
 80025b0:	0800a4e4 	.word	0x0800a4e4

080025b4 <window_1_callback>:


static void window_1_callback(UG_MESSAGE *msg)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
                }
            }
        }
    }
*/
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <HAL_Init+0x40>)
 80025d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_Init+0x40>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_Init+0x40>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f0:	2003      	movs	r0, #3
 80025f2:	f000 f96f 	bl	80028d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f6:	200f      	movs	r0, #15
 80025f8:	f000 f808 	bl	800260c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025fc:	f7fe fc0c 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_InitTick+0x54>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x58>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002622:	fbb3 f3f1 	udiv	r3, r3, r1
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f987 	bl	800293e <HAL_SYSTICK_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00e      	b.n	8002658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002640:	2200      	movs	r2, #0
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002648:	f000 f94f 	bl	80028ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_InitTick+0x5c>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000008 	.word	0x20000008
 8002664:	20000020 	.word	0x20000020
 8002668:	2000001c 	.word	0x2000001c

0800266c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000020 	.word	0x20000020
 8002690:	200004d8 	.word	0x200004d8

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	200004d8 	.word	0x200004d8

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff ffee 	bl	8002694 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026d2:	bf00      	nop
 80026d4:	f7ff ffde 	bl	8002694 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000020 	.word	0x20000020

080026f4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_SuspendTick+0x1c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_SuspendTick+0x1c>)
 80026fe:	f023 0302 	bic.w	r3, r3, #2
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_ResumeTick+0x1c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_ResumeTick+0x1c>)
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4907      	ldr	r1, [pc, #28]	; (80027d0 <__NVIC_EnableIRQ+0x38>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a0:	d301      	bcc.n	80028a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00f      	b.n	80028c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <SysTick_Config+0x40>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ae:	210f      	movs	r1, #15
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b4:	f7ff ff8e 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <SysTick_Config+0x40>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <SysTick_Config+0x40>)
 80028c0:	2207      	movs	r2, #7
 80028c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff29 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028fc:	f7ff ff3e 	bl	800277c <__NVIC_GetPriorityGrouping>
 8002900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7ff ff8e 	bl	8002828 <NVIC_EncodePriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff5d 	bl	80027d4 <__NVIC_SetPriority>
}
 800291a:	bf00      	nop
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff31 	bl	8002798 <__NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffa2 	bl	8002890 <SysTick_Config>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff fe96 	bl	8002694 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e099      	b.n	8002aa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002994:	e00f      	b.n	80029b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002996:	f7ff fe7d 	bl	8002694 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d908      	bls.n	80029b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e078      	b.n	8002aa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e8      	bne.n	8002996 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_DMA_Init+0x158>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d107      	bne.n	8002a20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0307 	bic.w	r3, r3, #7
 8002a36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d117      	bne.n	8002a7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fad1 	bl	8003004 <DMA_CheckFifoParam>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a76:	2301      	movs	r3, #1
 8002a78:	e016      	b.n	8002aa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa88 	bl	8002f98 <DMA_CalcBaseAndBitshift>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	223f      	movs	r2, #63	; 0x3f
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	f010803f 	.word	0xf010803f

08002ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Start_IT+0x26>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e040      	b.n	8002b5c <HAL_DMA_Start_IT+0xa8>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d12f      	bne.n	8002b4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fa1a 	bl	8002f3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	223f      	movs	r2, #63	; 0x3f
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0216 	orr.w	r2, r2, #22
 8002b22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e005      	b.n	8002b5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b70:	4b8e      	ldr	r3, [pc, #568]	; (8002dac <HAL_DMA_IRQHandler+0x248>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a8e      	ldr	r2, [pc, #568]	; (8002db0 <HAL_DMA_IRQHandler+0x24c>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0a9b      	lsrs	r3, r3, #10
 8002b7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	2208      	movs	r2, #8
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01a      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0204 	bic.w	r2, r2, #4
 8002bb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d012      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f043 0202 	orr.w	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2204      	movs	r2, #4
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2210      	movs	r2, #16
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d043      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d03c      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2210      	movs	r2, #16
 8002c60:	409a      	lsls	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d018      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d024      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
 8002c92:	e01f      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
 8002ca4:	e016      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0208 	bic.w	r2, r2, #8
 8002cc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	2220      	movs	r2, #32
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 808f 	beq.w	8002e04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8087 	beq.w	8002e04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d136      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0216 	bic.w	r2, r2, #22
 8002d1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x1da>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0208 	bic.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	223f      	movs	r2, #63	; 0x3f
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d07e      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
        }
        return;
 8002d7a:	e079      	b.n	8002e70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
 8002da8:	e02c      	b.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
 8002daa:	bf00      	nop
 8002dac:	20000008 	.word	0x20000008
 8002db0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
 8002dc4:	e01e      	b.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10f      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0210 	bic.w	r2, r2, #16
 8002de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d032      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2205      	movs	r2, #5
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d307      	bcc.n	8002e4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f2      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x2cc>
 8002e4a:	e000      	b.n	8002e4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
 8002e6e:	e000      	b.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e70:	bf00      	nop
    }
  }
}
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	460b      	mov	r3, r1
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_DMA_RegisterCallback+0x20>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e03d      	b.n	8002f14 <HAL_DMA_RegisterCallback+0x9c>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d12c      	bne.n	8002f06 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d826      	bhi.n	8002f00 <HAL_DMA_RegisterCallback+0x88>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_DMA_RegisterCallback+0x40>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002ed1 	.word	0x08002ed1
 8002ebc:	08002ed9 	.word	0x08002ed9
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	08002ef1 	.word	0x08002ef1
 8002ecc:	08002ef9 	.word	0x08002ef9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002ed6:	e018      	b.n	8002f0a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002ede:	e014      	b.n	8002f0a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002ee6:	e010      	b.n	8002f0a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002eee:	e00c      	b.n	8002f0a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002ef6:	e008      	b.n	8002f0a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002efe:	e004      	b.n	8002f0a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
      break;
 8002f04:	e001      	b.n	8002f0a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f2e:	b2db      	uxtb	r3, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	d108      	bne.n	8002f7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f7a:	e007      	b.n	8002f8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3b10      	subs	r3, #16
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <DMA_CalcBaseAndBitshift+0x64>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fb2:	4a13      	ldr	r2, [pc, #76]	; (8003000 <DMA_CalcBaseAndBitshift+0x68>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d909      	bls.n	8002fda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	1d1a      	adds	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fd8:	e007      	b.n	8002fea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	aaaaaaab 	.word	0xaaaaaaab
 8003000:	0800a578 	.word	0x0800a578

08003004 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11f      	bne.n	800305e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d856      	bhi.n	80030d2 <DMA_CheckFifoParam+0xce>
 8003024:	a201      	add	r2, pc, #4	; (adr r2, 800302c <DMA_CheckFifoParam+0x28>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	0800303d 	.word	0x0800303d
 8003030:	0800304f 	.word	0x0800304f
 8003034:	0800303d 	.word	0x0800303d
 8003038:	080030d3 	.word	0x080030d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d046      	beq.n	80030d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304c:	e043      	b.n	80030d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003056:	d140      	bne.n	80030da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e03d      	b.n	80030da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003066:	d121      	bne.n	80030ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d837      	bhi.n	80030de <DMA_CheckFifoParam+0xda>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <DMA_CheckFifoParam+0x70>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003085 	.word	0x08003085
 8003078:	0800308b 	.word	0x0800308b
 800307c:	08003085 	.word	0x08003085
 8003080:	0800309d 	.word	0x0800309d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      break;
 8003088:	e030      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d025      	beq.n	80030e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309a:	e022      	b.n	80030e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030a4:	d11f      	bne.n	80030e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030aa:	e01c      	b.n	80030e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d903      	bls.n	80030ba <DMA_CheckFifoParam+0xb6>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d003      	beq.n	80030c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030b8:	e018      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
      break;
 80030be:	e015      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00e      	beq.n	80030ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      break;
 80030d0:	e00b      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      break;
 80030d2:	bf00      	nop
 80030d4:	e00a      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
      break;
 80030d6:	bf00      	nop
 80030d8:	e008      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
      break;
 80030da:	bf00      	nop
 80030dc:	e006      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
      break;
 80030de:	bf00      	nop
 80030e0:	e004      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
      break;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
      break;   
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
    }
  } 
  
  return status; 
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop

080030fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	e159      	b.n	80033cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	f040 8148 	bne.w	80033c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d005      	beq.n	800314e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800314a:	2b02      	cmp	r3, #2
 800314c:	d130      	bne.n	80031b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	2203      	movs	r2, #3
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0201 	and.w	r2, r3, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d017      	beq.n	80031ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d123      	bne.n	8003240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	08da      	lsrs	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3208      	adds	r2, #8
 8003200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	220f      	movs	r2, #15
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0203 	and.w	r2, r3, #3
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a2 	beq.w	80033c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b57      	ldr	r3, [pc, #348]	; (80033e4 <HAL_GPIO_Init+0x2e8>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	4a56      	ldr	r2, [pc, #344]	; (80033e4 <HAL_GPIO_Init+0x2e8>)
 800328c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003290:	6453      	str	r3, [r2, #68]	; 0x44
 8003292:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <HAL_GPIO_Init+0x2e8>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329e:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <HAL_GPIO_Init+0x2ec>)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a49      	ldr	r2, [pc, #292]	; (80033ec <HAL_GPIO_Init+0x2f0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_GPIO_Init+0x202>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a48      	ldr	r2, [pc, #288]	; (80033f0 <HAL_GPIO_Init+0x2f4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0x1fe>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a47      	ldr	r2, [pc, #284]	; (80033f4 <HAL_GPIO_Init+0x2f8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00d      	beq.n	80032f6 <HAL_GPIO_Init+0x1fa>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a46      	ldr	r2, [pc, #280]	; (80033f8 <HAL_GPIO_Init+0x2fc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <HAL_GPIO_Init+0x1f6>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a45      	ldr	r2, [pc, #276]	; (80033fc <HAL_GPIO_Init+0x300>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_GPIO_Init+0x1f2>
 80032ea:	2304      	movs	r3, #4
 80032ec:	e008      	b.n	8003300 <HAL_GPIO_Init+0x204>
 80032ee:	2307      	movs	r3, #7
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x204>
 80032f2:	2303      	movs	r3, #3
 80032f4:	e004      	b.n	8003300 <HAL_GPIO_Init+0x204>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e002      	b.n	8003300 <HAL_GPIO_Init+0x204>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_GPIO_Init+0x204>
 80032fe:	2300      	movs	r3, #0
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	f002 0203 	and.w	r2, r2, #3
 8003306:	0092      	lsls	r2, r2, #2
 8003308:	4093      	lsls	r3, r2
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003310:	4935      	ldr	r1, [pc, #212]	; (80033e8 <HAL_GPIO_Init+0x2ec>)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	3302      	adds	r3, #2
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800331e:	4b38      	ldr	r3, [pc, #224]	; (8003400 <HAL_GPIO_Init+0x304>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <HAL_GPIO_Init+0x304>)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_GPIO_Init+0x304>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800336c:	4a24      	ldr	r2, [pc, #144]	; (8003400 <HAL_GPIO_Init+0x304>)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_GPIO_Init+0x304>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003396:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <HAL_GPIO_Init+0x304>)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800339c:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_GPIO_Init+0x304>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033c0:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <HAL_GPIO_Init+0x304>)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3301      	adds	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b0f      	cmp	r3, #15
 80033d0:	f67f aea2 	bls.w	8003118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3724      	adds	r7, #36	; 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40013800 	.word	0x40013800
 80033ec:	40020000 	.word	0x40020000
 80033f0:	40020400 	.word	0x40020400
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	40021000 	.word	0x40021000
 8003400:	40013c00 	.word	0x40013c00

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003448:	887a      	ldrh	r2, [r7, #2]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4013      	ands	r3, r2
 800344e:	041a      	lsls	r2, r3, #16
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43d9      	mvns	r1, r3
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	400b      	ands	r3, r1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f902 	bl	8000694 <HAL_GPIO_EXTI_Callback>
  }
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40013c00 	.word	0x40013c00

0800349c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80034ae:	f023 0304 	bic.w	r3, r3, #4
 80034b2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80034ba:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80034bc:	e002      	b.n	80034c4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80034be:	bf40      	sev
    __WFE();
 80034c0:	bf20      	wfe
    __WFE();
 80034c2:	bf20      	wfe
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e267      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d075      	beq.n	80035de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f2:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d00c      	beq.n	8003518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fe:	4b85      	ldr	r3, [pc, #532]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003506:	2b08      	cmp	r3, #8
 8003508:	d112      	bne.n	8003530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350a:	4b82      	ldr	r3, [pc, #520]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003516:	d10b      	bne.n	8003530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	4b7e      	ldr	r3, [pc, #504]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d05b      	beq.n	80035dc <HAL_RCC_OscConfig+0x108>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d157      	bne.n	80035dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e242      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d106      	bne.n	8003548 <HAL_RCC_OscConfig+0x74>
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e01d      	b.n	8003584 <HAL_RCC_OscConfig+0xb0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x98>
 8003552:	4b70      	ldr	r3, [pc, #448]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6f      	ldr	r2, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b6d      	ldr	r3, [pc, #436]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6c      	ldr	r2, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0xb0>
 800356c:	4b69      	ldr	r3, [pc, #420]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a68      	ldr	r2, [pc, #416]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b66      	ldr	r3, [pc, #408]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a65      	ldr	r2, [pc, #404]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7ff f882 	bl	8002694 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003594:	f7ff f87e 	bl	8002694 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e207      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b5b      	ldr	r3, [pc, #364]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0xc0>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7ff f86e 	bl	8002694 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035bc:	f7ff f86a 	bl	8002694 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1f3      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	4b51      	ldr	r3, [pc, #324]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0xe8>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d063      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ea:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b44      	ldr	r3, [pc, #272]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x152>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1c7      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4937      	ldr	r1, [pc, #220]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <HAL_RCC_OscConfig+0x244>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7ff f823 	bl	8002694 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003652:	f7ff f81f 	bl	8002694 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1a8      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4925      	ldr	r1, [pc, #148]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_OscConfig+0x244>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7ff f802 	bl	8002694 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003694:	f7fe fffe 	bl	8002694 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e187      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d036      	beq.n	800372c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0x248>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe ffe2 	bl	8002694 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe ffde 	bl	8002694 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e167      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x240>)
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x200>
 80036f2:	e01b      	b.n	800372c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_OscConfig+0x248>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7fe ffcb 	bl	8002694 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	e00e      	b.n	8003720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe ffc7 	bl	8002694 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d907      	bls.n	8003720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e150      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
 8003714:	40023800 	.word	0x40023800
 8003718:	42470000 	.word	0x42470000
 800371c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	4b88      	ldr	r3, [pc, #544]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ea      	bne.n	8003702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8097 	beq.w	8003868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b81      	ldr	r3, [pc, #516]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b7d      	ldr	r3, [pc, #500]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a7c      	ldr	r2, [pc, #496]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b7a      	ldr	r3, [pc, #488]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b77      	ldr	r3, [pc, #476]	; (8003948 <HAL_RCC_OscConfig+0x474>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b74      	ldr	r3, [pc, #464]	; (8003948 <HAL_RCC_OscConfig+0x474>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a73      	ldr	r2, [pc, #460]	; (8003948 <HAL_RCC_OscConfig+0x474>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fe ff87 	bl	8002694 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fe ff83 	bl	8002694 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e10c      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <HAL_RCC_OscConfig+0x474>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x2ea>
 80037b0:	4b64      	ldr	r3, [pc, #400]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a63      	ldr	r2, [pc, #396]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
 80037bc:	e01c      	b.n	80037f8 <HAL_RCC_OscConfig+0x324>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x30c>
 80037c6:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a5e      	ldr	r2, [pc, #376]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	4b5c      	ldr	r3, [pc, #368]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a5b      	ldr	r2, [pc, #364]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0x324>
 80037e0:	4b58      	ldr	r3, [pc, #352]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a57      	ldr	r2, [pc, #348]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	4b55      	ldr	r3, [pc, #340]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a54      	ldr	r2, [pc, #336]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe ff48 	bl	8002694 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe ff44 	bl	8002694 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0cb      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	4b49      	ldr	r3, [pc, #292]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RCC_OscConfig+0x334>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382c:	f7fe ff32 	bl	8002694 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fe ff2e 	bl	8002694 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0b5      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	4b3e      	ldr	r3, [pc, #248]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ee      	bne.n	8003834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b39      	ldr	r3, [pc, #228]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	4a38      	ldr	r2, [pc, #224]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80a1 	beq.w	80039b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003872:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d05c      	beq.n	8003938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d141      	bne.n	800390a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b31      	ldr	r3, [pc, #196]	; (800394c <HAL_RCC_OscConfig+0x478>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe ff02 	bl	8002694 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fefe 	bl	8002694 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e087      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b27      	ldr	r3, [pc, #156]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	491b      	ldr	r1, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x478>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e2:	f7fe fed7 	bl	8002694 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fe fed3 	bl	8002694 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e05c      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x416>
 8003908:	e054      	b.n	80039b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <HAL_RCC_OscConfig+0x478>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fec0 	bl	8002694 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe febc 	bl	8002694 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e045      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_OscConfig+0x470>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x444>
 8003936:	e03d      	b.n	80039b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e038      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
 8003944:	40023800 	.word	0x40023800
 8003948:	40007000 	.word	0x40007000
 800394c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x4ec>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d028      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d121      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d11a      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003988:	4293      	cmp	r3, r2
 800398a:	d111      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	3b01      	subs	r3, #1
 800399a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0cc      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d90c      	bls.n	8003a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0b8      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d020      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a18:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a58      	ldr	r2, [pc, #352]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a30:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a52      	ldr	r2, [pc, #328]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3c:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	494d      	ldr	r1, [pc, #308]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d044      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d119      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e07f      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e06f      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e067      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa2:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f023 0203 	bic.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4934      	ldr	r1, [pc, #208]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab4:	f7fe fdee 	bl	8002694 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abc:	f7fe fdea 	bl	8002694 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e04f      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 020c 	and.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1eb      	bne.n	8003abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d20c      	bcs.n	8003b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e032      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4916      	ldr	r1, [pc, #88]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	490e      	ldr	r1, [pc, #56]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b4a:	f000 f821 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	490a      	ldr	r1, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	5ccb      	ldrb	r3, [r1, r3]
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b66:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe fd4e 	bl	800260c <HAL_InitTick>

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00
 8003b80:	40023800 	.word	0x40023800
 8003b84:	0800a514 	.word	0x0800a514
 8003b88:	20000008 	.word	0x20000008
 8003b8c:	2000001c 	.word	0x2000001c

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b94:	b090      	sub	sp, #64	; 0x40
 8003b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	f200 80a1 	bhi.w	8003cfc <HAL_RCC_GetSysClockFreq+0x16c>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0x3a>
 8003bc2:	e09b      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bc8:	e09b      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bca:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bce:	e098      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd0:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bda:	4b4d      	ldr	r3, [pc, #308]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d028      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be6:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	2200      	movs	r2, #0
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bfc:	fb03 f201 	mul.w	r2, r3, r1
 8003c00:	2300      	movs	r3, #0
 8003c02:	fb00 f303 	mul.w	r3, r0, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	4a43      	ldr	r2, [pc, #268]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c0a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c10:	460a      	mov	r2, r1
 8003c12:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c16:	4413      	add	r3, r2
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	61fa      	str	r2, [r7, #28]
 8003c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c2a:	f7fc fb31 	bl	8000290 <__aeabi_uldivmod>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4613      	mov	r3, r2
 8003c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c36:	e053      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	2200      	movs	r2, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	617a      	str	r2, [r7, #20]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c4a:	f04f 0b00 	mov.w	fp, #0
 8003c4e:	4652      	mov	r2, sl
 8003c50:	465b      	mov	r3, fp
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	0159      	lsls	r1, r3, #5
 8003c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c60:	0150      	lsls	r0, r2, #5
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	ebb2 080a 	subs.w	r8, r2, sl
 8003c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c82:	ebb2 0408 	subs.w	r4, r2, r8
 8003c86:	eb63 0509 	sbc.w	r5, r3, r9
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	00eb      	lsls	r3, r5, #3
 8003c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c98:	00e2      	lsls	r2, r4, #3
 8003c9a:	4614      	mov	r4, r2
 8003c9c:	461d      	mov	r5, r3
 8003c9e:	eb14 030a 	adds.w	r3, r4, sl
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	eb45 030b 	adc.w	r3, r5, fp
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	028b      	lsls	r3, r1, #10
 8003cba:	4621      	mov	r1, r4
 8003cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	028a      	lsls	r2, r1, #10
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	2200      	movs	r2, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	60fa      	str	r2, [r7, #12]
 8003cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cd4:	f7fc fadc 	bl	8000290 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4613      	mov	r3, r2
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cfa:	e002      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3740      	adds	r7, #64	; 0x40
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	017d7840 	.word	0x017d7840

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000008 	.word	0x20000008

08003d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d38:	f7ff fff0 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0a9b      	lsrs	r3, r3, #10
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	0800a524 	.word	0x0800a524

08003d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d60:	f7ff ffdc 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0b5b      	lsrs	r3, r3, #13
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	0800a524 	.word	0x0800a524

08003d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e07b      	b.n	8003e8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da6:	d009      	beq.n	8003dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	61da      	str	r2, [r3, #28]
 8003dae:	e005      	b.n	8003dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd f846 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	ea42 0103 	orr.w	r1, r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	f003 0104 	and.w	r1, r3, #4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f003 0210 	and.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b088      	sub	sp, #32
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_SPI_Transmit+0x22>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e126      	b.n	8004106 <HAL_SPI_Transmit+0x270>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec0:	f7fe fbe8 	bl	8002694 <HAL_GetTick>
 8003ec4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d002      	beq.n	8003edc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eda:	e10b      	b.n	80040f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_SPI_Transmit+0x52>
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eec:	e102      	b.n	80040f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	88fa      	ldrh	r2, [r7, #6]
 8003f06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f34:	d10f      	bne.n	8003f56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d007      	beq.n	8003f74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7c:	d14b      	bne.n	8004016 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Transmit+0xf6>
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d13e      	bne.n	800400a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	881a      	ldrh	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	1c9a      	adds	r2, r3, #2
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fb0:	e02b      	b.n	800400a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d112      	bne.n	8003fe6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	881a      	ldrh	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	1c9a      	adds	r2, r3, #2
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fe4:	e011      	b.n	800400a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fe6:	f7fe fb55 	bl	8002694 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d803      	bhi.n	8003ffe <HAL_SPI_Transmit+0x168>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ffc:	d102      	bne.n	8004004 <HAL_SPI_Transmit+0x16e>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004008:	e074      	b.n	80040f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1ce      	bne.n	8003fb2 <HAL_SPI_Transmit+0x11c>
 8004014:	e04c      	b.n	80040b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_SPI_Transmit+0x18e>
 800401e:	8afb      	ldrh	r3, [r7, #22]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d140      	bne.n	80040a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	7812      	ldrb	r2, [r2, #0]
 8004030:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800404a:	e02c      	b.n	80040a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b02      	cmp	r3, #2
 8004058:	d113      	bne.n	8004082 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004080:	e011      	b.n	80040a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004082:	f7fe fb07 	bl	8002694 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d803      	bhi.n	800409a <HAL_SPI_Transmit+0x204>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004098:	d102      	bne.n	80040a0 <HAL_SPI_Transmit+0x20a>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040a4:	e026      	b.n	80040f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1cd      	bne.n	800404c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	6839      	ldr	r1, [r7, #0]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fa09 	bl	80044cc <SPI_EndRxTxTransaction>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e000      	b.n	80040f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004104:	7ffb      	ldrb	r3, [r7, #31]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_SPI_Transmit_DMA+0x20>
 800412c:	2302      	movs	r3, #2
 800412e:	e09b      	b.n	8004268 <HAL_SPI_Transmit_DMA+0x158>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d002      	beq.n	800414a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004144:	2302      	movs	r3, #2
 8004146:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004148:	e089      	b.n	800425e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Transmit_DMA+0x46>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	75fb      	strb	r3, [r7, #23]
    goto error;
 800415a:	e080      	b.n	800425e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2203      	movs	r2, #3
 8004160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	d10f      	bne.n	80041c4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c8:	4a29      	ldr	r2, [pc, #164]	; (8004270 <HAL_SPI_Transmit_DMA+0x160>)
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d0:	4a28      	ldr	r2, [pc, #160]	; (8004274 <HAL_SPI_Transmit_DMA+0x164>)
 80041d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <HAL_SPI_Transmit_DMA+0x168>)
 80041da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e0:	2200      	movs	r2, #0
 80041e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	4619      	mov	r1, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80041fc:	f7fe fc5a 	bl	8002ab4 <HAL_DMA_Start_IT>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00c      	beq.n	8004220 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f043 0210 	orr.w	r2, r3, #16
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800421e:	e01e      	b.n	800425e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d007      	beq.n	800423e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0220 	orr.w	r2, r2, #32
 800424c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0202 	orr.w	r2, r2, #2
 800425c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	08004361 	.word	0x08004361
 8004274:	080042b9 	.word	0x080042b9
 8004278:	0800437d 	.word	0x0800437d

0800427c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c6:	f7fe f9e5 	bl	8002694 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d03b      	beq.n	8004354 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0220 	bic.w	r2, r2, #32
 80042ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0202 	bic.w	r2, r2, #2
 80042fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	2164      	movs	r1, #100	; 0x64
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f000 f8e3 	bl	80044cc <SPI_EndRxTxTransaction>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	f043 0220 	orr.w	r2, r3, #32
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800434c:	6978      	ldr	r0, [r7, #20]
 800434e:	f7ff ffa9 	bl	80042a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004352:	e002      	b.n	800435a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004354:	6978      	ldr	r0, [r7, #20]
 8004356:	f7ff ff91 	bl	800427c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ff8e 	bl	8004290 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0203 	bic.w	r2, r2, #3
 8004398:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f043 0210 	orr.w	r2, r3, #16
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff ff78 	bl	80042a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043cc:	f7fe f962 	bl	8002694 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043dc:	f7fe f95a 	bl	8002694 <HAL_GetTick>
 80043e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043e2:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	015b      	lsls	r3, r3, #5
 80043e8:	0d1b      	lsrs	r3, r3, #20
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043f2:	e054      	b.n	800449e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fa:	d050      	beq.n	800449e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043fc:	f7fe f94a 	bl	8002694 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	429a      	cmp	r2, r3
 800440a:	d902      	bls.n	8004412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d13d      	bne.n	800448e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442a:	d111      	bne.n	8004450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	d004      	beq.n	8004440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443e:	d107      	bne.n	8004450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004458:	d10f      	bne.n	800447a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e017      	b.n	80044be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3b01      	subs	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4013      	ands	r3, r2
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d19b      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000008 	.word	0x20000008

080044cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <SPI_EndRxTxTransaction+0x7c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1b      	ldr	r2, [pc, #108]	; (800454c <SPI_EndRxTxTransaction+0x80>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0d5b      	lsrs	r3, r3, #21
 80044e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f6:	d112      	bne.n	800451e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff ff5a 	bl	80043bc <SPI_WaitFlagStateUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d016      	beq.n	800453c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e00f      	b.n	800453e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3b01      	subs	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d0f2      	beq.n	800451e <SPI_EndRxTxTransaction+0x52>
 8004538:	e000      	b.n	800453c <SPI_EndRxTxTransaction+0x70>
        break;
 800453a:	bf00      	nop
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000008 	.word	0x20000008
 800454c:	165e9f81 	.word	0x165e9f81

08004550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e041      	b.n	80045e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fc fd38 	bl	8000fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f000 fbea 	bl	8004d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e044      	b.n	8004692 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d018      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d013      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a17      	ldr	r2, [pc, #92]	; (80046ac <HAL_TIM_Base_Start_IT+0xbc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d111      	bne.n	8004680 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b06      	cmp	r3, #6
 800466c:	d010      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467e:	e007      	b.n	8004690 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40014000 	.word	0x40014000

080046b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10f      	bne.n	80046fc <HAL_TIM_Base_Stop_IT+0x48>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	f240 4344 	movw	r3, #1092	; 0x444
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d107      	bne.n	80046fc <HAL_TIM_Base_Stop_IT+0x48>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e097      	b.n	8004856 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc fc0e 	bl	8000f5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f000 fafe 	bl	8004d68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004794:	f023 0303 	bic.w	r3, r3, #3
 8004798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	4313      	orrs	r3, r2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80047b2:	f023 030c 	bic.w	r3, r3, #12
 80047b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	4313      	orrs	r3, r2
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	011a      	lsls	r2, r3, #4
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	031b      	lsls	r3, r3, #12
 80047e2:	4313      	orrs	r3, r2
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	4313      	orrs	r3, r2
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004876:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800487e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004886:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d110      	bne.n	80048b0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d102      	bne.n	800489a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004894:	7b7b      	ldrb	r3, [r7, #13]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e069      	b.n	8004972 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ae:	e031      	b.n	8004914 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d110      	bne.n	80048d8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d102      	bne.n	80048c2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048bc:	7b3b      	ldrb	r3, [r7, #12]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d001      	beq.n	80048c6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e055      	b.n	8004972 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048d6:	e01d      	b.n	8004914 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d108      	bne.n	80048f0 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048de:	7bbb      	ldrb	r3, [r7, #14]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048e4:	7b7b      	ldrb	r3, [r7, #13]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d102      	bne.n	80048f0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048ea:	7b3b      	ldrb	r3, [r7, #12]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d001      	beq.n	80048f4 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e03e      	b.n	8004972 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_Encoder_Start+0xc4>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d008      	beq.n	8004932 <HAL_TIM_Encoder_Start+0xd4>
 8004920:	e00f      	b.n	8004942 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fb36 	bl	8004f9c <TIM_CCxChannelCmd>
      break;
 8004930:	e016      	b.n	8004960 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	2104      	movs	r1, #4
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fb2e 	bl	8004f9c <TIM_CCxChannelCmd>
      break;
 8004940:	e00e      	b.n	8004960 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb26 	bl	8004f9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2201      	movs	r2, #1
 8004956:	2104      	movs	r1, #4
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fb1f 	bl	8004f9c <TIM_CCxChannelCmd>
      break;
 800495e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d122      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d11b      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f06f 0202 	mvn.w	r2, #2
 80049a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f9b5 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 80049c2:	e005      	b.n	80049d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f9a7 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9b8 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d122      	bne.n	8004a2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d11b      	bne.n	8004a2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0204 	mvn.w	r2, #4
 80049fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f98b 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 8004a16:	e005      	b.n	8004a24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f97d 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f98e 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d122      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11b      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0208 	mvn.w	r2, #8
 8004a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2204      	movs	r2, #4
 8004a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f961 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 8004a6a:	e005      	b.n	8004a78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f953 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f964 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d122      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d11b      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0210 	mvn.w	r2, #16
 8004aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f937 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 8004abe:	e005      	b.n	8004acc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f929 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f93a 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10e      	bne.n	8004afe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0201 	mvn.w	r2, #1
 8004af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fb fe8d 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d10e      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fad7 	bl	80050d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d10e      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8ff 	bl	8004d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d10e      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d107      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0220 	mvn.w	r2, #32
 8004b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 faa1 	bl	80050c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e0b4      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x186>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bcc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d03e      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xd4>
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be4:	f200 8087 	bhi.w	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bec:	f000 8086 	beq.w	8004cfc <HAL_TIM_ConfigClockSource+0x172>
 8004bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf4:	d87f      	bhi.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf6:	2b70      	cmp	r3, #112	; 0x70
 8004bf8:	d01a      	beq.n	8004c30 <HAL_TIM_ConfigClockSource+0xa6>
 8004bfa:	2b70      	cmp	r3, #112	; 0x70
 8004bfc:	d87b      	bhi.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfe:	2b60      	cmp	r3, #96	; 0x60
 8004c00:	d050      	beq.n	8004ca4 <HAL_TIM_ConfigClockSource+0x11a>
 8004c02:	2b60      	cmp	r3, #96	; 0x60
 8004c04:	d877      	bhi.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8004c06:	2b50      	cmp	r3, #80	; 0x50
 8004c08:	d03c      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0xfa>
 8004c0a:	2b50      	cmp	r3, #80	; 0x50
 8004c0c:	d873      	bhi.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d058      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x13a>
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d86f      	bhi.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8004c16:	2b30      	cmp	r3, #48	; 0x30
 8004c18:	d064      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0x15a>
 8004c1a:	2b30      	cmp	r3, #48	; 0x30
 8004c1c:	d86b      	bhi.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d060      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0x15a>
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d867      	bhi.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d05c      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0x15a>
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d05a      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0x15a>
 8004c2e:	e062      	b.n	8004cf6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6899      	ldr	r1, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f000 f98c 	bl	8004f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
      break;
 8004c5c:	e04f      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6899      	ldr	r1, [r3, #8]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f000 f975 	bl	8004f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c80:	609a      	str	r2, [r3, #8]
      break;
 8004c82:	e03c      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	461a      	mov	r2, r3
 8004c92:	f000 f8e9 	bl	8004e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2150      	movs	r1, #80	; 0x50
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f942 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004ca2:	e02c      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	6859      	ldr	r1, [r3, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f000 f908 	bl	8004ec6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2160      	movs	r1, #96	; 0x60
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f932 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004cc2:	e01c      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f000 f8c9 	bl	8004e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2140      	movs	r1, #64	; 0x40
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f922 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004ce2:	e00c      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f000 f919 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e003      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfa:	e000      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a34      	ldr	r2, [pc, #208]	; (8004e4c <TIM_Base_SetConfig+0xe4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00f      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d86:	d00b      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a31      	ldr	r2, [pc, #196]	; (8004e50 <TIM_Base_SetConfig+0xe8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a30      	ldr	r2, [pc, #192]	; (8004e54 <TIM_Base_SetConfig+0xec>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a2f      	ldr	r2, [pc, #188]	; (8004e58 <TIM_Base_SetConfig+0xf0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <TIM_Base_SetConfig+0xe4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01b      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d017      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <TIM_Base_SetConfig+0xe8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <TIM_Base_SetConfig+0xec>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <TIM_Base_SetConfig+0xf0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <TIM_Base_SetConfig+0xf4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <TIM_Base_SetConfig+0xf8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <TIM_Base_SetConfig+0xfc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d108      	bne.n	8004e04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <TIM_Base_SetConfig+0xe4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40014400 	.word	0x40014400
 8004e64:	40014800 	.word	0x40014800

08004e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 030a 	bic.w	r3, r3, #10
 8004ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0210 	bic.w	r2, r3, #16
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	031b      	lsls	r3, r3, #12
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f043 0307 	orr.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2201      	movs	r2, #1
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e050      	b.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d018      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d013      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d10c      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	4313      	orrs	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40000c00 	.word	0x40000c00
 80050c0:	40014000 	.word	0x40014000

080050c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e03f      	b.n	800517e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fb ff90 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2224      	movs	r2, #36	; 0x24
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800512e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f929 	bl	8005388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695a      	ldr	r2, [r3, #20]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b08a      	sub	sp, #40	; 0x28
 800518a:	af02      	add	r7, sp, #8
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d17c      	bne.n	80052a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_UART_Transmit+0x2c>
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e075      	b.n	80052a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_UART_Transmit+0x3e>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e06e      	b.n	80052a2 <HAL_UART_Transmit+0x11c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2221      	movs	r2, #33	; 0x21
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051da:	f7fd fa5b 	bl	8002694 <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	88fa      	ldrh	r2, [r7, #6]
 80051e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	88fa      	ldrh	r2, [r7, #6]
 80051ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f4:	d108      	bne.n	8005208 <HAL_UART_Transmit+0x82>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e003      	b.n	8005210 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005218:	e02a      	b.n	8005270 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	2180      	movs	r1, #128	; 0x80
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f840 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e036      	b.n	80052a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005248:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	3302      	adds	r3, #2
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e007      	b.n	8005262 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	781a      	ldrb	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3301      	adds	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1cf      	bne.n	800521a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2200      	movs	r2, #0
 8005282:	2140      	movs	r1, #64	; 0x40
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f810 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e006      	b.n	80052a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	e000      	b.n	80052a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
  }
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b090      	sub	sp, #64	; 0x40
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	4613      	mov	r3, r2
 80052b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ba:	e050      	b.n	800535e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c2:	d04c      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <UART_WaitOnFlagUntilTimeout+0x30>
 80052ca:	f7fd f9e3 	bl	8002694 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d241      	bcs.n	800535e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fa:	637a      	str	r2, [r7, #52]	; 0x34
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3314      	adds	r3, #20
 8005314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	613b      	str	r3, [r7, #16]
   return(result);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800532e:	623a      	str	r2, [r7, #32]
 8005330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	61bb      	str	r3, [r7, #24]
   return(result);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e00f      	b.n	800537e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4013      	ands	r3, r2
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	429a      	cmp	r2, r3
 800537a:	d09f      	beq.n	80052bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3740      	adds	r7, #64	; 0x40
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800538c:	b0c0      	sub	sp, #256	; 0x100
 800538e:	af00      	add	r7, sp, #0
 8005390:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a4:	68d9      	ldr	r1, [r3, #12]
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	ea40 0301 	orr.w	r3, r0, r1
 80053b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	431a      	orrs	r2, r3
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053e0:	f021 010c 	bic.w	r1, r1, #12
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ee:	430b      	orrs	r3, r1
 80053f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005402:	6999      	ldr	r1, [r3, #24]
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	ea40 0301 	orr.w	r3, r0, r1
 800540e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b8f      	ldr	r3, [pc, #572]	; (8005654 <UART_SetConfig+0x2cc>)
 8005418:	429a      	cmp	r2, r3
 800541a:	d005      	beq.n	8005428 <UART_SetConfig+0xa0>
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b8d      	ldr	r3, [pc, #564]	; (8005658 <UART_SetConfig+0x2d0>)
 8005424:	429a      	cmp	r2, r3
 8005426:	d104      	bne.n	8005432 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe fc98 	bl	8003d5c <HAL_RCC_GetPCLK2Freq>
 800542c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005430:	e003      	b.n	800543a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005432:	f7fe fc7f 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 8005436:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005444:	f040 810c 	bne.w	8005660 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800544c:	2200      	movs	r2, #0
 800544e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005452:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005456:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800545a:	4622      	mov	r2, r4
 800545c:	462b      	mov	r3, r5
 800545e:	1891      	adds	r1, r2, r2
 8005460:	65b9      	str	r1, [r7, #88]	; 0x58
 8005462:	415b      	adcs	r3, r3
 8005464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005466:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800546a:	4621      	mov	r1, r4
 800546c:	eb12 0801 	adds.w	r8, r2, r1
 8005470:	4629      	mov	r1, r5
 8005472:	eb43 0901 	adc.w	r9, r3, r1
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548a:	4690      	mov	r8, r2
 800548c:	4699      	mov	r9, r3
 800548e:	4623      	mov	r3, r4
 8005490:	eb18 0303 	adds.w	r3, r8, r3
 8005494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005498:	462b      	mov	r3, r5
 800549a:	eb49 0303 	adc.w	r3, r9, r3
 800549e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054b6:	460b      	mov	r3, r1
 80054b8:	18db      	adds	r3, r3, r3
 80054ba:	653b      	str	r3, [r7, #80]	; 0x50
 80054bc:	4613      	mov	r3, r2
 80054be:	eb42 0303 	adc.w	r3, r2, r3
 80054c2:	657b      	str	r3, [r7, #84]	; 0x54
 80054c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054cc:	f7fa fee0 	bl	8000290 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4b61      	ldr	r3, [pc, #388]	; (800565c <UART_SetConfig+0x2d4>)
 80054d6:	fba3 2302 	umull	r2, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	011c      	lsls	r4, r3, #4
 80054de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	1891      	adds	r1, r2, r2
 80054f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80054f8:	415b      	adcs	r3, r3
 80054fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005500:	4641      	mov	r1, r8
 8005502:	eb12 0a01 	adds.w	sl, r2, r1
 8005506:	4649      	mov	r1, r9
 8005508:	eb43 0b01 	adc.w	fp, r3, r1
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005518:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800551c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005520:	4692      	mov	sl, r2
 8005522:	469b      	mov	fp, r3
 8005524:	4643      	mov	r3, r8
 8005526:	eb1a 0303 	adds.w	r3, sl, r3
 800552a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800552e:	464b      	mov	r3, r9
 8005530:	eb4b 0303 	adc.w	r3, fp, r3
 8005534:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005544:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005548:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800554c:	460b      	mov	r3, r1
 800554e:	18db      	adds	r3, r3, r3
 8005550:	643b      	str	r3, [r7, #64]	; 0x40
 8005552:	4613      	mov	r3, r2
 8005554:	eb42 0303 	adc.w	r3, r2, r3
 8005558:	647b      	str	r3, [r7, #68]	; 0x44
 800555a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800555e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005562:	f7fa fe95 	bl	8000290 <__aeabi_uldivmod>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4611      	mov	r1, r2
 800556c:	4b3b      	ldr	r3, [pc, #236]	; (800565c <UART_SetConfig+0x2d4>)
 800556e:	fba3 2301 	umull	r2, r3, r3, r1
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	2264      	movs	r2, #100	; 0x64
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	1acb      	subs	r3, r1, r3
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005582:	4b36      	ldr	r3, [pc, #216]	; (800565c <UART_SetConfig+0x2d4>)
 8005584:	fba3 2302 	umull	r2, r3, r3, r2
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005590:	441c      	add	r4, r3
 8005592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005596:	2200      	movs	r2, #0
 8005598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800559c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	1891      	adds	r1, r2, r2
 80055aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80055ac:	415b      	adcs	r3, r3
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055b4:	4641      	mov	r1, r8
 80055b6:	1851      	adds	r1, r2, r1
 80055b8:	6339      	str	r1, [r7, #48]	; 0x30
 80055ba:	4649      	mov	r1, r9
 80055bc:	414b      	adcs	r3, r1
 80055be:	637b      	str	r3, [r7, #52]	; 0x34
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055cc:	4659      	mov	r1, fp
 80055ce:	00cb      	lsls	r3, r1, #3
 80055d0:	4651      	mov	r1, sl
 80055d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d6:	4651      	mov	r1, sl
 80055d8:	00ca      	lsls	r2, r1, #3
 80055da:	4610      	mov	r0, r2
 80055dc:	4619      	mov	r1, r3
 80055de:	4603      	mov	r3, r0
 80055e0:	4642      	mov	r2, r8
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055e8:	464b      	mov	r3, r9
 80055ea:	460a      	mov	r2, r1
 80055ec:	eb42 0303 	adc.w	r3, r2, r3
 80055f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005600:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005608:	460b      	mov	r3, r1
 800560a:	18db      	adds	r3, r3, r3
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28
 800560e:	4613      	mov	r3, r2
 8005610:	eb42 0303 	adc.w	r3, r2, r3
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800561a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800561e:	f7fa fe37 	bl	8000290 <__aeabi_uldivmod>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4b0d      	ldr	r3, [pc, #52]	; (800565c <UART_SetConfig+0x2d4>)
 8005628:	fba3 1302 	umull	r1, r3, r3, r2
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	2164      	movs	r1, #100	; 0x64
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	3332      	adds	r3, #50	; 0x32
 800563a:	4a08      	ldr	r2, [pc, #32]	; (800565c <UART_SetConfig+0x2d4>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	f003 0207 	and.w	r2, r3, #7
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4422      	add	r2, r4
 800564e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005650:	e105      	b.n	800585e <UART_SetConfig+0x4d6>
 8005652:	bf00      	nop
 8005654:	40011000 	.word	0x40011000
 8005658:	40011400 	.word	0x40011400
 800565c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005664:	2200      	movs	r2, #0
 8005666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800566a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800566e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005672:	4642      	mov	r2, r8
 8005674:	464b      	mov	r3, r9
 8005676:	1891      	adds	r1, r2, r2
 8005678:	6239      	str	r1, [r7, #32]
 800567a:	415b      	adcs	r3, r3
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
 800567e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005682:	4641      	mov	r1, r8
 8005684:	1854      	adds	r4, r2, r1
 8005686:	4649      	mov	r1, r9
 8005688:	eb43 0501 	adc.w	r5, r3, r1
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	00eb      	lsls	r3, r5, #3
 8005696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800569a:	00e2      	lsls	r2, r4, #3
 800569c:	4614      	mov	r4, r2
 800569e:	461d      	mov	r5, r3
 80056a0:	4643      	mov	r3, r8
 80056a2:	18e3      	adds	r3, r4, r3
 80056a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056a8:	464b      	mov	r3, r9
 80056aa:	eb45 0303 	adc.w	r3, r5, r3
 80056ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056ce:	4629      	mov	r1, r5
 80056d0:	008b      	lsls	r3, r1, #2
 80056d2:	4621      	mov	r1, r4
 80056d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d8:	4621      	mov	r1, r4
 80056da:	008a      	lsls	r2, r1, #2
 80056dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056e0:	f7fa fdd6 	bl	8000290 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4b60      	ldr	r3, [pc, #384]	; (800586c <UART_SetConfig+0x4e4>)
 80056ea:	fba3 2302 	umull	r2, r3, r3, r2
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	011c      	lsls	r4, r3, #4
 80056f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005700:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005704:	4642      	mov	r2, r8
 8005706:	464b      	mov	r3, r9
 8005708:	1891      	adds	r1, r2, r2
 800570a:	61b9      	str	r1, [r7, #24]
 800570c:	415b      	adcs	r3, r3
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005714:	4641      	mov	r1, r8
 8005716:	1851      	adds	r1, r2, r1
 8005718:	6139      	str	r1, [r7, #16]
 800571a:	4649      	mov	r1, r9
 800571c:	414b      	adcs	r3, r1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800572c:	4659      	mov	r1, fp
 800572e:	00cb      	lsls	r3, r1, #3
 8005730:	4651      	mov	r1, sl
 8005732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005736:	4651      	mov	r1, sl
 8005738:	00ca      	lsls	r2, r1, #3
 800573a:	4610      	mov	r0, r2
 800573c:	4619      	mov	r1, r3
 800573e:	4603      	mov	r3, r0
 8005740:	4642      	mov	r2, r8
 8005742:	189b      	adds	r3, r3, r2
 8005744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005748:	464b      	mov	r3, r9
 800574a:	460a      	mov	r2, r1
 800574c:	eb42 0303 	adc.w	r3, r2, r3
 8005750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	67bb      	str	r3, [r7, #120]	; 0x78
 800575e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800576c:	4649      	mov	r1, r9
 800576e:	008b      	lsls	r3, r1, #2
 8005770:	4641      	mov	r1, r8
 8005772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005776:	4641      	mov	r1, r8
 8005778:	008a      	lsls	r2, r1, #2
 800577a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800577e:	f7fa fd87 	bl	8000290 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4b39      	ldr	r3, [pc, #228]	; (800586c <UART_SetConfig+0x4e4>)
 8005788:	fba3 1302 	umull	r1, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	2164      	movs	r1, #100	; 0x64
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	3332      	adds	r3, #50	; 0x32
 800579a:	4a34      	ldr	r2, [pc, #208]	; (800586c <UART_SetConfig+0x4e4>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a6:	441c      	add	r4, r3
 80057a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ac:	2200      	movs	r2, #0
 80057ae:	673b      	str	r3, [r7, #112]	; 0x70
 80057b0:	677a      	str	r2, [r7, #116]	; 0x74
 80057b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057b6:	4642      	mov	r2, r8
 80057b8:	464b      	mov	r3, r9
 80057ba:	1891      	adds	r1, r2, r2
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	415b      	adcs	r3, r3
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c6:	4641      	mov	r1, r8
 80057c8:	1851      	adds	r1, r2, r1
 80057ca:	6039      	str	r1, [r7, #0]
 80057cc:	4649      	mov	r1, r9
 80057ce:	414b      	adcs	r3, r1
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057de:	4659      	mov	r1, fp
 80057e0:	00cb      	lsls	r3, r1, #3
 80057e2:	4651      	mov	r1, sl
 80057e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e8:	4651      	mov	r1, sl
 80057ea:	00ca      	lsls	r2, r1, #3
 80057ec:	4610      	mov	r0, r2
 80057ee:	4619      	mov	r1, r3
 80057f0:	4603      	mov	r3, r0
 80057f2:	4642      	mov	r2, r8
 80057f4:	189b      	adds	r3, r3, r2
 80057f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057f8:	464b      	mov	r3, r9
 80057fa:	460a      	mov	r2, r1
 80057fc:	eb42 0303 	adc.w	r3, r2, r3
 8005800:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	663b      	str	r3, [r7, #96]	; 0x60
 800580c:	667a      	str	r2, [r7, #100]	; 0x64
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800581a:	4649      	mov	r1, r9
 800581c:	008b      	lsls	r3, r1, #2
 800581e:	4641      	mov	r1, r8
 8005820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005824:	4641      	mov	r1, r8
 8005826:	008a      	lsls	r2, r1, #2
 8005828:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800582c:	f7fa fd30 	bl	8000290 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4b0d      	ldr	r3, [pc, #52]	; (800586c <UART_SetConfig+0x4e4>)
 8005836:	fba3 1302 	umull	r1, r3, r3, r2
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	2164      	movs	r1, #100	; 0x64
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	3332      	adds	r3, #50	; 0x32
 8005848:	4a08      	ldr	r2, [pc, #32]	; (800586c <UART_SetConfig+0x4e4>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	f003 020f 	and.w	r2, r3, #15
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4422      	add	r2, r4
 800585c:	609a      	str	r2, [r3, #8]
}
 800585e:	bf00      	nop
 8005860:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005864:	46bd      	mov	sp, r7
 8005866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800586a:	bf00      	nop
 800586c:	51eb851f 	.word	0x51eb851f

08005870 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	607a      	str	r2, [r7, #4]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8005882:	89fb      	ldrh	r3, [r7, #14]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	b21a      	sxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	b21b      	sxth	r3, r3
 800588e:	4313      	orrs	r3, r2
 8005890:	b21b      	sxth	r3, r3
 8005892:	b29b      	uxth	r3, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	601a      	str	r2, [r3, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
#endif
   g->char_h_space = 1;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   g->char_v_space = 1;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   g->font=NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	611a      	str	r2, [r3, #16]
   g->currentFont.bytes_per_char = 0;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	831a      	strh	r2, [r3, #24]
   g->currentFont.char_height = 0;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	75da      	strb	r2, [r3, #23]
   g->currentFont.char_width = 0;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	759a      	strb	r2, [r3, #22]
   g->currentFont.number_of_chars = 0;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	835a      	strh	r2, [r3, #26]
   g->currentFont.number_of_offsets = 0;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	839a      	strh	r2, [r3, #28]
   g->currentFont.widths = NULL;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	621a      	str	r2, [r3, #32]
   g->currentFont.offsets = NULL;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24
   g->currentFont.data = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.font = NULL;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c
   g->desktop_color = C_DESKTOP_COLOR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8005902:	871a      	strh	r2, [r3, #56]	; 0x38
   g->fore_color = C_WHITE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->back_color = C_BLACK;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	86da      	strh	r2, [r3, #54]	; 0x36
   g->next_window = NULL;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	605a      	str	r2, [r3, #4]
   g->active_window = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]
   g->last_window = NULL;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	60da      	str	r2, [r3, #12]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8005924:	2300      	movs	r3, #0
 8005926:	73fb      	strb	r3, [r7, #15]
 8005928:	e010      	b.n	800594c <UG_Init+0xac>
   {
      g->driver[i].driver = NULL;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	3307      	adds	r3, #7
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	3307      	adds	r3, #7
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	4413      	add	r3, r2
 8005942:	2200      	movs	r2, #0
 8005944:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	3301      	adds	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d9eb      	bls.n	800592a <UG_Init+0x8a>
   }

   gui = g;
 8005952:	4a05      	ldr	r2, [pc, #20]	; (8005968 <UG_Init+0xc8>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6013      	str	r3, [r2, #0]
   return 1;
 8005958:	2301      	movs	r3, #1
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	200004dc 	.word	0x200004dc

0800596c <UG_GetGUI>:
   gui = g;
   return 1;
}

UG_GUI* UG_GetGUI( void )
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
   return gui;
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <UG_GetGUI+0x14>)
 8005972:	681b      	ldr	r3, [r3, #0]
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	200004dc 	.word	0x200004dc

08005984 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <UG_FontSelect+0x1c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	611a      	str	r2, [r3, #16]
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	200004dc 	.word	0x200004dc

080059a4 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	4603      	mov	r3, r0
 80059ac:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 80059ae:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <UG_FillScreen+0x44>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29b      	uxth	r3, r3
 80059be:	b21a      	sxth	r2, r3
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <UG_FillScreen+0x44>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	b219      	sxth	r1, r3
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	460b      	mov	r3, r1
 80059d8:	2100      	movs	r1, #0
 80059da:	2000      	movs	r0, #0
 80059dc:	f000 f806 	bl	80059ec <UG_FillFrame>
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	200004dc 	.word	0x200004dc

080059ec <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80059ec:	b5b0      	push	{r4, r5, r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	4604      	mov	r4, r0
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4623      	mov	r3, r4
 80059fc:	80fb      	strh	r3, [r7, #6]
 80059fe:	4603      	mov	r3, r0
 8005a00:	80bb      	strh	r3, [r7, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	807b      	strh	r3, [r7, #2]
 8005a06:	4613      	mov	r3, r2
 8005a08:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8005a0a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	da05      	bge.n	8005a22 <UG_FillFrame+0x36>
     swap(x1,x2);
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	887b      	ldrh	r3, [r7, #2]
 8005a1c:	80fb      	strh	r3, [r7, #6]
 8005a1e:	897b      	ldrh	r3, [r7, #10]
 8005a20:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005a22:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005a26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	da05      	bge.n	8005a3a <UG_FillFrame+0x4e>
     swap(y1,y2);
 8005a2e:	88bb      	ldrh	r3, [r7, #4]
 8005a30:	813b      	strh	r3, [r7, #8]
 8005a32:	883b      	ldrh	r3, [r7, #0]
 8005a34:	80bb      	strh	r3, [r7, #4]
 8005a36:	893b      	ldrh	r3, [r7, #8]
 8005a38:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8005a3a:	4b24      	ldr	r3, [pc, #144]	; (8005acc <UG_FillFrame+0xe0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d012      	beq.n	8005a70 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <UG_FillFrame+0xe0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a50:	461d      	mov	r5, r3
 8005a52:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a5a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005a5e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005a62:	8c3b      	ldrh	r3, [r7, #32]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4623      	mov	r3, r4
 8005a68:	47a8      	blx	r5
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d028      	beq.n	8005ac2 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8005a70:	88bb      	ldrh	r3, [r7, #4]
 8005a72:	81bb      	strh	r3, [r7, #12]
 8005a74:	e01e      	b.n	8005ab4 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	81fb      	strh	r3, [r7, #14]
 8005a7a:	e00f      	b.n	8005a9c <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8005a7c:	4b13      	ldr	r3, [pc, #76]	; (8005acc <UG_FillFrame+0xe0>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	8c3a      	ldrh	r2, [r7, #32]
 8005a86:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005a8a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005a8e:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8005a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3301      	adds	r3, #1
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	81fb      	strh	r3, [r7, #14]
 8005a9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	dde9      	ble.n	8005a7c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8005aa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	81bb      	strh	r3, [r7, #12]
 8005ab4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005ab8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	ddda      	ble.n	8005a76 <UG_FillFrame+0x8a>
 8005ac0:	e000      	b.n	8005ac4 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005ac2:	bf00      	nop
      }
   }
}
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200004dc 	.word	0x200004dc

08005ad0 <UG_DrawMesh>:
     x++;
   }
}

void UG_DrawMesh( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_U16 spacing, UG_COLOR c )
{
 8005ad0:	b590      	push	{r4, r7, lr}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4608      	mov	r0, r1
 8005ada:	4611      	mov	r1, r2
 8005adc:	461a      	mov	r2, r3
 8005ade:	4623      	mov	r3, r4
 8005ae0:	80fb      	strh	r3, [r7, #6]
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	80bb      	strh	r3, [r7, #4]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	807b      	strh	r3, [r7, #2]
 8005aea:	4613      	mov	r3, r2
 8005aec:	803b      	strh	r3, [r7, #0]
   UG_U16 p;

   if ( x2 < x1 )
 8005aee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	da05      	bge.n	8005b06 <UG_DrawMesh+0x36>
     swap(x1,x2);
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	81bb      	strh	r3, [r7, #12]
 8005afe:	887b      	ldrh	r3, [r7, #2]
 8005b00:	80fb      	strh	r3, [r7, #6]
 8005b02:	89bb      	ldrh	r3, [r7, #12]
 8005b04:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005b06:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005b0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	da05      	bge.n	8005b1e <UG_DrawMesh+0x4e>
     swap(y1,y2);
 8005b12:	88bb      	ldrh	r3, [r7, #4]
 8005b14:	817b      	strh	r3, [r7, #10]
 8005b16:	883b      	ldrh	r3, [r7, #0]
 8005b18:	80bb      	strh	r3, [r7, #4]
 8005b1a:	897b      	ldrh	r3, [r7, #10]
 8005b1c:	803b      	strh	r3, [r7, #0]

   for( p=y1; p<y2; p+=spacing )
 8005b1e:	88bb      	ldrh	r3, [r7, #4]
 8005b20:	81fb      	strh	r3, [r7, #14]
 8005b22:	e010      	b.n	8005b46 <UG_DrawMesh+0x76>
   {
     UG_DrawLine(x1, p, x2, p, c);
 8005b24:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8005b28:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005b2c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b30:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	4623      	mov	r3, r4
 8005b3a:	f000 fa61 	bl	8006000 <UG_DrawLine>
   for( p=y1; p<y2; p+=spacing )
 8005b3e:	89fa      	ldrh	r2, [r7, #14]
 8005b40:	8c3b      	ldrh	r3, [r7, #32]
 8005b42:	4413      	add	r3, r2
 8005b44:	81fb      	strh	r3, [r7, #14]
 8005b46:	89fa      	ldrh	r2, [r7, #14]
 8005b48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	dbe9      	blt.n	8005b24 <UG_DrawMesh+0x54>
   }
   UG_DrawLine(x1, y2, x2, y2, c);
 8005b50:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005b54:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b58:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005b5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	4623      	mov	r3, r4
 8005b66:	f000 fa4b 	bl	8006000 <UG_DrawLine>

   for( p=x1; p<x2; p+=spacing )
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	81fb      	strh	r3, [r7, #14]
 8005b6e:	e010      	b.n	8005b92 <UG_DrawMesh+0xc2>
   {
     UG_DrawLine(p, y1, p, y2, c);
 8005b70:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005b74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005b78:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005b7c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	4623      	mov	r3, r4
 8005b86:	f000 fa3b 	bl	8006000 <UG_DrawLine>
   for( p=x1; p<x2; p+=spacing )
 8005b8a:	89fa      	ldrh	r2, [r7, #14]
 8005b8c:	8c3b      	ldrh	r3, [r7, #32]
 8005b8e:	4413      	add	r3, r2
 8005b90:	81fb      	strh	r3, [r7, #14]
 8005b92:	89fa      	ldrh	r2, [r7, #14]
 8005b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	dbe9      	blt.n	8005b70 <UG_DrawMesh+0xa0>
   }
   UG_DrawLine(x2, y1, x2, y2, c);
 8005b9c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005ba0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ba4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ba8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	f000 fa25 	bl	8006000 <UG_DrawLine>
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}

08005bbe <UG_DrawFrame>:

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005bbe:	b590      	push	{r4, r7, lr}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af02      	add	r7, sp, #8
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	4611      	mov	r1, r2
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4623      	mov	r3, r4
 8005bce:	80fb      	strh	r3, [r7, #6]
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	80bb      	strh	r3, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8005bdc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005be0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005be4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005be8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005bec:	8b3b      	ldrh	r3, [r7, #24]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	f000 fa05 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8005bf6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005bfa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005bfe:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005c02:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005c06:	8b3b      	ldrh	r3, [r7, #24]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	4623      	mov	r3, r4
 8005c0c:	f000 f9f8 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8005c10:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005c14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c18:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c1c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005c20:	8b3b      	ldrh	r3, [r7, #24]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4623      	mov	r3, r4
 8005c26:	f000 f9eb 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8005c2a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005c2e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005c32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c36:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005c3a:	8b3b      	ldrh	r3, [r7, #24]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	4623      	mov	r3, r4
 8005c40:	f000 f9de 	bl	8006000 <UG_DrawLine>
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd90      	pop	{r4, r7, pc}

08005c4c <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	80fb      	strh	r3, [r7, #6]
 8005c56:	460b      	mov	r3, r1
 8005c58:	80bb      	strh	r3, [r7, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <UG_DrawPixel+0x30>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	887a      	ldrh	r2, [r7, #2]
 8005c68:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c6c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005c70:	4798      	blx	r3
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	200004dc 	.word	0x200004dc

08005c80 <UG_DrawCircle>:

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4604      	mov	r4, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4623      	mov	r3, r4
 8005c90:	80fb      	strh	r3, [r7, #6]
 8005c92:	4603      	mov	r3, r0
 8005c94:	80bb      	strh	r3, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	807b      	strh	r3, [r7, #2]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8005c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f2c0 80c8 	blt.w	8005e38 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8005ca8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f2c0 80c5 	blt.w	8005e3c <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8005cb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f340 80c2 	ble.w	8005e40 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8005cbc:	887b      	ldrh	r3, [r7, #2]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f1c3 0301 	rsb	r3, r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	823b      	strh	r3, [r7, #16]
   e = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	81fb      	strh	r3, [r7, #14]
   x = r;
 8005cd2:	887b      	ldrh	r3, [r7, #2]
 8005cd4:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8005cda:	e0a5      	b.n	8005e28 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8005cdc:	4b5a      	ldr	r3, [pc, #360]	; (8005e48 <UG_DrawCircle+0x1c8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	88f9      	ldrh	r1, [r7, #6]
 8005ce6:	8afa      	ldrh	r2, [r7, #22]
 8005ce8:	1a8a      	subs	r2, r1, r2
 8005cea:	b292      	uxth	r2, r2
 8005cec:	b210      	sxth	r0, r2
 8005cee:	88b9      	ldrh	r1, [r7, #4]
 8005cf0:	8aba      	ldrh	r2, [r7, #20]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	b292      	uxth	r2, r2
 8005cf6:	b211      	sxth	r1, r2
 8005cf8:	883a      	ldrh	r2, [r7, #0]
 8005cfa:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8005cfc:	4b52      	ldr	r3, [pc, #328]	; (8005e48 <UG_DrawCircle+0x1c8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	88f9      	ldrh	r1, [r7, #6]
 8005d06:	8afa      	ldrh	r2, [r7, #22]
 8005d08:	1a8a      	subs	r2, r1, r2
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	b210      	sxth	r0, r2
 8005d0e:	88b9      	ldrh	r1, [r7, #4]
 8005d10:	8aba      	ldrh	r2, [r7, #20]
 8005d12:	1a8a      	subs	r2, r1, r2
 8005d14:	b292      	uxth	r2, r2
 8005d16:	b211      	sxth	r1, r2
 8005d18:	883a      	ldrh	r2, [r7, #0]
 8005d1a:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8005d1c:	4b4a      	ldr	r3, [pc, #296]	; (8005e48 <UG_DrawCircle+0x1c8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	88f9      	ldrh	r1, [r7, #6]
 8005d26:	8afa      	ldrh	r2, [r7, #22]
 8005d28:	440a      	add	r2, r1
 8005d2a:	b292      	uxth	r2, r2
 8005d2c:	b210      	sxth	r0, r2
 8005d2e:	88b9      	ldrh	r1, [r7, #4]
 8005d30:	8aba      	ldrh	r2, [r7, #20]
 8005d32:	440a      	add	r2, r1
 8005d34:	b292      	uxth	r2, r2
 8005d36:	b211      	sxth	r1, r2
 8005d38:	883a      	ldrh	r2, [r7, #0]
 8005d3a:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8005d3c:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <UG_DrawCircle+0x1c8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	88f9      	ldrh	r1, [r7, #6]
 8005d46:	8afa      	ldrh	r2, [r7, #22]
 8005d48:	440a      	add	r2, r1
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	b210      	sxth	r0, r2
 8005d4e:	88b9      	ldrh	r1, [r7, #4]
 8005d50:	8aba      	ldrh	r2, [r7, #20]
 8005d52:	1a8a      	subs	r2, r1, r2
 8005d54:	b292      	uxth	r2, r2
 8005d56:	b211      	sxth	r1, r2
 8005d58:	883a      	ldrh	r2, [r7, #0]
 8005d5a:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8005d5c:	4b3a      	ldr	r3, [pc, #232]	; (8005e48 <UG_DrawCircle+0x1c8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	88f9      	ldrh	r1, [r7, #6]
 8005d66:	8aba      	ldrh	r2, [r7, #20]
 8005d68:	1a8a      	subs	r2, r1, r2
 8005d6a:	b292      	uxth	r2, r2
 8005d6c:	b210      	sxth	r0, r2
 8005d6e:	88b9      	ldrh	r1, [r7, #4]
 8005d70:	8afa      	ldrh	r2, [r7, #22]
 8005d72:	440a      	add	r2, r1
 8005d74:	b292      	uxth	r2, r2
 8005d76:	b211      	sxth	r1, r2
 8005d78:	883a      	ldrh	r2, [r7, #0]
 8005d7a:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8005d7c:	4b32      	ldr	r3, [pc, #200]	; (8005e48 <UG_DrawCircle+0x1c8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	88f9      	ldrh	r1, [r7, #6]
 8005d86:	8aba      	ldrh	r2, [r7, #20]
 8005d88:	1a8a      	subs	r2, r1, r2
 8005d8a:	b292      	uxth	r2, r2
 8005d8c:	b210      	sxth	r0, r2
 8005d8e:	88b9      	ldrh	r1, [r7, #4]
 8005d90:	8afa      	ldrh	r2, [r7, #22]
 8005d92:	1a8a      	subs	r2, r1, r2
 8005d94:	b292      	uxth	r2, r2
 8005d96:	b211      	sxth	r1, r2
 8005d98:	883a      	ldrh	r2, [r7, #0]
 8005d9a:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8005d9c:	4b2a      	ldr	r3, [pc, #168]	; (8005e48 <UG_DrawCircle+0x1c8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	88f9      	ldrh	r1, [r7, #6]
 8005da6:	8aba      	ldrh	r2, [r7, #20]
 8005da8:	440a      	add	r2, r1
 8005daa:	b292      	uxth	r2, r2
 8005dac:	b210      	sxth	r0, r2
 8005dae:	88b9      	ldrh	r1, [r7, #4]
 8005db0:	8afa      	ldrh	r2, [r7, #22]
 8005db2:	440a      	add	r2, r1
 8005db4:	b292      	uxth	r2, r2
 8005db6:	b211      	sxth	r1, r2
 8005db8:	883a      	ldrh	r2, [r7, #0]
 8005dba:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8005dbc:	4b22      	ldr	r3, [pc, #136]	; (8005e48 <UG_DrawCircle+0x1c8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	88f9      	ldrh	r1, [r7, #6]
 8005dc6:	8aba      	ldrh	r2, [r7, #20]
 8005dc8:	440a      	add	r2, r1
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	b210      	sxth	r0, r2
 8005dce:	88b9      	ldrh	r1, [r7, #4]
 8005dd0:	8afa      	ldrh	r2, [r7, #22]
 8005dd2:	1a8a      	subs	r2, r1, r2
 8005dd4:	b292      	uxth	r2, r2
 8005dd6:	b211      	sxth	r1, r2
 8005dd8:	883a      	ldrh	r2, [r7, #0]
 8005dda:	4798      	blx	r3

      y++;
 8005ddc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3301      	adds	r3, #1
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8005de8:	89fa      	ldrh	r2, [r7, #14]
 8005dea:	8a3b      	ldrh	r3, [r7, #16]
 8005dec:	4413      	add	r3, r2
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8005df2:	8a3b      	ldrh	r3, [r7, #16]
 8005df4:	3302      	adds	r3, #2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8005dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005dfe:	005a      	lsls	r2, r3, #1
 8005e00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e04:	4413      	add	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dd0e      	ble.n	8005e28 <UG_DrawCircle+0x1a8>
      {
         x--;
 8005e0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8005e16:	89fa      	ldrh	r2, [r7, #14]
 8005e18:	8a7b      	ldrh	r3, [r7, #18]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8005e20:	8a7b      	ldrh	r3, [r7, #18]
 8005e22:	3302      	adds	r3, #2
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8005e28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005e2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	f6bf af53 	bge.w	8005cdc <UG_DrawCircle+0x5c>
 8005e36:	e004      	b.n	8005e42 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8005e38:	bf00      	nop
 8005e3a:	e002      	b.n	8005e42 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8005e3c:	bf00      	nop
 8005e3e:	e000      	b.n	8005e42 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8005e40:	bf00      	nop
      }
   }
}
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd90      	pop	{r4, r7, pc}
 8005e48:	200004dc 	.word	0x200004dc

08005e4c <UG_FillCircle>:

void UG_FillCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005e4c:	b590      	push	{r4, r7, lr}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	4604      	mov	r4, r0
 8005e54:	4608      	mov	r0, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	80fb      	strh	r3, [r7, #6]
 8005e5e:	4603      	mov	r3, r0
 8005e60:	80bb      	strh	r3, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	807b      	strh	r3, [r7, #2]
 8005e66:	4613      	mov	r3, r2
 8005e68:	803b      	strh	r3, [r7, #0]
   UG_S16  x,y,xd;

   if ( x0<0 ) return;
 8005e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f2c0 80bd 	blt.w	8005fee <UG_FillCircle+0x1a2>
   if ( y0<0 ) return;
 8005e74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f2c0 80ba 	blt.w	8005ff2 <UG_FillCircle+0x1a6>
   if ( r<=0 ) return;
 8005e7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f340 80b7 	ble.w	8005ff6 <UG_FillCircle+0x1aa>

   xd = 3 - (r << 1);
 8005e88:	887b      	ldrh	r3, [r7, #2]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f1c3 0303 	rsb	r3, r3, #3
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	817b      	strh	r3, [r7, #10]
   x = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	81fb      	strh	r3, [r7, #14]
   y = r;
 8005e9a:	887b      	ldrh	r3, [r7, #2]
 8005e9c:	81bb      	strh	r3, [r7, #12]

   while ( x <= y )
 8005e9e:	e095      	b.n	8005fcc <UG_FillCircle+0x180>
   {
     if( y > 0 )
 8005ea0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dd33      	ble.n	8005f10 <UG_FillCircle+0xc4>
     {
        UG_DrawLine(x0 - x, y0 - y,x0 - x, y0 + y, c);
 8005ea8:	88fa      	ldrh	r2, [r7, #6]
 8005eaa:	89fb      	ldrh	r3, [r7, #14]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	b218      	sxth	r0, r3
 8005eb2:	88ba      	ldrh	r2, [r7, #4]
 8005eb4:	89bb      	ldrh	r3, [r7, #12]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	b219      	sxth	r1, r3
 8005ebc:	88fa      	ldrh	r2, [r7, #6]
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	b21c      	sxth	r4, r3
 8005ec6:	88ba      	ldrh	r2, [r7, #4]
 8005ec8:	89bb      	ldrh	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	b21a      	sxth	r2, r3
 8005ed0:	883b      	ldrh	r3, [r7, #0]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	f000 f892 	bl	8006000 <UG_DrawLine>
        UG_DrawLine(x0 + x, y0 - y,x0 + x, y0 + y, c);
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	89fb      	ldrh	r3, [r7, #14]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	b218      	sxth	r0, r3
 8005ee6:	88ba      	ldrh	r2, [r7, #4]
 8005ee8:	89bb      	ldrh	r3, [r7, #12]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	b219      	sxth	r1, r3
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	89fb      	ldrh	r3, [r7, #14]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	b21c      	sxth	r4, r3
 8005efa:	88ba      	ldrh	r2, [r7, #4]
 8005efc:	89bb      	ldrh	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	b21a      	sxth	r2, r3
 8005f04:	883b      	ldrh	r3, [r7, #0]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	f000 f878 	bl	8006000 <UG_DrawLine>
     }
     if( x > 0 )
 8005f10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	dd33      	ble.n	8005f80 <UG_FillCircle+0x134>
     {
        UG_DrawLine(x0 - y, y0 - x,x0 - y, y0 + x, c);
 8005f18:	88fa      	ldrh	r2, [r7, #6]
 8005f1a:	89bb      	ldrh	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	b218      	sxth	r0, r3
 8005f22:	88ba      	ldrh	r2, [r7, #4]
 8005f24:	89fb      	ldrh	r3, [r7, #14]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b219      	sxth	r1, r3
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	89bb      	ldrh	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	b21c      	sxth	r4, r3
 8005f36:	88ba      	ldrh	r2, [r7, #4]
 8005f38:	89fb      	ldrh	r3, [r7, #14]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	b21a      	sxth	r2, r3
 8005f40:	883b      	ldrh	r3, [r7, #0]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	4622      	mov	r2, r4
 8005f48:	f000 f85a 	bl	8006000 <UG_DrawLine>
        UG_DrawLine(x0 + y, y0 - x,x0 + y, y0 + x, c);
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	89bb      	ldrh	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	b218      	sxth	r0, r3
 8005f56:	88ba      	ldrh	r2, [r7, #4]
 8005f58:	89fb      	ldrh	r3, [r7, #14]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	b219      	sxth	r1, r3
 8005f60:	88fa      	ldrh	r2, [r7, #6]
 8005f62:	89bb      	ldrh	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	b21c      	sxth	r4, r3
 8005f6a:	88ba      	ldrh	r2, [r7, #4]
 8005f6c:	89fb      	ldrh	r3, [r7, #14]
 8005f6e:	4413      	add	r3, r2
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	b21a      	sxth	r2, r3
 8005f74:	883b      	ldrh	r3, [r7, #0]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	f000 f840 	bl	8006000 <UG_DrawLine>
     }
     if ( xd < 0 )
 8005f80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da09      	bge.n	8005f9c <UG_FillCircle+0x150>
     {
        xd += (x << 2) + 6;
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	897b      	ldrh	r3, [r7, #10]
 8005f90:	4413      	add	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3306      	adds	r3, #6
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	817b      	strh	r3, [r7, #10]
 8005f9a:	e011      	b.n	8005fc0 <UG_FillCircle+0x174>
     }
     else
     {
        xd += ((x - y) << 2) + 10;
 8005f9c:	89fa      	ldrh	r2, [r7, #14]
 8005f9e:	89bb      	ldrh	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	897b      	ldrh	r3, [r7, #10]
 8005faa:	4413      	add	r3, r2
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	330a      	adds	r3, #10
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	817b      	strh	r3, [r7, #10]
        y--;
 8005fb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	81bb      	strh	r3, [r7, #12]
     }
     x++;
 8005fc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	81fb      	strh	r3, [r7, #14]
   while ( x <= y )
 8005fcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005fd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	f77f af63 	ble.w	8005ea0 <UG_FillCircle+0x54>
   }
   UG_DrawCircle(x0, y0, r,c);
 8005fda:	883b      	ldrh	r3, [r7, #0]
 8005fdc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005fe0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005fe4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005fe8:	f7ff fe4a 	bl	8005c80 <UG_DrawCircle>
 8005fec:	e004      	b.n	8005ff8 <UG_FillCircle+0x1ac>
   if ( x0<0 ) return;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <UG_FillCircle+0x1ac>
   if ( y0<0 ) return;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <UG_FillCircle+0x1ac>
   if ( r<=0 ) return;
 8005ff6:	bf00      	nop
}
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd90      	pop	{r4, r7, pc}
	...

08006000 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8006000:	b5b0      	push	{r4, r5, r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af02      	add	r7, sp, #8
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	461a      	mov	r2, r3
 800600e:	4623      	mov	r3, r4
 8006010:	80fb      	strh	r3, [r7, #6]
 8006012:	4603      	mov	r3, r0
 8006014:	80bb      	strh	r3, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	807b      	strh	r3, [r7, #2]
 800601a:	4613      	mov	r3, r2
 800601c:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800601e:	4b67      	ldr	r3, [pc, #412]	; (80061bc <UG_DrawLine+0x1bc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d013      	beq.n	8006056 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800602e:	4b63      	ldr	r3, [pc, #396]	; (80061bc <UG_DrawLine+0x1bc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	461d      	mov	r5, r3
 8006036:	f9b7 4000 	ldrsh.w	r4, [r7]
 800603a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800603e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006042:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006046:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	4623      	mov	r3, r4
 800604c:	47a8      	blx	r5
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80ae 	beq.w	80061b2 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b29b      	uxth	r3, r3
 800605e:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8006060:	883a      	ldrh	r2, [r7, #0]
 8006062:	88bb      	ldrh	r3, [r7, #4]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	b29b      	uxth	r3, r3
 8006068:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800606a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	bfb8      	it	lt
 8006072:	425b      	neglt	r3, r3
 8006074:	b29b      	uxth	r3, r3
 8006076:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8006078:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800607c:	2b00      	cmp	r3, #0
 800607e:	bfb8      	it	lt
 8006080:	425b      	neglt	r3, r3
 8006082:	b29b      	uxth	r3, r3
 8006084:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8006086:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	dd01      	ble.n	8006092 <UG_DrawLine+0x92>
 800608e:	2301      	movs	r3, #1
 8006090:	e001      	b.n	8006096 <UG_DrawLine+0x96>
 8006092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006096:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8006098:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800609c:	2b00      	cmp	r3, #0
 800609e:	dd01      	ble.n	80060a4 <UG_DrawLine+0xa4>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e001      	b.n	80060a8 <UG_DrawLine+0xa8>
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a8:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 80060aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060ae:	105b      	asrs	r3, r3, #1
 80060b0:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 80060b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060b6:	105b      	asrs	r3, r3, #1
 80060b8:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 80060ba:	88fb      	ldrh	r3, [r7, #6]
 80060bc:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 80060be:	88bb      	ldrh	r3, [r7, #4]
 80060c0:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 80060c2:	4b3e      	ldr	r3, [pc, #248]	; (80061bc <UG_DrawLine+0x1bc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80060cc:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80060d0:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80060d4:	4798      	blx	r3

   if( dxabs >= dyabs )
 80060d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80060da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060de:	429a      	cmp	r2, r3
 80060e0:	db33      	blt.n	800614a <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 80060e2:	2300      	movs	r3, #0
 80060e4:	83fb      	strh	r3, [r7, #30]
 80060e6:	e029      	b.n	800613c <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80060e8:	8b7a      	ldrh	r2, [r7, #26]
 80060ea:	89fb      	ldrh	r3, [r7, #14]
 80060ec:	4413      	add	r3, r2
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80060f2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80060f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	db09      	blt.n	8006112 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80060fe:	8b7a      	ldrh	r2, [r7, #26]
 8006100:	8a3b      	ldrh	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8006108:	8afa      	ldrh	r2, [r7, #22]
 800610a:	897b      	ldrh	r3, [r7, #10]
 800610c:	4413      	add	r3, r2
 800610e:	b29b      	uxth	r3, r3
 8006110:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8006112:	8b3a      	ldrh	r2, [r7, #24]
 8006114:	89bb      	ldrh	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	b29b      	uxth	r3, r3
 800611a:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 800611c:	4b27      	ldr	r3, [pc, #156]	; (80061bc <UG_DrawLine+0x1bc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006126:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800612a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800612e:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8006130:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006134:	b29b      	uxth	r3, r3
 8006136:	3301      	adds	r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	83fb      	strh	r3, [r7, #30]
 800613c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006140:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006144:	429a      	cmp	r2, r3
 8006146:	dbcf      	blt.n	80060e8 <UG_DrawLine+0xe8>
 8006148:	e034      	b.n	80061b4 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800614a:	2300      	movs	r3, #0
 800614c:	83fb      	strh	r3, [r7, #30]
 800614e:	e029      	b.n	80061a4 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8006150:	8bba      	ldrh	r2, [r7, #28]
 8006152:	8a3b      	ldrh	r3, [r7, #16]
 8006154:	4413      	add	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800615a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800615e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006162:	429a      	cmp	r2, r3
 8006164:	db09      	blt.n	800617a <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8006166:	8bba      	ldrh	r2, [r7, #28]
 8006168:	89fb      	ldrh	r3, [r7, #14]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	b29b      	uxth	r3, r3
 800616e:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8006170:	8b3a      	ldrh	r2, [r7, #24]
 8006172:	89bb      	ldrh	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	b29b      	uxth	r3, r3
 8006178:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800617a:	8afa      	ldrh	r2, [r7, #22]
 800617c:	897b      	ldrh	r3, [r7, #10]
 800617e:	4413      	add	r3, r2
 8006180:	b29b      	uxth	r3, r3
 8006182:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8006184:	4b0d      	ldr	r3, [pc, #52]	; (80061bc <UG_DrawLine+0x1bc>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800618e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8006192:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8006196:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8006198:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800619c:	b29b      	uxth	r3, r3
 800619e:	3301      	adds	r3, #1
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	83fb      	strh	r3, [r7, #30]
 80061a4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80061a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	dbcf      	blt.n	8006150 <UG_DrawLine+0x150>
 80061b0:	e000      	b.n	80061b4 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80061b2:	bf00      	nop
      }
   }  
}
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bdb0      	pop	{r4, r5, r7, pc}
 80061ba:	bf00      	nop
 80061bc:	200004dc 	.word	0x200004dc

080061c0 <UG_DrawTriangle>:


/* Draw a triangle */
void UG_DrawTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 80061c0:	b590      	push	{r4, r7, lr}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	4623      	mov	r3, r4
 80061d0:	80fb      	strh	r3, [r7, #6]
 80061d2:	4603      	mov	r3, r0
 80061d4:	80bb      	strh	r3, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	807b      	strh	r3, [r7, #2]
 80061da:	4613      	mov	r3, r2
 80061dc:	803b      	strh	r3, [r7, #0]
  UG_DrawLine(x1, y1, x2, y2, c);
 80061de:	f9b7 4000 	ldrsh.w	r4, [r7]
 80061e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80061e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80061ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80061ee:	8c3b      	ldrh	r3, [r7, #32]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	4623      	mov	r3, r4
 80061f4:	f7ff ff04 	bl	8006000 <UG_DrawLine>
  UG_DrawLine(x2, y2, x3, y3, c);
 80061f8:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80061fc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006200:	f9b7 1000 	ldrsh.w	r1, [r7]
 8006204:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006208:	8c3b      	ldrh	r3, [r7, #32]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	4623      	mov	r3, r4
 800620e:	f7ff fef7 	bl	8006000 <UG_DrawLine>
  UG_DrawLine(x3, y3, x1, y1, c);
 8006212:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006216:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800621a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800621e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8006222:	8c3b      	ldrh	r3, [r7, #32]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	4623      	mov	r3, r4
 8006228:	f7ff feea 	bl	8006000 <UG_DrawLine>
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bd90      	pop	{r4, r7, pc}

08006234 <UG_FillTriangle>:

/* Fill a triangle */
void UG_FillTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8006234:	b590      	push	{r4, r7, lr}
 8006236:	b08f      	sub	sp, #60	; 0x3c
 8006238:	af02      	add	r7, sp, #8
 800623a:	4604      	mov	r4, r0
 800623c:	4608      	mov	r0, r1
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	4623      	mov	r3, r4
 8006244:	80fb      	strh	r3, [r7, #6]
 8006246:	4603      	mov	r3, r0
 8006248:	80bb      	strh	r3, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	807b      	strh	r3, [r7, #2]
 800624e:	4613      	mov	r3, r2
 8006250:	803b      	strh	r3, [r7, #0]

  UG_S16 a, b, y, last;

  /* Sort coordinates by Y order (y3 >= y2 >= y1) */
  if (y1 > y2) {
 8006252:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006256:	f9b7 3000 	ldrsh.w	r3, [r7]
 800625a:	429a      	cmp	r2, r3
 800625c:	dd0b      	ble.n	8006276 <UG_FillTriangle+0x42>
    swap(y1, y2); swap(x1, x2);
 800625e:	88bb      	ldrh	r3, [r7, #4]
 8006260:	847b      	strh	r3, [r7, #34]	; 0x22
 8006262:	883b      	ldrh	r3, [r7, #0]
 8006264:	80bb      	strh	r3, [r7, #4]
 8006266:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006268:	803b      	strh	r3, [r7, #0]
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	843b      	strh	r3, [r7, #32]
 800626e:	887b      	ldrh	r3, [r7, #2]
 8006270:	80fb      	strh	r3, [r7, #6]
 8006272:	8c3b      	ldrh	r3, [r7, #32]
 8006274:	807b      	strh	r3, [r7, #2]
  }
  if (y2 > y3) {
 8006276:	f9b7 2000 	ldrsh.w	r2, [r7]
 800627a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800627e:	429a      	cmp	r2, r3
 8006280:	dd0f      	ble.n	80062a2 <UG_FillTriangle+0x6e>
    swap(y3, y2); swap(x3, x2);
 8006282:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006286:	83fb      	strh	r3, [r7, #30]
 8006288:	883b      	ldrh	r3, [r7, #0]
 800628a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800628e:	8bfb      	ldrh	r3, [r7, #30]
 8006290:	803b      	strh	r3, [r7, #0]
 8006292:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006296:	83bb      	strh	r3, [r7, #28]
 8006298:	887b      	ldrh	r3, [r7, #2]
 800629a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800629e:	8bbb      	ldrh	r3, [r7, #28]
 80062a0:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 80062a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80062a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	dd0b      	ble.n	80062c6 <UG_FillTriangle+0x92>
    swap(y1, y2); swap(x1, x2);
 80062ae:	88bb      	ldrh	r3, [r7, #4]
 80062b0:	837b      	strh	r3, [r7, #26]
 80062b2:	883b      	ldrh	r3, [r7, #0]
 80062b4:	80bb      	strh	r3, [r7, #4]
 80062b6:	8b7b      	ldrh	r3, [r7, #26]
 80062b8:	803b      	strh	r3, [r7, #0]
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	833b      	strh	r3, [r7, #24]
 80062be:	887b      	ldrh	r3, [r7, #2]
 80062c0:	80fb      	strh	r3, [r7, #6]
 80062c2:	8b3b      	ldrh	r3, [r7, #24]
 80062c4:	807b      	strh	r3, [r7, #2]
  }

  /* Handle awkward all-on-same-line case as its own thing */
  if (y1 == y3) {
 80062c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80062ca:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d138      	bne.n	8006344 <UG_FillTriangle+0x110>
    a = b = x1;
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x2 < a) {
 80062da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80062de:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80062e2:	429a      	cmp	r2, r3
 80062e4:	da02      	bge.n	80062ec <UG_FillTriangle+0xb8>
      a = x2;
 80062e6:	887b      	ldrh	r3, [r7, #2]
 80062e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062ea:	e007      	b.n	80062fc <UG_FillTriangle+0xc8>
    } else if (x2 > b) {
 80062ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80062f0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80062f4:	429a      	cmp	r2, r3
 80062f6:	dd01      	ble.n	80062fc <UG_FillTriangle+0xc8>
      b = x2;
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    if (x3 < a) {
 80062fc:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8006300:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006304:	429a      	cmp	r2, r3
 8006306:	da03      	bge.n	8006310 <UG_FillTriangle+0xdc>
      a = x3;
 8006308:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800630c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800630e:	e008      	b.n	8006322 <UG_FillTriangle+0xee>
    } else if (x3 > b) {
 8006310:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8006314:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006318:	429a      	cmp	r2, r3
 800631a:	dd02      	ble.n	8006322 <UG_FillTriangle+0xee>
      b = x3;
 800631c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006320:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y1, b + 1, y1, c);
 8006322:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006324:	3301      	adds	r3, #1
 8006326:	b29b      	uxth	r3, r3
 8006328:	b21a      	sxth	r2, r3
 800632a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800632e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006332:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006336:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4623      	mov	r3, r4
 800633e:	f7ff fe5f 	bl	8006000 <UG_DrawLine>
    return;
 8006342:	e0dc      	b.n	80064fe <UG_FillTriangle+0x2ca>
  }

  UG_S16
  dx01 = x2 - x1,
 8006344:	887a      	ldrh	r2, [r7, #2]
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	b29b      	uxth	r3, r3
 800634c:	82fb      	strh	r3, [r7, #22]
  dy01 = y2 - y1,
 800634e:	883a      	ldrh	r2, [r7, #0]
 8006350:	88bb      	ldrh	r3, [r7, #4]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	b29b      	uxth	r3, r3
 8006356:	82bb      	strh	r3, [r7, #20]
  dx02 = x3 - x1,
 8006358:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	b29b      	uxth	r3, r3
 8006362:	827b      	strh	r3, [r7, #18]
  dy02 = y3 - y1,
 8006364:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006368:	88bb      	ldrh	r3, [r7, #4]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	b29b      	uxth	r3, r3
 800636e:	823b      	strh	r3, [r7, #16]
  dx12 = x3 - x2,
 8006370:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	b29b      	uxth	r3, r3
 800637a:	81fb      	strh	r3, [r7, #14]
  dy12 = y3 - y2,
 800637c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006380:	883b      	ldrh	r3, [r7, #0]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	b29b      	uxth	r3, r3
 8006386:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 8006388:	2300      	movs	r3, #0
 800638a:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	84bb      	strh	r3, [r7, #36]	; 0x24
   * is included here (and second loop will be skipped, avoiding a /0
   * error there), otherwise scanline y2 is skipped here and handled
   * in the second loop...which also avoids a /0 error here if y1=y2
   * (flat-topped triangle).
   */
  if (y2 == y3) {
 8006390:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006394:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006398:	429a      	cmp	r2, r3
 800639a:	d102      	bne.n	80063a2 <UG_FillTriangle+0x16e>
    last = y2;   /* Include y2 scanline */
 800639c:	883b      	ldrh	r3, [r7, #0]
 800639e:	853b      	strh	r3, [r7, #40]	; 0x28
 80063a0:	e003      	b.n	80063aa <UG_FillTriangle+0x176>
  } else {
    last = y2 - 1; /* Skip it */
 80063a2:	883b      	ldrh	r3, [r7, #0]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  for (y = y1; y <= last; y++) {
 80063aa:	88bb      	ldrh	r3, [r7, #4]
 80063ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80063ae:	e041      	b.n	8006434 <UG_FillTriangle+0x200>
    a   = x1 + sa / dy01;
 80063b0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80063b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80063b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80063bc:	b29a      	uxth	r2, r3
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	4413      	add	r3, r2
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 80063c6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80063ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80063ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	4413      	add	r3, r2
 80063d8:	b29b      	uxth	r3, r3
 80063da:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 80063dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063de:	8afb      	ldrh	r3, [r7, #22]
 80063e0:	4413      	add	r3, r2
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80063e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063e8:	8a7b      	ldrh	r3, [r7, #18]
 80063ea:	4413      	add	r3, r2
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 80063f0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80063f4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	dd05      	ble.n	8006408 <UG_FillTriangle+0x1d4>
      swap(a, b);
 80063fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063fe:	813b      	strh	r3, [r7, #8]
 8006400:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006402:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006404:	893b      	ldrh	r3, [r7, #8]
 8006406:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 8006408:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800640a:	3301      	adds	r3, #1
 800640c:	b29b      	uxth	r3, r3
 800640e:	b21a      	sxth	r2, r3
 8006410:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8006414:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8006418:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800641c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	4623      	mov	r3, r4
 8006424:	f7ff fdec 	bl	8006000 <UG_DrawLine>
  for (y = y1; y <= last; y++) {
 8006428:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	3301      	adds	r3, #1
 8006430:	b29b      	uxth	r3, r3
 8006432:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006434:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006438:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800643c:	429a      	cmp	r2, r3
 800643e:	ddb7      	ble.n	80063b0 <UG_FillTriangle+0x17c>
  }

  /* For lower part of triangle, find scanline crossings for segments
   * 0-2 and 1-2.  This loop is skipped if y2=y3.
   */
  sa = dx12 * (y - y2);
 8006440:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006444:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	b29a      	uxth	r2, r3
 800644c:	89fb      	ldrh	r3, [r7, #14]
 800644e:	fb12 f303 	smulbb	r3, r2, r3
 8006452:	b29b      	uxth	r3, r3
 8006454:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y1);
 8006456:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800645a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	b29a      	uxth	r2, r3
 8006462:	8a7b      	ldrh	r3, [r7, #18]
 8006464:	fb12 f303 	smulbb	r3, r2, r3
 8006468:	b29b      	uxth	r3, r3
 800646a:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y3; y++) {
 800646c:	e041      	b.n	80064f2 <UG_FillTriangle+0x2be>
    a   = x2 + sa / dy12;
 800646e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006472:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006476:	fb92 f3f3 	sdiv	r3, r2, r3
 800647a:	b29a      	uxth	r2, r3
 800647c:	887b      	ldrh	r3, [r7, #2]
 800647e:	4413      	add	r3, r2
 8006480:	b29b      	uxth	r3, r3
 8006482:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 8006484:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006488:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800648c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006490:	b29a      	uxth	r2, r3
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	4413      	add	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 800649a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800649c:	89fb      	ldrh	r3, [r7, #14]
 800649e:	4413      	add	r3, r2
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80064a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064a6:	8a7b      	ldrh	r3, [r7, #18]
 80064a8:	4413      	add	r3, r2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 80064ae:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80064b2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80064b6:	429a      	cmp	r2, r3
 80064b8:	dd05      	ble.n	80064c6 <UG_FillTriangle+0x292>
      swap(a, b);
 80064ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064bc:	817b      	strh	r3, [r7, #10]
 80064be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80064c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80064c2:	897b      	ldrh	r3, [r7, #10]
 80064c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 80064c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80064c8:	3301      	adds	r3, #1
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	b21a      	sxth	r2, r3
 80064ce:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 80064d2:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80064d6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80064da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4623      	mov	r3, r4
 80064e2:	f7ff fd8d 	bl	8006000 <UG_DrawLine>
  for (; y <= y3; y++) {
 80064e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3301      	adds	r3, #1
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80064f2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80064f6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80064fa:	429a      	cmp	r2, r3
 80064fc:	ddb7      	ble.n	800646e <UG_FillTriangle+0x23a>
  }
}
 80064fe:	3734      	adds	r7, #52	; 0x34
 8006500:	46bd      	mov	sp, r7
 8006502:	bd90      	pop	{r4, r7, pc}

08006504 <UG_PutString>:

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b087      	sub	sp, #28
 8006508:	af02      	add	r7, sp, #8
 800650a:	4603      	mov	r3, r0
 800650c:	603a      	str	r2, [r7, #0]
 800650e:	80fb      	strh	r3, [r7, #6]
 8006510:	460b      	mov	r3, r1
 8006512:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8006518:	88bb      	ldrh	r3, [r7, #4]
 800651a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800651c:	4b3c      	ldr	r3, [pc, #240]	; (8006610 <UG_PutString+0x10c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fa4e 	bl	80069c4 <_UG_FontSelect>
   while ( *str != 0 )
 8006528:	e054      	b.n	80065d4 <UG_PutString+0xd0>
      }
      else{
         chr = *str++;
      }
      #else
      chr = *str++;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	603a      	str	r2, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	72fb      	strb	r3, [r7, #11]
      #endif

      if ( chr == '\n' )
 8006534:	7afb      	ldrb	r3, [r7, #11]
 8006536:	2b0a      	cmp	r3, #10
 8006538:	d105      	bne.n	8006546 <UG_PutString+0x42>
      {
         xp = gui->device->x_dim;
 800653a:	4b35      	ldr	r3, [pc, #212]	; (8006610 <UG_PutString+0x10c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	81fb      	strh	r3, [r7, #14]
         continue;
 8006544:	e046      	b.n	80065d4 <UG_PutString+0xd0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	2100      	movs	r1, #0
 800654a:	4618      	mov	r0, r3
 800654c:	f000 f8ea 	bl	8006724 <_UG_GetCharData>
 8006550:	4603      	mov	r3, r0
 8006552:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8006554:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655c:	d100      	bne.n	8006560 <UG_PutString+0x5c>
 800655e:	e039      	b.n	80065d4 <UG_PutString+0xd0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8006560:	4b2b      	ldr	r3, [pc, #172]	; (8006610 <UG_PutString+0x10c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656a:	4619      	mov	r1, r3
 800656c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006570:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006574:	4413      	add	r3, r2
 8006576:	4299      	cmp	r1, r3
 8006578:	dc11      	bgt.n	800659e <UG_PutString+0x9a>
      {
         xp = x;
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800657e:	4b24      	ldr	r3, [pc, #144]	; (8006610 <UG_PutString+0x10c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	7ddb      	ldrb	r3, [r3, #23]
 8006584:	b21a      	sxth	r2, r3
 8006586:	4b22      	ldr	r3, [pc, #136]	; (8006610 <UG_PutString+0x10c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 800658e:	b21b      	sxth	r3, r3
 8006590:	4413      	add	r3, r2
 8006592:	b21b      	sxth	r3, r3
 8006594:	b29a      	uxth	r2, r3
 8006596:	89bb      	ldrh	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	b29b      	uxth	r3, r3
 800659c:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800659e:	4b1c      	ldr	r3, [pc, #112]	; (8006610 <UG_PutString+0x10c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 80065a4:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <UG_PutString+0x10c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80065ae:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80065b2:	7af8      	ldrb	r0, [r7, #11]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4623      	mov	r3, r4
 80065b8:	f000 fa82 	bl	8006ac0 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80065bc:	4b14      	ldr	r3, [pc, #80]	; (8006610 <UG_PutString+0x10c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	893b      	ldrh	r3, [r7, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	89fb      	ldrh	r3, [r7, #14]
 80065ce:	4413      	add	r3, r2
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1a6      	bne.n	800652a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <UG_PutString+0x10c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00c      	beq.n	8006606 <UG_PutString+0x102>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80065ec:	4b08      	ldr	r3, [pc, #32]	; (8006610 <UG_PutString+0x10c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f2:	461c      	mov	r4, r3
 80065f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006604:	47a0      	blx	r4
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	bd90      	pop	{r4, r7, pc}
 800660e:	bf00      	nop
 8006610:	200004dc 	.word	0x200004dc

08006614 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <UG_SetForecolor+0x20>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	88fa      	ldrh	r2, [r7, #6]
 8006624:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	200004dc 	.word	0x200004dc

08006638 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <UG_SetBackcolor+0x20>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	88fa      	ldrh	r2, [r7, #6]
 8006648:	86da      	strh	r2, [r3, #54]	; 0x36
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	200004dc 	.word	0x200004dc

0800665c <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
   return gui->device->x_dim;
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <UG_GetXDim+0x18>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	200004dc 	.word	0x200004dc

08006678 <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
   return gui->device->y_dim;
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <UG_GetYDim+0x18>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8006686:	4618      	mov	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	200004dc 	.word	0x200004dc

08006694 <UG_FontSetHSpace>:

void UG_FontSetHSpace( UG_U16 s )
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <UG_FontSetHSpace+0x24>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	b252      	sxtb	r2, r2
 80066a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	200004dc 	.word	0x200004dc

080066bc <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <UG_FontSetVSpace+0x24>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	88fa      	ldrh	r2, [r7, #6]
 80066cc:	b252      	sxtb	r2, r2
 80066ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	200004dc 	.word	0x200004dc

080066e4 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <UG_FontSetTransparency+0x20>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	79fa      	ldrb	r2, [r7, #7]
 80066f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	200004dc 	.word	0x200004dc

08006708 <UG_FontGetTransparency>:

UG_U8 UG_FontGetTransparency( void )
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  return gui->transparent_font;
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <UG_FontGetTransparency+0x18>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8006714:	4618      	mov	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	200004dc 	.word	0x200004dc

08006724 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8006730:	2300      	movs	r3, #0
 8006732:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8006734:	2300      	movs	r3, #0
 8006736:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8006738:	2300      	movs	r3, #0
 800673a:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 800673c:	2300      	movs	r3, #0
 800673e:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8006740:	2300      	movs	r3, #0
 8006742:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8006744:	4b9a      	ldr	r3, [pc, #616]	; (80069b0 <_UG_GetCharData+0x28c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674a:	4b9a      	ldr	r3, [pc, #616]	; (80069b4 <_UG_GetCharData+0x290>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d10f      	bne.n	8006772 <_UG_GetCharData+0x4e>
 8006752:	4b99      	ldr	r3, [pc, #612]	; (80069b8 <_UG_GetCharData+0x294>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	79fa      	ldrb	r2, [r7, #7]
 8006758:	429a      	cmp	r2, r3
 800675a:	d10a      	bne.n	8006772 <_UG_GetCharData+0x4e>
    if(p){
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8006762:	4b96      	ldr	r3, [pc, #600]	; (80069bc <_UG_GetCharData+0x298>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800676a:	4b95      	ldr	r3, [pc, #596]	; (80069c0 <_UG_GetCharData+0x29c>)
 800676c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006770:	e119      	b.n	80069a6 <_UG_GetCharData+0x282>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8006772:	4b8f      	ldr	r3, [pc, #572]	; (80069b0 <_UG_GetCharData+0x28c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	7d5b      	ldrb	r3, [r3, #21]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d07d      	beq.n	8006878 <_UG_GetCharData+0x154>
    switch ( encoding )
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	2bfc      	cmp	r3, #252	; 0xfc
 8006780:	f300 80ce 	bgt.w	8006920 <_UG_GetCharData+0x1fc>
 8006784:	2bd6      	cmp	r3, #214	; 0xd6
 8006786:	da09      	bge.n	800679c <_UG_GetCharData+0x78>
 8006788:	2bc4      	cmp	r3, #196	; 0xc4
 800678a:	d06c      	beq.n	8006866 <_UG_GetCharData+0x142>
 800678c:	2bc4      	cmp	r3, #196	; 0xc4
 800678e:	f300 80c7 	bgt.w	8006920 <_UG_GetCharData+0x1fc>
 8006792:	2bb0      	cmp	r3, #176	; 0xb0
 8006794:	d06d      	beq.n	8006872 <_UG_GetCharData+0x14e>
 8006796:	2bb5      	cmp	r3, #181	; 0xb5
 8006798:	d068      	beq.n	800686c <_UG_GetCharData+0x148>
 800679a:	e06e      	b.n	800687a <_UG_GetCharData+0x156>
 800679c:	3bd6      	subs	r3, #214	; 0xd6
 800679e:	2b26      	cmp	r3, #38	; 0x26
 80067a0:	f200 80be 	bhi.w	8006920 <_UG_GetCharData+0x1fc>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <_UG_GetCharData+0x88>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	0800684f 	.word	0x0800684f
 80067b0:	08006921 	.word	0x08006921
 80067b4:	08006921 	.word	0x08006921
 80067b8:	08006921 	.word	0x08006921
 80067bc:	08006921 	.word	0x08006921
 80067c0:	08006921 	.word	0x08006921
 80067c4:	0800685b 	.word	0x0800685b
 80067c8:	08006921 	.word	0x08006921
 80067cc:	08006921 	.word	0x08006921
 80067d0:	08006921 	.word	0x08006921
 80067d4:	08006921 	.word	0x08006921
 80067d8:	08006921 	.word	0x08006921
 80067dc:	08006921 	.word	0x08006921
 80067e0:	08006921 	.word	0x08006921
 80067e4:	08006861 	.word	0x08006861
 80067e8:	08006921 	.word	0x08006921
 80067ec:	08006921 	.word	0x08006921
 80067f0:	08006921 	.word	0x08006921
 80067f4:	08006921 	.word	0x08006921
 80067f8:	08006921 	.word	0x08006921
 80067fc:	08006921 	.word	0x08006921
 8006800:	08006921 	.word	0x08006921
 8006804:	08006921 	.word	0x08006921
 8006808:	08006921 	.word	0x08006921
 800680c:	08006921 	.word	0x08006921
 8006810:	08006921 	.word	0x08006921
 8006814:	08006921 	.word	0x08006921
 8006818:	08006921 	.word	0x08006921
 800681c:	08006921 	.word	0x08006921
 8006820:	08006921 	.word	0x08006921
 8006824:	08006921 	.word	0x08006921
 8006828:	08006921 	.word	0x08006921
 800682c:	08006849 	.word	0x08006849
 8006830:	08006921 	.word	0x08006921
 8006834:	08006921 	.word	0x08006921
 8006838:	08006921 	.word	0x08006921
 800683c:	08006921 	.word	0x08006921
 8006840:	08006921 	.word	0x08006921
 8006844:	08006855 	.word	0x08006855
    {
       case 0xF6: encoding = 0x94; break; // ö
 8006848:	2394      	movs	r3, #148	; 0x94
 800684a:	71fb      	strb	r3, [r7, #7]
 800684c:	e015      	b.n	800687a <_UG_GetCharData+0x156>
       case 0xD6: encoding = 0x99; break; // Ö
 800684e:	2399      	movs	r3, #153	; 0x99
 8006850:	71fb      	strb	r3, [r7, #7]
 8006852:	e012      	b.n	800687a <_UG_GetCharData+0x156>
       case 0xFC: encoding = 0x81; break; // ü
 8006854:	2381      	movs	r3, #129	; 0x81
 8006856:	71fb      	strb	r3, [r7, #7]
 8006858:	e00f      	b.n	800687a <_UG_GetCharData+0x156>
       case 0xDC: encoding = 0x9A; break; // Ü
 800685a:	239a      	movs	r3, #154	; 0x9a
 800685c:	71fb      	strb	r3, [r7, #7]
 800685e:	e00c      	b.n	800687a <_UG_GetCharData+0x156>
       case 0xE4: encoding = 0x84; break; // ä
 8006860:	2384      	movs	r3, #132	; 0x84
 8006862:	71fb      	strb	r3, [r7, #7]
 8006864:	e009      	b.n	800687a <_UG_GetCharData+0x156>
       case 0xC4: encoding = 0x8E; break; // Ä
 8006866:	238e      	movs	r3, #142	; 0x8e
 8006868:	71fb      	strb	r3, [r7, #7]
 800686a:	e006      	b.n	800687a <_UG_GetCharData+0x156>
       case 0xB5: encoding = 0xE6; break; // µ
 800686c:	23e6      	movs	r3, #230	; 0xe6
 800686e:	71fb      	strb	r3, [r7, #7]
 8006870:	e003      	b.n	800687a <_UG_GetCharData+0x156>
       case 0xB0: encoding = 0xF8; break; // °
 8006872:	23f8      	movs	r3, #248	; 0xf8
 8006874:	71fb      	strb	r3, [r7, #7]
 8006876:	e000      	b.n	800687a <_UG_GetCharData+0x156>
    }
  }
 8006878:	bf00      	nop

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800687a:	e051      	b.n	8006920 <_UG_GetCharData+0x1fc>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 800687c:	4b4c      	ldr	r3, [pc, #304]	; (80069b0 <_UG_GetCharData+0x28c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	8a7a      	ldrh	r2, [r7, #18]
 8006884:	0052      	lsls	r2, r2, #1
 8006886:	4413      	add	r3, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fff1 	bl	8005870 <ptr_8to16>
 800688e:	4603      	mov	r3, r0
 8006890:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8006892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006896:	2b00      	cmp	r3, #0
 8006898:	da06      	bge.n	80068a8 <_UG_GetCharData+0x184>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80068a0:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80068a2:	2301      	movs	r3, #1
 80068a4:	747b      	strb	r3, [r7, #17]
 80068a6:	e038      	b.n	800691a <_UG_GetCharData+0x1f6>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80068a8:	7c7b      	ldrb	r3, [r7, #17]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d025      	beq.n	80068fa <_UG_GetCharData+0x1d6>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8afa      	ldrh	r2, [r7, #22]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d80f      	bhi.n	80068d8 <_UG_GetCharData+0x1b4>
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	89fa      	ldrh	r2, [r7, #14]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d30a      	bcc.n	80068d8 <_UG_GetCharData+0x1b4>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	8afb      	ldrh	r3, [r7, #22]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	8abb      	ldrh	r3, [r7, #20]
 80068ce:	4413      	add	r3, r2
 80068d0:	82bb      	strh	r3, [r7, #20]
        found=1;
 80068d2:	2301      	movs	r3, #1
 80068d4:	743b      	strb	r3, [r7, #16]
        break;
 80068d6:	e02d      	b.n	8006934 <_UG_GetCharData+0x210>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	8afa      	ldrh	r2, [r7, #22]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d825      	bhi.n	800692e <_UG_GetCharData+0x20a>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80068e2:	89fa      	ldrh	r2, [r7, #14]
 80068e4:	8afb      	ldrh	r3, [r7, #22]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	8abb      	ldrh	r3, [r7, #20]
 80068ec:	4413      	add	r3, r2
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3301      	adds	r3, #1
 80068f2:	82bb      	strh	r3, [r7, #20]
      range=0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	747b      	strb	r3, [r7, #17]
 80068f8:	e00f      	b.n	800691a <_UG_GetCharData+0x1f6>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	89fa      	ldrh	r2, [r7, #14]
 8006900:	429a      	cmp	r2, r3
 8006902:	d102      	bne.n	800690a <_UG_GetCharData+0x1e6>
      {
        found=1;
 8006904:	2301      	movs	r3, #1
 8006906:	743b      	strb	r3, [r7, #16]
        break;
 8006908:	e014      	b.n	8006934 <_UG_GetCharData+0x210>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	b29b      	uxth	r3, r3
 800690e:	89fa      	ldrh	r2, [r7, #14]
 8006910:	429a      	cmp	r2, r3
 8006912:	d80e      	bhi.n	8006932 <_UG_GetCharData+0x20e>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8006914:	8abb      	ldrh	r3, [r7, #20]
 8006916:	3301      	adds	r3, #1
 8006918:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800691a:	8a7b      	ldrh	r3, [r7, #18]
 800691c:	3301      	adds	r3, #1
 800691e:	827b      	strh	r3, [r7, #18]
 8006920:	4b23      	ldr	r3, [pc, #140]	; (80069b0 <_UG_GetCharData+0x28c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	8b9b      	ldrh	r3, [r3, #28]
 8006926:	8a7a      	ldrh	r2, [r7, #18]
 8006928:	429a      	cmp	r2, r3
 800692a:	d3a7      	bcc.n	800687c <_UG_GetCharData+0x158>
 800692c:	e002      	b.n	8006934 <_UG_GetCharData+0x210>
        break;
 800692e:	bf00      	nop
 8006930:	e000      	b.n	8006934 <_UG_GetCharData+0x210>
        break;
 8006932:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8006934:	7c3b      	ldrb	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d033      	beq.n	80069a2 <_UG_GetCharData+0x27e>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800693a:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <_UG_GetCharData+0x28c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <_UG_GetCharData+0x290>)
 8006942:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8006944:	4a1c      	ldr	r2, [pc, #112]	; (80069b8 <_UG_GetCharData+0x294>)
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	7013      	strb	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 800694a:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <_UG_GetCharData+0x28c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	8aba      	ldrh	r2, [r7, #20]
 8006952:	4917      	ldr	r1, [pc, #92]	; (80069b0 <_UG_GetCharData+0x28c>)
 8006954:	6809      	ldr	r1, [r1, #0]
 8006956:	8b09      	ldrh	r1, [r1, #24]
 8006958:	fb01 f202 	mul.w	r2, r1, r2
 800695c:	4413      	add	r3, r2
 800695e:	4a17      	ldr	r2, [pc, #92]	; (80069bc <_UG_GetCharData+0x298>)
 8006960:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8006962:	4b13      	ldr	r3, [pc, #76]	; (80069b0 <_UG_GetCharData+0x28c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <_UG_GetCharData+0x25c>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 800696c:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <_UG_GetCharData+0x28c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6a1a      	ldr	r2, [r3, #32]
 8006972:	8abb      	ldrh	r3, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	b21a      	sxth	r2, r3
 800697a:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <_UG_GetCharData+0x29c>)
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	e005      	b.n	800698c <_UG_GetCharData+0x268>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <_UG_GetCharData+0x28c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	7d9b      	ldrb	r3, [r3, #22]
 8006986:	b21a      	sxth	r2, r3
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <_UG_GetCharData+0x29c>)
 800698a:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <_UG_GetCharData+0x276>
      *p=last_p;                                                    // Load char bitmap address
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <_UG_GetCharData+0x298>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <_UG_GetCharData+0x29c>)
 800699c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069a0:	e001      	b.n	80069a6 <_UG_GetCharData+0x282>
  }
  return -1;                                                        // -1 = char not found
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	200004dc 	.word	0x200004dc
 80069b4:	200004e0 	.word	0x200004e0
 80069b8:	200004e4 	.word	0x200004e4
 80069bc:	200004e8 	.word	0x200004e8
 80069c0:	200004ec 	.word	0x200004ec

080069c4 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80069c4:	b590      	push	{r4, r7, lr}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80069cc:	4b3b      	ldr	r3, [pc, #236]	; (8006abc <_UG_FontSelect+0xf8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d06c      	beq.n	8006ab2 <_UG_FontSelect+0xee>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80069d8:	4b38      	ldr	r3, [pc, #224]	; (8006abc <_UG_FontSelect+0xf8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	62da      	str	r2, [r3, #44]	; 0x2c
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	4b35      	ldr	r3, [pc, #212]	; (8006abc <_UG_FontSelect+0xf8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	751a      	strb	r2, [r3, #20]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	607a      	str	r2, [r7, #4]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b25b      	sxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da01      	bge.n	8006a02 <_UG_FontSelect+0x3e>
 80069fe:	2201      	movs	r2, #1
 8006a00:	e000      	b.n	8006a04 <_UG_FontSelect+0x40>
 8006a02:	2200      	movs	r2, #0
 8006a04:	4b2d      	ldr	r3, [pc, #180]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	755a      	strb	r2, [r3, #21]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	4a2a      	ldr	r2, [pc, #168]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	7593      	strb	r3, [r2, #22]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	4a26      	ldr	r2, [pc, #152]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	75d3      	strb	r3, [r2, #23]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8006a28:	4b24      	ldr	r3, [pc, #144]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a2a:	681c      	ldr	r4, [r3, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fe ff1f 	bl	8005870 <ptr_8to16>
 8006a32:	4603      	mov	r3, r0
 8006a34:	8363      	strh	r3, [r4, #26]
  font+=2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3302      	adds	r3, #2
 8006a3a:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8006a3c:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a3e:	681c      	ldr	r4, [r3, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7fe ff15 	bl	8005870 <ptr_8to16>
 8006a46:	4603      	mov	r3, r0
 8006a48:	83a3      	strh	r3, [r4, #28]
  font+=2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a52:	681c      	ldr	r4, [r3, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fe ff0b 	bl	8005870 <ptr_8to16>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	8323      	strh	r3, [r4, #24]
  font+=2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3302      	adds	r3, #2
 8006a62:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <_UG_FontSelect+0xc4>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	621a      	str	r2, [r3, #32]
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8006a78:	4b10      	ldr	r3, [pc, #64]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	8b5b      	ldrh	r3, [r3, #26]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	e003      	b.n	8006a90 <_UG_FontSelect+0xcc>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	621a      	str	r2, [r3, #32]
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8006a90:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <_UG_FontSelect+0xf8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	8b9b      	ldrh	r3, [r3, #28]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <_UG_FontSelect+0xf8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
 8006ab0:	e000      	b.n	8006ab4 <_UG_FontSelect+0xf0>
    return;
 8006ab2:	bf00      	nop
}
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd90      	pop	{r4, r7, pc}
 8006aba:	bf00      	nop
 8006abc:	200004dc 	.word	0x200004dc

08006ac0 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8006ac0:	b5b0      	push	{r4, r5, r7, lr}
 8006ac2:	b08c      	sub	sp, #48	; 0x30
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	461a      	mov	r2, r3
 8006ace:	4623      	mov	r3, r4
 8006ad0:	71fb      	strb	r3, [r7, #7]
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	80bb      	strh	r3, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	807b      	strh	r3, [r7, #2]
 8006ada:	4613      	mov	r3, r2
 8006adc:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	847b      	strh	r3, [r7, #34]	; 0x22
 8006aea:	2300      	movs	r3, #0
 8006aec:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8006aee:	4b8a      	ldr	r3, [pc, #552]	; (8006d18 <_UG_PutChar+0x258>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006af6:	75fb      	strb	r3, [r7, #23]
 8006af8:	4b87      	ldr	r3, [pc, #540]	; (8006d18 <_UG_PutChar+0x258>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8006b0a:	f107 0208 	add.w	r2, r7, #8
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	4611      	mov	r1, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fe06 	bl	8006724 <_UG_GetCharData>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8006b1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b24:	d102      	bne.n	8006b2c <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8006b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b2a:	e21e      	b.n	8006f6a <_UG_PutChar+0x4aa>

   bn =  gui->currentFont.char_width;
 8006b2c:	4b7a      	ldr	r3, [pc, #488]	; (8006d18 <_UG_PutChar+0x258>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	7d9b      	ldrb	r3, [r3, #22]
 8006b32:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8006b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <_UG_PutChar+0x7e>
     return 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e215      	b.n	8006f6a <_UG_PutChar+0x4aa>
   }
   bn >>= 3;
 8006b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b40:	08db      	lsrs	r3, r3, #3
 8006b42:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8006b44:	4b74      	ldr	r3, [pc, #464]	; (8006d18 <_UG_PutChar+0x258>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	7d9b      	ldrb	r3, [r3, #22]
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <_UG_PutChar+0x9a>
 8006b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b56:	3301      	adds	r3, #1
 8006b58:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8006b5a:	7dbb      	ldrb	r3, [r7, #22]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01c      	beq.n	8006b9a <_UG_PutChar+0xda>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8006b60:	4b6d      	ldr	r3, [pc, #436]	; (8006d18 <_UG_PutChar+0x258>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b66:	461d      	mov	r5, r3
 8006b68:	88ba      	ldrh	r2, [r7, #4]
 8006b6a:	8abb      	ldrh	r3, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	b21c      	sxth	r4, r3
 8006b76:	4b68      	ldr	r3, [pc, #416]	; (8006d18 <_UG_PutChar+0x258>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	7ddb      	ldrb	r3, [r3, #23]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	887b      	ldrh	r3, [r7, #2]
 8006b80:	4413      	add	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	b21b      	sxth	r3, r3
 8006b8a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006b8e:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8006b92:	4622      	mov	r2, r4
 8006b94:	47a8      	blx	r5
 8006b96:	4603      	mov	r3, r0
 8006b98:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8006b9a:	4b5f      	ldr	r3, [pc, #380]	; (8006d18 <_UG_PutChar+0x258>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	7d1b      	ldrb	r3, [r3, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f040 8171 	bne.w	8006e88 <_UG_PutChar+0x3c8>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	853b      	strh	r3, [r7, #40]	; 0x28
 8006baa:	e0ec      	b.n	8006d86 <_UG_PutChar+0x2c6>
     {
       c=0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006bb4:	e0df      	b.n	8006d76 <_UG_PutChar+0x2b6>
       {
         b = *data++;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	60ba      	str	r2, [r7, #8]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006bc4:	e0ca      	b.n	8006d5c <_UG_PutChar+0x29c>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8006bc6:	7f7b      	ldrb	r3, [r7, #29]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d033      	beq.n	8006c38 <_UG_PutChar+0x178>
           {
             if(driver)
 8006bd0:	7dbb      	ldrb	r3, [r7, #22]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01f      	beq.n	8006c16 <_UG_PutChar+0x156>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8006bd6:	8c3b      	ldrh	r3, [r7, #32]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <_UG_PutChar+0x132>
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d107      	bne.n	8006bf2 <_UG_PutChar+0x132>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8006be2:	8c3a      	ldrh	r2, [r7, #32]
 8006be4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	4610      	mov	r0, r2
 8006bec:	4798      	blx	r3
                 bpixels=0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8006bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <_UG_PutChar+0x14e>
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <_UG_PutChar+0x14e>
               {
                 x0=x+c;
 8006bfe:	88ba      	ldrh	r2, [r7, #4]
 8006c00:	8bfb      	ldrh	r3, [r7, #30]
 8006c02:	4413      	add	r3, r2
 8006c04:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8006c06:	887a      	ldrh	r2, [r7, #2]
 8006c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c0a:	4413      	add	r3, r2
 8006c0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8006c0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c10:	3301      	adds	r3, #1
 8006c12:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c14:	e096      	b.n	8006d44 <_UG_PutChar+0x284>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8006c16:	4b40      	ldr	r3, [pc, #256]	; (8006d18 <_UG_PutChar+0x258>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	88b9      	ldrh	r1, [r7, #4]
 8006c20:	8bfa      	ldrh	r2, [r7, #30]
 8006c22:	440a      	add	r2, r1
 8006c24:	b292      	uxth	r2, r2
 8006c26:	b210      	sxth	r0, r2
 8006c28:	8879      	ldrh	r1, [r7, #2]
 8006c2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c2c:	440a      	add	r2, r1
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	b211      	sxth	r1, r2
 8006c32:	883a      	ldrh	r2, [r7, #0]
 8006c34:	4798      	blx	r3
 8006c36:	e085      	b.n	8006d44 <_UG_PutChar+0x284>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8006c38:	7dbb      	ldrb	r3, [r7, #22]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d06e      	beq.n	8006d1c <_UG_PutChar+0x25c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8006c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d064      	beq.n	8006d0e <_UG_PutChar+0x24e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d15e      	bne.n	8006d08 <_UG_PutChar+0x248>
                 {
                   push_pixels(fpixels,fc);
 8006c4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c4c:	8839      	ldrh	r1, [r7, #0]
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	4610      	mov	r0, r2
 8006c52:	4798      	blx	r3
                   fpixels=0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c58:	e059      	b.n	8006d0e <_UG_PutChar+0x24e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8006c5a:	88ba      	ldrh	r2, [r7, #4]
 8006c5c:	8abb      	ldrh	r3, [r7, #20]
 8006c5e:	4413      	add	r3, r2
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8006c68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d003      	beq.n	8006c7a <_UG_PutChar+0x1ba>
 8006c72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c74:	89fb      	ldrh	r3, [r7, #14]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d224      	bcs.n	8006cc4 <_UG_PutChar+0x204>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006c7a:	4b27      	ldr	r3, [pc, #156]	; (8006d18 <_UG_PutChar+0x258>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c80:	461d      	mov	r5, r3
 8006c82:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006c86:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006c8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c8c:	89fb      	ldrh	r3, [r7, #14]
 8006c8e:	4413      	add	r3, r2
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	b21c      	sxth	r4, r3
 8006c98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006c9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ca6:	4413      	add	r3, r2
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	b21b      	sxth	r3, r3
 8006cac:	4622      	mov	r2, r4
 8006cae:	47a8      	blx	r5
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006cb4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006cb6:	8839      	ldrh	r1, [r7, #0]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4798      	blx	r3
                       fpixels=0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	847b      	strh	r3, [r7, #34]	; 0x22
 8006cc2:	e021      	b.n	8006d08 <_UG_PutChar+0x248>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006cc4:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <_UG_PutChar+0x258>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cca:	461c      	mov	r4, r3
 8006ccc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006cd0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006cd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006cd6:	89fb      	ldrh	r3, [r7, #14]
 8006cd8:	4413      	add	r3, r2
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	b21a      	sxth	r2, r3
 8006ce2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006ce6:	47a0      	blx	r4
 8006ce8:	4603      	mov	r3, r0
 8006cea:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006cec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006cee:	8839      	ldrh	r1, [r7, #0]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4798      	blx	r3
                       fpixels -= width;
 8006cf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006cf8:	89fb      	ldrh	r3, [r7, #14]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8006cfe:	88bb      	ldrh	r3, [r7, #4]
 8006d00:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8006d02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d04:	3301      	adds	r3, #1
 8006d06:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8006d08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1a5      	bne.n	8006c5a <_UG_PutChar+0x19a>
                     }
                   }
                 }
               }
               bpixels++;
 8006d0e:	8c3b      	ldrh	r3, [r7, #32]
 8006d10:	3301      	adds	r3, #1
 8006d12:	843b      	strh	r3, [r7, #32]
 8006d14:	e016      	b.n	8006d44 <_UG_PutChar+0x284>
 8006d16:	bf00      	nop
 8006d18:	200004dc 	.word	0x200004dc
             }
             else if(!trans)                           // Not accelerated output
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d110      	bne.n	8006d44 <_UG_PutChar+0x284>
             {
               gui->device->pset(x+c,y+j,bc);
 8006d22:	4b94      	ldr	r3, [pc, #592]	; (8006f74 <_UG_PutChar+0x4b4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	88b9      	ldrh	r1, [r7, #4]
 8006d2c:	8bfa      	ldrh	r2, [r7, #30]
 8006d2e:	440a      	add	r2, r1
 8006d30:	b292      	uxth	r2, r2
 8006d32:	b210      	sxth	r0, r2
 8006d34:	8879      	ldrh	r1, [r7, #2]
 8006d36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006d38:	440a      	add	r2, r1
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	b211      	sxth	r1, r2
 8006d3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006d42:	4798      	blx	r3
             }
           }
           b >>= 1;
 8006d44:	7f7b      	ldrb	r3, [r7, #29]
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	777b      	strb	r3, [r7, #29]
           c++;
 8006d4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3301      	adds	r3, #1
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006d56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d58:	3301      	adds	r3, #1
 8006d5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d5e:	2b07      	cmp	r3, #7
 8006d60:	d806      	bhi.n	8006d70 <_UG_PutChar+0x2b0>
 8006d62:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006d66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	f6ff af2b 	blt.w	8006bc6 <_UG_PutChar+0x106>
       for( i=0;i<bn;i++ )
 8006d70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d72:	3301      	adds	r3, #1
 8006d74:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d76:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	f4ff af1b 	bcc.w	8006bb6 <_UG_PutChar+0xf6>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006d80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d82:	3301      	adds	r3, #1
 8006d84:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d86:	4b7b      	ldr	r3, [pc, #492]	; (8006f74 <_UG_PutChar+0x4b4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	7ddb      	ldrb	r3, [r3, #23]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006d90:	429a      	cmp	r2, r3
 8006d92:	f4ff af0b 	bcc.w	8006bac <_UG_PutChar+0xec>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8006d96:	7dbb      	ldrb	r3, [r7, #22]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80e4 	beq.w	8006f66 <_UG_PutChar+0x4a6>
       if(bpixels && !trans)
 8006d9e:	8c3b      	ldrh	r3, [r7, #32]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <_UG_PutChar+0x2f8>
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <_UG_PutChar+0x2f8>
       {
         push_pixels(bpixels,bc);
 8006daa:	8c3a      	ldrh	r2, [r7, #32]
 8006dac:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	4610      	mov	r0, r2
 8006db4:	4798      	blx	r3
 8006db6:	e0d6      	b.n	8006f66 <_UG_PutChar+0x4a6>
       }
       else if(fpixels)
 8006db8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80d3 	beq.w	8006f66 <_UG_PutChar+0x4a6>
       {
         if(!trans)
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d15c      	bne.n	8006e80 <_UG_PutChar+0x3c0>
         {
           push_pixels(fpixels,fc);
 8006dc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006dc8:	8839      	ldrh	r1, [r7, #0]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4798      	blx	r3
 8006dd0:	e0c9      	b.n	8006f66 <_UG_PutChar+0x4a6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006dd2:	88ba      	ldrh	r2, [r7, #4]
 8006dd4:	8abb      	ldrh	r3, [r7, #20]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8006de0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006de2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d003      	beq.n	8006df2 <_UG_PutChar+0x332>
 8006dea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006dec:	8a3b      	ldrh	r3, [r7, #16]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d224      	bcs.n	8006e3c <_UG_PutChar+0x37c>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006df2:	4b60      	ldr	r3, [pc, #384]	; (8006f74 <_UG_PutChar+0x4b4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df8:	461d      	mov	r5, r3
 8006dfa:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006dfe:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006e02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006e04:	8a3b      	ldrh	r3, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	b21c      	sxth	r4, r3
 8006e10:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e1e:	4413      	add	r3, r2
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	b21b      	sxth	r3, r3
 8006e24:	4622      	mov	r2, r4
 8006e26:	47a8      	blx	r5
 8006e28:	4603      	mov	r3, r0
 8006e2a:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006e2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e2e:	8839      	ldrh	r1, [r7, #0]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	4610      	mov	r0, r2
 8006e34:	4798      	blx	r3
               fpixels=0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e3a:	e021      	b.n	8006e80 <_UG_PutChar+0x3c0>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006e3c:	4b4d      	ldr	r3, [pc, #308]	; (8006f74 <_UG_PutChar+0x4b4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e42:	461c      	mov	r4, r3
 8006e44:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006e48:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006e4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006e4e:	8a3b      	ldrh	r3, [r7, #16]
 8006e50:	4413      	add	r3, r2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	b21a      	sxth	r2, r3
 8006e5a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006e5e:	47a0      	blx	r4
 8006e60:	4603      	mov	r3, r0
 8006e62:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006e64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e66:	8839      	ldrh	r1, [r7, #0]
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4798      	blx	r3
               fpixels -= width;
 8006e6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e70:	8a3b      	ldrh	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8006e76:	88bb      	ldrh	r3, [r7, #4]
 8006e78:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8006e7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8006e80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1a5      	bne.n	8006dd2 <_UG_PutChar+0x312>
 8006e86:	e06e      	b.n	8006f66 <_UG_PutChar+0x4a6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8006e88:	4b3a      	ldr	r3, [pc, #232]	; (8006f74 <_UG_PutChar+0x4b4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	7d1b      	ldrb	r3, [r3, #20]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d169      	bne.n	8006f66 <_UG_PutChar+0x4a6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006e92:	2300      	movs	r3, #0
 8006e94:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e96:	e05f      	b.n	8006f58 <_UG_PutChar+0x498>
     {
       for( i=0;i<actual_char_width;i++ )
 8006e98:	2300      	movs	r3, #0
 8006e9a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e9c:	e04a      	b.n	8006f34 <_UG_PutChar+0x474>
       {
         b = *data++;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	60ba      	str	r2, [r7, #8]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006ea8:	883b      	ldrh	r3, [r7, #0]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	7f7a      	ldrb	r2, [r7, #29]
 8006eae:	fb03 f202 	mul.w	r2, r3, r2
 8006eb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	7f79      	ldrb	r1, [r7, #29]
 8006eba:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	121b      	asrs	r3, r3, #8
 8006ec6:	b21b      	sxth	r3, r3
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8006ecc:	883b      	ldrh	r3, [r7, #0]
 8006ece:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ed2:	7f79      	ldrb	r1, [r7, #29]
 8006ed4:	fb03 f101 	mul.w	r1, r3, r1
 8006ed8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006edc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ee0:	7f78      	ldrb	r0, [r7, #29]
 8006ee2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006ee6:	fb00 f303 	mul.w	r3, r0, r3
 8006eea:	440b      	add	r3, r1
 8006eec:	121b      	asrs	r3, r3, #8
 8006eee:	b21b      	sxth	r3, r3
 8006ef0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ef4:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	b21b      	sxth	r3, r3
 8006efa:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8006efc:	7dbb      	ldrb	r3, [r7, #22]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <_UG_PutChar+0x44e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8006f02:	8a7a      	ldrh	r2, [r7, #18]
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	4611      	mov	r1, r2
 8006f08:	2001      	movs	r0, #1
 8006f0a:	4798      	blx	r3
 8006f0c:	e00f      	b.n	8006f2e <_UG_PutChar+0x46e>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8006f0e:	4b19      	ldr	r3, [pc, #100]	; (8006f74 <_UG_PutChar+0x4b4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	88b9      	ldrh	r1, [r7, #4]
 8006f18:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006f1a:	440a      	add	r2, r1
 8006f1c:	b292      	uxth	r2, r2
 8006f1e:	b210      	sxth	r0, r2
 8006f20:	8879      	ldrh	r1, [r7, #2]
 8006f22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006f24:	440a      	add	r2, r1
 8006f26:	b292      	uxth	r2, r2
 8006f28:	b211      	sxth	r1, r2
 8006f2a:	8a7a      	ldrh	r2, [r7, #18]
 8006f2c:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8006f2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f30:	3301      	adds	r3, #1
 8006f32:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f34:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006f36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	dbaf      	blt.n	8006e9e <_UG_PutChar+0x3de>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4a0c      	ldr	r2, [pc, #48]	; (8006f74 <_UG_PutChar+0x4b4>)
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	7d92      	ldrb	r2, [r2, #22]
 8006f46:	4611      	mov	r1, r2
 8006f48:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006f4c:	1a8a      	subs	r2, r1, r2
 8006f4e:	4413      	add	r3, r2
 8006f50:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006f52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f54:	3301      	adds	r3, #1
 8006f56:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <_UG_PutChar+0x4b4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	7ddb      	ldrb	r3, [r3, #23]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d398      	bcc.n	8006e98 <_UG_PutChar+0x3d8>
     }
   }
   #endif
   return (actual_char_width);
 8006f66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3730      	adds	r7, #48	; 0x30
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bdb0      	pop	{r4, r5, r7, pc}
 8006f72:	bf00      	nop
 8006f74:	200004dc 	.word	0x200004dc

08006f78 <_UG_UpdateObjects>:
   }
}
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006f86:	2300      	movs	r3, #0
 8006f88:	82fb      	strh	r3, [r7, #22]
 8006f8a:	e01f      	b.n	8006fcc <_UG_UpdateObjects+0x54>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	8afb      	ldrh	r3, [r7, #22]
 8006f92:	015b      	lsls	r3, r3, #5
 8006f94:	4413      	add	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10e      	bne.n	8006fc6 <_UG_UpdateObjects+0x4e>
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <_UG_UpdateObjects+0x4e>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <_UG_UpdateObjects+0x4e>
         {
            obj->update(wnd,obj);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	6939      	ldr	r1, [r7, #16]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006fc6:	8afb      	ldrh	r3, [r7, #22]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	82fb      	strh	r3, [r7, #22]
 8006fcc:	8afa      	ldrh	r2, [r7, #22]
 8006fce:	8abb      	ldrh	r3, [r7, #20]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d3db      	bcc.n	8006f8c <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006fe8:	4b22      	ldr	r3, [pc, #136]	; (8007074 <_UG_HandleEvents+0x94>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8006fee:	4b21      	ldr	r3, [pc, #132]	; (8007074 <_UG_HandleEvents+0x94>)
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	82fb      	strh	r3, [r7, #22]
 8006ffe:	e02f      	b.n	8007060 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	8afb      	ldrh	r3, [r7, #22]
 8007006:	015b      	lsls	r3, r3, #5
 8007008:	4413      	add	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d11e      	bne.n	800705a <_UG_HandleEvents+0x7a>
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d019      	beq.n	800705a <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	7e9b      	ldrb	r3, [r3, #26]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d015      	beq.n	800705a <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 800702e:	4a11      	ldr	r2, [pc, #68]	; (8007074 <_UG_HandleEvents+0x94>)
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	7e1a      	ldrb	r2, [r3, #24]
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <_UG_HandleEvents+0x94>)
 800703a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	7e5a      	ldrb	r2, [r3, #25]
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <_UG_HandleEvents+0x94>)
 8007042:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	7e9a      	ldrb	r2, [r3, #26]
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <_UG_HandleEvents+0x94>)
 800704a:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	4808      	ldr	r0, [pc, #32]	; (8007074 <_UG_HandleEvents+0x94>)
 8007052:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2200      	movs	r2, #0
 8007058:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 800705a:	8afb      	ldrh	r3, [r7, #22]
 800705c:	3301      	adds	r3, #1
 800705e:	82fb      	strh	r3, [r7, #22]
 8007060:	8afa      	ldrh	r2, [r7, #22]
 8007062:	8abb      	ldrh	r3, [r7, #20]
 8007064:	429a      	cmp	r2, r3
 8007066:	d3cb      	bcc.n	8007000 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200004f0 	.word	0x200004f0

08007078 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b08f      	sub	sp, #60	; 0x3c
 800707c:	af02      	add	r7, sp, #8
 800707e:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8102 	beq.w	800728e <_UG_PutText+0x216>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80fd 	beq.w	800728e <_UG_PutText+0x216>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	89db      	ldrh	r3, [r3, #14]
 8007098:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	895b      	ldrh	r3, [r3, #10]
 800709e:	833b      	strh	r3, [r7, #24]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	3302      	adds	r3, #2
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	82fb      	strh	r3, [r7, #22]

   if ( (ye - ys) < char_height ){
 80070aa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80070ae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	f2c0 80ea 	blt.w	8007292 <_UG_PutText+0x21a>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	891b      	ldrh	r3, [r3, #8]
 80070c2:	82bb      	strh	r3, [r7, #20]
   UG_S16 xe=txt->a.xe;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	899b      	ldrh	r3, [r3, #12]
 80070c8:	827b      	strh	r3, [r7, #18]
   UG_U8  align=txt->align;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7d1b      	ldrb	r3, [r3, #20]
 80070ce:	747b      	strb	r3, [r7, #17]
   UG_S16 char_h_space=txt->h_space;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8adb      	ldrh	r3, [r3, #22]
 80070d4:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_v_space=txt->v_space;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	8b1b      	ldrh	r3, [r3, #24]
 80070da:	81bb      	strh	r3, [r7, #12]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	623b      	str	r3, [r7, #32]
   char* c = str;
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	61fb      	str	r3, [r7, #28]

   _UG_FontSelect(txt->font);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fc6a 	bl	80069c4 <_UG_FontSelect>

   rc=1;
 80070f0:	2301      	movs	r3, #1
 80070f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	61fb      	str	r3, [r7, #28]
     }
     else{
       chr = *c++;
     }
     #else
     chr = *c++;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	61fa      	str	r2, [r7, #28]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	72fb      	strb	r3, [r7, #11]
     #endif
     if(!chr) break;
 8007102:	7afb      	ldrb	r3, [r7, #11]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <_UG_PutText+0x9e>
     if ( chr == '\n' ) rc++;
 8007108:	7afb      	ldrb	r3, [r7, #11]
 800710a:	2b0a      	cmp	r3, #10
 800710c:	d1f4      	bne.n	80070f8 <_UG_PutText+0x80>
 800710e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007110:	3301      	adds	r3, #1
 8007112:	85bb      	strh	r3, [r7, #44]	; 0x2c
     chr = *c++;
 8007114:	e7f0      	b.n	80070f8 <_UG_PutText+0x80>
     if(!chr) break;
 8007116:	bf00      	nop
   }

   yp = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 800711c:	7c7b      	ldrb	r3, [r7, #17]
 800711e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01f      	beq.n	8007166 <_UG_PutText+0xee>
   {
      yp = ye - ys + 1;
 8007126:	8b7a      	ldrh	r2, [r7, #26]
 8007128:	8b3b      	ldrh	r3, [r7, #24]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	b29b      	uxth	r3, r3
 800712e:	3301      	adds	r3, #1
 8007130:	b29b      	uxth	r3, r3
 8007132:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8007134:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007136:	8afb      	ldrh	r3, [r7, #22]
 8007138:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800713a:	fb11 f303 	smulbb	r3, r1, r3
 800713e:	b29b      	uxth	r3, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8007146:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007148:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800714a:	3b01      	subs	r3, #1
 800714c:	b299      	uxth	r1, r3
 800714e:	89bb      	ldrh	r3, [r7, #12]
 8007150:	fb11 f303 	smulbb	r3, r1, r3
 8007154:	b29b      	uxth	r3, r3
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	b29b      	uxth	r3, r3
 800715a:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 800715c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007160:	2b00      	cmp	r3, #0
 8007162:	f2c0 8098 	blt.w	8007296 <_UG_PutText+0x21e>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8007166:	7c7b      	ldrb	r3, [r7, #17]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <_UG_PutText+0x100>
 8007170:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007174:	105b      	asrs	r3, r3, #1
 8007176:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8007178:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800717a:	8b3b      	ldrh	r3, [r7, #24]
 800717c:	4413      	add	r3, r2
 800717e:	b29b      	uxth	r3, r3
 8007180:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8007182:	2300      	movs	r3, #0
 8007184:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	61fb      	str	r3, [r7, #28]
      wl = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        else{
          chr = *c++;
        }
        #else
        chr = *c++;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	61fa      	str	r2, [r7, #28]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	72fb      	strb	r3, [r7, #11]
        #endif
        if( chr == 0 || chr == '\n'){
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01b      	beq.n	80071d6 <_UG_PutText+0x15e>
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	2b0a      	cmp	r3, #10
 80071a2:	d018      	beq.n	80071d6 <_UG_PutText+0x15e>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	2100      	movs	r1, #0
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fabb 	bl	8006724 <_UG_GetCharData>
 80071ae:	4603      	mov	r3, r0
 80071b0:	813b      	strh	r3, [r7, #8]
         if (w == -1){continue;}
 80071b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ba:	d00a      	beq.n	80071d2 <_UG_PutText+0x15a>
         sl++;
 80071bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071be:	3301      	adds	r3, #1
 80071c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 80071c2:	893a      	ldrh	r2, [r7, #8]
 80071c4:	89fb      	ldrh	r3, [r7, #14]
 80071c6:	4413      	add	r3, r2
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80071cc:	4413      	add	r3, r2
 80071ce:	857b      	strh	r3, [r7, #42]	; 0x2a
 80071d0:	e7dd      	b.n	800718e <_UG_PutText+0x116>
         if (w == -1){continue;}
 80071d2:	bf00      	nop
        chr = *c++;
 80071d4:	e7db      	b.n	800718e <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 80071d6:	89fb      	ldrh	r3, [r7, #14]
 80071d8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 80071de:	8a7a      	ldrh	r2, [r7, #18]
 80071e0:	8abb      	ldrh	r3, [r7, #20]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3301      	adds	r3, #1
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80071ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80071ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80071f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	db4d      	blt.n	800729a <_UG_PutText+0x222>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80071fe:	7c7b      	ldrb	r3, [r7, #17]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <_UG_PutText+0x196>
 8007208:	2300      	movs	r3, #0
 800720a:	853b      	strh	r3, [r7, #40]	; 0x28
 800720c:	e008      	b.n	8007220 <_UG_PutText+0x1a8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 800720e:	7c7b      	ldrb	r3, [r7, #17]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <_UG_PutText+0x1a8>
 8007218:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800721c:	105b      	asrs	r3, r3, #1
 800721e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8007220:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007222:	8abb      	ldrh	r3, [r7, #20]
 8007224:	4413      	add	r3, r2
 8007226:	b29b      	uxth	r3, r3
 8007228:	853b      	strh	r3, [r7, #40]	; 0x28
         }
         else{
           chr = *str++;
         }
         #else
         chr = *str++;
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	623a      	str	r2, [r7, #32]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	72fb      	strb	r3, [r7, #11]
         #endif
         if ( chr == 0 ){
 8007234:	7afb      	ldrb	r3, [r7, #11]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d031      	beq.n	800729e <_UG_PutText+0x226>
           return;
         }
         else if(chr=='\n'){
 800723a:	7afb      	ldrb	r3, [r7, #11]
 800723c:	2b0a      	cmp	r3, #10
 800723e:	d01c      	beq.n	800727a <_UG_PutText+0x202>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8a1c      	ldrh	r4, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8a5b      	ldrh	r3, [r3, #18]
 8007248:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800724c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8007250:	7af8      	ldrb	r0, [r7, #11]
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	4623      	mov	r3, r4
 8007256:	f7ff fc33 	bl	8006ac0 <_UG_PutChar>
 800725a:	4603      	mov	r3, r0
 800725c:	813b      	strh	r3, [r7, #8]
         if(w!=-1)
 800725e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007266:	d0e0      	beq.n	800722a <_UG_PutText+0x1b2>
           xp += w + char_h_space;
 8007268:	893a      	ldrh	r2, [r7, #8]
 800726a:	89fb      	ldrh	r3, [r7, #14]
 800726c:	4413      	add	r3, r2
 800726e:	b29a      	uxth	r2, r3
 8007270:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007272:	4413      	add	r3, r2
 8007274:	b29b      	uxth	r3, r3
 8007276:	853b      	strh	r3, [r7, #40]	; 0x28
         chr = *str++;
 8007278:	e7d7      	b.n	800722a <_UG_PutText+0x1b2>
           break;
 800727a:	bf00      	nop
      }
      yp += char_height + char_v_space;
 800727c:	8afa      	ldrh	r2, [r7, #22]
 800727e:	89bb      	ldrh	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	b29a      	uxth	r2, r3
 8007284:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007286:	4413      	add	r3, r2
 8007288:	b29b      	uxth	r3, r3
 800728a:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 800728c:	e779      	b.n	8007182 <_UG_PutText+0x10a>
     return;
 800728e:	bf00      	nop
 8007290:	e006      	b.n	80072a0 <_UG_PutText+0x228>
     return;
 8007292:	bf00      	nop
 8007294:	e004      	b.n	80072a0 <_UG_PutText+0x228>
        return;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <_UG_PutText+0x228>
      if ( xp < 0 ) break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <_UG_PutText+0x228>
           return;
 800729e:	bf00      	nop
   }
}
 80072a0:	3734      	adds	r7, #52	; 0x34
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd90      	pop	{r4, r7, pc}

080072a6 <_UG_SearchObject>:

UG_OBJECT* _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id )
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
 80072b2:	4613      	mov	r3, r2
 80072b4:	70bb      	strb	r3, [r7, #2]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]
 80072c0:	e020      	b.n	8007304 <_UG_SearchObject+0x5e>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	015b      	lsls	r3, r3, #5
 80072ca:	4413      	add	r3, r2
 80072cc:	60bb      	str	r3, [r7, #8]
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d111      	bne.n	80072fe <_UG_SearchObject+0x58>
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00b      	beq.n	80072fe <_UG_SearchObject+0x58>
      {
         if ( (obj->type == type) && (obj->id == id) )
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	7e1b      	ldrb	r3, [r3, #24]
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d106      	bne.n	80072fe <_UG_SearchObject+0x58>
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	7e5b      	ldrb	r3, [r3, #25]
 80072f4:	78ba      	ldrb	r2, [r7, #2]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d101      	bne.n	80072fe <_UG_SearchObject+0x58>
         {
            /* Requested object found! */
            return obj;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	e008      	b.n	8007310 <_UG_SearchObject+0x6a>
   for(i=0;i<wnd->objcnt;i++)
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	3301      	adds	r3, #1
 8007302:	73fb      	strb	r3, [r7, #15]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	7bfa      	ldrb	r2, [r7, #15]
 800730a:	429a      	cmp	r2, r3
 800730c:	d3d9      	bcc.n	80072c2 <_UG_SearchObject+0x1c>
         }
      }
   }
   return NULL;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <_UG_DrawObjectFrame>:

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 800731c:	b5b0      	push	{r4, r5, r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af02      	add	r7, sp, #8
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	461a      	mov	r2, r3
 800732a:	4623      	mov	r3, r4
 800732c:	80fb      	strh	r3, [r7, #6]
 800732e:	4603      	mov	r3, r0
 8007330:	80bb      	strh	r3, [r7, #4]
 8007332:	460b      	mov	r3, r1
 8007334:	807b      	strh	r3, [r7, #2]
 8007336:	4613      	mov	r3, r2
 8007338:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800733a:	887b      	ldrh	r3, [r7, #2]
 800733c:	3b01      	subs	r3, #1
 800733e:	b29b      	uxth	r3, r3
 8007340:	b21c      	sxth	r4, r3
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	1c9a      	adds	r2, r3, #2
 8007346:	61ba      	str	r2, [r7, #24]
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800734e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007352:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	4613      	mov	r3, r2
 800735a:	4622      	mov	r2, r4
 800735c:	f7fe fe50 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8007360:	88bb      	ldrh	r3, [r7, #4]
 8007362:	3301      	adds	r3, #1
 8007364:	b29b      	uxth	r3, r3
 8007366:	b219      	sxth	r1, r3
 8007368:	883b      	ldrh	r3, [r7, #0]
 800736a:	3b01      	subs	r3, #1
 800736c:	b29b      	uxth	r3, r3
 800736e:	b21c      	sxth	r4, r3
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	1c9a      	adds	r2, r3, #2
 8007374:	61ba      	str	r2, [r7, #24]
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800737c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4623      	mov	r3, r4
 8007384:	f7fe fe3c 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	1c9a      	adds	r2, r3, #2
 800738c:	61ba      	str	r2, [r7, #24]
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	f9b7 4000 	ldrsh.w	r4, [r7]
 8007394:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007398:	f9b7 1000 	ldrsh.w	r1, [r7]
 800739c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	4623      	mov	r3, r4
 80073a4:	f7fe fe2c 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80073a8:	883b      	ldrh	r3, [r7, #0]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	b21c      	sxth	r4, r3
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	1c9a      	adds	r2, r3, #2
 80073b4:	61ba      	str	r2, [r7, #24]
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80073bc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80073c0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	4623      	mov	r3, r4
 80073c8:	f7fe fe1a 	bl	8006000 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	3301      	adds	r3, #1
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	b218      	sxth	r0, r3
 80073d4:	88bb      	ldrh	r3, [r7, #4]
 80073d6:	3301      	adds	r3, #1
 80073d8:	b29b      	uxth	r3, r3
 80073da:	b219      	sxth	r1, r3
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	3b02      	subs	r3, #2
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	b21c      	sxth	r4, r3
 80073e4:	88bb      	ldrh	r3, [r7, #4]
 80073e6:	3301      	adds	r3, #1
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	b21d      	sxth	r5, r3
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	1c9a      	adds	r2, r3, #2
 80073f0:	61ba      	str	r2, [r7, #24]
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	462b      	mov	r3, r5
 80073f8:	4622      	mov	r2, r4
 80073fa:	f7fe fe01 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	3301      	adds	r3, #1
 8007402:	b29b      	uxth	r3, r3
 8007404:	b218      	sxth	r0, r3
 8007406:	88bb      	ldrh	r3, [r7, #4]
 8007408:	3302      	adds	r3, #2
 800740a:	b29b      	uxth	r3, r3
 800740c:	b219      	sxth	r1, r3
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	3301      	adds	r3, #1
 8007412:	b29b      	uxth	r3, r3
 8007414:	b21c      	sxth	r4, r3
 8007416:	883b      	ldrh	r3, [r7, #0]
 8007418:	3b02      	subs	r3, #2
 800741a:	b29b      	uxth	r3, r3
 800741c:	b21d      	sxth	r5, r3
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	1c9a      	adds	r2, r3, #2
 8007422:	61ba      	str	r2, [r7, #24]
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	462b      	mov	r3, r5
 800742a:	4622      	mov	r2, r4
 800742c:	f7fe fde8 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8007430:	88fb      	ldrh	r3, [r7, #6]
 8007432:	3301      	adds	r3, #1
 8007434:	b29b      	uxth	r3, r3
 8007436:	b218      	sxth	r0, r3
 8007438:	883b      	ldrh	r3, [r7, #0]
 800743a:	3b01      	subs	r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	b219      	sxth	r1, r3
 8007440:	887b      	ldrh	r3, [r7, #2]
 8007442:	3b01      	subs	r3, #1
 8007444:	b29b      	uxth	r3, r3
 8007446:	b21c      	sxth	r4, r3
 8007448:	883b      	ldrh	r3, [r7, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	b29b      	uxth	r3, r3
 800744e:	b21d      	sxth	r5, r3
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	1c9a      	adds	r2, r3, #2
 8007454:	61ba      	str	r2, [r7, #24]
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	462b      	mov	r3, r5
 800745c:	4622      	mov	r2, r4
 800745e:	f7fe fdcf 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8007462:	887b      	ldrh	r3, [r7, #2]
 8007464:	3b01      	subs	r3, #1
 8007466:	b29b      	uxth	r3, r3
 8007468:	b218      	sxth	r0, r3
 800746a:	88bb      	ldrh	r3, [r7, #4]
 800746c:	3301      	adds	r3, #1
 800746e:	b29b      	uxth	r3, r3
 8007470:	b219      	sxth	r1, r3
 8007472:	887b      	ldrh	r3, [r7, #2]
 8007474:	3b01      	subs	r3, #1
 8007476:	b29b      	uxth	r3, r3
 8007478:	b21c      	sxth	r4, r3
 800747a:	883b      	ldrh	r3, [r7, #0]
 800747c:	3b02      	subs	r3, #2
 800747e:	b29b      	uxth	r3, r3
 8007480:	b21d      	sxth	r5, r3
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	1c9a      	adds	r2, r3, #2
 8007486:	61ba      	str	r2, [r7, #24]
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	462b      	mov	r3, r5
 800748e:	4622      	mov	r2, r4
 8007490:	f7fe fdb6 	bl	8006000 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	3302      	adds	r3, #2
 8007498:	b29b      	uxth	r3, r3
 800749a:	b218      	sxth	r0, r3
 800749c:	88bb      	ldrh	r3, [r7, #4]
 800749e:	3302      	adds	r3, #2
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	b219      	sxth	r1, r3
 80074a4:	887b      	ldrh	r3, [r7, #2]
 80074a6:	3b03      	subs	r3, #3
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	b21c      	sxth	r4, r3
 80074ac:	88bb      	ldrh	r3, [r7, #4]
 80074ae:	3302      	adds	r3, #2
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	b21d      	sxth	r5, r3
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	1c9a      	adds	r2, r3, #2
 80074b8:	61ba      	str	r2, [r7, #24]
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	462b      	mov	r3, r5
 80074c0:	4622      	mov	r2, r4
 80074c2:	f7fe fd9d 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	3302      	adds	r3, #2
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	b218      	sxth	r0, r3
 80074ce:	88bb      	ldrh	r3, [r7, #4]
 80074d0:	3303      	adds	r3, #3
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	b219      	sxth	r1, r3
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	3302      	adds	r3, #2
 80074da:	b29b      	uxth	r3, r3
 80074dc:	b21c      	sxth	r4, r3
 80074de:	883b      	ldrh	r3, [r7, #0]
 80074e0:	3b03      	subs	r3, #3
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	b21d      	sxth	r5, r3
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	1c9a      	adds	r2, r3, #2
 80074ea:	61ba      	str	r2, [r7, #24]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	462b      	mov	r3, r5
 80074f2:	4622      	mov	r2, r4
 80074f4:	f7fe fd84 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	3302      	adds	r3, #2
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	b218      	sxth	r0, r3
 8007500:	883b      	ldrh	r3, [r7, #0]
 8007502:	3b02      	subs	r3, #2
 8007504:	b29b      	uxth	r3, r3
 8007506:	b219      	sxth	r1, r3
 8007508:	887b      	ldrh	r3, [r7, #2]
 800750a:	3b02      	subs	r3, #2
 800750c:	b29b      	uxth	r3, r3
 800750e:	b21c      	sxth	r4, r3
 8007510:	883b      	ldrh	r3, [r7, #0]
 8007512:	3b02      	subs	r3, #2
 8007514:	b29b      	uxth	r3, r3
 8007516:	b21d      	sxth	r5, r3
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	1c9a      	adds	r2, r3, #2
 800751c:	61ba      	str	r2, [r7, #24]
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	462b      	mov	r3, r5
 8007524:	4622      	mov	r2, r4
 8007526:	f7fe fd6b 	bl	8006000 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 800752a:	887b      	ldrh	r3, [r7, #2]
 800752c:	3b02      	subs	r3, #2
 800752e:	b29b      	uxth	r3, r3
 8007530:	b218      	sxth	r0, r3
 8007532:	88bb      	ldrh	r3, [r7, #4]
 8007534:	3302      	adds	r3, #2
 8007536:	b29b      	uxth	r3, r3
 8007538:	b219      	sxth	r1, r3
 800753a:	887b      	ldrh	r3, [r7, #2]
 800753c:	3b02      	subs	r3, #2
 800753e:	b29b      	uxth	r3, r3
 8007540:	b21a      	sxth	r2, r3
 8007542:	883b      	ldrh	r3, [r7, #0]
 8007544:	3b03      	subs	r3, #3
 8007546:	b29b      	uxth	r3, r3
 8007548:	b21c      	sxth	r4, r3
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	4623      	mov	r3, r4
 8007552:	f7fe fd55 	bl	8006000 <UG_DrawLine>
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bdb0      	pop	{r4, r5, r7, pc}

0800755e <_UG_GetFreeObject>:

UG_OBJECT* _UG_GetFreeObject( UG_WINDOW* wnd )
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]
 8007570:	e016      	b.n	80075a0 <_UG_GetFreeObject+0x42>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	015b      	lsls	r3, r3, #5
 800757a:	4413      	add	r3, r2
 800757c:	60bb      	str	r3, [r7, #8]
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d007      	beq.n	800759a <_UG_GetFreeObject+0x3c>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <_UG_GetFreeObject+0x3c>
      {
         /* Free object found! */
         return obj;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	e008      	b.n	80075ac <_UG_GetFreeObject+0x4e>
   for(i=0;i<wnd->objcnt;i++)
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	3301      	adds	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	7bfa      	ldrb	r2, [r7, #15]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d3e3      	bcc.n	8007572 <_UG_GetFreeObject+0x14>
      }
   }
   return NULL;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	6039      	str	r1, [r7, #0]
 80075c2:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d810      	bhi.n	80075ec <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <UG_DriverRegister+0x40>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	3307      	adds	r3, #7
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	4413      	add	r3, r2
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <UG_DriverRegister+0x40>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	3307      	adds	r3, #7
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	4413      	add	r3, r2
 80075e6:	2203      	movs	r2, #3
 80075e8:	721a      	strb	r2, [r3, #8]
 80075ea:	e000      	b.n	80075ee <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80075ec:	bf00      	nop
}
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	200004dc 	.word	0x200004dc

080075fc <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8007602:	4b5d      	ldr	r3, [pc, #372]	; (8007778 <UG_Update+0x17c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <UG_Update+0x2c>
 8007612:	4b59      	ldr	r3, [pc, #356]	; (8007778 <UG_Update+0x17c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800761a:	4b57      	ldr	r3, [pc, #348]	; (8007778 <UG_Update+0x17c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0201 	bic.w	r2, r2, #1
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8007628:	4b53      	ldr	r3, [pc, #332]	; (8007778 <UG_Update+0x17c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	4b52      	ldr	r3, [pc, #328]	; (8007778 <UG_Update+0x17c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	429a      	cmp	r2, r3
 8007636:	d071      	beq.n	800771c <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8007638:	4b4f      	ldr	r3, [pc, #316]	; (8007778 <UG_Update+0x17c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d06c      	beq.n	800771c <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8007642:	4b4d      	ldr	r3, [pc, #308]	; (8007778 <UG_Update+0x17c>)
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	4b4c      	ldr	r3, [pc, #304]	; (8007778 <UG_Update+0x17c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6892      	ldr	r2, [r2, #8]
 800764c:	60da      	str	r2, [r3, #12]
         gui->active_window = gui->next_window;
 800764e:	4b4a      	ldr	r3, [pc, #296]	; (8007778 <UG_Update+0x17c>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b49      	ldr	r3, [pc, #292]	; (8007778 <UG_Update+0x17c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6852      	ldr	r2, [r2, #4]
 8007658:	609a      	str	r2, [r3, #8]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 800765a:	4b47      	ldr	r3, [pc, #284]	; (8007778 <UG_Update+0x17c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d045      	beq.n	80076f0 <UG_Update+0xf4>
 8007664:	4b44      	ldr	r3, [pc, #272]	; (8007778 <UG_Update+0x17c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	7d9b      	ldrb	r3, [r3, #22]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d03d      	beq.n	80076f0 <UG_Update+0xf4>
 8007674:	4b40      	ldr	r3, [pc, #256]	; (8007778 <UG_Update+0x17c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	7a1b      	ldrb	r3, [r3, #8]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d035      	beq.n	80076f0 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8007684:	4b3c      	ldr	r3, [pc, #240]	; (8007778 <UG_Update+0x17c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800768e:	4b3a      	ldr	r3, [pc, #232]	; (8007778 <UG_Update+0x17c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007698:	429a      	cmp	r2, r3
 800769a:	d123      	bne.n	80076e4 <UG_Update+0xe8>
 800769c:	4b36      	ldr	r3, [pc, #216]	; (8007778 <UG_Update+0x17c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80076a6:	4b34      	ldr	r3, [pc, #208]	; (8007778 <UG_Update+0x17c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d117      	bne.n	80076e4 <UG_Update+0xe8>
 80076b4:	4b30      	ldr	r3, [pc, #192]	; (8007778 <UG_Update+0x17c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80076be:	4b2e      	ldr	r3, [pc, #184]	; (8007778 <UG_Update+0x17c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d10b      	bne.n	80076e4 <UG_Update+0xe8>
 80076cc:	4b2a      	ldr	r3, [pc, #168]	; (8007778 <UG_Update+0x17c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80076d6:	4b28      	ldr	r3, [pc, #160]	; (8007778 <UG_Update+0x17c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d005      	beq.n	80076f0 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80076e4:	4b24      	ldr	r3, [pc, #144]	; (8007778 <UG_Update+0x17c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fd78 	bl	80081e0 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80076f0:	4b21      	ldr	r3, [pc, #132]	; (8007778 <UG_Update+0x17c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	7a1a      	ldrb	r2, [r3, #8]
 80076f8:	4b1f      	ldr	r3, [pc, #124]	; (8007778 <UG_Update+0x17c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8007706:	4b1c      	ldr	r3, [pc, #112]	; (8007778 <UG_Update+0x17c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	7a1a      	ldrb	r2, [r3, #8]
 800770e:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <UG_Update+0x17c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 800771c:	4b16      	ldr	r3, [pc, #88]	; (8007778 <UG_Update+0x17c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d018      	beq.n	8007758 <UG_Update+0x15c>
   {
      wnd = gui->active_window;
 8007726:	4b14      	ldr	r3, [pc, #80]	; (8007778 <UG_Update+0x17c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7a1b      	ldrb	r3, [r3, #8]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fdfa 	bl	8008334 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7a1b      	ldrb	r3, [r3, #8]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <UG_Update+0x15c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
         #endif
         _UG_UpdateObjects( wnd );
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fc13 	bl	8006f78 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fc44 	bl	8006fe0 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <UG_Update+0x17c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <UG_Update+0x172>
     gui->device->flush();
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <UG_Update+0x17c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	4798      	blx	r3
   }
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	200004dc 	.word	0x200004dc

0800777c <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 800777c:	b5b0      	push	{r4, r5, r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	603a      	str	r2, [r7, #0]
 8007786:	80fb      	strh	r3, [r7, #6]
 8007788:	460b      	mov	r3, r1
 800778a:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 810c 	beq.w	80079ae <UG_DrawBMP+0x232>

   if ( bmp->bpp == BMP_BPP_1){
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	7a1b      	ldrb	r3, [r3, #8]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d164      	bne.n	8007868 <UG_DrawBMP+0xec>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 80077a4:	2300      	movs	r3, #0
 80077a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80077a8:	e057      	b.n	800785a <UG_DrawBMP+0xde>
      {
         for(x=0;x<bmp->width;x++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	84bb      	strh	r3, [r7, #36]	; 0x24
 80077ae:	e048      	b.n	8007842 <UG_DrawBMP+0xc6>
         {
            yy = y / 8 ;
 80077b0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	da00      	bge.n	80077ba <UG_DrawBMP+0x3e>
 80077b8:	3307      	adds	r3, #7
 80077ba:	10db      	asrs	r3, r3, #3
 80077bc:	b21b      	sxth	r3, r3
 80077be:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 80077c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80077c4:	425a      	negs	r2, r3
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	f002 0207 	and.w	r2, r2, #7
 80077ce:	bf58      	it	pl
 80077d0:	4253      	negpl	r3, r2
 80077d2:	b21b      	sxth	r3, r3
 80077d4:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 80077d6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	8889      	ldrh	r1, [r1, #4]
 80077e0:	fb01 f303 	mul.w	r3, r1, r3
 80077e4:	4413      	add	r3, r2
 80077e6:	461a      	mov	r2, r3
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	4413      	add	r3, r2
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	2201      	movs	r2, #1
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 80077fa:	7bba      	ldrb	r2, [r7, #14]
 80077fc:	7b7b      	ldrb	r3, [r7, #13]
 80077fe:	4013      	ands	r3, r2
 8007800:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <UG_DrawBMP+0x96>
 8007808:	4b6b      	ldr	r3, [pc, #428]	; (80079b8 <UG_DrawBMP+0x23c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800780e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007810:	e003      	b.n	800781a <UG_DrawBMP+0x9e>
            else c = gui->back_color;
 8007812:	4b69      	ldr	r3, [pc, #420]	; (80079b8 <UG_DrawBMP+0x23c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007818:	84fb      	strh	r3, [r7, #38]	; 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 800781a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	4413      	add	r3, r2
 8007820:	b29b      	uxth	r3, r3
 8007822:	b218      	sxth	r0, r3
 8007824:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007826:	88bb      	ldrh	r3, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	b29b      	uxth	r3, r3
 800782c:	b21b      	sxth	r3, r3
 800782e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007830:	4619      	mov	r1, r3
 8007832:	f7fe fa0b 	bl	8005c4c <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 8007836:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800783a:	b29b      	uxth	r3, r3
 800783c:	3301      	adds	r3, #1
 800783e:	b29b      	uxth	r3, r3
 8007840:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007842:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	8892      	ldrh	r2, [r2, #4]
 800784a:	4293      	cmp	r3, r2
 800784c:	dbb0      	blt.n	80077b0 <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 800784e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007852:	b29b      	uxth	r3, r3
 8007854:	3301      	adds	r3, #1
 8007856:	b29b      	uxth	r3, r3
 8007858:	847b      	strh	r3, [r7, #34]	; 0x22
 800785a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	88d2      	ldrh	r2, [r2, #6]
 8007862:	4293      	cmp	r3, r2
 8007864:	dba1      	blt.n	80077aa <UG_DrawBMP+0x2e>
         }
      }
     return;
 8007866:	e0a3      	b.n	80079b0 <UG_DrawBMP+0x234>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	7a1b      	ldrb	r3, [r3, #8]
 800786c:	2b10      	cmp	r3, #16
 800786e:	f040 809f 	bne.w	80079b0 <UG_DrawBMP+0x234>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 8007872:	4b51      	ldr	r3, [pc, #324]	; (80079b8 <UG_DrawBMP+0x23c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <UG_DrawBMP+0x11e>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 8007882:	4b4d      	ldr	r3, [pc, #308]	; (80079b8 <UG_DrawBMP+0x23c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007888:	461c      	mov	r4, r3
 800788a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800788e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	47a0      	blx	r4
        return;
 8007898:	e08a      	b.n	80079b0 <UG_DrawBMP+0x234>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 800789a:	4b47      	ldr	r3, [pc, #284]	; (80079b8 <UG_DrawBMP+0x23c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d04b      	beq.n	8007942 <UG_DrawBMP+0x1c6>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 80078aa:	4b43      	ldr	r3, [pc, #268]	; (80079b8 <UG_DrawBMP+0x23c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b0:	461d      	mov	r5, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	889a      	ldrh	r2, [r3, #4]
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	4413      	add	r3, r2
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	b21c      	sxth	r4, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	88da      	ldrh	r2, [r3, #6]
 80078c6:	88bb      	ldrh	r3, [r7, #4]
 80078c8:	4413      	add	r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	b21b      	sxth	r3, r3
 80078d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80078d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80078da:	4622      	mov	r2, r4
 80078dc:	47a8      	blx	r5
 80078de:	4603      	mov	r3, r0
 80078e0:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 80078e8:	2300      	movs	r3, #0
 80078ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80078ec:	e022      	b.n	8007934 <UG_DrawBMP+0x1b8>
         {
           for(x=0;x<bmp->width;x++)
 80078ee:	2300      	movs	r3, #0
 80078f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80078f2:	e00d      	b.n	8007910 <UG_DrawBMP+0x194>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	1c9a      	adds	r2, r3, #2
 80078f8:	61fa      	str	r2, [r7, #28]
 80078fa:	881a      	ldrh	r2, [r3, #0]
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	4611      	mov	r1, r2
 8007900:	2001      	movs	r0, #1
 8007902:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 8007904:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007908:	b29b      	uxth	r3, r3
 800790a:	3301      	adds	r3, #1
 800790c:	b29b      	uxth	r3, r3
 800790e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007910:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	8892      	ldrh	r2, [r2, #4]
 8007918:	4293      	cmp	r3, r2
 800791a:	dbeb      	blt.n	80078f4 <UG_DrawBMP+0x178>
             #endif
           }
           yp++;
 800791c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007920:	b29b      	uxth	r3, r3
 8007922:	3301      	adds	r3, #1
 8007924:	b29b      	uxth	r3, r3
 8007926:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 8007928:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800792c:	b29b      	uxth	r3, r3
 800792e:	3301      	adds	r3, #1
 8007930:	b29b      	uxth	r3, r3
 8007932:	847b      	strh	r3, [r7, #34]	; 0x22
 8007934:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	88d2      	ldrh	r2, [r2, #6]
 800793c:	4293      	cmp	r3, r2
 800793e:	dbd6      	blt.n	80078ee <UG_DrawBMP+0x172>
         }
         return;
 8007940:	e036      	b.n	80079b0 <UG_DrawBMP+0x234>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 8007948:	2300      	movs	r3, #0
 800794a:	847b      	strh	r3, [r7, #34]	; 0x22
 800794c:	e028      	b.n	80079a0 <UG_DrawBMP+0x224>
     {
        for(x=0;x<bmp->width;x++)
 800794e:	2300      	movs	r3, #0
 8007950:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007952:	e013      	b.n	800797c <UG_DrawBMP+0x200>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007958:	4413      	add	r3, r2
 800795a:	b29b      	uxth	r3, r3
 800795c:	b218      	sxth	r0, r3
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	1c9a      	adds	r2, r3, #2
 8007962:	61ba      	str	r2, [r7, #24]
 8007964:	881a      	ldrh	r2, [r3, #0]
 8007966:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800796a:	4619      	mov	r1, r3
 800796c:	f7fe f96e 	bl	8005c4c <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 8007970:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007974:	b29b      	uxth	r3, r3
 8007976:	3301      	adds	r3, #1
 8007978:	b29b      	uxth	r3, r3
 800797a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800797c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	8892      	ldrh	r2, [r2, #4]
 8007984:	4293      	cmp	r3, r2
 8007986:	dbe5      	blt.n	8007954 <UG_DrawBMP+0x1d8>
          #endif
        }
        yp++;
 8007988:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800798c:	b29b      	uxth	r3, r3
 800798e:	3301      	adds	r3, #1
 8007990:	b29b      	uxth	r3, r3
 8007992:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 8007994:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007998:	b29b      	uxth	r3, r3
 800799a:	3301      	adds	r3, #1
 800799c:	b29b      	uxth	r3, r3
 800799e:	847b      	strh	r3, [r7, #34]	; 0x22
 80079a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	88d2      	ldrh	r2, [r2, #6]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	dbd0      	blt.n	800794e <UG_DrawBMP+0x1d2>
 80079ac:	e000      	b.n	80079b0 <UG_DrawBMP+0x234>
   if ( bmp->p == NULL ) return;
 80079ae:	bf00      	nop
     }
   }
   #endif
}
 80079b0:	3728      	adds	r7, #40	; 0x28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bdb0      	pop	{r4, r5, r7, pc}
 80079b6:	bf00      	nop
 80079b8:	200004dc 	.word	0x200004dc

080079bc <UG_WindowCreate>:

/* -------------------------------------------------------------------------------- */
/* -- WINDOW FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_WindowCreate( UG_WINDOW* wnd, UG_OBJECT* objlst, UG_U8 objcnt, void (*cb)( UG_MESSAGE* ) )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	4613      	mov	r3, r2
 80079ca:	71fb      	strb	r3, [r7, #7]
   UG_U8 i;
   UG_OBJECT* obj=NULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]

   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <UG_WindowCreate+0x26>
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <UG_WindowCreate+0x26>
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <UG_WindowCreate+0x2c>
 80079e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079e6:	e072      	b.n	8007ace <UG_WindowCreate+0x112>

   /* Initialize all objects of the window */
   for(i=0; i<objcnt; i++)
 80079e8:	2300      	movs	r3, #0
 80079ea:	75fb      	strb	r3, [r7, #23]
 80079ec:	e00d      	b.n	8007a0a <UG_WindowCreate+0x4e>
   {
      obj = (UG_OBJECT*)&objlst[i];
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	015b      	lsls	r3, r3, #5
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4413      	add	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
      obj->state = OBJ_STATE_INIT;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2203      	movs	r2, #3
 80079fc:	701a      	strb	r2, [r3, #0]
      obj->data = NULL;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2200      	movs	r2, #0
 8007a02:	61da      	str	r2, [r3, #28]
   for(i=0; i<objcnt; i++)
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	3301      	adds	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
 8007a0a:	7dfa      	ldrb	r2, [r7, #23]
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3ed      	bcc.n	80079ee <UG_WindowCreate+0x32>
   }

   /* Initialize window */
   wnd->objcnt = objcnt;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	79fa      	ldrb	r2, [r7, #7]
 8007a16:	701a      	strb	r2, [r3, #0]
   wnd->objlst = objlst;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	605a      	str	r2, [r3, #4]
   wnd->state = WND_STATE_VALID;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2202      	movs	r2, #2
 8007a22:	721a      	strb	r2, [r3, #8]
   wnd->fc = C_FORE_COLOR;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	815a      	strh	r2, [r3, #10]
   wnd->bc = C_BACK_COLOR;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f64e 727d 	movw	r2, #61309	; 0xef7d
 8007a30:	819a      	strh	r2, [r3, #12]
   wnd->xs = 0;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	81da      	strh	r2, [r3, #14]
   wnd->ys = 0;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	821a      	strh	r2, [r3, #16]
   wnd->xe = UG_GetXDim()-1;
 8007a3e:	f7fe fe0d 	bl	800665c <UG_GetXDim>
 8007a42:	4603      	mov	r3, r0
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	b21a      	sxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	825a      	strh	r2, [r3, #18]
   wnd->ye = UG_GetYDim()-1;
 8007a50:	f7fe fe12 	bl	8006678 <UG_GetYDim>
 8007a54:	4603      	mov	r3, r0
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	b21a      	sxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	829a      	strh	r2, [r3, #20]
   wnd->cb = cb;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	631a      	str	r2, [r3, #48]	; 0x30
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2203      	movs	r2, #3
 8007a6c:	759a      	strb	r2, [r3, #22]

   /* Initialize window title-bar */
   wnd->title.str = NULL;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	619a      	str	r2, [r3, #24]
   if (gui != NULL) wnd->title.font = gui->font;
 8007a74:	4b18      	ldr	r3, [pc, #96]	; (8007ad8 <UG_WindowCreate+0x11c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <UG_WindowCreate+0xcc>
 8007a7c:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <UG_WindowCreate+0x11c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	61da      	str	r2, [r3, #28]
 8007a86:	e002      	b.n	8007a8e <UG_WindowCreate+0xd2>
   else wnd->title.font = NULL;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	61da      	str	r2, [r3, #28]
   wnd->title.h_space = 2;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 2020 	strb.w	r2, [r3, #32]
   wnd->title.v_space = 2;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   wnd->title.align = ALIGN_CENTER_LEFT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2211      	movs	r2, #17
 8007aa2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   wnd->title.fc = C_TITLE_FORE_COLOR;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aac:	849a      	strh	r2, [r3, #36]	; 0x24
   wnd->title.bc = C_TITLE_BACK_COLOR;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	221f      	movs	r2, #31
 8007ab2:	84da      	strh	r2, [r3, #38]	; 0x26
   wnd->title.ifc = C_INACTIVE_TITLE_FORE_COLOR;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aba:	851a      	strh	r2, [r3, #40]	; 0x28
   wnd->title.ibc = C_INACTIVE_TITLE_BACK_COLOR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f248 4210 	movw	r2, #33808	; 0x8410
 8007ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
   wnd->title.height = 15;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	220f      	movs	r2, #15
 8007ac8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   return UG_RESULT_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200004dc 	.word	0x200004dc

08007adc <UG_WindowDelete>:

UG_RESULT UG_WindowDelete( UG_WINDOW* wnd )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
   if ( wnd == gui->active_window ) return UG_RESULT_FAIL;
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <UG_WindowDelete+0x78>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d102      	bne.n	8007af6 <UG_WindowDelete+0x1a>
 8007af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007af4:	e027      	b.n	8007b46 <UG_WindowDelete+0x6a>

   /* Only delete valid windows */
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d022      	beq.n	8007b42 <UG_WindowDelete+0x66>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7a1b      	ldrb	r3, [r3, #8]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01c      	beq.n	8007b42 <UG_WindowDelete+0x66>
   {
      wnd->state = 0;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	721a      	strb	r2, [r3, #8]
      wnd->cb = NULL;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	631a      	str	r2, [r3, #48]	; 0x30
      wnd->objcnt = 0;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
      wnd->objlst = NULL;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	605a      	str	r2, [r3, #4]
      wnd->xs = 0;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	81da      	strh	r2, [r3, #14]
      wnd->ys = 0;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	821a      	strh	r2, [r3, #16]
      wnd->xe = 0;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	825a      	strh	r2, [r3, #18]
      wnd->ye = 0;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	829a      	strh	r2, [r3, #20]
      wnd->style = 0;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	759a      	strb	r2, [r3, #22]
      return UG_RESULT_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e001      	b.n	8007b46 <UG_WindowDelete+0x6a>
   }
   return UG_RESULT_FAIL;
 8007b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	200004dc 	.word	0x200004dc

08007b58 <UG_WindowShow>:

UG_RESULT UG_WindowShow( UG_WINDOW* wnd )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d013      	beq.n	8007b8e <UG_WindowShow+0x36>
   {
      /* Force an update, even if this is the active window! */
      wnd->state |= WND_STATE_VISIBLE | WND_STATE_UPDATE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7a1b      	ldrb	r3, [r3, #8]
 8007b6a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	721a      	strb	r2, [r3, #8]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7a1b      	ldrb	r3, [r3, #8]
 8007b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	721a      	strb	r2, [r3, #8]
      gui->next_window = wnd;
 8007b82:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <UG_WindowShow+0x48>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]
      return UG_RESULT_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e001      	b.n	8007b92 <UG_WindowShow+0x3a>
   }
   return UG_RESULT_FAIL;
 8007b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	200004dc 	.word	0x200004dc

08007ba4 <UG_WindowHide>:

UG_RESULT UG_WindowHide( UG_WINDOW* wnd )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d060      	beq.n	8007c74 <UG_WindowHide+0xd0>
   {
      if ( wnd == gui->active_window )
 8007bb2:	4b33      	ldr	r3, [pc, #204]	; (8007c80 <UG_WindowHide+0xdc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d155      	bne.n	8007c6a <UG_WindowHide+0xc6>
      {
         /* Is there an old window which just lost the focus? */
         if ( (gui->last_window != NULL) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8007bbe:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <UG_WindowHide+0xdc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d039      	beq.n	8007c3c <UG_WindowHide+0x98>
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <UG_WindowHide+0xdc>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	7a1b      	ldrb	r3, [r3, #8]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d031      	beq.n	8007c3c <UG_WindowHide+0x98>
         {
            if ( (gui->last_window->xs > wnd->xs) || (gui->last_window->ys > wnd->ys) || (gui->last_window->xe < wnd->xe) || (gui->last_window->ye < wnd->ye) )
 8007bd8:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <UG_WindowHide+0xdc>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	dc1d      	bgt.n	8007c28 <UG_WindowHide+0x84>
 8007bec:	4b24      	ldr	r3, [pc, #144]	; (8007c80 <UG_WindowHide+0xdc>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	dc13      	bgt.n	8007c28 <UG_WindowHide+0x84>
 8007c00:	4b1f      	ldr	r3, [pc, #124]	; (8007c80 <UG_WindowHide+0xdc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	db09      	blt.n	8007c28 <UG_WindowHide+0x84>
 8007c14:	4b1a      	ldr	r3, [pc, #104]	; (8007c80 <UG_WindowHide+0xdc>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	da02      	bge.n	8007c2e <UG_WindowHide+0x8a>
            {
               _UG_WindowClear( wnd );
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fc3f 	bl	80084ac <_UG_WindowClear>
            }
            gui->next_window = gui->last_window;
 8007c2e:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <UG_WindowHide+0xdc>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <UG_WindowHide+0xdc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68d2      	ldr	r2, [r2, #12]
 8007c38:	605a      	str	r2, [r3, #4]
 8007c3a:	e019      	b.n	8007c70 <UG_WindowHide+0xcc>
         }
         else
         {
            gui->active_window->state &= ~WND_STATE_VISIBLE;
 8007c3c:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <UG_WindowHide+0xdc>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	7a1a      	ldrb	r2, [r3, #8]
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <UG_WindowHide+0xdc>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f022 0208 	bic.w	r2, r2, #8
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	721a      	strb	r2, [r3, #8]
            gui->active_window->state |= WND_STATE_UPDATE;
 8007c52:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <UG_WindowHide+0xdc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	7a1a      	ldrb	r2, [r3, #8]
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <UG_WindowHide+0xdc>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f042 0220 	orr.w	r2, r2, #32
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	721a      	strb	r2, [r3, #8]
 8007c68:	e002      	b.n	8007c70 <UG_WindowHide+0xcc>
         }
      }
      else
      {
         /* If the old window is visible, clear it! */
         _UG_WindowClear( wnd );
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fc1e 	bl	80084ac <_UG_WindowClear>
      }
      return UG_RESULT_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	e001      	b.n	8007c78 <UG_WindowHide+0xd4>
   }
   return UG_RESULT_FAIL;
 8007c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	200004dc 	.word	0x200004dc

08007c84 <UG_WindowResize>:

UG_RESULT UG_WindowResize( UG_WINDOW* wnd, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	4611      	mov	r1, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	817b      	strh	r3, [r7, #10]
 8007c96:	460b      	mov	r3, r1
 8007c98:	813b      	strh	r3, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
   UG_S16 pos;
   UG_S16 xmax,ymax;

   xmax = UG_GetXDim()-1;
 8007c9e:	f7fe fcdd 	bl	800665c <UG_GetXDim>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	82fb      	strh	r3, [r7, #22]
   ymax = UG_GetYDim()-1;
 8007cac:	f7fe fce4 	bl	8006678 <UG_GetYDim>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	82bb      	strh	r3, [r7, #20]

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80cb 	beq.w	8007e58 <UG_WindowResize+0x1d4>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	7a1b      	ldrb	r3, [r3, #8]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80c4 	beq.w	8007e58 <UG_WindowResize+0x1d4>
   {
      /* Do some checks... */
      if ( (xs < 0) || (ys < 0) ) return UG_RESULT_FAIL;
 8007cd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	db03      	blt.n	8007ce0 <UG_WindowResize+0x5c>
 8007cd8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da02      	bge.n	8007ce6 <UG_WindowResize+0x62>
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ce4:	e0ba      	b.n	8007e5c <UG_WindowResize+0x1d8>
      if ( (xe > xmax) || (ye > ymax) ) return UG_RESULT_FAIL;
 8007ce6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007cea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	dc05      	bgt.n	8007cfe <UG_WindowResize+0x7a>
 8007cf2:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8007cf6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	dd02      	ble.n	8007d04 <UG_WindowResize+0x80>
 8007cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d02:	e0ab      	b.n	8007e5c <UG_WindowResize+0x1d8>
      pos = xe-xs;
 8007d04:	88fa      	ldrh	r2, [r7, #6]
 8007d06:	897b      	ldrh	r3, [r7, #10]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007d0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d12:	2b09      	cmp	r3, #9
 8007d14:	dc02      	bgt.n	8007d1c <UG_WindowResize+0x98>
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d1a:	e09f      	b.n	8007e5c <UG_WindowResize+0x1d8>
      pos = ye-ys;
 8007d1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007d1e:	893b      	ldrh	r3, [r7, #8]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007d26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d2a:	2b09      	cmp	r3, #9
 8007d2c:	dc02      	bgt.n	8007d34 <UG_WindowResize+0xb0>
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d32:	e093      	b.n	8007e5c <UG_WindowResize+0x1d8>

      /* ... and if everything is OK move the window! */
      wnd->xs = xs;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	897a      	ldrh	r2, [r7, #10]
 8007d38:	81da      	strh	r2, [r3, #14]
      wnd->ys = ys;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	893a      	ldrh	r2, [r7, #8]
 8007d3e:	821a      	strh	r2, [r3, #16]
      wnd->xe = xe;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	88fa      	ldrh	r2, [r7, #6]
 8007d44:	825a      	strh	r2, [r3, #18]
      wnd->ye = ye;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007d4a:	829a      	strh	r2, [r3, #20]

      if ( (wnd->state & WND_STATE_VISIBLE) && (gui->active_window == wnd) )
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	7a1b      	ldrb	r3, [r3, #8]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d07d      	beq.n	8007e54 <UG_WindowResize+0x1d0>
 8007d58:	4b42      	ldr	r3, [pc, #264]	; (8007e64 <UG_WindowResize+0x1e0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d177      	bne.n	8007e54 <UG_WindowResize+0x1d0>
      {
         if ( wnd->ys ) UG_FillFrame(0, 0, xmax,wnd->ys-1,gui->desktop_color);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d011      	beq.n	8007d92 <UG_WindowResize+0x10e>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	b219      	sxth	r1, r3
 8007d7c:	4b39      	ldr	r3, [pc, #228]	; (8007e64 <UG_WindowResize+0x1e0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007d82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	f7fd fe2d 	bl	80059ec <UG_FillFrame>
         pos = wnd->ye+1;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	827b      	strh	r3, [r7, #18]
         if ( !(pos > ymax) ) UG_FillFrame(0, pos, xmax,ymax,gui->desktop_color);
 8007da0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007da4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	dc0d      	bgt.n	8007dc8 <UG_WindowResize+0x144>
 8007dac:	4b2d      	ldr	r3, [pc, #180]	; (8007e64 <UG_WindowResize+0x1e0>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007db2:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007db6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007dba:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	f7fd fe12 	bl	80059ec <UG_FillFrame>
         if ( wnd->xs ) UG_FillFrame(0, wnd->ys, wnd->xs-1,wnd->ye,gui->desktop_color);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d014      	beq.n	8007dfc <UG_WindowResize+0x178>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	b21a      	sxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007dec:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <UG_WindowResize+0x1e0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	4603      	mov	r3, r0
 8007df6:	2000      	movs	r0, #0
 8007df8:	f7fd fdf8 	bl	80059ec <UG_FillFrame>
         pos = wnd->xe+1;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3301      	adds	r3, #1
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	827b      	strh	r3, [r7, #18]
         if ( !(pos > xmax) ) UG_FillFrame(pos, wnd->ys,xmax,wnd->ye,gui->desktop_color);
 8007e0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007e0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	dc10      	bgt.n	8007e38 <UG_WindowResize+0x1b4>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <UG_WindowResize+0x1e0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007e28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007e2c:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	4623      	mov	r3, r4
 8007e34:	f7fd fdda 	bl	80059ec <UG_FillFrame>

         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	7a1b      	ldrb	r3, [r3, #8]
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	721a      	strb	r2, [r3, #8]
         wnd->state |= WND_STATE_UPDATE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	7a1b      	ldrb	r3, [r3, #8]
 8007e4a:	f043 0320 	orr.w	r3, r3, #32
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e001      	b.n	8007e5c <UG_WindowResize+0x1d8>
   }
   return UG_RESULT_FAIL;
 8007e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd90      	pop	{r4, r7, pc}
 8007e64:	200004dc 	.word	0x200004dc

08007e68 <UG_WindowSetTitleText>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleText( UG_WINDOW* wnd, char* str )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d011      	beq.n	8007e9c <UG_WindowSetTitleText+0x34>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	7a1b      	ldrb	r3, [r3, #8]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <UG_WindowSetTitleText+0x34>
   {
      wnd->title.str = str;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	619a      	str	r2, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7a1b      	ldrb	r3, [r3, #8]
 8007e8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e001      	b.n	8007ea0 <UG_WindowSetTitleText+0x38>
   }
   return UG_RESULT_FAIL;
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <UG_WindowSetTitleTextFont>:

UG_RESULT UG_WindowSetTitleTextFont( UG_WINDOW* wnd, UG_FONT* font )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d02a      	beq.n	8007f12 <UG_WindowSetTitleTextFont+0x66>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7a1b      	ldrb	r3, [r3, #8]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d024      	beq.n	8007f12 <UG_WindowSetTitleTextFont+0x66>
   {
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7a1b      	ldrb	r3, [r3, #8]
 8007ecc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	721a      	strb	r2, [r3, #8]
      wnd->title.font = font;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	61da      	str	r2, [r3, #28]
      if ( wnd->title.height <= (UG_GetFontHeight(font) + 1) )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	3302      	adds	r3, #2
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	429a      	cmp	r2, r3
 8007eee:	dc0e      	bgt.n	8007f0e <UG_WindowSetTitleTextFont+0x62>
      {
         wnd->title.height = UG_GetFontWidth(font) + 2;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7a1b      	ldrb	r3, [r3, #8]
 8007f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e001      	b.n	8007f16 <UG_WindowSetTitleTextFont+0x6a>
   }
   return UG_RESULT_FAIL;
 8007f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <UG_WindowSetTitleHeight>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleHeight( UG_WINDOW* wnd, UG_U8 height )
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d019      	beq.n	8007f68 <UG_WindowSetTitleHeight+0x46>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	7a1b      	ldrb	r3, [r3, #8]
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d013      	beq.n	8007f68 <UG_WindowSetTitleHeight+0x46>
   {
      wnd->title.height = height;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	7a1b      	ldrb	r3, [r3, #8]
 8007f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	721a      	strb	r2, [r3, #8]
      wnd->state |= WND_STATE_UPDATE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	7a1b      	ldrb	r3, [r3, #8]
 8007f5a:	f043 0320 	orr.w	r3, r3, #32
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	e001      	b.n	8007f6c <UG_WindowSetTitleHeight+0x4a>
   }
   return UG_RESULT_FAIL;
 8007f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <UG_WindowSetXStart>:

UG_RESULT UG_WindowSetXStart( UG_WINDOW* wnd, UG_S16 xs )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d022      	beq.n	8007fd0 <UG_WindowSetXStart+0x58>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7a1b      	ldrb	r3, [r3, #8]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01c      	beq.n	8007fd0 <UG_WindowSetXStart+0x58>
   {
      wnd->xs = xs;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	887a      	ldrh	r2, [r7, #2]
 8007f9a:	81da      	strh	r2, [r3, #14]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff fe63 	bl	8007c84 <UG_WindowResize>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fc4:	d102      	bne.n	8007fcc <UG_WindowSetXStart+0x54>
 8007fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fca:	e003      	b.n	8007fd4 <UG_WindowSetXStart+0x5c>
      return UG_RESULT_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e001      	b.n	8007fd4 <UG_WindowSetXStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <UG_WindowSetYStart>:

UG_RESULT UG_WindowSetYStart( UG_WINDOW* wnd, UG_S16 ys )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d022      	beq.n	8008034 <UG_WindowSetYStart+0x58>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	7a1b      	ldrb	r3, [r3, #8]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01c      	beq.n	8008034 <UG_WindowSetYStart+0x58>
   {
      wnd->ys = ys;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	887a      	ldrh	r2, [r7, #2]
 8007ffe:	821a      	strh	r2, [r3, #16]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	4603      	mov	r3, r0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff fe31 	bl	8007c84 <UG_WindowResize>
 8008022:	4603      	mov	r3, r0
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008028:	d102      	bne.n	8008030 <UG_WindowSetYStart+0x54>
 800802a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800802e:	e003      	b.n	8008038 <UG_WindowSetYStart+0x5c>
      return UG_RESULT_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	e001      	b.n	8008038 <UG_WindowSetYStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8008034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <UG_WindowSetXEnd>:

UG_RESULT UG_WindowSetXEnd( UG_WINDOW* wnd, UG_S16 xe )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af02      	add	r7, sp, #8
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d022      	beq.n	8008098 <UG_WindowSetXEnd+0x58>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7a1b      	ldrb	r3, [r3, #8]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d01c      	beq.n	8008098 <UG_WindowSetXEnd+0x58>
   {
      wnd->xe = xe;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	887a      	ldrh	r2, [r7, #2]
 8008062:	825a      	strh	r2, [r3, #18]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	4603      	mov	r3, r0
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fdff 	bl	8007c84 <UG_WindowResize>
 8008086:	4603      	mov	r3, r0
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800808c:	d102      	bne.n	8008094 <UG_WindowSetXEnd+0x54>
 800808e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008092:	e003      	b.n	800809c <UG_WindowSetXEnd+0x5c>
      return UG_RESULT_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	e001      	b.n	800809c <UG_WindowSetXEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8008098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <UG_WindowSetYEnd>:

UG_RESULT UG_WindowSetYEnd( UG_WINDOW* wnd, UG_S16 ye )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d022      	beq.n	80080fc <UG_WindowSetYEnd+0x58>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	7a1b      	ldrb	r3, [r3, #8]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d01c      	beq.n	80080fc <UG_WindowSetYEnd+0x58>
   {
      wnd->ye = ye;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	887a      	ldrh	r2, [r7, #2]
 80080c6:	829a      	strh	r2, [r3, #20]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	4603      	mov	r3, r0
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff fdcd 	bl	8007c84 <UG_WindowResize>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f0:	d102      	bne.n	80080f8 <UG_WindowSetYEnd+0x54>
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080f6:	e003      	b.n	8008100 <UG_WindowSetYEnd+0x5c>
      return UG_RESULT_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e001      	b.n	8008100 <UG_WindowSetYEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 80080fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <UG_WindowGetArea>:
   }
   return style;
}

UG_RESULT UG_WindowGetArea( UG_WINDOW* wnd, UG_AREA* a )
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d05a      	beq.n	80081ce <UG_WindowGetArea+0xc6>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7a1b      	ldrb	r3, [r3, #8]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d054      	beq.n	80081ce <UG_WindowGetArea+0xc6>
   {
      a->xs = wnd->xs;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	801a      	strh	r2, [r3, #0]
      a->ys = wnd->ys;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	805a      	strh	r2, [r3, #2]
      a->xe = wnd->xe;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	809a      	strh	r2, [r3, #4]
      a->ye = wnd->ye;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	80da      	strh	r2, [r3, #6]
      if ( wnd->style & WND_STYLE_3D )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7d9b      	ldrb	r3, [r3, #22]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d023      	beq.n	80081a0 <UG_WindowGetArea+0x98>
      {
         a->xs+=3;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800815e:	b29b      	uxth	r3, r3
 8008160:	3303      	adds	r3, #3
 8008162:	b29b      	uxth	r3, r3
 8008164:	b21a      	sxth	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	801a      	strh	r2, [r3, #0]
         a->ys+=3;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008170:	b29b      	uxth	r3, r3
 8008172:	3303      	adds	r3, #3
 8008174:	b29b      	uxth	r3, r3
 8008176:	b21a      	sxth	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	805a      	strh	r2, [r3, #2]
         a->xe-=3;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008182:	b29b      	uxth	r3, r3
 8008184:	3b03      	subs	r3, #3
 8008186:	b29b      	uxth	r3, r3
 8008188:	b21a      	sxth	r2, r3
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	809a      	strh	r2, [r3, #4]
         a->ye-=3;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b03      	subs	r3, #3
 8008198:	b29b      	uxth	r3, r3
 800819a:	b21a      	sxth	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	80da      	strh	r2, [r3, #6]
      }
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7d9b      	ldrb	r3, [r3, #22]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00e      	beq.n	80081ca <UG_WindowGetArea+0xc2>
      {
         a->ys+= wnd->title.height+1;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	4413      	add	r3, r2
 80081be:	b29b      	uxth	r3, r3
 80081c0:	3301      	adds	r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	b21a      	sxth	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	805a      	strh	r2, [r3, #2]
      }
      return UG_RESULT_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e001      	b.n	80081d2 <UG_WindowGetArea+0xca>
   }
   return UG_RESULT_FAIL;
 80081ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
	...

080081e0 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80081e0:	b590      	push	{r4, r7, lr}
 80081e2:	b08f      	sub	sp, #60	; 0x3c
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 809a 	beq.w	8008324 <_UG_WindowDrawTitle+0x144>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7a1b      	ldrb	r3, [r3, #8]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8093 	beq.w	8008324 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	89db      	ldrh	r3, [r3, #14]
 8008202:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	8a1b      	ldrh	r3, [r3, #16]
 8008208:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	8a5b      	ldrh	r3, [r3, #18]
 800820e:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8a9b      	ldrh	r3, [r3, #20]
 8008214:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	7d9b      	ldrb	r3, [r3, #22]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00f      	beq.n	8008242 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8008222:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008224:	3303      	adds	r3, #3
 8008226:	b29b      	uxth	r3, r3
 8008228:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 800822a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800822c:	3303      	adds	r3, #3
 800822e:	b29b      	uxth	r3, r3
 8008230:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8008232:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008234:	3b03      	subs	r3, #3
 8008236:	b29b      	uxth	r3, r3
 8008238:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 800823a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800823c:	3b03      	subs	r3, #3
 800823e:	b29b      	uxth	r3, r3
 8008240:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8008242:	4b3b      	ldr	r3, [pc, #236]	; (8008330 <_UG_WindowDrawTitle+0x150>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d106      	bne.n	800825c <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008252:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008258:	83bb      	strh	r3, [r7, #28]
 800825a:	e005      	b.n	8008268 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008260:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008266:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800826e:	b29a      	uxth	r2, r3
 8008270:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008272:	4413      	add	r3, r2
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	b29b      	uxth	r3, r3
 800827a:	b21c      	sxth	r4, r3
 800827c:	8bfb      	ldrh	r3, [r7, #30]
 800827e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008282:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8008286:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	4623      	mov	r3, r4
 800828e:	f7fd fbad 	bl	80059ec <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 800829e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082a0:	3303      	adds	r3, #3
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	b21b      	sxth	r3, r3
 80082a6:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80082a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082aa:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80082ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082ae:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082ba:	4413      	add	r3, r2
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	b21b      	sxth	r3, r3
 80082c4:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80082cc:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80082d6:	b21b      	sxth	r3, r3
 80082d8:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 80082e4:	f107 030c 	add.w	r3, r7, #12
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fec5 	bl	8007078 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082f8:	4413      	add	r3, r2
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	b219      	sxth	r1, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008304:	b29a      	uxth	r2, r3
 8008306:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008308:	4413      	add	r3, r2
 800830a:	b29b      	uxth	r3, r3
 800830c:	b21b      	sxth	r3, r3
 800830e:	f649 5413 	movw	r4, #40211	; 0x9d13
 8008312:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008316:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800831a:	9400      	str	r4, [sp, #0]
 800831c:	f7fd fe70 	bl	8006000 <UG_DrawLine>
      return UG_RESULT_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	e001      	b.n	8008328 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8008324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008328:	4618      	mov	r0, r3
 800832a:	3734      	adds	r7, #52	; 0x34
 800832c:	46bd      	mov	sp, r7
 800832e:	bd90      	pop	{r4, r7, pc}
 8008330:	200004dc 	.word	0x200004dc

08008334 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b089      	sub	sp, #36	; 0x24
 8008338:	af02      	add	r7, sp, #8
 800833a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	89db      	ldrh	r3, [r3, #14]
 8008340:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8a1b      	ldrh	r3, [r3, #16]
 8008346:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	8a5b      	ldrh	r3, [r3, #18]
 800834c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	8a9b      	ldrh	r3, [r3, #20]
 8008352:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7a1b      	ldrb	r3, [r3, #8]
 8008358:	f023 0320 	bic.w	r3, r3, #32
 800835c:	b2da      	uxtb	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7a1b      	ldrb	r3, [r3, #8]
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8084 	beq.w	8008478 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	7d9b      	ldrb	r3, [r3, #22]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d021      	beq.n	80083c0 <_UG_WindowUpdate+0x8c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7a1b      	ldrb	r3, [r3, #8]
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d11b      	bne.n	80083c0 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8008388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800838c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008390:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8008394:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8008398:	4c42      	ldr	r4, [pc, #264]	; (80084a4 <_UG_WindowUpdate+0x170>)
 800839a:	9400      	str	r4, [sp, #0]
 800839c:	f7fe ffbe 	bl	800731c <_UG_DrawObjectFrame>
         xs+=3;
 80083a0:	8abb      	ldrh	r3, [r7, #20]
 80083a2:	3303      	adds	r3, #3
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80083a8:	8a7b      	ldrh	r3, [r7, #18]
 80083aa:	3303      	adds	r3, #3
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80083b0:	8a3b      	ldrh	r3, [r7, #16]
 80083b2:	3b03      	subs	r3, #3
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80083b8:	89fb      	ldrh	r3, [r7, #14]
 80083ba:	3b03      	subs	r3, #3
 80083bc:	b29b      	uxth	r3, r3
 80083be:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7d9b      	ldrb	r3, [r3, #22]
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01a      	beq.n	8008402 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff ff07 	bl	80081e0 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083d8:	b29a      	uxth	r2, r3
 80083da:	8a7b      	ldrh	r3, [r7, #18]
 80083dc:	4413      	add	r3, r2
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3301      	adds	r3, #1
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7a1b      	ldrb	r3, [r3, #8]
 80083ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d007      	beq.n	8008402 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7a1b      	ldrb	r3, [r3, #8]
 80083f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	721a      	strb	r2, [r3, #8]
            return;
 8008400:	e04d      	b.n	800849e <_UG_WindowUpdate+0x16a>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	899b      	ldrh	r3, [r3, #12]
 8008406:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800840a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800840e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8008412:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	4623      	mov	r3, r4
 800841a:	f7fd fae7 	bl	80059ec <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8008424:	2300      	movs	r3, #0
 8008426:	82fb      	strh	r3, [r7, #22]
 8008428:	e021      	b.n	800846e <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	8afb      	ldrh	r3, [r7, #22]
 8008430:	015b      	lsls	r3, r3, #5
 8008432:	4413      	add	r3, r2
 8008434:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d112      	bne.n	8008468 <_UG_WindowUpdate+0x134>
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00c      	beq.n	8008468 <_UG_WindowUpdate+0x134>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	f003 0308 	and.w	r3, r3, #8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d006      	beq.n	8008468 <_UG_WindowUpdate+0x134>
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008462:	b2da      	uxtb	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8008468:	8afb      	ldrh	r3, [r7, #22]
 800846a:	3301      	adds	r3, #1
 800846c:	82fb      	strh	r3, [r7, #22]
 800846e:	8afa      	ldrh	r2, [r7, #22]
 8008470:	89bb      	ldrh	r3, [r7, #12]
 8008472:	429a      	cmp	r2, r3
 8008474:	d3d9      	bcc.n	800842a <_UG_WindowUpdate+0xf6>
 8008476:	e012      	b.n	800849e <_UG_WindowUpdate+0x16a>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <_UG_WindowUpdate+0x174>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	4623      	mov	r3, r4
 800849a:	f7fd faa7 	bl	80059ec <UG_FillFrame>
   }
}
 800849e:	371c      	adds	r7, #28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}
 80084a4:	0801d684 	.word	0x0801d684
 80084a8:	200004dc 	.word	0x200004dc

080084ac <_UG_WindowClear>:

static UG_RESULT _UG_WindowClear( UG_WINDOW* wnd )
{
 80084ac:	b590      	push	{r4, r7, lr}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d045      	beq.n	8008546 <_UG_WindowClear+0x9a>
   {
      if (wnd->state & WND_STATE_VISIBLE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7a1b      	ldrb	r3, [r3, #8]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d03d      	beq.n	8008542 <_UG_WindowClear+0x96>
      {
         wnd->state &= ~WND_STATE_VISIBLE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7a1b      	ldrb	r3, [r3, #8]
 80084ca:	f023 0308 	bic.w	r3, r3, #8
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	721a      	strb	r2, [r3, #8]
         UG_FillFrame( wnd->xs, wnd->ys, wnd->xe, wnd->ye, gui->desktop_color );
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80084ec:	4b19      	ldr	r3, [pc, #100]	; (8008554 <_UG_WindowClear+0xa8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	4623      	mov	r3, r4
 80084f6:	f7fd fa79 	bl	80059ec <UG_FillFrame>

         if ( wnd != gui->active_window )
 80084fa:	4b16      	ldr	r3, [pc, #88]	; (8008554 <_UG_WindowClear+0xa8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	429a      	cmp	r2, r3
 8008504:	d01d      	beq.n	8008542 <_UG_WindowClear+0x96>
         {
            /* If the current window is visible, update it! */
            if ( gui->active_window->state & WND_STATE_VISIBLE )
 8008506:	4b13      	ldr	r3, [pc, #76]	; (8008554 <_UG_WindowClear+0xa8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	7a1b      	ldrb	r3, [r3, #8]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d015      	beq.n	8008542 <_UG_WindowClear+0x96>
            {
               gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <_UG_WindowClear+0xa8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	7a1a      	ldrb	r2, [r3, #8]
 800851e:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <_UG_WindowClear+0xa8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008528:	b2d2      	uxtb	r2, r2
 800852a:	721a      	strb	r2, [r3, #8]
               gui->active_window->state |= WND_STATE_UPDATE;
 800852c:	4b09      	ldr	r3, [pc, #36]	; (8008554 <_UG_WindowClear+0xa8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	7a1a      	ldrb	r2, [r3, #8]
 8008534:	4b07      	ldr	r3, [pc, #28]	; (8008554 <_UG_WindowClear+0xa8>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f042 0220 	orr.w	r2, r2, #32
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	721a      	strb	r2, [r3, #8]
            }
         }
      }
      return UG_RESULT_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	e001      	b.n	800854a <_UG_WindowClear+0x9e>
   }
   return UG_RESULT_FAIL;
 8008546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800854a:	4618      	mov	r0, r3
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	bd90      	pop	{r4, r7, pc}
 8008552:	bf00      	nop
 8008554:	200004dc 	.word	0x200004dc

08008558 <UG_ButtonCreate>:
const UG_COLOR pal_button_released[] = {
    C_PAL_BUTTON_RELEASED
};

UG_RESULT UG_ButtonCreate( UG_WINDOW* wnd, UG_BUTTON* btn, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4611      	mov	r1, r2
 8008564:	461a      	mov	r2, r3
 8008566:	460b      	mov	r3, r1
 8008568:	71fb      	strb	r3, [r7, #7]
 800856a:	4613      	mov	r3, r2
 800856c:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7fe fff5 	bl	800755e <_UG_GetFreeObject>
 8008574:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <UG_ButtonCreate+0x2a>
 800857c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008580:	e062      	b.n	8008648 <UG_ButtonCreate+0xf0>

   /* Initialize object-specific parameters */
   btn->state = BTN_STATE_RELEASED;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
   btn->bc = wnd->bc;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	899a      	ldrh	r2, [r3, #12]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	809a      	strh	r2, [r3, #4]
   btn->fc = wnd->fc;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	895a      	ldrh	r2, [r3, #10]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	805a      	strh	r2, [r3, #2]
   btn->abc = wnd->bc;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	899a      	ldrh	r2, [r3, #12]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	811a      	strh	r2, [r3, #8]
   btn->afc = wnd->fc;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	895a      	ldrh	r2, [r3, #10]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	80da      	strh	r2, [r3, #6]
   btn->style = BTN_STYLE_3D;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2201      	movs	r2, #1
 80085ac:	705a      	strb	r2, [r3, #1]
   btn->align = ALIGN_CENTER;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2212      	movs	r2, #18
 80085b2:	741a      	strb	r2, [r3, #16]
   btn->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 80085b4:	f7fd f9da 	bl	800596c <UG_GetGUI>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d004      	beq.n	80085c8 <UG_ButtonCreate+0x70>
 80085be:	f7fd f9d5 	bl	800596c <UG_GetGUI>
 80085c2:	4603      	mov	r3, r0
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	e000      	b.n	80085ca <UG_ButtonCreate+0x72>
 80085c8:	2300      	movs	r3, #0
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	60d3      	str	r3, [r2, #12]
   btn->str = "-";
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4a1f      	ldr	r2, [pc, #124]	; (8008650 <UG_ButtonCreate+0xf8>)
 80085d2:	615a      	str	r2, [r3, #20]

   /* Initialize standard object parameters */
   obj->update = _UG_ButtonUpdate;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	4a1f      	ldr	r2, [pc, #124]	; (8008654 <UG_ButtonCreate+0xfc>)
 80085d8:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_BUTTON;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2201      	movs	r2, #1
 80085de:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2200      	movs	r2, #0
 80085e4:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	88ba      	ldrh	r2, [r7, #4]
 80085ea:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	8c3a      	ldrh	r2, [r7, #32]
 80085f0:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085f6:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80085fc:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008604:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800860c:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008614:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800861c:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	79fa      	ldrb	r2, [r7, #7]
 8008622:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 800862c:	b2da      	uxtb	r2, r3
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	701a      	strb	r2, [r3, #0]
   #ifdef UGUI_USE_TOUCH
   obj->state |= OBJ_STATE_TOUCH_ENABLE;
   #endif
   obj->data = (void*)btn;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	b2da      	uxtb	r2, r3
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	0800a4ec 	.word	0x0800a4ec
 8008654:	080088b5 	.word	0x080088b5

08008658 <UG_ButtonSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
 8008664:	4613      	mov	r3, r2
 8008666:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	461a      	mov	r2, r3
 8008674:	2101      	movs	r1, #1
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7fe fe15 	bl	80072a6 <_UG_SearchObject>
 800867c:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <UG_ButtonSetForeColor+0x32>
 8008684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008688:	e00d      	b.n	80086a6 <UG_ButtonSetForeColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	60bb      	str	r3, [r7, #8]
   btn->fc = fc;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	883a      	ldrh	r2, [r7, #0]
 8008694:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <UG_ButtonSetBackColor>:

UG_RESULT UG_ButtonSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
 80086ba:	4613      	mov	r3, r2
 80086bc:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	461a      	mov	r2, r3
 80086ca:	2101      	movs	r1, #1
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7fe fdea 	bl	80072a6 <_UG_SearchObject>
 80086d2:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d102      	bne.n	80086e0 <UG_ButtonSetBackColor+0x32>
 80086da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086de:	e00d      	b.n	80086fc <UG_ButtonSetBackColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	60bb      	str	r3, [r7, #8]
   btn->bc = bc;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	883a      	ldrh	r2, [r7, #0]
 80086ea:	809a      	strh	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <UG_ButtonSetText>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	460b      	mov	r3, r1
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	461a      	mov	r2, r3
 800871e:	2101      	movs	r1, #1
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f7fe fdc0 	bl	80072a6 <_UG_SearchObject>
 8008726:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <UG_ButtonSetText+0x30>
 800872e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008732:	e00d      	b.n	8008750 <UG_ButtonSetText+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	613b      	str	r3, [r7, #16]
   btn->str = str;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	615a      	str	r2, [r3, #20]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008748:	b2da      	uxtb	r2, r3
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <UG_ButtonSetFont>:

UG_RESULT UG_ButtonSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	460b      	mov	r3, r1
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800876e:	7afb      	ldrb	r3, [r7, #11]
 8008770:	461a      	mov	r2, r3
 8008772:	2101      	movs	r1, #1
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7fe fd96 	bl	80072a6 <_UG_SearchObject>
 800877a:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <UG_ButtonSetFont+0x30>
 8008782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008786:	e00d      	b.n	80087a4 <UG_ButtonSetFont+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	613b      	str	r3, [r7, #16]
   btn->font = font;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	60da      	str	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800879c:	b2da      	uxtb	r2, r3
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <UG_ButtonSetStyle>:

UG_RESULT UG_ButtonSetStyle( UG_WINDOW* wnd, UG_U8 id, UG_U8 style )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
 80087b8:	4613      	mov	r3, r2
 80087ba:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	461a      	mov	r2, r3
 80087c8:	2101      	movs	r1, #1
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7fe fd6b 	bl	80072a6 <_UG_SearchObject>
 80087d0:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <UG_ButtonSetStyle+0x32>
 80087d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087dc:	e065      	b.n	80088aa <UG_ButtonSetStyle+0xfe>

   btn = (UG_BUTTON*)(obj->data);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	60bb      	str	r3, [r7, #8]

   /* Select color scheme */
   btn->style &= ~(BTN_STYLE_USE_ALTERNATE_COLORS | BTN_STYLE_TOGGLE_COLORS | BTN_STYLE_NO_BORDERS | BTN_STYLE_NO_FILL);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	f023 031e 	bic.w	r3, r3, #30
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	705a      	strb	r2, [r3, #1]
   btn->state |= BTN_STATE_ALWAYS_REDRAW;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f043 0302 	orr.w	r3, r3, #2
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	701a      	strb	r2, [r3, #0]
   if ( style & BTN_STYLE_NO_BORDERS )
 8008800:	78bb      	ldrb	r3, [r7, #2]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d006      	beq.n	8008818 <UG_ButtonSetStyle+0x6c>
   {
      btn->style |= BTN_STYLE_NO_BORDERS;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	f043 0308 	orr.w	r3, r3, #8
 8008812:	b2da      	uxtb	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_NO_FILL )
 8008818:	78bb      	ldrb	r3, [r7, #2]
 800881a:	f003 0310 	and.w	r3, r3, #16
 800881e:	2b00      	cmp	r3, #0
 8008820:	d006      	beq.n	8008830 <UG_ButtonSetStyle+0x84>
   {
      btn->style |= BTN_STYLE_NO_FILL;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	f043 0310 	orr.w	r3, r3, #16
 800882a:	b2da      	uxtb	r2, r3
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_TOGGLE_COLORS )
 8008830:	78bb      	ldrb	r3, [r7, #2]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d007      	beq.n	800884a <UG_ButtonSetStyle+0x9e>
   {
      btn->style |= BTN_STYLE_TOGGLE_COLORS;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	f043 0302 	orr.w	r3, r3, #2
 8008842:	b2da      	uxtb	r2, r3
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	705a      	strb	r2, [r3, #1]
 8008848:	e013      	b.n	8008872 <UG_ButtonSetStyle+0xc6>
   }
   else if ( style & BTN_STYLE_USE_ALTERNATE_COLORS )
 800884a:	78bb      	ldrb	r3, [r7, #2]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d007      	beq.n	8008864 <UG_ButtonSetStyle+0xb8>
   {
      btn->style |= BTN_STYLE_USE_ALTERNATE_COLORS;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	f043 0304 	orr.w	r3, r3, #4
 800885c:	b2da      	uxtb	r2, r3
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	705a      	strb	r2, [r3, #1]
 8008862:	e006      	b.n	8008872 <UG_ButtonSetStyle+0xc6>
   }
   else
   {
      btn->state &= ~BTN_STATE_ALWAYS_REDRAW;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f023 0302 	bic.w	r3, r3, #2
 800886c:	b2da      	uxtb	r2, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	701a      	strb	r2, [r3, #0]
   }

   /* 3D or 2D */
   if ( style & BTN_STYLE_3D )
 8008872:	78bb      	ldrb	r3, [r7, #2]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <UG_ButtonSetStyle+0xe0>
   {
      btn->style |= BTN_STYLE_3D;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	705a      	strb	r2, [r3, #1]
 800888a:	e006      	b.n	800889a <UG_ButtonSetStyle+0xee>
   }
   else
   {
      btn->style &= ~BTN_STYLE_3D;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	785b      	ldrb	r3, [r3, #1]
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	b2da      	uxtb	r2, r3
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	705a      	strb	r2, [r3, #1]
   }   
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <_UG_ButtonUpdate>:
   return align;
}


static void _UG_ButtonUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b091      	sub	sp, #68	; 0x44
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
   UG_BUTTON* btn;
   UG_AREA a;
   UG_TEXT txt;
   UG_U8 d,o=0;
 80088be:	2300      	movs	r3, #0
 80088c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   /* Get object-specific data */
   btn = (UG_BUTTON*)(obj->data);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	633b      	str	r3, [r7, #48]	; 0x30
   #endif

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 8181 	beq.w	8008bda <_UG_ButtonUpdate+0x326>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f003 0308 	and.w	r3, r3, #8
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 8157 	beq.w	8008b94 <_UG_ButtonUpdate+0x2e0>
      {
         /* Full redraw necessary? */
         if ( (obj->state & OBJ_STATE_REDRAW) || (btn->state & BTN_STATE_ALWAYS_REDRAW) )
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d106      	bne.n	8008900 <_UG_ButtonUpdate+0x4c>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8108 	beq.w	8008b10 <_UG_ButtonUpdate+0x25c>
         {
            UG_WindowGetArea(wnd,&a);
 8008900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fbfe 	bl	8008108 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008912:	b29a      	uxth	r2, r3
 8008914:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008918:	b29b      	uxth	r3, r3
 800891a:	4413      	add	r3, r2
 800891c:	b29b      	uxth	r3, r3
 800891e:	b21a      	sxth	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800892a:	b29a      	uxth	r2, r3
 800892c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008930:	b29b      	uxth	r3, r3
 8008932:	4413      	add	r3, r2
 8008934:	b29b      	uxth	r3, r3
 8008936:	b21a      	sxth	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008942:	b29a      	uxth	r2, r3
 8008944:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008948:	b29b      	uxth	r3, r3
 800894a:	4413      	add	r3, r2
 800894c:	b29b      	uxth	r3, r3
 800894e:	b21a      	sxth	r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800895a:	b29a      	uxth	r2, r3
 800895c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008960:	b29b      	uxth	r3, r3
 8008962:	4413      	add	r3, r2
 8008964:	b29b      	uxth	r3, r3
 8008966:	b21a      	sxth	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008978:	429a      	cmp	r2, r3
 800897a:	f300 812b 	bgt.w	8008bd4 <_UG_ButtonUpdate+0x320>
            if ( obj->a_abs.xe > wnd->xe ) return;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800898a:	429a      	cmp	r2, r3
 800898c:	f300 8124 	bgt.w	8008bd8 <_UG_ButtonUpdate+0x324>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            /* 3D or 2D style? */
            d = ( btn->style & BTN_STYLE_3D )? 3:1;
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <_UG_ButtonUpdate+0xec>
 800899c:	2303      	movs	r3, #3
 800899e:	e000      	b.n	80089a2 <_UG_ButtonUpdate+0xee>
 80089a0:	2301      	movs	r3, #1
 80089a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            txt.bc = btn->bc;
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	889b      	ldrh	r3, [r3, #4]
 80089aa:	837b      	strh	r3, [r7, #26]
            txt.fc = btn->fc;
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	885b      	ldrh	r3, [r3, #2]
 80089b0:	833b      	strh	r3, [r7, #24]

            if( btn->state & BTN_STATE_PRESSED )
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d01b      	beq.n	80089f6 <_UG_ButtonUpdate+0x142>
            {
              /* o is the text offset, to provide a visual effect when pressed */
              o=1;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
               /* "toggle" style? */
               if( btn->style & BTN_STYLE_TOGGLE_COLORS )
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d006      	beq.n	80089de <_UG_ButtonUpdate+0x12a>
               {
                  /* Swap colors */
                  txt.bc = btn->fc;
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	885b      	ldrh	r3, [r3, #2]
 80089d4:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->bc;
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	889b      	ldrh	r3, [r3, #4]
 80089da:	833b      	strh	r3, [r7, #24]
 80089dc:	e00b      	b.n	80089f6 <_UG_ButtonUpdate+0x142>
               }
               /* Use alternate colors? */
               else if ( btn->style & BTN_STYLE_USE_ALTERNATE_COLORS )
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d005      	beq.n	80089f6 <_UG_ButtonUpdate+0x142>
               {
                  txt.bc = btn->abc;
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	891b      	ldrh	r3, [r3, #8]
 80089ee:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->afc;
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	88db      	ldrh	r3, [r3, #6]
 80089f4:	833b      	strh	r3, [r7, #24]
               }
            }
            if ( !(btn->style & BTN_STYLE_NO_FILL) )
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d12d      	bne.n	8008a5e <_UG_ButtonUpdate+0x1aa>
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, txt.bc);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4413      	add	r3, r2
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	b218      	sxth	r0, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	4413      	add	r3, r2
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	b219      	sxth	r1, r3
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	b21c      	sxth	r4, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	b21a      	sxth	r2, r3
 8008a52:	8b7b      	ldrh	r3, [r7, #26]
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	4613      	mov	r3, r2
 8008a58:	4622      	mov	r2, r4
 8008a5a:	f7fc ffc7 	bl	80059ec <UG_FillFrame>

            /* Draw button text */
            txt.a.xs = obj->a_abs.xs+d+o;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	4413      	add	r3, r2
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	4413      	add	r3, r2
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys+d+o;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	4413      	add	r3, r2
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe-d+o;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	b21b      	sxth	r3, r3
 8008abc:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye-d+o;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	4413      	add	r3, r2
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	b21b      	sxth	r3, r3
 8008adc:	82fb      	strh	r3, [r7, #22]
            txt.align = btn->align;
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	7c1b      	ldrb	r3, [r3, #16]
 8008ae2:	773b      	strb	r3, [r7, #28]
            txt.font = btn->font;
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	60fb      	str	r3, [r7, #12]
            txt.h_space = 2;
 8008aea:	2302      	movs	r3, #2
 8008aec:	83fb      	strh	r3, [r7, #30]
            txt.v_space = 2;
 8008aee:	2302      	movs	r3, #2
 8008af0:	843b      	strh	r3, [r7, #32]
            txt.str = btn->str;
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 8008af8:	f107 0308 	add.w	r3, r7, #8
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe fabb 	bl	8007078 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	701a      	strb	r2, [r3, #0]
#ifdef UGUI_USE_POSTRENDER_EVENT
            _UG_SendObjectPostrenderEvent(wnd, obj);
#endif
         }
         /* Draw button frame */
         if ( !(btn->style & BTN_STYLE_NO_BORDERS) )
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	785b      	ldrb	r3, [r3, #1]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d153      	bne.n	8008bc4 <_UG_ButtonUpdate+0x310>
         {
             if ( btn->style & BTN_STYLE_3D )
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d019      	beq.n	8008b5c <_UG_ButtonUpdate+0x2a8>
             {  /* 3D */
                _UG_DrawObjectFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye, (btn->state&BTN_STATE_PRESSED)?(UG_COLOR*)pal_button_pressed:(UG_COLOR*)pal_button_released);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <_UG_ButtonUpdate+0x29c>
 8008b4c:	4b24      	ldr	r3, [pc, #144]	; (8008be0 <_UG_ButtonUpdate+0x32c>)
 8008b4e:	e000      	b.n	8008b52 <_UG_ButtonUpdate+0x29e>
 8008b50:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <_UG_ButtonUpdate+0x330>)
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	4623      	mov	r3, r4
 8008b56:	f7fe fbe1 	bl	800731c <_UG_DrawObjectFrame>
 8008b5a:	e033      	b.n	8008bc4 <_UG_ButtonUpdate+0x310>
             }
             else
             {  /* 2D */
                 UG_DrawFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye,(btn->state&BTN_STATE_PRESSED)?btn->abc:btn->afc);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <_UG_ButtonUpdate+0x2d2>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	891b      	ldrh	r3, [r3, #8]
 8008b84:	e001      	b.n	8008b8a <_UG_ButtonUpdate+0x2d6>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	88db      	ldrh	r3, [r3, #6]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	f7fd f816 	bl	8005bbe <UG_DrawFrame>
 8008b92:	e017      	b.n	8008bc4 <_UG_ButtonUpdate+0x310>
             }
         }
      }
      else
      {
          if ( !(btn->style & BTN_STYLE_NO_FILL) )
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d111      	bne.n	8008bc4 <_UG_ButtonUpdate+0x310>
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	899b      	ldrh	r3, [r3, #12]
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	4623      	mov	r3, r4
 8008bc0:	f7fc ff14 	bl	80059ec <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f023 0320 	bic.w	r3, r3, #32
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	e002      	b.n	8008bda <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008bd4:	bf00      	nop
 8008bd6:	e000      	b.n	8008bda <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008bd8:	bf00      	nop
   }
}
 8008bda:	373c      	adds	r7, #60	; 0x3c
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd90      	pop	{r4, r7, pc}
 8008be0:	0801d69c 	.word	0x0801d69c
 8008be4:	0801d6b4 	.word	0x0801d6b4

08008be8 <UG_ProgressCreate>:
const UG_COLOR pal_progress[] = {
    C_PAL_PROGRESS
};

UG_RESULT UG_ProgressCreate( UG_WINDOW* wnd, UG_PROGRESS* pgb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	71fb      	strb	r3, [r7, #7]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7fe fcad 	bl	800755e <_UG_GetFreeObject>
 8008c04:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d102      	bne.n	8008c12 <UG_ProgressCreate+0x2a>
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c10:	e047      	b.n	8008ca2 <UG_ProgressCreate+0xba>

   /* Initialize object-specific parameters */
   pgb->style = PGB_STYLE_3D;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2201      	movs	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]
   pgb->fc = wnd->fc;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	895a      	ldrh	r2, [r3, #10]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	805a      	strh	r2, [r3, #2]
   pgb->bc = wnd->bc;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	899a      	ldrh	r2, [r3, #12]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	809a      	strh	r2, [r3, #4]
   pgb->progress = 0;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	719a      	strb	r2, [r3, #6]

   /* Initialize standard object parameters */
   obj->update = _UG_ProgressUpdate;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	4a1e      	ldr	r2, [pc, #120]	; (8008cac <UG_ProgressCreate+0xc4>)
 8008c32:	605a      	str	r2, [r3, #4]
   obj->type = OBJ_TYPE_PROGRESS;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2205      	movs	r2, #5
 8008c38:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	88ba      	ldrh	r2, [r7, #4]
 8008c44:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	8c3a      	ldrh	r2, [r7, #32]
 8008c4a:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c50:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008c56:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c5e:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c66:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c6e:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c76:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	79fa      	ldrb	r2, [r7, #7]
 8008c7c:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)pgb;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	08008d85 	.word	0x08008d85

08008cb0 <UG_ProgressSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	2105      	movs	r1, #5
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fe fae9 	bl	80072a6 <_UG_SearchObject>
 8008cd4:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d102      	bne.n	8008ce2 <UG_ProgressSetForeColor+0x32>
 8008cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ce0:	e00d      	b.n	8008cfe <UG_ProgressSetForeColor+0x4e>

   pgb = (UG_PROGRESS*)(obj->data);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	60bb      	str	r3, [r7, #8]
   pgb->fc = fc;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	883a      	ldrh	r2, [r7, #0]
 8008cec:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <UG_ProgressSetProgress>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetProgress( UG_WINDOW* wnd, UG_U8 id, UG_U8 progress )
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
 8008d12:	4613      	mov	r3, r2
 8008d14:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	461a      	mov	r2, r3
 8008d22:	2105      	movs	r1, #5
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7fe fabe 	bl	80072a6 <_UG_SearchObject>
 8008d2a:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d102      	bne.n	8008d38 <UG_ProgressSetProgress+0x32>
 8008d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d36:	e020      	b.n	8008d7a <UG_ProgressSetProgress+0x74>

   progress = progress > 100 ? 100 : progress;
 8008d38:	78bb      	ldrb	r3, [r7, #2]
 8008d3a:	2b64      	cmp	r3, #100	; 0x64
 8008d3c:	bf28      	it	cs
 8008d3e:	2364      	movcs	r3, #100	; 0x64
 8008d40:	70bb      	strb	r3, [r7, #2]

   pgb = (UG_PROGRESS*)(obj->data);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	60bb      	str	r3, [r7, #8]

   // Only update if different
   if(progress != pgb->progress)
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	799b      	ldrb	r3, [r3, #6]
 8008d4c:	78ba      	ldrb	r2, [r7, #2]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d012      	beq.n	8008d78 <UG_ProgressSetProgress+0x72>
   {
      // Only redraw if new progress is less then actual(Need to redraw the background)
      obj->state |= OBJ_STATE_UPDATE | ((progress < pgb->progress) ? OBJ_STATE_REDRAW : 0);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b25b      	sxtb	r3, r3
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	7992      	ldrb	r2, [r2, #6]
 8008d5c:	78b9      	ldrb	r1, [r7, #2]
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	d201      	bcs.n	8008d66 <UG_ProgressSetProgress+0x60>
 8008d62:	2260      	movs	r2, #96	; 0x60
 8008d64:	e000      	b.n	8008d68 <UG_ProgressSetProgress+0x62>
 8008d66:	2220      	movs	r2, #32
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	b25b      	sxtb	r3, r3
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	701a      	strb	r2, [r3, #0]
      pgb->progress = progress;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	78ba      	ldrb	r2, [r7, #2]
 8008d76:	719a      	strb	r2, [r3, #6]
   }

   return UG_RESULT_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <_UG_ProgressUpdate>:
   }
   return c;
}

static void _UG_ProgressUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8008d84:	b590      	push	{r4, r7, lr}
 8008d86:	b08b      	sub	sp, #44	; 0x2c
 8008d88:	af02      	add	r7, sp, #8
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
   UG_PROGRESS* pgb;
   UG_AREA a;
   UG_U8 d=0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	77fb      	strb	r3, [r7, #31]
   UG_S16 w, wps, wpe;

   /* Get object-specific data */
   pgb = (UG_PROGRESS*)(obj->data);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	61bb      	str	r3, [r7, #24]

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 0320 	and.w	r3, r3, #32
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 81a5 	beq.w	80090f0 <_UG_ProgressUpdate+0x36c>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	f003 0308 	and.w	r3, r3, #8
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 8162 	beq.w	8009078 <_UG_ProgressUpdate+0x2f4>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 818c 	beq.w	80090da <_UG_ProgressUpdate+0x356>
         {
            UG_WindowGetArea(wnd,&a);
 8008dc2:	f107 0308 	add.w	r3, r7, #8
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff f99d 	bl	8008108 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	4413      	add	r3, r2
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	b21a      	sxth	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	4413      	add	r3, r2
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	b21a      	sxth	r2, r3
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	b21a      	sxth	r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	4413      	add	r3, r2
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	b21a      	sxth	r2, r3
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	81da      	strh	r2, [r3, #14]

            if ( obj->a_abs.ye > wnd->ye ) return;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	f300 8155 	bgt.w	80090ea <_UG_ProgressUpdate+0x366>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	f300 814e 	bgt.w	80090ee <_UG_ProgressUpdate+0x36a>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            d = 1;
 8008e52:	2301      	movs	r3, #1
 8008e54:	77fb      	strb	r3, [r7, #31]
            /* 3D or 2D style? */
            if ( !(pgb->style & PGB_STYLE_NO_BORDERS) )
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d12e      	bne.n	8008ec0 <_UG_ProgressUpdate+0x13c>
            {
               if ( pgb->style & PGB_STYLE_3D )
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d013      	beq.n	8008e96 <_UG_ProgressUpdate+0x112>
               {  /* 3D */
                  _UG_DrawObjectFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, (UG_COLOR*)pal_progress);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008e86:	4c9c      	ldr	r4, [pc, #624]	; (80090f8 <_UG_ProgressUpdate+0x374>)
 8008e88:	9400      	str	r4, [sp, #0]
 8008e8a:	f7fe fa47 	bl	800731c <_UG_DrawObjectFrame>
                  d += 3;
 8008e8e:	7ffb      	ldrb	r3, [r7, #31]
 8008e90:	3303      	adds	r3, #3
 8008e92:	77fb      	strb	r3, [r7, #31]
 8008e94:	e014      	b.n	8008ec0 <_UG_ProgressUpdate+0x13c>
               }
               else
               {  /* 2D */
                  UG_DrawFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, pgb->fc);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	885b      	ldrh	r3, [r3, #2]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	4623      	mov	r3, r4
 8008eb6:	f7fc fe82 	bl	8005bbe <UG_DrawFrame>
                  d += 1;
 8008eba:	7ffb      	ldrb	r3, [r7, #31]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	77fb      	strb	r3, [r7, #31]
               }
            }
            
            w   = ((obj->a_abs.xe-d)-(obj->a_abs.xs+d));
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	7ffb      	ldrb	r3, [r7, #31]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ed6:	b299      	uxth	r1, r3
 8008ed8:	7ffb      	ldrb	r3, [r7, #31]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	440b      	add	r3, r1
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	82fb      	strh	r3, [r7, #22]
            wps = w * pgb->progress / 100;
 8008ee6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	7992      	ldrb	r2, [r2, #6]
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
 8008ef2:	4a82      	ldr	r2, [pc, #520]	; (80090fc <_UG_ProgressUpdate+0x378>)
 8008ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8008ef8:	1152      	asrs	r2, r2, #5
 8008efa:	17db      	asrs	r3, r3, #31
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	82bb      	strh	r3, [r7, #20]
            wpe = w - wps;
 8008f00:	8afa      	ldrh	r2, [r7, #22]
 8008f02:	8abb      	ldrh	r3, [r7, #20]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	827b      	strh	r3, [r7, #18]

            if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d17d      	bne.n	8009012 <_UG_ProgressUpdate+0x28e>
                /* What's this for? Drawing a frame before drawing the remaining frames on top on it? Seems to do nothing, waste power? */
               //UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);

            // Draw remaining frame first
            if(wpe > 0)
 8008f16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dd79      	ble.n	8009012 <_UG_ProgressUpdate+0x28e>
            {
               UG_S16 xs = obj->a_abs.xs + d + wps;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	7ffb      	ldrb	r3, [r7, #31]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	8abb      	ldrh	r3, [r7, #20]
 8008f30:	4413      	add	r3, r2
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	83bb      	strh	r3, [r7, #28]
               UG_S16 xe = obj->a_abs.xe - d;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	7ffb      	ldrb	r3, [r7, #31]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	823b      	strh	r3, [r7, #16]
               
               if ( pgb->style & PGB_STYLE_FORE_COLOR_MESH )
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d042      	beq.n	8008fda <_UG_ProgressUpdate+0x256>
               {
                  // FIXME: Need fix, if start at 0, it is shifted 1 pixel right.
                  // Needed to match mesh pattern, otherwise it would "scroll right" 
                  if((((obj->a_abs.xs+d) & 1) && (wps & 1)) || (!((obj->a_abs.xs+d) & 1) && !(wps & 1)))
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	7ffb      	ldrb	r3, [r7, #31]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <_UG_ProgressUpdate+0x1ee>
 8008f68:	8abb      	ldrh	r3, [r7, #20]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10e      	bne.n	8008f90 <_UG_ProgressUpdate+0x20c>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	7ffb      	ldrb	r3, [r7, #31]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10a      	bne.n	8008f9c <_UG_ProgressUpdate+0x218>
 8008f86:	8abb      	ldrh	r3, [r7, #20]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d105      	bne.n	8008f9c <_UG_ProgressUpdate+0x218>
                     xs++;
 8008f90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	3301      	adds	r3, #1
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	83bb      	strh	r3, [r7, #28]
                  UG_DrawMesh (xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, 2, pgb->fc);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	7ffb      	ldrb	r3, [r7, #31]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	4413      	add	r3, r2
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	b219      	sxth	r1, r3
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	7ffb      	ldrb	r3, [r7, #31]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	b21c      	sxth	r4, r3
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	885b      	ldrh	r3, [r3, #2]
 8008fc4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008fc8:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	2302      	movs	r3, #2
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	f7fc fd7c 	bl	8005ad0 <UG_DrawMesh>
 8008fd8:	e01b      	b.n	8009012 <_UG_ProgressUpdate+0x28e>
               }
               else
               {
                  UG_FillFrame(xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, pgb->bc);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	7ffb      	ldrb	r3, [r7, #31]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	b219      	sxth	r1, r3
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	7ffb      	ldrb	r3, [r7, #31]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	b21c      	sxth	r4, r3
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	889b      	ldrh	r3, [r3, #4]
 8009002:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009006:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	4623      	mov	r3, r4
 800900e:	f7fc fced 	bl	80059ec <UG_FillFrame>
               }
            }

            // Draw elapsed frame
            if(pgb->progress > 0)
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	799b      	ldrb	r3, [r3, #6]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d05f      	beq.n	80090da <_UG_ProgressUpdate+0x356>
            {
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xs+d+wps, obj->a_abs.ye-d, pgb->fc);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009020:	b29a      	uxth	r2, r3
 8009022:	7ffb      	ldrb	r3, [r7, #31]
 8009024:	b29b      	uxth	r3, r3
 8009026:	4413      	add	r3, r2
 8009028:	b29b      	uxth	r3, r3
 800902a:	b218      	sxth	r0, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009032:	b29a      	uxth	r2, r3
 8009034:	7ffb      	ldrb	r3, [r7, #31]
 8009036:	b29b      	uxth	r3, r3
 8009038:	4413      	add	r3, r2
 800903a:	b29b      	uxth	r3, r3
 800903c:	b219      	sxth	r1, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009044:	b29a      	uxth	r2, r3
 8009046:	7ffb      	ldrb	r3, [r7, #31]
 8009048:	b29b      	uxth	r3, r3
 800904a:	4413      	add	r3, r2
 800904c:	b29a      	uxth	r2, r3
 800904e:	8abb      	ldrh	r3, [r7, #20]
 8009050:	4413      	add	r3, r2
 8009052:	b29b      	uxth	r3, r3
 8009054:	b21c      	sxth	r4, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800905c:	b29a      	uxth	r2, r3
 800905e:	7ffb      	ldrb	r3, [r7, #31]
 8009060:	b29b      	uxth	r3, r3
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	b29b      	uxth	r3, r3
 8009066:	b21a      	sxth	r2, r3
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	885b      	ldrh	r3, [r3, #2]
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	4613      	mov	r3, r2
 8009070:	4622      	mov	r2, r4
 8009072:	f7fc fcbb 	bl	80059ec <UG_FillFrame>
 8009076:	e030      	b.n	80090da <_UG_ProgressUpdate+0x356>
#endif
         }
      }
      else
      {
         if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f003 0308 	and.w	r3, r3, #8
 8009080:	2b00      	cmp	r3, #0
 8009082:	d12a      	bne.n	80090da <_UG_ProgressUpdate+0x356>
            UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800908a:	b29a      	uxth	r2, r3
 800908c:	7ffb      	ldrb	r3, [r7, #31]
 800908e:	b29b      	uxth	r3, r3
 8009090:	4413      	add	r3, r2
 8009092:	b29b      	uxth	r3, r3
 8009094:	b218      	sxth	r0, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800909c:	b29a      	uxth	r2, r3
 800909e:	7ffb      	ldrb	r3, [r7, #31]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	4413      	add	r3, r2
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	b219      	sxth	r1, r3
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	7ffb      	ldrb	r3, [r7, #31]
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	b21c      	sxth	r4, r3
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	7ffb      	ldrb	r3, [r7, #31]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	b21a      	sxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	899b      	ldrh	r3, [r3, #12]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4613      	mov	r3, r2
 80090d4:	4622      	mov	r2, r4
 80090d6:	f7fc fc89 	bl	80059ec <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	f023 0320 	bic.w	r3, r3, #32
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	701a      	strb	r2, [r3, #0]
 80090e8:	e002      	b.n	80090f0 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.ye > wnd->ye ) return;
 80090ea:	bf00      	nop
 80090ec:	e000      	b.n	80090f0 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.xe > wnd->xe ) return;
 80090ee:	bf00      	nop
   }
}
 80090f0:	3724      	adds	r7, #36	; 0x24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd90      	pop	{r4, r7, pc}
 80090f6:	bf00      	nop
 80090f8:	0801d6cc 	.word	0x0801d6cc
 80090fc:	51eb851f 	.word	0x51eb851f

08009100 <UG_TextboxCreate>:

/* Static functions */
static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj);

UG_RESULT UG_TextboxCreate( UG_WINDOW* wnd, UG_TEXTBOX* txb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4611      	mov	r1, r2
 800910c:	461a      	mov	r2, r3
 800910e:	460b      	mov	r3, r1
 8009110:	71fb      	strb	r3, [r7, #7]
 8009112:	4613      	mov	r3, r2
 8009114:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7fe fa21 	bl	800755e <_UG_GetFreeObject>
 800911c:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <UG_TextboxCreate+0x2a>
 8009124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009128:	e05d      	b.n	80091e6 <UG_TextboxCreate+0xe6>

   /* Initialize object-specific parameters */
   txb->str = NULL;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
   txb->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 8009130:	f7fc fc1c 	bl	800596c <UG_GetGUI>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d004      	beq.n	8009144 <UG_TextboxCreate+0x44>
 800913a:	f7fc fc17 	bl	800596c <UG_GetGUI>
 800913e:	4603      	mov	r3, r0
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	e000      	b.n	8009146 <UG_TextboxCreate+0x46>
 8009144:	2300      	movs	r3, #0
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	6053      	str	r3, [r2, #4]
   txb->style = 0; /* reserved */
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2200      	movs	r2, #0
 800914e:	721a      	strb	r2, [r3, #8]
   txb->fc = wnd->fc;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	895a      	ldrh	r2, [r3, #10]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	815a      	strh	r2, [r3, #10]
   txb->bc = wnd->bc;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	899a      	ldrh	r2, [r3, #12]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	819a      	strh	r2, [r3, #12]
   txb->align = ALIGN_CENTER;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2212      	movs	r2, #18
 8009164:	739a      	strb	r2, [r3, #14]
   txb->h_space = 0;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2200      	movs	r2, #0
 800916a:	73da      	strb	r2, [r3, #15]
   txb->v_space = 0;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2200      	movs	r2, #0
 8009170:	741a      	strb	r2, [r3, #16]

   /* Initialize standard object parameters */
   obj->update = _UG_TextboxUpdate;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	4a1e      	ldr	r2, [pc, #120]	; (80091f0 <UG_TextboxCreate+0xf0>)
 8009176:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_TEXTBOX;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2202      	movs	r2, #2
 800917c:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	88ba      	ldrh	r2, [r7, #4]
 8009188:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	8c3a      	ldrh	r2, [r7, #32]
 800918e:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009194:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800919a:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091a2:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091aa:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091b2:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091ba:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	79fa      	ldrb	r2, [r7, #7]
 80091c0:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)txb;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	f023 0301 	bic.w	r3, r3, #1
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	0800939f 	.word	0x0800939f

080091f4 <UG_TextboxSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
 8009200:	4613      	mov	r3, r2
 8009202:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8009208:	2300      	movs	r3, #0
 800920a:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	461a      	mov	r2, r3
 8009210:	2102      	movs	r1, #2
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fe f847 	bl	80072a6 <_UG_SearchObject>
 8009218:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <UG_TextboxSetForeColor+0x32>
 8009220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009224:	e00d      	b.n	8009242 <UG_TextboxSetForeColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	60bb      	str	r3, [r7, #8]
   txb->fc = fc;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	883a      	ldrh	r2, [r7, #0]
 8009230:	815a      	strh	r2, [r3, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <UG_TextboxSetBackColor>:

UG_RESULT UG_TextboxSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	460b      	mov	r3, r1
 8009254:	70fb      	strb	r3, [r7, #3]
 8009256:	4613      	mov	r3, r2
 8009258:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	461a      	mov	r2, r3
 8009266:	2102      	movs	r1, #2
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7fe f81c 	bl	80072a6 <_UG_SearchObject>
 800926e:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <UG_TextboxSetBackColor+0x32>
 8009276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800927a:	e00d      	b.n	8009298 <UG_TextboxSetBackColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	60bb      	str	r3, [r7, #8]
   txb->bc = bc;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	883a      	ldrh	r2, [r7, #0]
 8009286:	819a      	strh	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009290:	b2da      	uxtb	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <UG_TextboxSetText>:

UG_RESULT UG_TextboxSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	460b      	mov	r3, r1
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 80092b6:	7afb      	ldrb	r3, [r7, #11]
 80092b8:	461a      	mov	r2, r3
 80092ba:	2102      	movs	r1, #2
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7fd fff2 	bl	80072a6 <_UG_SearchObject>
 80092c2:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <UG_TextboxSetText+0x30>
 80092ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092ce:	e00d      	b.n	80092ec <UG_TextboxSetText+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	613b      	str	r3, [r7, #16]
   txb->str = str;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	601a      	str	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <UG_TextboxSetFont>:

UG_RESULT UG_TextboxSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	460b      	mov	r3, r1
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8009302:	2300      	movs	r3, #0
 8009304:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	461a      	mov	r2, r3
 800930e:	2102      	movs	r1, #2
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7fd ffc8 	bl	80072a6 <_UG_SearchObject>
 8009316:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d102      	bne.n	8009324 <UG_TextboxSetFont+0x30>
 800931e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009322:	e00d      	b.n	8009340 <UG_TextboxSetFont+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	613b      	str	r3, [r7, #16]
   txb->font = font;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	605a      	str	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009338:	b2da      	uxtb	r2, r3
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <UG_TextboxSetAlignment>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetAlignment( UG_WINDOW* wnd, UG_U8 id, UG_U8 align )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
 8009354:	4613      	mov	r3, r2
 8009356:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8009358:	2300      	movs	r3, #0
 800935a:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	461a      	mov	r2, r3
 8009364:	2102      	movs	r1, #2
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7fd ff9d 	bl	80072a6 <_UG_SearchObject>
 800936c:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <UG_TextboxSetAlignment+0x32>
 8009374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009378:	e00d      	b.n	8009396 <UG_TextboxSetAlignment+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	60bb      	str	r3, [r7, #8]
   txb->align = align;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	78ba      	ldrb	r2, [r7, #2]
 8009384:	739a      	strb	r2, [r3, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800938e:	b2da      	uxtb	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <_UG_TextboxUpdate>:
   }
   return align;
}

static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 800939e:	b590      	push	{r4, r7, lr}
 80093a0:	b08f      	sub	sp, #60	; 0x3c
 80093a2:	af02      	add	r7, sp, #8
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
   UG_TEXTBOX* txb;
   UG_AREA a;
   UG_TEXT txt;

   /* Get object-specific data */
   txb = (UG_TEXTBOX*)(obj->data);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	62fb      	str	r3, [r7, #44]	; 0x2c

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 80b8 	beq.w	800952c <_UG_TextboxUpdate+0x18e>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	f003 0308 	and.w	r3, r3, #8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8094 	beq.w	80094f2 <_UG_TextboxUpdate+0x154>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 809f 	beq.w	8009516 <_UG_TextboxUpdate+0x178>
         {
            UG_WindowGetArea(wnd,&a);
 80093d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7fe fe92 	bl	8008108 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	b21a      	sxth	r2, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009402:	b29a      	uxth	r2, r3
 8009404:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009408:	b29b      	uxth	r3, r3
 800940a:	4413      	add	r3, r2
 800940c:	b29b      	uxth	r3, r3
 800940e:	b21a      	sxth	r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800941a:	b29a      	uxth	r2, r3
 800941c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009420:	b29b      	uxth	r3, r3
 8009422:	4413      	add	r3, r2
 8009424:	b29b      	uxth	r3, r3
 8009426:	b21a      	sxth	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009432:	b29a      	uxth	r2, r3
 8009434:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009438:	b29b      	uxth	r3, r3
 800943a:	4413      	add	r3, r2
 800943c:	b29b      	uxth	r3, r3
 800943e:	b21a      	sxth	r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009450:	429a      	cmp	r2, r3
 8009452:	dc68      	bgt.n	8009526 <_UG_TextboxUpdate+0x188>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009460:	429a      	cmp	r2, r3
 8009462:	dc62      	bgt.n	800952a <_UG_TextboxUpdate+0x18c>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            txt.bc = txb->bc;
 8009464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009466:	899b      	ldrh	r3, [r3, #12]
 8009468:	837b      	strh	r3, [r7, #26]
            txt.fc = txb->fc;
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	895b      	ldrh	r3, [r3, #10]
 800946e:	833b      	strh	r3, [r7, #24]

            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8009488:	8b7b      	ldrh	r3, [r7, #26]
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	4623      	mov	r3, r4
 800948e:	f7fc faad 	bl	80059ec <UG_FillFrame>

            /* Draw Textbox text */
            txt.a.xs = obj->a_abs.xs;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009498:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80094a0:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80094a8:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80094b0:	82fb      	strh	r3, [r7, #22]
            txt.align = txb->align;
 80094b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b4:	7b9b      	ldrb	r3, [r3, #14]
 80094b6:	773b      	strb	r3, [r7, #28]
            txt.font = txb->font;
 80094b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	60fb      	str	r3, [r7, #12]
            txt.h_space = txb->h_space;
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80094c4:	b21b      	sxth	r3, r3
 80094c6:	83fb      	strh	r3, [r7, #30]
            txt.v_space = txb->v_space;
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80094ce:	b21b      	sxth	r3, r3
 80094d0:	843b      	strh	r3, [r7, #32]
            txt.str = txb->str;
 80094d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 80094d8:	f107 0308 	add.w	r3, r7, #8
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fd fdcb 	bl	8007078 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	e011      	b.n	8009516 <_UG_TextboxUpdate+0x178>
#endif
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	899b      	ldrh	r3, [r3, #12]
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	4623      	mov	r3, r4
 8009512:	f7fc fa6b 	bl	80059ec <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	f023 0320 	bic.w	r3, r3, #32
 800951e:	b2da      	uxtb	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e002      	b.n	800952c <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.xe > wnd->xe ) return;
 800952a:	bf00      	nop
   }
}
 800952c:	3734      	adds	r7, #52	; 0x34
 800952e:	46bd      	mov	sp, r7
 8009530:	bd90      	pop	{r4, r7, pc}
	...

08009534 <vInitialAnim>:
extern UG_BMP ITMLogo;
const uint8_t ITMLogoID = 1;

//TODO Make fade animation of the school logo
static void vInitialAnim(MenuStage *stage)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af02      	add	r7, sp, #8
 800953a:	6078      	str	r0, [r7, #4]
	static uint16_t DelayCounter = 0;
	static uint16_t *ITMLogoRAMBuffer;
	static uint32_t *PixelsAddr;
	static uint16_t *PixelsValues;
	static uint16_t PixelsIndex = 1;
	UG_BMP ITMLogoRAM = {
 800953c:	f107 0308 	add.w	r3, r7, #8
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	605a      	str	r2, [r3, #4]
 8009546:	609a      	str	r2, [r3, #8]
 8009548:	4baa      	ldr	r3, [pc, #680]	; (80097f4 <vInitialAnim+0x2c0>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60bb      	str	r3, [r7, #8]
 800954e:	23a1      	movs	r3, #161	; 0xa1
 8009550:	81bb      	strh	r3, [r7, #12]
 8009552:	2399      	movs	r3, #153	; 0x99
 8009554:	81fb      	strh	r3, [r7, #14]
 8009556:	2310      	movs	r3, #16
 8009558:	743b      	strb	r3, [r7, #16]
		.width = 161,
		.height = 153,
		.bpp = BMP_BPP_16
	};

	switch(states)
 800955a:	4ba7      	ldr	r3, [pc, #668]	; (80097f8 <vInitialAnim+0x2c4>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b07      	cmp	r3, #7
 8009560:	f200 819a 	bhi.w	8009898 <vInitialAnim+0x364>
 8009564:	a201      	add	r2, pc, #4	; (adr r2, 800956c <vInitialAnim+0x38>)
 8009566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956a:	bf00      	nop
 800956c:	0800958d 	.word	0x0800958d
 8009570:	080095fb 	.word	0x080095fb
 8009574:	08009695 	.word	0x08009695
 8009578:	0800972f 	.word	0x0800972f
 800957c:	08009765 	.word	0x08009765
 8009580:	0800983d 	.word	0x0800983d
 8009584:	08009863 	.word	0x08009863
 8009588:	08009877 	.word	0x08009877
	{
		case FadeIn:
			if(g >= 63)
 800958c:	4b9b      	ldr	r3, [pc, #620]	; (80097fc <vInitialAnim+0x2c8>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b3e      	cmp	r3, #62	; 0x3e
 8009592:	d903      	bls.n	800959c <vInitialAnim+0x68>
				states = DMATransfer;
 8009594:	4b98      	ldr	r3, [pc, #608]	; (80097f8 <vInitialAnim+0x2c4>)
 8009596:	2201      	movs	r2, #1
 8009598:	701a      	strb	r2, [r3, #0]
 800959a:	e027      	b.n	80095ec <vInitialAnim+0xb8>
			else
			{
				if(DelayCounter == 20) //20ms Delay for animations
 800959c:	4b98      	ldr	r3, [pc, #608]	; (8009800 <vInitialAnim+0x2cc>)
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	2b14      	cmp	r3, #20
 80095a2:	d123      	bne.n	80095ec <vInitialAnim+0xb8>
				{
					UG_FillScreen(RGB565Color(r, g, b));
 80095a4:	4b97      	ldr	r3, [pc, #604]	; (8009804 <vInitialAnim+0x2d0>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	4a94      	ldr	r2, [pc, #592]	; (80097fc <vInitialAnim+0x2c8>)
 80095aa:	7811      	ldrb	r1, [r2, #0]
 80095ac:	4a96      	ldr	r2, [pc, #600]	; (8009808 <vInitialAnim+0x2d4>)
 80095ae:	7812      	ldrb	r2, [r2, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 f9cc 	bl	800994e <RGB565Color>
 80095b6:	4603      	mov	r3, r0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fc f9f3 	bl	80059a4 <UG_FillScreen>
					UG_Update();
 80095be:	f7fe f81d 	bl	80075fc <UG_Update>
					r++;
 80095c2:	4b90      	ldr	r3, [pc, #576]	; (8009804 <vInitialAnim+0x2d0>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	3301      	adds	r3, #1
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	4b8e      	ldr	r3, [pc, #568]	; (8009804 <vInitialAnim+0x2d0>)
 80095cc:	701a      	strb	r2, [r3, #0]
					g+=2;
 80095ce:	4b8b      	ldr	r3, [pc, #556]	; (80097fc <vInitialAnim+0x2c8>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	3302      	adds	r3, #2
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	4b89      	ldr	r3, [pc, #548]	; (80097fc <vInitialAnim+0x2c8>)
 80095d8:	701a      	strb	r2, [r3, #0]
					b++;
 80095da:	4b8b      	ldr	r3, [pc, #556]	; (8009808 <vInitialAnim+0x2d4>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	3301      	adds	r3, #1
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	4b89      	ldr	r3, [pc, #548]	; (8009808 <vInitialAnim+0x2d4>)
 80095e4:	701a      	strb	r2, [r3, #0]
					DelayCounter = 0;
 80095e6:	4b86      	ldr	r3, [pc, #536]	; (8009800 <vInitialAnim+0x2cc>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	801a      	strh	r2, [r3, #0]
				}
			}
			DelayCounter++;
 80095ec:	4b84      	ldr	r3, [pc, #528]	; (8009800 <vInitialAnim+0x2cc>)
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	3301      	adds	r3, #1
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	4b82      	ldr	r3, [pc, #520]	; (8009800 <vInitialAnim+0x2cc>)
 80095f6:	801a      	strh	r2, [r3, #0]
		break;
 80095f8:	e14e      	b.n	8009898 <vInitialAnim+0x364>
		case DMATransfer:
			UG_FillScreen(C_WHITE);
 80095fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80095fe:	f7fc f9d1 	bl	80059a4 <UG_FillScreen>
			UG_Update();
 8009602:	f7fd fffb 	bl	80075fc <UG_Update>
			ITMLogoRAMBuffer = (uint16_t*)calloc(ITMLOGO_SIZE, sizeof(uint16_t));
 8009606:	2102      	movs	r1, #2
 8009608:	f246 0039 	movw	r0, #24633	; 0x6039
 800960c:	f000 fa04 	bl	8009a18 <calloc>
 8009610:	4603      	mov	r3, r0
 8009612:	461a      	mov	r2, r3
 8009614:	4b77      	ldr	r3, [pc, #476]	; (80097f4 <vInitialAnim+0x2c0>)
 8009616:	601a      	str	r2, [r3, #0]
			if(ITMLogoRAMBuffer != NULL)
 8009618:	4b76      	ldr	r3, [pc, #472]	; (80097f4 <vInitialAnim+0x2c0>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d036      	beq.n	800968e <vInitialAnim+0x15a>
			{
				//TODO Correct the DMA transfer
				if(HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)&ITMLogo.p, (uint32_t)&ITMLogoRAMBuffer, ITMLOGO_SIZE) != HAL_OK)
 8009620:	497a      	ldr	r1, [pc, #488]	; (800980c <vInitialAnim+0x2d8>)
 8009622:	4a74      	ldr	r2, [pc, #464]	; (80097f4 <vInitialAnim+0x2c0>)
 8009624:	f246 0339 	movw	r3, #24633	; 0x6039
 8009628:	4879      	ldr	r0, [pc, #484]	; (8009810 <vInitialAnim+0x2dc>)
 800962a:	f7f9 fa43 	bl	8002ab4 <HAL_DMA_Start_IT>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <vInitialAnim+0x104>
				{
					Error_Handler();
 8009634:	f7f7 fbd6 	bl	8000de4 <Error_Handler>
				}
				//Wait for DMA to finish
				HAL_TIM_Base_Stop_IT(&htim2);
 8009638:	4876      	ldr	r0, [pc, #472]	; (8009814 <vInitialAnim+0x2e0>)
 800963a:	f7fb f83b 	bl	80046b4 <HAL_TIM_Base_Stop_IT>
				HAL_SuspendTick();
 800963e:	f7f9 f859 	bl	80026f4 <HAL_SuspendTick>
				HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8009642:	2101      	movs	r1, #1
 8009644:	2001      	movs	r0, #1
 8009646:	f7f9 ff29 	bl	800349c <HAL_PWR_EnterSLEEPMode>
				HAL_ResumeTick();
 800964a:	f7f9 f863 	bl	8002714 <HAL_ResumeTick>
				HAL_TIM_Base_Start_IT(&htim2);
 800964e:	4871      	ldr	r0, [pc, #452]	; (8009814 <vInitialAnim+0x2e0>)
 8009650:	f7fa ffce 	bl	80045f0 <HAL_TIM_Base_Start_IT>
				PixelsAddr = (uint32_t*)calloc(13068, sizeof(uint32_t));
 8009654:	2104      	movs	r1, #4
 8009656:	f243 300c 	movw	r0, #13068	; 0x330c
 800965a:	f000 f9dd 	bl	8009a18 <calloc>
 800965e:	4603      	mov	r3, r0
 8009660:	461a      	mov	r2, r3
 8009662:	4b6d      	ldr	r3, [pc, #436]	; (8009818 <vInitialAnim+0x2e4>)
 8009664:	601a      	str	r2, [r3, #0]
				PixelsValues = (uint16_t*)calloc(13068, sizeof(uint16_t));
 8009666:	2102      	movs	r1, #2
 8009668:	f243 300c 	movw	r0, #13068	; 0x330c
 800966c:	f000 f9d4 	bl	8009a18 <calloc>
 8009670:	4603      	mov	r3, r0
 8009672:	461a      	mov	r2, r3
 8009674:	4b69      	ldr	r3, [pc, #420]	; (800981c <vInitialAnim+0x2e8>)
 8009676:	601a      	str	r2, [r3, #0]
				states = FadeInIm;
 8009678:	4b5f      	ldr	r3, [pc, #380]	; (80097f8 <vInitialAnim+0x2c4>)
 800967a:	2203      	movs	r2, #3
 800967c:	701a      	strb	r2, [r3, #0]
				if(PixelsAddr == NULL)
 800967e:	4b66      	ldr	r3, [pc, #408]	; (8009818 <vInitialAnim+0x2e4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f040 8107 	bne.w	8009896 <vInitialAnim+0x362>
					Error_Handler();
 8009688:	f7f7 fbac 	bl	8000de4 <Error_Handler>
			}
			else
			{
				Error_Handler();
			}
		break;
 800968c:	e103      	b.n	8009896 <vInitialAnim+0x362>
				Error_Handler();
 800968e:	f7f7 fba9 	bl	8000de4 <Error_Handler>
		break;
 8009692:	e100      	b.n	8009896 <vInitialAnim+0x362>
		case AnalyzeBMP:
			//TODO Make fade animation of the school logo
			for(uint16_t i = 0; i < 1024; i++, ForCounter++)
 8009694:	2300      	movs	r3, #0
 8009696:	82fb      	strh	r3, [r7, #22]
 8009698:	e044      	b.n	8009724 <vInitialAnim+0x1f0>
			{
				if(ForCounter >= ITMLOGO_SIZE)
 800969a:	4b61      	ldr	r3, [pc, #388]	; (8009820 <vInitialAnim+0x2ec>)
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	f246 0238 	movw	r2, #24632	; 0x6038
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d908      	bls.n	80096b8 <vInitialAnim+0x184>
				{
					states = FadeInIm;
 80096a6:	4b54      	ldr	r3, [pc, #336]	; (80097f8 <vInitialAnim+0x2c4>)
 80096a8:	2203      	movs	r2, #3
 80096aa:	701a      	strb	r2, [r3, #0]
					ForCounter = ITMLOGO_SIZE;
 80096ac:	4b5c      	ldr	r3, [pc, #368]	; (8009820 <vInitialAnim+0x2ec>)
 80096ae:	f246 0239 	movw	r2, #24633	; 0x6039
 80096b2:	801a      	strh	r2, [r3, #0]
					break;
 80096b4:	bf00      	nop
					PixelsAddr[PixelsIndex] = (uint32_t)&ITMLogoRAMBuffer[ForCounter]; //Getting the address of the pixel
					PixelsValues[PixelsIndex] = ITMLogoRAMBuffer[ForCounter]; //Getting the value of the pixel
					PixelsIndex++;
				}
			}
		break;
 80096b6:	e0ef      	b.n	8009898 <vInitialAnim+0x364>
				else if(ITMLogoRAMBuffer[ForCounter] != 0xFFFF) //Searching for non white pixels
 80096b8:	4b4e      	ldr	r3, [pc, #312]	; (80097f4 <vInitialAnim+0x2c0>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	4b58      	ldr	r3, [pc, #352]	; (8009820 <vInitialAnim+0x2ec>)
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	4413      	add	r3, r2
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d021      	beq.n	8009712 <vInitialAnim+0x1de>
					PixelsAddr[PixelsIndex] = (uint32_t)&ITMLogoRAMBuffer[ForCounter]; //Getting the address of the pixel
 80096ce:	4b49      	ldr	r3, [pc, #292]	; (80097f4 <vInitialAnim+0x2c0>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b53      	ldr	r3, [pc, #332]	; (8009820 <vInitialAnim+0x2ec>)
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	18d1      	adds	r1, r2, r3
 80096da:	4b4f      	ldr	r3, [pc, #316]	; (8009818 <vInitialAnim+0x2e4>)
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	4b51      	ldr	r3, [pc, #324]	; (8009824 <vInitialAnim+0x2f0>)
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	460a      	mov	r2, r1
 80096e8:	601a      	str	r2, [r3, #0]
					PixelsValues[PixelsIndex] = ITMLogoRAMBuffer[ForCounter]; //Getting the value of the pixel
 80096ea:	4b42      	ldr	r3, [pc, #264]	; (80097f4 <vInitialAnim+0x2c0>)
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b4c      	ldr	r3, [pc, #304]	; (8009820 <vInitialAnim+0x2ec>)
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	441a      	add	r2, r3
 80096f6:	4b49      	ldr	r3, [pc, #292]	; (800981c <vInitialAnim+0x2e8>)
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	4b4a      	ldr	r3, [pc, #296]	; (8009824 <vInitialAnim+0x2f0>)
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	440b      	add	r3, r1
 8009702:	8812      	ldrh	r2, [r2, #0]
 8009704:	801a      	strh	r2, [r3, #0]
					PixelsIndex++;
 8009706:	4b47      	ldr	r3, [pc, #284]	; (8009824 <vInitialAnim+0x2f0>)
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	4b45      	ldr	r3, [pc, #276]	; (8009824 <vInitialAnim+0x2f0>)
 8009710:	801a      	strh	r2, [r3, #0]
			for(uint16_t i = 0; i < 1024; i++, ForCounter++)
 8009712:	8afb      	ldrh	r3, [r7, #22]
 8009714:	3301      	adds	r3, #1
 8009716:	82fb      	strh	r3, [r7, #22]
 8009718:	4b41      	ldr	r3, [pc, #260]	; (8009820 <vInitialAnim+0x2ec>)
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	3301      	adds	r3, #1
 800971e:	b29a      	uxth	r2, r3
 8009720:	4b3f      	ldr	r3, [pc, #252]	; (8009820 <vInitialAnim+0x2ec>)
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	8afb      	ldrh	r3, [r7, #22]
 8009726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800972a:	d3b6      	bcc.n	800969a <vInitialAnim+0x166>
		break;
 800972c:	e0b4      	b.n	8009898 <vInitialAnim+0x364>
		case FadeInIm:
			UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogoRAM);
 800972e:	4b37      	ldr	r3, [pc, #220]	; (800980c <vInitialAnim+0x2d8>)
 8009730:	889b      	ldrh	r3, [r3, #4]
 8009732:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8009736:	0fda      	lsrs	r2, r3, #31
 8009738:	4413      	add	r3, r2
 800973a:	105b      	asrs	r3, r3, #1
 800973c:	b218      	sxth	r0, r3
 800973e:	4b33      	ldr	r3, [pc, #204]	; (800980c <vInitialAnim+0x2d8>)
 8009740:	88db      	ldrh	r3, [r3, #6]
 8009742:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8009746:	0fda      	lsrs	r2, r3, #31
 8009748:	4413      	add	r3, r2
 800974a:	105b      	asrs	r3, r3, #1
 800974c:	b21b      	sxth	r3, r3
 800974e:	f107 0208 	add.w	r2, r7, #8
 8009752:	4619      	mov	r1, r3
 8009754:	f7fe f812 	bl	800777c <UG_DrawBMP>
			UG_Update();
 8009758:	f7fd ff50 	bl	80075fc <UG_Update>
			states = FadeOutIm;
 800975c:	4b26      	ldr	r3, [pc, #152]	; (80097f8 <vInitialAnim+0x2c4>)
 800975e:	2204      	movs	r2, #4
 8009760:	701a      	strb	r2, [r3, #0]
		break;
 8009762:	e099      	b.n	8009898 <vInitialAnim+0x364>
		case FadeOutIm:
			if(DelayCounter == 1500)
 8009764:	4b26      	ldr	r3, [pc, #152]	; (8009800 <vInitialAnim+0x2cc>)
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800976c:	4293      	cmp	r3, r2
 800976e:	d139      	bne.n	80097e4 <vInitialAnim+0x2b0>
			{
				UG_FillScreen(C_WHITE);
 8009770:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009774:	f7fc f916 	bl	80059a4 <UG_FillScreen>
				UG_Update();
 8009778:	f7fd ff40 	bl	80075fc <UG_Update>
				//TODO Adjust positions
				LCD_PutStr(20, 2, "Firmware", FONT_arial_49X57, C_BLACK, C_WHITE);
 800977c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	2300      	movs	r3, #0
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	4b28      	ldr	r3, [pc, #160]	; (8009828 <vInitialAnim+0x2f4>)
 8009788:	4a28      	ldr	r2, [pc, #160]	; (800982c <vInitialAnim+0x2f8>)
 800978a:	2102      	movs	r1, #2
 800978c:	2014      	movs	r0, #20
 800978e:	f7f8 f8ff 	bl	8001990 <LCD_PutStr>
				LCD_PutStr(30, 60, "version", FONT_arial_49X57, C_BLACK, C_WHITE);
 8009792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	2300      	movs	r3, #0
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4b22      	ldr	r3, [pc, #136]	; (8009828 <vInitialAnim+0x2f4>)
 800979e:	4a24      	ldr	r2, [pc, #144]	; (8009830 <vInitialAnim+0x2fc>)
 80097a0:	213c      	movs	r1, #60	; 0x3c
 80097a2:	201e      	movs	r0, #30
 80097a4:	f7f8 f8f4 	bl	8001990 <LCD_PutStr>
				LCD_PutStr(40, 130, FIRMWARE_VERSION, FONT_arial_49X57, C_BLACK, C_WHITE);
 80097a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	4b1d      	ldr	r3, [pc, #116]	; (8009828 <vInitialAnim+0x2f4>)
 80097b4:	4a1f      	ldr	r2, [pc, #124]	; (8009834 <vInitialAnim+0x300>)
 80097b6:	2182      	movs	r1, #130	; 0x82
 80097b8:	2028      	movs	r0, #40	; 0x28
 80097ba:	f7f8 f8e9 	bl	8001990 <LCD_PutStr>
				LCD_PutStr(30, 188, "(Beta)", FONT_arial_49X57, C_BLACK, C_WHITE);
 80097be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	2300      	movs	r3, #0
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	4b17      	ldr	r3, [pc, #92]	; (8009828 <vInitialAnim+0x2f4>)
 80097ca:	4a1b      	ldr	r2, [pc, #108]	; (8009838 <vInitialAnim+0x304>)
 80097cc:	21bc      	movs	r1, #188	; 0xbc
 80097ce:	201e      	movs	r0, #30
 80097d0:	f7f8 f8de 	bl	8001990 <LCD_PutStr>
				UG_Update();
 80097d4:	f7fd ff12 	bl	80075fc <UG_Update>
				states = ShowVer;
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <vInitialAnim+0x2c4>)
 80097da:	2205      	movs	r2, #5
 80097dc:	701a      	strb	r2, [r3, #0]
				DelayCounter = 0;
 80097de:	4b08      	ldr	r3, [pc, #32]	; (8009800 <vInitialAnim+0x2cc>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	801a      	strh	r2, [r3, #0]
			}
			DelayCounter++;
 80097e4:	4b06      	ldr	r3, [pc, #24]	; (8009800 <vInitialAnim+0x2cc>)
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	4b04      	ldr	r3, [pc, #16]	; (8009800 <vInitialAnim+0x2cc>)
 80097ee:	801a      	strh	r2, [r3, #0]
		break;
 80097f0:	e052      	b.n	8009898 <vInitialAnim+0x364>
 80097f2:	bf00      	nop
 80097f4:	200004f8 	.word	0x200004f8
 80097f8:	200004fc 	.word	0x200004fc
 80097fc:	200004fd 	.word	0x200004fd
 8009800:	200004fe 	.word	0x200004fe
 8009804:	20000500 	.word	0x20000500
 8009808:	20000501 	.word	0x20000501
 800980c:	20000024 	.word	0x20000024
 8009810:	20000240 	.word	0x20000240
 8009814:	200001b4 	.word	0x200001b4
 8009818:	20000504 	.word	0x20000504
 800981c:	20000508 	.word	0x20000508
 8009820:	2000050c 	.word	0x2000050c
 8009824:	20000030 	.word	0x20000030
 8009828:	0800a580 	.word	0x0800a580
 800982c:	0800a4f0 	.word	0x0800a4f0
 8009830:	0800a4fc 	.word	0x0800a4fc
 8009834:	0800a504 	.word	0x0800a504
 8009838:	0800a50c 	.word	0x0800a50c
		case ShowVer:

			if(DelayCounter == 1500)
 800983c:	4b18      	ldr	r3, [pc, #96]	; (80098a0 <vInitialAnim+0x36c>)
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009844:	4293      	cmp	r3, r2
 8009846:	d105      	bne.n	8009854 <vInitialAnim+0x320>
			{
				states = FadeWhite;
 8009848:	4b16      	ldr	r3, [pc, #88]	; (80098a4 <vInitialAnim+0x370>)
 800984a:	2206      	movs	r2, #6
 800984c:	701a      	strb	r2, [r3, #0]
				DelayCounter = 0;
 800984e:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <vInitialAnim+0x36c>)
 8009850:	2200      	movs	r2, #0
 8009852:	801a      	strh	r2, [r3, #0]
			}

			DelayCounter++;
 8009854:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <vInitialAnim+0x36c>)
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	3301      	adds	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <vInitialAnim+0x36c>)
 800985e:	801a      	strh	r2, [r3, #0]
		break;
 8009860:	e01a      	b.n	8009898 <vInitialAnim+0x364>
		case FadeWhite:
			UG_FillScreen(C_WHITE);
 8009862:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009866:	f7fc f89d 	bl	80059a4 <UG_FillScreen>
			UG_Update();
 800986a:	f7fd fec7 	bl	80075fc <UG_Update>
			states = ShowVer;
 800986e:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <vInitialAnim+0x370>)
 8009870:	2205      	movs	r2, #5
 8009872:	701a      	strb	r2, [r3, #0]
		break;
 8009874:	e010      	b.n	8009898 <vInitialAnim+0x364>
		case Finish:
			free(ITMLogoRAMBuffer);
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <vInitialAnim+0x374>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f8fe 	bl	8009a7c <free>
			free(PixelsAddr);
 8009880:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <vInitialAnim+0x378>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f8f9 	bl	8009a7c <free>
			free(PixelsValues);
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <vInitialAnim+0x37c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f000 f8f4 	bl	8009a7c <free>
		break;
 8009894:	e000      	b.n	8009898 <vInitialAnim+0x364>
		break;
 8009896:	bf00      	nop
	}
}
 8009898:	bf00      	nop
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	200004fe 	.word	0x200004fe
 80098a4:	200004fc 	.word	0x200004fc
 80098a8:	200004f8 	.word	0x200004f8
 80098ac:	20000504 	.word	0x20000504
 80098b0:	20000508 	.word	0x20000508

080098b4 <vMainLobby>:
static void vMainLobby(MenuStage *stage, Input *input)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]

}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <vMenu>:
static void vMenu(MenuStage *stage, Input *input)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b083      	sub	sp, #12
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]

}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <vConfigurationMenu>:
static void vConfigurationMenu(MenuStage *stage, Input *input)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]

}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <vAboutMenu>:
static void vAboutMenu(MenuStage *stage, Input *input)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]

}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <vPlotMenu>:
static void vPlotMenu(MenuStage *stage, Input *input)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]

}
 8009916:	bf00      	nop
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <vUSBConfigMenu>:
static void vUSBConfigMenu(MenuStage *stage, Input *input)
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]

}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <vStepResponseMenu>:
static void vStepResponseMenu(MenuStage *stage, Input *input)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]

}
 8009942:	bf00      	nop
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <RGB565Color>:

uint16_t RGB565Color(uint8_t r, uint8_t g, uint8_t b)
{
 800994e:	b480      	push	{r7}
 8009950:	b083      	sub	sp, #12
 8009952:	af00      	add	r7, sp, #0
 8009954:	4603      	mov	r3, r0
 8009956:	71fb      	strb	r3, [r7, #7]
 8009958:	460b      	mov	r3, r1
 800995a:	71bb      	strb	r3, [r7, #6]
 800995c:	4613      	mov	r3, r2
 800995e:	717b      	strb	r3, [r7, #5]
	return (uint16_t)(r<<11 | g<<5 | b);
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	02db      	lsls	r3, r3, #11
 8009964:	b21a      	sxth	r2, r3
 8009966:	79bb      	ldrb	r3, [r7, #6]
 8009968:	015b      	lsls	r3, r3, #5
 800996a:	b21b      	sxth	r3, r3
 800996c:	4313      	orrs	r3, r2
 800996e:	b21a      	sxth	r2, r3
 8009970:	797b      	ldrb	r3, [r7, #5]
 8009972:	b21b      	sxth	r3, r3
 8009974:	4313      	orrs	r3, r2
 8009976:	b21b      	sxth	r3, r3
 8009978:	b29b      	uxth	r3, r3
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
	...

08009988 <vTaskUI>:
{
	UG_DrawBMP((LCD_WIDTH-bmp->width)/2, (LCD_HEIGHT-bmp->height)/2, bmp);
}

void vTaskUI(MenuStage *stage, Input *input)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
	switch(*stage)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b07      	cmp	r3, #7
 8009998:	d839      	bhi.n	8009a0e <vTaskUI+0x86>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <vTaskUI+0x18>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	080099c1 	.word	0x080099c1
 80099a4:	080099c9 	.word	0x080099c9
 80099a8:	080099d3 	.word	0x080099d3
 80099ac:	080099dd 	.word	0x080099dd
 80099b0:	080099e7 	.word	0x080099e7
 80099b4:	080099f1 	.word	0x080099f1
 80099b8:	080099fb 	.word	0x080099fb
 80099bc:	08009a05 	.word	0x08009a05
	{
		case sInitialAnim:
			vInitialAnim(stage);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff fdb7 	bl	8009534 <vInitialAnim>
		break;
 80099c6:	e022      	b.n	8009a0e <vTaskUI+0x86>
		case sMainLobby:
			vMainLobby(stage, input);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff ff72 	bl	80098b4 <vMainLobby>
		break;
 80099d0:	e01d      	b.n	8009a0e <vTaskUI+0x86>
		case sMenu:
			vMenu(stage, input);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff ff78 	bl	80098ca <vMenu>
		break;
 80099da:	e018      	b.n	8009a0e <vTaskUI+0x86>
		case sConfiguration:
			vConfigurationMenu(stage, input);
 80099dc:	6839      	ldr	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff ff7e 	bl	80098e0 <vConfigurationMenu>
		break;
 80099e4:	e013      	b.n	8009a0e <vTaskUI+0x86>
		case sAbout:
			vAboutMenu(stage, input);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff ff84 	bl	80098f6 <vAboutMenu>
		break;
 80099ee:	e00e      	b.n	8009a0e <vTaskUI+0x86>
		case sPlot:
			vPlotMenu(stage, input);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff ff8a 	bl	800990c <vPlotMenu>
		break;
 80099f8:	e009      	b.n	8009a0e <vTaskUI+0x86>
		case sUSBConfig:
			vUSBConfigMenu(stage, input);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff ff90 	bl	8009922 <vUSBConfigMenu>
		break;
 8009a02:	e004      	b.n	8009a0e <vTaskUI+0x86>
		case sStepResponse:
			vStepResponseMenu(stage, input);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff ff96 	bl	8009938 <vStepResponseMenu>
		break;
 8009a0c:	bf00      	nop
	}
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop

08009a18 <calloc>:
 8009a18:	4b02      	ldr	r3, [pc, #8]	; (8009a24 <calloc+0xc>)
 8009a1a:	460a      	mov	r2, r1
 8009a1c:	4601      	mov	r1, r0
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	f000 b83c 	b.w	8009a9c <_calloc_r>
 8009a24:	20000034 	.word	0x20000034

08009a28 <__errno>:
 8009a28:	4b01      	ldr	r3, [pc, #4]	; (8009a30 <__errno+0x8>)
 8009a2a:	6818      	ldr	r0, [r3, #0]
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	20000034 	.word	0x20000034

08009a34 <__libc_init_array>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	4d0d      	ldr	r5, [pc, #52]	; (8009a6c <__libc_init_array+0x38>)
 8009a38:	4c0d      	ldr	r4, [pc, #52]	; (8009a70 <__libc_init_array+0x3c>)
 8009a3a:	1b64      	subs	r4, r4, r5
 8009a3c:	10a4      	asrs	r4, r4, #2
 8009a3e:	2600      	movs	r6, #0
 8009a40:	42a6      	cmp	r6, r4
 8009a42:	d109      	bne.n	8009a58 <__libc_init_array+0x24>
 8009a44:	4d0b      	ldr	r5, [pc, #44]	; (8009a74 <__libc_init_array+0x40>)
 8009a46:	4c0c      	ldr	r4, [pc, #48]	; (8009a78 <__libc_init_array+0x44>)
 8009a48:	f000 fcac 	bl	800a3a4 <_init>
 8009a4c:	1b64      	subs	r4, r4, r5
 8009a4e:	10a4      	asrs	r4, r4, #2
 8009a50:	2600      	movs	r6, #0
 8009a52:	42a6      	cmp	r6, r4
 8009a54:	d105      	bne.n	8009a62 <__libc_init_array+0x2e>
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5c:	4798      	blx	r3
 8009a5e:	3601      	adds	r6, #1
 8009a60:	e7ee      	b.n	8009a40 <__libc_init_array+0xc>
 8009a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a66:	4798      	blx	r3
 8009a68:	3601      	adds	r6, #1
 8009a6a:	e7f2      	b.n	8009a52 <__libc_init_array+0x1e>
 8009a6c:	08029794 	.word	0x08029794
 8009a70:	08029794 	.word	0x08029794
 8009a74:	08029794 	.word	0x08029794
 8009a78:	08029798 	.word	0x08029798

08009a7c <free>:
 8009a7c:	4b02      	ldr	r3, [pc, #8]	; (8009a88 <free+0xc>)
 8009a7e:	4601      	mov	r1, r0
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	f000 b821 	b.w	8009ac8 <_free_r>
 8009a86:	bf00      	nop
 8009a88:	20000034 	.word	0x20000034

08009a8c <memset>:
 8009a8c:	4402      	add	r2, r0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d100      	bne.n	8009a96 <memset+0xa>
 8009a94:	4770      	bx	lr
 8009a96:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9a:	e7f9      	b.n	8009a90 <memset+0x4>

08009a9c <_calloc_r>:
 8009a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a9e:	fba1 2402 	umull	r2, r4, r1, r2
 8009aa2:	b94c      	cbnz	r4, 8009ab8 <_calloc_r+0x1c>
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	9201      	str	r2, [sp, #4]
 8009aa8:	f000 f87a 	bl	8009ba0 <_malloc_r>
 8009aac:	9a01      	ldr	r2, [sp, #4]
 8009aae:	4605      	mov	r5, r0
 8009ab0:	b930      	cbnz	r0, 8009ac0 <_calloc_r+0x24>
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	b003      	add	sp, #12
 8009ab6:	bd30      	pop	{r4, r5, pc}
 8009ab8:	220c      	movs	r2, #12
 8009aba:	6002      	str	r2, [r0, #0]
 8009abc:	2500      	movs	r5, #0
 8009abe:	e7f8      	b.n	8009ab2 <_calloc_r+0x16>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	f7ff ffe3 	bl	8009a8c <memset>
 8009ac6:	e7f4      	b.n	8009ab2 <_calloc_r+0x16>

08009ac8 <_free_r>:
 8009ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aca:	2900      	cmp	r1, #0
 8009acc:	d044      	beq.n	8009b58 <_free_r+0x90>
 8009ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad2:	9001      	str	r0, [sp, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8009ada:	bfb8      	it	lt
 8009adc:	18e4      	addlt	r4, r4, r3
 8009ade:	f000 f903 	bl	8009ce8 <__malloc_lock>
 8009ae2:	4a1e      	ldr	r2, [pc, #120]	; (8009b5c <_free_r+0x94>)
 8009ae4:	9801      	ldr	r0, [sp, #4]
 8009ae6:	6813      	ldr	r3, [r2, #0]
 8009ae8:	b933      	cbnz	r3, 8009af8 <_free_r+0x30>
 8009aea:	6063      	str	r3, [r4, #4]
 8009aec:	6014      	str	r4, [r2, #0]
 8009aee:	b003      	add	sp, #12
 8009af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af4:	f000 b8fe 	b.w	8009cf4 <__malloc_unlock>
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d908      	bls.n	8009b0e <_free_r+0x46>
 8009afc:	6825      	ldr	r5, [r4, #0]
 8009afe:	1961      	adds	r1, r4, r5
 8009b00:	428b      	cmp	r3, r1
 8009b02:	bf01      	itttt	eq
 8009b04:	6819      	ldreq	r1, [r3, #0]
 8009b06:	685b      	ldreq	r3, [r3, #4]
 8009b08:	1949      	addeq	r1, r1, r5
 8009b0a:	6021      	streq	r1, [r4, #0]
 8009b0c:	e7ed      	b.n	8009aea <_free_r+0x22>
 8009b0e:	461a      	mov	r2, r3
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	b10b      	cbz	r3, 8009b18 <_free_r+0x50>
 8009b14:	42a3      	cmp	r3, r4
 8009b16:	d9fa      	bls.n	8009b0e <_free_r+0x46>
 8009b18:	6811      	ldr	r1, [r2, #0]
 8009b1a:	1855      	adds	r5, r2, r1
 8009b1c:	42a5      	cmp	r5, r4
 8009b1e:	d10b      	bne.n	8009b38 <_free_r+0x70>
 8009b20:	6824      	ldr	r4, [r4, #0]
 8009b22:	4421      	add	r1, r4
 8009b24:	1854      	adds	r4, r2, r1
 8009b26:	42a3      	cmp	r3, r4
 8009b28:	6011      	str	r1, [r2, #0]
 8009b2a:	d1e0      	bne.n	8009aee <_free_r+0x26>
 8009b2c:	681c      	ldr	r4, [r3, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	6053      	str	r3, [r2, #4]
 8009b32:	4421      	add	r1, r4
 8009b34:	6011      	str	r1, [r2, #0]
 8009b36:	e7da      	b.n	8009aee <_free_r+0x26>
 8009b38:	d902      	bls.n	8009b40 <_free_r+0x78>
 8009b3a:	230c      	movs	r3, #12
 8009b3c:	6003      	str	r3, [r0, #0]
 8009b3e:	e7d6      	b.n	8009aee <_free_r+0x26>
 8009b40:	6825      	ldr	r5, [r4, #0]
 8009b42:	1961      	adds	r1, r4, r5
 8009b44:	428b      	cmp	r3, r1
 8009b46:	bf04      	itt	eq
 8009b48:	6819      	ldreq	r1, [r3, #0]
 8009b4a:	685b      	ldreq	r3, [r3, #4]
 8009b4c:	6063      	str	r3, [r4, #4]
 8009b4e:	bf04      	itt	eq
 8009b50:	1949      	addeq	r1, r1, r5
 8009b52:	6021      	streq	r1, [r4, #0]
 8009b54:	6054      	str	r4, [r2, #4]
 8009b56:	e7ca      	b.n	8009aee <_free_r+0x26>
 8009b58:	b003      	add	sp, #12
 8009b5a:	bd30      	pop	{r4, r5, pc}
 8009b5c:	20000510 	.word	0x20000510

08009b60 <sbrk_aligned>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	4e0e      	ldr	r6, [pc, #56]	; (8009b9c <sbrk_aligned+0x3c>)
 8009b64:	460c      	mov	r4, r1
 8009b66:	6831      	ldr	r1, [r6, #0]
 8009b68:	4605      	mov	r5, r0
 8009b6a:	b911      	cbnz	r1, 8009b72 <sbrk_aligned+0x12>
 8009b6c:	f000 f88c 	bl	8009c88 <_sbrk_r>
 8009b70:	6030      	str	r0, [r6, #0]
 8009b72:	4621      	mov	r1, r4
 8009b74:	4628      	mov	r0, r5
 8009b76:	f000 f887 	bl	8009c88 <_sbrk_r>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	d00a      	beq.n	8009b94 <sbrk_aligned+0x34>
 8009b7e:	1cc4      	adds	r4, r0, #3
 8009b80:	f024 0403 	bic.w	r4, r4, #3
 8009b84:	42a0      	cmp	r0, r4
 8009b86:	d007      	beq.n	8009b98 <sbrk_aligned+0x38>
 8009b88:	1a21      	subs	r1, r4, r0
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f000 f87c 	bl	8009c88 <_sbrk_r>
 8009b90:	3001      	adds	r0, #1
 8009b92:	d101      	bne.n	8009b98 <sbrk_aligned+0x38>
 8009b94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b98:	4620      	mov	r0, r4
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	20000514 	.word	0x20000514

08009ba0 <_malloc_r>:
 8009ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba4:	1ccd      	adds	r5, r1, #3
 8009ba6:	f025 0503 	bic.w	r5, r5, #3
 8009baa:	3508      	adds	r5, #8
 8009bac:	2d0c      	cmp	r5, #12
 8009bae:	bf38      	it	cc
 8009bb0:	250c      	movcc	r5, #12
 8009bb2:	2d00      	cmp	r5, #0
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	db01      	blt.n	8009bbc <_malloc_r+0x1c>
 8009bb8:	42a9      	cmp	r1, r5
 8009bba:	d905      	bls.n	8009bc8 <_malloc_r+0x28>
 8009bbc:	230c      	movs	r3, #12
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	2600      	movs	r6, #0
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc8:	4e2e      	ldr	r6, [pc, #184]	; (8009c84 <_malloc_r+0xe4>)
 8009bca:	f000 f88d 	bl	8009ce8 <__malloc_lock>
 8009bce:	6833      	ldr	r3, [r6, #0]
 8009bd0:	461c      	mov	r4, r3
 8009bd2:	bb34      	cbnz	r4, 8009c22 <_malloc_r+0x82>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	f7ff ffc2 	bl	8009b60 <sbrk_aligned>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	4604      	mov	r4, r0
 8009be0:	d14d      	bne.n	8009c7e <_malloc_r+0xde>
 8009be2:	6834      	ldr	r4, [r6, #0]
 8009be4:	4626      	mov	r6, r4
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	d140      	bne.n	8009c6c <_malloc_r+0xcc>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	4631      	mov	r1, r6
 8009bee:	4638      	mov	r0, r7
 8009bf0:	eb04 0803 	add.w	r8, r4, r3
 8009bf4:	f000 f848 	bl	8009c88 <_sbrk_r>
 8009bf8:	4580      	cmp	r8, r0
 8009bfa:	d13a      	bne.n	8009c72 <_malloc_r+0xd2>
 8009bfc:	6821      	ldr	r1, [r4, #0]
 8009bfe:	3503      	adds	r5, #3
 8009c00:	1a6d      	subs	r5, r5, r1
 8009c02:	f025 0503 	bic.w	r5, r5, #3
 8009c06:	3508      	adds	r5, #8
 8009c08:	2d0c      	cmp	r5, #12
 8009c0a:	bf38      	it	cc
 8009c0c:	250c      	movcc	r5, #12
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7ff ffa5 	bl	8009b60 <sbrk_aligned>
 8009c16:	3001      	adds	r0, #1
 8009c18:	d02b      	beq.n	8009c72 <_malloc_r+0xd2>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	442b      	add	r3, r5
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	e00e      	b.n	8009c40 <_malloc_r+0xa0>
 8009c22:	6822      	ldr	r2, [r4, #0]
 8009c24:	1b52      	subs	r2, r2, r5
 8009c26:	d41e      	bmi.n	8009c66 <_malloc_r+0xc6>
 8009c28:	2a0b      	cmp	r2, #11
 8009c2a:	d916      	bls.n	8009c5a <_malloc_r+0xba>
 8009c2c:	1961      	adds	r1, r4, r5
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	6025      	str	r5, [r4, #0]
 8009c32:	bf18      	it	ne
 8009c34:	6059      	strne	r1, [r3, #4]
 8009c36:	6863      	ldr	r3, [r4, #4]
 8009c38:	bf08      	it	eq
 8009c3a:	6031      	streq	r1, [r6, #0]
 8009c3c:	5162      	str	r2, [r4, r5]
 8009c3e:	604b      	str	r3, [r1, #4]
 8009c40:	4638      	mov	r0, r7
 8009c42:	f104 060b 	add.w	r6, r4, #11
 8009c46:	f000 f855 	bl	8009cf4 <__malloc_unlock>
 8009c4a:	f026 0607 	bic.w	r6, r6, #7
 8009c4e:	1d23      	adds	r3, r4, #4
 8009c50:	1af2      	subs	r2, r6, r3
 8009c52:	d0b6      	beq.n	8009bc2 <_malloc_r+0x22>
 8009c54:	1b9b      	subs	r3, r3, r6
 8009c56:	50a3      	str	r3, [r4, r2]
 8009c58:	e7b3      	b.n	8009bc2 <_malloc_r+0x22>
 8009c5a:	6862      	ldr	r2, [r4, #4]
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	bf0c      	ite	eq
 8009c60:	6032      	streq	r2, [r6, #0]
 8009c62:	605a      	strne	r2, [r3, #4]
 8009c64:	e7ec      	b.n	8009c40 <_malloc_r+0xa0>
 8009c66:	4623      	mov	r3, r4
 8009c68:	6864      	ldr	r4, [r4, #4]
 8009c6a:	e7b2      	b.n	8009bd2 <_malloc_r+0x32>
 8009c6c:	4634      	mov	r4, r6
 8009c6e:	6876      	ldr	r6, [r6, #4]
 8009c70:	e7b9      	b.n	8009be6 <_malloc_r+0x46>
 8009c72:	230c      	movs	r3, #12
 8009c74:	603b      	str	r3, [r7, #0]
 8009c76:	4638      	mov	r0, r7
 8009c78:	f000 f83c 	bl	8009cf4 <__malloc_unlock>
 8009c7c:	e7a1      	b.n	8009bc2 <_malloc_r+0x22>
 8009c7e:	6025      	str	r5, [r4, #0]
 8009c80:	e7de      	b.n	8009c40 <_malloc_r+0xa0>
 8009c82:	bf00      	nop
 8009c84:	20000510 	.word	0x20000510

08009c88 <_sbrk_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d06      	ldr	r5, [pc, #24]	; (8009ca4 <_sbrk_r+0x1c>)
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	602b      	str	r3, [r5, #0]
 8009c94:	f7f7 fab2 	bl	80011fc <_sbrk>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_sbrk_r+0x1a>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_sbrk_r+0x1a>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	20000518 	.word	0x20000518

08009ca8 <siprintf>:
 8009ca8:	b40e      	push	{r1, r2, r3}
 8009caa:	b500      	push	{lr}
 8009cac:	b09c      	sub	sp, #112	; 0x70
 8009cae:	ab1d      	add	r3, sp, #116	; 0x74
 8009cb0:	9002      	str	r0, [sp, #8]
 8009cb2:	9006      	str	r0, [sp, #24]
 8009cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cb8:	4809      	ldr	r0, [pc, #36]	; (8009ce0 <siprintf+0x38>)
 8009cba:	9107      	str	r1, [sp, #28]
 8009cbc:	9104      	str	r1, [sp, #16]
 8009cbe:	4909      	ldr	r1, [pc, #36]	; (8009ce4 <siprintf+0x3c>)
 8009cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc4:	9105      	str	r1, [sp, #20]
 8009cc6:	6800      	ldr	r0, [r0, #0]
 8009cc8:	9301      	str	r3, [sp, #4]
 8009cca:	a902      	add	r1, sp, #8
 8009ccc:	f000 f874 	bl	8009db8 <_svfiprintf_r>
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	b01c      	add	sp, #112	; 0x70
 8009cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cdc:	b003      	add	sp, #12
 8009cde:	4770      	bx	lr
 8009ce0:	20000034 	.word	0x20000034
 8009ce4:	ffff0208 	.word	0xffff0208

08009ce8 <__malloc_lock>:
 8009ce8:	4801      	ldr	r0, [pc, #4]	; (8009cf0 <__malloc_lock+0x8>)
 8009cea:	f000 baf9 	b.w	800a2e0 <__retarget_lock_acquire_recursive>
 8009cee:	bf00      	nop
 8009cf0:	2000051c 	.word	0x2000051c

08009cf4 <__malloc_unlock>:
 8009cf4:	4801      	ldr	r0, [pc, #4]	; (8009cfc <__malloc_unlock+0x8>)
 8009cf6:	f000 baf4 	b.w	800a2e2 <__retarget_lock_release_recursive>
 8009cfa:	bf00      	nop
 8009cfc:	2000051c 	.word	0x2000051c

08009d00 <__ssputs_r>:
 8009d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	688e      	ldr	r6, [r1, #8]
 8009d06:	429e      	cmp	r6, r3
 8009d08:	4682      	mov	sl, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	4690      	mov	r8, r2
 8009d0e:	461f      	mov	r7, r3
 8009d10:	d838      	bhi.n	8009d84 <__ssputs_r+0x84>
 8009d12:	898a      	ldrh	r2, [r1, #12]
 8009d14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d18:	d032      	beq.n	8009d80 <__ssputs_r+0x80>
 8009d1a:	6825      	ldr	r5, [r4, #0]
 8009d1c:	6909      	ldr	r1, [r1, #16]
 8009d1e:	eba5 0901 	sub.w	r9, r5, r1
 8009d22:	6965      	ldr	r5, [r4, #20]
 8009d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	444b      	add	r3, r9
 8009d30:	106d      	asrs	r5, r5, #1
 8009d32:	429d      	cmp	r5, r3
 8009d34:	bf38      	it	cc
 8009d36:	461d      	movcc	r5, r3
 8009d38:	0553      	lsls	r3, r2, #21
 8009d3a:	d531      	bpl.n	8009da0 <__ssputs_r+0xa0>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	f7ff ff2f 	bl	8009ba0 <_malloc_r>
 8009d42:	4606      	mov	r6, r0
 8009d44:	b950      	cbnz	r0, 8009d5c <__ssputs_r+0x5c>
 8009d46:	230c      	movs	r3, #12
 8009d48:	f8ca 3000 	str.w	r3, [sl]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5c:	6921      	ldr	r1, [r4, #16]
 8009d5e:	464a      	mov	r2, r9
 8009d60:	f000 fac0 	bl	800a2e4 <memcpy>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	6126      	str	r6, [r4, #16]
 8009d72:	6165      	str	r5, [r4, #20]
 8009d74:	444e      	add	r6, r9
 8009d76:	eba5 0509 	sub.w	r5, r5, r9
 8009d7a:	6026      	str	r6, [r4, #0]
 8009d7c:	60a5      	str	r5, [r4, #8]
 8009d7e:	463e      	mov	r6, r7
 8009d80:	42be      	cmp	r6, r7
 8009d82:	d900      	bls.n	8009d86 <__ssputs_r+0x86>
 8009d84:	463e      	mov	r6, r7
 8009d86:	6820      	ldr	r0, [r4, #0]
 8009d88:	4632      	mov	r2, r6
 8009d8a:	4641      	mov	r1, r8
 8009d8c:	f000 fab8 	bl	800a300 <memmove>
 8009d90:	68a3      	ldr	r3, [r4, #8]
 8009d92:	1b9b      	subs	r3, r3, r6
 8009d94:	60a3      	str	r3, [r4, #8]
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	4433      	add	r3, r6
 8009d9a:	6023      	str	r3, [r4, #0]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7db      	b.n	8009d58 <__ssputs_r+0x58>
 8009da0:	462a      	mov	r2, r5
 8009da2:	f000 fac7 	bl	800a334 <_realloc_r>
 8009da6:	4606      	mov	r6, r0
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d1e1      	bne.n	8009d70 <__ssputs_r+0x70>
 8009dac:	6921      	ldr	r1, [r4, #16]
 8009dae:	4650      	mov	r0, sl
 8009db0:	f7ff fe8a 	bl	8009ac8 <_free_r>
 8009db4:	e7c7      	b.n	8009d46 <__ssputs_r+0x46>
	...

08009db8 <_svfiprintf_r>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	4698      	mov	r8, r3
 8009dbe:	898b      	ldrh	r3, [r1, #12]
 8009dc0:	061b      	lsls	r3, r3, #24
 8009dc2:	b09d      	sub	sp, #116	; 0x74
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	4614      	mov	r4, r2
 8009dca:	d50e      	bpl.n	8009dea <_svfiprintf_r+0x32>
 8009dcc:	690b      	ldr	r3, [r1, #16]
 8009dce:	b963      	cbnz	r3, 8009dea <_svfiprintf_r+0x32>
 8009dd0:	2140      	movs	r1, #64	; 0x40
 8009dd2:	f7ff fee5 	bl	8009ba0 <_malloc_r>
 8009dd6:	6028      	str	r0, [r5, #0]
 8009dd8:	6128      	str	r0, [r5, #16]
 8009dda:	b920      	cbnz	r0, 8009de6 <_svfiprintf_r+0x2e>
 8009ddc:	230c      	movs	r3, #12
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009de4:	e0d1      	b.n	8009f8a <_svfiprintf_r+0x1d2>
 8009de6:	2340      	movs	r3, #64	; 0x40
 8009de8:	616b      	str	r3, [r5, #20]
 8009dea:	2300      	movs	r3, #0
 8009dec:	9309      	str	r3, [sp, #36]	; 0x24
 8009dee:	2320      	movs	r3, #32
 8009df0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df8:	2330      	movs	r3, #48	; 0x30
 8009dfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fa4 <_svfiprintf_r+0x1ec>
 8009dfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e02:	f04f 0901 	mov.w	r9, #1
 8009e06:	4623      	mov	r3, r4
 8009e08:	469a      	mov	sl, r3
 8009e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e0e:	b10a      	cbz	r2, 8009e14 <_svfiprintf_r+0x5c>
 8009e10:	2a25      	cmp	r2, #37	; 0x25
 8009e12:	d1f9      	bne.n	8009e08 <_svfiprintf_r+0x50>
 8009e14:	ebba 0b04 	subs.w	fp, sl, r4
 8009e18:	d00b      	beq.n	8009e32 <_svfiprintf_r+0x7a>
 8009e1a:	465b      	mov	r3, fp
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	4638      	mov	r0, r7
 8009e22:	f7ff ff6d 	bl	8009d00 <__ssputs_r>
 8009e26:	3001      	adds	r0, #1
 8009e28:	f000 80aa 	beq.w	8009f80 <_svfiprintf_r+0x1c8>
 8009e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e2e:	445a      	add	r2, fp
 8009e30:	9209      	str	r2, [sp, #36]	; 0x24
 8009e32:	f89a 3000 	ldrb.w	r3, [sl]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80a2 	beq.w	8009f80 <_svfiprintf_r+0x1c8>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e46:	f10a 0a01 	add.w	sl, sl, #1
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	9307      	str	r3, [sp, #28]
 8009e4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e52:	931a      	str	r3, [sp, #104]	; 0x68
 8009e54:	4654      	mov	r4, sl
 8009e56:	2205      	movs	r2, #5
 8009e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5c:	4851      	ldr	r0, [pc, #324]	; (8009fa4 <_svfiprintf_r+0x1ec>)
 8009e5e:	f7f6 f9c7 	bl	80001f0 <memchr>
 8009e62:	9a04      	ldr	r2, [sp, #16]
 8009e64:	b9d8      	cbnz	r0, 8009e9e <_svfiprintf_r+0xe6>
 8009e66:	06d0      	lsls	r0, r2, #27
 8009e68:	bf44      	itt	mi
 8009e6a:	2320      	movmi	r3, #32
 8009e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e70:	0711      	lsls	r1, r2, #28
 8009e72:	bf44      	itt	mi
 8009e74:	232b      	movmi	r3, #43	; 0x2b
 8009e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e80:	d015      	beq.n	8009eae <_svfiprintf_r+0xf6>
 8009e82:	9a07      	ldr	r2, [sp, #28]
 8009e84:	4654      	mov	r4, sl
 8009e86:	2000      	movs	r0, #0
 8009e88:	f04f 0c0a 	mov.w	ip, #10
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e92:	3b30      	subs	r3, #48	; 0x30
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d94e      	bls.n	8009f36 <_svfiprintf_r+0x17e>
 8009e98:	b1b0      	cbz	r0, 8009ec8 <_svfiprintf_r+0x110>
 8009e9a:	9207      	str	r2, [sp, #28]
 8009e9c:	e014      	b.n	8009ec8 <_svfiprintf_r+0x110>
 8009e9e:	eba0 0308 	sub.w	r3, r0, r8
 8009ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	46a2      	mov	sl, r4
 8009eac:	e7d2      	b.n	8009e54 <_svfiprintf_r+0x9c>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	1d19      	adds	r1, r3, #4
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	9103      	str	r1, [sp, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfbb      	ittet	lt
 8009eba:	425b      	neglt	r3, r3
 8009ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec0:	9307      	strge	r3, [sp, #28]
 8009ec2:	9307      	strlt	r3, [sp, #28]
 8009ec4:	bfb8      	it	lt
 8009ec6:	9204      	strlt	r2, [sp, #16]
 8009ec8:	7823      	ldrb	r3, [r4, #0]
 8009eca:	2b2e      	cmp	r3, #46	; 0x2e
 8009ecc:	d10c      	bne.n	8009ee8 <_svfiprintf_r+0x130>
 8009ece:	7863      	ldrb	r3, [r4, #1]
 8009ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed2:	d135      	bne.n	8009f40 <_svfiprintf_r+0x188>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	1d1a      	adds	r2, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	9203      	str	r2, [sp, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfb8      	it	lt
 8009ee0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ee4:	3402      	adds	r4, #2
 8009ee6:	9305      	str	r3, [sp, #20]
 8009ee8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fb4 <_svfiprintf_r+0x1fc>
 8009eec:	7821      	ldrb	r1, [r4, #0]
 8009eee:	2203      	movs	r2, #3
 8009ef0:	4650      	mov	r0, sl
 8009ef2:	f7f6 f97d 	bl	80001f0 <memchr>
 8009ef6:	b140      	cbz	r0, 8009f0a <_svfiprintf_r+0x152>
 8009ef8:	2340      	movs	r3, #64	; 0x40
 8009efa:	eba0 000a 	sub.w	r0, r0, sl
 8009efe:	fa03 f000 	lsl.w	r0, r3, r0
 8009f02:	9b04      	ldr	r3, [sp, #16]
 8009f04:	4303      	orrs	r3, r0
 8009f06:	3401      	adds	r4, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	4826      	ldr	r0, [pc, #152]	; (8009fa8 <_svfiprintf_r+0x1f0>)
 8009f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f14:	2206      	movs	r2, #6
 8009f16:	f7f6 f96b 	bl	80001f0 <memchr>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d038      	beq.n	8009f90 <_svfiprintf_r+0x1d8>
 8009f1e:	4b23      	ldr	r3, [pc, #140]	; (8009fac <_svfiprintf_r+0x1f4>)
 8009f20:	bb1b      	cbnz	r3, 8009f6a <_svfiprintf_r+0x1b2>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	3307      	adds	r3, #7
 8009f26:	f023 0307 	bic.w	r3, r3, #7
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	4433      	add	r3, r6
 8009f32:	9309      	str	r3, [sp, #36]	; 0x24
 8009f34:	e767      	b.n	8009e06 <_svfiprintf_r+0x4e>
 8009f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	e7a5      	b.n	8009e8c <_svfiprintf_r+0xd4>
 8009f40:	2300      	movs	r3, #0
 8009f42:	3401      	adds	r4, #1
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f04f 0c0a 	mov.w	ip, #10
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f52:	3a30      	subs	r2, #48	; 0x30
 8009f54:	2a09      	cmp	r2, #9
 8009f56:	d903      	bls.n	8009f60 <_svfiprintf_r+0x1a8>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0c5      	beq.n	8009ee8 <_svfiprintf_r+0x130>
 8009f5c:	9105      	str	r1, [sp, #20]
 8009f5e:	e7c3      	b.n	8009ee8 <_svfiprintf_r+0x130>
 8009f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f64:	4604      	mov	r4, r0
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7f0      	b.n	8009f4c <_svfiprintf_r+0x194>
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <_svfiprintf_r+0x1f8>)
 8009f72:	a904      	add	r1, sp, #16
 8009f74:	4638      	mov	r0, r7
 8009f76:	f3af 8000 	nop.w
 8009f7a:	1c42      	adds	r2, r0, #1
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	d1d6      	bne.n	8009f2e <_svfiprintf_r+0x176>
 8009f80:	89ab      	ldrh	r3, [r5, #12]
 8009f82:	065b      	lsls	r3, r3, #25
 8009f84:	f53f af2c 	bmi.w	8009de0 <_svfiprintf_r+0x28>
 8009f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f8a:	b01d      	add	sp, #116	; 0x74
 8009f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	462a      	mov	r2, r5
 8009f96:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <_svfiprintf_r+0x1f8>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f000 f87a 	bl	800a094 <_printf_i>
 8009fa0:	e7eb      	b.n	8009f7a <_svfiprintf_r+0x1c2>
 8009fa2:	bf00      	nop
 8009fa4:	08029756 	.word	0x08029756
 8009fa8:	08029760 	.word	0x08029760
 8009fac:	00000000 	.word	0x00000000
 8009fb0:	08009d01 	.word	0x08009d01
 8009fb4:	0802975c 	.word	0x0802975c

08009fb8 <_printf_common>:
 8009fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	4616      	mov	r6, r2
 8009fbe:	4699      	mov	r9, r3
 8009fc0:	688a      	ldr	r2, [r1, #8]
 8009fc2:	690b      	ldr	r3, [r1, #16]
 8009fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	bfb8      	it	lt
 8009fcc:	4613      	movlt	r3, r2
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b10a      	cbz	r2, 8009fde <_printf_common+0x26>
 8009fda:	3301      	adds	r3, #1
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	0699      	lsls	r1, r3, #26
 8009fe2:	bf42      	ittt	mi
 8009fe4:	6833      	ldrmi	r3, [r6, #0]
 8009fe6:	3302      	addmi	r3, #2
 8009fe8:	6033      	strmi	r3, [r6, #0]
 8009fea:	6825      	ldr	r5, [r4, #0]
 8009fec:	f015 0506 	ands.w	r5, r5, #6
 8009ff0:	d106      	bne.n	800a000 <_printf_common+0x48>
 8009ff2:	f104 0a19 	add.w	sl, r4, #25
 8009ff6:	68e3      	ldr	r3, [r4, #12]
 8009ff8:	6832      	ldr	r2, [r6, #0]
 8009ffa:	1a9b      	subs	r3, r3, r2
 8009ffc:	42ab      	cmp	r3, r5
 8009ffe:	dc26      	bgt.n	800a04e <_printf_common+0x96>
 800a000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a004:	1e13      	subs	r3, r2, #0
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	bf18      	it	ne
 800a00a:	2301      	movne	r3, #1
 800a00c:	0692      	lsls	r2, r2, #26
 800a00e:	d42b      	bmi.n	800a068 <_printf_common+0xb0>
 800a010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a014:	4649      	mov	r1, r9
 800a016:	4638      	mov	r0, r7
 800a018:	47c0      	blx	r8
 800a01a:	3001      	adds	r0, #1
 800a01c:	d01e      	beq.n	800a05c <_printf_common+0xa4>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	68e5      	ldr	r5, [r4, #12]
 800a022:	6832      	ldr	r2, [r6, #0]
 800a024:	f003 0306 	and.w	r3, r3, #6
 800a028:	2b04      	cmp	r3, #4
 800a02a:	bf08      	it	eq
 800a02c:	1aad      	subeq	r5, r5, r2
 800a02e:	68a3      	ldr	r3, [r4, #8]
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	bf0c      	ite	eq
 800a034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a038:	2500      	movne	r5, #0
 800a03a:	4293      	cmp	r3, r2
 800a03c:	bfc4      	itt	gt
 800a03e:	1a9b      	subgt	r3, r3, r2
 800a040:	18ed      	addgt	r5, r5, r3
 800a042:	2600      	movs	r6, #0
 800a044:	341a      	adds	r4, #26
 800a046:	42b5      	cmp	r5, r6
 800a048:	d11a      	bne.n	800a080 <_printf_common+0xc8>
 800a04a:	2000      	movs	r0, #0
 800a04c:	e008      	b.n	800a060 <_printf_common+0xa8>
 800a04e:	2301      	movs	r3, #1
 800a050:	4652      	mov	r2, sl
 800a052:	4649      	mov	r1, r9
 800a054:	4638      	mov	r0, r7
 800a056:	47c0      	blx	r8
 800a058:	3001      	adds	r0, #1
 800a05a:	d103      	bne.n	800a064 <_printf_common+0xac>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a064:	3501      	adds	r5, #1
 800a066:	e7c6      	b.n	8009ff6 <_printf_common+0x3e>
 800a068:	18e1      	adds	r1, r4, r3
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	2030      	movs	r0, #48	; 0x30
 800a06e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a072:	4422      	add	r2, r4
 800a074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a07c:	3302      	adds	r3, #2
 800a07e:	e7c7      	b.n	800a010 <_printf_common+0x58>
 800a080:	2301      	movs	r3, #1
 800a082:	4622      	mov	r2, r4
 800a084:	4649      	mov	r1, r9
 800a086:	4638      	mov	r0, r7
 800a088:	47c0      	blx	r8
 800a08a:	3001      	adds	r0, #1
 800a08c:	d0e6      	beq.n	800a05c <_printf_common+0xa4>
 800a08e:	3601      	adds	r6, #1
 800a090:	e7d9      	b.n	800a046 <_printf_common+0x8e>
	...

0800a094 <_printf_i>:
 800a094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	7e0f      	ldrb	r7, [r1, #24]
 800a09a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a09c:	2f78      	cmp	r7, #120	; 0x78
 800a09e:	4691      	mov	r9, r2
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	469a      	mov	sl, r3
 800a0a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0aa:	d807      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ac:	2f62      	cmp	r7, #98	; 0x62
 800a0ae:	d80a      	bhi.n	800a0c6 <_printf_i+0x32>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	f000 80d8 	beq.w	800a266 <_printf_i+0x1d2>
 800a0b6:	2f58      	cmp	r7, #88	; 0x58
 800a0b8:	f000 80a3 	beq.w	800a202 <_printf_i+0x16e>
 800a0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0c4:	e03a      	b.n	800a13c <_printf_i+0xa8>
 800a0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ca:	2b15      	cmp	r3, #21
 800a0cc:	d8f6      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ce:	a101      	add	r1, pc, #4	; (adr r1, 800a0d4 <_printf_i+0x40>)
 800a0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d4:	0800a12d 	.word	0x0800a12d
 800a0d8:	0800a141 	.word	0x0800a141
 800a0dc:	0800a0bd 	.word	0x0800a0bd
 800a0e0:	0800a0bd 	.word	0x0800a0bd
 800a0e4:	0800a0bd 	.word	0x0800a0bd
 800a0e8:	0800a0bd 	.word	0x0800a0bd
 800a0ec:	0800a141 	.word	0x0800a141
 800a0f0:	0800a0bd 	.word	0x0800a0bd
 800a0f4:	0800a0bd 	.word	0x0800a0bd
 800a0f8:	0800a0bd 	.word	0x0800a0bd
 800a0fc:	0800a0bd 	.word	0x0800a0bd
 800a100:	0800a24d 	.word	0x0800a24d
 800a104:	0800a171 	.word	0x0800a171
 800a108:	0800a22f 	.word	0x0800a22f
 800a10c:	0800a0bd 	.word	0x0800a0bd
 800a110:	0800a0bd 	.word	0x0800a0bd
 800a114:	0800a26f 	.word	0x0800a26f
 800a118:	0800a0bd 	.word	0x0800a0bd
 800a11c:	0800a171 	.word	0x0800a171
 800a120:	0800a0bd 	.word	0x0800a0bd
 800a124:	0800a0bd 	.word	0x0800a0bd
 800a128:	0800a237 	.word	0x0800a237
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	602a      	str	r2, [r5, #0]
 800a134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a13c:	2301      	movs	r3, #1
 800a13e:	e0a3      	b.n	800a288 <_printf_i+0x1f4>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	6829      	ldr	r1, [r5, #0]
 800a144:	0606      	lsls	r6, r0, #24
 800a146:	f101 0304 	add.w	r3, r1, #4
 800a14a:	d50a      	bpl.n	800a162 <_printf_i+0xce>
 800a14c:	680e      	ldr	r6, [r1, #0]
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	2e00      	cmp	r6, #0
 800a152:	da03      	bge.n	800a15c <_printf_i+0xc8>
 800a154:	232d      	movs	r3, #45	; 0x2d
 800a156:	4276      	negs	r6, r6
 800a158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a15c:	485e      	ldr	r0, [pc, #376]	; (800a2d8 <_printf_i+0x244>)
 800a15e:	230a      	movs	r3, #10
 800a160:	e019      	b.n	800a196 <_printf_i+0x102>
 800a162:	680e      	ldr	r6, [r1, #0]
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a16a:	bf18      	it	ne
 800a16c:	b236      	sxthne	r6, r6
 800a16e:	e7ef      	b.n	800a150 <_printf_i+0xbc>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	6820      	ldr	r0, [r4, #0]
 800a174:	1d19      	adds	r1, r3, #4
 800a176:	6029      	str	r1, [r5, #0]
 800a178:	0601      	lsls	r1, r0, #24
 800a17a:	d501      	bpl.n	800a180 <_printf_i+0xec>
 800a17c:	681e      	ldr	r6, [r3, #0]
 800a17e:	e002      	b.n	800a186 <_printf_i+0xf2>
 800a180:	0646      	lsls	r6, r0, #25
 800a182:	d5fb      	bpl.n	800a17c <_printf_i+0xe8>
 800a184:	881e      	ldrh	r6, [r3, #0]
 800a186:	4854      	ldr	r0, [pc, #336]	; (800a2d8 <_printf_i+0x244>)
 800a188:	2f6f      	cmp	r7, #111	; 0x6f
 800a18a:	bf0c      	ite	eq
 800a18c:	2308      	moveq	r3, #8
 800a18e:	230a      	movne	r3, #10
 800a190:	2100      	movs	r1, #0
 800a192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a196:	6865      	ldr	r5, [r4, #4]
 800a198:	60a5      	str	r5, [r4, #8]
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	bfa2      	ittt	ge
 800a19e:	6821      	ldrge	r1, [r4, #0]
 800a1a0:	f021 0104 	bicge.w	r1, r1, #4
 800a1a4:	6021      	strge	r1, [r4, #0]
 800a1a6:	b90e      	cbnz	r6, 800a1ac <_printf_i+0x118>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	d04d      	beq.n	800a248 <_printf_i+0x1b4>
 800a1ac:	4615      	mov	r5, r2
 800a1ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a1b6:	5dc7      	ldrb	r7, [r0, r7]
 800a1b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1bc:	4637      	mov	r7, r6
 800a1be:	42bb      	cmp	r3, r7
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	d9f4      	bls.n	800a1ae <_printf_i+0x11a>
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d10b      	bne.n	800a1e0 <_printf_i+0x14c>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	07de      	lsls	r6, r3, #31
 800a1cc:	d508      	bpl.n	800a1e0 <_printf_i+0x14c>
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	bfde      	ittt	le
 800a1d6:	2330      	movle	r3, #48	; 0x30
 800a1d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a1e0:	1b52      	subs	r2, r2, r5
 800a1e2:	6122      	str	r2, [r4, #16]
 800a1e4:	f8cd a000 	str.w	sl, [sp]
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	aa03      	add	r2, sp, #12
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7ff fee2 	bl	8009fb8 <_printf_common>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d14c      	bne.n	800a292 <_printf_i+0x1fe>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1fc:	b004      	add	sp, #16
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	4835      	ldr	r0, [pc, #212]	; (800a2d8 <_printf_i+0x244>)
 800a204:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a208:	6829      	ldr	r1, [r5, #0]
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a210:	6029      	str	r1, [r5, #0]
 800a212:	061d      	lsls	r5, r3, #24
 800a214:	d514      	bpl.n	800a240 <_printf_i+0x1ac>
 800a216:	07df      	lsls	r7, r3, #31
 800a218:	bf44      	itt	mi
 800a21a:	f043 0320 	orrmi.w	r3, r3, #32
 800a21e:	6023      	strmi	r3, [r4, #0]
 800a220:	b91e      	cbnz	r6, 800a22a <_printf_i+0x196>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	f023 0320 	bic.w	r3, r3, #32
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	2310      	movs	r3, #16
 800a22c:	e7b0      	b.n	800a190 <_printf_i+0xfc>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	f043 0320 	orr.w	r3, r3, #32
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	2378      	movs	r3, #120	; 0x78
 800a238:	4828      	ldr	r0, [pc, #160]	; (800a2dc <_printf_i+0x248>)
 800a23a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a23e:	e7e3      	b.n	800a208 <_printf_i+0x174>
 800a240:	0659      	lsls	r1, r3, #25
 800a242:	bf48      	it	mi
 800a244:	b2b6      	uxthmi	r6, r6
 800a246:	e7e6      	b.n	800a216 <_printf_i+0x182>
 800a248:	4615      	mov	r5, r2
 800a24a:	e7bb      	b.n	800a1c4 <_printf_i+0x130>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	6826      	ldr	r6, [r4, #0]
 800a250:	6961      	ldr	r1, [r4, #20]
 800a252:	1d18      	adds	r0, r3, #4
 800a254:	6028      	str	r0, [r5, #0]
 800a256:	0635      	lsls	r5, r6, #24
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	d501      	bpl.n	800a260 <_printf_i+0x1cc>
 800a25c:	6019      	str	r1, [r3, #0]
 800a25e:	e002      	b.n	800a266 <_printf_i+0x1d2>
 800a260:	0670      	lsls	r0, r6, #25
 800a262:	d5fb      	bpl.n	800a25c <_printf_i+0x1c8>
 800a264:	8019      	strh	r1, [r3, #0]
 800a266:	2300      	movs	r3, #0
 800a268:	6123      	str	r3, [r4, #16]
 800a26a:	4615      	mov	r5, r2
 800a26c:	e7ba      	b.n	800a1e4 <_printf_i+0x150>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	1d1a      	adds	r2, r3, #4
 800a272:	602a      	str	r2, [r5, #0]
 800a274:	681d      	ldr	r5, [r3, #0]
 800a276:	6862      	ldr	r2, [r4, #4]
 800a278:	2100      	movs	r1, #0
 800a27a:	4628      	mov	r0, r5
 800a27c:	f7f5 ffb8 	bl	80001f0 <memchr>
 800a280:	b108      	cbz	r0, 800a286 <_printf_i+0x1f2>
 800a282:	1b40      	subs	r0, r0, r5
 800a284:	6060      	str	r0, [r4, #4]
 800a286:	6863      	ldr	r3, [r4, #4]
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	2300      	movs	r3, #0
 800a28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a290:	e7a8      	b.n	800a1e4 <_printf_i+0x150>
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	462a      	mov	r2, r5
 800a296:	4649      	mov	r1, r9
 800a298:	4640      	mov	r0, r8
 800a29a:	47d0      	blx	sl
 800a29c:	3001      	adds	r0, #1
 800a29e:	d0ab      	beq.n	800a1f8 <_printf_i+0x164>
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	079b      	lsls	r3, r3, #30
 800a2a4:	d413      	bmi.n	800a2ce <_printf_i+0x23a>
 800a2a6:	68e0      	ldr	r0, [r4, #12]
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	4298      	cmp	r0, r3
 800a2ac:	bfb8      	it	lt
 800a2ae:	4618      	movlt	r0, r3
 800a2b0:	e7a4      	b.n	800a1fc <_printf_i+0x168>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	47d0      	blx	sl
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d09b      	beq.n	800a1f8 <_printf_i+0x164>
 800a2c0:	3501      	adds	r5, #1
 800a2c2:	68e3      	ldr	r3, [r4, #12]
 800a2c4:	9903      	ldr	r1, [sp, #12]
 800a2c6:	1a5b      	subs	r3, r3, r1
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	dcf2      	bgt.n	800a2b2 <_printf_i+0x21e>
 800a2cc:	e7eb      	b.n	800a2a6 <_printf_i+0x212>
 800a2ce:	2500      	movs	r5, #0
 800a2d0:	f104 0619 	add.w	r6, r4, #25
 800a2d4:	e7f5      	b.n	800a2c2 <_printf_i+0x22e>
 800a2d6:	bf00      	nop
 800a2d8:	08029767 	.word	0x08029767
 800a2dc:	08029778 	.word	0x08029778

0800a2e0 <__retarget_lock_acquire_recursive>:
 800a2e0:	4770      	bx	lr

0800a2e2 <__retarget_lock_release_recursive>:
 800a2e2:	4770      	bx	lr

0800a2e4 <memcpy>:
 800a2e4:	440a      	add	r2, r1
 800a2e6:	4291      	cmp	r1, r2
 800a2e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a2ec:	d100      	bne.n	800a2f0 <memcpy+0xc>
 800a2ee:	4770      	bx	lr
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2fa:	4291      	cmp	r1, r2
 800a2fc:	d1f9      	bne.n	800a2f2 <memcpy+0xe>
 800a2fe:	bd10      	pop	{r4, pc}

0800a300 <memmove>:
 800a300:	4288      	cmp	r0, r1
 800a302:	b510      	push	{r4, lr}
 800a304:	eb01 0402 	add.w	r4, r1, r2
 800a308:	d902      	bls.n	800a310 <memmove+0x10>
 800a30a:	4284      	cmp	r4, r0
 800a30c:	4623      	mov	r3, r4
 800a30e:	d807      	bhi.n	800a320 <memmove+0x20>
 800a310:	1e43      	subs	r3, r0, #1
 800a312:	42a1      	cmp	r1, r4
 800a314:	d008      	beq.n	800a328 <memmove+0x28>
 800a316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a31e:	e7f8      	b.n	800a312 <memmove+0x12>
 800a320:	4402      	add	r2, r0
 800a322:	4601      	mov	r1, r0
 800a324:	428a      	cmp	r2, r1
 800a326:	d100      	bne.n	800a32a <memmove+0x2a>
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a332:	e7f7      	b.n	800a324 <memmove+0x24>

0800a334 <_realloc_r>:
 800a334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a338:	4680      	mov	r8, r0
 800a33a:	4614      	mov	r4, r2
 800a33c:	460e      	mov	r6, r1
 800a33e:	b921      	cbnz	r1, 800a34a <_realloc_r+0x16>
 800a340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a344:	4611      	mov	r1, r2
 800a346:	f7ff bc2b 	b.w	8009ba0 <_malloc_r>
 800a34a:	b92a      	cbnz	r2, 800a358 <_realloc_r+0x24>
 800a34c:	f7ff fbbc 	bl	8009ac8 <_free_r>
 800a350:	4625      	mov	r5, r4
 800a352:	4628      	mov	r0, r5
 800a354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a358:	f000 f81b 	bl	800a392 <_malloc_usable_size_r>
 800a35c:	4284      	cmp	r4, r0
 800a35e:	4607      	mov	r7, r0
 800a360:	d802      	bhi.n	800a368 <_realloc_r+0x34>
 800a362:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a366:	d812      	bhi.n	800a38e <_realloc_r+0x5a>
 800a368:	4621      	mov	r1, r4
 800a36a:	4640      	mov	r0, r8
 800a36c:	f7ff fc18 	bl	8009ba0 <_malloc_r>
 800a370:	4605      	mov	r5, r0
 800a372:	2800      	cmp	r0, #0
 800a374:	d0ed      	beq.n	800a352 <_realloc_r+0x1e>
 800a376:	42bc      	cmp	r4, r7
 800a378:	4622      	mov	r2, r4
 800a37a:	4631      	mov	r1, r6
 800a37c:	bf28      	it	cs
 800a37e:	463a      	movcs	r2, r7
 800a380:	f7ff ffb0 	bl	800a2e4 <memcpy>
 800a384:	4631      	mov	r1, r6
 800a386:	4640      	mov	r0, r8
 800a388:	f7ff fb9e 	bl	8009ac8 <_free_r>
 800a38c:	e7e1      	b.n	800a352 <_realloc_r+0x1e>
 800a38e:	4635      	mov	r5, r6
 800a390:	e7df      	b.n	800a352 <_realloc_r+0x1e>

0800a392 <_malloc_usable_size_r>:
 800a392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a396:	1f18      	subs	r0, r3, #4
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bfbc      	itt	lt
 800a39c:	580b      	ldrlt	r3, [r1, r0]
 800a39e:	18c0      	addlt	r0, r0, r3
 800a3a0:	4770      	bx	lr
	...

0800a3a4 <_init>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr

0800a3b0 <_fini>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	bf00      	nop
 800a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b6:	bc08      	pop	{r3}
 800a3b8:	469e      	mov	lr, r3
 800a3ba:	4770      	bx	lr
