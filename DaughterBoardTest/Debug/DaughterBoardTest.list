
DaughterBoardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ea94  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026104  08026104  00040098  2**0
                  CONTENTS
  4 .ARM          00000008  08026104  08026104  00036104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802610c  0802610c  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802610c  0802610c  0003610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026110  08026110  00036110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08026114  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000098  080261ac  00040098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080261ac  00040354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c2d  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf3  00000000  00000000  00055cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  000588e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00059c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018845  00000000  00000000  0005af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e6a  00000000  00000000  00073755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009423f  00000000  00000000  000895bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d7fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f4  00000000  00000000  0011d850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007658 	.word	0x08007658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08007658 	.word	0x08007658

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
bool ParsedFlag = true;
MenuStage menuStage = sInitialAnim;
Input input;

int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  HAL_Init();
 8000598:	f001 fa96 	bl	8001ac8 <HAL_Init>
  SystemClock_Config();
 800059c:	f000 f964 	bl	8000868 <SystemClock_Config>
  MX_GPIO_Init();
 80005a0:	f000 fb3c 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 face 	bl	8000b44 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 faa0 	bl	8000aec <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005ac:	f000 f9c4 	bl	8000938 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005b0:	f000 f9f8 	bl	80009a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b4:	f000 fa4e 	bl	8000a54 <MX_TIM2_Init>

  LCD_init();
 80005b8:	f001 fa20 	bl	80019fc <LCD_init>
  LCD_Test();
  UG_FillScreen(0);
  UG_Update();
#endif

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005bc:	213c      	movs	r1, #60	; 0x3c
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x54>)
 80005c0:	f003 fbcd 	bl	8003d5e <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0x58>)
 80005c6:	f003 fa93 	bl	8003af0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  vTaskEncoder();
 80005ca:	f000 f817 	bl	80005fc <vTaskEncoder>
	  vTaskUI(&menuStage, &input);
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <main+0x5c>)
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x60>)
 80005d2:	f006 fb33 	bl	8006c3c <vTaskUI>
	  ParsedFlag = true;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <main+0x64>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
	  while(ParsedFlag);
 80005dc:	bf00      	nop
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <main+0x64>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1fb      	bne.n	80005de <main+0x4a>
	  vTaskEncoder();
 80005e6:	e7f0      	b.n	80005ca <main+0x36>
 80005e8:	2000016c 	.word	0x2000016c
 80005ec:	200001b4 	.word	0x200001b4
 80005f0:	200002a9 	.word	0x200002a9
 80005f4:	200002a8 	.word	0x200002a8
 80005f8:	20000000 	.word	0x20000000

080005fc <vTaskEncoder>:
  }
}

static void vTaskEncoder(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
	static uint16_t EncoderCount = TimerMiddleValue;
	static uint16_t EncoderPastCount = TimerMiddleValue;
	char Buffer[32] = "";
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

	EncoderGetVal(EncoderCount);
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <vTaskEncoder+0x74>)
 800061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061c:	089b      	lsrs	r3, r3, #2
 800061e:	b29b      	uxth	r3, r3
 8000620:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000624:	3b1f      	subs	r3, #31
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <vTaskEncoder+0x78>)
 800062a:	801a      	strh	r2, [r3, #0]
	if(EncoderCount != EncoderPastCount)
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <vTaskEncoder+0x78>)
 800062e:	881a      	ldrh	r2, [r3, #0]
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <vTaskEncoder+0x7c>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	d012      	beq.n	800065e <vTaskEncoder+0x62>
	{
		sprintf(Buffer, "Encoder: %d!", (int)EncoderCount);
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <vTaskEncoder+0x78>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	463b      	mov	r3, r7
 8000640:	490e      	ldr	r1, [pc, #56]	; (800067c <vTaskEncoder+0x80>)
 8000642:	4618      	mov	r0, r3
 8000644:	f006 fc8a 	bl	8006f5c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, strlen(Buffer), 100);
 8000648:	463b      	mov	r3, r7
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fdc8 	bl	80001e0 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	4639      	mov	r1, r7
 8000656:	2364      	movs	r3, #100	; 0x64
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <vTaskEncoder+0x84>)
 800065a:	f004 f814 	bl	8004686 <HAL_UART_Transmit>
	}
	EncoderPastCount = EncoderCount;
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <vTaskEncoder+0x78>)
 8000660:	881a      	ldrh	r2, [r3, #0]
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <vTaskEncoder+0x7c>)
 8000664:	801a      	strh	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010000 	.word	0x40010000
 8000674:	20000002 	.word	0x20000002
 8000678:	20000004 	.word	0x20000004
 800067c:	08007674 	.word	0x08007674
 8000680:	200001fc 	.word	0x200001fc

08000684 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Ok_IT_Pin)
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d110      	bne.n	80006b6 <HAL_GPIO_EXTI_Callback+0x32>
	{
		char *Buffer = "OK!";
 8000694:	4b51      	ldr	r3, [pc, #324]	; (80007dc <HAL_GPIO_EXTI_Callback+0x158>)
 8000696:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 3, 100);
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	2203      	movs	r2, #3
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	4850      	ldr	r0, [pc, #320]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80006a0:	f003 fff1 	bl	8004686 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a8:	484e      	ldr	r0, [pc, #312]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x160>)
 80006aa:	f002 f944 	bl	8002936 <HAL_GPIO_TogglePin>
		input = iOk;
 80006ae:	4b4e      	ldr	r3, [pc, #312]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x164>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
		char *Buffer = "EncoderSW!";
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 10, 100);
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		input = iEncoder;
	}
}
 80006b4:	e08e      	b.n	80007d4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Up_IT_Pin)
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d110      	bne.n	80006de <HAL_GPIO_EXTI_Callback+0x5a>
		char *Buffer = "Up!";
 80006bc:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <HAL_GPIO_EXTI_Callback+0x168>)
 80006be:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 3, 100);
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	2203      	movs	r2, #3
 80006c4:	68f9      	ldr	r1, [r7, #12]
 80006c6:	4846      	ldr	r0, [pc, #280]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80006c8:	f003 ffdd 	bl	8004686 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d0:	4844      	ldr	r0, [pc, #272]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x160>)
 80006d2:	f002 f930 	bl	8002936 <HAL_GPIO_TogglePin>
		input = iUp;
 80006d6:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x164>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	e07a      	b.n	80007d4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Down_IT_Pin)
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006e4:	d110      	bne.n	8000708 <HAL_GPIO_EXTI_Callback+0x84>
		char *Buffer = "Down!";
 80006e6:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 80006e8:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 5, 100);
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2205      	movs	r2, #5
 80006ee:	6939      	ldr	r1, [r7, #16]
 80006f0:	483b      	ldr	r0, [pc, #236]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80006f2:	f003 ffc8 	bl	8004686 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	483a      	ldr	r0, [pc, #232]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x160>)
 80006fc:	f002 f91b 	bl	8002936 <HAL_GPIO_TogglePin>
		input = iDown;
 8000700:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000702:	2202      	movs	r2, #2
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e065      	b.n	80007d4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Right_IT_Pin)
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	2b04      	cmp	r3, #4
 800070c:	d110      	bne.n	8000730 <HAL_GPIO_EXTI_Callback+0xac>
		char *Buffer = "Right!";
 800070e:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x170>)
 8000710:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 6, 100);
 8000712:	2364      	movs	r3, #100	; 0x64
 8000714:	2206      	movs	r2, #6
 8000716:	6979      	ldr	r1, [r7, #20]
 8000718:	4831      	ldr	r0, [pc, #196]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800071a:	f003 ffb4 	bl	8004686 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800071e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000722:	4830      	ldr	r0, [pc, #192]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x160>)
 8000724:	f002 f907 	bl	8002936 <HAL_GPIO_TogglePin>
		input = iRight;
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x164>)
 800072a:	2204      	movs	r2, #4
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	e051      	b.n	80007d4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Left_IT_Pin)
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d110      	bne.n	8000758 <HAL_GPIO_EXTI_Callback+0xd4>
		char *Buffer = "Left!";
 8000736:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000738:	61bb      	str	r3, [r7, #24]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 5, 100);
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	2205      	movs	r2, #5
 800073e:	69b9      	ldr	r1, [r7, #24]
 8000740:	4827      	ldr	r0, [pc, #156]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000742:	f003 ffa0 	bl	8004686 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	4826      	ldr	r0, [pc, #152]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x160>)
 800074c:	f002 f8f3 	bl	8002936 <HAL_GPIO_TogglePin>
		input = iLeft;
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000752:	2203      	movs	r2, #3
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	e03d      	b.n	80007d4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Menu_IT_Pin)
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800075e:	d110      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0xfe>
		char *Buffer = "Menu!";
 8000760:	4b26      	ldr	r3, [pc, #152]	; (80007fc <HAL_GPIO_EXTI_Callback+0x178>)
 8000762:	61fb      	str	r3, [r7, #28]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 5, 100);
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2205      	movs	r2, #5
 8000768:	69f9      	ldr	r1, [r7, #28]
 800076a:	481d      	ldr	r0, [pc, #116]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800076c:	f003 ff8b 	bl	8004686 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	481b      	ldr	r0, [pc, #108]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x160>)
 8000776:	f002 f8de 	bl	8002936 <HAL_GPIO_TogglePin>
		input = iMenu;
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x164>)
 800077c:	2205      	movs	r2, #5
 800077e:	701a      	strb	r2, [r3, #0]
}
 8000780:	e028      	b.n	80007d4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == Reset_IT_Pin)
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000788:	d110      	bne.n	80007ac <HAL_GPIO_EXTI_Callback+0x128>
		char *Buffer = "Reset!";
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <HAL_GPIO_EXTI_Callback+0x17c>)
 800078c:	623b      	str	r3, [r7, #32]
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 6, 100);
 800078e:	2364      	movs	r3, #100	; 0x64
 8000790:	2206      	movs	r2, #6
 8000792:	6a39      	ldr	r1, [r7, #32]
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000796:	f003 ff76 	bl	8004686 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x160>)
 80007a0:	f002 f8c9 	bl	8002936 <HAL_GPIO_TogglePin>
		input = iReset;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x164>)
 80007a6:	2207      	movs	r2, #7
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	e013      	b.n	80007d4 <HAL_GPIO_EXTI_Callback+0x150>
	else if(GPIO_Pin == EncoderSW_Pin)
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007b2:	d10f      	bne.n	80007d4 <HAL_GPIO_EXTI_Callback+0x150>
		char *Buffer = "EncoderSW!";
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <HAL_GPIO_EXTI_Callback+0x180>)
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_UART_Transmit(&huart1, (uint8_t*)Buffer, 10, 100);
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	220a      	movs	r2, #10
 80007bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80007c0:	f003 ff61 	bl	8004686 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x160>)
 80007ca:	f002 f8b4 	bl	8002936 <HAL_GPIO_TogglePin>
		input = iEncoder;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x164>)
 80007d0:	2206      	movs	r2, #6
 80007d2:	701a      	strb	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08007684 	.word	0x08007684
 80007e0:	200001fc 	.word	0x200001fc
 80007e4:	40020800 	.word	0x40020800
 80007e8:	200002a9 	.word	0x200002a9
 80007ec:	08007688 	.word	0x08007688
 80007f0:	0800768c 	.word	0x0800768c
 80007f4:	08007694 	.word	0x08007694
 80007f8:	0800769c 	.word	0x0800769c
 80007fc:	080076a4 	.word	0x080076a4
 8000800:	080076ac 	.word	0x080076ac
 8000804:	080076b4 	.word	0x080076b4

08000808 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	ParsedFlag = false;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000

08000828 <TransferComplete>:

static void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  transferCompleteDetected = 1;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <TransferComplete+0x1c>)
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	200002a4 	.word	0x200002a4

08000848 <TransferError>:

static void TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  transferErrorDetected = 1;
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <TransferError+0x1c>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	200002a0 	.word	0x200002a0

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	; 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f006 fa62 	bl	8006d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SystemClock_Config+0xc8>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <SystemClock_Config+0xc8>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <SystemClock_Config+0xc8>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SystemClock_Config+0xcc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a20      	ldr	r2, [pc, #128]	; (8000934 <SystemClock_Config+0xcc>)
 80008b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <SystemClock_Config+0xcc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80008d8:	230c      	movs	r3, #12
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008dc:	2360      	movs	r3, #96	; 0x60
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 f871 	bl	80029d4 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f8:	f000 fa6c 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2103      	movs	r1, #3
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fad3 	bl	8002ec4 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000924:	f000 fa56 	bl	8000dd4 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_SPI1_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI1_Init+0x64>)
 8000944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0x64>)
 8000958:	2202      	movs	r2, #2
 800095a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI1_Init+0x64>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0x64>)
 8000984:	220a      	movs	r2, #10
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_SPI1_Init+0x64>)
 800098a:	f002 fc7b 	bl	8003284 <HAL_SPI_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 fa1e 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000b4 	.word	0x200000b4
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2224      	movs	r2, #36	; 0x24
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f006 f9c4 	bl	8006d40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_TIM1_Init+0xa8>)
 80009c2:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <MX_TIM1_Init+0xac>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_TIM1_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_TIM1_Init+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_TIM1_Init+0xa8>)
 80009d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM1_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM1_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM1_Init+0xa8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80009fc:	230a      	movs	r3, #10
 80009fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a04:	2301      	movs	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_TIM1_Init+0xa8>)
 8000a18:	f003 f8fb 	bl	8003c12 <HAL_TIM_Encoder_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a22:	f000 f9d7 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_TIM1_Init+0xa8>)
 8000a34:	f003 fd58 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a3e:	f000 f9c9 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3730      	adds	r7, #48	; 0x30
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000016c 	.word	0x2000016c
 8000a50:	40010000 	.word	0x40010000

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a86:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a9a:	f002 ffd9 	bl	8003a50 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000aa4:	f000 f996 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000ab6:	f003 fae8 	bl	800408a <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ac0:	f000 f988 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000ad2:	f003 fd09 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f97a 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200001b4 	.word	0x200001b4

08000aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <MX_USART1_UART_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000af8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART1_UART_Init+0x50>)
 8000b28:	f003 fd60 	bl	80045ec <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000b32:	f000 f94f 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200001fc 	.word	0x200001fc
 8000b40:	40011000 	.word	0x40011000

08000b44 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <MX_DMA_Init+0xc4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a2d      	ldr	r2, [pc, #180]	; (8000c08 <MX_DMA_Init+0xc4>)
 8000b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_DMA_Init+0xc4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000b68:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <MX_DMA_Init+0xcc>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b86:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000bac:	2203      	movs	r2, #3
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000bbe:	f001 f94b 	bl	8001e58 <HAL_DMA_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8000bc8:	f000 f904 	bl	8000dd4 <Error_Handler>
  }

  /* USER CODE BEGIN DMA_Init */
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <MX_DMA_Init+0xd0>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	480e      	ldr	r0, [pc, #56]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000bd2:	f001 fbd1 	bl	8002378 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <MX_DMA_Init+0xd4>)
 8000bd8:	2104      	movs	r1, #4
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_DMA_Init+0xc8>)
 8000bdc:	f001 fbcc 	bl	8002378 <HAL_DMA_RegisterCallback>
  /* USER CODE END DMA_Init */

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2038      	movs	r0, #56	; 0x38
 8000be6:	f001 f900 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bea:	2038      	movs	r0, #56	; 0x38
 8000bec:	f001 f919 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	203a      	movs	r0, #58	; 0x3a
 8000bf6:	f001 f8f8 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bfa:	203a      	movs	r0, #58	; 0x3a
 8000bfc:	f001 f911 	bl	8001e22 <HAL_NVIC_EnableIRQ>

}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	20000240 	.word	0x20000240
 8000c10:	40026410 	.word	0x40026410
 8000c14:	08000829 	.word	0x08000829
 8000c18:	08000849 	.word	0x08000849

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b63      	ldr	r3, [pc, #396]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a62      	ldr	r2, [pc, #392]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b60      	ldr	r3, [pc, #384]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b5c      	ldr	r3, [pc, #368]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a5b      	ldr	r2, [pc, #364]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b59      	ldr	r3, [pc, #356]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b55      	ldr	r3, [pc, #340]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b52      	ldr	r3, [pc, #328]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a4d      	ldr	r2, [pc, #308]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b4b      	ldr	r3, [pc, #300]	; (8000dc4 <MX_GPIO_Init+0x1a8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca8:	4847      	ldr	r0, [pc, #284]	; (8000dc8 <MX_GPIO_Init+0x1ac>)
 8000caa:	f001 fe2b 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2150      	movs	r1, #80	; 0x50
 8000cb2:	4846      	ldr	r0, [pc, #280]	; (8000dcc <MX_GPIO_Init+0x1b0>)
 8000cb4:	f001 fe26 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2103      	movs	r1, #3
 8000cbc:	4844      	ldr	r0, [pc, #272]	; (8000dd0 <MX_GPIO_Init+0x1b4>)
 8000cbe:	f001 fe21 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	483b      	ldr	r0, [pc, #236]	; (8000dc8 <MX_GPIO_Init+0x1ac>)
 8000cdc:	f001 fc8e 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_IT_Pin */
  GPIO_InitStruct.Pin = Down_IT_Pin;
 8000ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Down_IT_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4834      	ldr	r0, [pc, #208]	; (8000dc8 <MX_GPIO_Init+0x1ac>)
 8000cf8:	f001 fc80 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IT_Pin Ok_IT_Pin Right_IT_Pin Up_IT_Pin
                           EncoderSW_Pin Menu_IT_Pin */
  GPIO_InitStruct.Pin = Left_IT_Pin|Ok_IT_Pin|Right_IT_Pin|Up_IT_Pin
 8000cfc:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000d00:	617b      	str	r3, [r7, #20]
                          |EncoderSW_Pin|Menu_IT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	482e      	ldr	r0, [pc, #184]	; (8000dcc <MX_GPIO_Init+0x1b0>)
 8000d14:	f001 fc72 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8000d18:	2350      	movs	r3, #80	; 0x50
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4827      	ldr	r0, [pc, #156]	; (8000dcc <MX_GPIO_Init+0x1b0>)
 8000d30:	f001 fc64 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_BLK_Pin;
 8000d34:	2303      	movs	r3, #3
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0x1b4>)
 8000d4c:	f001 fc56 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_IT_Pin */
  GPIO_InitStruct.Pin = Reset_IT_Pin;
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reset_IT_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <MX_GPIO_Init+0x1b4>)
 8000d68:	f001 fc48 	bl	80025fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2006      	movs	r0, #6
 8000d72:	f001 f83a 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d76:	2006      	movs	r0, #6
 8000d78:	f001 f853 	bl	8001e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2007      	movs	r0, #7
 8000d82:	f001 f832 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d86:	2007      	movs	r0, #7
 8000d88:	f001 f84b 	bl	8001e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2008      	movs	r0, #8
 8000d92:	f001 f82a 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d96:	2008      	movs	r0, #8
 8000d98:	f001 f843 	bl	8001e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2009      	movs	r0, #9
 8000da2:	f001 f822 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000da6:	2009      	movs	r0, #9
 8000da8:	f001 f83b 	bl	8001e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2028      	movs	r0, #40	; 0x28
 8000db2:	f001 f81a 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db6:	2028      	movs	r0, #40	; 0x28
 8000db8:	f001 f833 	bl	8001e22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dda:	b672      	cpsid	i
}
 8000ddc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <Error_Handler+0x2c>)
 8000de4:	f001 fda7 	bl	8002936 <HAL_GPIO_TogglePin>
	  for(uint32_t i = 0; i < 500000; i++);
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	e002      	b.n	8000df4 <Error_Handler+0x20>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3301      	adds	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a03      	ldr	r2, [pc, #12]	; (8000e04 <Error_Handler+0x30>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d9f8      	bls.n	8000dee <Error_Handler+0x1a>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dfc:	e7ef      	b.n	8000dde <Error_Handler+0xa>
 8000dfe:	bf00      	nop
 8000e00:	40020800 	.word	0x40020800
 8000e04:	0007a11f 	.word	0x0007a11f

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <HAL_SPI_MspInit+0xe0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d15a      	bne.n	8000f30 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_SPI_MspInit+0xe4>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <HAL_SPI_MspInit+0xe4>)
 8000e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <HAL_SPI_MspInit+0xe4>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <HAL_SPI_MspInit+0xe4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a27      	ldr	r2, [pc, #156]	; (8000f3c <HAL_SPI_MspInit+0xe4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <HAL_SPI_MspInit+0xe4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDO_Pin;
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481c      	ldr	r0, [pc, #112]	; (8000f40 <HAL_SPI_MspInit+0xe8>)
 8000ece:	f001 fb95 	bl	80025fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000ed4:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <HAL_SPI_MspInit+0xf0>)
 8000ed6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000eda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ede:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000ee2:	2240      	movs	r2, #64	; 0x40
 8000ee4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000f08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f0c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000f16:	f000 ff9f 	bl	8001e58 <HAL_DMA_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000f20:	f7ff ff58 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000f28:	649a      	str	r2, [r3, #72]	; 0x48
 8000f2a:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_SPI_MspInit+0xec>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	2000010c 	.word	0x2000010c
 8000f48:	40026440 	.word	0x40026440

08000f4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12c      	bne.n	8000fc8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8000fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000fc4:	f001 fb1a 	bl	80025fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fec:	d115      	bne.n	800101a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_TIM_Base_MspInit+0x48>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_TIM_Base_MspInit+0x48>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_TIM_Base_MspInit+0x48>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	201c      	movs	r0, #28
 8001010:	f000 feeb 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001014:	201c      	movs	r0, #28
 8001016:	f000 ff04 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <HAL_UART_MspInit+0xc0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d14a      	bne.n	80010e0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_UART_MspInit+0xc4>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_UART_MspInit+0xc4>)
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_UART_MspInit+0xc4>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_UART_MspInit+0xc4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <HAL_UART_MspInit+0xc4>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_UART_MspInit+0xc4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_UART_MspInit+0xc4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a18      	ldr	r2, [pc, #96]	; (80010ec <HAL_UART_MspInit+0xc4>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_UART_MspInit+0xc4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800109e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b0:	2307      	movs	r3, #7
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <HAL_UART_MspInit+0xc8>)
 80010bc:	f001 fa9e 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010c0:	2308      	movs	r3, #8
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d0:	2307      	movs	r3, #7
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <HAL_UART_MspInit+0xcc>)
 80010dc:	f001 fa8e 	bl	80025fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40011000 	.word	0x40011000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8001102:	f7ff fe67 	bl	8000dd4 <Error_Handler>
 8001106:	e7fc      	b.n	8001102 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 fd10 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_IT_Pin);
 8001154:	2001      	movs	r0, #1
 8001156:	f001 fc09 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}

0800115e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ok_IT_Pin);
 8001162:	2002      	movs	r0, #2
 8001164:	f001 fc02 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_IT_Pin);
 8001170:	2004      	movs	r0, #4
 8001172:	f001 fbfb 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_IT_Pin);
 800117e:	2008      	movs	r0, #8
 8001180:	f001 fbf4 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM2_IRQHandler+0x10>)
 800118e:	f002 fe74 	bl	8003e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001b4 	.word	0x200001b4

0800119c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderSW_Pin);
 80011a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011a4:	f001 fbe2 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Menu_IT_Pin);
 80011a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011ac:	f001 fbde 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Reset_IT_Pin);
 80011b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011b4:	f001 fbda 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Down_IT_Pin);
 80011b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011bc:	f001 fbd6 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <DMA2_Stream0_IRQHandler+0x10>)
 80011ca:	f000 ff4b 	bl	8002064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000240 	.word	0x20000240

080011d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <DMA2_Stream2_IRQHandler+0x10>)
 80011de:	f000 ff41 	bl	8002064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000010c 	.word	0x2000010c

080011ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <_sbrk+0x5c>)
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <_sbrk+0x60>)
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <_sbrk+0x64>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <_sbrk+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800121c:	f005 fd5e 	bl	8006cdc <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	220c      	movs	r2, #12
 8001224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122a:	e009      	b.n	8001240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <_sbrk+0x64>)
 800123c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20020000 	.word	0x20020000
 800124c:	00000400 	.word	0x00000400
 8001250:	200002ac 	.word	0x200002ac
 8001254:	20000358 	.word	0x20000358

08001258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <SystemInit+0x20>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <SystemInit+0x20>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001298:	4c0b      	ldr	r4, [pc, #44]	; (80012c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a6:	f7ff ffd7 	bl	8001258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f005 fd1d 	bl	8006ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff f971 	bl	8000594 <main>
  bx  lr    
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80012c0:	08026114 	.word	0x08026114
  ldr r2, =_sbss
 80012c4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80012c8:	20000354 	.word	0x20000354

080012cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>
	...

080012d0 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <setSPI_Size+0x84>)
 80012dc:	f993 3000 	ldrsb.w	r3, [r3]
 80012e0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d02e      	beq.n	8001346 <setSPI_Size+0x76>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <setSPI_Size+0x88>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <setSPI_Size+0x88>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012f6:	601a      	str	r2, [r3, #0]

    config.spi_sz=size;
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <setSPI_Size+0x84>)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10c      	bne.n	8001320 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <setSPI_Size+0x88>)
 8001308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800130c:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <setSPI_Size+0x88>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <setSPI_Size+0x88>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	e00a      	b.n	8001336 <setSPI_Size+0x66>
    }
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <setSPI_Size+0x88>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <setSPI_Size+0x88>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <setSPI_Size+0x88>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001334:	601a      	str	r2, [r3, #0]
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <setSPI_Size+0x88>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <setSPI_Size+0x88>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001344:	601a      	str	r2, [r3, #0]
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2000000c 	.word	0x2000000c
 8001358:	200000b4 	.word	0x200000b4

0800135c <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	460a      	mov	r2, r1
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	4613      	mov	r3, r2
 800136a:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 800136c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ffad 	bl	80012d0 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <setDMAMemMode+0x120>)
 8001378:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800137c:	461a      	mov	r2, r3
 800137e:	79bb      	ldrb	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	d106      	bne.n	8001392 <setDMAMemMode+0x36>
 8001384:	4b3d      	ldr	r3, [pc, #244]	; (800147c <setDMAMemMode+0x120>)
 8001386:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800138a:	461a      	mov	r2, r3
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	429a      	cmp	r2, r3
 8001390:	d06f      	beq.n	8001472 <setDMAMemMode+0x116>
    config.dma_sz =size;
 8001392:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001396:	4b39      	ldr	r3, [pc, #228]	; (800147c <setDMAMemMode+0x120>)
 8001398:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800139a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <setDMAMemMode+0x120>)
 80013a0:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <setDMAMemMode+0x124>)
 80013a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <setDMAMemMode+0x124>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 80013b6:	bf00      	nop
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <setDMAMemMode+0x124>)
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f7      	bne.n	80013b8 <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10f      	bne.n	80013ee <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <setDMAMemMode+0x124>)
 80013d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <setDMAMemMode+0x124>)
 80013da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <setDMAMemMode+0x124>)
 80013e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e00d      	b.n	800140a <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <setDMAMemMode+0x124>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <setDMAMemMode+0x124>)
 80013f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <setDMAMemMode+0x124>)
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001408:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d116      	bne.n	800143e <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <setDMAMemMode+0x124>)
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001418:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <setDMAMemMode+0x124>)
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001422:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <setDMAMemMode+0x124>)
 8001426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <setDMAMemMode+0x124>)
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e011      	b.n	8001462 <setDMAMemMode+0x106>
                                                   (1<<DMA_CCR_PSIZE_Pos | 1<<DMA_CCR_MSIZE_Pos);
#endif

    }
    else{
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <setDMAMemMode+0x124>)
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <setDMAMemMode+0x124>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <setDMAMemMode+0x124>)
 8001450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <setDMAMemMode+0x124>)
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001460:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <setDMAMemMode+0x124>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <setDMAMemMode+0x124>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001470:	601a      	str	r2, [r3, #0]
  }
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000000c 	.word	0x2000000c
 8001480:	200000b4 	.word	0x200000b4

08001484 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ff1d 	bl	80012d0 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <LCD_WriteCommand+0x5c>)
 8001498:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800149c:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <LCD_WriteCommand+0x60>)
 80014a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a4:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014aa:	2201      	movs	r2, #1
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <LCD_WriteCommand+0x64>)
 80014b0:	f001 ff71 	bl	8003396 <HAL_SPI_Transmit>
  if(argc){
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <LCD_WriteCommand+0x4e>
    LCD_PIN(LCD_DC,SET);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LCD_WriteCommand+0x5c>)
 80014bc:	2210      	movs	r2, #16
 80014be:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <LCD_WriteCommand+0x64>)
 80014ce:	f001 ff62 	bl	8003396 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <LCD_WriteCommand+0x60>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	619a      	str	r2, [r3, #24]
#endif
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020400 	.word	0x40020400
 80014e8:	200000b4 	.word	0x200000b4

080014ec <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 80014f6:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <LCD_WriteData+0xc4>)
 80014f8:	2210      	movs	r2, #16
 80014fa:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <LCD_WriteData+0xc8>)
 80014fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001502:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8001504:	e049      	b.n	800159a <LCD_WriteData+0xae>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150c:	4293      	cmp	r3, r2
 800150e:	bf28      	it	cs
 8001510:	4613      	movcs	r3, r2
 8001512:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d924      	bls.n	8001564 <LCD_WriteData+0x78>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	461a      	mov	r2, r3
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4825      	ldr	r0, [pc, #148]	; (80015b8 <LCD_WriteData+0xcc>)
 8001522:	f002 f875 	bl	8003610 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!= HAL_DMA_STATE_READY);
 8001526:	bf00      	nop
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <LCD_WriteData+0xcc>)
 800152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152c:	4618      	mov	r0, r3
 800152e:	f000 ff77 	bl	8002420 <HAL_DMA_GetState>
 8001532:	4603      	mov	r3, r0
 8001534:	2b01      	cmp	r3, #1
 8001536:	d1f7      	bne.n	8001528 <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <LCD_WriteData+0xd0>)
 800153a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d127      	bne.n	8001592 <LCD_WriteData+0xa6>
        if(config.dma_sz==mode_16bit)
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <LCD_WriteData+0xd0>)
 8001544:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d104      	bne.n	8001556 <LCD_WriteData+0x6a>
          buff += chunk_size;
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	e01d      	b.n	8001592 <LCD_WriteData+0xa6>
        else
          buff += chunk_size*2;
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	e016      	b.n	8001592 <LCD_WriteData+0xa6>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001564:	89fa      	ldrh	r2, [r7, #14]
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4812      	ldr	r0, [pc, #72]	; (80015b8 <LCD_WriteData+0xcc>)
 800156e:	f001 ff12 	bl	8003396 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <LCD_WriteData+0xd0>)
 8001574:	f993 3000 	ldrsb.w	r3, [r3]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d104      	bne.n	8001586 <LCD_WriteData+0x9a>
        buff += chunk_size;
 800157c:	89fb      	ldrh	r3, [r7, #14]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	e005      	b.n	8001592 <LCD_WriteData+0xa6>
      else
        buff += chunk_size*2;
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	607b      	str	r3, [r7, #4]

    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1b2      	bne.n	8001506 <LCD_WriteData+0x1a>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <LCD_WriteData+0xc8>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	619a      	str	r2, [r3, #24]
#endif
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	200000b4 	.word	0x200000b4
 80015bc:	2000000c 	.word	0x2000000c

080015c0 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b08b      	sub	sp, #44	; 0x2c
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	80fb      	strh	r3, [r7, #6]
 80015d2:	4603      	mov	r3, r0
 80015d4:	80bb      	strh	r3, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	807b      	strh	r3, [r7, #2]
 80015da:	4613      	mov	r3, r2
 80015dc:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	847b      	strh	r3, [r7, #34]	; 0x22
 80015ea:	883b      	ldrh	r3, [r7, #0]
 80015ec:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80015ee:	232a      	movs	r3, #42	; 0x2a
 80015f0:	763b      	strb	r3, [r7, #24]
 80015f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015f6:	121b      	asrs	r3, r3, #8
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	767b      	strb	r3, [r7, #25]
 80015fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001600:	b2db      	uxtb	r3, r3
 8001602:	76bb      	strb	r3, [r7, #26]
 8001604:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001608:	121b      	asrs	r3, r3, #8
 800160a:	b21b      	sxth	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	76fb      	strb	r3, [r7, #27]
 8001610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001612:	b2db      	uxtb	r3, r3
 8001614:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	2104      	movs	r1, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff31 	bl	8001484 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001622:	232b      	movs	r3, #43	; 0x2b
 8001624:	743b      	strb	r3, [r7, #16]
 8001626:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800162a:	121b      	asrs	r3, r3, #8
 800162c:	b21b      	sxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	747b      	strb	r3, [r7, #17]
 8001632:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001634:	b2db      	uxtb	r3, r3
 8001636:	74bb      	strb	r3, [r7, #18]
 8001638:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800163c:	121b      	asrs	r3, r3, #8
 800163e:	b21b      	sxth	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	74fb      	strb	r3, [r7, #19]
 8001644:	8c3b      	ldrh	r3, [r7, #32]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	2104      	movs	r1, #4
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff17 	bl	8001484 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001656:	232c      	movs	r3, #44	; 0x2c
 8001658:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff0f 	bl	8001484 <LCD_WriteCommand>
  }
}
 8001666:	bf00      	nop
 8001668:	372c      	adds	r7, #44	; 0x2c
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
	...

08001670 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	460b      	mov	r3, r1
 800167c:	80bb      	strh	r3, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db30      	blt.n	80016ec <LCD_DrawPixel+0x7c>
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	2bef      	cmp	r3, #239	; 0xef
 8001690:	dc2c      	bgt.n	80016ec <LCD_DrawPixel+0x7c>
 8001692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db28      	blt.n	80016ec <LCD_DrawPixel+0x7c>
     (y < 0) || (y > LCD_HEIGHT-1))
 800169a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800169e:	2bef      	cmp	r3, #239	; 0xef
 80016a0:	dc24      	bgt.n	80016ec <LCD_DrawPixel+0x7c>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	733b      	strb	r3, [r7, #12]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80016b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016c2:	f7ff ff7d 	bl	80015c0 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <LCD_DrawPixel+0x84>)
 80016c8:	2210      	movs	r2, #16
 80016ca:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <LCD_DrawPixel+0x88>)
 80016ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d2:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80016d4:	f107 010c 	add.w	r1, r7, #12
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016dc:	2202      	movs	r2, #2
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <LCD_DrawPixel+0x8c>)
 80016e0:	f001 fe59 	bl	8003396 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <LCD_DrawPixel+0x88>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	619a      	str	r2, [r3, #24]
 80016ea:	e000      	b.n	80016ee <LCD_DrawPixel+0x7e>
    return;
 80016ec:	bf00      	nop
#endif
}
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400
 80016fc:	200000b4 	.word	0x200000b4

08001700 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001700:	b580      	push	{r7, lr}
 8001702:	b0a4      	sub	sp, #144	; 0x90
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d905      	bls.n	800171e <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8001712:	1cbb      	adds	r3, r7, #2
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fee8 	bl	80014ec <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 800171c:	e02f      	b.n	800177e <LCD_FillPixels+0x7e>
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 800171e:	2300      	movs	r3, #0
 8001720:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001724:	e00c      	b.n	8001740 <LCD_FillPixels+0x40>
      fill[t]=color;
 8001726:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	3390      	adds	r3, #144	; 0x90
 8001730:	443b      	add	r3, r7
 8001732:	f823 2c84 	strh.w	r2, [r3, #-132]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 8001736:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800173a:	3301      	adds	r3, #1
 800173c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001740:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b40      	cmp	r3, #64	; 0x40
 8001748:	bf28      	it	cs
 800174a:	2340      	movcs	r3, #64	; 0x40
 800174c:	429a      	cmp	r2, r3
 800174e:	d3ea      	bcc.n	8001726 <LCD_FillPixels+0x26>
    while(pixels){                                                                    // Send 64 pixel blocks
 8001750:	e012      	b.n	8001778 <LCD_FillPixels+0x78>
      uint8_t sz = (pixels<64 ? pixels : 64);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b40      	cmp	r3, #64	; 0x40
 8001756:	bf28      	it	cs
 8001758:	2340      	movcs	r3, #64	; 0x40
 800175a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
      LCD_WriteData((uint8_t*)fill, sz);
 800175e:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff febf 	bl	80014ec <LCD_WriteData>
      pixels-=sz;
 800176e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                    // Send 64 pixel blocks
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1e9      	bne.n	8001752 <LCD_FillPixels+0x52>
}
 800177e:	bf00      	nop
 8001780:	3790      	adds	r7, #144	; 0x90
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	80fb      	strh	r3, [r7, #6]
 800179a:	4603      	mov	r3, r0
 800179c:	80bb      	strh	r3, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	807b      	strh	r3, [r7, #2]
 80017a2:	4613      	mov	r3, r2
 80017a4:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ae:	d105      	bne.n	80017bc <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff fdd2 	bl	800135c <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e011      	b.n	80017e0 <LCD_FillArea+0x58>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80017bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017c8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017cc:	f7ff fef8 	bl	80015c0 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit); //setDMAMemMode(mem_fixed, mode_16bit);
 80017d0:	2101      	movs	r1, #1
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff fdc2 	bl	800135c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <LCD_FillArea+0x60>)
 80017da:	2210      	movs	r2, #16
 80017dc:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 80017de:	4b03      	ldr	r3, [pc, #12]	; (80017ec <LCD_FillArea+0x64>)
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	40020000 	.word	0x40020000
 80017ec:	08001701 	.word	0x08001701

080017f0 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	4603      	mov	r3, r0
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	3301      	adds	r3, #1
 8001816:	4619      	mov	r1, r3
 8001818:	883a      	ldrh	r2, [r7, #0]
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	3301      	adds	r3, #1
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001826:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800182a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800182e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001832:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001836:	f7ff fec3 	bl	80015c0 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 800183a:	2101      	movs	r1, #1
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff fd8d 	bl	800135c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8001842:	8c3b      	ldrh	r3, [r7, #32]
 8001844:	4619      	mov	r1, r3
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff ff5a 	bl	8001700 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); //setDMAMemMode(mem_increase, mode_16bit);
 800184c:	2100      	movs	r1, #0
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff fd84 	bl	800135c <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}

0800185e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800185e:	b590      	push	{r4, r7, lr}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	603a      	str	r2, [r7, #0]
 8001868:	80fb      	strh	r3, [r7, #6]
 800186a:	460b      	mov	r3, r1
 800186c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	88db      	ldrh	r3, [r3, #6]
 8001878:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	2bef      	cmp	r3, #239	; 0xef
 800187e:	d837      	bhi.n	80018f0 <LCD_DrawImage+0x92>
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	2bef      	cmp	r3, #239	; 0xef
 8001884:	d834      	bhi.n	80018f0 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001886:	88fa      	ldrh	r2, [r7, #6]
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	4413      	add	r3, r2
 800188c:	2bf0      	cmp	r3, #240	; 0xf0
 800188e:	dc31      	bgt.n	80018f4 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001890:	88ba      	ldrh	r2, [r7, #4]
 8001892:	89bb      	ldrh	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	2bf0      	cmp	r3, #240	; 0xf0
 8001898:	dc2e      	bgt.n	80018f8 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	7a1b      	ldrb	r3, [r3, #8]
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d12c      	bne.n	80018fc <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80018a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018a6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018aa:	88fa      	ldrh	r2, [r7, #6]
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b21c      	sxth	r4, r3
 80018b8:	88ba      	ldrh	r2, [r7, #4]
 80018ba:	89bb      	ldrh	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	4622      	mov	r2, r4
 80018c8:	f7ff fe7a 	bl	80015c0 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);  //setDMAMemMode(mem_increase, mode_16bit);                                                          // Set SPI and DMA to 16 bit, enable memory increase
 80018cc:	2101      	movs	r1, #1
 80018ce:	2001      	movs	r0, #1
 80018d0:	f7ff fd44 	bl	800135c <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	89ba      	ldrh	r2, [r7, #12]
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff fe03 	bl	80014ec <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80018e6:	2100      	movs	r1, #0
 80018e8:	2001      	movs	r0, #1
 80018ea:	f7ff fd37 	bl	800135c <setDMAMemMode>
 80018ee:	e006      	b.n	80018fe <LCD_DrawImage+0xa0>
    return;
 80018f0:	bf00      	nop
 80018f2:	e004      	b.n	80018fe <LCD_DrawImage+0xa0>
    return;
 80018f4:	bf00      	nop
 80018f6:	e002      	b.n	80018fe <LCD_DrawImage+0xa0>
    return;
 80018f8:	bf00      	nop
 80018fa:	e000      	b.n	80018fe <LCD_DrawImage+0xa0>
    return;
 80018fc:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}

08001904 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b087      	sub	sp, #28
 8001908:	af02      	add	r7, sp, #8
 800190a:	4604      	mov	r4, r0
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4623      	mov	r3, r4
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	4603      	mov	r3, r0
 8001918:	80bb      	strh	r3, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001922:	88fa      	ldrh	r2, [r7, #6]
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	429a      	cmp	r2, r3
 8001928:	d10a      	bne.n	8001940 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 800192a:	88ba      	ldrh	r2, [r7, #4]
 800192c:	883b      	ldrh	r3, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d918      	bls.n	8001964 <LCD_DrawLine+0x60>
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	81bb      	strh	r3, [r7, #12]
 8001936:	883b      	ldrh	r3, [r7, #0]
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	89bb      	ldrh	r3, [r7, #12]
 800193c:	803b      	strh	r3, [r7, #0]
 800193e:	e011      	b.n	8001964 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001940:	88ba      	ldrh	r2, [r7, #4]
 8001942:	883b      	ldrh	r3, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d10a      	bne.n	800195e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001948:	88fa      	ldrh	r2, [r7, #6]
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	429a      	cmp	r2, r3
 800194e:	d909      	bls.n	8001964 <LCD_DrawLine+0x60>
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	81fb      	strh	r3, [r7, #14]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	80fb      	strh	r3, [r7, #6]
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	e002      	b.n	8001964 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001962:	e009      	b.n	8001978 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001964:	883c      	ldrh	r4, [r7, #0]
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	88b9      	ldrh	r1, [r7, #4]
 800196a:	88f8      	ldrh	r0, [r7, #6]
 800196c:	8c3b      	ldrh	r3, [r7, #32]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	4623      	mov	r3, r4
 8001972:	f7ff ff3d 	bl	80017f0 <LCD_Fill>
  return UG_RESULT_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}

08001980 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60ba      	str	r2, [r7, #8]
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4603      	mov	r3, r0
 800198c:	81fb      	strh	r3, [r7, #14]
 800198e:	460b      	mov	r3, r1
 8001990:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f003 fa6a 	bl	8004e6c <UG_FontSelect>
  UG_SetForecolor(color);
 8001998:	8b3b      	ldrh	r3, [r7, #24]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fc8e 	bl	80052bc <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80019a0:	8bbb      	ldrh	r3, [r7, #28]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fc9c 	bl	80052e0 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80019a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ac:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 fbfa 	bl	80051ac <UG_PutString>
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <LCD_setPower+0x14>
 80019d0:	2329      	movs	r3, #41	; 0x29
 80019d2:	e000      	b.n	80019d6 <LCD_setPower+0x16>
 80019d4:	2328      	movs	r3, #40	; 0x28
 80019d6:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fd50 	bl	8001484 <LCD_WriteCommand>
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LCD_Update>:

static void LCD_Update(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80019f0:	2100      	movs	r1, #0
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7ff fcb2 	bl	800135c <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001a02:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <LCD_init+0xa8>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <LCD_init+0xac>)
 8001a0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a0e:	619a      	str	r2, [r3, #24]
  HAL_Delay(25);
 8001a10:	2019      	movs	r0, #25
 8001a12:	f000 f8cb 	bl	8001bac <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <LCD_init+0xac>)
 8001a18:	2240      	movs	r2, #64	; 0x40
 8001a1a:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001a1c:	20c8      	movs	r0, #200	; 0xc8
 8001a1e:	f000 f8c5 	bl	8001bac <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001a22:	4922      	ldr	r1, [pc, #136]	; (8001aac <LCD_init+0xb0>)
 8001a24:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <LCD_init+0xb4>)
 8001a26:	f003 f9bb 	bl	8004da0 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001a2a:	4922      	ldr	r1, [pc, #136]	; (8001ab4 <LCD_init+0xb8>)
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f004 fb73 	bl	8006118 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001a32:	4921      	ldr	r1, [pc, #132]	; (8001ab8 <LCD_init+0xbc>)
 8001a34:	2001      	movs	r0, #1
 8001a36:	f004 fb6f 	bl	8006118 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001a3a:	4920      	ldr	r1, [pc, #128]	; (8001abc <LCD_init+0xc0>)
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f004 fb6b 	bl	8006118 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001a42:	491f      	ldr	r1, [pc, #124]	; (8001ac0 <LCD_init+0xc4>)
 8001a44:	2003      	movs	r0, #3
 8001a46:	f004 fb67 	bl	8006118 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f003 fc5a 	bl	8005304 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f003 fc6b 	bl	800532c <UG_FontSetVSpace>

  //LCD_SetRotation(LCD_ROTATION_CMD);
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001a56:	2300      	movs	r3, #0
 8001a58:	80fb      	strh	r3, [r7, #6]
 8001a5a:	e013      	b.n	8001a84 <LCD_init+0x88>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <LCD_init+0xc8>)
 8001a62:	441a      	add	r2, r3
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	4917      	ldr	r1, [pc, #92]	; (8001ac4 <LCD_init+0xc8>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f7ff fd09 	bl	8001484 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <LCD_init+0xc8>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3302      	adds	r3, #2
 8001a82:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	2b4b      	cmp	r3, #75	; 0x4b
 8001a88:	d9e8      	bls.n	8001a5c <LCD_init+0x60>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f003 f9fe 	bl	8004e8c <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff ff95 	bl	80019c0 <LCD_setPower>
  UG_Update();
 8001a96:	f004 fb61 	bl	800615c <UG_Update>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	200002b0 	.word	0x200002b0
 8001ab4:	08001905 	.word	0x08001905
 8001ab8:	080017f1 	.word	0x080017f1
 8001abc:	08001789 	.word	0x08001789
 8001ac0:	0800185f 	.word	0x0800185f
 8001ac4:	080076fc 	.word	0x080076fc

08001ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_Init+0x40>)
 8001ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_Init+0x40>)
 8001ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_Init+0x40>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 f96f 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af6:	200f      	movs	r0, #15
 8001af8:	f000 f808 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001afc:	f7ff f984 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x54>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x58>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f987 	bl	8001e3e <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b48:	f000 f94f 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_InitTick+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000008 	.word	0x20000008
 8001b64:	20000020 	.word	0x20000020
 8001b68:	2000001c 	.word	0x2000001c

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000020 	.word	0x20000020
 8001b90:	2000030c 	.word	0x2000030c

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000030c 	.word	0x2000030c

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_Delay+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000020 	.word	0x20000020

08001bf4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_SuspendTick+0x1c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_SuspendTick+0x1c>)
 8001bfe:	f023 0302 	bic.w	r3, r3, #2
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_ResumeTick+0x1c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_ResumeTick+0x1c>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff fe96 	bl	8001b94 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e099      	b.n	8001fa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e94:	e00f      	b.n	8001eb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e96:	f7ff fe7d 	bl	8001b94 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d908      	bls.n	8001eb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2203      	movs	r2, #3
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e078      	b.n	8001fa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e8      	bne.n	8001e96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_DMA_Init+0x158>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d107      	bne.n	8001f20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f023 0307 	bic.w	r3, r3, #7
 8001f36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d117      	bne.n	8001f7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fad1 	bl	8002504 <DMA_CheckFifoParam>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f76:	2301      	movs	r3, #1
 8001f78:	e016      	b.n	8001fa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fa88 	bl	8002498 <DMA_CalcBaseAndBitshift>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	223f      	movs	r2, #63	; 0x3f
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	f010803f 	.word	0xf010803f

08001fb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_DMA_Start_IT+0x26>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e040      	b.n	800205c <HAL_DMA_Start_IT+0xa8>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d12f      	bne.n	800204e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fa1a 	bl	800243c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	223f      	movs	r2, #63	; 0x3f
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0216 	orr.w	r2, r2, #22
 8002022:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e005      	b.n	800205a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002070:	4b8e      	ldr	r3, [pc, #568]	; (80022ac <HAL_DMA_IRQHandler+0x248>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a8e      	ldr	r2, [pc, #568]	; (80022b0 <HAL_DMA_IRQHandler+0x24c>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0a9b      	lsrs	r3, r3, #10
 800207c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2208      	movs	r2, #8
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01a      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2208      	movs	r2, #8
 80020be:	409a      	lsls	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2201      	movs	r2, #1
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2201      	movs	r2, #1
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f043 0202 	orr.w	r2, r3, #2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2204      	movs	r2, #4
 800210c:	409a      	lsls	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00b      	beq.n	800213c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2204      	movs	r2, #4
 800212a:	409a      	lsls	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f043 0204 	orr.w	r2, r3, #4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2210      	movs	r2, #16
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d043      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d03c      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2210      	movs	r2, #16
 8002160:	409a      	lsls	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d024      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
 8002192:	e01f      	b.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01b      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
 80021a4:	e016      	b.n	80021d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0208 	bic.w	r2, r2, #8
 80021c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2220      	movs	r2, #32
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 808f 	beq.w	8002304 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8087 	beq.w	8002304 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2220      	movs	r2, #32
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b05      	cmp	r3, #5
 800220c:	d136      	bne.n	800227c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0216 	bic.w	r2, r2, #22
 800221c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800222c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_DMA_IRQHandler+0x1da>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0208 	bic.w	r2, r2, #8
 800224c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	223f      	movs	r2, #63	; 0x3f
 8002254:	409a      	lsls	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226e:	2b00      	cmp	r3, #0
 8002270:	d07e      	beq.n	8002370 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
        }
        return;
 800227a:	e079      	b.n	8002370 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01d      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10d      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	2b00      	cmp	r3, #0
 800229e:	d031      	beq.n	8002304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
 80022a8:	e02c      	b.n	8002304 <HAL_DMA_IRQHandler+0x2a0>
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008
 80022b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d023      	beq.n	8002304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
 80022c4:	e01e      	b.n	8002304 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10f      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0210 	bic.w	r2, r2, #16
 80022e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	2b00      	cmp	r3, #0
 800230a:	d032      	beq.n	8002372 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d022      	beq.n	800235e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2205      	movs	r2, #5
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	3301      	adds	r3, #1
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	429a      	cmp	r2, r3
 800233a:	d307      	bcc.n	800234c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f2      	bne.n	8002330 <HAL_DMA_IRQHandler+0x2cc>
 800234a:	e000      	b.n	800234e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800234c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
 800236e:	e000      	b.n	8002372 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002370:	bf00      	nop
    }
  }
}
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	460b      	mov	r3, r1
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_DMA_RegisterCallback+0x20>
 8002394:	2302      	movs	r3, #2
 8002396:	e03d      	b.n	8002414 <HAL_DMA_RegisterCallback+0x9c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d12c      	bne.n	8002406 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 80023ac:	7afb      	ldrb	r3, [r7, #11]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d826      	bhi.n	8002400 <HAL_DMA_RegisterCallback+0x88>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <HAL_DMA_RegisterCallback+0x40>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023d1 	.word	0x080023d1
 80023bc:	080023d9 	.word	0x080023d9
 80023c0:	080023e1 	.word	0x080023e1
 80023c4:	080023e9 	.word	0x080023e9
 80023c8:	080023f1 	.word	0x080023f1
 80023cc:	080023f9 	.word	0x080023f9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80023d6:	e018      	b.n	800240a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80023de:	e014      	b.n	800240a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80023e6:	e010      	b.n	800240a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80023ee:	e00c      	b.n	800240a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80023f6:	e008      	b.n	800240a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80023fe:	e004      	b.n	800240a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
      break;
 8002404:	e001      	b.n	800240a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002412:	7dfb      	ldrb	r3, [r7, #23]
}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242e:	b2db      	uxtb	r3, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002458:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b40      	cmp	r3, #64	; 0x40
 8002468:	d108      	bne.n	800247c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800247a:	e007      	b.n	800248c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	60da      	str	r2, [r3, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3b10      	subs	r3, #16
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <DMA_CalcBaseAndBitshift+0x64>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024b2:	4a13      	ldr	r2, [pc, #76]	; (8002500 <DMA_CalcBaseAndBitshift+0x68>)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d909      	bls.n	80024da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	1d1a      	adds	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	659a      	str	r2, [r3, #88]	; 0x58
 80024d8:	e007      	b.n	80024ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	aaaaaaab 	.word	0xaaaaaaab
 8002500:	08007748 	.word	0x08007748

08002504 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11f      	bne.n	800255e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d856      	bhi.n	80025d2 <DMA_CheckFifoParam+0xce>
 8002524:	a201      	add	r2, pc, #4	; (adr r2, 800252c <DMA_CheckFifoParam+0x28>)
 8002526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252a:	bf00      	nop
 800252c:	0800253d 	.word	0x0800253d
 8002530:	0800254f 	.word	0x0800254f
 8002534:	0800253d 	.word	0x0800253d
 8002538:	080025d3 	.word	0x080025d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d046      	beq.n	80025d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254c:	e043      	b.n	80025d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002556:	d140      	bne.n	80025da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255c:	e03d      	b.n	80025da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002566:	d121      	bne.n	80025ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d837      	bhi.n	80025de <DMA_CheckFifoParam+0xda>
 800256e:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <DMA_CheckFifoParam+0x70>)
 8002570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002574:	08002585 	.word	0x08002585
 8002578:	0800258b 	.word	0x0800258b
 800257c:	08002585 	.word	0x08002585
 8002580:	0800259d 	.word	0x0800259d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      break;
 8002588:	e030      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d025      	beq.n	80025e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259a:	e022      	b.n	80025e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a4:	d11f      	bne.n	80025e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025aa:	e01c      	b.n	80025e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d903      	bls.n	80025ba <DMA_CheckFifoParam+0xb6>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d003      	beq.n	80025c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025b8:	e018      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      break;
 80025be:	e015      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e00b      	b.n	80025ea <DMA_CheckFifoParam+0xe6>
      break;
 80025d2:	bf00      	nop
 80025d4:	e00a      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
 80025d8:	e008      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e006      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e004      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;   
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
    }
  } 
  
  return status; 
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e159      	b.n	80028cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	429a      	cmp	r2, r3
 8002632:	f040 8148 	bne.w	80028c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d005      	beq.n	800264e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	2b02      	cmp	r3, #2
 800264c:	d130      	bne.n	80026b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002684:	2201      	movs	r2, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 0201 	and.w	r2, r3, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d017      	beq.n	80026ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d123      	bne.n	8002740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	220f      	movs	r2, #15
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	08da      	lsrs	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3208      	adds	r2, #8
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0203 	and.w	r2, r3, #3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a2 	beq.w	80028c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a56      	ldr	r2, [pc, #344]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 800278c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279e:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_GPIO_Init+0x2ec>)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_GPIO_Init+0x2f0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d019      	beq.n	80027fe <HAL_GPIO_Init+0x202>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_GPIO_Init+0x2f4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_Init+0x1fe>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_GPIO_Init+0x2f8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00d      	beq.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_GPIO_Init+0x2fc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_Init+0x1f6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a45      	ldr	r2, [pc, #276]	; (80028fc <HAL_GPIO_Init+0x300>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_GPIO_Init+0x1f2>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027ee:	2307      	movs	r3, #7
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <HAL_GPIO_Init+0x2ec>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_GPIO_Init+0x304>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a24      	ldr	r2, [pc, #144]	; (8002900 <HAL_GPIO_Init+0x304>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_GPIO_Init+0x304>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_GPIO_Init+0x304>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f aea2 	bls.w	8002618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40013c00 	.word	0x40013c00

08002904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	4613      	mov	r3, r2
 8002912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002914:	787b      	ldrb	r3, [r7, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002920:	e003      	b.n	800292a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	619a      	str	r2, [r3, #24]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002948:	887a      	ldrh	r2, [r7, #2]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43d9      	mvns	r1, r3
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	400b      	ands	r3, r1
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fe7a 	bl	8000684 <HAL_GPIO_EXTI_Callback>
  }
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80029ba:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80029bc:	e002      	b.n	80029c4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80029be:	bf40      	sev
    __WFE();
 80029c0:	bf20      	wfe
    __WFE();
 80029c2:	bf20      	wfe
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e267      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d075      	beq.n	8002ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f2:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d00c      	beq.n	8002a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fe:	4b85      	ldr	r3, [pc, #532]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d112      	bne.n	8002a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0a:	4b82      	ldr	r3, [pc, #520]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a16:	d10b      	bne.n	8002a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	4b7e      	ldr	r3, [pc, #504]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d05b      	beq.n	8002adc <HAL_RCC_OscConfig+0x108>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d157      	bne.n	8002adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e242      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d106      	bne.n	8002a48 <HAL_RCC_OscConfig+0x74>
 8002a3a:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a75      	ldr	r2, [pc, #468]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0xb0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x98>
 8002a52:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6f      	ldr	r2, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0xb0>
 8002a6c:	4b69      	ldr	r3, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a68      	ldr	r2, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b66      	ldr	r3, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a65      	ldr	r2, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7ff f882 	bl	8001b94 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a94:	f7ff f87e 	bl	8001b94 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e207      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0xc0>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff f86e 	bl	8001b94 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002abc:	f7ff f86a 	bl	8001b94 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1f3      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0xe8>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aea:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b02:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x152>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1c7      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4937      	ldr	r1, [pc, #220]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e03a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCC_OscConfig+0x244>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7ff f823 	bl	8001b94 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b52:	f7ff f81f 	bl	8001b94 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1a8      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4925      	ldr	r1, [pc, #148]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b86:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCC_OscConfig+0x244>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f802 	bl	8001b94 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe fffe 	bl	8001b94 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e187      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d036      	beq.n	8002c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_RCC_OscConfig+0x248>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe ffe2 	bl	8001b94 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe ffde 	bl	8001b94 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e167      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x200>
 8002bf2:	e01b      	b.n	8002c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_OscConfig+0x248>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe ffcb 	bl	8001b94 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	e00e      	b.n	8002c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c02:	f7fe ffc7 	bl	8001b94 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d907      	bls.n	8002c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e150      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
 8002c14:	40023800 	.word	0x40023800
 8002c18:	42470000 	.word	0x42470000
 8002c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ea      	bne.n	8002c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8097 	beq.w	8002d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b81      	ldr	r3, [pc, #516]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	4b7d      	ldr	r3, [pc, #500]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a7c      	ldr	r2, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b7a      	ldr	r3, [pc, #488]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c66:	2301      	movs	r3, #1
 8002c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b77      	ldr	r3, [pc, #476]	; (8002e48 <HAL_RCC_OscConfig+0x474>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d118      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b74      	ldr	r3, [pc, #464]	; (8002e48 <HAL_RCC_OscConfig+0x474>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a73      	ldr	r2, [pc, #460]	; (8002e48 <HAL_RCC_OscConfig+0x474>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7fe ff87 	bl	8001b94 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7fe ff83 	bl	8001b94 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e10c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <HAL_RCC_OscConfig+0x474>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x2ea>
 8002cb0:	4b64      	ldr	r3, [pc, #400]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	4a63      	ldr	r2, [pc, #396]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x324>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x30c>
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a5e      	ldr	r2, [pc, #376]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a5b      	ldr	r2, [pc, #364]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x324>
 8002ce0:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	4b55      	ldr	r3, [pc, #340]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a54      	ldr	r2, [pc, #336]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	f023 0304 	bic.w	r3, r3, #4
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe ff48 	bl	8001b94 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe ff44 	bl	8001b94 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0cb      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1e:	4b49      	ldr	r3, [pc, #292]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ee      	beq.n	8002d08 <HAL_RCC_OscConfig+0x334>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe ff32 	bl	8001b94 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe ff2e 	bl	8001b94 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0b5      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4a:	4b3e      	ldr	r3, [pc, #248]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ee      	bne.n	8002d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	4a38      	ldr	r2, [pc, #224]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80a1 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d05c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d141      	bne.n	8002e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <HAL_RCC_OscConfig+0x478>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe ff02 	bl	8001b94 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe fefe 	bl	8001b94 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e087      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	491b      	ldr	r1, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <HAL_RCC_OscConfig+0x478>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fed7 	bl	8001b94 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe fed3 	bl	8001b94 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e05c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x416>
 8002e08:	e054      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_RCC_OscConfig+0x478>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fec0 	bl	8001b94 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe febc 	bl	8001b94 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e045      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x444>
 8002e36:	e03d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e038      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x4ec>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d028      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d121      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11a      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d111      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800

08002ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0cc      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b68      	ldr	r3, [pc, #416]	; (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d90c      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b65      	ldr	r3, [pc, #404]	; (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0b8      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f18:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a58      	ldr	r2, [pc, #352]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f30:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	494d      	ldr	r1, [pc, #308]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d044      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d119      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e07f      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06f      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f92:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e067      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa2:	4b37      	ldr	r3, [pc, #220]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4934      	ldr	r1, [pc, #208]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fdee 	bl	8001b94 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe fdea 	bl	8001b94 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e04f      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 020c 	and.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1eb      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d20c      	bcs.n	800300c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e032      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4916      	ldr	r1, [pc, #88]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	490e      	ldr	r1, [pc, #56]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800304a:	f000 f821 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 800304e:	4602      	mov	r2, r0
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	490a      	ldr	r1, [pc, #40]	; (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	5ccb      	ldrb	r3, [r1, r3]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fd4e 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023c00 	.word	0x40023c00
 8003080:	40023800 	.word	0x40023800
 8003084:	080076e4 	.word	0x080076e4
 8003088:	20000008 	.word	0x20000008
 800308c:	2000001c 	.word	0x2000001c

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003094:	b090      	sub	sp, #64	; 0x40
 8003096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
 800309c:	2300      	movs	r3, #0
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a0:	2300      	movs	r3, #0
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCC_GetSysClockFreq+0x180>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d00d      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x40>
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	f200 80a1 	bhi.w	80031fc <HAL_RCC_GetSysClockFreq+0x16c>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x34>
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x3a>
 80030c2:	e09b      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_GetSysClockFreq+0x184>)
 80030c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030c8:	e09b      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ca:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_GetSysClockFreq+0x188>)
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030ce:	e098      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d0:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <HAL_RCC_GetSysClockFreq+0x180>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030da:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_RCC_GetSysClockFreq+0x180>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d028      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_GetSysClockFreq+0x180>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	2200      	movs	r2, #0
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	627a      	str	r2, [r7, #36]	; 0x24
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030f8:	2100      	movs	r1, #0
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_GetSysClockFreq+0x188>)
 80030fc:	fb03 f201 	mul.w	r2, r3, r1
 8003100:	2300      	movs	r3, #0
 8003102:	fb00 f303 	mul.w	r3, r0, r3
 8003106:	4413      	add	r3, r2
 8003108:	4a43      	ldr	r2, [pc, #268]	; (8003218 <HAL_RCC_GetSysClockFreq+0x188>)
 800310a:	fba0 1202 	umull	r1, r2, r0, r2
 800310e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003110:	460a      	mov	r2, r1
 8003112:	62ba      	str	r2, [r7, #40]	; 0x28
 8003114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003116:	4413      	add	r3, r2
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311c:	2200      	movs	r2, #0
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	61fa      	str	r2, [r7, #28]
 8003122:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003126:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800312a:	f7fd f8b1 	bl	8000290 <__aeabi_uldivmod>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4613      	mov	r3, r2
 8003134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003136:	e053      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <HAL_RCC_GetSysClockFreq+0x180>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	2200      	movs	r2, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	617a      	str	r2, [r7, #20]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800314a:	f04f 0b00 	mov.w	fp, #0
 800314e:	4652      	mov	r2, sl
 8003150:	465b      	mov	r3, fp
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	0159      	lsls	r1, r3, #5
 800315c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003160:	0150      	lsls	r0, r2, #5
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	ebb2 080a 	subs.w	r8, r2, sl
 800316a:	eb63 090b 	sbc.w	r9, r3, fp
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800317a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800317e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003182:	ebb2 0408 	subs.w	r4, r2, r8
 8003186:	eb63 0509 	sbc.w	r5, r3, r9
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	00eb      	lsls	r3, r5, #3
 8003194:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003198:	00e2      	lsls	r2, r4, #3
 800319a:	4614      	mov	r4, r2
 800319c:	461d      	mov	r5, r3
 800319e:	eb14 030a 	adds.w	r3, r4, sl
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	eb45 030b 	adc.w	r3, r5, fp
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031b6:	4629      	mov	r1, r5
 80031b8:	028b      	lsls	r3, r1, #10
 80031ba:	4621      	mov	r1, r4
 80031bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c0:	4621      	mov	r1, r4
 80031c2:	028a      	lsls	r2, r1, #10
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ca:	2200      	movs	r2, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	60fa      	str	r2, [r7, #12]
 80031d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031d4:	f7fd f85c 	bl	8000290 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	3301      	adds	r3, #1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80031f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031fa:	e002      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetSysClockFreq+0x184>)
 80031fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003204:	4618      	mov	r0, r3
 8003206:	3740      	adds	r7, #64	; 0x40
 8003208:	46bd      	mov	sp, r7
 800320a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800
 8003214:	00f42400 	.word	0x00f42400
 8003218:	017d7840 	.word	0x017d7840

0800321c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <HAL_RCC_GetHCLKFreq+0x14>)
 8003222:	681b      	ldr	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000008 	.word	0x20000008

08003234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003238:	f7ff fff0 	bl	800321c <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	0a9b      	lsrs	r3, r3, #10
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4903      	ldr	r1, [pc, #12]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	080076f4 	.word	0x080076f4

0800325c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003260:	f7ff ffdc 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	0b5b      	lsrs	r3, r3, #13
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4903      	ldr	r1, [pc, #12]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	080076f4 	.word	0x080076f4

08003284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e07b      	b.n	800338e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032a6:	d009      	beq.n	80032bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
 80032ae:	e005      	b.n	80032bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fdbe 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	ea42 0103 	orr.w	r1, r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0104 	and.w	r1, r3, #4
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f003 0210 	and.w	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b088      	sub	sp, #32
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_SPI_Transmit+0x22>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e126      	b.n	8003606 <HAL_SPI_Transmit+0x270>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c0:	f7fe fbe8 	bl	8001b94 <HAL_GetTick>
 80033c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d002      	beq.n	80033dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033da:	e10b      	b.n	80035f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Transmit+0x52>
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033ec:	e102      	b.n	80035f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2203      	movs	r2, #3
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	d10f      	bne.n	8003456 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003454:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d007      	beq.n	8003474 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347c:	d14b      	bne.n	8003516 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_SPI_Transmit+0xf6>
 8003486:	8afb      	ldrh	r3, [r7, #22]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d13e      	bne.n	800350a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	881a      	ldrh	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	1c9a      	adds	r2, r3, #2
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034b0:	e02b      	b.n	800350a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d112      	bne.n	80034e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80034e4:	e011      	b.n	800350a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e6:	f7fe fb55 	bl	8001b94 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d803      	bhi.n	80034fe <HAL_SPI_Transmit+0x168>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034fc:	d102      	bne.n	8003504 <HAL_SPI_Transmit+0x16e>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003508:	e074      	b.n	80035f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ce      	bne.n	80034b2 <HAL_SPI_Transmit+0x11c>
 8003514:	e04c      	b.n	80035b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SPI_Transmit+0x18e>
 800351e:	8afb      	ldrh	r3, [r7, #22]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d140      	bne.n	80035a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800354a:	e02c      	b.n	80035a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d113      	bne.n	8003582 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003580:	e011      	b.n	80035a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003582:	f7fe fb07 	bl	8001b94 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d803      	bhi.n	800359a <HAL_SPI_Transmit+0x204>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003598:	d102      	bne.n	80035a0 <HAL_SPI_Transmit+0x20a>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035a4:	e026      	b.n	80035f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1cd      	bne.n	800354c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	6839      	ldr	r1, [r7, #0]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fa09 	bl	80039cc <SPI_EndRxTxTransaction>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e000      	b.n	80035f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80035f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003604:	7ffb      	ldrb	r3, [r7, #31]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_SPI_Transmit_DMA+0x20>
 800362c:	2302      	movs	r3, #2
 800362e:	e09b      	b.n	8003768 <HAL_SPI_Transmit_DMA+0x158>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d002      	beq.n	800364a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003644:	2302      	movs	r3, #2
 8003646:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003648:	e089      	b.n	800375e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_SPI_Transmit_DMA+0x46>
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800365a:	e080      	b.n	800375e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2203      	movs	r2, #3
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a2:	d10f      	bne.n	80036c4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	4a29      	ldr	r2, [pc, #164]	; (8003770 <HAL_SPI_Transmit_DMA+0x160>)
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	4a28      	ldr	r2, [pc, #160]	; (8003774 <HAL_SPI_Transmit_DMA+0x164>)
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <HAL_SPI_Transmit_DMA+0x168>)
 80036da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	2200      	movs	r2, #0
 80036e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	4619      	mov	r1, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036fc:	f7fe fc5a 	bl	8001fb4 <HAL_DMA_Start_IT>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0210 	orr.w	r2, r3, #16
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800371e:	e01e      	b.n	800375e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d007      	beq.n	800373e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0220 	orr.w	r2, r2, #32
 800374c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0202 	orr.w	r2, r2, #2
 800375c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	08003861 	.word	0x08003861
 8003774:	080037b9 	.word	0x080037b9
 8003778:	0800387d 	.word	0x0800387d

0800377c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c6:	f7fe f9e5 	bl	8001b94 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037da:	d03b      	beq.n	8003854 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0220 	bic.w	r2, r2, #32
 80037ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0202 	bic.w	r2, r2, #2
 80037fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	2164      	movs	r1, #100	; 0x64
 8003800:	6978      	ldr	r0, [r7, #20]
 8003802:	f000 f8e3 	bl	80039cc <SPI_EndRxTxTransaction>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800384c:	6978      	ldr	r0, [r7, #20]
 800384e:	f7ff ffa9 	bl	80037a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003852:	e002      	b.n	800385a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003854:	6978      	ldr	r0, [r7, #20]
 8003856:	f7ff ff91 	bl	800377c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff ff8e 	bl	8003790 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0203 	bic.w	r2, r2, #3
 8003898:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f043 0210 	orr.w	r2, r3, #16
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff ff78 	bl	80037a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038cc:	f7fe f962 	bl	8001b94 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038dc:	f7fe f95a 	bl	8001b94 <HAL_GetTick>
 80038e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038e2:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	015b      	lsls	r3, r3, #5
 80038e8:	0d1b      	lsrs	r3, r3, #20
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f2:	e054      	b.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fa:	d050      	beq.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038fc:	f7fe f94a 	bl	8001b94 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	429a      	cmp	r2, r3
 800390a:	d902      	bls.n	8003912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13d      	bne.n	800398e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d111      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003934:	d004      	beq.n	8003940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d107      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003958:	d10f      	bne.n	800397a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e017      	b.n	80039be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3b01      	subs	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d19b      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000008 	.word	0x20000008

080039cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <SPI_EndRxTxTransaction+0x7c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <SPI_EndRxTxTransaction+0x80>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0d5b      	lsrs	r3, r3, #21
 80039e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f6:	d112      	bne.n	8003a1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff ff5a 	bl	80038bc <SPI_WaitFlagStateUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e00f      	b.n	8003a3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d0f2      	beq.n	8003a1e <SPI_EndRxTxTransaction+0x52>
 8003a38:	e000      	b.n	8003a3c <SPI_EndRxTxTransaction+0x70>
        break;
 8003a3a:	bf00      	nop
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000008 	.word	0x20000008
 8003a4c:	165e9f81 	.word	0x165e9f81

08003a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e041      	b.n	8003ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd fab0 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f000 fbea 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d001      	beq.n	8003b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e044      	b.n	8003b92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x6c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d013      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x6c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x6c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x6c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_TIM_Base_Start_IT+0xbc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x6c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d111      	bne.n	8003b80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d010      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7e:	e007      	b.n	8003b90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40014000 	.word	0x40014000

08003bb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10f      	bne.n	8003bfc <HAL_TIM_Base_Stop_IT+0x48>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	f240 4344 	movw	r3, #1092	; 0x444
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d107      	bne.n	8003bfc <HAL_TIM_Base_Stop_IT+0x48>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e097      	b.n	8003d56 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd f986 	bl	8000f4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c56:	f023 0307 	bic.w	r3, r3, #7
 8003c5a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 fafe 	bl	8004268 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c94:	f023 0303 	bic.w	r3, r3, #3
 8003c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cb2:	f023 030c 	bic.w	r3, r3, #12
 8003cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	011a      	lsls	r2, r3, #4
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003cf0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003cf8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	4313      	orrs	r3, r2
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d76:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d7e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d86:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d110      	bne.n	8003db0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d102      	bne.n	8003d9a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d94:	7b7b      	ldrb	r3, [r7, #13]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e069      	b.n	8003e72 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dae:	e031      	b.n	8003e14 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d110      	bne.n	8003dd8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003db6:	7bbb      	ldrb	r3, [r7, #14]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d102      	bne.n	8003dc2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dbc:	7b3b      	ldrb	r3, [r7, #12]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e055      	b.n	8003e72 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd6:	e01d      	b.n	8003e14 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d108      	bne.n	8003df0 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dde:	7bbb      	ldrb	r3, [r7, #14]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d105      	bne.n	8003df0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003de4:	7b7b      	ldrb	r3, [r7, #13]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d102      	bne.n	8003df0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dea:	7b3b      	ldrb	r3, [r7, #12]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e03e      	b.n	8003e72 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_Encoder_Start+0xc4>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d008      	beq.n	8003e32 <HAL_TIM_Encoder_Start+0xd4>
 8003e20:	e00f      	b.n	8003e42 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fb36 	bl	800449c <TIM_CCxChannelCmd>
      break;
 8003e30:	e016      	b.n	8003e60 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	2104      	movs	r1, #4
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fb2e 	bl	800449c <TIM_CCxChannelCmd>
      break;
 8003e40:	e00e      	b.n	8003e60 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fb26 	bl	800449c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2201      	movs	r2, #1
 8003e56:	2104      	movs	r1, #4
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fb1f 	bl	800449c <TIM_CCxChannelCmd>
      break;
 8003e5e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d122      	bne.n	8003ed6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d11b      	bne.n	8003ed6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f06f 0202 	mvn.w	r2, #2
 8003ea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f9b5 	bl	800422c <HAL_TIM_IC_CaptureCallback>
 8003ec2:	e005      	b.n	8003ed0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f9a7 	bl	8004218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9b8 	bl	8004240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d122      	bne.n	8003f2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d11b      	bne.n	8003f2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f06f 0204 	mvn.w	r2, #4
 8003efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f98b 	bl	800422c <HAL_TIM_IC_CaptureCallback>
 8003f16:	e005      	b.n	8003f24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f97d 	bl	8004218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f98e 	bl	8004240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d122      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d11b      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f06f 0208 	mvn.w	r2, #8
 8003f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2204      	movs	r2, #4
 8003f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f961 	bl	800422c <HAL_TIM_IC_CaptureCallback>
 8003f6a:	e005      	b.n	8003f78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f953 	bl	8004218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f964 	bl	8004240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d122      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d11b      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f06f 0210 	mvn.w	r2, #16
 8003fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f937 	bl	800422c <HAL_TIM_IC_CaptureCallback>
 8003fbe:	e005      	b.n	8003fcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f929 	bl	8004218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f93a 	bl	8004240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10e      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f06f 0201 	mvn.w	r2, #1
 8003ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fc fc05 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d10e      	bne.n	800402a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d107      	bne.n	800402a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fad7 	bl	80045d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d10e      	bne.n	8004056 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d107      	bne.n	8004056 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800404e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8ff 	bl	8004254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b20      	cmp	r3, #32
 8004062:	d10e      	bne.n	8004082 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b20      	cmp	r3, #32
 8004070:	d107      	bne.n	8004082 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f06f 0220 	mvn.w	r2, #32
 800407a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 faa1 	bl	80045c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_ConfigClockSource+0x1c>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e0b4      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x186>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040de:	d03e      	beq.n	800415e <HAL_TIM_ConfigClockSource+0xd4>
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e4:	f200 8087 	bhi.w	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	f000 8086 	beq.w	80041fc <HAL_TIM_ConfigClockSource+0x172>
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f4:	d87f      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
 80040f6:	2b70      	cmp	r3, #112	; 0x70
 80040f8:	d01a      	beq.n	8004130 <HAL_TIM_ConfigClockSource+0xa6>
 80040fa:	2b70      	cmp	r3, #112	; 0x70
 80040fc:	d87b      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
 80040fe:	2b60      	cmp	r3, #96	; 0x60
 8004100:	d050      	beq.n	80041a4 <HAL_TIM_ConfigClockSource+0x11a>
 8004102:	2b60      	cmp	r3, #96	; 0x60
 8004104:	d877      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004106:	2b50      	cmp	r3, #80	; 0x50
 8004108:	d03c      	beq.n	8004184 <HAL_TIM_ConfigClockSource+0xfa>
 800410a:	2b50      	cmp	r3, #80	; 0x50
 800410c:	d873      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d058      	beq.n	80041c4 <HAL_TIM_ConfigClockSource+0x13a>
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d86f      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004116:	2b30      	cmp	r3, #48	; 0x30
 8004118:	d064      	beq.n	80041e4 <HAL_TIM_ConfigClockSource+0x15a>
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	d86b      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
 800411e:	2b20      	cmp	r3, #32
 8004120:	d060      	beq.n	80041e4 <HAL_TIM_ConfigClockSource+0x15a>
 8004122:	2b20      	cmp	r3, #32
 8004124:	d867      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d05c      	beq.n	80041e4 <HAL_TIM_ConfigClockSource+0x15a>
 800412a:	2b10      	cmp	r3, #16
 800412c:	d05a      	beq.n	80041e4 <HAL_TIM_ConfigClockSource+0x15a>
 800412e:	e062      	b.n	80041f6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6899      	ldr	r1, [r3, #8]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f000 f98c 	bl	800445c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004152:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
      break;
 800415c:	e04f      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f000 f975 	bl	800445c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004180:	609a      	str	r2, [r3, #8]
      break;
 8004182:	e03c      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	461a      	mov	r2, r3
 8004192:	f000 f8e9 	bl	8004368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2150      	movs	r1, #80	; 0x50
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f942 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 80041a2:	e02c      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f000 f908 	bl	80043c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2160      	movs	r1, #96	; 0x60
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f932 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 80041c2:	e01c      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	461a      	mov	r2, r3
 80041d2:	f000 f8c9 	bl	8004368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2140      	movs	r1, #64	; 0x40
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f922 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 80041e2:	e00c      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f000 f919 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 80041f4:	e003      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a34      	ldr	r2, [pc, #208]	; (800434c <TIM_Base_SetConfig+0xe4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00f      	beq.n	80042a0 <TIM_Base_SetConfig+0x38>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d00b      	beq.n	80042a0 <TIM_Base_SetConfig+0x38>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a31      	ldr	r2, [pc, #196]	; (8004350 <TIM_Base_SetConfig+0xe8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d007      	beq.n	80042a0 <TIM_Base_SetConfig+0x38>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a30      	ldr	r2, [pc, #192]	; (8004354 <TIM_Base_SetConfig+0xec>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_Base_SetConfig+0x38>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a2f      	ldr	r2, [pc, #188]	; (8004358 <TIM_Base_SetConfig+0xf0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d108      	bne.n	80042b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a25      	ldr	r2, [pc, #148]	; (800434c <TIM_Base_SetConfig+0xe4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01b      	beq.n	80042f2 <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c0:	d017      	beq.n	80042f2 <TIM_Base_SetConfig+0x8a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a22      	ldr	r2, [pc, #136]	; (8004350 <TIM_Base_SetConfig+0xe8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <TIM_Base_SetConfig+0x8a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a21      	ldr	r2, [pc, #132]	; (8004354 <TIM_Base_SetConfig+0xec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00f      	beq.n	80042f2 <TIM_Base_SetConfig+0x8a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a20      	ldr	r2, [pc, #128]	; (8004358 <TIM_Base_SetConfig+0xf0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00b      	beq.n	80042f2 <TIM_Base_SetConfig+0x8a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1f      	ldr	r2, [pc, #124]	; (800435c <TIM_Base_SetConfig+0xf4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <TIM_Base_SetConfig+0x8a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <TIM_Base_SetConfig+0xf8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_Base_SetConfig+0x8a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <TIM_Base_SetConfig+0xfc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d108      	bne.n	8004304 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a08      	ldr	r2, [pc, #32]	; (800434c <TIM_Base_SetConfig+0xe4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d103      	bne.n	8004338 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	615a      	str	r2, [r3, #20]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800

08004368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 030a 	bic.w	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0210 	bic.w	r2, r3, #16
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	031b      	lsls	r3, r3, #12
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	f043 0307 	orr.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	431a      	orrs	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2201      	movs	r2, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1a      	ldr	r2, [r3, #32]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e050      	b.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d013      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a15      	ldr	r2, [pc, #84]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d10c      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00
 80045c0:	40014000 	.word	0x40014000

080045c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e03f      	b.n	800467e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fd08 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f929 	bl	8004888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b08a      	sub	sp, #40	; 0x28
 800468a:	af02      	add	r7, sp, #8
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d17c      	bne.n	80047a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_UART_Transmit+0x2c>
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e075      	b.n	80047a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_UART_Transmit+0x3e>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e06e      	b.n	80047a2 <HAL_UART_Transmit+0x11c>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2221      	movs	r2, #33	; 0x21
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046da:	f7fd fa5b 	bl	8001b94 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f4:	d108      	bne.n	8004708 <HAL_UART_Transmit+0x82>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e003      	b.n	8004710 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004718:	e02a      	b.n	8004770 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f840 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e036      	b.n	80047a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004748:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	3302      	adds	r3, #2
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	e007      	b.n	8004762 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	3301      	adds	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1cf      	bne.n	800471a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2200      	movs	r2, #0
 8004782:	2140      	movs	r1, #64	; 0x40
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f810 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e006      	b.n	80047a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b090      	sub	sp, #64	; 0x40
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	e050      	b.n	800485e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c2:	d04c      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0x30>
 80047ca:	f7fd f9e3 	bl	8001b94 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d241      	bcs.n	800485e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047fa:	637a      	str	r2, [r7, #52]	; 0x34
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	63bb      	str	r3, [r7, #56]	; 0x38
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800482e:	623a      	str	r2, [r7, #32]
 8004830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	61bb      	str	r3, [r7, #24]
   return(result);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d09f      	beq.n	80047bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3740      	adds	r7, #64	; 0x40
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b0c0      	sub	sp, #256	; 0x100
 800488e:	af00      	add	r7, sp, #0
 8004890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	68d9      	ldr	r1, [r3, #12]
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	ea40 0301 	orr.w	r3, r0, r1
 80048b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	431a      	orrs	r2, r3
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048e0:	f021 010c 	bic.w	r1, r1, #12
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048ee:	430b      	orrs	r3, r1
 80048f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004902:	6999      	ldr	r1, [r3, #24]
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	ea40 0301 	orr.w	r3, r0, r1
 800490e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b8f      	ldr	r3, [pc, #572]	; (8004b54 <UART_SetConfig+0x2cc>)
 8004918:	429a      	cmp	r2, r3
 800491a:	d005      	beq.n	8004928 <UART_SetConfig+0xa0>
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b8d      	ldr	r3, [pc, #564]	; (8004b58 <UART_SetConfig+0x2d0>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d104      	bne.n	8004932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004928:	f7fe fc98 	bl	800325c <HAL_RCC_GetPCLK2Freq>
 800492c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004930:	e003      	b.n	800493a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004932:	f7fe fc7f 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 8004936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004944:	f040 810c 	bne.w	8004b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800494c:	2200      	movs	r2, #0
 800494e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800495a:	4622      	mov	r2, r4
 800495c:	462b      	mov	r3, r5
 800495e:	1891      	adds	r1, r2, r2
 8004960:	65b9      	str	r1, [r7, #88]	; 0x58
 8004962:	415b      	adcs	r3, r3
 8004964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800496a:	4621      	mov	r1, r4
 800496c:	eb12 0801 	adds.w	r8, r2, r1
 8004970:	4629      	mov	r1, r5
 8004972:	eb43 0901 	adc.w	r9, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498a:	4690      	mov	r8, r2
 800498c:	4699      	mov	r9, r3
 800498e:	4623      	mov	r3, r4
 8004990:	eb18 0303 	adds.w	r3, r8, r3
 8004994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004998:	462b      	mov	r3, r5
 800499a:	eb49 0303 	adc.w	r3, r9, r3
 800499e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049b6:	460b      	mov	r3, r1
 80049b8:	18db      	adds	r3, r3, r3
 80049ba:	653b      	str	r3, [r7, #80]	; 0x50
 80049bc:	4613      	mov	r3, r2
 80049be:	eb42 0303 	adc.w	r3, r2, r3
 80049c2:	657b      	str	r3, [r7, #84]	; 0x54
 80049c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049cc:	f7fb fc60 	bl	8000290 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b61      	ldr	r3, [pc, #388]	; (8004b5c <UART_SetConfig+0x2d4>)
 80049d6:	fba3 2302 	umull	r2, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	011c      	lsls	r4, r3, #4
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049f8:	415b      	adcs	r3, r3
 80049fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a00:	4641      	mov	r1, r8
 8004a02:	eb12 0a01 	adds.w	sl, r2, r1
 8004a06:	4649      	mov	r1, r9
 8004a08:	eb43 0b01 	adc.w	fp, r3, r1
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a20:	4692      	mov	sl, r2
 8004a22:	469b      	mov	fp, r3
 8004a24:	4643      	mov	r3, r8
 8004a26:	eb1a 0303 	adds.w	r3, sl, r3
 8004a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	eb4b 0303 	adc.w	r3, fp, r3
 8004a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	18db      	adds	r3, r3, r3
 8004a50:	643b      	str	r3, [r7, #64]	; 0x40
 8004a52:	4613      	mov	r3, r2
 8004a54:	eb42 0303 	adc.w	r3, r2, r3
 8004a58:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a62:	f7fb fc15 	bl	8000290 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <UART_SetConfig+0x2d4>)
 8004a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2264      	movs	r2, #100	; 0x64
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	1acb      	subs	r3, r1, r3
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <UART_SetConfig+0x2d4>)
 8004a84:	fba3 2302 	umull	r2, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a90:	441c      	add	r4, r3
 8004a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	1891      	adds	r1, r2, r2
 8004aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004aac:	415b      	adcs	r3, r3
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	1851      	adds	r1, r2, r1
 8004ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8004aba:	4649      	mov	r1, r9
 8004abc:	414b      	adcs	r3, r1
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004acc:	4659      	mov	r1, fp
 8004ace:	00cb      	lsls	r3, r1, #3
 8004ad0:	4651      	mov	r1, sl
 8004ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	00ca      	lsls	r2, r1, #3
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ae8:	464b      	mov	r3, r9
 8004aea:	460a      	mov	r2, r1
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b08:	460b      	mov	r3, r1
 8004b0a:	18db      	adds	r3, r3, r3
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0e:	4613      	mov	r3, r2
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b1e:	f7fb fbb7 	bl	8000290 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <UART_SetConfig+0x2d4>)
 8004b28:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	2164      	movs	r1, #100	; 0x64
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	3332      	adds	r3, #50	; 0x32
 8004b3a:	4a08      	ldr	r2, [pc, #32]	; (8004b5c <UART_SetConfig+0x2d4>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	f003 0207 	and.w	r2, r3, #7
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4422      	add	r2, r4
 8004b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b50:	e105      	b.n	8004d5e <UART_SetConfig+0x4d6>
 8004b52:	bf00      	nop
 8004b54:	40011000 	.word	0x40011000
 8004b58:	40011400 	.word	0x40011400
 8004b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b72:	4642      	mov	r2, r8
 8004b74:	464b      	mov	r3, r9
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	6239      	str	r1, [r7, #32]
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b82:	4641      	mov	r1, r8
 8004b84:	1854      	adds	r4, r2, r1
 8004b86:	4649      	mov	r1, r9
 8004b88:	eb43 0501 	adc.w	r5, r3, r1
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	00eb      	lsls	r3, r5, #3
 8004b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9a:	00e2      	lsls	r2, r4, #3
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	4643      	mov	r3, r8
 8004ba2:	18e3      	adds	r3, r4, r3
 8004ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ba8:	464b      	mov	r3, r9
 8004baa:	eb45 0303 	adc.w	r3, r5, r3
 8004bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bce:	4629      	mov	r1, r5
 8004bd0:	008b      	lsls	r3, r1, #2
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd8:	4621      	mov	r1, r4
 8004bda:	008a      	lsls	r2, r1, #2
 8004bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004be0:	f7fb fb56 	bl	8000290 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <UART_SetConfig+0x4e4>)
 8004bea:	fba3 2302 	umull	r2, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	011c      	lsls	r4, r3, #4
 8004bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	61b9      	str	r1, [r7, #24]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c14:	4641      	mov	r1, r8
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	6139      	str	r1, [r7, #16]
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	414b      	adcs	r3, r1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	00cb      	lsls	r3, r1, #3
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c36:	4651      	mov	r1, sl
 8004c38:	00ca      	lsls	r2, r1, #3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4642      	mov	r2, r8
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c48:	464b      	mov	r3, r9
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	008b      	lsls	r3, r1, #2
 8004c70:	4641      	mov	r1, r8
 8004c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c76:	4641      	mov	r1, r8
 8004c78:	008a      	lsls	r2, r1, #2
 8004c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c7e:	f7fb fb07 	bl	8000290 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <UART_SetConfig+0x4e4>)
 8004c88:	fba3 1302 	umull	r1, r3, r3, r2
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	2164      	movs	r1, #100	; 0x64
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	3332      	adds	r3, #50	; 0x32
 8004c9a:	4a34      	ldr	r2, [pc, #208]	; (8004d6c <UART_SetConfig+0x4e4>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca6:	441c      	add	r4, r3
 8004ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cac:	2200      	movs	r2, #0
 8004cae:	673b      	str	r3, [r7, #112]	; 0x70
 8004cb0:	677a      	str	r2, [r7, #116]	; 0x74
 8004cb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cb6:	4642      	mov	r2, r8
 8004cb8:	464b      	mov	r3, r9
 8004cba:	1891      	adds	r1, r2, r2
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	415b      	adcs	r3, r3
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	1851      	adds	r1, r2, r1
 8004cca:	6039      	str	r1, [r7, #0]
 8004ccc:	4649      	mov	r1, r9
 8004cce:	414b      	adcs	r3, r1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cde:	4659      	mov	r1, fp
 8004ce0:	00cb      	lsls	r3, r1, #3
 8004ce2:	4651      	mov	r1, sl
 8004ce4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ce8:	4651      	mov	r1, sl
 8004cea:	00ca      	lsls	r2, r1, #3
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	eb42 0303 	adc.w	r3, r2, r3
 8004d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d0c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	008b      	lsls	r3, r1, #2
 8004d1e:	4641      	mov	r1, r8
 8004d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d24:	4641      	mov	r1, r8
 8004d26:	008a      	lsls	r2, r1, #2
 8004d28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d2c:	f7fb fab0 	bl	8000290 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <UART_SetConfig+0x4e4>)
 8004d36:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2164      	movs	r1, #100	; 0x64
 8004d3e:	fb01 f303 	mul.w	r3, r1, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	3332      	adds	r3, #50	; 0x32
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <UART_SetConfig+0x4e4>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	f003 020f 	and.w	r2, r3, #15
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4422      	add	r2, r4
 8004d5c:	609a      	str	r2, [r3, #8]
}
 8004d5e:	bf00      	nop
 8004d60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	51eb851f 	.word	0x51eb851f

08004d70 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8004d82:	89fb      	ldrh	r3, [r7, #14]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	b21a      	sxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b21b      	sxth	r3, r3
 8004d92:	b29b      	uxth	r3, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	601a      	str	r2, [r3, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
#endif
   g->char_h_space = 1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   g->char_v_space = 1;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   g->font=NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	611a      	str	r2, [r3, #16]
   g->currentFont.bytes_per_char = 0;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	831a      	strh	r2, [r3, #24]
   g->currentFont.char_height = 0;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	75da      	strb	r2, [r3, #23]
   g->currentFont.char_width = 0;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	759a      	strb	r2, [r3, #22]
   g->currentFont.number_of_chars = 0;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	835a      	strh	r2, [r3, #26]
   g->currentFont.number_of_offsets = 0;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	839a      	strh	r2, [r3, #28]
   g->currentFont.widths = NULL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	621a      	str	r2, [r3, #32]
   g->currentFont.offsets = NULL;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24
   g->currentFont.data = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.font = NULL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c
   g->desktop_color = C_DESKTOP_COLOR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8004e02:	871a      	strh	r2, [r3, #56]	; 0x38
   g->fore_color = C_WHITE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e0a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->back_color = C_BLACK;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	86da      	strh	r2, [r3, #54]	; 0x36
   g->next_window = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	605a      	str	r2, [r3, #4]
   g->active_window = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
   g->last_window = NULL;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
 8004e28:	e010      	b.n	8004e4c <UG_Init+0xac>
   {
      g->driver[i].driver = NULL;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	3307      	adds	r3, #7
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	2200      	movs	r2, #0
 8004e36:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	3307      	adds	r3, #7
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	2200      	movs	r2, #0
 8004e44:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d9eb      	bls.n	8004e2a <UG_Init+0x8a>
   }

   gui = g;
 8004e52:	4a05      	ldr	r2, [pc, #20]	; (8004e68 <UG_Init+0xc8>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6013      	str	r3, [r2, #0]
   return 1;
 8004e58:	2301      	movs	r3, #1
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000310 	.word	0x20000310

08004e6c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <UG_FontSelect+0x1c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	611a      	str	r2, [r3, #16]
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	20000310 	.word	0x20000310

08004e8c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	4603      	mov	r3, r0
 8004e94:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <UG_FillScreen+0x44>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	b21a      	sxth	r2, r3
 8004ea8:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <UG_FillScreen+0x44>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	b219      	sxth	r1, r3
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f000 f806 	bl	8004ed4 <UG_FillFrame>
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000310 	.word	0x20000310

08004ed4 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004ed4:	b5b0      	push	{r4, r5, r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	4604      	mov	r4, r0
 8004edc:	4608      	mov	r0, r1
 8004ede:	4611      	mov	r1, r2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4623      	mov	r3, r4
 8004ee4:	80fb      	strh	r3, [r7, #6]
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	80bb      	strh	r3, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	807b      	strh	r3, [r7, #2]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8004ef2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	da05      	bge.n	8004f0a <UG_FillFrame+0x36>
     swap(x1,x2);
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	817b      	strh	r3, [r7, #10]
 8004f02:	887b      	ldrh	r3, [r7, #2]
 8004f04:	80fb      	strh	r3, [r7, #6]
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8004f0a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	da05      	bge.n	8004f22 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8004f16:	88bb      	ldrh	r3, [r7, #4]
 8004f18:	813b      	strh	r3, [r7, #8]
 8004f1a:	883b      	ldrh	r3, [r7, #0]
 8004f1c:	80bb      	strh	r3, [r7, #4]
 8004f1e:	893b      	ldrh	r3, [r7, #8]
 8004f20:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <UG_FillFrame+0xe0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004f32:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <UG_FillFrame+0xe0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	461d      	mov	r5, r3
 8004f3a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004f3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004f42:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f46:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f4a:	8c3b      	ldrh	r3, [r7, #32]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	4623      	mov	r3, r4
 8004f50:	47a8      	blx	r5
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d028      	beq.n	8004faa <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8004f58:	88bb      	ldrh	r3, [r7, #4]
 8004f5a:	81bb      	strh	r3, [r7, #12]
 8004f5c:	e01e      	b.n	8004f9c <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	81fb      	strh	r3, [r7, #14]
 8004f62:	e00f      	b.n	8004f84 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8004f64:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <UG_FillFrame+0xe0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	8c3a      	ldrh	r2, [r7, #32]
 8004f6e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004f72:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004f76:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8004f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	81fb      	strh	r3, [r7, #14]
 8004f84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004f88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	dde9      	ble.n	8004f64 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8004f90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3301      	adds	r3, #1
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	81bb      	strh	r3, [r7, #12]
 8004f9c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004fa0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	ddda      	ble.n	8004f5e <UG_FillFrame+0x8a>
 8004fa8:	e000      	b.n	8004fac <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004faa:	bf00      	nop
      }
   }
}
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000310 	.word	0x20000310

08004fb8 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	80fb      	strh	r3, [r7, #6]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	80bb      	strh	r3, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 8004fca:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <UG_DrawPixel+0x30>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004fd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004fdc:	4798      	blx	r3
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000310 	.word	0x20000310

08004fec <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004fec:	b5b0      	push	{r4, r5, r7, lr}
 8004fee:	b08a      	sub	sp, #40	; 0x28
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	80fb      	strh	r3, [r7, #6]
 8004ffe:	4603      	mov	r3, r0
 8005000:	80bb      	strh	r3, [r7, #4]
 8005002:	460b      	mov	r3, r1
 8005004:	807b      	strh	r3, [r7, #2]
 8005006:	4613      	mov	r3, r2
 8005008:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800500a:	4b67      	ldr	r3, [pc, #412]	; (80051a8 <UG_DrawLine+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d013      	beq.n	8005042 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <UG_DrawLine+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	461d      	mov	r5, r3
 8005022:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005026:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800502a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800502e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005032:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	4623      	mov	r3, r4
 8005038:	47a8      	blx	r5
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80ae 	beq.w	800519e <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800504c:	883a      	ldrh	r2, [r7, #0]
 800504e:	88bb      	ldrh	r3, [r7, #4]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	b29b      	uxth	r3, r3
 8005054:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8005056:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	bfb8      	it	lt
 800505e:	425b      	neglt	r3, r3
 8005060:	b29b      	uxth	r3, r3
 8005062:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8005064:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005068:	2b00      	cmp	r3, #0
 800506a:	bfb8      	it	lt
 800506c:	425b      	neglt	r3, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8005072:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	dd01      	ble.n	800507e <UG_DrawLine+0x92>
 800507a:	2301      	movs	r3, #1
 800507c:	e001      	b.n	8005082 <UG_DrawLine+0x96>
 800507e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005082:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8005084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005088:	2b00      	cmp	r3, #0
 800508a:	dd01      	ble.n	8005090 <UG_DrawLine+0xa4>
 800508c:	2301      	movs	r3, #1
 800508e:	e001      	b.n	8005094 <UG_DrawLine+0xa8>
 8005090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005094:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8005096:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800509a:	105b      	asrs	r3, r3, #1
 800509c:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800509e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80050a2:	105b      	asrs	r3, r3, #1
 80050a4:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 80050aa:	88bb      	ldrh	r3, [r7, #4]
 80050ac:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 80050ae:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <UG_DrawLine+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80050b8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80050bc:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80050c0:	4798      	blx	r3

   if( dxabs >= dyabs )
 80050c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80050c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	db33      	blt.n	8005136 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 80050ce:	2300      	movs	r3, #0
 80050d0:	83fb      	strh	r3, [r7, #30]
 80050d2:	e029      	b.n	8005128 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80050d4:	8b7a      	ldrh	r2, [r7, #26]
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	4413      	add	r3, r2
 80050da:	b29b      	uxth	r3, r3
 80050dc:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 80050de:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80050e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	db09      	blt.n	80050fe <UG_DrawLine+0x112>
         {
            y -= dxabs;
 80050ea:	8b7a      	ldrh	r2, [r7, #26]
 80050ec:	8a3b      	ldrh	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 80050f4:	8afa      	ldrh	r2, [r7, #22]
 80050f6:	897b      	ldrh	r3, [r7, #10]
 80050f8:	4413      	add	r3, r2
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80050fe:	8b3a      	ldrh	r2, [r7, #24]
 8005100:	89bb      	ldrh	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	b29b      	uxth	r3, r3
 8005106:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <UG_DrawLine+0x1bc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005112:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005116:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800511a:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800511c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005120:	b29b      	uxth	r3, r3
 8005122:	3301      	adds	r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	83fb      	strh	r3, [r7, #30]
 8005128:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800512c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005130:	429a      	cmp	r2, r3
 8005132:	dbcf      	blt.n	80050d4 <UG_DrawLine+0xe8>
 8005134:	e034      	b.n	80051a0 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8005136:	2300      	movs	r3, #0
 8005138:	83fb      	strh	r3, [r7, #30]
 800513a:	e029      	b.n	8005190 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800513c:	8bba      	ldrh	r2, [r7, #28]
 800513e:	8a3b      	ldrh	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	b29b      	uxth	r3, r3
 8005144:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8005146:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800514a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800514e:	429a      	cmp	r2, r3
 8005150:	db09      	blt.n	8005166 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8005152:	8bba      	ldrh	r2, [r7, #28]
 8005154:	89fb      	ldrh	r3, [r7, #14]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	b29b      	uxth	r3, r3
 800515a:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800515c:	8b3a      	ldrh	r2, [r7, #24]
 800515e:	89bb      	ldrh	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	b29b      	uxth	r3, r3
 8005164:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8005166:	8afa      	ldrh	r2, [r7, #22]
 8005168:	897b      	ldrh	r3, [r7, #10]
 800516a:	4413      	add	r3, r2
 800516c:	b29b      	uxth	r3, r3
 800516e:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <UG_DrawLine+0x1bc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800517a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800517e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005182:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8005184:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005188:	b29b      	uxth	r3, r3
 800518a:	3301      	adds	r3, #1
 800518c:	b29b      	uxth	r3, r3
 800518e:	83fb      	strh	r3, [r7, #30]
 8005190:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005198:	429a      	cmp	r2, r3
 800519a:	dbcf      	blt.n	800513c <UG_DrawLine+0x150>
 800519c:	e000      	b.n	80051a0 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800519e:	bf00      	nop
      }
   }  
}
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bdb0      	pop	{r4, r5, r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20000310 	.word	0x20000310

080051ac <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	4603      	mov	r3, r0
 80051b4:	603a      	str	r2, [r7, #0]
 80051b6:	80fb      	strh	r3, [r7, #6]
 80051b8:	460b      	mov	r3, r1
 80051ba:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80051c0:	88bb      	ldrh	r3, [r7, #4]
 80051c2:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80051c4:	4b3c      	ldr	r3, [pc, #240]	; (80052b8 <UG_PutString+0x10c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fa12 	bl	80055f4 <_UG_FontSelect>
   while ( *str != 0 )
 80051d0:	e054      	b.n	800527c <UG_PutString+0xd0>
      }
      else{
         chr = *str++;
      }
      #else
      chr = *str++;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	603a      	str	r2, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	72fb      	strb	r3, [r7, #11]
      #endif

      if ( chr == '\n' )
 80051dc:	7afb      	ldrb	r3, [r7, #11]
 80051de:	2b0a      	cmp	r3, #10
 80051e0:	d105      	bne.n	80051ee <UG_PutString+0x42>
      {
         xp = gui->device->x_dim;
 80051e2:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <UG_PutString+0x10c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	81fb      	strh	r3, [r7, #14]
         continue;
 80051ec:	e046      	b.n	800527c <UG_PutString+0xd0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80051ee:	7afb      	ldrb	r3, [r7, #11]
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f8ae 	bl	8005354 <_UG_GetCharData>
 80051f8:	4603      	mov	r3, r0
 80051fa:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80051fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005204:	d100      	bne.n	8005208 <UG_PutString+0x5c>
 8005206:	e039      	b.n	800527c <UG_PutString+0xd0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8005208:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <UG_PutString+0x10c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005212:	4619      	mov	r1, r3
 8005214:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005218:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	4299      	cmp	r1, r3
 8005220:	dc11      	bgt.n	8005246 <UG_PutString+0x9a>
      {
         xp = x;
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <UG_PutString+0x10c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	7ddb      	ldrb	r3, [r3, #23]
 800522c:	b21a      	sxth	r2, r3
 800522e:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <UG_PutString+0x10c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8005236:	b21b      	sxth	r3, r3
 8005238:	4413      	add	r3, r2
 800523a:	b21b      	sxth	r3, r3
 800523c:	b29a      	uxth	r2, r3
 800523e:	89bb      	ldrh	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <UG_PutString+0x10c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <UG_PutString+0x10c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005252:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005256:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800525a:	7af8      	ldrb	r0, [r7, #11]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	4623      	mov	r3, r4
 8005260:	f000 fa46 	bl	80056f0 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <UG_PutString+0x10c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800526c:	b29a      	uxth	r2, r3
 800526e:	893b      	ldrh	r3, [r7, #8]
 8005270:	4413      	add	r3, r2
 8005272:	b29a      	uxth	r2, r3
 8005274:	89fb      	ldrh	r3, [r7, #14]
 8005276:	4413      	add	r3, r2
 8005278:	b29b      	uxth	r3, r3
 800527a:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1a6      	bne.n	80051d2 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <UG_PutString+0x10c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <UG_PutString+0x102>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8005294:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <UG_PutString+0x10c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529a:	461c      	mov	r4, r3
 800529c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052ac:	47a0      	blx	r4
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd90      	pop	{r4, r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000310 	.word	0x20000310

080052bc <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <UG_SetForecolor+0x20>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000310 	.word	0x20000310

080052e0 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <UG_SetBackcolor+0x20>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	86da      	strh	r2, [r3, #54]	; 0x36
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000310 	.word	0x20000310

08005304 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <UG_FontSetHSpace+0x24>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	b252      	sxtb	r2, r2
 8005316:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000310 	.word	0x20000310

0800532c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <UG_FontSetVSpace+0x24>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	b252      	sxtb	r2, r2
 800533e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000310 	.word	0x20000310

08005354 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	6039      	str	r1, [r7, #0]
 800535e:	71fb      	strb	r3, [r7, #7]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8005360:	2300      	movs	r3, #0
 8005362:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8005364:	2300      	movs	r3, #0
 8005366:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8005368:	2300      	movs	r3, #0
 800536a:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 800536c:	2300      	movs	r3, #0
 800536e:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8005370:	2300      	movs	r3, #0
 8005372:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8005374:	4b9a      	ldr	r3, [pc, #616]	; (80055e0 <_UG_GetCharData+0x28c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537a:	4b9a      	ldr	r3, [pc, #616]	; (80055e4 <_UG_GetCharData+0x290>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d10f      	bne.n	80053a2 <_UG_GetCharData+0x4e>
 8005382:	4b99      	ldr	r3, [pc, #612]	; (80055e8 <_UG_GetCharData+0x294>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	79fa      	ldrb	r2, [r7, #7]
 8005388:	429a      	cmp	r2, r3
 800538a:	d10a      	bne.n	80053a2 <_UG_GetCharData+0x4e>
    if(p){
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8005392:	4b96      	ldr	r3, [pc, #600]	; (80055ec <_UG_GetCharData+0x298>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800539a:	4b95      	ldr	r3, [pc, #596]	; (80055f0 <_UG_GetCharData+0x29c>)
 800539c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053a0:	e119      	b.n	80055d6 <_UG_GetCharData+0x282>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80053a2:	4b8f      	ldr	r3, [pc, #572]	; (80055e0 <_UG_GetCharData+0x28c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	7d5b      	ldrb	r3, [r3, #21]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d07d      	beq.n	80054a8 <_UG_GetCharData+0x154>
    switch ( encoding )
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	2bfc      	cmp	r3, #252	; 0xfc
 80053b0:	f300 80ce 	bgt.w	8005550 <_UG_GetCharData+0x1fc>
 80053b4:	2bd6      	cmp	r3, #214	; 0xd6
 80053b6:	da09      	bge.n	80053cc <_UG_GetCharData+0x78>
 80053b8:	2bc4      	cmp	r3, #196	; 0xc4
 80053ba:	d06c      	beq.n	8005496 <_UG_GetCharData+0x142>
 80053bc:	2bc4      	cmp	r3, #196	; 0xc4
 80053be:	f300 80c7 	bgt.w	8005550 <_UG_GetCharData+0x1fc>
 80053c2:	2bb0      	cmp	r3, #176	; 0xb0
 80053c4:	d06d      	beq.n	80054a2 <_UG_GetCharData+0x14e>
 80053c6:	2bb5      	cmp	r3, #181	; 0xb5
 80053c8:	d068      	beq.n	800549c <_UG_GetCharData+0x148>
 80053ca:	e06e      	b.n	80054aa <_UG_GetCharData+0x156>
 80053cc:	3bd6      	subs	r3, #214	; 0xd6
 80053ce:	2b26      	cmp	r3, #38	; 0x26
 80053d0:	f200 80be 	bhi.w	8005550 <_UG_GetCharData+0x1fc>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <_UG_GetCharData+0x88>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	0800547f 	.word	0x0800547f
 80053e0:	08005551 	.word	0x08005551
 80053e4:	08005551 	.word	0x08005551
 80053e8:	08005551 	.word	0x08005551
 80053ec:	08005551 	.word	0x08005551
 80053f0:	08005551 	.word	0x08005551
 80053f4:	0800548b 	.word	0x0800548b
 80053f8:	08005551 	.word	0x08005551
 80053fc:	08005551 	.word	0x08005551
 8005400:	08005551 	.word	0x08005551
 8005404:	08005551 	.word	0x08005551
 8005408:	08005551 	.word	0x08005551
 800540c:	08005551 	.word	0x08005551
 8005410:	08005551 	.word	0x08005551
 8005414:	08005491 	.word	0x08005491
 8005418:	08005551 	.word	0x08005551
 800541c:	08005551 	.word	0x08005551
 8005420:	08005551 	.word	0x08005551
 8005424:	08005551 	.word	0x08005551
 8005428:	08005551 	.word	0x08005551
 800542c:	08005551 	.word	0x08005551
 8005430:	08005551 	.word	0x08005551
 8005434:	08005551 	.word	0x08005551
 8005438:	08005551 	.word	0x08005551
 800543c:	08005551 	.word	0x08005551
 8005440:	08005551 	.word	0x08005551
 8005444:	08005551 	.word	0x08005551
 8005448:	08005551 	.word	0x08005551
 800544c:	08005551 	.word	0x08005551
 8005450:	08005551 	.word	0x08005551
 8005454:	08005551 	.word	0x08005551
 8005458:	08005551 	.word	0x08005551
 800545c:	08005479 	.word	0x08005479
 8005460:	08005551 	.word	0x08005551
 8005464:	08005551 	.word	0x08005551
 8005468:	08005551 	.word	0x08005551
 800546c:	08005551 	.word	0x08005551
 8005470:	08005551 	.word	0x08005551
 8005474:	08005485 	.word	0x08005485
    {
       case 0xF6: encoding = 0x94; break; // ö
 8005478:	2394      	movs	r3, #148	; 0x94
 800547a:	71fb      	strb	r3, [r7, #7]
 800547c:	e015      	b.n	80054aa <_UG_GetCharData+0x156>
       case 0xD6: encoding = 0x99; break; // Ö
 800547e:	2399      	movs	r3, #153	; 0x99
 8005480:	71fb      	strb	r3, [r7, #7]
 8005482:	e012      	b.n	80054aa <_UG_GetCharData+0x156>
       case 0xFC: encoding = 0x81; break; // ü
 8005484:	2381      	movs	r3, #129	; 0x81
 8005486:	71fb      	strb	r3, [r7, #7]
 8005488:	e00f      	b.n	80054aa <_UG_GetCharData+0x156>
       case 0xDC: encoding = 0x9A; break; // Ü
 800548a:	239a      	movs	r3, #154	; 0x9a
 800548c:	71fb      	strb	r3, [r7, #7]
 800548e:	e00c      	b.n	80054aa <_UG_GetCharData+0x156>
       case 0xE4: encoding = 0x84; break; // ä
 8005490:	2384      	movs	r3, #132	; 0x84
 8005492:	71fb      	strb	r3, [r7, #7]
 8005494:	e009      	b.n	80054aa <_UG_GetCharData+0x156>
       case 0xC4: encoding = 0x8E; break; // Ä
 8005496:	238e      	movs	r3, #142	; 0x8e
 8005498:	71fb      	strb	r3, [r7, #7]
 800549a:	e006      	b.n	80054aa <_UG_GetCharData+0x156>
       case 0xB5: encoding = 0xE6; break; // µ
 800549c:	23e6      	movs	r3, #230	; 0xe6
 800549e:	71fb      	strb	r3, [r7, #7]
 80054a0:	e003      	b.n	80054aa <_UG_GetCharData+0x156>
       case 0xB0: encoding = 0xF8; break; // °
 80054a2:	23f8      	movs	r3, #248	; 0xf8
 80054a4:	71fb      	strb	r3, [r7, #7]
 80054a6:	e000      	b.n	80054aa <_UG_GetCharData+0x156>
    }
  }
 80054a8:	bf00      	nop

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80054aa:	e051      	b.n	8005550 <_UG_GetCharData+0x1fc>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80054ac:	4b4c      	ldr	r3, [pc, #304]	; (80055e0 <_UG_GetCharData+0x28c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	8a7a      	ldrh	r2, [r7, #18]
 80054b4:	0052      	lsls	r2, r2, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fc59 	bl	8004d70 <ptr_8to16>
 80054be:	4603      	mov	r3, r0
 80054c0:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80054c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	da06      	bge.n	80054d8 <_UG_GetCharData+0x184>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80054ca:	89fb      	ldrh	r3, [r7, #14]
 80054cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80054d0:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80054d2:	2301      	movs	r3, #1
 80054d4:	747b      	strb	r3, [r7, #17]
 80054d6:	e038      	b.n	800554a <_UG_GetCharData+0x1f6>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80054d8:	7c7b      	ldrb	r3, [r7, #17]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d025      	beq.n	800552a <_UG_GetCharData+0x1d6>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	8afa      	ldrh	r2, [r7, #22]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d80f      	bhi.n	8005508 <_UG_GetCharData+0x1b4>
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	89fa      	ldrh	r2, [r7, #14]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d30a      	bcc.n	8005508 <_UG_GetCharData+0x1b4>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	8afb      	ldrh	r3, [r7, #22]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	8abb      	ldrh	r3, [r7, #20]
 80054fe:	4413      	add	r3, r2
 8005500:	82bb      	strh	r3, [r7, #20]
        found=1;
 8005502:	2301      	movs	r3, #1
 8005504:	743b      	strb	r3, [r7, #16]
        break;
 8005506:	e02d      	b.n	8005564 <_UG_GetCharData+0x210>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	b29b      	uxth	r3, r3
 800550c:	8afa      	ldrh	r2, [r7, #22]
 800550e:	429a      	cmp	r2, r3
 8005510:	d825      	bhi.n	800555e <_UG_GetCharData+0x20a>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8005512:	89fa      	ldrh	r2, [r7, #14]
 8005514:	8afb      	ldrh	r3, [r7, #22]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	b29a      	uxth	r2, r3
 800551a:	8abb      	ldrh	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	3301      	adds	r3, #1
 8005522:	82bb      	strh	r3, [r7, #20]
      range=0;
 8005524:	2300      	movs	r3, #0
 8005526:	747b      	strb	r3, [r7, #17]
 8005528:	e00f      	b.n	800554a <_UG_GetCharData+0x1f6>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	b29b      	uxth	r3, r3
 800552e:	89fa      	ldrh	r2, [r7, #14]
 8005530:	429a      	cmp	r2, r3
 8005532:	d102      	bne.n	800553a <_UG_GetCharData+0x1e6>
      {
        found=1;
 8005534:	2301      	movs	r3, #1
 8005536:	743b      	strb	r3, [r7, #16]
        break;
 8005538:	e014      	b.n	8005564 <_UG_GetCharData+0x210>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	b29b      	uxth	r3, r3
 800553e:	89fa      	ldrh	r2, [r7, #14]
 8005540:	429a      	cmp	r2, r3
 8005542:	d80e      	bhi.n	8005562 <_UG_GetCharData+0x20e>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8005544:	8abb      	ldrh	r3, [r7, #20]
 8005546:	3301      	adds	r3, #1
 8005548:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800554a:	8a7b      	ldrh	r3, [r7, #18]
 800554c:	3301      	adds	r3, #1
 800554e:	827b      	strh	r3, [r7, #18]
 8005550:	4b23      	ldr	r3, [pc, #140]	; (80055e0 <_UG_GetCharData+0x28c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	8b9b      	ldrh	r3, [r3, #28]
 8005556:	8a7a      	ldrh	r2, [r7, #18]
 8005558:	429a      	cmp	r2, r3
 800555a:	d3a7      	bcc.n	80054ac <_UG_GetCharData+0x158>
 800555c:	e002      	b.n	8005564 <_UG_GetCharData+0x210>
        break;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <_UG_GetCharData+0x210>
        break;
 8005562:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8005564:	7c3b      	ldrb	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d033      	beq.n	80055d2 <_UG_GetCharData+0x27e>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800556a:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <_UG_GetCharData+0x28c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4a1c      	ldr	r2, [pc, #112]	; (80055e4 <_UG_GetCharData+0x290>)
 8005572:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8005574:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <_UG_GetCharData+0x294>)
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	7013      	strb	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 800557a:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <_UG_GetCharData+0x28c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	8aba      	ldrh	r2, [r7, #20]
 8005582:	4917      	ldr	r1, [pc, #92]	; (80055e0 <_UG_GetCharData+0x28c>)
 8005584:	6809      	ldr	r1, [r1, #0]
 8005586:	8b09      	ldrh	r1, [r1, #24]
 8005588:	fb01 f202 	mul.w	r2, r1, r2
 800558c:	4413      	add	r3, r2
 800558e:	4a17      	ldr	r2, [pc, #92]	; (80055ec <_UG_GetCharData+0x298>)
 8005590:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <_UG_GetCharData+0x28c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <_UG_GetCharData+0x25c>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 800559c:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <_UG_GetCharData+0x28c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	8abb      	ldrh	r3, [r7, #20]
 80055a4:	4413      	add	r3, r2
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	b21a      	sxth	r2, r3
 80055aa:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <_UG_GetCharData+0x29c>)
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	e005      	b.n	80055bc <_UG_GetCharData+0x268>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <_UG_GetCharData+0x28c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	7d9b      	ldrb	r3, [r3, #22]
 80055b6:	b21a      	sxth	r2, r3
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <_UG_GetCharData+0x29c>)
 80055ba:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <_UG_GetCharData+0x276>
      *p=last_p;                                                    // Load char bitmap address
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <_UG_GetCharData+0x298>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <_UG_GetCharData+0x29c>)
 80055cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055d0:	e001      	b.n	80055d6 <_UG_GetCharData+0x282>
  }
  return -1;                                                        // -1 = char not found
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000310 	.word	0x20000310
 80055e4:	20000314 	.word	0x20000314
 80055e8:	20000318 	.word	0x20000318
 80055ec:	2000031c 	.word	0x2000031c
 80055f0:	20000320 	.word	0x20000320

080055f4 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80055fc:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <_UG_FontSelect+0xf8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d06c      	beq.n	80056e2 <_UG_FontSelect+0xee>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005608:	4b38      	ldr	r3, [pc, #224]	; (80056ec <_UG_FontSelect+0xf8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	62da      	str	r2, [r3, #44]	; 0x2c
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	781a      	ldrb	r2, [r3, #0]
 8005614:	4b35      	ldr	r3, [pc, #212]	; (80056ec <_UG_FontSelect+0xf8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	751a      	strb	r2, [r3, #20]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b25b      	sxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	da01      	bge.n	8005632 <_UG_FontSelect+0x3e>
 800562e:	2201      	movs	r2, #1
 8005630:	e000      	b.n	8005634 <_UG_FontSelect+0x40>
 8005632:	2200      	movs	r2, #0
 8005634:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <_UG_FontSelect+0xf8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	755a      	strb	r2, [r3, #21]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	4a2a      	ldr	r2, [pc, #168]	; (80056ec <_UG_FontSelect+0xf8>)
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	7593      	strb	r3, [r2, #22]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	4a26      	ldr	r2, [pc, #152]	; (80056ec <_UG_FontSelect+0xf8>)
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	75d3      	strb	r3, [r2, #23]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005658:	4b24      	ldr	r3, [pc, #144]	; (80056ec <_UG_FontSelect+0xf8>)
 800565a:	681c      	ldr	r4, [r3, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fb87 	bl	8004d70 <ptr_8to16>
 8005662:	4603      	mov	r3, r0
 8005664:	8363      	strh	r3, [r4, #26]
  font+=2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3302      	adds	r3, #2
 800566a:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 800566c:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <_UG_FontSelect+0xf8>)
 800566e:	681c      	ldr	r4, [r3, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff fb7d 	bl	8004d70 <ptr_8to16>
 8005676:	4603      	mov	r3, r0
 8005678:	83a3      	strh	r3, [r4, #28]
  font+=2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3302      	adds	r3, #2
 800567e:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005680:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <_UG_FontSelect+0xf8>)
 8005682:	681c      	ldr	r4, [r3, #0]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff fb73 	bl	8004d70 <ptr_8to16>
 800568a:	4603      	mov	r3, r0
 800568c:	8323      	strh	r3, [r4, #24]
  font+=2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3302      	adds	r3, #2
 8005692:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <_UG_FontSelect+0xc4>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80056a0:	4b12      	ldr	r3, [pc, #72]	; (80056ec <_UG_FontSelect+0xf8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	621a      	str	r2, [r3, #32]
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80056a8:	4b10      	ldr	r3, [pc, #64]	; (80056ec <_UG_FontSelect+0xf8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	8b5b      	ldrh	r3, [r3, #26]
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4413      	add	r3, r2
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	e003      	b.n	80056c0 <_UG_FontSelect+0xcc>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <_UG_FontSelect+0xf8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2200      	movs	r2, #0
 80056be:	621a      	str	r2, [r3, #32]
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <_UG_FontSelect+0xf8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <_UG_FontSelect+0xf8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	8b9b      	ldrh	r3, [r3, #28]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <_UG_FontSelect+0xf8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28
 80056e0:	e000      	b.n	80056e4 <_UG_FontSelect+0xf0>
    return;
 80056e2:	bf00      	nop
}
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd90      	pop	{r4, r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000310 	.word	0x20000310

080056f0 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80056f0:	b5b0      	push	{r4, r5, r7, lr}
 80056f2:	b08c      	sub	sp, #48	; 0x30
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	461a      	mov	r2, r3
 80056fe:	4623      	mov	r3, r4
 8005700:	71fb      	strb	r3, [r7, #7]
 8005702:	4603      	mov	r3, r0
 8005704:	80bb      	strh	r3, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	807b      	strh	r3, [r7, #2]
 800570a:	4613      	mov	r3, r2
 800570c:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 800570e:	2300      	movs	r3, #0
 8005710:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005712:	2300      	movs	r3, #0
 8005714:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005716:	2300      	movs	r3, #0
 8005718:	847b      	strh	r3, [r7, #34]	; 0x22
 800571a:	2300      	movs	r3, #0
 800571c:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800571e:	4b8a      	ldr	r3, [pc, #552]	; (8005948 <_UG_PutChar+0x258>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005726:	75fb      	strb	r3, [r7, #23]
 8005728:	4b87      	ldr	r3, [pc, #540]	; (8005948 <_UG_PutChar+0x258>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800573a:	f107 0208 	add.w	r2, r7, #8
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	4611      	mov	r1, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fe06 	bl	8005354 <_UG_GetCharData>
 8005748:	4603      	mov	r3, r0
 800574a:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 800574c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005754:	d102      	bne.n	800575c <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8005756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575a:	e21e      	b.n	8005b9a <_UG_PutChar+0x4aa>

   bn =  gui->currentFont.char_width;
 800575c:	4b7a      	ldr	r3, [pc, #488]	; (8005948 <_UG_PutChar+0x258>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	7d9b      	ldrb	r3, [r3, #22]
 8005762:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8005764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <_UG_PutChar+0x7e>
     return 0;
 800576a:	2300      	movs	r3, #0
 800576c:	e215      	b.n	8005b9a <_UG_PutChar+0x4aa>
   }
   bn >>= 3;
 800576e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005770:	08db      	lsrs	r3, r3, #3
 8005772:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8005774:	4b74      	ldr	r3, [pc, #464]	; (8005948 <_UG_PutChar+0x258>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	7d9b      	ldrb	r3, [r3, #22]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <_UG_PutChar+0x9a>
 8005784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005786:	3301      	adds	r3, #1
 8005788:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 800578a:	7dbb      	ldrb	r3, [r7, #22]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01c      	beq.n	80057ca <_UG_PutChar+0xda>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005790:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <_UG_PutChar+0x258>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	461d      	mov	r5, r3
 8005798:	88ba      	ldrh	r2, [r7, #4]
 800579a:	8abb      	ldrh	r3, [r7, #20]
 800579c:	4413      	add	r3, r2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	b21c      	sxth	r4, r3
 80057a6:	4b68      	ldr	r3, [pc, #416]	; (8005948 <_UG_PutChar+0x258>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	7ddb      	ldrb	r3, [r3, #23]
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	4413      	add	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80057be:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80057c2:	4622      	mov	r2, r4
 80057c4:	47a8      	blx	r5
 80057c6:	4603      	mov	r3, r0
 80057c8:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80057ca:	4b5f      	ldr	r3, [pc, #380]	; (8005948 <_UG_PutChar+0x258>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	7d1b      	ldrb	r3, [r3, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f040 8171 	bne.w	8005ab8 <_UG_PutChar+0x3c8>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80057d6:	2300      	movs	r3, #0
 80057d8:	853b      	strh	r3, [r7, #40]	; 0x28
 80057da:	e0ec      	b.n	80059b6 <_UG_PutChar+0x2c6>
     {
       c=0;
 80057dc:	2300      	movs	r3, #0
 80057de:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 80057e0:	2300      	movs	r3, #0
 80057e2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80057e4:	e0df      	b.n	80059a6 <_UG_PutChar+0x2b6>
       {
         b = *data++;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	60ba      	str	r2, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80057f0:	2300      	movs	r3, #0
 80057f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057f4:	e0ca      	b.n	800598c <_UG_PutChar+0x29c>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80057f6:	7f7b      	ldrb	r3, [r7, #29]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d033      	beq.n	8005868 <_UG_PutChar+0x178>
           {
             if(driver)
 8005800:	7dbb      	ldrb	r3, [r7, #22]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01f      	beq.n	8005846 <_UG_PutChar+0x156>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005806:	8c3b      	ldrh	r3, [r7, #32]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <_UG_PutChar+0x132>
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <_UG_PutChar+0x132>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8005812:	8c3a      	ldrh	r2, [r7, #32]
 8005814:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4610      	mov	r0, r2
 800581c:	4798      	blx	r3
                 bpixels=0;
 800581e:	2300      	movs	r3, #0
 8005820:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <_UG_PutChar+0x14e>
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <_UG_PutChar+0x14e>
               {
                 x0=x+c;
 800582e:	88ba      	ldrh	r2, [r7, #4]
 8005830:	8bfb      	ldrh	r3, [r7, #30]
 8005832:	4413      	add	r3, r2
 8005834:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8005836:	887a      	ldrh	r2, [r7, #2]
 8005838:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800583a:	4413      	add	r3, r2
 800583c:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 800583e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005840:	3301      	adds	r3, #1
 8005842:	847b      	strh	r3, [r7, #34]	; 0x22
 8005844:	e096      	b.n	8005974 <_UG_PutChar+0x284>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005846:	4b40      	ldr	r3, [pc, #256]	; (8005948 <_UG_PutChar+0x258>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	88b9      	ldrh	r1, [r7, #4]
 8005850:	8bfa      	ldrh	r2, [r7, #30]
 8005852:	440a      	add	r2, r1
 8005854:	b292      	uxth	r2, r2
 8005856:	b210      	sxth	r0, r2
 8005858:	8879      	ldrh	r1, [r7, #2]
 800585a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800585c:	440a      	add	r2, r1
 800585e:	b292      	uxth	r2, r2
 8005860:	b211      	sxth	r1, r2
 8005862:	883a      	ldrh	r2, [r7, #0]
 8005864:	4798      	blx	r3
 8005866:	e085      	b.n	8005974 <_UG_PutChar+0x284>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8005868:	7dbb      	ldrb	r3, [r7, #22]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d06e      	beq.n	800594c <_UG_PutChar+0x25c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 800586e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005870:	2b00      	cmp	r3, #0
 8005872:	d064      	beq.n	800593e <_UG_PutChar+0x24e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8005874:	7dfb      	ldrb	r3, [r7, #23]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d15e      	bne.n	8005938 <_UG_PutChar+0x248>
                 {
                   push_pixels(fpixels,fc);
 800587a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800587c:	8839      	ldrh	r1, [r7, #0]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
                   fpixels=0;
 8005884:	2300      	movs	r3, #0
 8005886:	847b      	strh	r3, [r7, #34]	; 0x22
 8005888:	e059      	b.n	800593e <_UG_PutChar+0x24e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 800588a:	88ba      	ldrh	r2, [r7, #4]
 800588c:	8abb      	ldrh	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	b29a      	uxth	r2, r3
 8005892:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8005898:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800589a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d003      	beq.n	80058aa <_UG_PutChar+0x1ba>
 80058a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80058a4:	89fb      	ldrh	r3, [r7, #14]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d224      	bcs.n	80058f4 <_UG_PutChar+0x204>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80058aa:	4b27      	ldr	r3, [pc, #156]	; (8005948 <_UG_PutChar+0x258>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b0:	461d      	mov	r5, r3
 80058b2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80058b6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80058ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058bc:	89fb      	ldrh	r3, [r7, #14]
 80058be:	4413      	add	r3, r2
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	b21c      	sxth	r4, r3
 80058c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80058ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80058d6:	4413      	add	r3, r2
 80058d8:	b29b      	uxth	r3, r3
 80058da:	b21b      	sxth	r3, r3
 80058dc:	4622      	mov	r2, r4
 80058de:	47a8      	blx	r5
 80058e0:	4603      	mov	r3, r0
 80058e2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80058e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80058e6:	8839      	ldrh	r1, [r7, #0]
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	4610      	mov	r0, r2
 80058ec:	4798      	blx	r3
                       fpixels=0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80058f2:	e021      	b.n	8005938 <_UG_PutChar+0x248>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80058f4:	4b14      	ldr	r3, [pc, #80]	; (8005948 <_UG_PutChar+0x258>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fa:	461c      	mov	r4, r3
 80058fc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005900:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005904:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005906:	89fb      	ldrh	r3, [r7, #14]
 8005908:	4413      	add	r3, r2
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29b      	uxth	r3, r3
 8005910:	b21a      	sxth	r2, r3
 8005912:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005916:	47a0      	blx	r4
 8005918:	4603      	mov	r3, r0
 800591a:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800591c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800591e:	8839      	ldrh	r1, [r7, #0]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	4610      	mov	r0, r2
 8005924:	4798      	blx	r3
                       fpixels -= width;
 8005926:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 800592e:	88bb      	ldrh	r3, [r7, #4]
 8005930:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8005932:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005934:	3301      	adds	r3, #1
 8005936:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8005938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1a5      	bne.n	800588a <_UG_PutChar+0x19a>
                     }
                   }
                 }
               }
               bpixels++;
 800593e:	8c3b      	ldrh	r3, [r7, #32]
 8005940:	3301      	adds	r3, #1
 8005942:	843b      	strh	r3, [r7, #32]
 8005944:	e016      	b.n	8005974 <_UG_PutChar+0x284>
 8005946:	bf00      	nop
 8005948:	20000310 	.word	0x20000310
             }
             else if(!trans)                           // Not accelerated output
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d110      	bne.n	8005974 <_UG_PutChar+0x284>
             {
               gui->device->pset(x+c,y+j,bc);
 8005952:	4b94      	ldr	r3, [pc, #592]	; (8005ba4 <_UG_PutChar+0x4b4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	88b9      	ldrh	r1, [r7, #4]
 800595c:	8bfa      	ldrh	r2, [r7, #30]
 800595e:	440a      	add	r2, r1
 8005960:	b292      	uxth	r2, r2
 8005962:	b210      	sxth	r0, r2
 8005964:	8879      	ldrh	r1, [r7, #2]
 8005966:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005968:	440a      	add	r2, r1
 800596a:	b292      	uxth	r2, r2
 800596c:	b211      	sxth	r1, r2
 800596e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005972:	4798      	blx	r3
             }
           }
           b >>= 1;
 8005974:	7f7b      	ldrb	r3, [r7, #29]
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	777b      	strb	r3, [r7, #29]
           c++;
 800597a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800597e:	b29b      	uxth	r3, r3
 8005980:	3301      	adds	r3, #1
 8005982:	b29b      	uxth	r3, r3
 8005984:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005986:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005988:	3301      	adds	r3, #1
 800598a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800598c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800598e:	2b07      	cmp	r3, #7
 8005990:	d806      	bhi.n	80059a0 <_UG_PutChar+0x2b0>
 8005992:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005996:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800599a:	429a      	cmp	r2, r3
 800599c:	f6ff af2b 	blt.w	80057f6 <_UG_PutChar+0x106>
       for( i=0;i<bn;i++ )
 80059a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059a2:	3301      	adds	r3, #1
 80059a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80059a6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80059a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059aa:	429a      	cmp	r2, r3
 80059ac:	f4ff af1b 	bcc.w	80057e6 <_UG_PutChar+0xf6>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80059b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059b2:	3301      	adds	r3, #1
 80059b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80059b6:	4b7b      	ldr	r3, [pc, #492]	; (8005ba4 <_UG_PutChar+0x4b4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	7ddb      	ldrb	r3, [r3, #23]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80059c0:	429a      	cmp	r2, r3
 80059c2:	f4ff af0b 	bcc.w	80057dc <_UG_PutChar+0xec>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80059c6:	7dbb      	ldrb	r3, [r7, #22]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80e4 	beq.w	8005b96 <_UG_PutChar+0x4a6>
       if(bpixels && !trans)
 80059ce:	8c3b      	ldrh	r3, [r7, #32]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d009      	beq.n	80059e8 <_UG_PutChar+0x2f8>
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <_UG_PutChar+0x2f8>
       {
         push_pixels(bpixels,bc);
 80059da:	8c3a      	ldrh	r2, [r7, #32]
 80059dc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	4610      	mov	r0, r2
 80059e4:	4798      	blx	r3
 80059e6:	e0d6      	b.n	8005b96 <_UG_PutChar+0x4a6>
       }
       else if(fpixels)
 80059e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80d3 	beq.w	8005b96 <_UG_PutChar+0x4a6>
       {
         if(!trans)
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d15c      	bne.n	8005ab0 <_UG_PutChar+0x3c0>
         {
           push_pixels(fpixels,fc);
 80059f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80059f8:	8839      	ldrh	r1, [r7, #0]
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	4610      	mov	r0, r2
 80059fe:	4798      	blx	r3
 8005a00:	e0c9      	b.n	8005b96 <_UG_PutChar+0x4a6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8005a02:	88ba      	ldrh	r2, [r7, #4]
 8005a04:	8abb      	ldrh	r3, [r7, #20]
 8005a06:	4413      	add	r3, r2
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8005a10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d003      	beq.n	8005a22 <_UG_PutChar+0x332>
 8005a1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a1c:	8a3b      	ldrh	r3, [r7, #16]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d224      	bcs.n	8005a6c <_UG_PutChar+0x37c>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005a22:	4b60      	ldr	r3, [pc, #384]	; (8005ba4 <_UG_PutChar+0x4b4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a28:	461d      	mov	r5, r3
 8005a2a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005a2e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005a32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a34:	8a3b      	ldrh	r3, [r7, #16]
 8005a36:	4413      	add	r3, r2
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	b21c      	sxth	r4, r3
 8005a40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a46:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a4e:	4413      	add	r3, r2
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	b21b      	sxth	r3, r3
 8005a54:	4622      	mov	r2, r4
 8005a56:	47a8      	blx	r5
 8005a58:	4603      	mov	r3, r0
 8005a5a:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005a5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a5e:	8839      	ldrh	r1, [r7, #0]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	4610      	mov	r0, r2
 8005a64:	4798      	blx	r3
               fpixels=0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a6a:	e021      	b.n	8005ab0 <_UG_PutChar+0x3c0>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <_UG_PutChar+0x4b4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a72:	461c      	mov	r4, r3
 8005a74:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005a78:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005a7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a7e:	8a3b      	ldrh	r3, [r7, #16]
 8005a80:	4413      	add	r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	b21a      	sxth	r2, r3
 8005a8a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005a8e:	47a0      	blx	r4
 8005a90:	4603      	mov	r3, r0
 8005a92:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005a94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a96:	8839      	ldrh	r1, [r7, #0]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4798      	blx	r3
               fpixels -= width;
 8005a9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005aa0:	8a3b      	ldrh	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8005aa6:	88bb      	ldrh	r3, [r7, #4]
 8005aa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8005aaa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005aac:	3301      	adds	r3, #1
 8005aae:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8005ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1a5      	bne.n	8005a02 <_UG_PutChar+0x312>
 8005ab6:	e06e      	b.n	8005b96 <_UG_PutChar+0x4a6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8005ab8:	4b3a      	ldr	r3, [pc, #232]	; (8005ba4 <_UG_PutChar+0x4b4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	7d1b      	ldrb	r3, [r3, #20]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d169      	bne.n	8005b96 <_UG_PutChar+0x4a6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	853b      	strh	r3, [r7, #40]	; 0x28
 8005ac6:	e05f      	b.n	8005b88 <_UG_PutChar+0x498>
     {
       for( i=0;i<actual_char_width;i++ )
 8005ac8:	2300      	movs	r3, #0
 8005aca:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005acc:	e04a      	b.n	8005b64 <_UG_PutChar+0x474>
       {
         b = *data++;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	60ba      	str	r2, [r7, #8]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005ad8:	883b      	ldrh	r3, [r7, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	7f7a      	ldrb	r2, [r7, #29]
 8005ade:	fb03 f202 	mul.w	r2, r3, r2
 8005ae2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	7f79      	ldrb	r1, [r7, #29]
 8005aea:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8005aee:	fb01 f303 	mul.w	r3, r1, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	121b      	asrs	r3, r3, #8
 8005af6:	b21b      	sxth	r3, r3
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8005afc:	883b      	ldrh	r3, [r7, #0]
 8005afe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b02:	7f79      	ldrb	r1, [r7, #29]
 8005b04:	fb03 f101 	mul.w	r1, r3, r1
 8005b08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b10:	7f78      	ldrb	r0, [r7, #29]
 8005b12:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005b16:	fb00 f303 	mul.w	r3, r0, r3
 8005b1a:	440b      	add	r3, r1
 8005b1c:	121b      	asrs	r3, r3, #8
 8005b1e:	b21b      	sxth	r3, r3
 8005b20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b24:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8005b26:	4313      	orrs	r3, r2
 8005b28:	b21b      	sxth	r3, r3
 8005b2a:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005b2c:	7dbb      	ldrb	r3, [r7, #22]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <_UG_PutChar+0x44e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8005b32:	8a7a      	ldrh	r2, [r7, #18]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	4611      	mov	r1, r2
 8005b38:	2001      	movs	r0, #1
 8005b3a:	4798      	blx	r3
 8005b3c:	e00f      	b.n	8005b5e <_UG_PutChar+0x46e>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8005b3e:	4b19      	ldr	r3, [pc, #100]	; (8005ba4 <_UG_PutChar+0x4b4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	88b9      	ldrh	r1, [r7, #4]
 8005b48:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005b4a:	440a      	add	r2, r1
 8005b4c:	b292      	uxth	r2, r2
 8005b4e:	b210      	sxth	r0, r2
 8005b50:	8879      	ldrh	r1, [r7, #2]
 8005b52:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b54:	440a      	add	r2, r1
 8005b56:	b292      	uxth	r2, r2
 8005b58:	b211      	sxth	r1, r2
 8005b5a:	8a7a      	ldrh	r2, [r7, #18]
 8005b5c:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8005b5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b60:	3301      	adds	r3, #1
 8005b62:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b64:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005b66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	dbaf      	blt.n	8005ace <_UG_PutChar+0x3de>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4a0c      	ldr	r2, [pc, #48]	; (8005ba4 <_UG_PutChar+0x4b4>)
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	7d92      	ldrb	r2, [r2, #22]
 8005b76:	4611      	mov	r1, r2
 8005b78:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005b7c:	1a8a      	subs	r2, r1, r2
 8005b7e:	4413      	add	r3, r2
 8005b80:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005b82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b84:	3301      	adds	r3, #1
 8005b86:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <_UG_PutChar+0x4b4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	7ddb      	ldrb	r3, [r3, #23]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d398      	bcc.n	8005ac8 <_UG_PutChar+0x3d8>
     }
   }
   #endif
   return (actual_char_width);
 8005b96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3730      	adds	r7, #48	; 0x30
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000310 	.word	0x20000310

08005ba8 <_UG_UpdateObjects>:
   }
}
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	82fb      	strh	r3, [r7, #22]
 8005bba:	e01f      	b.n	8005bfc <_UG_UpdateObjects+0x54>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	8afb      	ldrh	r3, [r7, #22]
 8005bc2:	015b      	lsls	r3, r3, #5
 8005bc4:	4413      	add	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10e      	bne.n	8005bf6 <_UG_UpdateObjects+0x4e>
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <_UG_UpdateObjects+0x4e>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <_UG_UpdateObjects+0x4e>
         {
            obj->update(wnd,obj);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	6939      	ldr	r1, [r7, #16]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8005bf6:	8afb      	ldrh	r3, [r7, #22]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	82fb      	strh	r3, [r7, #22]
 8005bfc:	8afa      	ldrh	r2, [r7, #22]
 8005bfe:	8abb      	ldrh	r3, [r7, #20]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d3db      	bcc.n	8005bbc <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8005c18:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <_UG_HandleEvents+0x94>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8005c1e:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <_UG_HandleEvents+0x94>)
 8005c20:	2202      	movs	r2, #2
 8005c22:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	82fb      	strh	r3, [r7, #22]
 8005c2e:	e02f      	b.n	8005c90 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	8afb      	ldrh	r3, [r7, #22]
 8005c36:	015b      	lsls	r3, r3, #5
 8005c38:	4413      	add	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11e      	bne.n	8005c8a <_UG_HandleEvents+0x7a>
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d019      	beq.n	8005c8a <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	7e9b      	ldrb	r3, [r3, #26]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d015      	beq.n	8005c8a <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8005c5e:	4a11      	ldr	r2, [pc, #68]	; (8005ca4 <_UG_HandleEvents+0x94>)
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	7e1a      	ldrb	r2, [r3, #24]
 8005c68:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <_UG_HandleEvents+0x94>)
 8005c6a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	7e5a      	ldrb	r2, [r3, #25]
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <_UG_HandleEvents+0x94>)
 8005c72:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	7e9a      	ldrb	r2, [r3, #26]
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <_UG_HandleEvents+0x94>)
 8005c7a:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	4808      	ldr	r0, [pc, #32]	; (8005ca4 <_UG_HandleEvents+0x94>)
 8005c82:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2200      	movs	r2, #0
 8005c88:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8005c8a:	8afb      	ldrh	r3, [r7, #22]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	82fb      	strh	r3, [r7, #22]
 8005c90:	8afa      	ldrh	r2, [r7, #22]
 8005c92:	8abb      	ldrh	r3, [r7, #20]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d3cb      	bcc.n	8005c30 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000324 	.word	0x20000324

08005ca8 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b08f      	sub	sp, #60	; 0x3c
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8102 	beq.w	8005ebe <_UG_PutText+0x216>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80fd 	beq.w	8005ebe <_UG_PutText+0x216>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	89db      	ldrh	r3, [r3, #14]
 8005cc8:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	895b      	ldrh	r3, [r3, #10]
 8005cce:	833b      	strh	r3, [r7, #24]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	82fb      	strh	r3, [r7, #22]

   if ( (ye - ys) < char_height ){
 8005cda:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005cde:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	f2c0 80ea 	blt.w	8005ec2 <_UG_PutText+0x21a>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	891b      	ldrh	r3, [r3, #8]
 8005cf2:	82bb      	strh	r3, [r7, #20]
   UG_S16 xe=txt->a.xe;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	899b      	ldrh	r3, [r3, #12]
 8005cf8:	827b      	strh	r3, [r7, #18]
   UG_U8  align=txt->align;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	7d1b      	ldrb	r3, [r3, #20]
 8005cfe:	747b      	strb	r3, [r7, #17]
   UG_S16 char_h_space=txt->h_space;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8adb      	ldrh	r3, [r3, #22]
 8005d04:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_v_space=txt->v_space;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	8b1b      	ldrh	r3, [r3, #24]
 8005d0a:	81bb      	strh	r3, [r7, #12]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	623b      	str	r3, [r7, #32]
   char* c = str;
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	61fb      	str	r3, [r7, #28]

   _UG_FontSelect(txt->font);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fc6a 	bl	80055f4 <_UG_FontSelect>

   rc=1;
 8005d20:	2301      	movs	r3, #1
 8005d22:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	61fb      	str	r3, [r7, #28]
     }
     else{
       chr = *c++;
     }
     #else
     chr = *c++;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	61fa      	str	r2, [r7, #28]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	72fb      	strb	r3, [r7, #11]
     #endif
     if(!chr) break;
 8005d32:	7afb      	ldrb	r3, [r7, #11]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d006      	beq.n	8005d46 <_UG_PutText+0x9e>
     if ( chr == '\n' ) rc++;
 8005d38:	7afb      	ldrb	r3, [r7, #11]
 8005d3a:	2b0a      	cmp	r3, #10
 8005d3c:	d1f4      	bne.n	8005d28 <_UG_PutText+0x80>
 8005d3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d40:	3301      	adds	r3, #1
 8005d42:	85bb      	strh	r3, [r7, #44]	; 0x2c
     chr = *c++;
 8005d44:	e7f0      	b.n	8005d28 <_UG_PutText+0x80>
     if(!chr) break;
 8005d46:	bf00      	nop
   }

   yp = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8005d4c:	7c7b      	ldrb	r3, [r7, #17]
 8005d4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01f      	beq.n	8005d96 <_UG_PutText+0xee>
   {
      yp = ye - ys + 1;
 8005d56:	8b7a      	ldrh	r2, [r7, #26]
 8005d58:	8b3b      	ldrh	r3, [r7, #24]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3301      	adds	r3, #1
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8005d64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d66:	8afb      	ldrh	r3, [r7, #22]
 8005d68:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8005d6a:	fb11 f303 	smulbb	r3, r1, r3
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8005d76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b299      	uxth	r1, r3
 8005d7e:	89bb      	ldrh	r3, [r7, #12]
 8005d80:	fb11 f303 	smulbb	r3, r1, r3
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8005d8c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f2c0 8098 	blt.w	8005ec6 <_UG_PutText+0x21e>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8005d96:	7c7b      	ldrb	r3, [r7, #17]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <_UG_PutText+0x100>
 8005da0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005da4:	105b      	asrs	r3, r3, #1
 8005da6:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8005da8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005daa:	8b3b      	ldrh	r3, [r7, #24]
 8005dac:	4413      	add	r3, r2
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	61fb      	str	r3, [r7, #28]
      wl = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        else{
          chr = *c++;
        }
        #else
        chr = *c++;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	61fa      	str	r2, [r7, #28]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	72fb      	strb	r3, [r7, #11]
        #endif
        if( chr == 0 || chr == '\n'){
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01b      	beq.n	8005e06 <_UG_PutText+0x15e>
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	2b0a      	cmp	r3, #10
 8005dd2:	d018      	beq.n	8005e06 <_UG_PutText+0x15e>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fabb 	bl	8005354 <_UG_GetCharData>
 8005dde:	4603      	mov	r3, r0
 8005de0:	813b      	strh	r3, [r7, #8]
         if (w == -1){continue;}
 8005de2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dea:	d00a      	beq.n	8005e02 <_UG_PutText+0x15a>
         sl++;
 8005dec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005dee:	3301      	adds	r3, #1
 8005df0:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8005df2:	893a      	ldrh	r2, [r7, #8]
 8005df4:	89fb      	ldrh	r3, [r7, #14]
 8005df6:	4413      	add	r3, r2
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005dfc:	4413      	add	r3, r2
 8005dfe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e00:	e7dd      	b.n	8005dbe <_UG_PutText+0x116>
         if (w == -1){continue;}
 8005e02:	bf00      	nop
        chr = *c++;
 8005e04:	e7db      	b.n	8005dbe <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 8005e06:	89fb      	ldrh	r3, [r7, #14]
 8005e08:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8005e0e:	8a7a      	ldrh	r2, [r7, #18]
 8005e10:	8abb      	ldrh	r3, [r7, #20]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3301      	adds	r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8005e1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8005e26:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	db4d      	blt.n	8005eca <_UG_PutText+0x222>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8005e2e:	7c7b      	ldrb	r3, [r7, #17]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <_UG_PutText+0x196>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e3c:	e008      	b.n	8005e50 <_UG_PutText+0x1a8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8005e3e:	7c7b      	ldrb	r3, [r7, #17]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <_UG_PutText+0x1a8>
 8005e48:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005e4c:	105b      	asrs	r3, r3, #1
 8005e4e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8005e50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e52:	8abb      	ldrh	r3, [r7, #20]
 8005e54:	4413      	add	r3, r2
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	853b      	strh	r3, [r7, #40]	; 0x28
         }
         else{
           chr = *str++;
         }
         #else
         chr = *str++;
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	623a      	str	r2, [r7, #32]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	72fb      	strb	r3, [r7, #11]
         #endif
         if ( chr == 0 ){
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d031      	beq.n	8005ece <_UG_PutText+0x226>
           return;
         }
         else if(chr=='\n'){
 8005e6a:	7afb      	ldrb	r3, [r7, #11]
 8005e6c:	2b0a      	cmp	r3, #10
 8005e6e:	d01c      	beq.n	8005eaa <_UG_PutText+0x202>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8a1c      	ldrh	r4, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8a5b      	ldrh	r3, [r3, #18]
 8005e78:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005e7c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8005e80:	7af8      	ldrb	r0, [r7, #11]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	4623      	mov	r3, r4
 8005e86:	f7ff fc33 	bl	80056f0 <_UG_PutChar>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	813b      	strh	r3, [r7, #8]
         if(w!=-1)
 8005e8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e96:	d0e0      	beq.n	8005e5a <_UG_PutText+0x1b2>
           xp += w + char_h_space;
 8005e98:	893a      	ldrh	r2, [r7, #8]
 8005e9a:	89fb      	ldrh	r3, [r7, #14]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ea2:	4413      	add	r3, r2
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	853b      	strh	r3, [r7, #40]	; 0x28
         chr = *str++;
 8005ea8:	e7d7      	b.n	8005e5a <_UG_PutText+0x1b2>
           break;
 8005eaa:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8005eac:	8afa      	ldrh	r2, [r7, #22]
 8005eae:	89bb      	ldrh	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eb6:	4413      	add	r3, r2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8005ebc:	e779      	b.n	8005db2 <_UG_PutText+0x10a>
     return;
 8005ebe:	bf00      	nop
 8005ec0:	e006      	b.n	8005ed0 <_UG_PutText+0x228>
     return;
 8005ec2:	bf00      	nop
 8005ec4:	e004      	b.n	8005ed0 <_UG_PutText+0x228>
        return;
 8005ec6:	bf00      	nop
 8005ec8:	e002      	b.n	8005ed0 <_UG_PutText+0x228>
      if ( xp < 0 ) break;
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <_UG_PutText+0x228>
           return;
 8005ece:	bf00      	nop
   }
}
 8005ed0:	3734      	adds	r7, #52	; 0x34
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd90      	pop	{r4, r7, pc}

08005ed6 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8005ed6:	b5b0      	push	{r4, r5, r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af02      	add	r7, sp, #8
 8005edc:	4604      	mov	r4, r0
 8005ede:	4608      	mov	r0, r1
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4623      	mov	r3, r4
 8005ee6:	80fb      	strh	r3, [r7, #6]
 8005ee8:	4603      	mov	r3, r0
 8005eea:	80bb      	strh	r3, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	807b      	strh	r3, [r7, #2]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8005ef4:	887b      	ldrh	r3, [r7, #2]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	b21c      	sxth	r4, r3
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	1c9a      	adds	r2, r3, #2
 8005f00:	61ba      	str	r2, [r7, #24]
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	4622      	mov	r2, r4
 8005f16:	f7ff f869 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8005f1a:	88bb      	ldrh	r3, [r7, #4]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	b219      	sxth	r1, r3
 8005f22:	883b      	ldrh	r3, [r7, #0]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	b21c      	sxth	r4, r3
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	1c9a      	adds	r2, r3, #2
 8005f2e:	61ba      	str	r2, [r7, #24]
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	f7ff f855 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	1c9a      	adds	r2, r3, #2
 8005f46:	61ba      	str	r2, [r7, #24]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005f4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f52:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005f56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	f7ff f845 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8005f62:	883b      	ldrh	r3, [r7, #0]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	b21c      	sxth	r4, r3
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	1c9a      	adds	r2, r3, #2
 8005f6e:	61ba      	str	r2, [r7, #24]
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f76:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f7a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4623      	mov	r3, r4
 8005f82:	f7ff f833 	bl	8004fec <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	b218      	sxth	r0, r3
 8005f8e:	88bb      	ldrh	r3, [r7, #4]
 8005f90:	3301      	adds	r3, #1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	b219      	sxth	r1, r3
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	3b02      	subs	r3, #2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	b21c      	sxth	r4, r3
 8005f9e:	88bb      	ldrh	r3, [r7, #4]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	b21d      	sxth	r5, r3
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	1c9a      	adds	r2, r3, #2
 8005faa:	61ba      	str	r2, [r7, #24]
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	f7ff f81a 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	b218      	sxth	r0, r3
 8005fc0:	88bb      	ldrh	r3, [r7, #4]
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	b219      	sxth	r1, r3
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	b21c      	sxth	r4, r3
 8005fd0:	883b      	ldrh	r3, [r7, #0]
 8005fd2:	3b02      	subs	r3, #2
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	b21d      	sxth	r5, r3
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	1c9a      	adds	r2, r3, #2
 8005fdc:	61ba      	str	r2, [r7, #24]
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	f7ff f801 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	3301      	adds	r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	b218      	sxth	r0, r3
 8005ff2:	883b      	ldrh	r3, [r7, #0]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	b219      	sxth	r1, r3
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	b21c      	sxth	r4, r3
 8006002:	883b      	ldrh	r3, [r7, #0]
 8006004:	3b01      	subs	r3, #1
 8006006:	b29b      	uxth	r3, r3
 8006008:	b21d      	sxth	r5, r3
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	1c9a      	adds	r2, r3, #2
 800600e:	61ba      	str	r2, [r7, #24]
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	462b      	mov	r3, r5
 8006016:	4622      	mov	r2, r4
 8006018:	f7fe ffe8 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800601c:	887b      	ldrh	r3, [r7, #2]
 800601e:	3b01      	subs	r3, #1
 8006020:	b29b      	uxth	r3, r3
 8006022:	b218      	sxth	r0, r3
 8006024:	88bb      	ldrh	r3, [r7, #4]
 8006026:	3301      	adds	r3, #1
 8006028:	b29b      	uxth	r3, r3
 800602a:	b219      	sxth	r1, r3
 800602c:	887b      	ldrh	r3, [r7, #2]
 800602e:	3b01      	subs	r3, #1
 8006030:	b29b      	uxth	r3, r3
 8006032:	b21c      	sxth	r4, r3
 8006034:	883b      	ldrh	r3, [r7, #0]
 8006036:	3b02      	subs	r3, #2
 8006038:	b29b      	uxth	r3, r3
 800603a:	b21d      	sxth	r5, r3
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	1c9a      	adds	r2, r3, #2
 8006040:	61ba      	str	r2, [r7, #24]
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	462b      	mov	r3, r5
 8006048:	4622      	mov	r2, r4
 800604a:	f7fe ffcf 	bl	8004fec <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	3302      	adds	r3, #2
 8006052:	b29b      	uxth	r3, r3
 8006054:	b218      	sxth	r0, r3
 8006056:	88bb      	ldrh	r3, [r7, #4]
 8006058:	3302      	adds	r3, #2
 800605a:	b29b      	uxth	r3, r3
 800605c:	b219      	sxth	r1, r3
 800605e:	887b      	ldrh	r3, [r7, #2]
 8006060:	3b03      	subs	r3, #3
 8006062:	b29b      	uxth	r3, r3
 8006064:	b21c      	sxth	r4, r3
 8006066:	88bb      	ldrh	r3, [r7, #4]
 8006068:	3302      	adds	r3, #2
 800606a:	b29b      	uxth	r3, r3
 800606c:	b21d      	sxth	r5, r3
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	61ba      	str	r2, [r7, #24]
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	462b      	mov	r3, r5
 800607a:	4622      	mov	r2, r4
 800607c:	f7fe ffb6 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8006080:	88fb      	ldrh	r3, [r7, #6]
 8006082:	3302      	adds	r3, #2
 8006084:	b29b      	uxth	r3, r3
 8006086:	b218      	sxth	r0, r3
 8006088:	88bb      	ldrh	r3, [r7, #4]
 800608a:	3303      	adds	r3, #3
 800608c:	b29b      	uxth	r3, r3
 800608e:	b219      	sxth	r1, r3
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	3302      	adds	r3, #2
 8006094:	b29b      	uxth	r3, r3
 8006096:	b21c      	sxth	r4, r3
 8006098:	883b      	ldrh	r3, [r7, #0]
 800609a:	3b03      	subs	r3, #3
 800609c:	b29b      	uxth	r3, r3
 800609e:	b21d      	sxth	r5, r3
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	1c9a      	adds	r2, r3, #2
 80060a4:	61ba      	str	r2, [r7, #24]
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	462b      	mov	r3, r5
 80060ac:	4622      	mov	r2, r4
 80060ae:	f7fe ff9d 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	3302      	adds	r3, #2
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	b218      	sxth	r0, r3
 80060ba:	883b      	ldrh	r3, [r7, #0]
 80060bc:	3b02      	subs	r3, #2
 80060be:	b29b      	uxth	r3, r3
 80060c0:	b219      	sxth	r1, r3
 80060c2:	887b      	ldrh	r3, [r7, #2]
 80060c4:	3b02      	subs	r3, #2
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	b21c      	sxth	r4, r3
 80060ca:	883b      	ldrh	r3, [r7, #0]
 80060cc:	3b02      	subs	r3, #2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	b21d      	sxth	r5, r3
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	61ba      	str	r2, [r7, #24]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	462b      	mov	r3, r5
 80060de:	4622      	mov	r2, r4
 80060e0:	f7fe ff84 	bl	8004fec <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80060e4:	887b      	ldrh	r3, [r7, #2]
 80060e6:	3b02      	subs	r3, #2
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	b218      	sxth	r0, r3
 80060ec:	88bb      	ldrh	r3, [r7, #4]
 80060ee:	3302      	adds	r3, #2
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	b219      	sxth	r1, r3
 80060f4:	887b      	ldrh	r3, [r7, #2]
 80060f6:	3b02      	subs	r3, #2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	b21a      	sxth	r2, r3
 80060fc:	883b      	ldrh	r3, [r7, #0]
 80060fe:	3b03      	subs	r3, #3
 8006100:	b29b      	uxth	r3, r3
 8006102:	b21c      	sxth	r4, r3
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	4623      	mov	r3, r4
 800610c:	f7fe ff6e 	bl	8004fec <UG_DrawLine>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bdb0      	pop	{r4, r5, r7, pc}

08006118 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	6039      	str	r1, [r7, #0]
 8006122:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d810      	bhi.n	800614c <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800612a:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <UG_DriverRegister+0x40>)
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	3307      	adds	r3, #7
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4413      	add	r3, r2
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800613a:	4b07      	ldr	r3, [pc, #28]	; (8006158 <UG_DriverRegister+0x40>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	3307      	adds	r3, #7
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	2203      	movs	r2, #3
 8006148:	721a      	strb	r2, [r3, #8]
 800614a:	e000      	b.n	800614e <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800614c:	bf00      	nop
}
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	20000310 	.word	0x20000310

0800615c <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8006162:	4b5d      	ldr	r3, [pc, #372]	; (80062d8 <UG_Update+0x17c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UG_Update+0x2c>
 8006172:	4b59      	ldr	r3, [pc, #356]	; (80062d8 <UG_Update+0x17c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800617a:	4b57      	ldr	r3, [pc, #348]	; (80062d8 <UG_Update+0x17c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8006188:	4b53      	ldr	r3, [pc, #332]	; (80062d8 <UG_Update+0x17c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	4b52      	ldr	r3, [pc, #328]	; (80062d8 <UG_Update+0x17c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	d071      	beq.n	800627c <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8006198:	4b4f      	ldr	r3, [pc, #316]	; (80062d8 <UG_Update+0x17c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d06c      	beq.n	800627c <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80061a2:	4b4d      	ldr	r3, [pc, #308]	; (80062d8 <UG_Update+0x17c>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b4c      	ldr	r3, [pc, #304]	; (80062d8 <UG_Update+0x17c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6892      	ldr	r2, [r2, #8]
 80061ac:	60da      	str	r2, [r3, #12]
         gui->active_window = gui->next_window;
 80061ae:	4b4a      	ldr	r3, [pc, #296]	; (80062d8 <UG_Update+0x17c>)
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b49      	ldr	r3, [pc, #292]	; (80062d8 <UG_Update+0x17c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6852      	ldr	r2, [r2, #4]
 80061b8:	609a      	str	r2, [r3, #8]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80061ba:	4b47      	ldr	r3, [pc, #284]	; (80062d8 <UG_Update+0x17c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d045      	beq.n	8006250 <UG_Update+0xf4>
 80061c4:	4b44      	ldr	r3, [pc, #272]	; (80062d8 <UG_Update+0x17c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	7d9b      	ldrb	r3, [r3, #22]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d03d      	beq.n	8006250 <UG_Update+0xf4>
 80061d4:	4b40      	ldr	r3, [pc, #256]	; (80062d8 <UG_Update+0x17c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	7a1b      	ldrb	r3, [r3, #8]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d035      	beq.n	8006250 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80061e4:	4b3c      	ldr	r3, [pc, #240]	; (80062d8 <UG_Update+0x17c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80061ee:	4b3a      	ldr	r3, [pc, #232]	; (80062d8 <UG_Update+0x17c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d123      	bne.n	8006244 <UG_Update+0xe8>
 80061fc:	4b36      	ldr	r3, [pc, #216]	; (80062d8 <UG_Update+0x17c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006206:	4b34      	ldr	r3, [pc, #208]	; (80062d8 <UG_Update+0x17c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006210:	429a      	cmp	r2, r3
 8006212:	d117      	bne.n	8006244 <UG_Update+0xe8>
 8006214:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <UG_Update+0x17c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800621e:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <UG_Update+0x17c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006228:	429a      	cmp	r2, r3
 800622a:	d10b      	bne.n	8006244 <UG_Update+0xe8>
 800622c:	4b2a      	ldr	r3, [pc, #168]	; (80062d8 <UG_Update+0x17c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8006236:	4b28      	ldr	r3, [pc, #160]	; (80062d8 <UG_Update+0x17c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006240:	429a      	cmp	r2, r3
 8006242:	d005      	beq.n	8006250 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006244:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <UG_Update+0x17c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f966 	bl	800651c <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006250:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <UG_Update+0x17c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	7a1a      	ldrb	r2, [r3, #8]
 8006258:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <UG_Update+0x17c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8006266:	4b1c      	ldr	r3, [pc, #112]	; (80062d8 <UG_Update+0x17c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	7a1a      	ldrb	r2, [r3, #8]
 800626e:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <UG_Update+0x17c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <UG_Update+0x17c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <UG_Update+0x15c>
   {
      wnd = gui->active_window;
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <UG_Update+0x17c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	7a1b      	ldrb	r3, [r3, #8]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f9e8 	bl	8006670 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7a1b      	ldrb	r3, [r3, #8]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <UG_Update+0x15c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
         #endif
         _UG_UpdateObjects( wnd );
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff fc7b 	bl	8005ba8 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fcac 	bl	8005c10 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <UG_Update+0x17c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <UG_Update+0x172>
     gui->device->flush();
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <UG_Update+0x17c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4798      	blx	r3
   }
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000310 	.word	0x20000310

080062dc <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 80062dc:	b5b0      	push	{r4, r5, r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	603a      	str	r2, [r7, #0]
 80062e6:	80fb      	strh	r3, [r7, #6]
 80062e8:	460b      	mov	r3, r1
 80062ea:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 810c 	beq.w	800650e <UG_DrawBMP+0x232>

   if ( bmp->bpp == BMP_BPP_1){
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	7a1b      	ldrb	r3, [r3, #8]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d164      	bne.n	80063c8 <UG_DrawBMP+0xec>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 8006304:	2300      	movs	r3, #0
 8006306:	847b      	strh	r3, [r7, #34]	; 0x22
 8006308:	e057      	b.n	80063ba <UG_DrawBMP+0xde>
      {
         for(x=0;x<bmp->width;x++)
 800630a:	2300      	movs	r3, #0
 800630c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800630e:	e048      	b.n	80063a2 <UG_DrawBMP+0xc6>
         {
            yy = y / 8 ;
 8006310:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006314:	2b00      	cmp	r3, #0
 8006316:	da00      	bge.n	800631a <UG_DrawBMP+0x3e>
 8006318:	3307      	adds	r3, #7
 800631a:	10db      	asrs	r3, r3, #3
 800631c:	b21b      	sxth	r3, r3
 800631e:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 8006320:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006324:	425a      	negs	r2, r3
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	f002 0207 	and.w	r2, r2, #7
 800632e:	bf58      	it	pl
 8006330:	4253      	negpl	r3, r2
 8006332:	b21b      	sxth	r3, r3
 8006334:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 8006336:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	8889      	ldrh	r1, [r1, #4]
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	4413      	add	r3, r2
 8006346:	461a      	mov	r2, r3
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	2201      	movs	r2, #1
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 800635a:	7bba      	ldrb	r2, [r7, #14]
 800635c:	7b7b      	ldrb	r3, [r7, #13]
 800635e:	4013      	ands	r3, r2
 8006360:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <UG_DrawBMP+0x96>
 8006368:	4b6b      	ldr	r3, [pc, #428]	; (8006518 <UG_DrawBMP+0x23c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800636e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006370:	e003      	b.n	800637a <UG_DrawBMP+0x9e>
            else c = gui->back_color;
 8006372:	4b69      	ldr	r3, [pc, #420]	; (8006518 <UG_DrawBMP+0x23c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006378:	84fb      	strh	r3, [r7, #38]	; 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 800637a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	4413      	add	r3, r2
 8006380:	b29b      	uxth	r3, r3
 8006382:	b218      	sxth	r0, r3
 8006384:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006386:	88bb      	ldrh	r3, [r7, #4]
 8006388:	4413      	add	r3, r2
 800638a:	b29b      	uxth	r3, r3
 800638c:	b21b      	sxth	r3, r3
 800638e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006390:	4619      	mov	r1, r3
 8006392:	f7fe fe11 	bl	8004fb8 <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 8006396:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800639a:	b29b      	uxth	r3, r3
 800639c:	3301      	adds	r3, #1
 800639e:	b29b      	uxth	r3, r3
 80063a0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	8892      	ldrh	r2, [r2, #4]
 80063aa:	4293      	cmp	r3, r2
 80063ac:	dbb0      	blt.n	8006310 <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 80063ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3301      	adds	r3, #1
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80063ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	88d2      	ldrh	r2, [r2, #6]
 80063c2:	4293      	cmp	r3, r2
 80063c4:	dba1      	blt.n	800630a <UG_DrawBMP+0x2e>
         }
      }
     return;
 80063c6:	e0a3      	b.n	8006510 <UG_DrawBMP+0x234>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	7a1b      	ldrb	r3, [r3, #8]
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	f040 809f 	bne.w	8006510 <UG_DrawBMP+0x234>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 80063d2:	4b51      	ldr	r3, [pc, #324]	; (8006518 <UG_DrawBMP+0x23c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <UG_DrawBMP+0x11e>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 80063e2:	4b4d      	ldr	r3, [pc, #308]	; (8006518 <UG_DrawBMP+0x23c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	461c      	mov	r4, r3
 80063ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80063ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	47a0      	blx	r4
        return;
 80063f8:	e08a      	b.n	8006510 <UG_DrawBMP+0x234>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 80063fa:	4b47      	ldr	r3, [pc, #284]	; (8006518 <UG_DrawBMP+0x23c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d04b      	beq.n	80064a2 <UG_DrawBMP+0x1c6>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 800640a:	4b43      	ldr	r3, [pc, #268]	; (8006518 <UG_DrawBMP+0x23c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006410:	461d      	mov	r5, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	889a      	ldrh	r2, [r3, #4]
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	4413      	add	r3, r2
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29b      	uxth	r3, r3
 8006420:	b21c      	sxth	r4, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	88da      	ldrh	r2, [r3, #6]
 8006426:	88bb      	ldrh	r3, [r7, #4]
 8006428:	4413      	add	r3, r2
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29b      	uxth	r3, r3
 8006430:	b21b      	sxth	r3, r3
 8006432:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006436:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800643a:	4622      	mov	r2, r4
 800643c:	47a8      	blx	r5
 800643e:	4603      	mov	r3, r0
 8006440:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 8006448:	2300      	movs	r3, #0
 800644a:	847b      	strh	r3, [r7, #34]	; 0x22
 800644c:	e022      	b.n	8006494 <UG_DrawBMP+0x1b8>
         {
           for(x=0;x<bmp->width;x++)
 800644e:	2300      	movs	r3, #0
 8006450:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006452:	e00d      	b.n	8006470 <UG_DrawBMP+0x194>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	1c9a      	adds	r2, r3, #2
 8006458:	61fa      	str	r2, [r7, #28]
 800645a:	881a      	ldrh	r2, [r3, #0]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4611      	mov	r1, r2
 8006460:	2001      	movs	r0, #1
 8006462:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 8006464:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006468:	b29b      	uxth	r3, r3
 800646a:	3301      	adds	r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006470:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	8892      	ldrh	r2, [r2, #4]
 8006478:	4293      	cmp	r3, r2
 800647a:	dbeb      	blt.n	8006454 <UG_DrawBMP+0x178>
             #endif
           }
           yp++;
 800647c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006480:	b29b      	uxth	r3, r3
 8006482:	3301      	adds	r3, #1
 8006484:	b29b      	uxth	r3, r3
 8006486:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 8006488:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800648c:	b29b      	uxth	r3, r3
 800648e:	3301      	adds	r3, #1
 8006490:	b29b      	uxth	r3, r3
 8006492:	847b      	strh	r3, [r7, #34]	; 0x22
 8006494:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	88d2      	ldrh	r2, [r2, #6]
 800649c:	4293      	cmp	r3, r2
 800649e:	dbd6      	blt.n	800644e <UG_DrawBMP+0x172>
         }
         return;
 80064a0:	e036      	b.n	8006510 <UG_DrawBMP+0x234>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 80064a8:	2300      	movs	r3, #0
 80064aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80064ac:	e028      	b.n	8006500 <UG_DrawBMP+0x224>
     {
        for(x=0;x<bmp->width;x++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80064b2:	e013      	b.n	80064dc <UG_DrawBMP+0x200>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 80064b4:	88fa      	ldrh	r2, [r7, #6]
 80064b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064b8:	4413      	add	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	b218      	sxth	r0, r3
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	1c9a      	adds	r2, r3, #2
 80064c2:	61ba      	str	r2, [r7, #24]
 80064c4:	881a      	ldrh	r2, [r3, #0]
 80064c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064ca:	4619      	mov	r1, r3
 80064cc:	f7fe fd74 	bl	8004fb8 <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 80064d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3301      	adds	r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80064dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	8892      	ldrh	r2, [r2, #4]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	dbe5      	blt.n	80064b4 <UG_DrawBMP+0x1d8>
          #endif
        }
        yp++;
 80064e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3301      	adds	r3, #1
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 80064f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3301      	adds	r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006500:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	88d2      	ldrh	r2, [r2, #6]
 8006508:	4293      	cmp	r3, r2
 800650a:	dbd0      	blt.n	80064ae <UG_DrawBMP+0x1d2>
 800650c:	e000      	b.n	8006510 <UG_DrawBMP+0x234>
   if ( bmp->p == NULL ) return;
 800650e:	bf00      	nop
     }
   }
   #endif
}
 8006510:	3728      	adds	r7, #40	; 0x28
 8006512:	46bd      	mov	sp, r7
 8006514:	bdb0      	pop	{r4, r5, r7, pc}
 8006516:	bf00      	nop
 8006518:	20000310 	.word	0x20000310

0800651c <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 800651c:	b590      	push	{r4, r7, lr}
 800651e:	b08f      	sub	sp, #60	; 0x3c
 8006520:	af02      	add	r7, sp, #8
 8006522:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 809a 	beq.w	8006660 <_UG_WindowDrawTitle+0x144>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	7a1b      	ldrb	r3, [r3, #8]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8093 	beq.w	8006660 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	89db      	ldrh	r3, [r3, #14]
 800653e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8a1b      	ldrh	r3, [r3, #16]
 8006544:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	8a5b      	ldrh	r3, [r3, #18]
 800654a:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	8a9b      	ldrh	r3, [r3, #20]
 8006550:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	7d9b      	ldrb	r3, [r3, #22]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00f      	beq.n	800657e <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 800655e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006560:	3303      	adds	r3, #3
 8006562:	b29b      	uxth	r3, r3
 8006564:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8006566:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006568:	3303      	adds	r3, #3
 800656a:	b29b      	uxth	r3, r3
 800656c:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 800656e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006570:	3b03      	subs	r3, #3
 8006572:	b29b      	uxth	r3, r3
 8006574:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8006576:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006578:	3b03      	subs	r3, #3
 800657a:	b29b      	uxth	r3, r3
 800657c:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 800657e:	4b3b      	ldr	r3, [pc, #236]	; (800666c <_UG_WindowDrawTitle+0x150>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	429a      	cmp	r2, r3
 8006588:	d106      	bne.n	8006598 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800658e:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006594:	83bb      	strh	r3, [r7, #28]
 8006596:	e005      	b.n	80065a4 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a2:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065ae:	4413      	add	r3, r2
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b21c      	sxth	r4, r3
 80065b8:	8bfb      	ldrh	r3, [r7, #30]
 80065ba:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80065be:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80065c2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4623      	mov	r3, r4
 80065ca:	f7fe fc83 	bl	8004ed4 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80065da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065dc:	3303      	adds	r3, #3
 80065de:	b29b      	uxth	r3, r3
 80065e0:	b21b      	sxth	r3, r3
 80065e2:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80065e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065e6:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80065e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80065ea:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065f6:	4413      	add	r3, r2
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	b21b      	sxth	r3, r3
 8006600:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006608:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8006612:	b21b      	sxth	r3, r3
 8006614:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 800661c:	b21b      	sxth	r3, r3
 800661e:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8006620:	f107 030c 	add.w	r3, r7, #12
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fb3f 	bl	8005ca8 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006630:	b29a      	uxth	r2, r3
 8006632:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006634:	4413      	add	r3, r2
 8006636:	b29b      	uxth	r3, r3
 8006638:	b219      	sxth	r1, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006640:	b29a      	uxth	r2, r3
 8006642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006644:	4413      	add	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	b21b      	sxth	r3, r3
 800664a:	f649 5413 	movw	r4, #40211	; 0x9d13
 800664e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006652:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006656:	9400      	str	r4, [sp, #0]
 8006658:	f7fe fcc8 	bl	8004fec <UG_DrawLine>
      return UG_RESULT_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	e001      	b.n	8006664 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8006660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006664:	4618      	mov	r0, r3
 8006666:	3734      	adds	r7, #52	; 0x34
 8006668:	46bd      	mov	sp, r7
 800666a:	bd90      	pop	{r4, r7, pc}
 800666c:	20000310 	.word	0x20000310

08006670 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b089      	sub	sp, #36	; 0x24
 8006674:	af02      	add	r7, sp, #8
 8006676:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	89db      	ldrh	r3, [r3, #14]
 800667c:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	8a1b      	ldrh	r3, [r3, #16]
 8006682:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8a5b      	ldrh	r3, [r3, #18]
 8006688:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8a9b      	ldrh	r3, [r3, #20]
 800668e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7a1b      	ldrb	r3, [r3, #8]
 8006694:	f023 0320 	bic.w	r3, r3, #32
 8006698:	b2da      	uxtb	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7a1b      	ldrb	r3, [r3, #8]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8084 	beq.w	80067b4 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7d9b      	ldrb	r3, [r3, #22]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d021      	beq.n	80066fc <_UG_WindowUpdate+0x8c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7a1b      	ldrb	r3, [r3, #8]
 80066bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11b      	bne.n	80066fc <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80066c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066c8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80066cc:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80066d0:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80066d4:	4c42      	ldr	r4, [pc, #264]	; (80067e0 <_UG_WindowUpdate+0x170>)
 80066d6:	9400      	str	r4, [sp, #0]
 80066d8:	f7ff fbfd 	bl	8005ed6 <_UG_DrawObjectFrame>
         xs+=3;
 80066dc:	8abb      	ldrh	r3, [r7, #20]
 80066de:	3303      	adds	r3, #3
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80066e4:	8a7b      	ldrh	r3, [r7, #18]
 80066e6:	3303      	adds	r3, #3
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80066ec:	8a3b      	ldrh	r3, [r7, #16]
 80066ee:	3b03      	subs	r3, #3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80066f4:	89fb      	ldrh	r3, [r7, #14]
 80066f6:	3b03      	subs	r3, #3
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7d9b      	ldrb	r3, [r3, #22]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01a      	beq.n	800673e <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ff07 	bl	800651c <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006714:	b29a      	uxth	r2, r3
 8006716:	8a7b      	ldrh	r3, [r7, #18]
 8006718:	4413      	add	r3, r2
 800671a:	b29b      	uxth	r3, r3
 800671c:	3301      	adds	r3, #1
 800671e:	b29b      	uxth	r3, r3
 8006720:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7a1b      	ldrb	r3, [r3, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7a1b      	ldrb	r3, [r3, #8]
 8006732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006736:	b2da      	uxtb	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	721a      	strb	r2, [r3, #8]
            return;
 800673c:	e04d      	b.n	80067da <_UG_WindowUpdate+0x16a>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	899b      	ldrh	r3, [r3, #12]
 8006742:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8006746:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800674a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800674e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4623      	mov	r3, r4
 8006756:	f7fe fbbd 	bl	8004ed4 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8006760:	2300      	movs	r3, #0
 8006762:	82fb      	strh	r3, [r7, #22]
 8006764:	e021      	b.n	80067aa <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	8afb      	ldrh	r3, [r7, #22]
 800676c:	015b      	lsls	r3, r3, #5
 800676e:	4413      	add	r3, r2
 8006770:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d112      	bne.n	80067a4 <_UG_WindowUpdate+0x134>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <_UG_WindowUpdate+0x134>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d006      	beq.n	80067a4 <_UG_WindowUpdate+0x134>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80067a4:	8afb      	ldrh	r3, [r7, #22]
 80067a6:	3301      	adds	r3, #1
 80067a8:	82fb      	strh	r3, [r7, #22]
 80067aa:	8afa      	ldrh	r2, [r7, #22]
 80067ac:	89bb      	ldrh	r3, [r7, #12]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d3d9      	bcc.n	8006766 <_UG_WindowUpdate+0xf6>
 80067b2:	e012      	b.n	80067da <_UG_WindowUpdate+0x16a>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <_UG_WindowUpdate+0x174>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	4623      	mov	r3, r4
 80067d6:	f7fe fb7d 	bl	8004ed4 <UG_FillFrame>
   }
}
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd90      	pop	{r4, r7, pc}
 80067e0:	0801a044 	.word	0x0801a044
 80067e4:	20000310 	.word	0x20000310

080067e8 <vInitialAnim>:
extern UG_BMP ITMLogo;
const uint8_t ITMLogoID = 1;

//TODO Make fade animation of the school logo
static void vInitialAnim(MenuStage *stage)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	6078      	str	r0, [r7, #4]
	static uint16_t DelayCounter = 0;
	static uint16_t *ITMLogoRAMBuffer;
	static uint32_t *PixelsAddr;
	static uint16_t *PixelsValues;
	static uint16_t PixelsIndex = 1;
	UG_BMP ITMLogoRAM = {
 80067f0:	f107 0308 	add.w	r3, r7, #8
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	609a      	str	r2, [r3, #8]
 80067fc:	4baa      	ldr	r3, [pc, #680]	; (8006aa8 <vInitialAnim+0x2c0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	23a1      	movs	r3, #161	; 0xa1
 8006804:	81bb      	strh	r3, [r7, #12]
 8006806:	2399      	movs	r3, #153	; 0x99
 8006808:	81fb      	strh	r3, [r7, #14]
 800680a:	2310      	movs	r3, #16
 800680c:	743b      	strb	r3, [r7, #16]
		.width = 161,
		.height = 153,
		.bpp = BMP_BPP_16
	};

	switch(states)
 800680e:	4ba7      	ldr	r3, [pc, #668]	; (8006aac <vInitialAnim+0x2c4>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b07      	cmp	r3, #7
 8006814:	f200 819a 	bhi.w	8006b4c <vInitialAnim+0x364>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <vInitialAnim+0x38>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006841 	.word	0x08006841
 8006824:	080068af 	.word	0x080068af
 8006828:	08006949 	.word	0x08006949
 800682c:	080069e3 	.word	0x080069e3
 8006830:	08006a19 	.word	0x08006a19
 8006834:	08006af1 	.word	0x08006af1
 8006838:	08006b17 	.word	0x08006b17
 800683c:	08006b2b 	.word	0x08006b2b
	{
		case FadeIn:
			if(g >= 63)
 8006840:	4b9b      	ldr	r3, [pc, #620]	; (8006ab0 <vInitialAnim+0x2c8>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b3e      	cmp	r3, #62	; 0x3e
 8006846:	d903      	bls.n	8006850 <vInitialAnim+0x68>
				states = DMATransfer;
 8006848:	4b98      	ldr	r3, [pc, #608]	; (8006aac <vInitialAnim+0x2c4>)
 800684a:	2201      	movs	r2, #1
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	e027      	b.n	80068a0 <vInitialAnim+0xb8>
			else
			{
				if(DelayCounter == 20) //20ms Delay for animations
 8006850:	4b98      	ldr	r3, [pc, #608]	; (8006ab4 <vInitialAnim+0x2cc>)
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	2b14      	cmp	r3, #20
 8006856:	d123      	bne.n	80068a0 <vInitialAnim+0xb8>
				{
					UG_FillScreen(RGB565Color(r, g, b));
 8006858:	4b97      	ldr	r3, [pc, #604]	; (8006ab8 <vInitialAnim+0x2d0>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	4a94      	ldr	r2, [pc, #592]	; (8006ab0 <vInitialAnim+0x2c8>)
 800685e:	7811      	ldrb	r1, [r2, #0]
 8006860:	4a96      	ldr	r2, [pc, #600]	; (8006abc <vInitialAnim+0x2d4>)
 8006862:	7812      	ldrb	r2, [r2, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f000 f9cc 	bl	8006c02 <RGB565Color>
 800686a:	4603      	mov	r3, r0
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fb0d 	bl	8004e8c <UG_FillScreen>
					UG_Update();
 8006872:	f7ff fc73 	bl	800615c <UG_Update>
					r++;
 8006876:	4b90      	ldr	r3, [pc, #576]	; (8006ab8 <vInitialAnim+0x2d0>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	b2da      	uxtb	r2, r3
 800687e:	4b8e      	ldr	r3, [pc, #568]	; (8006ab8 <vInitialAnim+0x2d0>)
 8006880:	701a      	strb	r2, [r3, #0]
					g+=2;
 8006882:	4b8b      	ldr	r3, [pc, #556]	; (8006ab0 <vInitialAnim+0x2c8>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	3302      	adds	r3, #2
 8006888:	b2da      	uxtb	r2, r3
 800688a:	4b89      	ldr	r3, [pc, #548]	; (8006ab0 <vInitialAnim+0x2c8>)
 800688c:	701a      	strb	r2, [r3, #0]
					b++;
 800688e:	4b8b      	ldr	r3, [pc, #556]	; (8006abc <vInitialAnim+0x2d4>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	b2da      	uxtb	r2, r3
 8006896:	4b89      	ldr	r3, [pc, #548]	; (8006abc <vInitialAnim+0x2d4>)
 8006898:	701a      	strb	r2, [r3, #0]
					DelayCounter = 0;
 800689a:	4b86      	ldr	r3, [pc, #536]	; (8006ab4 <vInitialAnim+0x2cc>)
 800689c:	2200      	movs	r2, #0
 800689e:	801a      	strh	r2, [r3, #0]
				}
			}
			DelayCounter++;
 80068a0:	4b84      	ldr	r3, [pc, #528]	; (8006ab4 <vInitialAnim+0x2cc>)
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	4b82      	ldr	r3, [pc, #520]	; (8006ab4 <vInitialAnim+0x2cc>)
 80068aa:	801a      	strh	r2, [r3, #0]
		break;
 80068ac:	e14e      	b.n	8006b4c <vInitialAnim+0x364>
		case DMATransfer:
			UG_FillScreen(C_WHITE);
 80068ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80068b2:	f7fe faeb 	bl	8004e8c <UG_FillScreen>
			UG_Update();
 80068b6:	f7ff fc51 	bl	800615c <UG_Update>
			ITMLogoRAMBuffer = (uint16_t*)calloc(ITMLOGO_SIZE, sizeof(uint16_t));
 80068ba:	2102      	movs	r1, #2
 80068bc:	f246 0039 	movw	r0, #24633	; 0x6039
 80068c0:	f000 fa04 	bl	8006ccc <calloc>
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	4b77      	ldr	r3, [pc, #476]	; (8006aa8 <vInitialAnim+0x2c0>)
 80068ca:	601a      	str	r2, [r3, #0]
			if(ITMLogoRAMBuffer != NULL)
 80068cc:	4b76      	ldr	r3, [pc, #472]	; (8006aa8 <vInitialAnim+0x2c0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d036      	beq.n	8006942 <vInitialAnim+0x15a>
			{
				//TODO Correct the DMA transfer
				if(HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)&ITMLogo.p, (uint32_t)&ITMLogoRAMBuffer, ITMLOGO_SIZE) != HAL_OK)
 80068d4:	497a      	ldr	r1, [pc, #488]	; (8006ac0 <vInitialAnim+0x2d8>)
 80068d6:	4a74      	ldr	r2, [pc, #464]	; (8006aa8 <vInitialAnim+0x2c0>)
 80068d8:	f246 0339 	movw	r3, #24633	; 0x6039
 80068dc:	4879      	ldr	r0, [pc, #484]	; (8006ac4 <vInitialAnim+0x2dc>)
 80068de:	f7fb fb69 	bl	8001fb4 <HAL_DMA_Start_IT>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <vInitialAnim+0x104>
				{
					Error_Handler();
 80068e8:	f7fa fa74 	bl	8000dd4 <Error_Handler>
				}
				//Wait for DMA to finish
				HAL_TIM_Base_Stop_IT(&htim2);
 80068ec:	4876      	ldr	r0, [pc, #472]	; (8006ac8 <vInitialAnim+0x2e0>)
 80068ee:	f7fd f961 	bl	8003bb4 <HAL_TIM_Base_Stop_IT>
				HAL_SuspendTick();
 80068f2:	f7fb f97f 	bl	8001bf4 <HAL_SuspendTick>
				HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80068f6:	2101      	movs	r1, #1
 80068f8:	2001      	movs	r0, #1
 80068fa:	f7fc f84f 	bl	800299c <HAL_PWR_EnterSLEEPMode>
				HAL_ResumeTick();
 80068fe:	f7fb f989 	bl	8001c14 <HAL_ResumeTick>
				HAL_TIM_Base_Start_IT(&htim2);
 8006902:	4871      	ldr	r0, [pc, #452]	; (8006ac8 <vInitialAnim+0x2e0>)
 8006904:	f7fd f8f4 	bl	8003af0 <HAL_TIM_Base_Start_IT>
				PixelsAddr = (uint32_t*)calloc(13068, sizeof(uint32_t));
 8006908:	2104      	movs	r1, #4
 800690a:	f243 300c 	movw	r0, #13068	; 0x330c
 800690e:	f000 f9dd 	bl	8006ccc <calloc>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	4b6d      	ldr	r3, [pc, #436]	; (8006acc <vInitialAnim+0x2e4>)
 8006918:	601a      	str	r2, [r3, #0]
				PixelsValues = (uint16_t*)calloc(13068, sizeof(uint16_t));
 800691a:	2102      	movs	r1, #2
 800691c:	f243 300c 	movw	r0, #13068	; 0x330c
 8006920:	f000 f9d4 	bl	8006ccc <calloc>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	4b69      	ldr	r3, [pc, #420]	; (8006ad0 <vInitialAnim+0x2e8>)
 800692a:	601a      	str	r2, [r3, #0]
				states = FadeInIm;
 800692c:	4b5f      	ldr	r3, [pc, #380]	; (8006aac <vInitialAnim+0x2c4>)
 800692e:	2203      	movs	r2, #3
 8006930:	701a      	strb	r2, [r3, #0]
				if(PixelsAddr == NULL)
 8006932:	4b66      	ldr	r3, [pc, #408]	; (8006acc <vInitialAnim+0x2e4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 8107 	bne.w	8006b4a <vInitialAnim+0x362>
					Error_Handler();
 800693c:	f7fa fa4a 	bl	8000dd4 <Error_Handler>
			}
			else
			{
				Error_Handler();
			}
		break;
 8006940:	e103      	b.n	8006b4a <vInitialAnim+0x362>
				Error_Handler();
 8006942:	f7fa fa47 	bl	8000dd4 <Error_Handler>
		break;
 8006946:	e100      	b.n	8006b4a <vInitialAnim+0x362>
		case AnalyzeBMP:
			//TODO Make fade animation of the school logo
			for(uint16_t i = 0; i < 1024; i++, ForCounter++)
 8006948:	2300      	movs	r3, #0
 800694a:	82fb      	strh	r3, [r7, #22]
 800694c:	e044      	b.n	80069d8 <vInitialAnim+0x1f0>
			{
				if(ForCounter >= ITMLOGO_SIZE)
 800694e:	4b61      	ldr	r3, [pc, #388]	; (8006ad4 <vInitialAnim+0x2ec>)
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	f246 0238 	movw	r2, #24632	; 0x6038
 8006956:	4293      	cmp	r3, r2
 8006958:	d908      	bls.n	800696c <vInitialAnim+0x184>
				{
					states = FadeInIm;
 800695a:	4b54      	ldr	r3, [pc, #336]	; (8006aac <vInitialAnim+0x2c4>)
 800695c:	2203      	movs	r2, #3
 800695e:	701a      	strb	r2, [r3, #0]
					ForCounter = ITMLOGO_SIZE;
 8006960:	4b5c      	ldr	r3, [pc, #368]	; (8006ad4 <vInitialAnim+0x2ec>)
 8006962:	f246 0239 	movw	r2, #24633	; 0x6039
 8006966:	801a      	strh	r2, [r3, #0]
					break;
 8006968:	bf00      	nop
					PixelsAddr[PixelsIndex] = (uint32_t)&ITMLogoRAMBuffer[ForCounter]; //Getting the address of the pixel
					PixelsValues[PixelsIndex] = ITMLogoRAMBuffer[ForCounter]; //Getting the value of the pixel
					PixelsIndex++;
				}
			}
		break;
 800696a:	e0ef      	b.n	8006b4c <vInitialAnim+0x364>
				else if(ITMLogoRAMBuffer[ForCounter] != 0xFFFF) //Searching for non white pixels
 800696c:	4b4e      	ldr	r3, [pc, #312]	; (8006aa8 <vInitialAnim+0x2c0>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4b58      	ldr	r3, [pc, #352]	; (8006ad4 <vInitialAnim+0x2ec>)
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800697e:	4293      	cmp	r3, r2
 8006980:	d021      	beq.n	80069c6 <vInitialAnim+0x1de>
					PixelsAddr[PixelsIndex] = (uint32_t)&ITMLogoRAMBuffer[ForCounter]; //Getting the address of the pixel
 8006982:	4b49      	ldr	r3, [pc, #292]	; (8006aa8 <vInitialAnim+0x2c0>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4b53      	ldr	r3, [pc, #332]	; (8006ad4 <vInitialAnim+0x2ec>)
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	18d1      	adds	r1, r2, r3
 800698e:	4b4f      	ldr	r3, [pc, #316]	; (8006acc <vInitialAnim+0x2e4>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b51      	ldr	r3, [pc, #324]	; (8006ad8 <vInitialAnim+0x2f0>)
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	460a      	mov	r2, r1
 800699c:	601a      	str	r2, [r3, #0]
					PixelsValues[PixelsIndex] = ITMLogoRAMBuffer[ForCounter]; //Getting the value of the pixel
 800699e:	4b42      	ldr	r3, [pc, #264]	; (8006aa8 <vInitialAnim+0x2c0>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b4c      	ldr	r3, [pc, #304]	; (8006ad4 <vInitialAnim+0x2ec>)
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	441a      	add	r2, r3
 80069aa:	4b49      	ldr	r3, [pc, #292]	; (8006ad0 <vInitialAnim+0x2e8>)
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	4b4a      	ldr	r3, [pc, #296]	; (8006ad8 <vInitialAnim+0x2f0>)
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	440b      	add	r3, r1
 80069b6:	8812      	ldrh	r2, [r2, #0]
 80069b8:	801a      	strh	r2, [r3, #0]
					PixelsIndex++;
 80069ba:	4b47      	ldr	r3, [pc, #284]	; (8006ad8 <vInitialAnim+0x2f0>)
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	3301      	adds	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	4b45      	ldr	r3, [pc, #276]	; (8006ad8 <vInitialAnim+0x2f0>)
 80069c4:	801a      	strh	r2, [r3, #0]
			for(uint16_t i = 0; i < 1024; i++, ForCounter++)
 80069c6:	8afb      	ldrh	r3, [r7, #22]
 80069c8:	3301      	adds	r3, #1
 80069ca:	82fb      	strh	r3, [r7, #22]
 80069cc:	4b41      	ldr	r3, [pc, #260]	; (8006ad4 <vInitialAnim+0x2ec>)
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	4b3f      	ldr	r3, [pc, #252]	; (8006ad4 <vInitialAnim+0x2ec>)
 80069d6:	801a      	strh	r2, [r3, #0]
 80069d8:	8afb      	ldrh	r3, [r7, #22]
 80069da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069de:	d3b6      	bcc.n	800694e <vInitialAnim+0x166>
		break;
 80069e0:	e0b4      	b.n	8006b4c <vInitialAnim+0x364>
		case FadeInIm:
			UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogoRAM);
 80069e2:	4b37      	ldr	r3, [pc, #220]	; (8006ac0 <vInitialAnim+0x2d8>)
 80069e4:	889b      	ldrh	r3, [r3, #4]
 80069e6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80069ea:	0fda      	lsrs	r2, r3, #31
 80069ec:	4413      	add	r3, r2
 80069ee:	105b      	asrs	r3, r3, #1
 80069f0:	b218      	sxth	r0, r3
 80069f2:	4b33      	ldr	r3, [pc, #204]	; (8006ac0 <vInitialAnim+0x2d8>)
 80069f4:	88db      	ldrh	r3, [r3, #6]
 80069f6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80069fa:	0fda      	lsrs	r2, r3, #31
 80069fc:	4413      	add	r3, r2
 80069fe:	105b      	asrs	r3, r3, #1
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	f107 0208 	add.w	r2, r7, #8
 8006a06:	4619      	mov	r1, r3
 8006a08:	f7ff fc68 	bl	80062dc <UG_DrawBMP>
			UG_Update();
 8006a0c:	f7ff fba6 	bl	800615c <UG_Update>
			states = FadeOutIm;
 8006a10:	4b26      	ldr	r3, [pc, #152]	; (8006aac <vInitialAnim+0x2c4>)
 8006a12:	2204      	movs	r2, #4
 8006a14:	701a      	strb	r2, [r3, #0]
		break;
 8006a16:	e099      	b.n	8006b4c <vInitialAnim+0x364>
		case FadeOutIm:
			if(DelayCounter == 1500)
 8006a18:	4b26      	ldr	r3, [pc, #152]	; (8006ab4 <vInitialAnim+0x2cc>)
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d139      	bne.n	8006a98 <vInitialAnim+0x2b0>
			{
				UG_FillScreen(C_WHITE);
 8006a24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006a28:	f7fe fa30 	bl	8004e8c <UG_FillScreen>
				UG_Update();
 8006a2c:	f7ff fb96 	bl	800615c <UG_Update>
				//TODO Adjust positions
				LCD_PutStr(20, 2, "Firmware", FONT_arial_49X57, C_BLACK, C_WHITE);
 8006a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	2300      	movs	r3, #0
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	4b28      	ldr	r3, [pc, #160]	; (8006adc <vInitialAnim+0x2f4>)
 8006a3c:	4a28      	ldr	r2, [pc, #160]	; (8006ae0 <vInitialAnim+0x2f8>)
 8006a3e:	2102      	movs	r1, #2
 8006a40:	2014      	movs	r0, #20
 8006a42:	f7fa ff9d 	bl	8001980 <LCD_PutStr>
				LCD_PutStr(30, 60, "version", FONT_arial_49X57, C_BLACK, C_WHITE);
 8006a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	4b22      	ldr	r3, [pc, #136]	; (8006adc <vInitialAnim+0x2f4>)
 8006a52:	4a24      	ldr	r2, [pc, #144]	; (8006ae4 <vInitialAnim+0x2fc>)
 8006a54:	213c      	movs	r1, #60	; 0x3c
 8006a56:	201e      	movs	r0, #30
 8006a58:	f7fa ff92 	bl	8001980 <LCD_PutStr>
				LCD_PutStr(40, 130, FIRMWARE_VERSION, FONT_arial_49X57, C_BLACK, C_WHITE);
 8006a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	2300      	movs	r3, #0
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <vInitialAnim+0x2f4>)
 8006a68:	4a1f      	ldr	r2, [pc, #124]	; (8006ae8 <vInitialAnim+0x300>)
 8006a6a:	2182      	movs	r1, #130	; 0x82
 8006a6c:	2028      	movs	r0, #40	; 0x28
 8006a6e:	f7fa ff87 	bl	8001980 <LCD_PutStr>
				LCD_PutStr(30, 188, "(Beta)", FONT_arial_49X57, C_BLACK, C_WHITE);
 8006a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4b17      	ldr	r3, [pc, #92]	; (8006adc <vInitialAnim+0x2f4>)
 8006a7e:	4a1b      	ldr	r2, [pc, #108]	; (8006aec <vInitialAnim+0x304>)
 8006a80:	21bc      	movs	r1, #188	; 0xbc
 8006a82:	201e      	movs	r0, #30
 8006a84:	f7fa ff7c 	bl	8001980 <LCD_PutStr>
				UG_Update();
 8006a88:	f7ff fb68 	bl	800615c <UG_Update>
				states = ShowVer;
 8006a8c:	4b07      	ldr	r3, [pc, #28]	; (8006aac <vInitialAnim+0x2c4>)
 8006a8e:	2205      	movs	r2, #5
 8006a90:	701a      	strb	r2, [r3, #0]
				DelayCounter = 0;
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <vInitialAnim+0x2cc>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	801a      	strh	r2, [r3, #0]
			}
			DelayCounter++;
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <vInitialAnim+0x2cc>)
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <vInitialAnim+0x2cc>)
 8006aa2:	801a      	strh	r2, [r3, #0]
		break;
 8006aa4:	e052      	b.n	8006b4c <vInitialAnim+0x364>
 8006aa6:	bf00      	nop
 8006aa8:	2000032c 	.word	0x2000032c
 8006aac:	20000330 	.word	0x20000330
 8006ab0:	20000331 	.word	0x20000331
 8006ab4:	20000332 	.word	0x20000332
 8006ab8:	20000334 	.word	0x20000334
 8006abc:	20000335 	.word	0x20000335
 8006ac0:	20000024 	.word	0x20000024
 8006ac4:	20000240 	.word	0x20000240
 8006ac8:	200001b4 	.word	0x200001b4
 8006acc:	20000338 	.word	0x20000338
 8006ad0:	2000033c 	.word	0x2000033c
 8006ad4:	20000340 	.word	0x20000340
 8006ad8:	20000030 	.word	0x20000030
 8006adc:	08007750 	.word	0x08007750
 8006ae0:	080076c0 	.word	0x080076c0
 8006ae4:	080076cc 	.word	0x080076cc
 8006ae8:	080076d4 	.word	0x080076d4
 8006aec:	080076dc 	.word	0x080076dc
		case ShowVer:

			if(DelayCounter == 1500)
 8006af0:	4b18      	ldr	r3, [pc, #96]	; (8006b54 <vInitialAnim+0x36c>)
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d105      	bne.n	8006b08 <vInitialAnim+0x320>
			{
				states = FadeWhite;
 8006afc:	4b16      	ldr	r3, [pc, #88]	; (8006b58 <vInitialAnim+0x370>)
 8006afe:	2206      	movs	r2, #6
 8006b00:	701a      	strb	r2, [r3, #0]
				DelayCounter = 0;
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <vInitialAnim+0x36c>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	801a      	strh	r2, [r3, #0]
			}

			DelayCounter++;
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <vInitialAnim+0x36c>)
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	4b10      	ldr	r3, [pc, #64]	; (8006b54 <vInitialAnim+0x36c>)
 8006b12:	801a      	strh	r2, [r3, #0]
		break;
 8006b14:	e01a      	b.n	8006b4c <vInitialAnim+0x364>
		case FadeWhite:
			UG_FillScreen(C_WHITE);
 8006b16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006b1a:	f7fe f9b7 	bl	8004e8c <UG_FillScreen>
			UG_Update();
 8006b1e:	f7ff fb1d 	bl	800615c <UG_Update>
			states = ShowVer;
 8006b22:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <vInitialAnim+0x370>)
 8006b24:	2205      	movs	r2, #5
 8006b26:	701a      	strb	r2, [r3, #0]
		break;
 8006b28:	e010      	b.n	8006b4c <vInitialAnim+0x364>
		case Finish:
			free(ITMLogoRAMBuffer);
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <vInitialAnim+0x374>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f8fe 	bl	8006d30 <free>
			free(PixelsAddr);
 8006b34:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <vInitialAnim+0x378>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f8f9 	bl	8006d30 <free>
			free(PixelsValues);
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <vInitialAnim+0x37c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 f8f4 	bl	8006d30 <free>
		break;
 8006b48:	e000      	b.n	8006b4c <vInitialAnim+0x364>
		break;
 8006b4a:	bf00      	nop
	}
}
 8006b4c:	bf00      	nop
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000332 	.word	0x20000332
 8006b58:	20000330 	.word	0x20000330
 8006b5c:	2000032c 	.word	0x2000032c
 8006b60:	20000338 	.word	0x20000338
 8006b64:	2000033c 	.word	0x2000033c

08006b68 <vMainLobby>:
static void vMainLobby(MenuStage *stage, Input *input)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]

}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <vMenu>:
static void vMenu(MenuStage *stage, Input *input)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]

}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <vConfigurationMenu>:
static void vConfigurationMenu(MenuStage *stage, Input *input)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]

}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <vAboutMenu>:
static void vAboutMenu(MenuStage *stage, Input *input)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]

}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <vPlotMenu>:
static void vPlotMenu(MenuStage *stage, Input *input)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]

}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <vUSBConfigMenu>:
static void vUSBConfigMenu(MenuStage *stage, Input *input)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]

}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <vStepResponseMenu>:
static void vStepResponseMenu(MenuStage *stage, Input *input)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]

}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <RGB565Color>:

uint16_t RGB565Color(uint8_t r, uint8_t g, uint8_t b)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	4603      	mov	r3, r0
 8006c0a:	71fb      	strb	r3, [r7, #7]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	71bb      	strb	r3, [r7, #6]
 8006c10:	4613      	mov	r3, r2
 8006c12:	717b      	strb	r3, [r7, #5]
	return (uint16_t)(r<<11 | g<<5 | b);
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	02db      	lsls	r3, r3, #11
 8006c18:	b21a      	sxth	r2, r3
 8006c1a:	79bb      	ldrb	r3, [r7, #6]
 8006c1c:	015b      	lsls	r3, r3, #5
 8006c1e:	b21b      	sxth	r3, r3
 8006c20:	4313      	orrs	r3, r2
 8006c22:	b21a      	sxth	r2, r3
 8006c24:	797b      	ldrb	r3, [r7, #5]
 8006c26:	b21b      	sxth	r3, r3
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	b21b      	sxth	r3, r3
 8006c2c:	b29b      	uxth	r3, r3
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <vTaskUI>:
{
	UG_DrawBMP((LCD_WIDTH-bmp->width)/2, (LCD_HEIGHT-bmp->height)/2, bmp);
}

void vTaskUI(MenuStage *stage, Input *input)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
	switch(*stage)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b07      	cmp	r3, #7
 8006c4c:	d839      	bhi.n	8006cc2 <vTaskUI+0x86>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <vTaskUI+0x18>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006c75 	.word	0x08006c75
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	08006c87 	.word	0x08006c87
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c9b 	.word	0x08006c9b
 8006c68:	08006ca5 	.word	0x08006ca5
 8006c6c:	08006caf 	.word	0x08006caf
 8006c70:	08006cb9 	.word	0x08006cb9
	{
		case sInitialAnim:
			vInitialAnim(stage);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fdb7 	bl	80067e8 <vInitialAnim>
		break;
 8006c7a:	e022      	b.n	8006cc2 <vTaskUI+0x86>
		case sMainLobby:
			vMainLobby(stage, input);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff ff72 	bl	8006b68 <vMainLobby>
		break;
 8006c84:	e01d      	b.n	8006cc2 <vTaskUI+0x86>
		case sMenu:
			vMenu(stage, input);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff ff78 	bl	8006b7e <vMenu>
		break;
 8006c8e:	e018      	b.n	8006cc2 <vTaskUI+0x86>
		case sConfiguration:
			vConfigurationMenu(stage, input);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff ff7e 	bl	8006b94 <vConfigurationMenu>
		break;
 8006c98:	e013      	b.n	8006cc2 <vTaskUI+0x86>
		case sAbout:
			vAboutMenu(stage, input);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ff84 	bl	8006baa <vAboutMenu>
		break;
 8006ca2:	e00e      	b.n	8006cc2 <vTaskUI+0x86>
		case sPlot:
			vPlotMenu(stage, input);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff ff8a 	bl	8006bc0 <vPlotMenu>
		break;
 8006cac:	e009      	b.n	8006cc2 <vTaskUI+0x86>
		case sUSBConfig:
			vUSBConfigMenu(stage, input);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff ff90 	bl	8006bd6 <vUSBConfigMenu>
		break;
 8006cb6:	e004      	b.n	8006cc2 <vTaskUI+0x86>
		case sStepResponse:
			vStepResponseMenu(stage, input);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff ff96 	bl	8006bec <vStepResponseMenu>
		break;
 8006cc0:	bf00      	nop
	}
}
 8006cc2:	bf00      	nop
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop

08006ccc <calloc>:
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <calloc+0xc>)
 8006cce:	460a      	mov	r2, r1
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	f000 b83c 	b.w	8006d50 <_calloc_r>
 8006cd8:	20000034 	.word	0x20000034

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	; (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000034 	.word	0x20000034

08006ce8 <__libc_init_array>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4d0d      	ldr	r5, [pc, #52]	; (8006d20 <__libc_init_array+0x38>)
 8006cec:	4c0d      	ldr	r4, [pc, #52]	; (8006d24 <__libc_init_array+0x3c>)
 8006cee:	1b64      	subs	r4, r4, r5
 8006cf0:	10a4      	asrs	r4, r4, #2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	42a6      	cmp	r6, r4
 8006cf6:	d109      	bne.n	8006d0c <__libc_init_array+0x24>
 8006cf8:	4d0b      	ldr	r5, [pc, #44]	; (8006d28 <__libc_init_array+0x40>)
 8006cfa:	4c0c      	ldr	r4, [pc, #48]	; (8006d2c <__libc_init_array+0x44>)
 8006cfc:	f000 fcac 	bl	8007658 <_init>
 8006d00:	1b64      	subs	r4, r4, r5
 8006d02:	10a4      	asrs	r4, r4, #2
 8006d04:	2600      	movs	r6, #0
 8006d06:	42a6      	cmp	r6, r4
 8006d08:	d105      	bne.n	8006d16 <__libc_init_array+0x2e>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d10:	4798      	blx	r3
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7ee      	b.n	8006cf4 <__libc_init_array+0xc>
 8006d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1a:	4798      	blx	r3
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	e7f2      	b.n	8006d06 <__libc_init_array+0x1e>
 8006d20:	0802610c 	.word	0x0802610c
 8006d24:	0802610c 	.word	0x0802610c
 8006d28:	0802610c 	.word	0x0802610c
 8006d2c:	08026110 	.word	0x08026110

08006d30 <free>:
 8006d30:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <free+0xc>)
 8006d32:	4601      	mov	r1, r0
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f000 b821 	b.w	8006d7c <_free_r>
 8006d3a:	bf00      	nop
 8006d3c:	20000034 	.word	0x20000034

08006d40 <memset>:
 8006d40:	4402      	add	r2, r0
 8006d42:	4603      	mov	r3, r0
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d100      	bne.n	8006d4a <memset+0xa>
 8006d48:	4770      	bx	lr
 8006d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4e:	e7f9      	b.n	8006d44 <memset+0x4>

08006d50 <_calloc_r>:
 8006d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d52:	fba1 2402 	umull	r2, r4, r1, r2
 8006d56:	b94c      	cbnz	r4, 8006d6c <_calloc_r+0x1c>
 8006d58:	4611      	mov	r1, r2
 8006d5a:	9201      	str	r2, [sp, #4]
 8006d5c:	f000 f87a 	bl	8006e54 <_malloc_r>
 8006d60:	9a01      	ldr	r2, [sp, #4]
 8006d62:	4605      	mov	r5, r0
 8006d64:	b930      	cbnz	r0, 8006d74 <_calloc_r+0x24>
 8006d66:	4628      	mov	r0, r5
 8006d68:	b003      	add	sp, #12
 8006d6a:	bd30      	pop	{r4, r5, pc}
 8006d6c:	220c      	movs	r2, #12
 8006d6e:	6002      	str	r2, [r0, #0]
 8006d70:	2500      	movs	r5, #0
 8006d72:	e7f8      	b.n	8006d66 <_calloc_r+0x16>
 8006d74:	4621      	mov	r1, r4
 8006d76:	f7ff ffe3 	bl	8006d40 <memset>
 8006d7a:	e7f4      	b.n	8006d66 <_calloc_r+0x16>

08006d7c <_free_r>:
 8006d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	d044      	beq.n	8006e0c <_free_r+0x90>
 8006d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d86:	9001      	str	r0, [sp, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d8e:	bfb8      	it	lt
 8006d90:	18e4      	addlt	r4, r4, r3
 8006d92:	f000 f903 	bl	8006f9c <__malloc_lock>
 8006d96:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <_free_r+0x94>)
 8006d98:	9801      	ldr	r0, [sp, #4]
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x30>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	b003      	add	sp, #12
 8006da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006da8:	f000 b8fe 	b.w	8006fa8 <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x46>
 8006db0:	6825      	ldr	r5, [r4, #0]
 8006db2:	1961      	adds	r1, r4, r5
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1949      	addeq	r1, r1, r5
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x22>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x50>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x46>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1855      	adds	r5, r2, r1
 8006dd0:	42a5      	cmp	r5, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x70>
 8006dd4:	6824      	ldr	r4, [r4, #0]
 8006dd6:	4421      	add	r1, r4
 8006dd8:	1854      	adds	r4, r2, r1
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x26>
 8006de0:	681c      	ldr	r4, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	4421      	add	r1, r4
 8006de8:	6011      	str	r1, [r2, #0]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x26>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x78>
 8006dee:	230c      	movs	r3, #12
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x26>
 8006df4:	6825      	ldr	r5, [r4, #0]
 8006df6:	1961      	adds	r1, r4, r5
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1949      	addeq	r1, r1, r5
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7ca      	b.n	8006da2 <_free_r+0x26>
 8006e0c:	b003      	add	sp, #12
 8006e0e:	bd30      	pop	{r4, r5, pc}
 8006e10:	20000344 	.word	0x20000344

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0e      	ldr	r6, [pc, #56]	; (8006e50 <sbrk_aligned+0x3c>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 f88c 	bl	8006f3c <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f887 	bl	8006f3c <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d00a      	beq.n	8006e48 <sbrk_aligned+0x34>
 8006e32:	1cc4      	adds	r4, r0, #3
 8006e34:	f024 0403 	bic.w	r4, r4, #3
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d007      	beq.n	8006e4c <sbrk_aligned+0x38>
 8006e3c:	1a21      	subs	r1, r4, r0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 f87c 	bl	8006f3c <_sbrk_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d101      	bne.n	8006e4c <sbrk_aligned+0x38>
 8006e48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	20000348 	.word	0x20000348

08006e54 <_malloc_r>:
 8006e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e58:	1ccd      	adds	r5, r1, #3
 8006e5a:	f025 0503 	bic.w	r5, r5, #3
 8006e5e:	3508      	adds	r5, #8
 8006e60:	2d0c      	cmp	r5, #12
 8006e62:	bf38      	it	cc
 8006e64:	250c      	movcc	r5, #12
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	4607      	mov	r7, r0
 8006e6a:	db01      	blt.n	8006e70 <_malloc_r+0x1c>
 8006e6c:	42a9      	cmp	r1, r5
 8006e6e:	d905      	bls.n	8006e7c <_malloc_r+0x28>
 8006e70:	230c      	movs	r3, #12
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	2600      	movs	r6, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e7c:	4e2e      	ldr	r6, [pc, #184]	; (8006f38 <_malloc_r+0xe4>)
 8006e7e:	f000 f88d 	bl	8006f9c <__malloc_lock>
 8006e82:	6833      	ldr	r3, [r6, #0]
 8006e84:	461c      	mov	r4, r3
 8006e86:	bb34      	cbnz	r4, 8006ed6 <_malloc_r+0x82>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	f7ff ffc2 	bl	8006e14 <sbrk_aligned>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	4604      	mov	r4, r0
 8006e94:	d14d      	bne.n	8006f32 <_malloc_r+0xde>
 8006e96:	6834      	ldr	r4, [r6, #0]
 8006e98:	4626      	mov	r6, r4
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	d140      	bne.n	8006f20 <_malloc_r+0xcc>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	eb04 0803 	add.w	r8, r4, r3
 8006ea8:	f000 f848 	bl	8006f3c <_sbrk_r>
 8006eac:	4580      	cmp	r8, r0
 8006eae:	d13a      	bne.n	8006f26 <_malloc_r+0xd2>
 8006eb0:	6821      	ldr	r1, [r4, #0]
 8006eb2:	3503      	adds	r5, #3
 8006eb4:	1a6d      	subs	r5, r5, r1
 8006eb6:	f025 0503 	bic.w	r5, r5, #3
 8006eba:	3508      	adds	r5, #8
 8006ebc:	2d0c      	cmp	r5, #12
 8006ebe:	bf38      	it	cc
 8006ec0:	250c      	movcc	r5, #12
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff ffa5 	bl	8006e14 <sbrk_aligned>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d02b      	beq.n	8006f26 <_malloc_r+0xd2>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	442b      	add	r3, r5
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	e00e      	b.n	8006ef4 <_malloc_r+0xa0>
 8006ed6:	6822      	ldr	r2, [r4, #0]
 8006ed8:	1b52      	subs	r2, r2, r5
 8006eda:	d41e      	bmi.n	8006f1a <_malloc_r+0xc6>
 8006edc:	2a0b      	cmp	r2, #11
 8006ede:	d916      	bls.n	8006f0e <_malloc_r+0xba>
 8006ee0:	1961      	adds	r1, r4, r5
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	6025      	str	r5, [r4, #0]
 8006ee6:	bf18      	it	ne
 8006ee8:	6059      	strne	r1, [r3, #4]
 8006eea:	6863      	ldr	r3, [r4, #4]
 8006eec:	bf08      	it	eq
 8006eee:	6031      	streq	r1, [r6, #0]
 8006ef0:	5162      	str	r2, [r4, r5]
 8006ef2:	604b      	str	r3, [r1, #4]
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f104 060b 	add.w	r6, r4, #11
 8006efa:	f000 f855 	bl	8006fa8 <__malloc_unlock>
 8006efe:	f026 0607 	bic.w	r6, r6, #7
 8006f02:	1d23      	adds	r3, r4, #4
 8006f04:	1af2      	subs	r2, r6, r3
 8006f06:	d0b6      	beq.n	8006e76 <_malloc_r+0x22>
 8006f08:	1b9b      	subs	r3, r3, r6
 8006f0a:	50a3      	str	r3, [r4, r2]
 8006f0c:	e7b3      	b.n	8006e76 <_malloc_r+0x22>
 8006f0e:	6862      	ldr	r2, [r4, #4]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	bf0c      	ite	eq
 8006f14:	6032      	streq	r2, [r6, #0]
 8006f16:	605a      	strne	r2, [r3, #4]
 8006f18:	e7ec      	b.n	8006ef4 <_malloc_r+0xa0>
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	6864      	ldr	r4, [r4, #4]
 8006f1e:	e7b2      	b.n	8006e86 <_malloc_r+0x32>
 8006f20:	4634      	mov	r4, r6
 8006f22:	6876      	ldr	r6, [r6, #4]
 8006f24:	e7b9      	b.n	8006e9a <_malloc_r+0x46>
 8006f26:	230c      	movs	r3, #12
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f000 f83c 	bl	8006fa8 <__malloc_unlock>
 8006f30:	e7a1      	b.n	8006e76 <_malloc_r+0x22>
 8006f32:	6025      	str	r5, [r4, #0]
 8006f34:	e7de      	b.n	8006ef4 <_malloc_r+0xa0>
 8006f36:	bf00      	nop
 8006f38:	20000344 	.word	0x20000344

08006f3c <_sbrk_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d06      	ldr	r5, [pc, #24]	; (8006f58 <_sbrk_r+0x1c>)
 8006f40:	2300      	movs	r3, #0
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	f7fa f950 	bl	80011ec <_sbrk>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_sbrk_r+0x1a>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_sbrk_r+0x1a>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	2000034c 	.word	0x2000034c

08006f5c <siprintf>:
 8006f5c:	b40e      	push	{r1, r2, r3}
 8006f5e:	b500      	push	{lr}
 8006f60:	b09c      	sub	sp, #112	; 0x70
 8006f62:	ab1d      	add	r3, sp, #116	; 0x74
 8006f64:	9002      	str	r0, [sp, #8]
 8006f66:	9006      	str	r0, [sp, #24]
 8006f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f6c:	4809      	ldr	r0, [pc, #36]	; (8006f94 <siprintf+0x38>)
 8006f6e:	9107      	str	r1, [sp, #28]
 8006f70:	9104      	str	r1, [sp, #16]
 8006f72:	4909      	ldr	r1, [pc, #36]	; (8006f98 <siprintf+0x3c>)
 8006f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f78:	9105      	str	r1, [sp, #20]
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	a902      	add	r1, sp, #8
 8006f80:	f000 f874 	bl	800706c <_svfiprintf_r>
 8006f84:	9b02      	ldr	r3, [sp, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	b01c      	add	sp, #112	; 0x70
 8006f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f90:	b003      	add	sp, #12
 8006f92:	4770      	bx	lr
 8006f94:	20000034 	.word	0x20000034
 8006f98:	ffff0208 	.word	0xffff0208

08006f9c <__malloc_lock>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__malloc_lock+0x8>)
 8006f9e:	f000 baf9 	b.w	8007594 <__retarget_lock_acquire_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	20000350 	.word	0x20000350

08006fa8 <__malloc_unlock>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__malloc_unlock+0x8>)
 8006faa:	f000 baf4 	b.w	8007596 <__retarget_lock_release_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20000350 	.word	0x20000350

08006fb4 <__ssputs_r>:
 8006fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	688e      	ldr	r6, [r1, #8]
 8006fba:	429e      	cmp	r6, r3
 8006fbc:	4682      	mov	sl, r0
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	4690      	mov	r8, r2
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	d838      	bhi.n	8007038 <__ssputs_r+0x84>
 8006fc6:	898a      	ldrh	r2, [r1, #12]
 8006fc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fcc:	d032      	beq.n	8007034 <__ssputs_r+0x80>
 8006fce:	6825      	ldr	r5, [r4, #0]
 8006fd0:	6909      	ldr	r1, [r1, #16]
 8006fd2:	eba5 0901 	sub.w	r9, r5, r1
 8006fd6:	6965      	ldr	r5, [r4, #20]
 8006fd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	444b      	add	r3, r9
 8006fe4:	106d      	asrs	r5, r5, #1
 8006fe6:	429d      	cmp	r5, r3
 8006fe8:	bf38      	it	cc
 8006fea:	461d      	movcc	r5, r3
 8006fec:	0553      	lsls	r3, r2, #21
 8006fee:	d531      	bpl.n	8007054 <__ssputs_r+0xa0>
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7ff ff2f 	bl	8006e54 <_malloc_r>
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	b950      	cbnz	r0, 8007010 <__ssputs_r+0x5c>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	f8ca 3000 	str.w	r3, [sl]
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800700c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007010:	6921      	ldr	r1, [r4, #16]
 8007012:	464a      	mov	r2, r9
 8007014:	f000 fac0 	bl	8007598 <memcpy>
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800701e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007022:	81a3      	strh	r3, [r4, #12]
 8007024:	6126      	str	r6, [r4, #16]
 8007026:	6165      	str	r5, [r4, #20]
 8007028:	444e      	add	r6, r9
 800702a:	eba5 0509 	sub.w	r5, r5, r9
 800702e:	6026      	str	r6, [r4, #0]
 8007030:	60a5      	str	r5, [r4, #8]
 8007032:	463e      	mov	r6, r7
 8007034:	42be      	cmp	r6, r7
 8007036:	d900      	bls.n	800703a <__ssputs_r+0x86>
 8007038:	463e      	mov	r6, r7
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	4632      	mov	r2, r6
 800703e:	4641      	mov	r1, r8
 8007040:	f000 fab8 	bl	80075b4 <memmove>
 8007044:	68a3      	ldr	r3, [r4, #8]
 8007046:	1b9b      	subs	r3, r3, r6
 8007048:	60a3      	str	r3, [r4, #8]
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	4433      	add	r3, r6
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	2000      	movs	r0, #0
 8007052:	e7db      	b.n	800700c <__ssputs_r+0x58>
 8007054:	462a      	mov	r2, r5
 8007056:	f000 fac7 	bl	80075e8 <_realloc_r>
 800705a:	4606      	mov	r6, r0
 800705c:	2800      	cmp	r0, #0
 800705e:	d1e1      	bne.n	8007024 <__ssputs_r+0x70>
 8007060:	6921      	ldr	r1, [r4, #16]
 8007062:	4650      	mov	r0, sl
 8007064:	f7ff fe8a 	bl	8006d7c <_free_r>
 8007068:	e7c7      	b.n	8006ffa <__ssputs_r+0x46>
	...

0800706c <_svfiprintf_r>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	4698      	mov	r8, r3
 8007072:	898b      	ldrh	r3, [r1, #12]
 8007074:	061b      	lsls	r3, r3, #24
 8007076:	b09d      	sub	sp, #116	; 0x74
 8007078:	4607      	mov	r7, r0
 800707a:	460d      	mov	r5, r1
 800707c:	4614      	mov	r4, r2
 800707e:	d50e      	bpl.n	800709e <_svfiprintf_r+0x32>
 8007080:	690b      	ldr	r3, [r1, #16]
 8007082:	b963      	cbnz	r3, 800709e <_svfiprintf_r+0x32>
 8007084:	2140      	movs	r1, #64	; 0x40
 8007086:	f7ff fee5 	bl	8006e54 <_malloc_r>
 800708a:	6028      	str	r0, [r5, #0]
 800708c:	6128      	str	r0, [r5, #16]
 800708e:	b920      	cbnz	r0, 800709a <_svfiprintf_r+0x2e>
 8007090:	230c      	movs	r3, #12
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007098:	e0d1      	b.n	800723e <_svfiprintf_r+0x1d2>
 800709a:	2340      	movs	r3, #64	; 0x40
 800709c:	616b      	str	r3, [r5, #20]
 800709e:	2300      	movs	r3, #0
 80070a0:	9309      	str	r3, [sp, #36]	; 0x24
 80070a2:	2320      	movs	r3, #32
 80070a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ac:	2330      	movs	r3, #48	; 0x30
 80070ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007258 <_svfiprintf_r+0x1ec>
 80070b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070b6:	f04f 0901 	mov.w	r9, #1
 80070ba:	4623      	mov	r3, r4
 80070bc:	469a      	mov	sl, r3
 80070be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070c2:	b10a      	cbz	r2, 80070c8 <_svfiprintf_r+0x5c>
 80070c4:	2a25      	cmp	r2, #37	; 0x25
 80070c6:	d1f9      	bne.n	80070bc <_svfiprintf_r+0x50>
 80070c8:	ebba 0b04 	subs.w	fp, sl, r4
 80070cc:	d00b      	beq.n	80070e6 <_svfiprintf_r+0x7a>
 80070ce:	465b      	mov	r3, fp
 80070d0:	4622      	mov	r2, r4
 80070d2:	4629      	mov	r1, r5
 80070d4:	4638      	mov	r0, r7
 80070d6:	f7ff ff6d 	bl	8006fb4 <__ssputs_r>
 80070da:	3001      	adds	r0, #1
 80070dc:	f000 80aa 	beq.w	8007234 <_svfiprintf_r+0x1c8>
 80070e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e2:	445a      	add	r2, fp
 80070e4:	9209      	str	r2, [sp, #36]	; 0x24
 80070e6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 80a2 	beq.w	8007234 <_svfiprintf_r+0x1c8>
 80070f0:	2300      	movs	r3, #0
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070fa:	f10a 0a01 	add.w	sl, sl, #1
 80070fe:	9304      	str	r3, [sp, #16]
 8007100:	9307      	str	r3, [sp, #28]
 8007102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007106:	931a      	str	r3, [sp, #104]	; 0x68
 8007108:	4654      	mov	r4, sl
 800710a:	2205      	movs	r2, #5
 800710c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007110:	4851      	ldr	r0, [pc, #324]	; (8007258 <_svfiprintf_r+0x1ec>)
 8007112:	f7f9 f86d 	bl	80001f0 <memchr>
 8007116:	9a04      	ldr	r2, [sp, #16]
 8007118:	b9d8      	cbnz	r0, 8007152 <_svfiprintf_r+0xe6>
 800711a:	06d0      	lsls	r0, r2, #27
 800711c:	bf44      	itt	mi
 800711e:	2320      	movmi	r3, #32
 8007120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007124:	0711      	lsls	r1, r2, #28
 8007126:	bf44      	itt	mi
 8007128:	232b      	movmi	r3, #43	; 0x2b
 800712a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712e:	f89a 3000 	ldrb.w	r3, [sl]
 8007132:	2b2a      	cmp	r3, #42	; 0x2a
 8007134:	d015      	beq.n	8007162 <_svfiprintf_r+0xf6>
 8007136:	9a07      	ldr	r2, [sp, #28]
 8007138:	4654      	mov	r4, sl
 800713a:	2000      	movs	r0, #0
 800713c:	f04f 0c0a 	mov.w	ip, #10
 8007140:	4621      	mov	r1, r4
 8007142:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007146:	3b30      	subs	r3, #48	; 0x30
 8007148:	2b09      	cmp	r3, #9
 800714a:	d94e      	bls.n	80071ea <_svfiprintf_r+0x17e>
 800714c:	b1b0      	cbz	r0, 800717c <_svfiprintf_r+0x110>
 800714e:	9207      	str	r2, [sp, #28]
 8007150:	e014      	b.n	800717c <_svfiprintf_r+0x110>
 8007152:	eba0 0308 	sub.w	r3, r0, r8
 8007156:	fa09 f303 	lsl.w	r3, r9, r3
 800715a:	4313      	orrs	r3, r2
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	46a2      	mov	sl, r4
 8007160:	e7d2      	b.n	8007108 <_svfiprintf_r+0x9c>
 8007162:	9b03      	ldr	r3, [sp, #12]
 8007164:	1d19      	adds	r1, r3, #4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	9103      	str	r1, [sp, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	bfbb      	ittet	lt
 800716e:	425b      	neglt	r3, r3
 8007170:	f042 0202 	orrlt.w	r2, r2, #2
 8007174:	9307      	strge	r3, [sp, #28]
 8007176:	9307      	strlt	r3, [sp, #28]
 8007178:	bfb8      	it	lt
 800717a:	9204      	strlt	r2, [sp, #16]
 800717c:	7823      	ldrb	r3, [r4, #0]
 800717e:	2b2e      	cmp	r3, #46	; 0x2e
 8007180:	d10c      	bne.n	800719c <_svfiprintf_r+0x130>
 8007182:	7863      	ldrb	r3, [r4, #1]
 8007184:	2b2a      	cmp	r3, #42	; 0x2a
 8007186:	d135      	bne.n	80071f4 <_svfiprintf_r+0x188>
 8007188:	9b03      	ldr	r3, [sp, #12]
 800718a:	1d1a      	adds	r2, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	9203      	str	r2, [sp, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfb8      	it	lt
 8007194:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007198:	3402      	adds	r4, #2
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007268 <_svfiprintf_r+0x1fc>
 80071a0:	7821      	ldrb	r1, [r4, #0]
 80071a2:	2203      	movs	r2, #3
 80071a4:	4650      	mov	r0, sl
 80071a6:	f7f9 f823 	bl	80001f0 <memchr>
 80071aa:	b140      	cbz	r0, 80071be <_svfiprintf_r+0x152>
 80071ac:	2340      	movs	r3, #64	; 0x40
 80071ae:	eba0 000a 	sub.w	r0, r0, sl
 80071b2:	fa03 f000 	lsl.w	r0, r3, r0
 80071b6:	9b04      	ldr	r3, [sp, #16]
 80071b8:	4303      	orrs	r3, r0
 80071ba:	3401      	adds	r4, #1
 80071bc:	9304      	str	r3, [sp, #16]
 80071be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c2:	4826      	ldr	r0, [pc, #152]	; (800725c <_svfiprintf_r+0x1f0>)
 80071c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071c8:	2206      	movs	r2, #6
 80071ca:	f7f9 f811 	bl	80001f0 <memchr>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d038      	beq.n	8007244 <_svfiprintf_r+0x1d8>
 80071d2:	4b23      	ldr	r3, [pc, #140]	; (8007260 <_svfiprintf_r+0x1f4>)
 80071d4:	bb1b      	cbnz	r3, 800721e <_svfiprintf_r+0x1b2>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	3307      	adds	r3, #7
 80071da:	f023 0307 	bic.w	r3, r3, #7
 80071de:	3308      	adds	r3, #8
 80071e0:	9303      	str	r3, [sp, #12]
 80071e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e4:	4433      	add	r3, r6
 80071e6:	9309      	str	r3, [sp, #36]	; 0x24
 80071e8:	e767      	b.n	80070ba <_svfiprintf_r+0x4e>
 80071ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ee:	460c      	mov	r4, r1
 80071f0:	2001      	movs	r0, #1
 80071f2:	e7a5      	b.n	8007140 <_svfiprintf_r+0xd4>
 80071f4:	2300      	movs	r3, #0
 80071f6:	3401      	adds	r4, #1
 80071f8:	9305      	str	r3, [sp, #20]
 80071fa:	4619      	mov	r1, r3
 80071fc:	f04f 0c0a 	mov.w	ip, #10
 8007200:	4620      	mov	r0, r4
 8007202:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007206:	3a30      	subs	r2, #48	; 0x30
 8007208:	2a09      	cmp	r2, #9
 800720a:	d903      	bls.n	8007214 <_svfiprintf_r+0x1a8>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0c5      	beq.n	800719c <_svfiprintf_r+0x130>
 8007210:	9105      	str	r1, [sp, #20]
 8007212:	e7c3      	b.n	800719c <_svfiprintf_r+0x130>
 8007214:	fb0c 2101 	mla	r1, ip, r1, r2
 8007218:	4604      	mov	r4, r0
 800721a:	2301      	movs	r3, #1
 800721c:	e7f0      	b.n	8007200 <_svfiprintf_r+0x194>
 800721e:	ab03      	add	r3, sp, #12
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	462a      	mov	r2, r5
 8007224:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <_svfiprintf_r+0x1f8>)
 8007226:	a904      	add	r1, sp, #16
 8007228:	4638      	mov	r0, r7
 800722a:	f3af 8000 	nop.w
 800722e:	1c42      	adds	r2, r0, #1
 8007230:	4606      	mov	r6, r0
 8007232:	d1d6      	bne.n	80071e2 <_svfiprintf_r+0x176>
 8007234:	89ab      	ldrh	r3, [r5, #12]
 8007236:	065b      	lsls	r3, r3, #25
 8007238:	f53f af2c 	bmi.w	8007094 <_svfiprintf_r+0x28>
 800723c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723e:	b01d      	add	sp, #116	; 0x74
 8007240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007244:	ab03      	add	r3, sp, #12
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	462a      	mov	r2, r5
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <_svfiprintf_r+0x1f8>)
 800724c:	a904      	add	r1, sp, #16
 800724e:	4638      	mov	r0, r7
 8007250:	f000 f87a 	bl	8007348 <_printf_i>
 8007254:	e7eb      	b.n	800722e <_svfiprintf_r+0x1c2>
 8007256:	bf00      	nop
 8007258:	080260ce 	.word	0x080260ce
 800725c:	080260d8 	.word	0x080260d8
 8007260:	00000000 	.word	0x00000000
 8007264:	08006fb5 	.word	0x08006fb5
 8007268:	080260d4 	.word	0x080260d4

0800726c <_printf_common>:
 800726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	4616      	mov	r6, r2
 8007272:	4699      	mov	r9, r3
 8007274:	688a      	ldr	r2, [r1, #8]
 8007276:	690b      	ldr	r3, [r1, #16]
 8007278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800727c:	4293      	cmp	r3, r2
 800727e:	bfb8      	it	lt
 8007280:	4613      	movlt	r3, r2
 8007282:	6033      	str	r3, [r6, #0]
 8007284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007288:	4607      	mov	r7, r0
 800728a:	460c      	mov	r4, r1
 800728c:	b10a      	cbz	r2, 8007292 <_printf_common+0x26>
 800728e:	3301      	adds	r3, #1
 8007290:	6033      	str	r3, [r6, #0]
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	0699      	lsls	r1, r3, #26
 8007296:	bf42      	ittt	mi
 8007298:	6833      	ldrmi	r3, [r6, #0]
 800729a:	3302      	addmi	r3, #2
 800729c:	6033      	strmi	r3, [r6, #0]
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	f015 0506 	ands.w	r5, r5, #6
 80072a4:	d106      	bne.n	80072b4 <_printf_common+0x48>
 80072a6:	f104 0a19 	add.w	sl, r4, #25
 80072aa:	68e3      	ldr	r3, [r4, #12]
 80072ac:	6832      	ldr	r2, [r6, #0]
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dc26      	bgt.n	8007302 <_printf_common+0x96>
 80072b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b8:	1e13      	subs	r3, r2, #0
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	bf18      	it	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	0692      	lsls	r2, r2, #26
 80072c2:	d42b      	bmi.n	800731c <_printf_common+0xb0>
 80072c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c8:	4649      	mov	r1, r9
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c0      	blx	r8
 80072ce:	3001      	adds	r0, #1
 80072d0:	d01e      	beq.n	8007310 <_printf_common+0xa4>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	68e5      	ldr	r5, [r4, #12]
 80072d6:	6832      	ldr	r2, [r6, #0]
 80072d8:	f003 0306 	and.w	r3, r3, #6
 80072dc:	2b04      	cmp	r3, #4
 80072de:	bf08      	it	eq
 80072e0:	1aad      	subeq	r5, r5, r2
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	6922      	ldr	r2, [r4, #16]
 80072e6:	bf0c      	ite	eq
 80072e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072ec:	2500      	movne	r5, #0
 80072ee:	4293      	cmp	r3, r2
 80072f0:	bfc4      	itt	gt
 80072f2:	1a9b      	subgt	r3, r3, r2
 80072f4:	18ed      	addgt	r5, r5, r3
 80072f6:	2600      	movs	r6, #0
 80072f8:	341a      	adds	r4, #26
 80072fa:	42b5      	cmp	r5, r6
 80072fc:	d11a      	bne.n	8007334 <_printf_common+0xc8>
 80072fe:	2000      	movs	r0, #0
 8007300:	e008      	b.n	8007314 <_printf_common+0xa8>
 8007302:	2301      	movs	r3, #1
 8007304:	4652      	mov	r2, sl
 8007306:	4649      	mov	r1, r9
 8007308:	4638      	mov	r0, r7
 800730a:	47c0      	blx	r8
 800730c:	3001      	adds	r0, #1
 800730e:	d103      	bne.n	8007318 <_printf_common+0xac>
 8007310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007318:	3501      	adds	r5, #1
 800731a:	e7c6      	b.n	80072aa <_printf_common+0x3e>
 800731c:	18e1      	adds	r1, r4, r3
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	2030      	movs	r0, #48	; 0x30
 8007322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007326:	4422      	add	r2, r4
 8007328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800732c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007330:	3302      	adds	r3, #2
 8007332:	e7c7      	b.n	80072c4 <_printf_common+0x58>
 8007334:	2301      	movs	r3, #1
 8007336:	4622      	mov	r2, r4
 8007338:	4649      	mov	r1, r9
 800733a:	4638      	mov	r0, r7
 800733c:	47c0      	blx	r8
 800733e:	3001      	adds	r0, #1
 8007340:	d0e6      	beq.n	8007310 <_printf_common+0xa4>
 8007342:	3601      	adds	r6, #1
 8007344:	e7d9      	b.n	80072fa <_printf_common+0x8e>
	...

08007348 <_printf_i>:
 8007348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	7e0f      	ldrb	r7, [r1, #24]
 800734e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007350:	2f78      	cmp	r7, #120	; 0x78
 8007352:	4691      	mov	r9, r2
 8007354:	4680      	mov	r8, r0
 8007356:	460c      	mov	r4, r1
 8007358:	469a      	mov	sl, r3
 800735a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800735e:	d807      	bhi.n	8007370 <_printf_i+0x28>
 8007360:	2f62      	cmp	r7, #98	; 0x62
 8007362:	d80a      	bhi.n	800737a <_printf_i+0x32>
 8007364:	2f00      	cmp	r7, #0
 8007366:	f000 80d8 	beq.w	800751a <_printf_i+0x1d2>
 800736a:	2f58      	cmp	r7, #88	; 0x58
 800736c:	f000 80a3 	beq.w	80074b6 <_printf_i+0x16e>
 8007370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007378:	e03a      	b.n	80073f0 <_printf_i+0xa8>
 800737a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800737e:	2b15      	cmp	r3, #21
 8007380:	d8f6      	bhi.n	8007370 <_printf_i+0x28>
 8007382:	a101      	add	r1, pc, #4	; (adr r1, 8007388 <_printf_i+0x40>)
 8007384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007388:	080073e1 	.word	0x080073e1
 800738c:	080073f5 	.word	0x080073f5
 8007390:	08007371 	.word	0x08007371
 8007394:	08007371 	.word	0x08007371
 8007398:	08007371 	.word	0x08007371
 800739c:	08007371 	.word	0x08007371
 80073a0:	080073f5 	.word	0x080073f5
 80073a4:	08007371 	.word	0x08007371
 80073a8:	08007371 	.word	0x08007371
 80073ac:	08007371 	.word	0x08007371
 80073b0:	08007371 	.word	0x08007371
 80073b4:	08007501 	.word	0x08007501
 80073b8:	08007425 	.word	0x08007425
 80073bc:	080074e3 	.word	0x080074e3
 80073c0:	08007371 	.word	0x08007371
 80073c4:	08007371 	.word	0x08007371
 80073c8:	08007523 	.word	0x08007523
 80073cc:	08007371 	.word	0x08007371
 80073d0:	08007425 	.word	0x08007425
 80073d4:	08007371 	.word	0x08007371
 80073d8:	08007371 	.word	0x08007371
 80073dc:	080074eb 	.word	0x080074eb
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	1d1a      	adds	r2, r3, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	602a      	str	r2, [r5, #0]
 80073e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0a3      	b.n	800753c <_printf_i+0x1f4>
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	6829      	ldr	r1, [r5, #0]
 80073f8:	0606      	lsls	r6, r0, #24
 80073fa:	f101 0304 	add.w	r3, r1, #4
 80073fe:	d50a      	bpl.n	8007416 <_printf_i+0xce>
 8007400:	680e      	ldr	r6, [r1, #0]
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	2e00      	cmp	r6, #0
 8007406:	da03      	bge.n	8007410 <_printf_i+0xc8>
 8007408:	232d      	movs	r3, #45	; 0x2d
 800740a:	4276      	negs	r6, r6
 800740c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007410:	485e      	ldr	r0, [pc, #376]	; (800758c <_printf_i+0x244>)
 8007412:	230a      	movs	r3, #10
 8007414:	e019      	b.n	800744a <_printf_i+0x102>
 8007416:	680e      	ldr	r6, [r1, #0]
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800741e:	bf18      	it	ne
 8007420:	b236      	sxthne	r6, r6
 8007422:	e7ef      	b.n	8007404 <_printf_i+0xbc>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	6820      	ldr	r0, [r4, #0]
 8007428:	1d19      	adds	r1, r3, #4
 800742a:	6029      	str	r1, [r5, #0]
 800742c:	0601      	lsls	r1, r0, #24
 800742e:	d501      	bpl.n	8007434 <_printf_i+0xec>
 8007430:	681e      	ldr	r6, [r3, #0]
 8007432:	e002      	b.n	800743a <_printf_i+0xf2>
 8007434:	0646      	lsls	r6, r0, #25
 8007436:	d5fb      	bpl.n	8007430 <_printf_i+0xe8>
 8007438:	881e      	ldrh	r6, [r3, #0]
 800743a:	4854      	ldr	r0, [pc, #336]	; (800758c <_printf_i+0x244>)
 800743c:	2f6f      	cmp	r7, #111	; 0x6f
 800743e:	bf0c      	ite	eq
 8007440:	2308      	moveq	r3, #8
 8007442:	230a      	movne	r3, #10
 8007444:	2100      	movs	r1, #0
 8007446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800744a:	6865      	ldr	r5, [r4, #4]
 800744c:	60a5      	str	r5, [r4, #8]
 800744e:	2d00      	cmp	r5, #0
 8007450:	bfa2      	ittt	ge
 8007452:	6821      	ldrge	r1, [r4, #0]
 8007454:	f021 0104 	bicge.w	r1, r1, #4
 8007458:	6021      	strge	r1, [r4, #0]
 800745a:	b90e      	cbnz	r6, 8007460 <_printf_i+0x118>
 800745c:	2d00      	cmp	r5, #0
 800745e:	d04d      	beq.n	80074fc <_printf_i+0x1b4>
 8007460:	4615      	mov	r5, r2
 8007462:	fbb6 f1f3 	udiv	r1, r6, r3
 8007466:	fb03 6711 	mls	r7, r3, r1, r6
 800746a:	5dc7      	ldrb	r7, [r0, r7]
 800746c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007470:	4637      	mov	r7, r6
 8007472:	42bb      	cmp	r3, r7
 8007474:	460e      	mov	r6, r1
 8007476:	d9f4      	bls.n	8007462 <_printf_i+0x11a>
 8007478:	2b08      	cmp	r3, #8
 800747a:	d10b      	bne.n	8007494 <_printf_i+0x14c>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	07de      	lsls	r6, r3, #31
 8007480:	d508      	bpl.n	8007494 <_printf_i+0x14c>
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	6861      	ldr	r1, [r4, #4]
 8007486:	4299      	cmp	r1, r3
 8007488:	bfde      	ittt	le
 800748a:	2330      	movle	r3, #48	; 0x30
 800748c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007490:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007494:	1b52      	subs	r2, r2, r5
 8007496:	6122      	str	r2, [r4, #16]
 8007498:	f8cd a000 	str.w	sl, [sp]
 800749c:	464b      	mov	r3, r9
 800749e:	aa03      	add	r2, sp, #12
 80074a0:	4621      	mov	r1, r4
 80074a2:	4640      	mov	r0, r8
 80074a4:	f7ff fee2 	bl	800726c <_printf_common>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d14c      	bne.n	8007546 <_printf_i+0x1fe>
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074b0:	b004      	add	sp, #16
 80074b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b6:	4835      	ldr	r0, [pc, #212]	; (800758c <_printf_i+0x244>)
 80074b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074bc:	6829      	ldr	r1, [r5, #0]
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074c4:	6029      	str	r1, [r5, #0]
 80074c6:	061d      	lsls	r5, r3, #24
 80074c8:	d514      	bpl.n	80074f4 <_printf_i+0x1ac>
 80074ca:	07df      	lsls	r7, r3, #31
 80074cc:	bf44      	itt	mi
 80074ce:	f043 0320 	orrmi.w	r3, r3, #32
 80074d2:	6023      	strmi	r3, [r4, #0]
 80074d4:	b91e      	cbnz	r6, 80074de <_printf_i+0x196>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	f023 0320 	bic.w	r3, r3, #32
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	2310      	movs	r3, #16
 80074e0:	e7b0      	b.n	8007444 <_printf_i+0xfc>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	f043 0320 	orr.w	r3, r3, #32
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	2378      	movs	r3, #120	; 0x78
 80074ec:	4828      	ldr	r0, [pc, #160]	; (8007590 <_printf_i+0x248>)
 80074ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074f2:	e7e3      	b.n	80074bc <_printf_i+0x174>
 80074f4:	0659      	lsls	r1, r3, #25
 80074f6:	bf48      	it	mi
 80074f8:	b2b6      	uxthmi	r6, r6
 80074fa:	e7e6      	b.n	80074ca <_printf_i+0x182>
 80074fc:	4615      	mov	r5, r2
 80074fe:	e7bb      	b.n	8007478 <_printf_i+0x130>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	6826      	ldr	r6, [r4, #0]
 8007504:	6961      	ldr	r1, [r4, #20]
 8007506:	1d18      	adds	r0, r3, #4
 8007508:	6028      	str	r0, [r5, #0]
 800750a:	0635      	lsls	r5, r6, #24
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	d501      	bpl.n	8007514 <_printf_i+0x1cc>
 8007510:	6019      	str	r1, [r3, #0]
 8007512:	e002      	b.n	800751a <_printf_i+0x1d2>
 8007514:	0670      	lsls	r0, r6, #25
 8007516:	d5fb      	bpl.n	8007510 <_printf_i+0x1c8>
 8007518:	8019      	strh	r1, [r3, #0]
 800751a:	2300      	movs	r3, #0
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	4615      	mov	r5, r2
 8007520:	e7ba      	b.n	8007498 <_printf_i+0x150>
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	1d1a      	adds	r2, r3, #4
 8007526:	602a      	str	r2, [r5, #0]
 8007528:	681d      	ldr	r5, [r3, #0]
 800752a:	6862      	ldr	r2, [r4, #4]
 800752c:	2100      	movs	r1, #0
 800752e:	4628      	mov	r0, r5
 8007530:	f7f8 fe5e 	bl	80001f0 <memchr>
 8007534:	b108      	cbz	r0, 800753a <_printf_i+0x1f2>
 8007536:	1b40      	subs	r0, r0, r5
 8007538:	6060      	str	r0, [r4, #4]
 800753a:	6863      	ldr	r3, [r4, #4]
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	2300      	movs	r3, #0
 8007540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007544:	e7a8      	b.n	8007498 <_printf_i+0x150>
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	462a      	mov	r2, r5
 800754a:	4649      	mov	r1, r9
 800754c:	4640      	mov	r0, r8
 800754e:	47d0      	blx	sl
 8007550:	3001      	adds	r0, #1
 8007552:	d0ab      	beq.n	80074ac <_printf_i+0x164>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	079b      	lsls	r3, r3, #30
 8007558:	d413      	bmi.n	8007582 <_printf_i+0x23a>
 800755a:	68e0      	ldr	r0, [r4, #12]
 800755c:	9b03      	ldr	r3, [sp, #12]
 800755e:	4298      	cmp	r0, r3
 8007560:	bfb8      	it	lt
 8007562:	4618      	movlt	r0, r3
 8007564:	e7a4      	b.n	80074b0 <_printf_i+0x168>
 8007566:	2301      	movs	r3, #1
 8007568:	4632      	mov	r2, r6
 800756a:	4649      	mov	r1, r9
 800756c:	4640      	mov	r0, r8
 800756e:	47d0      	blx	sl
 8007570:	3001      	adds	r0, #1
 8007572:	d09b      	beq.n	80074ac <_printf_i+0x164>
 8007574:	3501      	adds	r5, #1
 8007576:	68e3      	ldr	r3, [r4, #12]
 8007578:	9903      	ldr	r1, [sp, #12]
 800757a:	1a5b      	subs	r3, r3, r1
 800757c:	42ab      	cmp	r3, r5
 800757e:	dcf2      	bgt.n	8007566 <_printf_i+0x21e>
 8007580:	e7eb      	b.n	800755a <_printf_i+0x212>
 8007582:	2500      	movs	r5, #0
 8007584:	f104 0619 	add.w	r6, r4, #25
 8007588:	e7f5      	b.n	8007576 <_printf_i+0x22e>
 800758a:	bf00      	nop
 800758c:	080260df 	.word	0x080260df
 8007590:	080260f0 	.word	0x080260f0

08007594 <__retarget_lock_acquire_recursive>:
 8007594:	4770      	bx	lr

08007596 <__retarget_lock_release_recursive>:
 8007596:	4770      	bx	lr

08007598 <memcpy>:
 8007598:	440a      	add	r2, r1
 800759a:	4291      	cmp	r1, r2
 800759c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075a0:	d100      	bne.n	80075a4 <memcpy+0xc>
 80075a2:	4770      	bx	lr
 80075a4:	b510      	push	{r4, lr}
 80075a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ae:	4291      	cmp	r1, r2
 80075b0:	d1f9      	bne.n	80075a6 <memcpy+0xe>
 80075b2:	bd10      	pop	{r4, pc}

080075b4 <memmove>:
 80075b4:	4288      	cmp	r0, r1
 80075b6:	b510      	push	{r4, lr}
 80075b8:	eb01 0402 	add.w	r4, r1, r2
 80075bc:	d902      	bls.n	80075c4 <memmove+0x10>
 80075be:	4284      	cmp	r4, r0
 80075c0:	4623      	mov	r3, r4
 80075c2:	d807      	bhi.n	80075d4 <memmove+0x20>
 80075c4:	1e43      	subs	r3, r0, #1
 80075c6:	42a1      	cmp	r1, r4
 80075c8:	d008      	beq.n	80075dc <memmove+0x28>
 80075ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075d2:	e7f8      	b.n	80075c6 <memmove+0x12>
 80075d4:	4402      	add	r2, r0
 80075d6:	4601      	mov	r1, r0
 80075d8:	428a      	cmp	r2, r1
 80075da:	d100      	bne.n	80075de <memmove+0x2a>
 80075dc:	bd10      	pop	{r4, pc}
 80075de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075e6:	e7f7      	b.n	80075d8 <memmove+0x24>

080075e8 <_realloc_r>:
 80075e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ec:	4680      	mov	r8, r0
 80075ee:	4614      	mov	r4, r2
 80075f0:	460e      	mov	r6, r1
 80075f2:	b921      	cbnz	r1, 80075fe <_realloc_r+0x16>
 80075f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f8:	4611      	mov	r1, r2
 80075fa:	f7ff bc2b 	b.w	8006e54 <_malloc_r>
 80075fe:	b92a      	cbnz	r2, 800760c <_realloc_r+0x24>
 8007600:	f7ff fbbc 	bl	8006d7c <_free_r>
 8007604:	4625      	mov	r5, r4
 8007606:	4628      	mov	r0, r5
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760c:	f000 f81b 	bl	8007646 <_malloc_usable_size_r>
 8007610:	4284      	cmp	r4, r0
 8007612:	4607      	mov	r7, r0
 8007614:	d802      	bhi.n	800761c <_realloc_r+0x34>
 8007616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800761a:	d812      	bhi.n	8007642 <_realloc_r+0x5a>
 800761c:	4621      	mov	r1, r4
 800761e:	4640      	mov	r0, r8
 8007620:	f7ff fc18 	bl	8006e54 <_malloc_r>
 8007624:	4605      	mov	r5, r0
 8007626:	2800      	cmp	r0, #0
 8007628:	d0ed      	beq.n	8007606 <_realloc_r+0x1e>
 800762a:	42bc      	cmp	r4, r7
 800762c:	4622      	mov	r2, r4
 800762e:	4631      	mov	r1, r6
 8007630:	bf28      	it	cs
 8007632:	463a      	movcs	r2, r7
 8007634:	f7ff ffb0 	bl	8007598 <memcpy>
 8007638:	4631      	mov	r1, r6
 800763a:	4640      	mov	r0, r8
 800763c:	f7ff fb9e 	bl	8006d7c <_free_r>
 8007640:	e7e1      	b.n	8007606 <_realloc_r+0x1e>
 8007642:	4635      	mov	r5, r6
 8007644:	e7df      	b.n	8007606 <_realloc_r+0x1e>

08007646 <_malloc_usable_size_r>:
 8007646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764a:	1f18      	subs	r0, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfbc      	itt	lt
 8007650:	580b      	ldrlt	r3, [r1, r0]
 8007652:	18c0      	addlt	r0, r0, r3
 8007654:	4770      	bx	lr
	...

08007658 <_init>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr

08007664 <_fini>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr
