
PeripherialTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0801336c  0801336c  0002336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c90  08013c90  00030458  2**0
                  CONTENTS
  4 .ARM          00000008  08013c90  08013c90  00023c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c98  08013c98  00030458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c98  08013c98  00023c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c9c  08013c9c  00023c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  08013ca0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b0  20000458  080140f8  00030458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002608  080140f8  00032608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029262  00000000  00000000  00030488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e71  00000000  00000000  000596ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  0005e560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee8  00000000  00000000  00060648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ddf6  00000000  00000000  00062530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029091  00000000  00000000  00080326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4a9a  00000000  00000000  000a93b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014de51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009184  00000000  00000000  0014dea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000458 	.word	0x20000458
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013354 	.word	0x08013354

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000045c 	.word	0x2000045c
 80001dc:	08013354 	.word	0x08013354

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
uint16_t MaxCCR;
int32_t EncoderCounts;
char USBBuffer[16];

int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  HAL_Init();
 800058a:	f001 fd29 	bl	8001fe0 <HAL_Init>
  SystemClock_Config();
 800058e:	f000 fa17 	bl	80009c0 <SystemClock_Config>
  MX_GPIO_Init();
 8000592:	f000 fcd1 	bl	8000f38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000596:	f000 fcaf 	bl	8000ef8 <MX_DMA_Init>
  MX_I2C1_Init();
 800059a:	f000 fa7d 	bl	8000a98 <MX_I2C1_Init>
  MX_I2C2_Init();
 800059e:	f000 faa9 	bl	8000af4 <MX_I2C2_Init>
  MX_TIM1_Init();
 80005a2:	f000 fb31 	bl	8000c08 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005a6:	f000 fb87 	bl	8000cb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005aa:	f000 fbfb 	bl	8000da4 <MX_TIM4_Init>
  MX_TIM9_Init();
 80005ae:	f000 fc69 	bl	8000e84 <MX_TIM9_Init>
  MX_RTC_Init();
 80005b2:	f000 facd 	bl	8000b50 <MX_RTC_Init>
  MX_SPI2_Init();
 80005b6:	f000 faf1 	bl	8000b9c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 80005ba:	f011 fd17 	bl	8011fec <MX_USB_DEVICE_Init>
  LCD_init();
 80005be:	f001 fca7 	bl	8001f10 <LCD_init>

  MaxCCR = htim3.Init.Period;
 80005c2:	4b84      	ldr	r3, [pc, #528]	; (80007d4 <main+0x250>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b83      	ldr	r3, [pc, #524]	; (80007d8 <main+0x254>)
 80005ca:	801a      	strh	r2, [r3, #0]
  Dev->I2cHandle = &hi2c1;
 80005cc:	4b83      	ldr	r3, [pc, #524]	; (80007dc <main+0x258>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a83      	ldr	r2, [pc, #524]	; (80007e0 <main+0x25c>)
 80005d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev->I2cDevAddr = 0x52;
 80005d6:	4b81      	ldr	r3, [pc, #516]	; (80007dc <main+0x258>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2252      	movs	r2, #82	; 0x52
 80005dc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  //Disable XSHUT
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e6:	487f      	ldr	r0, [pc, #508]	; (80007e4 <main+0x260>)
 80005e8:	f002 fbde 	bl	8002da8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80005ec:	2014      	movs	r0, #20
 80005ee:	f001 fd69 	bl	80020c4 <HAL_Delay>
  //Enable XSHUT
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	487a      	ldr	r0, [pc, #488]	; (80007e4 <main+0x260>)
 80005fa:	f002 fbd5 	bl	8002da8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80005fe:	2014      	movs	r0, #20
 8000600:	f001 fd60 	bl	80020c4 <HAL_Delay>

  VL53L0X_WaitDeviceBooted( Dev );
 8000604:	4b75      	ldr	r3, [pc, #468]	; (80007dc <main+0x258>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f00b f869 	bl	800b6e0 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 800060e:	4b73      	ldr	r3, [pc, #460]	; (80007dc <main+0x258>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f00a fd7e 	bl	800b114 <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 8000618:	4b70      	ldr	r3, [pc, #448]	; (80007dc <main+0x258>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f00a fedd 	bl	800b3dc <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000622:	4b6e      	ldr	r3, [pc, #440]	; (80007dc <main+0x258>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a70      	ldr	r2, [pc, #448]	; (80007e8 <main+0x264>)
 8000628:	4970      	ldr	r1, [pc, #448]	; (80007ec <main+0x268>)
 800062a:	4618      	mov	r0, r3
 800062c:	f00b fd78 	bl	800c120 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000630:	4b6a      	ldr	r3, [pc, #424]	; (80007dc <main+0x258>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a6e      	ldr	r2, [pc, #440]	; (80007f0 <main+0x26c>)
 8000636:	496f      	ldr	r1, [pc, #444]	; (80007f4 <main+0x270>)
 8000638:	4618      	mov	r0, r3
 800063a:	f00c f9ff 	bl	800ca3c <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800063e:	4b67      	ldr	r3, [pc, #412]	; (80007dc <main+0x258>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f00b f8e9 	bl	800b81c <VL53L0X_SetDeviceMode>

  // Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800064a:	4b64      	ldr	r3, [pc, #400]	; (80007dc <main+0x258>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2201      	movs	r2, #1
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f00b fb5e 	bl	800bd14 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000658:	4b60      	ldr	r3, [pc, #384]	; (80007dc <main+0x258>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f00b fb57 	bl	800bd14 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000666:	4b5d      	ldr	r3, [pc, #372]	; (80007dc <main+0x258>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f641 1299 	movw	r2, #6553	; 0x1999
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f00b fbff 	bl	800be74 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000676:	4b59      	ldr	r3, [pc, #356]	; (80007dc <main+0x258>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f00b fbf7 	bl	800be74 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000686:	4b55      	ldr	r3, [pc, #340]	; (80007dc <main+0x258>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800068e:	4618      	mov	r0, r3
 8000690:	f00b f922 	bl	800b8d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000694:	4b51      	ldr	r3, [pc, #324]	; (80007dc <main+0x258>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2212      	movs	r2, #18
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f00b f941 	bl	800b924 <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80006a2:	4b4e      	ldr	r3, [pc, #312]	; (80007dc <main+0x258>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	220e      	movs	r2, #14
 80006a8:	2101      	movs	r1, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f00b f93a 	bl	800b924 <VL53L0X_SetVcselPulsePeriod>
  //AT24C04
  //Get the values of the control constants


  //Enable the AND Gate
  HAL_GPIO_WritePin(EnableFAN_GPIO_Port, EnableFAN_Pin, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2120      	movs	r1, #32
 80006b4:	4850      	ldr	r0, [pc, #320]	; (80007f8 <main+0x274>)
 80006b6:	f002 fb77 	bl	8002da8 <HAL_GPIO_WritePin>
  //Encoder Timer
  TIM1 -> CNT = TimerMiddleValue;
 80006ba:	4b50      	ldr	r3, [pc, #320]	; (80007fc <main+0x278>)
 80006bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80006c2:	213c      	movs	r1, #60	; 0x3c
 80006c4:	484e      	ldr	r0, [pc, #312]	; (8000800 <main+0x27c>)
 80006c6:	f006 fc71 	bl	8006fac <HAL_TIM_Encoder_Start>
  //PWM Timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006ca:	2100      	movs	r1, #0
 80006cc:	4841      	ldr	r0, [pc, #260]	; (80007d4 <main+0x250>)
 80006ce:	f006 f9ef 	bl	8006ab0 <HAL_TIM_PWM_Start>
  TIM3 -> CCR1 = 0;
 80006d2:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <main+0x280>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	635a      	str	r2, [r3, #52]	; 0x34
  //RPM Speed Timer
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 80006d8:	2100      	movs	r1, #0
 80006da:	484b      	ldr	r0, [pc, #300]	; (8000808 <main+0x284>)
 80006dc:	f006 faf2 	bl	8006cc4 <HAL_TIM_IC_Start>
  //PID Control timer
  HAL_TIM_Base_Start_IT(&htim9);
 80006e0:	484a      	ldr	r0, [pc, #296]	; (800080c <main+0x288>)
 80006e2:	f006 f929 	bl	8006938 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	if(HAL_GPIO_ReadPin(EncoderSW_GPIO_Port, EncoderSW_Pin) == 0)
 80006e6:	2102      	movs	r1, #2
 80006e8:	483e      	ldr	r0, [pc, #248]	; (80007e4 <main+0x260>)
 80006ea:	f002 fb45 	bl	8002d78 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <main+0x178>
		EncoderReset();
 80006f4:	4b41      	ldr	r3, [pc, #260]	; (80007fc <main+0x278>)
 80006f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
    //GetCounts
	//EncoderGetVal(EncoderCounts); TODO

	EncoderCounts = EncoderCNTInv;
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <main+0x278>)
 80006fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000700:	089b      	lsrs	r3, r3, #2
 8000702:	f5a3 53ff 	sub.w	r3, r3, #8160	; 0x1fe0
 8000706:	3b1f      	subs	r3, #31
 8000708:	461a      	mov	r2, r3
 800070a:	4b41      	ldr	r3, [pc, #260]	; (8000810 <main+0x28c>)
 800070c:	601a      	str	r2, [r3, #0]
	if(EncoderCounts < 0) {
 800070e:	4b40      	ldr	r3, [pc, #256]	; (8000810 <main+0x28c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	da06      	bge.n	8000724 <main+0x1a0>
		EncoderCounts = 0;
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <main+0x28c>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
		EncoderReset();
 800071c:	4b37      	ldr	r3, [pc, #220]	; (80007fc <main+0x278>)
 800071e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CNT = 500; //Solve equation
	}
	*/


    sprintf(USBBuffer, "%d", (int)EncoderCounts);
 8000724:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <main+0x28c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	493a      	ldr	r1, [pc, #232]	; (8000814 <main+0x290>)
 800072c:	483a      	ldr	r0, [pc, #232]	; (8000818 <main+0x294>)
 800072e:	f012 f9a9 	bl	8012a84 <siprintf>
    //Print to the LCD
    LCD_PutStr(10, 35, "         ", FONT_6X8, C_CYAN, C_BLACK);
 8000732:	2300      	movs	r3, #0
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	4b37      	ldr	r3, [pc, #220]	; (800081c <main+0x298>)
 800073e:	4a38      	ldr	r2, [pc, #224]	; (8000820 <main+0x29c>)
 8000740:	2123      	movs	r1, #35	; 0x23
 8000742:	200a      	movs	r0, #10
 8000744:	f001 fba6 	bl	8001e94 <LCD_PutStr>
    LCD_PutStr(10, 35, USBBuffer, FONT_6X8, C_CYAN, C_BLACK);
 8000748:	2300      	movs	r3, #0
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <main+0x298>)
 8000754:	4a30      	ldr	r2, [pc, #192]	; (8000818 <main+0x294>)
 8000756:	2123      	movs	r1, #35	; 0x23
 8000758:	200a      	movs	r0, #10
 800075a:	f001 fb9b 	bl	8001e94 <LCD_PutStr>
    UG_Update();
 800075e:	f00a fa9f 	bl	800aca0 <UG_Update>
    //Use it for controlling

    //GetMeasure
    VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <main+0x258>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	492f      	ldr	r1, [pc, #188]	; (8000824 <main+0x2a0>)
 8000768:	4618      	mov	r0, r3
 800076a:	f00b ff7b 	bl	800c664 <VL53L0X_PerformSingleRangingMeasurement>
    if(RangingData.RangeStatus == 0)
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <main+0x2a0>)
 8000770:	7e1b      	ldrb	r3, [r3, #24]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d128      	bne.n	80007c8 <main+0x244>
    {
	  if(RangingData.RangeMilliMeter > past_measure+MeasureTolerance || RangingData.RangeMilliMeter < past_measure-MeasureTolerance)
 8000776:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <main+0x2a0>)
 8000778:	891b      	ldrh	r3, [r3, #8]
 800077a:	461a      	mov	r2, r3
 800077c:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <main+0x2a4>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	3305      	adds	r3, #5
 8000782:	429a      	cmp	r2, r3
 8000784:	dc07      	bgt.n	8000796 <main+0x212>
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <main+0x2a0>)
 8000788:	891b      	ldrh	r3, [r3, #8]
 800078a:	461a      	mov	r2, r3
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <main+0x2a4>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	3b05      	subs	r3, #5
 8000792:	429a      	cmp	r2, r3
 8000794:	da18      	bge.n	80007c8 <main+0x244>
	  {
		  distance = Reference - RangingData.RangeMilliMeter;
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <main+0x2a0>)
 8000798:	891b      	ldrh	r3, [r3, #8]
 800079a:	f5c3 7302 	rsb	r3, r3, #520	; 0x208
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <main+0x2a8>)
 80007a2:	801a      	strh	r2, [r3, #0]
		  sprintf(DistanceBuffer, "%d", (int)distance);
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <main+0x2a8>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	491a      	ldr	r1, [pc, #104]	; (8000814 <main+0x290>)
 80007ac:	4820      	ldr	r0, [pc, #128]	; (8000830 <main+0x2ac>)
 80007ae:	f012 f969 	bl	8012a84 <siprintf>
		  LCD_PutStr(10, 55, DistanceBuffer, FONT_6X8, C_RED, C_BLACK);
 80007b2:	2300      	movs	r3, #0
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <main+0x298>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <main+0x2ac>)
 80007c0:	2137      	movs	r1, #55	; 0x37
 80007c2:	200a      	movs	r0, #10
 80007c4:	f001 fb66 	bl	8001e94 <LCD_PutStr>
	  }
    }
    past_measure = RangingData.RangeMilliMeter;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <main+0x2a0>)
 80007ca:	891a      	ldrh	r2, [r3, #8]
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <main+0x2a4>)
 80007ce:	801a      	strh	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(EncoderSW_GPIO_Port, EncoderSW_Pin) == 0)
 80007d0:	e789      	b.n	80006e6 <main+0x162>
 80007d2:	bf00      	nop
 80007d4:	2000063c 	.word	0x2000063c
 80007d8:	20000914 	.word	0x20000914
 80007dc:	20000028 	.word	0x20000028
 80007e0:	20000474 	.word	0x20000474
 80007e4:	40020000 	.word	0x40020000
 80007e8:	200008c6 	.word	0x200008c6
 80007ec:	200008c5 	.word	0x200008c5
 80007f0:	200008c4 	.word	0x200008c4
 80007f4:	200008c0 	.word	0x200008c0
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40010000 	.word	0x40010000
 8000800:	200005f4 	.word	0x200005f4
 8000804:	40000400 	.word	0x40000400
 8000808:	20000684 	.word	0x20000684
 800080c:	200006cc 	.word	0x200006cc
 8000810:	20000918 	.word	0x20000918
 8000814:	0801336c 	.word	0x0801336c
 8000818:	2000091c 	.word	0x2000091c
 800081c:	08013434 	.word	0x08013434
 8000820:	08013370 	.word	0x08013370
 8000824:	20000714 	.word	0x20000714
 8000828:	20000912 	.word	0x20000912
 800082c:	20000910 	.word	0x20000910
 8000830:	2000090c 	.word	0x2000090c

08000834 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	PID.Error = PID.Set_point - distance;
 800083c:	4b57      	ldr	r3, [pc, #348]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000840:	4a57      	ldr	r2, [pc, #348]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000842:	8812      	ldrh	r2, [r2, #0]
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	4a55      	ldr	r2, [pc, #340]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000848:	61d3      	str	r3, [r2, #28]
	PID.P = (float)PID.Error * PID.Kp;
 800084a:	4b54      	ldr	r3, [pc, #336]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000856:	4b51      	ldr	r3, [pc, #324]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000858:	edd3 7a00 	vldr	s15, [r3]
 800085c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000860:	4b4e      	ldr	r3, [pc, #312]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000862:	edc3 7a04 	vstr	s15, [r3, #16]
	PID.I += (float)PID.Error * PID.Ki;
 8000866:	4b4d      	ldr	r3, [pc, #308]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000868:	ed93 7a05 	vldr	s14, [r3, #20]
 800086c:	4b4b      	ldr	r3, [pc, #300]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000878:	4b48      	ldr	r3, [pc, #288]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800087a:	edd3 7a01 	vldr	s15, [r3, #4]
 800087e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000888:	edc3 7a05 	vstr	s15, [r3, #20]
	PID.D = (float)(PID.Error - PID.Past_Error) * PID.Kd;
 800088c:	4b43      	ldr	r3, [pc, #268]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800088e:	69da      	ldr	r2, [r3, #28]
 8000890:	4b42      	ldr	r3, [pc, #264]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000892:	6a1b      	ldr	r3, [r3, #32]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	ee07 3a90 	vmov	s15, r3
 800089a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800089e:	4b3f      	ldr	r3, [pc, #252]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80008a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a8:	4b3c      	ldr	r3, [pc, #240]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008aa:	edc3 7a06 	vstr	s15, [r3, #24]
#ifdef MaxPID
	if(PID.I > 80)
 80008ae:	4b3b      	ldr	r3, [pc, #236]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80008b4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80009a4 <HAL_TIM_PeriodElapsedCallback+0x170>
 80008b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c0:	dd03      	ble.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x96>
	{
		PID.I = 80;
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008c4:	4a38      	ldr	r2, [pc, #224]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	e00c      	b.n	80008e4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	}
	else if(PID.I < -80)
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80008d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80009ac <HAL_TIM_PeriodElapsedCallback+0x178>
 80008d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	d502      	bpl.n	80008e4 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		PID.I = -80;
 80008de:	4b2f      	ldr	r3, [pc, #188]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008e0:	4a33      	ldr	r2, [pc, #204]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80008e2:	615a      	str	r2, [r3, #20]
	else if(PID.I < 0)
	{
		PID.I = 0;
	}
#endif
	PID.Control = PID.P + PID.I + PID.D;
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80008ea:	4b2c      	ldr	r3, [pc, #176]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80008f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80008fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000900:	edc3 7a03 	vstr	s15, [r3, #12]
	if(PID.Control < 0)
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000906:	edd3 7a03 	vldr	s15, [r3, #12]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	d513      	bpl.n	800093c <HAL_TIM_PeriodElapsedCallback+0x108>
		PID.Control = ABS(PID.Control);
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000916:	edd3 7a03 	vldr	s15, [r3, #12]
 800091a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800091e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000922:	dd03      	ble.n	800092c <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000926:	edd3 7a03 	vldr	s15, [r3, #12]
 800092a:	e004      	b.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x102>
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800092e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000932:	eef1 7a67 	vneg.f32	s15, s15
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000938:	edc3 7a03 	vstr	s15, [r3, #12]
#ifdef MaxPID
	if(PID.Control > MaxPID)
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800093e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000942:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80009b4 <HAL_TIM_PeriodElapsedCallback+0x180>
 8000946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094e:	dd02      	ble.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x122>
		PID.Control = MaxPID;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000952:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000954:	60da      	str	r2, [r3, #12]
	TIM2 -> CCR1 = (uint32_t)((PID.Control * MaxCCR) / 100) + 2056;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000958:	ed93 7a03 	vldr	s14, [r3, #12]
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x188>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	ee07 3a90 	vmov	s15, r3
 8000964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800096c:	eddf 6a11 	vldr	s13, [pc, #68]	; 80009b4 <HAL_TIM_PeriodElapsedCallback+0x180>
 8000970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000978:	ee17 3a90 	vmov	r3, s15
 800097c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000980:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8000984:	6353      	str	r3, [r2, #52]	; 0x34
#else
	if(PID.Control > MaxCCR)
		PID.Control = MaxCCR;
	TIM2 -> CCR1 = (uint32_t)(PID.Control);
#endif
	PID.Past_Error = PID.Error;
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x168>)
 800098c:	6213      	str	r3, [r2, #32]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000910 	.word	0x20000910
 80009a4:	42a00000 	.word	0x42a00000
 80009a8:	42a00000 	.word	0x42a00000
 80009ac:	c2a00000 	.word	0xc2a00000
 80009b0:	c2a00000 	.word	0xc2a00000
 80009b4:	42c80000 	.word	0x42c80000
 80009b8:	42c80000 	.word	0x42c80000
 80009bc:	20000914 	.word	0x20000914

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f012 f850 	bl	8012a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <SystemClock_Config+0xd0>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <SystemClock_Config+0xd0>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <SystemClock_Config+0xd0>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 23;
 8000a34:	2317      	movs	r3, #23
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 354;
 8000a38:	f44f 73b1 	mov.w	r3, #354	; 0x162
 8000a3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a42:	2308      	movs	r3, #8
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fbfc 	bl	8005248 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a56:	f000 fb6f 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2103      	movs	r1, #3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f004 fe5e 	bl	8005738 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a82:	f000 fb59 	bl	8001138 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000a9e:	4a13      	ldr	r2, [pc, #76]	; (8000aec <MX_I2C1_Init+0x54>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_I2C1_Init+0x58>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ad6:	f002 f9a5 	bl	8002e24 <HAL_I2C_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae0:	f000 fb2a 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000474 	.word	0x20000474
 8000aec:	40005400 	.word	0x40005400
 8000af0:	00061a80 	.word	0x00061a80

08000af4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_I2C2_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_I2C2_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b32:	f002 f977 	bl	8002e24 <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 fafc 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200004c8 	.word	0x200004c8
 8000b48:	40005800 	.word	0x40005800
 8000b4c:	00061a80 	.word	0x00061a80

08000b50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_RTC_Init+0x44>)
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <MX_RTC_Init+0x48>)
 8000b58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_RTC_Init+0x44>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_RTC_Init+0x44>)
 8000b62:	227f      	movs	r2, #127	; 0x7f
 8000b64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_RTC_Init+0x44>)
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_RTC_Init+0x44>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_RTC_Init+0x44>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_RTC_Init+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_RTC_Init+0x44>)
 8000b80:	f005 f896 	bl	8005cb0 <HAL_RTC_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b8a:	f000 fad5 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000051c 	.word	0x2000051c
 8000b98:	40002800 	.word	0x40002800

08000b9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_SPI2_Init+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000be8:	220a      	movs	r2, #10
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_SPI2_Init+0x64>)
 8000bee:	f005 f959 	bl	8005ea4 <HAL_SPI_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bf8:	f000 fa9e 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000053c 	.word	0x2000053c
 8000c04:	40003800 	.word	0x40003800

08000c08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2224      	movs	r2, #36	; 0x24
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f011 ff2c 	bl	8012a74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <MX_TIM1_Init+0xac>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c50:	2303      	movs	r3, #3
 8000c52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000c60:	230a      	movs	r3, #10
 8000c62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000c70:	230a      	movs	r3, #10
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c7c:	f006 f8f0 	bl	8006e60 <HAL_TIM_Encoder_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c86:	f000 fa57 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_TIM1_Init+0xa8>)
 8000c98:	f007 f956 	bl	8007f48 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000ca2:	f000 fa49 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	; 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200005f4 	.word	0x200005f4
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000cea:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <MX_TIM3_Init+0xe8>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cfa:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d0e:	4823      	ldr	r0, [pc, #140]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000d10:	f005 fdc2 	bl	8006898 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d1a:	f000 fa0d 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481c      	ldr	r0, [pc, #112]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000d2c:	f006 fc32 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d36:	f000 f9ff 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000d3c:	f005 fe5e 	bl	80069fc <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d46:	f000 f9f7 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	4619      	mov	r1, r3
 8000d58:	4810      	ldr	r0, [pc, #64]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000d5a:	f007 f8f5 	bl	8007f48 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d64:	f000 f9e8 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d68:	2360      	movs	r3, #96	; 0x60
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000d80:	f006 fb46 	bl	8007410 <HAL_TIM_PWM_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d8a:	f000 f9d5 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM3_Init+0xe4>)
 8000d90:	f000 fc08 	bl	80015a4 <HAL_TIM_MspPostInit>

}
 8000d94:	bf00      	nop
 8000d96:	3738      	adds	r7, #56	; 0x38
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000063c 	.word	0x2000063c
 8000da0:	40000400 	.word	0x40000400

08000da4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dce:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000dd0:	4a2b      	ldr	r2, [pc, #172]	; (8000e80 <MX_TIM4_Init+0xdc>)
 8000dd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000df4:	4821      	ldr	r0, [pc, #132]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000df6:	f005 fd4f 	bl	8006898 <HAL_TIM_Base_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000e00:	f000 f99a 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481a      	ldr	r0, [pc, #104]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000e12:	f006 fbbf 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f98c 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000e22:	f005 fef5 	bl	8006c10 <HAL_TIM_IC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f984 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480f      	ldr	r0, [pc, #60]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000e40:	f007 f882 	bl	8007f48 <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000e4a:	f000 f975 	bl	8001138 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e52:	2301      	movs	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_TIM4_Init+0xd8>)
 8000e66:	f006 fa37 	bl	80072d8 <HAL_TIM_IC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000e70:	f000 f962 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000684 	.word	0x20000684
 8000e80:	40000800 	.word	0x40000800

08000e84 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <MX_TIM9_Init+0x6c>)
 8000e98:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <MX_TIM9_Init+0x70>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_TIM9_Init+0x6c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_TIM9_Init+0x6c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_TIM9_Init+0x6c>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_TIM9_Init+0x6c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_TIM9_Init+0x6c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_TIM9_Init+0x6c>)
 8000ebe:	f005 fceb 	bl	8006898 <HAL_TIM_Base_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000ec8:	f000 f936 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <MX_TIM9_Init+0x6c>)
 8000ed8:	f006 fb5c 	bl	8007594 <HAL_TIM_ConfigClockSource>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000ee2:	f000 f929 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200006cc 	.word	0x200006cc
 8000ef4:	40014000 	.word	0x40014000

08000ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_DMA_Init+0x3c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <MX_DMA_Init+0x3c>)
 8000f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_DMA_Init+0x3c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f001 f9cf 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f24:	200f      	movs	r0, #15
 8000f26:	f001 f9e8 	bl	80022fa <HAL_NVIC_EnableIRQ>

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b75      	ldr	r3, [pc, #468]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a74      	ldr	r2, [pc, #464]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b72      	ldr	r3, [pc, #456]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b6e      	ldr	r3, [pc, #440]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a6d      	ldr	r2, [pc, #436]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b67      	ldr	r3, [pc, #412]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a66      	ldr	r2, [pc, #408]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b64      	ldr	r3, [pc, #400]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b60      	ldr	r3, [pc, #384]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <MX_GPIO_Init+0x1f0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ProgramRunning_GPIO_Port, ProgramRunning_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc4:	4859      	ldr	r0, [pc, #356]	; (800112c <MX_GPIO_Init+0x1f4>)
 8000fc6:	f001 feef 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AT24C04_WP_Pin|EnableFAN_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2121      	movs	r1, #33	; 0x21
 8000fce:	4858      	ldr	r0, [pc, #352]	; (8001130 <MX_GPIO_Init+0x1f8>)
 8000fd0:	f001 feea 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8000fda:	4855      	ldr	r0, [pc, #340]	; (8001130 <MX_GPIO_Init+0x1f8>)
 8000fdc:	f001 fee4 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	4853      	ldr	r0, [pc, #332]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fe8:	f001 fede 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff2:	4850      	ldr	r0, [pc, #320]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000ff4:	f001 fed8 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ProgramRunning_Pin */
  GPIO_InitStruct.Pin = ProgramRunning_Pin;
 8000ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ProgramRunning_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4846      	ldr	r0, [pc, #280]	; (800112c <MX_GPIO_Init+0x1f4>)
 8001012:	f001 fd2d 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DevMode_IT_Pin Reset_IT_Pin */
  GPIO_InitStruct.Pin = DevMode_IT_Pin|Reset_IT_Pin;
 8001016:	2381      	movs	r3, #129	; 0x81
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800101a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4842      	ldr	r0, [pc, #264]	; (8001134 <MX_GPIO_Init+0x1fc>)
 800102c:	f001 fd20 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : EncoderSW_Pin Left_Pin Right_Pin Down_Pin */
  GPIO_InitStruct.Pin = EncoderSW_Pin|Left_Pin|Right_Pin|Down_Pin;
 8001030:	231e      	movs	r3, #30
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	483c      	ldr	r0, [pc, #240]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8001044:	f001 fd14 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Up_Pin Ok_Pin */
  GPIO_InitStruct.Pin = Up_Pin|Ok_Pin;
 8001048:	2360      	movs	r3, #96	; 0x60
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4836      	ldr	r0, [pc, #216]	; (8001134 <MX_GPIO_Init+0x1fc>)
 800105c:	f001 fd08 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : AT24C04_WP_Pin EnableFAN_Pin */
  GPIO_InitStruct.Pin = AT24C04_WP_Pin|EnableFAN_Pin;
 8001060:	2321      	movs	r3, #33	; 0x21
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	482e      	ldr	r0, [pc, #184]	; (8001130 <MX_GPIO_Init+0x1f8>)
 8001078:	f001 fcfa 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Menu_IT_Pin */
  GPIO_InitStruct.Pin = Menu_IT_Pin;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001080:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	2301      	movs	r3, #1
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Menu_IT_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4827      	ldr	r0, [pc, #156]	; (8001130 <MX_GPIO_Init+0x1f8>)
 8001092:	f001 fced 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_BLK_Pin;
 8001096:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4820      	ldr	r0, [pc, #128]	; (8001130 <MX_GPIO_Init+0x1f8>)
 80010b0:	f001 fcde 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin;
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <MX_GPIO_Init+0x1fc>)
 80010ce:	f001 fccf 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80010d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4812      	ldr	r0, [pc, #72]	; (8001134 <MX_GPIO_Init+0x1fc>)
 80010ec:	f001 fcc0 	bl	8002a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2006      	movs	r0, #6
 80010f6:	f001 f8e4 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010fa:	2006      	movs	r0, #6
 80010fc:	f001 f8fd 	bl	80022fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2007      	movs	r0, #7
 8001106:	f001 f8dc 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800110a:	2007      	movs	r0, #7
 800110c:	f001 f8f5 	bl	80022fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	2017      	movs	r0, #23
 8001116:	f001 f8d4 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800111a:	2017      	movs	r0, #23
 800111c:	f001 f8ed 	bl	80022fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020800 	.word	0x40020800
 8001130:	40020400 	.word	0x40020400
 8001134:	40020000 	.word	0x40020000

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <HAL_MspInit+0x4c>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_MspInit+0x4c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_MspInit+0x4c>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <HAL_I2C_MspInit+0x10c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12d      	bne.n	8001212 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a39      	ldr	r2, [pc, #228]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e4:	2304      	movs	r3, #4
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	482e      	ldr	r0, [pc, #184]	; (80012a8 <HAL_I2C_MspInit+0x114>)
 80011f0:	f001 fc3e 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 80011fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001210:	e041      	b.n	8001296 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <HAL_I2C_MspInit+0x118>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d13c      	bne.n	8001296 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123e:	2312      	movs	r3, #18
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800124a:	2304      	movs	r3, #4
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <HAL_I2C_MspInit+0x114>)
 8001256:	f001 fc0b 	bl	8002a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800125a:	2308      	movs	r3, #8
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125e:	2312      	movs	r3, #18
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800126a:	2309      	movs	r3, #9
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <HAL_I2C_MspInit+0x114>)
 8001276:	f001 fbfb 	bl	8002a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_I2C_MspInit+0x110>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	bf00      	nop
 8001298:	3730      	adds	r7, #48	; 0x30
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40005400 	.word	0x40005400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40005800 	.word	0x40005800

080012b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_RTC_MspInit+0x50>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d111      	bne.n	80012f8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012d4:	2302      	movs	r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012dc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fbf4 	bl	8005ad0 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80012ee:	f7ff ff23 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_RTC_MspInit+0x54>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40002800 	.word	0x40002800
 8001304:	42470e3c 	.word	0x42470e3c

08001308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a34      	ldr	r2, [pc, #208]	; (80013f8 <HAL_SPI_MspInit+0xf0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d161      	bne.n	80013ee <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_SPI_MspInit+0xf4>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_SPI_MspInit+0xf4>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_SPI_MspInit+0xf4>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <HAL_SPI_MspInit+0xf4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <HAL_SPI_MspInit+0xf4>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_SPI_MspInit+0xf4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin;
 8001362:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001374:	2305      	movs	r3, #5
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4820      	ldr	r0, [pc, #128]	; (8001400 <HAL_SPI_MspInit+0xf8>)
 8001380:	f001 fb76 	bl	8002a70 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 8001386:	4a20      	ldr	r2, [pc, #128]	; (8001408 <HAL_SPI_MspInit+0x100>)
 8001388:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 8001392:	2240      	movs	r2, #64	; 0x40
 8001394:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 800139e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80013c2:	4810      	ldr	r0, [pc, #64]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 80013c4:	f000 ffb4 	bl	8002330 <HAL_DMA_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80013ce:	f7ff feb3 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 80013d6:	649a      	str	r2, [r3, #72]	; 0x48
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_SPI_MspInit+0xfc>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2024      	movs	r0, #36	; 0x24
 80013e4:	f000 ff6d 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013e8:	2024      	movs	r0, #36	; 0x24
 80013ea:	f000 ff86 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40003800 	.word	0x40003800
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400
 8001404:	20000594 	.word	0x20000594
 8001408:	40026070 	.word	0x40026070

0800140c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_TIM_Encoder_MspInit+0x94>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d134      	bne.n	8001498 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_TIM_Encoder_MspInit+0x98>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8001466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001484:	f001 faf4 	bl	8002a70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2018      	movs	r0, #24
 800148e:	f000 ff18 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001492:	2018      	movs	r0, #24
 8001494:	f000 ff31 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <HAL_TIM_Base_MspInit+0xe4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10e      	bne.n	80014ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80014ea:	e04c      	b.n	8001586 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_TIM_Base_MspInit+0xec>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12c      	bne.n	8001550 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RPMSpeed_IC_Pin;
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800153e:	2302      	movs	r3, #2
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RPMSpeed_IC_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	4814      	ldr	r0, [pc, #80]	; (800159c <HAL_TIM_Base_MspInit+0xf0>)
 800154a:	f001 fa91 	bl	8002a70 <HAL_GPIO_Init>
}
 800154e:	e01a      	b.n	8001586 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM9)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_TIM_Base_MspInit+0xf4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d115      	bne.n	8001586 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_TIM_Base_MspInit+0xe8>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2018      	movs	r0, #24
 800157c:	f000 fea1 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001580:	2018      	movs	r0, #24
 8001582:	f000 feba 	bl	80022fa <HAL_NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3730      	adds	r7, #48	; 0x30
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40000400 	.word	0x40000400
 8001594:	40023800 	.word	0x40023800
 8001598:	40000800 	.word	0x40000800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40014000 	.word	0x40014000

080015a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_TIM_MspPostInit+0x68>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d11d      	bne.n	8001602 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_TIM_MspPostInit+0x6c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_TIM_MspPostInit+0x6c>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_TIM_MspPostInit+0x6c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin;
 80015e2:	2310      	movs	r3, #16
 80015e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_FAN_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_TIM_MspPostInit+0x70>)
 80015fe:	f001 fa37 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40000400 	.word	0x40000400
 8001610:	40023800 	.word	0x40023800
 8001614:	40020400 	.word	0x40020400

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001664:	f000 fd0e 	bl	8002084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DevMode_IT_Pin);
 8001670:	2001      	movs	r0, #1
 8001672:	f001 fbb3 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}

0800167a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Menu_IT_Pin);
 800167e:	2002      	movs	r0, #2
 8001680:	f001 fbac 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA1_Stream4_IRQHandler+0x10>)
 800168e:	f000 ff77 	bl	8002580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000594 	.word	0x20000594

0800169c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reset_IT_Pin);
 80016a0:	2080      	movs	r0, #128	; 0x80
 80016a2:	f001 fb9b 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80016b2:	f005 fd09 	bl	80070c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80016b8:	f005 fd06 	bl	80070c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200005f4 	.word	0x200005f4
 80016c4:	200006cc 	.word	0x200006cc

080016c8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <SPI2_IRQHandler+0x10>)
 80016ce:	f004 fe65 	bl	800639c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000053c 	.word	0x2000053c

080016dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <OTG_FS_IRQHandler+0x10>)
 80016e2:	f002 fc84 	bl	8003fee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20001ecc 	.word	0x20001ecc

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f011 f970 	bl	8012a04 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20020000 	.word	0x20020000
 8001750:	00000400 	.word	0x00000400
 8001754:	2000092c 	.word	0x2000092c
 8001758:	20002608 	.word	0x20002608

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001786:	490e      	ldr	r1, [pc, #56]	; (80017c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800179c:	4c0b      	ldr	r4, [pc, #44]	; (80017cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017aa:	f7ff ffd7 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f011 f92f 	bl	8012a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7fe fee7 	bl	8000584 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 80017c4:	08013ca0 	.word	0x08013ca0
  ldr r2, =_sbss
 80017c8:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 80017cc:	20002608 	.word	0x20002608

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <setSPI_Size+0x84>)
 80017e0:	f993 3000 	ldrsb.w	r3, [r3]
 80017e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d02e      	beq.n	800184a <setSPI_Size+0x76>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <setSPI_Size+0x88>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <setSPI_Size+0x88>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017fa:	601a      	str	r2, [r3, #0]

    config.spi_sz=size;
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <setSPI_Size+0x84>)
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10c      	bne.n	8001824 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <setSPI_Size+0x88>)
 800180c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001810:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <setSPI_Size+0x88>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <setSPI_Size+0x88>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e00a      	b.n	800183a <setSPI_Size+0x66>
    }
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <setSPI_Size+0x88>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <setSPI_Size+0x88>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <setSPI_Size+0x88>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001838:	601a      	str	r2, [r3, #0]
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <setSPI_Size+0x88>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <setSPI_Size+0x88>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001848:	601a      	str	r2, [r3, #0]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000030 	.word	0x20000030
 800185c:	2000053c 	.word	0x2000053c

08001860 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8001870:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ffad 	bl	80017d4 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <setDMAMemMode+0x120>)
 800187c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001880:	461a      	mov	r2, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	429a      	cmp	r2, r3
 8001886:	d106      	bne.n	8001896 <setDMAMemMode+0x36>
 8001888:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <setDMAMemMode+0x120>)
 800188a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800188e:	461a      	mov	r2, r3
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	429a      	cmp	r2, r3
 8001894:	d06f      	beq.n	8001976 <setDMAMemMode+0x116>
    config.dma_sz =size;
 8001896:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <setDMAMemMode+0x120>)
 800189c:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800189e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <setDMAMemMode+0x120>)
 80018a4:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <setDMAMemMode+0x124>)
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <setDMAMemMode+0x124>)
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 80018ba:	bf00      	nop
 80018bc:	4b31      	ldr	r3, [pc, #196]	; (8001984 <setDMAMemMode+0x124>)
 80018be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f7      	bne.n	80018bc <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d10f      	bne.n	80018f2 <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <setDMAMemMode+0x124>)
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <setDMAMemMode+0x124>)
 80018de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <setDMAMemMode+0x124>)
 80018e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e00d      	b.n	800190e <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <setDMAMemMode+0x124>)
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <setDMAMemMode+0x124>)
 80018fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <setDMAMemMode+0x124>)
 8001904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800190c:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d116      	bne.n	8001942 <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <setDMAMemMode+0x124>)
 8001916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800191c:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <setDMAMemMode+0x124>)
 8001920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001926:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <setDMAMemMode+0x124>)
 800192a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <setDMAMemMode+0x124>)
 8001936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e011      	b.n	8001966 <setDMAMemMode+0x106>
                                                   (1<<DMA_CCR_PSIZE_Pos | 1<<DMA_CCR_MSIZE_Pos);
#endif

    }
    else{
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <setDMAMemMode+0x124>)
 8001944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <setDMAMemMode+0x124>)
 800194c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <setDMAMemMode+0x124>)
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <setDMAMemMode+0x124>)
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001964:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <setDMAMemMode+0x124>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <setDMAMemMode+0x124>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001974:	601a      	str	r2, [r3, #0]
  }
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000030 	.word	0x20000030
 8001984:	2000053c 	.word	0x2000053c

08001988 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff ff1d 	bl	80017d4 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <LCD_WriteCommand+0x60>)
 800199c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a0:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <LCD_WriteCommand+0x64>)
 80019a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019a8:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ae:	2201      	movs	r2, #1
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	480f      	ldr	r0, [pc, #60]	; (80019f0 <LCD_WriteCommand+0x68>)
 80019b4:	f004 faff 	bl	8005fb6 <HAL_SPI_Transmit>
  if(argc){
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <LCD_WriteCommand+0x50>
    LCD_PIN(LCD_DC,SET);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <LCD_WriteCommand+0x60>)
 80019c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c4:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	1c59      	adds	r1, r3, #1
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <LCD_WriteCommand+0x68>)
 80019d4:	f004 faef 	bl	8005fb6 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <LCD_WriteCommand+0x64>)
 80019da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019de:	619a      	str	r2, [r3, #24]
#endif
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020000 	.word	0x40020000
 80019f0:	2000053c 	.word	0x2000053c

080019f4 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <LCD_WriteData+0xc8>)
 8001a00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a04:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <LCD_WriteData+0xcc>)
 8001a08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a0c:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8001a0e:	e049      	b.n	8001aa4 <LCD_WriteData+0xb0>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a16:	4293      	cmp	r3, r2
 8001a18:	bf28      	it	cs
 8001a1a:	4613      	movcs	r3, r2
 8001a1c:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d924      	bls.n	8001a6e <LCD_WriteData+0x7a>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	461a      	mov	r2, r3
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4826      	ldr	r0, [pc, #152]	; (8001ac4 <LCD_WriteData+0xd0>)
 8001a2c:	f004 fc00 	bl	8006230 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!= HAL_DMA_STATE_READY);
 8001a30:	bf00      	nop
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <LCD_WriteData+0xd0>)
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 ff2c 	bl	8002894 <HAL_DMA_GetState>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d1f7      	bne.n	8001a32 <LCD_WriteData+0x3e>
      if(config.dma_mem_inc==mem_increase){
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <LCD_WriteData+0xd4>)
 8001a44:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d127      	bne.n	8001a9c <LCD_WriteData+0xa8>
        if(config.dma_sz==mode_16bit)
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <LCD_WriteData+0xd4>)
 8001a4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d104      	bne.n	8001a60 <LCD_WriteData+0x6c>
          buff += chunk_size;
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	e01d      	b.n	8001a9c <LCD_WriteData+0xa8>
        else
          buff += chunk_size*2;
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	e016      	b.n	8001a9c <LCD_WriteData+0xa8>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001a6e:	89fa      	ldrh	r2, [r7, #14]
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <LCD_WriteData+0xd0>)
 8001a78:	f004 fa9d 	bl	8005fb6 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <LCD_WriteData+0xd4>)
 8001a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d104      	bne.n	8001a90 <LCD_WriteData+0x9c>
        buff += chunk_size;
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	e005      	b.n	8001a9c <LCD_WriteData+0xa8>
      else
        buff += chunk_size*2;
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	607b      	str	r3, [r7, #4]

    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1b2      	bne.n	8001a10 <LCD_WriteData+0x1c>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <LCD_WriteData+0xcc>)
 8001aac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ab0:	619a      	str	r2, [r3, #24]
#endif
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	2000053c 	.word	0x2000053c
 8001ac8:	20000030 	.word	0x20000030

08001acc <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4623      	mov	r3, r4
 8001adc:	80fb      	strh	r3, [r7, #6]
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80bb      	strh	r3, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	807b      	strh	r3, [r7, #2]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001af6:	883b      	ldrh	r3, [r7, #0]
 8001af8:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001afa:	232a      	movs	r3, #42	; 0x2a
 8001afc:	763b      	strb	r3, [r7, #24]
 8001afe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b02:	121b      	asrs	r3, r3, #8
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	767b      	strb	r3, [r7, #25]
 8001b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	76bb      	strb	r3, [r7, #26]
 8001b10:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001b14:	121b      	asrs	r3, r3, #8
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	76fb      	strb	r3, [r7, #27]
 8001b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2104      	movs	r1, #4
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff2d 	bl	8001988 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001b2e:	232b      	movs	r3, #43	; 0x2b
 8001b30:	743b      	strb	r3, [r7, #16]
 8001b32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b36:	121b      	asrs	r3, r3, #8
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	747b      	strb	r3, [r7, #17]
 8001b3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	74bb      	strb	r3, [r7, #18]
 8001b44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b48:	121b      	asrs	r3, r3, #8
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	74fb      	strb	r3, [r7, #19]
 8001b50:	8c3b      	ldrh	r3, [r7, #32]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff13 	bl	8001988 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001b62:	232c      	movs	r3, #44	; 0x2c
 8001b64:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff0b 	bl	8001988 <LCD_WriteCommand>
  }
}
 8001b72:	bf00      	nop
 8001b74:	372c      	adds	r7, #44	; 0x2c
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
	...

08001b7c <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
 8001b86:	460b      	mov	r3, r1
 8001b88:	80bb      	strh	r3, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db32      	blt.n	8001bfc <LCD_DrawPixel+0x80>
 8001b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9a:	2bef      	cmp	r3, #239	; 0xef
 8001b9c:	dc2e      	bgt.n	8001bfc <LCD_DrawPixel+0x80>
 8001b9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db2a      	blt.n	8001bfc <LCD_DrawPixel+0x80>
     (y < 0) || (y > LCD_HEIGHT-1))
 8001ba6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001baa:	2bef      	cmp	r3, #239	; 0xef
 8001bac:	dc26      	bgt.n	8001bfc <LCD_DrawPixel+0x80>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	733b      	strb	r3, [r7, #12]
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8001bbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bce:	f7ff ff7d 	bl	8001acc <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <LCD_DrawPixel+0x88>)
 8001bd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd8:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <LCD_DrawPixel+0x8c>)
 8001bdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001be0:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001be2:	f107 010c 	add.w	r1, r7, #12
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bea:	2202      	movs	r2, #2
 8001bec:	4807      	ldr	r0, [pc, #28]	; (8001c0c <LCD_DrawPixel+0x90>)
 8001bee:	f004 f9e2 	bl	8005fb6 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <LCD_DrawPixel+0x8c>)
 8001bf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bf8:	619a      	str	r2, [r3, #24]
 8001bfa:	e000      	b.n	8001bfe <LCD_DrawPixel+0x82>
    return;
 8001bfc:	bf00      	nop
#endif
}
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	2000053c 	.word	0x2000053c

08001c10 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0a4      	sub	sp, #144	; 0x90
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d905      	bls.n	8001c2e <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8001c22:	1cbb      	adds	r3, r7, #2
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fee4 	bl	80019f4 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8001c2c:	e02f      	b.n	8001c8e <LCD_FillPixels+0x7e>
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001c34:	e00c      	b.n	8001c50 <LCD_FillPixels+0x40>
      fill[t]=color;
 8001c36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	3390      	adds	r3, #144	; 0x90
 8001c40:	443b      	add	r3, r7
 8001c42:	f823 2c84 	strh.w	r2, [r3, #-132]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 8001c46:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001c50:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b40      	cmp	r3, #64	; 0x40
 8001c58:	bf28      	it	cs
 8001c5a:	2340      	movcs	r3, #64	; 0x40
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3ea      	bcc.n	8001c36 <LCD_FillPixels+0x26>
    while(pixels){                                                                    // Send 64 pixel blocks
 8001c60:	e012      	b.n	8001c88 <LCD_FillPixels+0x78>
      uint8_t sz = (pixels<64 ? pixels : 64);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	bf28      	it	cs
 8001c68:	2340      	movcs	r3, #64	; 0x40
 8001c6a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
      LCD_WriteData((uint8_t*)fill, sz);
 8001c6e:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff febb 	bl	80019f4 <LCD_WriteData>
      pixels-=sz;
 8001c7e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                    // Send 64 pixel blocks
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e9      	bne.n	8001c62 <LCD_FillPixels+0x52>
}
 8001c8e:	bf00      	nop
 8001c90:	3790      	adds	r7, #144	; 0x90
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	80fb      	strh	r3, [r7, #6]
 8001caa:	4603      	mov	r3, r0
 8001cac:	80bb      	strh	r3, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	807b      	strh	r3, [r7, #2]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8001cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cbe:	d105      	bne.n	8001ccc <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff fdcc 	bl	8001860 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e012      	b.n	8001cf2 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8001ccc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cd0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001cd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001cdc:	f7ff fef6 	bl	8001acc <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit); //setDMAMemMode(mem_fixed, mode_16bit);
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fdbc 	bl	8001860 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <LCD_FillArea+0x64>)
 8001cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cee:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <LCD_FillArea+0x68>)
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd90      	pop	{r4, r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	08001c11 	.word	0x08001c11

08001d04 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	80fb      	strh	r3, [r7, #6]
 8001d16:	4603      	mov	r3, r0
 8001d18:	80bb      	strh	r3, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	883a      	ldrh	r2, [r7, #0]
 8001d2e:	88bb      	ldrh	r3, [r7, #4]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001d3a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d42:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d46:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d4a:	f7ff febf 	bl	8001acc <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fd85 	bl	8001860 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8001d56:	8c3b      	ldrh	r3, [r7, #32]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff ff58 	bl	8001c10 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); //setDMAMemMode(mem_increase, mode_16bit);
 8001d60:	2100      	movs	r1, #0
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff fd7c 	bl	8001860 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd90      	pop	{r4, r7, pc}

08001d72 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001d72:	b590      	push	{r4, r7, lr}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	603a      	str	r2, [r7, #0]
 8001d7c:	80fb      	strh	r3, [r7, #6]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	889b      	ldrh	r3, [r3, #4]
 8001d86:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	88db      	ldrh	r3, [r3, #6]
 8001d8c:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	2bef      	cmp	r3, #239	; 0xef
 8001d92:	d837      	bhi.n	8001e04 <LCD_DrawImage+0x92>
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	2bef      	cmp	r3, #239	; 0xef
 8001d98:	d834      	bhi.n	8001e04 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	4413      	add	r3, r2
 8001da0:	2bf0      	cmp	r3, #240	; 0xf0
 8001da2:	dc31      	bgt.n	8001e08 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001da4:	88ba      	ldrh	r2, [r7, #4]
 8001da6:	89bb      	ldrh	r3, [r7, #12]
 8001da8:	4413      	add	r3, r2
 8001daa:	2bf0      	cmp	r3, #240	; 0xf0
 8001dac:	dc2e      	bgt.n	8001e0c <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	7a1b      	ldrb	r3, [r3, #8]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d12c      	bne.n	8001e10 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001db6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001dba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	89fb      	ldrh	r3, [r7, #14]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b21c      	sxth	r4, r3
 8001dcc:	88ba      	ldrh	r2, [r7, #4]
 8001dce:	89bb      	ldrh	r3, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	4622      	mov	r2, r4
 8001ddc:	f7ff fe76 	bl	8001acc <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);  //setDMAMemMode(mem_increase, mode_16bit);                                                          // Set SPI and DMA to 16 bit, enable memory increase
 8001de0:	2101      	movs	r1, #1
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff fd3c 	bl	8001860 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	89ba      	ldrh	r2, [r7, #12]
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7ff fdfd 	bl	80019f4 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff fd2f 	bl	8001860 <setDMAMemMode>
 8001e02:	e006      	b.n	8001e12 <LCD_DrawImage+0xa0>
    return;
 8001e04:	bf00      	nop
 8001e06:	e004      	b.n	8001e12 <LCD_DrawImage+0xa0>
    return;
 8001e08:	bf00      	nop
 8001e0a:	e002      	b.n	8001e12 <LCD_DrawImage+0xa0>
    return;
 8001e0c:	bf00      	nop
 8001e0e:	e000      	b.n	8001e12 <LCD_DrawImage+0xa0>
    return;
 8001e10:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd90      	pop	{r4, r7, pc}

08001e18 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	4604      	mov	r4, r0
 8001e20:	4608      	mov	r0, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	4623      	mov	r3, r4
 8001e28:	80fb      	strh	r3, [r7, #6]
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80bb      	strh	r3, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]
 8001e32:	4613      	mov	r3, r2
 8001e34:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001e36:	88fa      	ldrh	r2, [r7, #6]
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d10a      	bne.n	8001e54 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001e3e:	88ba      	ldrh	r2, [r7, #4]
 8001e40:	883b      	ldrh	r3, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d918      	bls.n	8001e78 <LCD_DrawLine+0x60>
 8001e46:	88bb      	ldrh	r3, [r7, #4]
 8001e48:	81bb      	strh	r3, [r7, #12]
 8001e4a:	883b      	ldrh	r3, [r7, #0]
 8001e4c:	80bb      	strh	r3, [r7, #4]
 8001e4e:	89bb      	ldrh	r3, [r7, #12]
 8001e50:	803b      	strh	r3, [r7, #0]
 8001e52:	e011      	b.n	8001e78 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001e54:	88ba      	ldrh	r2, [r7, #4]
 8001e56:	883b      	ldrh	r3, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d10a      	bne.n	8001e72 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d909      	bls.n	8001e78 <LCD_DrawLine+0x60>
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	81fb      	strh	r3, [r7, #14]
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	80fb      	strh	r3, [r7, #6]
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	e002      	b.n	8001e78 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e76:	e009      	b.n	8001e8c <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001e78:	883c      	ldrh	r4, [r7, #0]
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	88b9      	ldrh	r1, [r7, #4]
 8001e7e:	88f8      	ldrh	r0, [r7, #6]
 8001e80:	8c3b      	ldrh	r3, [r7, #32]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4623      	mov	r3, r4
 8001e86:	f7ff ff3d 	bl	8001d04 <LCD_Fill>
  return UG_RESULT_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}

08001e94 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	81fb      	strh	r3, [r7, #14]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f007 fd9c 	bl	80099e4 <UG_FontSelect>
  UG_SetForecolor(color);
 8001eac:	8b3b      	ldrh	r3, [r7, #24]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f007 ffa6 	bl	8009e00 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001eb4:	8bbb      	ldrh	r3, [r7, #28]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f007 ffb4 	bl	8009e24 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001ebc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f007 ff12 	bl	8009cf0 <UG_PutString>
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <LCD_setPower+0x14>
 8001ee4:	2329      	movs	r3, #41	; 0x29
 8001ee6:	e000      	b.n	8001eea <LCD_setPower+0x16>
 8001ee8:	2328      	movs	r3, #40	; 0x28
 8001eea:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fd48 	bl	8001988 <LCD_WriteCommand>
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <LCD_Update>:

static void LCD_Update(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001f04:	2100      	movs	r1, #0
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7ff fcaa 	bl	8001860 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <LCD_init+0xac>)
 8001f18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f1c:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <LCD_init+0xb0>)
 8001f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f24:	619a      	str	r2, [r3, #24]
  HAL_Delay(25);
 8001f26:	2019      	movs	r0, #25
 8001f28:	f000 f8cc 	bl	80020c4 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <LCD_init+0xb0>)
 8001f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f32:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001f34:	20c8      	movs	r0, #200	; 0xc8
 8001f36:	f000 f8c5 	bl	80020c4 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001f3a:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <LCD_init+0xb4>)
 8001f3c:	4822      	ldr	r0, [pc, #136]	; (8001fc8 <LCD_init+0xb8>)
 8001f3e:	f007 fceb 	bl	8009918 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <LCD_init+0xbc>)
 8001f44:	2000      	movs	r0, #0
 8001f46:	f008 fe89 	bl	800ac5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001f4a:	4921      	ldr	r1, [pc, #132]	; (8001fd0 <LCD_init+0xc0>)
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f008 fe85 	bl	800ac5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001f52:	4920      	ldr	r1, [pc, #128]	; (8001fd4 <LCD_init+0xc4>)
 8001f54:	2002      	movs	r0, #2
 8001f56:	f008 fe81 	bl	800ac5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001f5a:	491f      	ldr	r1, [pc, #124]	; (8001fd8 <LCD_init+0xc8>)
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f008 fe7d 	bl	800ac5c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f007 ff70 	bl	8009e48 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f007 ff81 	bl	8009e70 <UG_FontSetVSpace>

  //LCD_SetRotation(LCD_ROTATION_CMD);
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001f6e:	2300      	movs	r3, #0
 8001f70:	80fb      	strh	r3, [r7, #6]
 8001f72:	e013      	b.n	8001f9c <LCD_init+0x8c>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <LCD_init+0xcc>)
 8001f7a:	441a      	add	r2, r3
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	4917      	ldr	r1, [pc, #92]	; (8001fdc <LCD_init+0xcc>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7ff fcff 	bl	8001988 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <LCD_init+0xcc>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	4413      	add	r3, r2
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3302      	adds	r3, #2
 8001f9a:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	2b4b      	cmp	r3, #75	; 0x4b
 8001fa0:	d9e8      	bls.n	8001f74 <LCD_init+0x64>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f007 fd2e 	bl	8009a04 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff ff93 	bl	8001ed4 <LCD_setPower>
  UG_Update();
 8001fae:	f008 fe77 	bl	800aca0 <UG_Update>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	20000034 	.word	0x20000034
 8001fc8:	20000930 	.word	0x20000930
 8001fcc:	08001e19 	.word	0x08001e19
 8001fd0:	08001d05 	.word	0x08001d05
 8001fd4:	08001c99 	.word	0x08001c99
 8001fd8:	08001d73 	.word	0x08001d73
 8001fdc:	080133e0 	.word	0x080133e0

08001fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <HAL_Init+0x40>)
 8001fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_Init+0x40>)
 8001ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_Init+0x40>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f000 f94f 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200e:	200f      	movs	r0, #15
 8002010:	f000 f808 	bl	8002024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002014:	f7ff f896 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x54>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x58>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f967 	bl	8002316 <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00e      	b.n	8002070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d80a      	bhi.n	800206e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002060:	f000 f92f 	bl	80022c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_InitTick+0x5c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000002c 	.word	0x2000002c
 800207c:	20000044 	.word	0x20000044
 8002080:	20000040 	.word	0x20000040

08002084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x20>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_IncTick+0x24>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000044 	.word	0x20000044
 80020a8:	2000098c 	.word	0x2000098c

080020ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_GetTick+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	2000098c 	.word	0x2000098c

080020c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff ffee 	bl	80020ac <HAL_GetTick>
 80020d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020dc:	d005      	beq.n	80020ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_Delay+0x44>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ea:	bf00      	nop
 80020ec:	f7ff ffde 	bl	80020ac <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d8f7      	bhi.n	80020ec <HAL_Delay+0x28>
  {
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000044 	.word	0x20000044

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db0b      	blt.n	800219a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <__NVIC_EnableIRQ+0x38>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d301      	bcc.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e00f      	b.n	800229e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <SysTick_Config+0x40>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	210f      	movs	r1, #15
 8002288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228c:	f7ff ff8e 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SysTick_Config+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <SysTick_Config+0x40>)
 8002298:	2207      	movs	r2, #7
 800229a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff29 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d4:	f7ff ff3e 	bl	8002154 <__NVIC_GetPriorityGrouping>
 80022d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7ff ff8e 	bl	8002200 <NVIC_EncodePriority>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff5d 	bl	80021ac <__NVIC_SetPriority>
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff31 	bl	8002170 <__NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffa2 	bl	8002268 <SysTick_Config>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff feb6 	bl	80020ac <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e099      	b.n	8002480 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236c:	e00f      	b.n	800238e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236e:	f7ff fe9d 	bl	80020ac <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b05      	cmp	r3, #5
 800237a:	d908      	bls.n	800238e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2203      	movs	r2, #3
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e078      	b.n	8002480 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e8      	bne.n	800236e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_DMA_Init+0x158>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	4313      	orrs	r3, r2
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0307 	bic.w	r3, r3, #7
 800240e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	2b04      	cmp	r3, #4
 8002420:	d117      	bne.n	8002452 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fa9f 	bl	8002978 <DMA_CheckFifoParam>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2240      	movs	r2, #64	; 0x40
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800244e:	2301      	movs	r3, #1
 8002450:	e016      	b.n	8002480 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa56 	bl	800290c <DMA_CalcBaseAndBitshift>
 8002460:	4603      	mov	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	223f      	movs	r2, #63	; 0x3f
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	f010803f 	.word	0xf010803f

0800248c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Start_IT+0x26>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e040      	b.n	8002534 <HAL_DMA_Start_IT+0xa8>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d12f      	bne.n	8002526 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f9e8 	bl	80028b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	223f      	movs	r2, #63	; 0x3f
 80024e6:	409a      	lsls	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0216 	orr.w	r2, r2, #22
 80024fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0208 	orr.w	r2, r2, #8
 8002512:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e005      	b.n	8002532 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d004      	beq.n	800255a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00c      	b.n	8002574 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2205      	movs	r2, #5
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800258c:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <HAL_DMA_IRQHandler+0x248>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a8e      	ldr	r2, [pc, #568]	; (80027cc <HAL_DMA_IRQHandler+0x24c>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2208      	movs	r2, #8
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01a      	beq.n	80025ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0204 	bic.w	r2, r2, #4
 80025d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	2208      	movs	r2, #8
 80025da:	409a      	lsls	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2201      	movs	r2, #1
 80025f2:	409a      	lsls	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2201      	movs	r2, #1
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2204      	movs	r2, #4
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2204      	movs	r2, #4
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2210      	movs	r2, #16
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d043      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03c      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2210      	movs	r2, #16
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d024      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e01f      	b.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
 80026c0:	e016      	b.n	80026f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0208 	bic.w	r2, r2, #8
 80026de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2220      	movs	r2, #32
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 808f 	beq.w	8002820 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8087 	beq.w	8002820 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2220      	movs	r2, #32
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b05      	cmp	r3, #5
 8002728:	d136      	bne.n	8002798 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0216 	bic.w	r2, r2, #22
 8002738:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002748:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d103      	bne.n	800275a <HAL_DMA_IRQHandler+0x1da>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0208 	bic.w	r2, r2, #8
 8002768:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	223f      	movs	r2, #63	; 0x3f
 8002770:	409a      	lsls	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278a:	2b00      	cmp	r3, #0
 800278c:	d07e      	beq.n	800288c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
        }
        return;
 8002796:	e079      	b.n	800288c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01d      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d031      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
 80027c4:	e02c      	b.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
 80027c6:	bf00      	nop
 80027c8:	2000002c 	.word	0x2000002c
 80027cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d023      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
 80027e0:	e01e      	b.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0210 	bic.w	r2, r2, #16
 80027fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d032      	beq.n	800288e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d022      	beq.n	800287a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2205      	movs	r2, #5
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3301      	adds	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d307      	bcc.n	8002868 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f2      	bne.n	800284c <HAL_DMA_IRQHandler+0x2cc>
 8002866:	e000      	b.n	800286a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002868:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
 800288a:	e000      	b.n	800288e <HAL_DMA_IRQHandler+0x30e>
        return;
 800288c:	bf00      	nop
    }
  }
}
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a2:	b2db      	uxtb	r3, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d108      	bne.n	80028f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ee:	e007      	b.n	8002900 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3b10      	subs	r3, #16
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <DMA_CalcBaseAndBitshift+0x64>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002926:	4a13      	ldr	r2, [pc, #76]	; (8002974 <DMA_CalcBaseAndBitshift+0x68>)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d909      	bls.n	800294e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	1d1a      	adds	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	; 0x58
 800294c:	e007      	b.n	800295e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	aaaaaaab 	.word	0xaaaaaaab
 8002974:	0801342c 	.word	0x0801342c

08002978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11f      	bne.n	80029d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d856      	bhi.n	8002a46 <DMA_CheckFifoParam+0xce>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <DMA_CheckFifoParam+0x28>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	080029c3 	.word	0x080029c3
 80029a8:	080029b1 	.word	0x080029b1
 80029ac:	08002a47 	.word	0x08002a47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d046      	beq.n	8002a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e043      	b.n	8002a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ca:	d140      	bne.n	8002a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e03d      	b.n	8002a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	d121      	bne.n	8002a20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d837      	bhi.n	8002a52 <DMA_CheckFifoParam+0xda>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <DMA_CheckFifoParam+0x70>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	080029ff 	.word	0x080029ff
 80029f0:	080029f9 	.word	0x080029f9
 80029f4:	08002a11 	.word	0x08002a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e030      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d025      	beq.n	8002a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0e:	e022      	b.n	8002a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a1e:	e01c      	b.n	8002a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d903      	bls.n	8002a2e <DMA_CheckFifoParam+0xb6>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a2c:	e018      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      break;
 8002a32:	e015      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e00b      	b.n	8002a5e <DMA_CheckFifoParam+0xe6>
      break;
 8002a46:	bf00      	nop
 8002a48:	e00a      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e008      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e006      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e004      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e002      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e159      	b.n	8002d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f040 8148 	bne.w	8002d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d130      	bne.n	8002b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0201 	and.w	r2, r3, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d017      	beq.n	8002b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d123      	bne.n	8002bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a2 	beq.w	8002d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a56      	ldr	r2, [pc, #344]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c12:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <HAL_GPIO_Init+0x2f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x202>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a48      	ldr	r2, [pc, #288]	; (8002d64 <HAL_GPIO_Init+0x2f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x1fe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <HAL_GPIO_Init+0x2f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_GPIO_Init+0x2fc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x1f6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <HAL_GPIO_Init+0x300>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x1f2>
 8002c5e:	2304      	movs	r3, #4
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c62:	2307      	movs	r3, #7
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f aea2 	bls.w	8002a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f806 	bl	8002e0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e12b      	b.n	800308e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f9a2 	bl	8001194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e88:	f002 fe0e 	bl	8005aa8 <HAL_RCC_GetPCLK1Freq>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a81      	ldr	r2, [pc, #516]	; (8003098 <HAL_I2C_Init+0x274>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d807      	bhi.n	8002ea8 <HAL_I2C_Init+0x84>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a80      	ldr	r2, [pc, #512]	; (800309c <HAL_I2C_Init+0x278>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bf94      	ite	ls
 8002ea0:	2301      	movls	r3, #1
 8002ea2:	2300      	movhi	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e006      	b.n	8002eb6 <HAL_I2C_Init+0x92>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a7d      	ldr	r2, [pc, #500]	; (80030a0 <HAL_I2C_Init+0x27c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0e7      	b.n	800308e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a78      	ldr	r2, [pc, #480]	; (80030a4 <HAL_I2C_Init+0x280>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0c9b      	lsrs	r3, r3, #18
 8002ec8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a6a      	ldr	r2, [pc, #424]	; (8003098 <HAL_I2C_Init+0x274>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d802      	bhi.n	8002ef8 <HAL_I2C_Init+0xd4>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	e009      	b.n	8002f0c <HAL_I2C_Init+0xe8>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	4a69      	ldr	r2, [pc, #420]	; (80030a8 <HAL_I2C_Init+0x284>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	495c      	ldr	r1, [pc, #368]	; (8003098 <HAL_I2C_Init+0x274>)
 8002f28:	428b      	cmp	r3, r1
 8002f2a:	d819      	bhi.n	8002f60 <HAL_I2C_Init+0x13c>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e59      	subs	r1, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f3a:	1c59      	adds	r1, r3, #1
 8002f3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f40:	400b      	ands	r3, r1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_I2C_Init+0x138>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1e59      	subs	r1, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5a:	e051      	b.n	8003000 <HAL_I2C_Init+0x1dc>
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	e04f      	b.n	8003000 <HAL_I2C_Init+0x1dc>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <HAL_I2C_Init+0x168>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e58      	subs	r0, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e012      	b.n	8002fb2 <HAL_I2C_Init+0x18e>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e58      	subs	r0, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	0099      	lsls	r1, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Init+0x196>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e022      	b.n	8003000 <HAL_I2C_Init+0x1dc>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_I2C_Init+0x1bc>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e58      	subs	r0, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	440b      	add	r3, r1
 8002fd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fde:	e00f      	b.n	8003000 <HAL_I2C_Init+0x1dc>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e58      	subs	r0, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	0099      	lsls	r1, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	6809      	ldr	r1, [r1, #0]
 8003004:	4313      	orrs	r3, r2
 8003006:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800302e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6911      	ldr	r1, [r2, #16]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68d2      	ldr	r2, [r2, #12]
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	430b      	orrs	r3, r1
 8003042:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	000186a0 	.word	0x000186a0
 800309c:	001e847f 	.word	0x001e847f
 80030a0:	003d08ff 	.word	0x003d08ff
 80030a4:	431bde83 	.word	0x431bde83
 80030a8:	10624dd3 	.word	0x10624dd3

080030ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	461a      	mov	r2, r3
 80030b8:	460b      	mov	r3, r1
 80030ba:	817b      	strh	r3, [r7, #10]
 80030bc:	4613      	mov	r3, r2
 80030be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030c0:	f7fe fff4 	bl	80020ac <HAL_GetTick>
 80030c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	f040 80e0 	bne.w	8003294 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2319      	movs	r3, #25
 80030da:	2201      	movs	r2, #1
 80030dc:	4970      	ldr	r1, [pc, #448]	; (80032a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fc58 	bl	8003994 <I2C_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
 80030ec:	e0d3      	b.n	8003296 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_I2C_Master_Transmit+0x50>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0cc      	b.n	8003296 <HAL_I2C_Master_Transmit+0x1ea>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d007      	beq.n	8003122 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003130:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2221      	movs	r2, #33	; 0x21
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2210      	movs	r2, #16
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	893a      	ldrh	r2, [r7, #8]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a50      	ldr	r2, [pc, #320]	; (80032a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003164:	8979      	ldrh	r1, [r7, #10]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fac2 	bl	80036f4 <I2C_MasterRequestWrite>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e08d      	b.n	8003296 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003190:	e066      	b.n	8003260 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	6a39      	ldr	r1, [r7, #32]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fcd2 	bl	8003b40 <I2C_WaitOnTXEFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d107      	bne.n	80031ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06b      	b.n	8003296 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d11b      	bne.n	8003234 <HAL_I2C_Master_Transmit+0x188>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	6a39      	ldr	r1, [r7, #32]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fcc2 	bl	8003bc2 <I2C_WaitOnBTFFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00d      	beq.n	8003260 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	2b04      	cmp	r3, #4
 800324a:	d107      	bne.n	800325c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e01a      	b.n	8003296 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d194      	bne.n	8003192 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	00100002 	.word	0x00100002
 80032a4:	ffff0000 	.word	0xffff0000

080032a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	461a      	mov	r2, r3
 80032b4:	460b      	mov	r3, r1
 80032b6:	817b      	strh	r3, [r7, #10]
 80032b8:	4613      	mov	r3, r2
 80032ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7fe fef6 	bl	80020ac <HAL_GetTick>
 80032c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	f040 820b 	bne.w	80036e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2319      	movs	r3, #25
 80032d6:	2201      	movs	r2, #1
 80032d8:	497c      	ldr	r1, [pc, #496]	; (80034cc <HAL_I2C_Master_Receive+0x224>)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fb5a 	bl	8003994 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	e1fe      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_I2C_Master_Receive+0x50>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e1f7      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d007      	beq.n	800331e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800332c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2222      	movs	r2, #34	; 0x22
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2210      	movs	r2, #16
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	893a      	ldrh	r2, [r7, #8]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a5c      	ldr	r2, [pc, #368]	; (80034d0 <HAL_I2C_Master_Receive+0x228>)
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003360:	8979      	ldrh	r1, [r7, #10]
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fa46 	bl	80037f8 <I2C_MasterRequestRead>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e1b8      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d113      	bne.n	80033a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	623b      	str	r3, [r7, #32]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e18c      	b.n	80036c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d11b      	bne.n	80033e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e16c      	b.n	80036c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d11b      	bne.n	8003426 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	e14c      	b.n	80036c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800344c:	e138      	b.n	80036c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	2b03      	cmp	r3, #3
 8003454:	f200 80f1 	bhi.w	800363a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	2b01      	cmp	r3, #1
 800345e:	d123      	bne.n	80034a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fbed 	bl	8003c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e139      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a6:	e10b      	b.n	80036c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d14e      	bne.n	800354e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	2200      	movs	r2, #0
 80034b8:	4906      	ldr	r1, [pc, #24]	; (80034d4 <HAL_I2C_Master_Receive+0x22c>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fa6a 	bl	8003994 <I2C_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e10e      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
 80034ca:	bf00      	nop
 80034cc:	00100002 	.word	0x00100002
 80034d0:	ffff0000 	.word	0xffff0000
 80034d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800354c:	e0b8      	b.n	80036c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	2200      	movs	r2, #0
 8003556:	4966      	ldr	r1, [pc, #408]	; (80036f0 <HAL_I2C_Master_Receive+0x448>)
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fa1b 	bl	8003994 <I2C_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0bf      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	2200      	movs	r2, #0
 80035b2:	494f      	ldr	r1, [pc, #316]	; (80036f0 <HAL_I2C_Master_Receive+0x448>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f9ed 	bl	8003994 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e091      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003638:	e042      	b.n	80036c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fb00 	bl	8003c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e04c      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b04      	cmp	r3, #4
 800368c:	d118      	bne.n	80036c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f aec2 	bne.w	800344e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3728      	adds	r7, #40	; 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	00010004 	.word	0x00010004

080036f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	460b      	mov	r3, r1
 8003702:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d006      	beq.n	800371e <I2C_MasterRequestWrite+0x2a>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d003      	beq.n	800371e <I2C_MasterRequestWrite+0x2a>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800371c:	d108      	bne.n	8003730 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e00b      	b.n	8003748 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	2b12      	cmp	r3, #18
 8003736:	d107      	bne.n	8003748 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003746:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f91d 	bl	8003994 <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	d103      	bne.n	8003778 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e035      	b.n	80037e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003784:	d108      	bne.n	8003798 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003786:	897b      	ldrh	r3, [r7, #10]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003794:	611a      	str	r2, [r3, #16]
 8003796:	e01b      	b.n	80037d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003798:	897b      	ldrh	r3, [r7, #10]
 800379a:	11db      	asrs	r3, r3, #7
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 0306 	and.w	r3, r3, #6
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f063 030f 	orn	r3, r3, #15
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	490e      	ldr	r1, [pc, #56]	; (80037f0 <I2C_MasterRequestWrite+0xfc>)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f943 	bl	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e010      	b.n	80037e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4907      	ldr	r1, [pc, #28]	; (80037f4 <I2C_MasterRequestWrite+0x100>)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f933 	bl	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	00010008 	.word	0x00010008
 80037f4:	00010002 	.word	0x00010002

080037f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	460b      	mov	r3, r1
 8003806:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800381c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d006      	beq.n	8003832 <I2C_MasterRequestRead+0x3a>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d003      	beq.n	8003832 <I2C_MasterRequestRead+0x3a>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003830:	d108      	bne.n	8003844 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e00b      	b.n	800385c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	2b11      	cmp	r3, #17
 800384a:	d107      	bne.n	800385c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f893 	bl	8003994 <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d103      	bne.n	800388c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e079      	b.n	8003984 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003898:	d108      	bne.n	80038ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800389a:	897b      	ldrh	r3, [r7, #10]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]
 80038aa:	e05f      	b.n	800396c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038ac:	897b      	ldrh	r3, [r7, #10]
 80038ae:	11db      	asrs	r3, r3, #7
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 0306 	and.w	r3, r3, #6
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f063 030f 	orn	r3, r3, #15
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4930      	ldr	r1, [pc, #192]	; (800398c <I2C_MasterRequestRead+0x194>)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f8b9 	bl	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e054      	b.n	8003984 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4929      	ldr	r1, [pc, #164]	; (8003990 <I2C_MasterRequestRead+0x198>)
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f8a9 	bl	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e044      	b.n	8003984 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f831 	bl	8003994 <I2C_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003946:	d103      	bne.n	8003950 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e017      	b.n	8003984 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003954:	897b      	ldrh	r3, [r7, #10]
 8003956:	11db      	asrs	r3, r3, #7
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 0306 	and.w	r3, r3, #6
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f063 030e 	orn	r3, r3, #14
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4907      	ldr	r1, [pc, #28]	; (8003990 <I2C_MasterRequestRead+0x198>)
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f865 	bl	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	00010008 	.word	0x00010008
 8003990:	00010002 	.word	0x00010002

08003994 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a4:	e025      	b.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ac:	d021      	beq.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ae:	f7fe fb7d 	bl	80020ac <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d116      	bne.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e023      	b.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10d      	bne.n	8003a18 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4013      	ands	r3, r2
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	e00c      	b.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d0b6      	beq.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a50:	e051      	b.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d123      	bne.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e046      	b.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab0:	d021      	beq.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fe fafb 	bl	80020ac <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d116      	bne.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0220 	orr.w	r2, r3, #32
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e020      	b.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10c      	bne.n	8003b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	43da      	mvns	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	e00b      	b.n	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	43da      	mvns	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d18d      	bne.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b4c:	e02d      	b.n	8003baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8ce 	bl	8003cf0 <I2C_IsAcknowledgeFailed>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e02d      	b.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b64:	d021      	beq.n	8003baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fe faa1 	bl	80020ac <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d116      	bne.n	8003baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f043 0220 	orr.w	r2, r3, #32
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e007      	b.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d1ca      	bne.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bce:	e02d      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f88d 	bl	8003cf0 <I2C_IsAcknowledgeFailed>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e02d      	b.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be6:	d021      	beq.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be8:	f7fe fa60 	bl	80020ac <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d1ca      	bne.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c50:	e042      	b.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d119      	bne.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0210 	mvn.w	r2, #16
 8003c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e029      	b.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c94:	f7fe fa0a 	bl	80020ac <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e007      	b.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d1b5      	bne.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d11b      	bne.n	8003d40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d50:	b08f      	sub	sp, #60	; 0x3c
 8003d52:	af0a      	add	r7, sp, #40	; 0x28
 8003d54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e10f      	b.n	8003f80 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f00e fb38 	bl	80123f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2203      	movs	r2, #3
 8003d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f004 fa69 	bl	8008276 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	687e      	ldr	r6, [r7, #4]
 8003dac:	466d      	mov	r5, sp
 8003dae:	f106 0410 	add.w	r4, r6, #16
 8003db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc2:	1d33      	adds	r3, r6, #4
 8003dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	f004 f940 	bl	800804c <USB_CoreInit>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0d0      	b.n	8003f80 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f004 fa57 	bl	8008298 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	e04a      	b.n	8003e86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	333d      	adds	r3, #61	; 0x3d
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	333c      	adds	r3, #60	; 0x3c
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	b298      	uxth	r0, r3
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3344      	adds	r3, #68	; 0x44
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3340      	adds	r3, #64	; 0x40
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e44:	7bfa      	ldrb	r2, [r7, #15]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3348      	adds	r3, #72	; 0x48
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	334c      	adds	r3, #76	; 0x4c
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3354      	adds	r3, #84	; 0x54
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	3301      	adds	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d3af      	bcc.n	8003df0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	e044      	b.n	8003f20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d3b5      	bcc.n	8003e96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	687e      	ldr	r6, [r7, #4]
 8003f32:	466d      	mov	r5, sp
 8003f34:	f106 0410 	add.w	r4, r6, #16
 8003f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f44:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f48:	1d33      	adds	r3, r6, #4
 8003f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f4c:	6838      	ldr	r0, [r7, #0]
 8003f4e:	f004 f9ef 	bl	8008330 <USB_DevInit>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e00d      	b.n	8003f80 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f005 fb3e 	bl	80095fa <USB_DevDisconnect>

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_PCD_Start+0x1c>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e020      	b.n	8003fe6 <HAL_PCD_Start+0x5e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d109      	bne.n	8003fc8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d005      	beq.n	8003fc8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f004 f941 	bl	8008254 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f005 faee 	bl	80095b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fee:	b590      	push	{r4, r7, lr}
 8003ff0:	b08d      	sub	sp, #52	; 0x34
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f005 fbac 	bl	8009762 <USB_GetMode>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 848a 	bne.w	8004926 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f005 fb10 	bl	800963c <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8480 	beq.w	8004924 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f005 fafd 	bl	800963c <USB_ReadInterrupts>
 8004042:	4603      	mov	r3, r0
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b02      	cmp	r3, #2
 800404a:	d107      	bne.n	800405c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f002 0202 	and.w	r2, r2, #2
 800405a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f005 faeb 	bl	800963c <USB_ReadInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b10      	cmp	r3, #16
 800406e:	d161      	bne.n	8004134 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0210 	bic.w	r2, r2, #16
 800407e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4413      	add	r3, r2
 800409c:	3304      	adds	r3, #4
 800409e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	0c5b      	lsrs	r3, r3, #17
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d124      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d035      	beq.n	8004124 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	6a38      	ldr	r0, [r7, #32]
 80040cc:	f005 f922 	bl	8009314 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040dc:	441a      	add	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	6a1a      	ldr	r2, [r3, #32]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ee:	441a      	add	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	621a      	str	r2, [r3, #32]
 80040f4:	e016      	b.n	8004124 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	0c5b      	lsrs	r3, r3, #17
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d110      	bne.n	8004124 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004108:	2208      	movs	r2, #8
 800410a:	4619      	mov	r1, r3
 800410c:	6a38      	ldr	r0, [r7, #32]
 800410e:	f005 f901 	bl	8009314 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800411e:	441a      	add	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0210 	orr.w	r2, r2, #16
 8004132:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f005 fa7f 	bl	800963c <USB_ReadInterrupts>
 800413e:	4603      	mov	r3, r0
 8004140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004148:	f040 80a7 	bne.w	800429a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f005 fa84 	bl	8009662 <USB_ReadDevAllOutEpInterrupt>
 800415a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800415c:	e099      	b.n	8004292 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 808e 	beq.w	8004286 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f005 faa8 	bl	80096ca <USB_ReadDevOutEPInterrupt>
 800417a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	461a      	mov	r2, r3
 8004194:	2301      	movs	r3, #1
 8004196:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fec2 	bl	8004f24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00c      	beq.n	80041c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	461a      	mov	r2, r3
 80041b8:	2308      	movs	r3, #8
 80041ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 ff98 	bl	80050f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	461a      	mov	r2, r3
 80041dc:	2310      	movs	r3, #16
 80041de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d030      	beq.n	800424c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d109      	bne.n	800420a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004204:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004208:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	78db      	ldrb	r3, [r3, #3]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d108      	bne.n	800423a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4619      	mov	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f00e f9d7 	bl	80125e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	2302      	movs	r3, #2
 800424a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	461a      	mov	r2, r3
 8004264:	2320      	movs	r3, #32
 8004266:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427e:	461a      	mov	r2, r3
 8004280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004284:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	3301      	adds	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	f47f af62 	bne.w	800415e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f005 f9cc 	bl	800963c <USB_ReadInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ae:	f040 80db 	bne.w	8004468 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f005 f9ed 	bl	8009696 <USB_ReadDevAllInEpInterrupt>
 80042bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80042c2:	e0cd      	b.n	8004460 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80c2 	beq.w	8004454 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f005 fa13 	bl	8009706 <USB_ReadDevInEPInterrupt>
 80042e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d057      	beq.n	800439c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	2201      	movs	r2, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	43db      	mvns	r3, r3
 8004306:	69f9      	ldr	r1, [r7, #28]
 8004308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430c:	4013      	ands	r3, r2
 800430e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	461a      	mov	r2, r3
 800431e:	2301      	movs	r3, #1
 8004320:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d132      	bne.n	8004390 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	334c      	adds	r3, #76	; 0x4c
 800433a:	6819      	ldr	r1, [r3, #0]
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4403      	add	r3, r0
 800434a:	3348      	adds	r3, #72	; 0x48
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4419      	add	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4403      	add	r3, r0
 800435e:	334c      	adds	r3, #76	; 0x4c
 8004360:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d113      	bne.n	8004390 <HAL_PCD_IRQHandler+0x3a2>
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	3354      	adds	r3, #84	; 0x54
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d108      	bne.n	8004390 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004388:	461a      	mov	r2, r3
 800438a:	2101      	movs	r1, #1
 800438c:	f005 fa1a 	bl	80097c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f00e f8ab 	bl	80124f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b2:	461a      	mov	r2, r3
 80043b4:	2308      	movs	r3, #8
 80043b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ce:	461a      	mov	r2, r3
 80043d0:	2310      	movs	r3, #16
 80043d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	461a      	mov	r2, r3
 80043ec:	2340      	movs	r3, #64	; 0x40
 80043ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d023      	beq.n	8004442 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80043fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043fc:	6a38      	ldr	r0, [r7, #32]
 80043fe:	f004 f8fb 	bl	80085f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	3338      	adds	r3, #56	; 0x38
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	3304      	adds	r3, #4
 8004414:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	78db      	ldrb	r3, [r3, #3]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d108      	bne.n	8004430 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f00e f8ee 	bl	801260c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	461a      	mov	r2, r3
 800443e:	2302      	movs	r3, #2
 8004440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800444c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fcdb 	bl	8004e0a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	3301      	adds	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	2b00      	cmp	r3, #0
 8004464:	f47f af2e 	bne.w	80042c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f005 f8e5 	bl	800963c <USB_ReadInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800447c:	d122      	bne.n	80044c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004498:	2b01      	cmp	r3, #1
 800449a:	d108      	bne.n	80044ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044a4:	2100      	movs	r1, #0
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fec2 	bl	8005230 <HAL_PCDEx_LPM_Callback>
 80044ac:	e002      	b.n	80044b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f00e f88c 	bl	80125cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f005 f8b7 	bl	800963c <USB_ReadInterrupts>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d8:	d112      	bne.n	8004500 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d102      	bne.n	80044f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f00e f848 	bl	8012580 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80044fe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f005 f899 	bl	800963c <USB_ReadInterrupts>
 800450a:	4603      	mov	r3, r0
 800450c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004514:	f040 80b7 	bne.w	8004686 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2110      	movs	r1, #16
 8004532:	4618      	mov	r0, r3
 8004534:	f004 f860 	bl	80085f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004538:	2300      	movs	r3, #0
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453c:	e046      	b.n	80045cc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454a:	461a      	mov	r2, r3
 800454c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004550:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004562:	0151      	lsls	r1, r2, #5
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	440a      	add	r2, r1
 8004568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004570:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	461a      	mov	r2, r3
 8004580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004584:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	3301      	adds	r3, #1
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3b3      	bcc.n	800453e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80045e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004602:	f043 030b 	orr.w	r3, r3, #11
 8004606:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004618:	f043 030b 	orr.w	r3, r3, #11
 800461c:	6453      	str	r3, [r2, #68]	; 0x44
 800461e:	e015      	b.n	800464c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004632:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004636:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004646:	f043 030b 	orr.w	r3, r3, #11
 800464a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800465a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800465e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004670:	461a      	mov	r2, r3
 8004672:	f005 f8a7 	bl	80097c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f004 ffd6 	bl	800963c <USB_ReadInterrupts>
 8004690:	4603      	mov	r3, r0
 8004692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469a:	d124      	bne.n	80046e6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f005 f86c 	bl	800977e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f004 f821 	bl	80086f2 <USB_GetDevSpeed>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681c      	ldr	r4, [r3, #0]
 80046bc:	f001 f9e8 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 80046c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	4620      	mov	r0, r4
 80046cc:	f003 fd20 	bl	8008110 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f00d ff36 	bl	8012542 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695a      	ldr	r2, [r3, #20]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80046e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f004 ffa6 	bl	800963c <USB_ReadInterrupts>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d10a      	bne.n	8004710 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f00d ff13 	bl	8012526 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f002 0208 	and.w	r2, r2, #8
 800470e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f004 ff91 	bl	800963c <USB_ReadInterrupts>
 800471a:	4603      	mov	r3, r0
 800471c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004720:	2b80      	cmp	r3, #128	; 0x80
 8004722:	d122      	bne.n	800476a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004730:	2301      	movs	r3, #1
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	e014      	b.n	8004760 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	b2db      	uxtb	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fb27 	bl	8004da8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	3301      	adds	r3, #1
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	429a      	cmp	r2, r3
 8004768:	d3e5      	bcc.n	8004736 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f004 ff64 	bl	800963c <USB_ReadInterrupts>
 8004774:	4603      	mov	r3, r0
 8004776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477e:	d13b      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004780:	2301      	movs	r3, #1
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
 8004784:	e02b      	b.n	80047de <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479a:	4613      	mov	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	3340      	adds	r3, #64	; 0x40
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d115      	bne.n	80047d8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	da12      	bge.n	80047d8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	333f      	adds	r3, #63	; 0x3f
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fae8 	bl	8004da8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	3301      	adds	r3, #1
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d3ce      	bcc.n	8004786 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80047f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f004 ff1d 	bl	800963c <USB_ReadInterrupts>
 8004802:	4603      	mov	r3, r0
 8004804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800480c:	d155      	bne.n	80048ba <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800480e:	2301      	movs	r3, #1
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
 8004812:	e045      	b.n	80048a0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d12e      	bne.n	800489a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800483c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800483e:	2b00      	cmp	r3, #0
 8004840:	da2b      	bge.n	800489a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800484e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004852:	429a      	cmp	r2, r3
 8004854:	d121      	bne.n	800489a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004896:	6053      	str	r3, [r2, #4]
            break;
 8004898:	e007      	b.n	80048aa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	3301      	adds	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d3b4      	bcc.n	8004814 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f004 febc 	bl	800963c <USB_ReadInterrupts>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d10a      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f00d fead 	bl	8012630 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f004 fea6 	bl	800963c <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d115      	bne.n	8004926 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f00d fe9d 	bl	801264c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	e000      	b.n	8004926 <HAL_PCD_IRQHandler+0x938>
      return;
 8004924:	bf00      	nop
    }
  }
}
 8004926:	3734      	adds	r7, #52	; 0x34
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}

0800492c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_PCD_SetAddress+0x1a>
 8004942:	2302      	movs	r3, #2
 8004944:	e013      	b.n	800496e <HAL_PCD_SetAddress+0x42>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f004 fe04 	bl	800956c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	4608      	mov	r0, r1
 8004980:	4611      	mov	r1, r2
 8004982:	461a      	mov	r2, r3
 8004984:	4603      	mov	r3, r0
 8004986:	70fb      	strb	r3, [r7, #3]
 8004988:	460b      	mov	r3, r1
 800498a:	803b      	strh	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	da0f      	bge.n	80049bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	3338      	adds	r3, #56	; 0x38
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	705a      	strb	r2, [r3, #1]
 80049ba:	e00f      	b.n	80049dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049e8:	883a      	ldrh	r2, [r7, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	78ba      	ldrb	r2, [r7, #2]
 80049f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a06:	78bb      	ldrb	r3, [r7, #2]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d102      	bne.n	8004a12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_PCD_EP_Open+0xaa>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e00e      	b.n	8004a3e <HAL_PCD_EP_Open+0xc8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f003 fe84 	bl	800873c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da0f      	bge.n	8004a7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	3338      	adds	r3, #56	; 0x38
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	705a      	strb	r2, [r3, #1]
 8004a78:	e00f      	b.n	8004a9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	3304      	adds	r3, #4
 8004a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_PCD_EP_Close+0x6e>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e00e      	b.n	8004ad2 <HAL_PCD_EP_Close+0x8c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f003 fec2 	bl	800884c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	3304      	adds	r3, #4
 8004b02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d102      	bne.n	8004b36 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6979      	ldr	r1, [r7, #20]
 8004b4e:	f004 f9a1 	bl	8008e94 <USB_EP0StartXfer>
 8004b52:	e008      	b.n	8004b66 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6979      	ldr	r1, [r7, #20]
 8004b62:	f003 ff4f 	bl	8008a04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	460b      	mov	r3, r1
 8004bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	f003 020f 	and.w	r2, r3, #15
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	3338      	adds	r3, #56	; 0x38
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d102      	bne.n	8004bfa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	f004 f93f 	bl	8008e94 <USB_EP0StartXfer>
 8004c16:	e008      	b.n	8004c2a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	f003 feed 	bl	8008a04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d901      	bls.n	8004c52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e050      	b.n	8004cf4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da0f      	bge.n	8004c7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f003 020f 	and.w	r2, r3, #15
 8004c60:	4613      	mov	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	3338      	adds	r3, #56	; 0x38
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3304      	adds	r3, #4
 8004c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	705a      	strb	r2, [r3, #1]
 8004c78:	e00d      	b.n	8004c96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_PCD_EP_SetStall+0x82>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e01e      	b.n	8004cf4 <HAL_PCD_EP_SetStall+0xc0>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f004 fb7d 	bl	80093c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	b2d9      	uxtb	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f004 fd6d 	bl	80097c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	f003 020f 	and.w	r2, r3, #15
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d901      	bls.n	8004d1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e042      	b.n	8004da0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da0f      	bge.n	8004d42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3338      	adds	r3, #56	; 0x38
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4413      	add	r3, r2
 8004d36:	3304      	adds	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	705a      	strb	r2, [r3, #1]
 8004d40:	e00f      	b.n	8004d62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	f003 020f 	and.w	r2, r3, #15
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	3304      	adds	r3, #4
 8004d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_PCD_EP_ClrStall+0x86>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e00e      	b.n	8004da0 <HAL_PCD_EP_ClrStall+0xa4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f004 fb85 	bl	80094a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	da0c      	bge.n	8004dd6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	f003 020f 	and.w	r2, r3, #15
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	3338      	adds	r3, #56	; 0x38
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4413      	add	r3, r2
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e00c      	b.n	8004df0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	f003 020f 	and.w	r2, r3, #15
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	4413      	add	r3, r2
 8004dec:	3304      	adds	r3, #4
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f004 f9a4 	bl	8009144 <USB_EPStopXfer>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e00:	7afb      	ldrb	r3, [r7, #11]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b08a      	sub	sp, #40	; 0x28
 8004e0e:	af02      	add	r7, sp, #8
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	3338      	adds	r3, #56	; 0x38
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3304      	adds	r3, #4
 8004e30:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d901      	bls.n	8004e42 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e06c      	b.n	8004f1c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d902      	bls.n	8004e5e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3303      	adds	r3, #3
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e66:	e02b      	b.n	8004ec0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	699a      	ldr	r2, [r3, #24]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d902      	bls.n	8004e84 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3303      	adds	r3, #3
 8004e88:	089b      	lsrs	r3, r3, #2
 8004e8a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6919      	ldr	r1, [r3, #16]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	6978      	ldr	r0, [r7, #20]
 8004ea4:	f004 f9f8 	bl	8009298 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	441a      	add	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	441a      	add	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d809      	bhi.n	8004eea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a1a      	ldr	r2, [r3, #32]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d203      	bcs.n	8004eea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1be      	bne.n	8004e68 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d811      	bhi.n	8004f1a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	2201      	movs	r2, #1
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	6939      	ldr	r1, [r7, #16]
 8004f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f16:	4013      	ands	r3, r2
 8004f18:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	333c      	adds	r3, #60	; 0x3c
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d17b      	bne.n	8005052 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d015      	beq.n	8004f90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4a61      	ldr	r2, [pc, #388]	; (80050ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	f240 80b9 	bls.w	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80b3 	beq.w	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	461a      	mov	r2, r3
 8004f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8c:	6093      	str	r3, [r2, #8]
 8004f8e:	e0a7      	b.n	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2320      	movs	r3, #32
 8004faa:	6093      	str	r3, [r2, #8]
 8004fac:	e098      	b.n	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f040 8093 	bne.w	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4a4b      	ldr	r2, [pc, #300]	; (80050ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d90f      	bls.n	8004fe2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fde:	6093      	str	r3, [r2, #8]
 8004fe0:	e07e      	b.n	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	0159      	lsls	r1, r3, #5
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	440b      	add	r3, r1
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d114      	bne.n	8005044 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800502c:	461a      	mov	r2, r3
 800502e:	2101      	movs	r1, #1
 8005030:	f004 fbc8 	bl	80097c4 <USB_EP0_OutStart>
 8005034:	e006      	b.n	8005044 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	441a      	add	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f00d fa36 	bl	80124bc <HAL_PCD_DataOutStageCallback>
 8005050:	e046      	b.n	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d124      	bne.n	80050a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	461a      	mov	r2, r3
 8005072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005076:	6093      	str	r3, [r2, #8]
 8005078:	e032      	b.n	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	461a      	mov	r2, r3
 8005092:	2320      	movs	r3, #32
 8005094:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f00d fa0d 	bl	80124bc <HAL_PCD_DataOutStageCallback>
 80050a2:	e01d      	b.n	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d114      	bne.n	80050d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d108      	bne.n	80050d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050cc:	461a      	mov	r2, r3
 80050ce:	2100      	movs	r1, #0
 80050d0:	f004 fb78 	bl	80097c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f00d f9ee 	bl	80124bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	4f54300a 	.word	0x4f54300a
 80050f0:	4f54310a 	.word	0x4f54310a

080050f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	333c      	adds	r3, #60	; 0x3c
 800510c:	3304      	adds	r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <PCD_EP_OutSetupPacket_int+0x88>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d90e      	bls.n	8005148 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	461a      	mov	r2, r3
 8005142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005146:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f00d f9a5 	bl	8012498 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <PCD_EP_OutSetupPacket_int+0x88>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d90c      	bls.n	8005170 <PCD_EP_OutSetupPacket_int+0x7c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d108      	bne.n	8005170 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005168:	461a      	mov	r2, r3
 800516a:	2101      	movs	r1, #1
 800516c:	f004 fb2a 	bl	80097c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	4f54300a 	.word	0x4f54300a

08005180 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
 800518c:	4613      	mov	r3, r2
 800518e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d107      	bne.n	80051ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800519e:	883b      	ldrh	r3, [r7, #0]
 80051a0:	0419      	lsls	r1, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
 80051ac:	e028      	b.n	8005200 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	0c1b      	lsrs	r3, r3, #16
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4413      	add	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
 80051c0:	e00d      	b.n	80051de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	3340      	adds	r3, #64	; 0x40
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4413      	add	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	3301      	adds	r3, #1
 80051dc:	73fb      	strb	r3, [r7, #15]
 80051de:	7bfa      	ldrb	r2, [r7, #15]
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d3ec      	bcc.n	80051c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051e8:	883b      	ldrh	r3, [r7, #0]
 80051ea:	0418      	lsls	r0, r3, #16
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	4302      	orrs	r2, r0
 80051f8:	3340      	adds	r3, #64	; 0x40
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e267      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d075      	beq.n	8005352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005266:	4b88      	ldr	r3, [pc, #544]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	2b04      	cmp	r3, #4
 8005270:	d00c      	beq.n	800528c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005272:	4b85      	ldr	r3, [pc, #532]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800527a:	2b08      	cmp	r3, #8
 800527c:	d112      	bne.n	80052a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800527e:	4b82      	ldr	r3, [pc, #520]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800528a:	d10b      	bne.n	80052a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	4b7e      	ldr	r3, [pc, #504]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d05b      	beq.n	8005350 <HAL_RCC_OscConfig+0x108>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d157      	bne.n	8005350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e242      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ac:	d106      	bne.n	80052bc <HAL_RCC_OscConfig+0x74>
 80052ae:	4b76      	ldr	r3, [pc, #472]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a75      	ldr	r2, [pc, #468]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	e01d      	b.n	80052f8 <HAL_RCC_OscConfig+0xb0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCC_OscConfig+0x98>
 80052c6:	4b70      	ldr	r3, [pc, #448]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a6f      	ldr	r2, [pc, #444]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	4b6d      	ldr	r3, [pc, #436]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6c      	ldr	r2, [pc, #432]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e00b      	b.n	80052f8 <HAL_RCC_OscConfig+0xb0>
 80052e0:	4b69      	ldr	r3, [pc, #420]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a68      	ldr	r2, [pc, #416]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	4b66      	ldr	r3, [pc, #408]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a65      	ldr	r2, [pc, #404]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80052f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d013      	beq.n	8005328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005300:	f7fc fed4 	bl	80020ac <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005308:	f7fc fed0 	bl	80020ac <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	; 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e207      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	4b5b      	ldr	r3, [pc, #364]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0xc0>
 8005326:	e014      	b.n	8005352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fc fec0 	bl	80020ac <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005330:	f7fc febc 	bl	80020ac <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e1f3      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005342:	4b51      	ldr	r3, [pc, #324]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0xe8>
 800534e:	e000      	b.n	8005352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d063      	beq.n	8005426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800535e:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800536a:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005372:	2b08      	cmp	r3, #8
 8005374:	d11c      	bne.n	80053b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005376:	4b44      	ldr	r3, [pc, #272]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d116      	bne.n	80053b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005382:	4b41      	ldr	r3, [pc, #260]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_RCC_OscConfig+0x152>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d001      	beq.n	800539a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e1c7      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539a:	4b3b      	ldr	r3, [pc, #236]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4937      	ldr	r1, [pc, #220]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ae:	e03a      	b.n	8005426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b8:	4b34      	ldr	r3, [pc, #208]	; (800548c <HAL_RCC_OscConfig+0x244>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fc fe75 	bl	80020ac <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c6:	f7fc fe71 	bl	80020ac <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e1a8      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d8:	4b2b      	ldr	r3, [pc, #172]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e4:	4b28      	ldr	r3, [pc, #160]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4925      	ldr	r1, [pc, #148]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]
 80053f8:	e015      	b.n	8005426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <HAL_RCC_OscConfig+0x244>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fc fe54 	bl	80020ac <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005408:	f7fc fe50 	bl	80020ac <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e187      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541a:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d036      	beq.n	80054a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800543a:	4b15      	ldr	r3, [pc, #84]	; (8005490 <HAL_RCC_OscConfig+0x248>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005440:	f7fc fe34 	bl	80020ac <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005448:	f7fc fe30 	bl	80020ac <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e167      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <HAL_RCC_OscConfig+0x240>)
 800545c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0x200>
 8005466:	e01b      	b.n	80054a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_RCC_OscConfig+0x248>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546e:	f7fc fe1d 	bl	80020ac <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005474:	e00e      	b.n	8005494 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005476:	f7fc fe19 	bl	80020ac <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d907      	bls.n	8005494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e150      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
 8005488:	40023800 	.word	0x40023800
 800548c:	42470000 	.word	0x42470000
 8005490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005494:	4b88      	ldr	r3, [pc, #544]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ea      	bne.n	8005476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8097 	beq.w	80055dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b2:	4b81      	ldr	r3, [pc, #516]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10f      	bne.n	80054de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	2300      	movs	r3, #0
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	4b7d      	ldr	r3, [pc, #500]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	4a7c      	ldr	r2, [pc, #496]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054cc:	6413      	str	r3, [r2, #64]	; 0x40
 80054ce:	4b7a      	ldr	r3, [pc, #488]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054de:	4b77      	ldr	r3, [pc, #476]	; (80056bc <HAL_RCC_OscConfig+0x474>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d118      	bne.n	800551c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ea:	4b74      	ldr	r3, [pc, #464]	; (80056bc <HAL_RCC_OscConfig+0x474>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a73      	ldr	r2, [pc, #460]	; (80056bc <HAL_RCC_OscConfig+0x474>)
 80054f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f6:	f7fc fdd9 	bl	80020ac <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fe:	f7fc fdd5 	bl	80020ac <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e10c      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	4b6a      	ldr	r3, [pc, #424]	; (80056bc <HAL_RCC_OscConfig+0x474>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d106      	bne.n	8005532 <HAL_RCC_OscConfig+0x2ea>
 8005524:	4b64      	ldr	r3, [pc, #400]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	4a63      	ldr	r2, [pc, #396]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	; 0x70
 8005530:	e01c      	b.n	800556c <HAL_RCC_OscConfig+0x324>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b05      	cmp	r3, #5
 8005538:	d10c      	bne.n	8005554 <HAL_RCC_OscConfig+0x30c>
 800553a:	4b5f      	ldr	r3, [pc, #380]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553e:	4a5e      	ldr	r2, [pc, #376]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005540:	f043 0304 	orr.w	r3, r3, #4
 8005544:	6713      	str	r3, [r2, #112]	; 0x70
 8005546:	4b5c      	ldr	r3, [pc, #368]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4a5b      	ldr	r2, [pc, #364]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	6713      	str	r3, [r2, #112]	; 0x70
 8005552:	e00b      	b.n	800556c <HAL_RCC_OscConfig+0x324>
 8005554:	4b58      	ldr	r3, [pc, #352]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	4a57      	ldr	r2, [pc, #348]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	6713      	str	r3, [r2, #112]	; 0x70
 8005560:	4b55      	ldr	r3, [pc, #340]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	4a54      	ldr	r2, [pc, #336]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005566:	f023 0304 	bic.w	r3, r3, #4
 800556a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d015      	beq.n	80055a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005574:	f7fc fd9a 	bl	80020ac <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557a:	e00a      	b.n	8005592 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800557c:	f7fc fd96 	bl	80020ac <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	; 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e0cb      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005592:	4b49      	ldr	r3, [pc, #292]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0ee      	beq.n	800557c <HAL_RCC_OscConfig+0x334>
 800559e:	e014      	b.n	80055ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a0:	f7fc fd84 	bl	80020ac <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a6:	e00a      	b.n	80055be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a8:	f7fc fd80 	bl	80020ac <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0b5      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055be:	4b3e      	ldr	r3, [pc, #248]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1ee      	bne.n	80055a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d105      	bne.n	80055dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d0:	4b39      	ldr	r3, [pc, #228]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	4a38      	ldr	r2, [pc, #224]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80055d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80a1 	beq.w	8005728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055e6:	4b34      	ldr	r3, [pc, #208]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d05c      	beq.n	80056ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d141      	bne.n	800567e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fa:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <HAL_RCC_OscConfig+0x478>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005600:	f7fc fd54 	bl	80020ac <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005608:	f7fc fd50 	bl	80020ac <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e087      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	4b27      	ldr	r3, [pc, #156]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	019b      	lsls	r3, r3, #6
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	3b01      	subs	r3, #1
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	061b      	lsls	r3, r3, #24
 800564a:	491b      	ldr	r1, [pc, #108]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 800564c:	4313      	orrs	r3, r2
 800564e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005650:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <HAL_RCC_OscConfig+0x478>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005656:	f7fc fd29 	bl	80020ac <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565e:	f7fc fd25 	bl	80020ac <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e05c      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005670:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f0      	beq.n	800565e <HAL_RCC_OscConfig+0x416>
 800567c:	e054      	b.n	8005728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567e:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <HAL_RCC_OscConfig+0x478>)
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005684:	f7fc fd12 	bl	80020ac <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800568c:	f7fc fd0e 	bl	80020ac <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e045      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_RCC_OscConfig+0x470>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x444>
 80056aa:	e03d      	b.n	8005728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d107      	bne.n	80056c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e038      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
 80056b8:	40023800 	.word	0x40023800
 80056bc:	40007000 	.word	0x40007000
 80056c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056c4:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <HAL_RCC_OscConfig+0x4ec>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d028      	beq.n	8005724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056dc:	429a      	cmp	r2, r3
 80056de:	d121      	bne.n	8005724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d11a      	bne.n	8005724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056f4:	4013      	ands	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d111      	bne.n	8005724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	3b01      	subs	r3, #1
 800570e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d107      	bne.n	8005724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40023800 	.word	0x40023800

08005738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0cc      	b.n	80058e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800574c:	4b68      	ldr	r3, [pc, #416]	; (80058f0 <HAL_RCC_ClockConfig+0x1b8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d90c      	bls.n	8005774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800575a:	4b65      	ldr	r3, [pc, #404]	; (80058f0 <HAL_RCC_ClockConfig+0x1b8>)
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005762:	4b63      	ldr	r3, [pc, #396]	; (80058f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d001      	beq.n	8005774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0b8      	b.n	80058e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d020      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800578c:	4b59      	ldr	r3, [pc, #356]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4a58      	ldr	r2, [pc, #352]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057a4:	4b53      	ldr	r3, [pc, #332]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	4a52      	ldr	r2, [pc, #328]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b0:	4b50      	ldr	r3, [pc, #320]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	494d      	ldr	r1, [pc, #308]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d044      	beq.n	8005858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d107      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d6:	4b47      	ldr	r3, [pc, #284]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d119      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e07f      	b.n	80058e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d003      	beq.n	80057f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f6:	4b3f      	ldr	r3, [pc, #252]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e06f      	b.n	80058e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005806:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e067      	b.n	80058e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005816:	4b37      	ldr	r3, [pc, #220]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f023 0203 	bic.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4934      	ldr	r1, [pc, #208]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	4313      	orrs	r3, r2
 8005826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005828:	f7fc fc40 	bl	80020ac <HAL_GetTick>
 800582c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582e:	e00a      	b.n	8005846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005830:	f7fc fc3c 	bl	80020ac <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	; 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e04f      	b.n	80058e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 020c 	and.w	r2, r3, #12
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	429a      	cmp	r2, r3
 8005856:	d1eb      	bne.n	8005830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005858:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <HAL_RCC_ClockConfig+0x1b8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d20c      	bcs.n	8005880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005866:	4b22      	ldr	r3, [pc, #136]	; (80058f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586e:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e032      	b.n	80058e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800588c:	4b19      	ldr	r3, [pc, #100]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4916      	ldr	r1, [pc, #88]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	4313      	orrs	r3, r2
 800589c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	490e      	ldr	r1, [pc, #56]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058be:	f000 f821 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 80058c2:	4602      	mov	r2, r0
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	490a      	ldr	r1, [pc, #40]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 80058d0:	5ccb      	ldrb	r3, [r1, r3]
 80058d2:	fa22 f303 	lsr.w	r3, r2, r3
 80058d6:	4a09      	ldr	r2, [pc, #36]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_RCC_ClockConfig+0x1c8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc fba0 	bl	8002024 <HAL_InitTick>

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40023c00 	.word	0x40023c00
 80058f4:	40023800 	.word	0x40023800
 80058f8:	080133c8 	.word	0x080133c8
 80058fc:	2000002c 	.word	0x2000002c
 8005900:	20000040 	.word	0x20000040

08005904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005908:	b090      	sub	sp, #64	; 0x40
 800590a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	2300      	movs	r3, #0
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005914:	2300      	movs	r3, #0
 8005916:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800591c:	4b59      	ldr	r3, [pc, #356]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 030c 	and.w	r3, r3, #12
 8005924:	2b08      	cmp	r3, #8
 8005926:	d00d      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x40>
 8005928:	2b08      	cmp	r3, #8
 800592a:	f200 80a1 	bhi.w	8005a70 <HAL_RCC_GetSysClockFreq+0x16c>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_RCC_GetSysClockFreq+0x34>
 8005932:	2b04      	cmp	r3, #4
 8005934:	d003      	beq.n	800593e <HAL_RCC_GetSysClockFreq+0x3a>
 8005936:	e09b      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005938:	4b53      	ldr	r3, [pc, #332]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x184>)
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800593c:	e09b      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800593e:	4b53      	ldr	r3, [pc, #332]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8005940:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005942:	e098      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005944:	4b4f      	ldr	r3, [pc, #316]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800594e:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d028      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800595a:	4b4a      	ldr	r3, [pc, #296]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x180>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	099b      	lsrs	r3, r3, #6
 8005960:	2200      	movs	r2, #0
 8005962:	623b      	str	r3, [r7, #32]
 8005964:	627a      	str	r2, [r7, #36]	; 0x24
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800596c:	2100      	movs	r1, #0
 800596e:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x188>)
 8005970:	fb03 f201 	mul.w	r2, r3, r1
 8005974:	2300      	movs	r3, #0
 8005976:	fb00 f303 	mul.w	r3, r0, r3
 800597a:	4413      	add	r3, r2
 800597c:	4a43      	ldr	r2, [pc, #268]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x188>)
 800597e:	fba0 1202 	umull	r1, r2, r0, r2
 8005982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005984:	460a      	mov	r2, r1
 8005986:	62ba      	str	r2, [r7, #40]	; 0x28
 8005988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598a:	4413      	add	r3, r2
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	2200      	movs	r2, #0
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	61fa      	str	r2, [r7, #28]
 8005996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800599a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800599e:	f7fa fc6f 	bl	8000280 <__aeabi_uldivmod>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4613      	mov	r3, r2
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059aa:	e053      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ac:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	099b      	lsrs	r3, r3, #6
 80059b2:	2200      	movs	r2, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	617a      	str	r2, [r7, #20]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059be:	f04f 0b00 	mov.w	fp, #0
 80059c2:	4652      	mov	r2, sl
 80059c4:	465b      	mov	r3, fp
 80059c6:	f04f 0000 	mov.w	r0, #0
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	0159      	lsls	r1, r3, #5
 80059d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059d4:	0150      	lsls	r0, r2, #5
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	ebb2 080a 	subs.w	r8, r2, sl
 80059de:	eb63 090b 	sbc.w	r9, r3, fp
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059f6:	ebb2 0408 	subs.w	r4, r2, r8
 80059fa:	eb63 0509 	sbc.w	r5, r3, r9
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	00eb      	lsls	r3, r5, #3
 8005a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a0c:	00e2      	lsls	r2, r4, #3
 8005a0e:	4614      	mov	r4, r2
 8005a10:	461d      	mov	r5, r3
 8005a12:	eb14 030a 	adds.w	r3, r4, sl
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	eb45 030b 	adc.w	r3, r5, fp
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	028b      	lsls	r3, r1, #10
 8005a2e:	4621      	mov	r1, r4
 8005a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a34:	4621      	mov	r1, r4
 8005a36:	028a      	lsls	r2, r1, #10
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	2200      	movs	r2, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	60fa      	str	r2, [r7, #12]
 8005a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a48:	f7fa fc1a 	bl	8000280 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4613      	mov	r3, r2
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a6e:	e002      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3740      	adds	r7, #64	; 0x40
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800
 8005a88:	00f42400 	.word	0x00f42400
 8005a8c:	017d7840 	.word	0x017d7840

08005a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a96:	681b      	ldr	r3, [r3, #0]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000002c 	.word	0x2000002c

08005aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005aac:	f7ff fff0 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	0a9b      	lsrs	r3, r3, #10
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	4903      	ldr	r1, [pc, #12]	; (8005acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005abe:	5ccb      	ldrb	r3, [r1, r3]
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	080133d8 	.word	0x080133d8

08005ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d105      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d038      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005af8:	4b68      	ldr	r3, [pc, #416]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005afe:	f7fc fad5 	bl	80020ac <HAL_GetTick>
 8005b02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b04:	e008      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b06:	f7fc fad1 	bl	80020ac <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e0bd      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b18:	4b61      	ldr	r3, [pc, #388]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f0      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	019b      	lsls	r3, r3, #6
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	071b      	lsls	r3, r3, #28
 8005b36:	495a      	ldr	r1, [pc, #360]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b3e:	4b57      	ldr	r3, [pc, #348]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b44:	f7fc fab2 	bl	80020ac <HAL_GetTick>
 8005b48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b4c:	f7fc faae 	bl	80020ac <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e09a      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b5e:	4b50      	ldr	r3, [pc, #320]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8083 	beq.w	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	4b48      	ldr	r3, [pc, #288]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	4a47      	ldr	r2, [pc, #284]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b86:	6413      	str	r3, [r2, #64]	; 0x40
 8005b88:	4b45      	ldr	r3, [pc, #276]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b94:	4b43      	ldr	r3, [pc, #268]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a42      	ldr	r2, [pc, #264]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba0:	f7fc fa84 	bl	80020ac <HAL_GetTick>
 8005ba4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ba8:	f7fc fa80 	bl	80020ac <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e06c      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bba:	4b3a      	ldr	r3, [pc, #232]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bc6:	4b36      	ldr	r3, [pc, #216]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bce:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d02f      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d028      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005be4:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bee:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bf4:	4b2c      	ldr	r3, [pc, #176]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005bfa:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d114      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c0c:	f7fc fa4e 	bl	80020ac <HAL_GetTick>
 8005c10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c12:	e00a      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c14:	f7fc fa4a 	bl	80020ac <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e034      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ee      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c42:	d10d      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005c44:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c58:	4911      	ldr	r1, [pc, #68]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
 8005c5e:	e005      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005c60:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c6a:	6093      	str	r3, [r2, #8]
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c78:	4909      	ldr	r1, [pc, #36]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	7d1a      	ldrb	r2, [r3, #20]
 8005c8e:	4b07      	ldr	r3, [pc, #28]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005c90:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	42470068 	.word	0x42470068
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	40007000 	.word	0x40007000
 8005ca8:	42470e40 	.word	0x42470e40
 8005cac:	424711e0 	.word	0x424711e0

08005cb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e066      	b.n	8005d94 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	7f5b      	ldrb	r3, [r3, #29]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fb faea 	bl	80012b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	22ca      	movs	r2, #202	; 0xca
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2253      	movs	r2, #83	; 0x53
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f87a 	bl	8005dec <RTC_EnterInitMode>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d12c      	bne.n	8005d5c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d14:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6899      	ldr	r1, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	68d2      	ldr	r2, [r2, #12]
 8005d3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6919      	ldr	r1, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	041a      	lsls	r2, r3, #16
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f881 	bl	8005e5a <RTC_ExitInitMode>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d113      	bne.n	8005d8a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	22ff      	movs	r2, #255	; 0xff
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005db6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005db8:	f7fc f978 	bl	80020ac <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dbe:	e009      	b.n	8005dd4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dc0:	f7fc f974 	bl	80020ac <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dce:	d901      	bls.n	8005dd4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e007      	b.n	8005de4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0ee      	beq.n	8005dc0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d122      	bne.n	8005e50 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e1a:	f7fc f947 	bl	80020ac <HAL_GetTick>
 8005e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e20:	e00c      	b.n	8005e3c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e22:	f7fc f943 	bl	80020ac <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e30:	d904      	bls.n	8005e3c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2204      	movs	r2, #4
 8005e36:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <RTC_EnterInitMode+0x64>
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d1e8      	bne.n	8005e22 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e74:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff89 	bl	8005d9c <HAL_RTC_WaitForSynchro>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2204      	movs	r2, #4
 8005e94:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e07b      	b.n	8005fae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d108      	bne.n	8005ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec6:	d009      	beq.n	8005edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	61da      	str	r2, [r3, #28]
 8005ece:	e005      	b.n	8005edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fb fa06 	bl	8001308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f60:	ea42 0103 	orr.w	r1, r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	0c1b      	lsrs	r3, r3, #16
 8005f7a:	f003 0104 	and.w	r1, r3, #4
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0210 	and.w	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b088      	sub	sp, #32
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_SPI_Transmit+0x22>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e126      	b.n	8006226 <HAL_SPI_Transmit+0x270>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fe0:	f7fc f864 	bl	80020ac <HAL_GetTick>
 8005fe4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d002      	beq.n	8005ffc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ffa:	e10b      	b.n	8006214 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_SPI_Transmit+0x52>
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800600c:	e102      	b.n	8006214 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2203      	movs	r2, #3
 8006012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	88fa      	ldrh	r2, [r7, #6]
 8006026:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	88fa      	ldrh	r2, [r7, #6]
 800602c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006054:	d10f      	bne.n	8006076 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006074:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d007      	beq.n	8006094 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609c:	d14b      	bne.n	8006136 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_SPI_Transmit+0xf6>
 80060a6:	8afb      	ldrh	r3, [r7, #22]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d13e      	bne.n	800612a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	1c9a      	adds	r2, r3, #2
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060d0:	e02b      	b.n	800612a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d112      	bne.n	8006106 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	881a      	ldrh	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	86da      	strh	r2, [r3, #54]	; 0x36
 8006104:	e011      	b.n	800612a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006106:	f7fb ffd1 	bl	80020ac <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d803      	bhi.n	800611e <HAL_SPI_Transmit+0x168>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800611c:	d102      	bne.n	8006124 <HAL_SPI_Transmit+0x16e>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006128:	e074      	b.n	8006214 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1ce      	bne.n	80060d2 <HAL_SPI_Transmit+0x11c>
 8006134:	e04c      	b.n	80061d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_SPI_Transmit+0x18e>
 800613e:	8afb      	ldrh	r3, [r7, #22]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d140      	bne.n	80061c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800616a:	e02c      	b.n	80061c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d113      	bne.n	80061a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	7812      	ldrb	r2, [r2, #0]
 8006186:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	86da      	strh	r2, [r3, #54]	; 0x36
 80061a0:	e011      	b.n	80061c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a2:	f7fb ff83 	bl	80020ac <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d803      	bhi.n	80061ba <HAL_SPI_Transmit+0x204>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b8:	d102      	bne.n	80061c0 <HAL_SPI_Transmit+0x20a>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061c4:	e026      	b.n	8006214 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1cd      	bne.n	800616c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fb1d 	bl	8006814 <SPI_EndRxTxTransaction>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ee:	2300      	movs	r3, #0
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e000      	b.n	8006214 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006224:	7ffb      	ldrb	r3, [r7, #31]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_SPI_Transmit_DMA+0x20>
 800624c:	2302      	movs	r3, #2
 800624e:	e09b      	b.n	8006388 <HAL_SPI_Transmit_DMA+0x158>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d002      	beq.n	800626a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006264:	2302      	movs	r3, #2
 8006266:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006268:	e089      	b.n	800637e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_SPI_Transmit_DMA+0x46>
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800627a:	e080      	b.n	800637e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2203      	movs	r2, #3
 8006280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c2:	d10f      	bne.n	80062e4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <HAL_SPI_Transmit_DMA+0x160>)
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f0:	4a28      	ldr	r2, [pc, #160]	; (8006394 <HAL_SPI_Transmit_DMA+0x164>)
 80062f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <HAL_SPI_Transmit_DMA+0x168>)
 80062fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006300:	2200      	movs	r2, #0
 8006302:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630c:	4619      	mov	r1, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	330c      	adds	r3, #12
 8006314:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800631a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800631c:	f7fc f8b6 	bl	800248c <HAL_DMA_Start_IT>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00c      	beq.n	8006340 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	f043 0210 	orr.w	r2, r3, #16
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800633e:	e01e      	b.n	800637e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d007      	beq.n	800635e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0220 	orr.w	r2, r2, #32
 800636c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0202 	orr.w	r2, r2, #2
 800637c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	08006681 	.word	0x08006681
 8006394:	080065d9 	.word	0x080065d9
 8006398:	0800669d 	.word	0x0800669d

0800639c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	099b      	lsrs	r3, r3, #6
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10f      	bne.n	80063e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	099b      	lsrs	r3, r3, #6
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
    return;
 80063de:	e0d7      	b.n	8006590 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <HAL_SPI_IRQHandler+0x66>
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	09db      	lsrs	r3, r3, #7
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
    return;
 8006400:	e0c6      	b.n	8006590 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10c      	bne.n	8006428 <HAL_SPI_IRQHandler+0x8c>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	099b      	lsrs	r3, r3, #6
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80b4 	beq.w	8006590 <HAL_SPI_IRQHandler+0x1f4>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80ad 	beq.w	8006590 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	099b      	lsrs	r3, r3, #6
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d023      	beq.n	800648a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b03      	cmp	r3, #3
 800644c:	d011      	beq.n	8006472 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006452:	f043 0204 	orr.w	r2, r3, #4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	e00b      	b.n	800648a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	693b      	ldr	r3, [r7, #16]
        return;
 8006488:	e082      	b.n	8006590 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d014      	beq.n	80064c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00c      	beq.n	80064e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d0:	f043 0208 	orr.w	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064d8:	2300      	movs	r3, #0
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d04f      	beq.n	800658e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <HAL_SPI_IRQHandler+0x17e>
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d034      	beq.n	8006584 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0203 	bic.w	r2, r2, #3
 8006528:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d011      	beq.n	8006556 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006536:	4a18      	ldr	r2, [pc, #96]	; (8006598 <HAL_SPI_IRQHandler+0x1fc>)
 8006538:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	4618      	mov	r0, r3
 8006540:	f7fb fffc 	bl	800253c <HAL_DMA_Abort_IT>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655a:	2b00      	cmp	r3, #0
 800655c:	d016      	beq.n	800658c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006562:	4a0d      	ldr	r2, [pc, #52]	; (8006598 <HAL_SPI_IRQHandler+0x1fc>)
 8006564:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656a:	4618      	mov	r0, r3
 800656c:	f7fb ffe6 	bl	800253c <HAL_DMA_Abort_IT>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006582:	e003      	b.n	800658c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f81d 	bl	80065c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800658a:	e000      	b.n	800658e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800658c:	bf00      	nop
    return;
 800658e:	bf00      	nop
  }
}
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	080066dd 	.word	0x080066dd

0800659c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065e6:	f7fb fd61 	bl	80020ac <HAL_GetTick>
 80065ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fa:	d03b      	beq.n	8006674 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0220 	bic.w	r2, r2, #32
 800660a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0202 	bic.w	r2, r2, #2
 800661a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	2164      	movs	r1, #100	; 0x64
 8006620:	6978      	ldr	r0, [r7, #20]
 8006622:	f000 f8f7 	bl	8006814 <SPI_EndRxTxTransaction>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800666c:	6978      	ldr	r0, [r7, #20]
 800666e:	f7ff ffa9 	bl	80065c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006672:	e002      	b.n	800667a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006674:	6978      	ldr	r0, [r7, #20]
 8006676:	f7ff ff91 	bl	800659c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff ff8e 	bl	80065b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0203 	bic.w	r2, r2, #3
 80066b8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066be:	f043 0210 	orr.w	r2, r3, #16
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff ff78 	bl	80065c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff ff64 	bl	80065c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	4613      	mov	r3, r2
 8006712:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006714:	f7fb fcca 	bl	80020ac <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	4413      	add	r3, r2
 8006722:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006724:	f7fb fcc2 	bl	80020ac <HAL_GetTick>
 8006728:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800672a:	4b39      	ldr	r3, [pc, #228]	; (8006810 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	015b      	lsls	r3, r3, #5
 8006730:	0d1b      	lsrs	r3, r3, #20
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	fb02 f303 	mul.w	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673a:	e054      	b.n	80067e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006742:	d050      	beq.n	80067e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006744:	f7fb fcb2 	bl	80020ac <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	429a      	cmp	r2, r3
 8006752:	d902      	bls.n	800675a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d13d      	bne.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006768:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006772:	d111      	bne.n	8006798 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677c:	d004      	beq.n	8006788 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006786:	d107      	bne.n	8006798 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a0:	d10f      	bne.n	80067c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e017      	b.n	8006806 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	bf0c      	ite	eq
 80067f6:	2301      	moveq	r3, #1
 80067f8:	2300      	movne	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	429a      	cmp	r2, r3
 8006802:	d19b      	bne.n	800673c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2000002c 	.word	0x2000002c

08006814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006820:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <SPI_EndRxTxTransaction+0x7c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1b      	ldr	r2, [pc, #108]	; (8006894 <SPI_EndRxTxTransaction+0x80>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	0d5b      	lsrs	r3, r3, #21
 800682c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800683e:	d112      	bne.n	8006866 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2200      	movs	r2, #0
 8006848:	2180      	movs	r1, #128	; 0x80
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff ff5a 	bl	8006704 <SPI_WaitFlagStateUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d016      	beq.n	8006884 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e00f      	b.n	8006886 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3b01      	subs	r3, #1
 8006870:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b80      	cmp	r3, #128	; 0x80
 800687e:	d0f2      	beq.n	8006866 <SPI_EndRxTxTransaction+0x52>
 8006880:	e000      	b.n	8006884 <SPI_EndRxTxTransaction+0x70>
        break;
 8006882:	bf00      	nop
  }

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	2000002c 	.word	0x2000002c
 8006894:	165e9f81 	.word	0x165e9f81

08006898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e041      	b.n	800692e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fa fdf4 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 ff4c 	bl	8007774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	d001      	beq.n	8006950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e044      	b.n	80069da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697a:	d013      	beq.n	80069a4 <HAL_TIM_Base_Start_IT+0x6c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <HAL_TIM_Base_Start_IT+0xb4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_TIM_Base_Start_IT+0x6c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a16      	ldr	r2, [pc, #88]	; (80069f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d111      	bne.n	80069c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b06      	cmp	r3, #6
 80069b4:	d010      	beq.n	80069d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0201 	orr.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c6:	e007      	b.n	80069d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40014000 	.word	0x40014000

080069fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e041      	b.n	8006a92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f839 	bl	8006a9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f000 fe9a 	bl	8007774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <HAL_TIM_PWM_Start+0x24>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	e022      	b.n	8006b1a <HAL_TIM_PWM_Start+0x6a>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d109      	bne.n	8006aee <HAL_TIM_PWM_Start+0x3e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	bf14      	ite	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	2300      	moveq	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	e015      	b.n	8006b1a <HAL_TIM_PWM_Start+0x6a>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d109      	bne.n	8006b08 <HAL_TIM_PWM_Start+0x58>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	bf14      	ite	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	2300      	moveq	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	e008      	b.n	8006b1a <HAL_TIM_PWM_Start+0x6a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e068      	b.n	8006bf4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_TIM_PWM_Start+0x82>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b30:	e013      	b.n	8006b5a <HAL_TIM_PWM_Start+0xaa>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d104      	bne.n	8006b42 <HAL_TIM_PWM_Start+0x92>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b40:	e00b      	b.n	8006b5a <HAL_TIM_PWM_Start+0xaa>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d104      	bne.n	8006b52 <HAL_TIM_PWM_Start+0xa2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b50:	e003      	b.n	8006b5a <HAL_TIM_PWM_Start+0xaa>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 f9ca 	bl	8007efc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a23      	ldr	r2, [pc, #140]	; (8006bfc <HAL_TIM_PWM_Start+0x14c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d107      	bne.n	8006b82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <HAL_TIM_PWM_Start+0x14c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x10e>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b94:	d013      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x10e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <HAL_TIM_PWM_Start+0x150>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x10e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <HAL_TIM_PWM_Start+0x154>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x10e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <HAL_TIM_PWM_Start+0x158>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x10e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a14      	ldr	r2, [pc, #80]	; (8006c0c <HAL_TIM_PWM_Start+0x15c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d111      	bne.n	8006be2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b06      	cmp	r3, #6
 8006bce:	d010      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be0:	e007      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40010000 	.word	0x40010000
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	40000c00 	.word	0x40000c00
 8006c0c:	40014000 	.word	0x40014000

08006c10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e041      	b.n	8006ca6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f839 	bl	8006cae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f000 fd90 	bl	8007774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <HAL_TIM_IC_Start+0x1a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	e013      	b.n	8006d06 <HAL_TIM_IC_Start+0x42>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_IC_Start+0x2a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	e00b      	b.n	8006d06 <HAL_TIM_IC_Start+0x42>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_IC_Start+0x3a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	e003      	b.n	8006d06 <HAL_TIM_IC_Start+0x42>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d104      	bne.n	8006d18 <HAL_TIM_IC_Start+0x54>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	e013      	b.n	8006d40 <HAL_TIM_IC_Start+0x7c>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d104      	bne.n	8006d28 <HAL_TIM_IC_Start+0x64>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	e00b      	b.n	8006d40 <HAL_TIM_IC_Start+0x7c>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d104      	bne.n	8006d38 <HAL_TIM_IC_Start+0x74>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e003      	b.n	8006d40 <HAL_TIM_IC_Start+0x7c>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d102      	bne.n	8006d4e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d001      	beq.n	8006d52 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e077      	b.n	8006e42 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_IC_Start+0x9e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d60:	e013      	b.n	8006d8a <HAL_TIM_IC_Start+0xc6>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d104      	bne.n	8006d72 <HAL_TIM_IC_Start+0xae>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d70:	e00b      	b.n	8006d8a <HAL_TIM_IC_Start+0xc6>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d104      	bne.n	8006d82 <HAL_TIM_IC_Start+0xbe>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d80:	e003      	b.n	8006d8a <HAL_TIM_IC_Start+0xc6>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2202      	movs	r2, #2
 8006d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d104      	bne.n	8006d9a <HAL_TIM_IC_Start+0xd6>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d98:	e013      	b.n	8006dc2 <HAL_TIM_IC_Start+0xfe>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d104      	bne.n	8006daa <HAL_TIM_IC_Start+0xe6>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006da8:	e00b      	b.n	8006dc2 <HAL_TIM_IC_Start+0xfe>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d104      	bne.n	8006dba <HAL_TIM_IC_Start+0xf6>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db8:	e003      	b.n	8006dc2 <HAL_TIM_IC_Start+0xfe>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f001 f896 	bl	8007efc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a1d      	ldr	r2, [pc, #116]	; (8006e4c <HAL_TIM_IC_Start+0x188>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d018      	beq.n	8006e0c <HAL_TIM_IC_Start+0x148>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de2:	d013      	beq.n	8006e0c <HAL_TIM_IC_Start+0x148>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a19      	ldr	r2, [pc, #100]	; (8006e50 <HAL_TIM_IC_Start+0x18c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <HAL_TIM_IC_Start+0x148>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a18      	ldr	r2, [pc, #96]	; (8006e54 <HAL_TIM_IC_Start+0x190>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d009      	beq.n	8006e0c <HAL_TIM_IC_Start+0x148>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <HAL_TIM_IC_Start+0x194>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_IC_Start+0x148>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a15      	ldr	r2, [pc, #84]	; (8006e5c <HAL_TIM_IC_Start+0x198>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d111      	bne.n	8006e30 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b06      	cmp	r3, #6
 8006e1c:	d010      	beq.n	8006e40 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0201 	orr.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2e:	e007      	b.n	8006e40 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40014000 	.word	0x40014000

08006e60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e097      	b.n	8006fa4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7fa fabf 	bl	800140c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ea4:	f023 0307 	bic.w	r3, r3, #7
 8006ea8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f000 fc5d 	bl	8007774 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f00:	f023 030c 	bic.w	r3, r3, #12
 8006f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	021b      	lsls	r3, r3, #8
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	011a      	lsls	r2, r3, #4
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	031b      	lsls	r3, r3, #12
 8006f30:	4313      	orrs	r3, r2
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	4313      	orrs	r3, r2
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d110      	bne.n	8006ffe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d102      	bne.n	8006fe8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fe2:	7b7b      	ldrb	r3, [r7, #13]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d001      	beq.n	8006fec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e069      	b.n	80070c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ffc:	e031      	b.n	8007062 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d110      	bne.n	8007026 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d102      	bne.n	8007010 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800700a:	7b3b      	ldrb	r3, [r7, #12]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d001      	beq.n	8007014 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e055      	b.n	80070c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007024:	e01d      	b.n	8007062 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d108      	bne.n	800703e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d105      	bne.n	800703e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007032:	7b7b      	ldrb	r3, [r7, #13]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d102      	bne.n	800703e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007038:	7b3b      	ldrb	r3, [r7, #12]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d001      	beq.n	8007042 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e03e      	b.n	80070c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2202      	movs	r2, #2
 800704e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <HAL_TIM_Encoder_Start+0xc4>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b04      	cmp	r3, #4
 800706c:	d008      	beq.n	8007080 <HAL_TIM_Encoder_Start+0xd4>
 800706e:	e00f      	b.n	8007090 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2201      	movs	r2, #1
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f000 ff3f 	bl	8007efc <TIM_CCxChannelCmd>
      break;
 800707e:	e016      	b.n	80070ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	2104      	movs	r1, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f000 ff37 	bl	8007efc <TIM_CCxChannelCmd>
      break;
 800708e:	e00e      	b.n	80070ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2201      	movs	r2, #1
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f000 ff2f 	bl	8007efc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2201      	movs	r2, #1
 80070a4:	2104      	movs	r1, #4
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 ff28 	bl	8007efc <TIM_CCxChannelCmd>
      break;
 80070ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d122      	bne.n	8007124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d11b      	bne.n	8007124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0202 	mvn.w	r2, #2
 80070f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fb13 	bl	8007736 <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fb05 	bl	8007722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb16 	bl	800774a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b04      	cmp	r3, #4
 8007130:	d122      	bne.n	8007178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b04      	cmp	r3, #4
 800713e:	d11b      	bne.n	8007178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0204 	mvn.w	r2, #4
 8007148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fae9 	bl	8007736 <HAL_TIM_IC_CaptureCallback>
 8007164:	e005      	b.n	8007172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fadb 	bl	8007722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 faec 	bl	800774a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b08      	cmp	r3, #8
 8007184:	d122      	bne.n	80071cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b08      	cmp	r3, #8
 8007192:	d11b      	bne.n	80071cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0208 	mvn.w	r2, #8
 800719c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2204      	movs	r2, #4
 80071a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fabf 	bl	8007736 <HAL_TIM_IC_CaptureCallback>
 80071b8:	e005      	b.n	80071c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fab1 	bl	8007722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fac2 	bl	800774a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0310 	and.w	r3, r3, #16
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d122      	bne.n	8007220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b10      	cmp	r3, #16
 80071e6:	d11b      	bne.n	8007220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0210 	mvn.w	r2, #16
 80071f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2208      	movs	r2, #8
 80071f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa95 	bl	8007736 <HAL_TIM_IC_CaptureCallback>
 800720c:	e005      	b.n	800721a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa87 	bl	8007722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa98 	bl	800774a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b01      	cmp	r3, #1
 800722c:	d10e      	bne.n	800724c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	d107      	bne.n	800724c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0201 	mvn.w	r2, #1
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7f9 faf4 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b80      	cmp	r3, #128	; 0x80
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fee0 	bl	8008038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d10e      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800729c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fa5d 	bl	800775e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d10e      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d107      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0220 	mvn.w	r2, #32
 80072c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 feaa 	bl	8008024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e088      	b.n	8007408 <HAL_TIM_IC_ConfigChannel+0x130>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d11b      	bne.n	800733c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6819      	ldr	r1, [r3, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f000 fc3a 	bl	8007b8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 020c 	bic.w	r2, r2, #12
 8007326:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6999      	ldr	r1, [r3, #24]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	619a      	str	r2, [r3, #24]
 800733a:	e060      	b.n	80073fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b04      	cmp	r3, #4
 8007340:	d11c      	bne.n	800737c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f000 fcb2 	bl	8007cba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699a      	ldr	r2, [r3, #24]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007364:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6999      	ldr	r1, [r3, #24]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	021a      	lsls	r2, r3, #8
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	619a      	str	r2, [r3, #24]
 800737a:	e040      	b.n	80073fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b08      	cmp	r3, #8
 8007380:	d11b      	bne.n	80073ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6819      	ldr	r1, [r3, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f000 fcff 	bl	8007d94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 020c 	bic.w	r2, r2, #12
 80073a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69d9      	ldr	r1, [r3, #28]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	61da      	str	r2, [r3, #28]
 80073b8:	e021      	b.n	80073fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b0c      	cmp	r3, #12
 80073be:	d11c      	bne.n	80073fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6819      	ldr	r1, [r3, #0]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f000 fd1c 	bl	8007e0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	69da      	ldr	r2, [r3, #28]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80073e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69d9      	ldr	r1, [r3, #28]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	021a      	lsls	r2, r3, #8
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	61da      	str	r2, [r3, #28]
 80073f8:	e001      	b.n	80073fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800742a:	2302      	movs	r3, #2
 800742c:	e0ae      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b0c      	cmp	r3, #12
 800743a:	f200 809f 	bhi.w	800757c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007479 	.word	0x08007479
 8007448:	0800757d 	.word	0x0800757d
 800744c:	0800757d 	.word	0x0800757d
 8007450:	0800757d 	.word	0x0800757d
 8007454:	080074b9 	.word	0x080074b9
 8007458:	0800757d 	.word	0x0800757d
 800745c:	0800757d 	.word	0x0800757d
 8007460:	0800757d 	.word	0x0800757d
 8007464:	080074fb 	.word	0x080074fb
 8007468:	0800757d 	.word	0x0800757d
 800746c:	0800757d 	.word	0x0800757d
 8007470:	0800757d 	.word	0x0800757d
 8007474:	0800753b 	.word	0x0800753b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 f9f8 	bl	8007874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0208 	orr.w	r2, r2, #8
 8007492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0204 	bic.w	r2, r2, #4
 80074a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6999      	ldr	r1, [r3, #24]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	691a      	ldr	r2, [r3, #16]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	619a      	str	r2, [r3, #24]
      break;
 80074b6:	e064      	b.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68b9      	ldr	r1, [r7, #8]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fa3e 	bl	8007940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6999      	ldr	r1, [r3, #24]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	021a      	lsls	r2, r3, #8
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	619a      	str	r2, [r3, #24]
      break;
 80074f8:	e043      	b.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fa89 	bl	8007a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 0208 	orr.w	r2, r2, #8
 8007514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0204 	bic.w	r2, r2, #4
 8007524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69d9      	ldr	r1, [r3, #28]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	61da      	str	r2, [r3, #28]
      break;
 8007538:	e023      	b.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fad3 	bl	8007aec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69da      	ldr	r2, [r3, #28]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69d9      	ldr	r1, [r3, #28]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	021a      	lsls	r2, r3, #8
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	61da      	str	r2, [r3, #28]
      break;
 800757a:	e002      	b.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	75fb      	strb	r3, [r7, #23]
      break;
 8007580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIM_ConfigClockSource+0x1c>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e0b4      	b.n	800771a <HAL_TIM_ConfigClockSource+0x186>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e8:	d03e      	beq.n	8007668 <HAL_TIM_ConfigClockSource+0xd4>
 80075ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ee:	f200 8087 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f6:	f000 8086 	beq.w	8007706 <HAL_TIM_ConfigClockSource+0x172>
 80075fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fe:	d87f      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007600:	2b70      	cmp	r3, #112	; 0x70
 8007602:	d01a      	beq.n	800763a <HAL_TIM_ConfigClockSource+0xa6>
 8007604:	2b70      	cmp	r3, #112	; 0x70
 8007606:	d87b      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007608:	2b60      	cmp	r3, #96	; 0x60
 800760a:	d050      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x11a>
 800760c:	2b60      	cmp	r3, #96	; 0x60
 800760e:	d877      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007610:	2b50      	cmp	r3, #80	; 0x50
 8007612:	d03c      	beq.n	800768e <HAL_TIM_ConfigClockSource+0xfa>
 8007614:	2b50      	cmp	r3, #80	; 0x50
 8007616:	d873      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d058      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x13a>
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d86f      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007620:	2b30      	cmp	r3, #48	; 0x30
 8007622:	d064      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x15a>
 8007624:	2b30      	cmp	r3, #48	; 0x30
 8007626:	d86b      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007628:	2b20      	cmp	r3, #32
 800762a:	d060      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x15a>
 800762c:	2b20      	cmp	r3, #32
 800762e:	d867      	bhi.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d05c      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x15a>
 8007634:	2b10      	cmp	r3, #16
 8007636:	d05a      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x15a>
 8007638:	e062      	b.n	8007700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6899      	ldr	r1, [r3, #8]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f000 fc37 	bl	8007ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800765c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	609a      	str	r2, [r3, #8]
      break;
 8007666:	e04f      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	6899      	ldr	r1, [r3, #8]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f000 fc20 	bl	8007ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800768a:	609a      	str	r2, [r3, #8]
      break;
 800768c:	e03c      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6859      	ldr	r1, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	461a      	mov	r2, r3
 800769c:	f000 fade 	bl	8007c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2150      	movs	r1, #80	; 0x50
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fbed 	bl	8007e86 <TIM_ITRx_SetConfig>
      break;
 80076ac:	e02c      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6859      	ldr	r1, [r3, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f000 fb3a 	bl	8007d34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2160      	movs	r1, #96	; 0x60
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fbdd 	bl	8007e86 <TIM_ITRx_SetConfig>
      break;
 80076cc:	e01c      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	6859      	ldr	r1, [r3, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	461a      	mov	r2, r3
 80076dc:	f000 fabe 	bl	8007c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2140      	movs	r1, #64	; 0x40
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fbcd 	bl	8007e86 <TIM_ITRx_SetConfig>
      break;
 80076ec:	e00c      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f000 fbc4 	bl	8007e86 <TIM_ITRx_SetConfig>
      break;
 80076fe:	e003      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
      break;
 8007704:	e000      	b.n	8007708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
	...

08007774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a34      	ldr	r2, [pc, #208]	; (8007858 <TIM_Base_SetConfig+0xe4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00f      	beq.n	80077ac <TIM_Base_SetConfig+0x38>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007792:	d00b      	beq.n	80077ac <TIM_Base_SetConfig+0x38>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a31      	ldr	r2, [pc, #196]	; (800785c <TIM_Base_SetConfig+0xe8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d007      	beq.n	80077ac <TIM_Base_SetConfig+0x38>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a30      	ldr	r2, [pc, #192]	; (8007860 <TIM_Base_SetConfig+0xec>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_Base_SetConfig+0x38>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a2f      	ldr	r2, [pc, #188]	; (8007864 <TIM_Base_SetConfig+0xf0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d108      	bne.n	80077be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a25      	ldr	r2, [pc, #148]	; (8007858 <TIM_Base_SetConfig+0xe4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01b      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077cc:	d017      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a22      	ldr	r2, [pc, #136]	; (800785c <TIM_Base_SetConfig+0xe8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a21      	ldr	r2, [pc, #132]	; (8007860 <TIM_Base_SetConfig+0xec>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a20      	ldr	r2, [pc, #128]	; (8007864 <TIM_Base_SetConfig+0xf0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <TIM_Base_SetConfig+0xf4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1e      	ldr	r2, [pc, #120]	; (800786c <TIM_Base_SetConfig+0xf8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a1d      	ldr	r2, [pc, #116]	; (8007870 <TIM_Base_SetConfig+0xfc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d108      	bne.n	8007810 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a08      	ldr	r2, [pc, #32]	; (8007858 <TIM_Base_SetConfig+0xe4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d103      	bne.n	8007844 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	615a      	str	r2, [r3, #20]
}
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	40010000 	.word	0x40010000
 800785c:	40000400 	.word	0x40000400
 8007860:	40000800 	.word	0x40000800
 8007864:	40000c00 	.word	0x40000c00
 8007868:	40014000 	.word	0x40014000
 800786c:	40014400 	.word	0x40014400
 8007870:	40014800 	.word	0x40014800

08007874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f023 0201 	bic.w	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0303 	bic.w	r3, r3, #3
 80078aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f023 0302 	bic.w	r3, r3, #2
 80078bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a1c      	ldr	r2, [pc, #112]	; (800793c <TIM_OC1_SetConfig+0xc8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10c      	bne.n	80078ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f023 0308 	bic.w	r3, r3, #8
 80078d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4313      	orrs	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f023 0304 	bic.w	r3, r3, #4
 80078e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a13      	ldr	r2, [pc, #76]	; (800793c <TIM_OC1_SetConfig+0xc8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d111      	bne.n	8007916 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	621a      	str	r2, [r3, #32]
}
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	40010000 	.word	0x40010000

08007940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f023 0210 	bic.w	r2, r3, #16
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0320 	bic.w	r3, r3, #32
 800798a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <TIM_OC2_SetConfig+0xd4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d10d      	bne.n	80079bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a15      	ldr	r2, [pc, #84]	; (8007a14 <TIM_OC2_SetConfig+0xd4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d113      	bne.n	80079ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000

08007a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <TIM_OC3_SetConfig+0xd0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d10d      	bne.n	8007a92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <TIM_OC3_SetConfig+0xd0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d113      	bne.n	8007ac2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	621a      	str	r2, [r3, #32]
}
 8007adc:	bf00      	nop
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40010000 	.word	0x40010000

08007aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	031b      	lsls	r3, r3, #12
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a10      	ldr	r2, [pc, #64]	; (8007b88 <TIM_OC4_SetConfig+0x9c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d109      	bne.n	8007b60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	019b      	lsls	r3, r3, #6
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	621a      	str	r2, [r3, #32]
}
 8007b7a:	bf00      	nop
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000

08007b8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	f023 0201 	bic.w	r2, r3, #1
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4a24      	ldr	r2, [pc, #144]	; (8007c48 <TIM_TI1_SetConfig+0xbc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d013      	beq.n	8007be2 <TIM_TI1_SetConfig+0x56>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc0:	d00f      	beq.n	8007be2 <TIM_TI1_SetConfig+0x56>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <TIM_TI1_SetConfig+0xc0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00b      	beq.n	8007be2 <TIM_TI1_SetConfig+0x56>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <TIM_TI1_SetConfig+0xc4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d007      	beq.n	8007be2 <TIM_TI1_SetConfig+0x56>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <TIM_TI1_SetConfig+0xc8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d003      	beq.n	8007be2 <TIM_TI1_SetConfig+0x56>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <TIM_TI1_SetConfig+0xcc>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d101      	bne.n	8007be6 <TIM_TI1_SetConfig+0x5a>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <TIM_TI1_SetConfig+0x5c>
 8007be6:	2300      	movs	r3, #0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e003      	b.n	8007c06 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f043 0301 	orr.w	r3, r3, #1
 8007c04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f023 030a 	bic.w	r3, r3, #10
 8007c20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f003 030a 	and.w	r3, r3, #10
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	40000c00 	.word	0x40000c00
 8007c58:	40014000 	.word	0x40014000

08007c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f023 0201 	bic.w	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f023 030a 	bic.w	r3, r3, #10
 8007c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	621a      	str	r2, [r3, #32]
}
 8007cae:	bf00      	nop
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b087      	sub	sp, #28
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
 8007cc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	f023 0210 	bic.w	r2, r3, #16
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	031b      	lsls	r3, r3, #12
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	621a      	str	r2, [r3, #32]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f023 0210 	bic.w	r2, r3, #16
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	031b      	lsls	r3, r3, #12
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	011b      	lsls	r3, r3, #4
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	621a      	str	r2, [r3, #32]
}
 8007d88:	bf00      	nop
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f023 0303 	bic.w	r3, r3, #3
 8007dc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007de4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	621a      	str	r2, [r3, #32]
}
 8007e00:	bf00      	nop
 8007e02:	371c      	adds	r7, #28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	031b      	lsls	r3, r3, #12
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007e5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	031b      	lsls	r3, r3, #12
 8007e64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	621a      	str	r2, [r3, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f043 0307 	orr.w	r3, r3, #7
 8007ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	609a      	str	r2, [r3, #8]
}
 8007eb0:	bf00      	nop
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	021a      	lsls	r2, r3, #8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	609a      	str	r2, [r3, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f003 031f 	and.w	r3, r3, #31
 8007f0e:	2201      	movs	r2, #1
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	43db      	mvns	r3, r3
 8007f1e:	401a      	ands	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a1a      	ldr	r2, [r3, #32]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f003 031f 	and.w	r3, r3, #31
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	fa01 f303 	lsl.w	r3, r1, r3
 8007f34:	431a      	orrs	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	621a      	str	r2, [r3, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
	...

08007f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e050      	b.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a1c      	ldr	r2, [pc, #112]	; (8008010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d018      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fac:	d013      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a18      	ldr	r2, [pc, #96]	; (8008014 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a16      	ldr	r2, [pc, #88]	; (8008018 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d009      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a15      	ldr	r2, [pc, #84]	; (800801c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a13      	ldr	r2, [pc, #76]	; (8008020 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d10c      	bne.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40010000 	.word	0x40010000
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800
 800801c:	40000c00 	.word	0x40000c00
 8008020:	40014000 	.word	0x40014000

08008024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800804c:	b084      	sub	sp, #16
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	f107 001c 	add.w	r0, r7, #28
 800805a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	2b01      	cmp	r3, #1
 8008062:	d122      	bne.n	80080aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800808c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800808e:	2b01      	cmp	r3, #1
 8008090:	d105      	bne.n	800809e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 fbee 	bl	8009880 <USB_CoreReset>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
 80080a8:	e01a      	b.n	80080e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 fbe2 	bl	8009880 <USB_CoreReset>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	639a      	str	r2, [r3, #56]	; 0x38
 80080d2:	e005      	b.n	80080e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10b      	bne.n	80080fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f043 0206 	orr.w	r2, r3, #6
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f043 0220 	orr.w	r2, r3, #32
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800810a:	b004      	add	sp, #16
 800810c:	4770      	bx	lr
	...

08008110 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	2b02      	cmp	r3, #2
 8008122:	d165      	bne.n	80081f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4a41      	ldr	r2, [pc, #260]	; (800822c <USB_SetTurnaroundTime+0x11c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d906      	bls.n	800813a <USB_SetTurnaroundTime+0x2a>
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4a40      	ldr	r2, [pc, #256]	; (8008230 <USB_SetTurnaroundTime+0x120>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d202      	bcs.n	800813a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008134:	230f      	movs	r3, #15
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e062      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	4a3c      	ldr	r2, [pc, #240]	; (8008230 <USB_SetTurnaroundTime+0x120>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d306      	bcc.n	8008150 <USB_SetTurnaroundTime+0x40>
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	4a3b      	ldr	r2, [pc, #236]	; (8008234 <USB_SetTurnaroundTime+0x124>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d202      	bcs.n	8008150 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800814a:	230e      	movs	r3, #14
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	e057      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4a38      	ldr	r2, [pc, #224]	; (8008234 <USB_SetTurnaroundTime+0x124>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d306      	bcc.n	8008166 <USB_SetTurnaroundTime+0x56>
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4a37      	ldr	r2, [pc, #220]	; (8008238 <USB_SetTurnaroundTime+0x128>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d202      	bcs.n	8008166 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008160:	230d      	movs	r3, #13
 8008162:	617b      	str	r3, [r7, #20]
 8008164:	e04c      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	4a33      	ldr	r2, [pc, #204]	; (8008238 <USB_SetTurnaroundTime+0x128>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d306      	bcc.n	800817c <USB_SetTurnaroundTime+0x6c>
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4a32      	ldr	r2, [pc, #200]	; (800823c <USB_SetTurnaroundTime+0x12c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d802      	bhi.n	800817c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008176:	230c      	movs	r3, #12
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	e041      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	4a2f      	ldr	r2, [pc, #188]	; (800823c <USB_SetTurnaroundTime+0x12c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d906      	bls.n	8008192 <USB_SetTurnaroundTime+0x82>
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4a2e      	ldr	r2, [pc, #184]	; (8008240 <USB_SetTurnaroundTime+0x130>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d802      	bhi.n	8008192 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800818c:	230b      	movs	r3, #11
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	e036      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	4a2a      	ldr	r2, [pc, #168]	; (8008240 <USB_SetTurnaroundTime+0x130>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d906      	bls.n	80081a8 <USB_SetTurnaroundTime+0x98>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4a29      	ldr	r2, [pc, #164]	; (8008244 <USB_SetTurnaroundTime+0x134>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d802      	bhi.n	80081a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081a2:	230a      	movs	r3, #10
 80081a4:	617b      	str	r3, [r7, #20]
 80081a6:	e02b      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	4a26      	ldr	r2, [pc, #152]	; (8008244 <USB_SetTurnaroundTime+0x134>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d906      	bls.n	80081be <USB_SetTurnaroundTime+0xae>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4a25      	ldr	r2, [pc, #148]	; (8008248 <USB_SetTurnaroundTime+0x138>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d202      	bcs.n	80081be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081b8:	2309      	movs	r3, #9
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e020      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	4a21      	ldr	r2, [pc, #132]	; (8008248 <USB_SetTurnaroundTime+0x138>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d306      	bcc.n	80081d4 <USB_SetTurnaroundTime+0xc4>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4a20      	ldr	r2, [pc, #128]	; (800824c <USB_SetTurnaroundTime+0x13c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d802      	bhi.n	80081d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081ce:	2308      	movs	r3, #8
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e015      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4a1d      	ldr	r2, [pc, #116]	; (800824c <USB_SetTurnaroundTime+0x13c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d906      	bls.n	80081ea <USB_SetTurnaroundTime+0xda>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4a1c      	ldr	r2, [pc, #112]	; (8008250 <USB_SetTurnaroundTime+0x140>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d202      	bcs.n	80081ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081e4:	2307      	movs	r3, #7
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	e00a      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80081ea:	2306      	movs	r3, #6
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	e007      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80081f6:	2309      	movs	r3, #9
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e001      	b.n	8008200 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80081fc:	2309      	movs	r3, #9
 80081fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	029b      	lsls	r3, r3, #10
 8008214:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008218:	431a      	orrs	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	371c      	adds	r7, #28
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	00d8acbf 	.word	0x00d8acbf
 8008230:	00e4e1c0 	.word	0x00e4e1c0
 8008234:	00f42400 	.word	0x00f42400
 8008238:	01067380 	.word	0x01067380
 800823c:	011a499f 	.word	0x011a499f
 8008240:	01312cff 	.word	0x01312cff
 8008244:	014ca43f 	.word	0x014ca43f
 8008248:	016e3600 	.word	0x016e3600
 800824c:	01a6ab1f 	.word	0x01a6ab1f
 8008250:	01e84800 	.word	0x01e84800

08008254 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f043 0201 	orr.w	r2, r3, #1
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f023 0201 	bic.w	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d115      	bne.n	80082e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082c6:	2001      	movs	r0, #1
 80082c8:	f7f9 fefc 	bl	80020c4 <HAL_Delay>
      ms++;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3301      	adds	r3, #1
 80082d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fa45 	bl	8009762 <USB_GetMode>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d01e      	beq.n	800831c <USB_SetCurrentMode+0x84>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b31      	cmp	r3, #49	; 0x31
 80082e2:	d9f0      	bls.n	80082c6 <USB_SetCurrentMode+0x2e>
 80082e4:	e01a      	b.n	800831c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d115      	bne.n	8008318 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082f8:	2001      	movs	r0, #1
 80082fa:	f7f9 fee3 	bl	80020c4 <HAL_Delay>
      ms++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 fa2c 	bl	8009762 <USB_GetMode>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <USB_SetCurrentMode+0x84>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b31      	cmp	r3, #49	; 0x31
 8008314:	d9f0      	bls.n	80082f8 <USB_SetCurrentMode+0x60>
 8008316:	e001      	b.n	800831c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e005      	b.n	8008328 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b32      	cmp	r3, #50	; 0x32
 8008320:	d101      	bne.n	8008326 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008330:	b084      	sub	sp, #16
 8008332:	b580      	push	{r7, lr}
 8008334:	b086      	sub	sp, #24
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800833e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800834a:	2300      	movs	r3, #0
 800834c:	613b      	str	r3, [r7, #16]
 800834e:	e009      	b.n	8008364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3340      	adds	r3, #64	; 0x40
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	2200      	movs	r2, #0
 800835c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	3301      	adds	r3, #1
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b0e      	cmp	r3, #14
 8008368:	d9f2      	bls.n	8008350 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800836a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d11c      	bne.n	80083aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800837e:	f043 0302 	orr.w	r3, r3, #2
 8008382:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	639a      	str	r2, [r3, #56]	; 0x38
 80083a8:	e00b      	b.n	80083c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c8:	461a      	mov	r2, r3
 80083ca:	2300      	movs	r3, #0
 80083cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d4:	4619      	mov	r1, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083dc:	461a      	mov	r2, r3
 80083de:	680b      	ldr	r3, [r1, #0]
 80083e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d10c      	bne.n	8008402 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d104      	bne.n	80083f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f965 	bl	80086c0 <USB_SetDevSpeed>
 80083f6:	e008      	b.n	800840a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083f8:	2101      	movs	r1, #1
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f960 	bl	80086c0 <USB_SetDevSpeed>
 8008400:	e003      	b.n	800840a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008402:	2103      	movs	r1, #3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f95b 	bl	80086c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800840a:	2110      	movs	r1, #16
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f8f3 	bl	80085f8 <USB_FlushTxFifo>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f91f 	bl	8008660 <USB_FlushRxFifo>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008432:	461a      	mov	r2, r3
 8008434:	2300      	movs	r3, #0
 8008436:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	461a      	mov	r2, r3
 8008440:	2300      	movs	r3, #0
 8008442:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844a:	461a      	mov	r2, r3
 800844c:	2300      	movs	r3, #0
 800844e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008450:	2300      	movs	r3, #0
 8008452:	613b      	str	r3, [r7, #16]
 8008454:	e043      	b.n	80084de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800846c:	d118      	bne.n	80084a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008480:	461a      	mov	r2, r3
 8008482:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e013      	b.n	80084b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	461a      	mov	r2, r3
 8008498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	e008      	b.n	80084b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ac:	461a      	mov	r2, r3
 80084ae:	2300      	movs	r3, #0
 80084b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084be:	461a      	mov	r2, r3
 80084c0:	2300      	movs	r3, #0
 80084c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d0:	461a      	mov	r2, r3
 80084d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3301      	adds	r3, #1
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d3b7      	bcc.n	8008456 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084e6:	2300      	movs	r3, #0
 80084e8:	613b      	str	r3, [r7, #16]
 80084ea:	e043      	b.n	8008574 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008502:	d118      	bne.n	8008536 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10a      	bne.n	8008520 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	4413      	add	r3, r2
 8008512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008516:	461a      	mov	r2, r3
 8008518:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	e013      	b.n	8008548 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	461a      	mov	r2, r3
 800852e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	e008      	b.n	8008548 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008542:	461a      	mov	r2, r3
 8008544:	2300      	movs	r3, #0
 8008546:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008554:	461a      	mov	r2, r3
 8008556:	2300      	movs	r3, #0
 8008558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	461a      	mov	r2, r3
 8008568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800856c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	3301      	adds	r3, #1
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	429a      	cmp	r2, r3
 800857a:	d3b7      	bcc.n	80084ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800858a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800858e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800859c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d105      	bne.n	80085b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	f043 0210 	orr.w	r2, r3, #16
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699a      	ldr	r2, [r3, #24]
 80085b4:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <USB_DevInit+0x2c4>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f043 0208 	orr.w	r2, r3, #8
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d107      	bne.n	80085e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085dc:	f043 0304 	orr.w	r3, r3, #4
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085f0:	b004      	add	sp, #16
 80085f2:	4770      	bx	lr
 80085f4:	803c3800 	.word	0x803c3800

080085f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3301      	adds	r3, #1
 800860a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4a13      	ldr	r2, [pc, #76]	; (800865c <USB_FlushTxFifo+0x64>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d901      	bls.n	8008618 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e01b      	b.n	8008650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	daf2      	bge.n	8008606 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	019b      	lsls	r3, r3, #6
 8008628:	f043 0220 	orr.w	r2, r3, #32
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4a08      	ldr	r2, [pc, #32]	; (800865c <USB_FlushTxFifo+0x64>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e006      	b.n	8008650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b20      	cmp	r3, #32
 800864c:	d0f0      	beq.n	8008630 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	00030d40 	.word	0x00030d40

08008660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4a11      	ldr	r2, [pc, #68]	; (80086bc <USB_FlushRxFifo+0x5c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d901      	bls.n	800867e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e018      	b.n	80086b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	daf2      	bge.n	800866c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2210      	movs	r2, #16
 800868e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4a08      	ldr	r2, [pc, #32]	; (80086bc <USB_FlushRxFifo+0x5c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d901      	bls.n	80086a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e006      	b.n	80086b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f003 0310 	and.w	r3, r3, #16
 80086aa:	2b10      	cmp	r3, #16
 80086ac:	d0f0      	beq.n	8008690 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	00030d40 	.word	0x00030d40

080086c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e0:	4313      	orrs	r3, r2
 80086e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b087      	sub	sp, #28
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 0306 	and.w	r3, r3, #6
 800870a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]
 8008716:	e00a      	b.n	800872e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b02      	cmp	r3, #2
 800871c:	d002      	beq.n	8008724 <USB_GetDevSpeed+0x32>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b06      	cmp	r3, #6
 8008722:	d102      	bne.n	800872a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008724:	2302      	movs	r3, #2
 8008726:	75fb      	strb	r3, [r7, #23]
 8008728:	e001      	b.n	800872e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800872a:	230f      	movs	r3, #15
 800872c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008730:	4618      	mov	r0, r3
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	785b      	ldrb	r3, [r3, #1]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d13a      	bne.n	80087ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875e:	69da      	ldr	r2, [r3, #28]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	2101      	movs	r1, #1
 800876a:	fa01 f303 	lsl.w	r3, r1, r3
 800876e:	b29b      	uxth	r3, r3
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008776:	4313      	orrs	r3, r2
 8008778:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d155      	bne.n	800883c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	791b      	ldrb	r3, [r3, #4]
 80087aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	059b      	lsls	r3, r3, #22
 80087b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087b4:	4313      	orrs	r3, r2
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	0151      	lsls	r1, r2, #5
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	440a      	add	r2, r1
 80087be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	e036      	b.n	800883c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d4:	69da      	ldr	r2, [r3, #28]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	2101      	movs	r1, #1
 80087e0:	fa01 f303 	lsl.w	r3, r1, r3
 80087e4:	041b      	lsls	r3, r3, #16
 80087e6:	68f9      	ldr	r1, [r7, #12]
 80087e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087ec:	4313      	orrs	r3, r2
 80087ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d11a      	bne.n	800883c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	791b      	ldrb	r3, [r3, #4]
 8008820:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008822:	430b      	orrs	r3, r1
 8008824:	4313      	orrs	r3, r2
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	0151      	lsls	r1, r2, #5
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	440a      	add	r2, r1
 800882e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800883a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d161      	bne.n	800892c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800887a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887e:	d11f      	bne.n	80088c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800889a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800889e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	0151      	lsls	r1, r2, #5
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	440a      	add	r2, r1
 80088b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	2101      	movs	r1, #1
 80088d2:	fa01 f303 	lsl.w	r3, r1, r3
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	43db      	mvns	r3, r3
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e0:	4013      	ands	r3, r2
 80088e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ea:	69da      	ldr	r2, [r3, #28]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	2101      	movs	r1, #1
 80088f6:	fa01 f303 	lsl.w	r3, r1, r3
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	43db      	mvns	r3, r3
 80088fe:	68f9      	ldr	r1, [r7, #12]
 8008900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008904:	4013      	ands	r3, r2
 8008906:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	0159      	lsls	r1, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	440b      	add	r3, r1
 800891e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008922:	4619      	mov	r1, r3
 8008924:	4b35      	ldr	r3, [pc, #212]	; (80089fc <USB_DeactivateEndpoint+0x1b0>)
 8008926:	4013      	ands	r3, r2
 8008928:	600b      	str	r3, [r1, #0]
 800892a:	e060      	b.n	80089ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800893e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008942:	d11f      	bne.n	8008984 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	0151      	lsls	r1, r2, #5
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	440a      	add	r2, r1
 800895a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800895e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008962:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	4413      	add	r3, r2
 800896c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	0151      	lsls	r1, r2, #5
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	440a      	add	r2, r1
 800897a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800897e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008982:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f003 030f 	and.w	r3, r3, #15
 8008994:	2101      	movs	r1, #1
 8008996:	fa01 f303 	lsl.w	r3, r1, r3
 800899a:	041b      	lsls	r3, r3, #16
 800899c:	43db      	mvns	r3, r3
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a4:	4013      	ands	r3, r2
 80089a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	2101      	movs	r1, #1
 80089ba:	fa01 f303 	lsl.w	r3, r1, r3
 80089be:	041b      	lsls	r3, r3, #16
 80089c0:	43db      	mvns	r3, r3
 80089c2:	68f9      	ldr	r1, [r7, #12]
 80089c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c8:	4013      	ands	r3, r2
 80089ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	0159      	lsls	r1, r3, #5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	440b      	add	r3, r1
 80089e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e6:	4619      	mov	r1, r3
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <USB_DeactivateEndpoint+0x1b4>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	ec337800 	.word	0xec337800
 8008a00:	eff37800 	.word	0xeff37800

08008a04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	; 0x28
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	f040 815c 	bne.w	8008cde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d132      	bne.n	8008a94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	69fa      	ldr	r2, [r7, #28]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8c:	0cdb      	lsrs	r3, r3, #19
 8008a8e:	04db      	lsls	r3, r3, #19
 8008a90:	6113      	str	r3, [r2, #16]
 8008a92:	e074      	b.n	8008b7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aae:	0cdb      	lsrs	r3, r3, #19
 8008ab0:	04db      	lsls	r3, r3, #19
 8008ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ace:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ad2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ad6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6999      	ldr	r1, [r3, #24]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	440b      	add	r3, r1
 8008af0:	1e59      	subs	r1, r3, #1
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008afa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008afc:	4b9d      	ldr	r3, [pc, #628]	; (8008d74 <USB_EPStartXfer+0x370>)
 8008afe:	400b      	ands	r3, r1
 8008b00:	69b9      	ldr	r1, [r7, #24]
 8008b02:	0148      	lsls	r0, r1, #5
 8008b04:	69f9      	ldr	r1, [r7, #28]
 8008b06:	4401      	add	r1, r0
 8008b08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	0148      	lsls	r0, r1, #5
 8008b2a:	69f9      	ldr	r1, [r7, #28]
 8008b2c:	4401      	add	r1, r0
 8008b2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b32:	4313      	orrs	r3, r2
 8008b34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	791b      	ldrb	r3, [r3, #4]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d11f      	bne.n	8008b7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008b5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d14b      	bne.n	8008c1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d009      	beq.n	8008ba0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b98:	461a      	mov	r2, r3
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	791b      	ldrb	r3, [r3, #4]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d128      	bne.n	8008bfa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d110      	bne.n	8008bda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	e00f      	b.n	8008bfa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	0151      	lsls	r1, r2, #5
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	440a      	add	r2, r1
 8008c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e133      	b.n	8008e84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	0151      	lsls	r1, r2, #5
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	440a      	add	r2, r1
 8008c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	791b      	ldrb	r3, [r3, #4]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d015      	beq.n	8008c70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 811b 	beq.w	8008e84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	2101      	movs	r1, #1
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	69f9      	ldr	r1, [r7, #28]
 8008c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	634b      	str	r3, [r1, #52]	; 0x34
 8008c6e:	e109      	b.n	8008e84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d110      	bne.n	8008ca2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	0151      	lsls	r1, r2, #5
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	440a      	add	r2, r1
 8008c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	e00f      	b.n	8008cc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	6919      	ldr	r1, [r3, #16]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	b298      	uxth	r0, r3
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fade 	bl	8009298 <USB_WritePacket>
 8008cdc:	e0d2      	b.n	8008e84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf8:	0cdb      	lsrs	r3, r3, #19
 8008cfa:	04db      	lsls	r3, r3, #19
 8008cfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d126      	bne.n	8008d78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d40:	69b9      	ldr	r1, [r7, #24]
 8008d42:	0148      	lsls	r0, r1, #5
 8008d44:	69f9      	ldr	r1, [r7, #28]
 8008d46:	4401      	add	r1, r0
 8008d48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d6e:	6113      	str	r3, [r2, #16]
 8008d70:	e03a      	b.n	8008de8 <USB_EPStartXfer+0x3e4>
 8008d72:	bf00      	nop
 8008d74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	699a      	ldr	r2, [r3, #24]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	4413      	add	r3, r2
 8008d82:	1e5a      	subs	r2, r3, #1
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	8afa      	ldrh	r2, [r7, #22]
 8008d94:	fb03 f202 	mul.w	r2, r3, r2
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da8:	691a      	ldr	r2, [r3, #16]
 8008daa:	8afb      	ldrh	r3, [r7, #22]
 8008dac:	04d9      	lsls	r1, r3, #19
 8008dae:	4b38      	ldr	r3, [pc, #224]	; (8008e90 <USB_EPStartXfer+0x48c>)
 8008db0:	400b      	ands	r3, r1
 8008db2:	69b9      	ldr	r1, [r7, #24]
 8008db4:	0148      	lsls	r0, r1, #5
 8008db6:	69f9      	ldr	r1, [r7, #28]
 8008db8:	4401      	add	r1, r0
 8008dba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dce:	691a      	ldr	r2, [r3, #16]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dd8:	69b9      	ldr	r1, [r7, #24]
 8008dda:	0148      	lsls	r0, r1, #5
 8008ddc:	69f9      	ldr	r1, [r7, #28]
 8008dde:	4401      	add	r1, r0
 8008de0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008de4:	4313      	orrs	r3, r2
 8008de6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d10d      	bne.n	8008e0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6919      	ldr	r1, [r3, #16]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e06:	460a      	mov	r2, r1
 8008e08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	791b      	ldrb	r3, [r3, #4]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d128      	bne.n	8008e64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d110      	bne.n	8008e44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	69fa      	ldr	r2, [r7, #28]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e00f      	b.n	8008e64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	0151      	lsls	r1, r2, #5
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	440a      	add	r2, r1
 8008e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	1ff80000 	.word	0x1ff80000

08008e94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	f040 80ce 	bne.w	8009052 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d132      	bne.n	8008f24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	0151      	lsls	r1, r2, #5
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008edc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	0151      	lsls	r1, r2, #5
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	440a      	add	r2, r1
 8008ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	0151      	lsls	r1, r2, #5
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	440a      	add	r2, r1
 8008f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1c:	0cdb      	lsrs	r3, r3, #19
 8008f1e:	04db      	lsls	r3, r3, #19
 8008f20:	6113      	str	r3, [r2, #16]
 8008f22:	e04e      	b.n	8008fc2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3e:	0cdb      	lsrs	r3, r3, #19
 8008f40:	04db      	lsls	r3, r3, #19
 8008f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d903      	bls.n	8008f7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	0151      	lsls	r1, r2, #5
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	440a      	add	r2, r1
 8008f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	691a      	ldr	r2, [r3, #16]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fb2:	6939      	ldr	r1, [r7, #16]
 8008fb4:	0148      	lsls	r0, r1, #5
 8008fb6:	6979      	ldr	r1, [r7, #20]
 8008fb8:	4401      	add	r1, r0
 8008fba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d11e      	bne.n	8009006 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d009      	beq.n	8008fe4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fdc:	461a      	mov	r2, r3
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	e097      	b.n	8009136 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009020:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009024:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 8083 	beq.w	8009136 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	2101      	movs	r1, #1
 8009042:	fa01 f303 	lsl.w	r3, r1, r3
 8009046:	6979      	ldr	r1, [r7, #20]
 8009048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800904c:	4313      	orrs	r3, r2
 800904e:	634b      	str	r3, [r1, #52]	; 0x34
 8009050:	e071      	b.n	8009136 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	0151      	lsls	r1, r2, #5
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	440a      	add	r2, r1
 8009068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800906c:	0cdb      	lsrs	r3, r3, #19
 800906e:	04db      	lsls	r3, r3, #19
 8009070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	4413      	add	r3, r2
 800907a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	0151      	lsls	r1, r2, #5
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	440a      	add	r2, r1
 8009088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800908c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009094:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090e4:	6939      	ldr	r1, [r7, #16]
 80090e6:	0148      	lsls	r0, r1, #5
 80090e8:	6979      	ldr	r1, [r7, #20]
 80090ea:	4401      	add	r1, r0
 80090ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090f0:	4313      	orrs	r3, r2
 80090f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d10d      	bne.n	8009116 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d009      	beq.n	8009116 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	6919      	ldr	r1, [r3, #16]
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009112:	460a      	mov	r2, r1
 8009114:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	440a      	add	r2, r1
 800912c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009130:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009134:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	371c      	adds	r7, #28
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	785b      	ldrb	r3, [r3, #1]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d14a      	bne.n	80091f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800917a:	f040 8086 	bne.w	800928a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	7812      	ldrb	r2, [r2, #0]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	440a      	add	r2, r1
 8009198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800919c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	7812      	ldrb	r2, [r2, #0]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	3301      	adds	r3, #1
 80091ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d902      	bls.n	80091dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
          break;
 80091da:	e056      	b.n	800928a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091f4:	d0e7      	beq.n	80091c6 <USB_EPStopXfer+0x82>
 80091f6:	e048      	b.n	800928a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800920c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009210:	d13b      	bne.n	800928a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	7812      	ldrb	r2, [r2, #0]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	440a      	add	r2, r1
 800922c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009230:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009234:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	7812      	ldrb	r2, [r2, #0]
 800924a:	0151      	lsls	r1, r2, #5
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	440a      	add	r2, r1
 8009250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009258:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3301      	adds	r3, #1
 800925e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f242 7210 	movw	r2, #10000	; 0x2710
 8009266:	4293      	cmp	r3, r2
 8009268:	d902      	bls.n	8009270 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	75fb      	strb	r3, [r7, #23]
          break;
 800926e:	e00c      	b.n	800928a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	4413      	add	r3, r2
 800927a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009288:	d0e7      	beq.n	800925a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800928a:	7dfb      	ldrb	r3, [r7, #23]
}
 800928c:	4618      	mov	r0, r3
 800928e:	371c      	adds	r7, #28
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009298:	b480      	push	{r7}
 800929a:	b089      	sub	sp, #36	; 0x24
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4611      	mov	r1, r2
 80092a4:	461a      	mov	r2, r3
 80092a6:	460b      	mov	r3, r1
 80092a8:	71fb      	strb	r3, [r7, #7]
 80092aa:	4613      	mov	r3, r2
 80092ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80092b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d123      	bne.n	8009306 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092be:	88bb      	ldrh	r3, [r7, #4]
 80092c0:	3303      	adds	r3, #3
 80092c2:	089b      	lsrs	r3, r3, #2
 80092c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092c6:	2300      	movs	r3, #0
 80092c8:	61bb      	str	r3, [r7, #24]
 80092ca:	e018      	b.n	80092fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	031a      	lsls	r2, r3, #12
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d8:	461a      	mov	r2, r3
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	3301      	adds	r3, #1
 80092e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	3301      	adds	r3, #1
 80092ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	3301      	adds	r3, #1
 80092f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	3301      	adds	r3, #1
 80092f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	3301      	adds	r3, #1
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	429a      	cmp	r2, r3
 8009304:	d3e2      	bcc.n	80092cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3724      	adds	r7, #36	; 0x24
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009314:	b480      	push	{r7}
 8009316:	b08b      	sub	sp, #44	; 0x2c
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800932a:	88fb      	ldrh	r3, [r7, #6]
 800932c:	089b      	lsrs	r3, r3, #2
 800932e:	b29b      	uxth	r3, r3
 8009330:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009332:	88fb      	ldrh	r3, [r7, #6]
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800933a:	2300      	movs	r3, #0
 800933c:	623b      	str	r3, [r7, #32]
 800933e:	e014      	b.n	800936a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	601a      	str	r2, [r3, #0]
    pDest++;
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	3301      	adds	r3, #1
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	3301      	adds	r3, #1
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	3301      	adds	r3, #1
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	3301      	adds	r3, #1
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	3301      	adds	r3, #1
 8009368:	623b      	str	r3, [r7, #32]
 800936a:	6a3a      	ldr	r2, [r7, #32]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	429a      	cmp	r2, r3
 8009370:	d3e6      	bcc.n	8009340 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009372:	8bfb      	ldrh	r3, [r7, #30]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01e      	beq.n	80093b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009382:	461a      	mov	r2, r3
 8009384:	f107 0310 	add.w	r3, r7, #16
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
 8009398:	b2da      	uxtb	r2, r3
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	701a      	strb	r2, [r3, #0]
      i++;
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	3301      	adds	r3, #1
 80093a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	3301      	adds	r3, #1
 80093a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80093aa:	8bfb      	ldrh	r3, [r7, #30]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093b0:	8bfb      	ldrh	r3, [r7, #30]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1ea      	bne.n	800938c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	372c      	adds	r7, #44	; 0x2c
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d12c      	bne.n	800943a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	db12      	blt.n	8009418 <USB_EPSetStall+0x54>
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00f      	beq.n	8009418 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	0151      	lsls	r1, r2, #5
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	440a      	add	r2, r1
 800940e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009412:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009416:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	0151      	lsls	r1, r2, #5
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	440a      	add	r2, r1
 800942e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	e02b      	b.n	8009492 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	db12      	blt.n	8009472 <USB_EPSetStall+0xae>
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00f      	beq.n	8009472 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009470:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	0151      	lsls	r1, r2, #5
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	440a      	add	r2, r1
 8009488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800948c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d128      	bne.n	800950e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	0151      	lsls	r1, r2, #5
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	440a      	add	r2, r1
 80094d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	791b      	ldrb	r3, [r3, #4]
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d003      	beq.n	80094ec <USB_EPClearStall+0x4c>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	791b      	ldrb	r3, [r3, #4]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d138      	bne.n	800955e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	0151      	lsls	r1, r2, #5
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	440a      	add	r2, r1
 8009502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	e027      	b.n	800955e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	015a      	lsls	r2, r3, #5
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	4413      	add	r3, r2
 8009516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	0151      	lsls	r1, r2, #5
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	440a      	add	r2, r1
 8009524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800952c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	791b      	ldrb	r3, [r3, #4]
 8009532:	2b03      	cmp	r3, #3
 8009534:	d003      	beq.n	800953e <USB_EPClearStall+0x9e>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	791b      	ldrb	r3, [r3, #4]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d10f      	bne.n	800955e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	0151      	lsls	r1, r2, #5
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	440a      	add	r2, r1
 8009554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800955c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800958a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800958e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	011b      	lsls	r3, r3, #4
 800959c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80095a0:	68f9      	ldr	r1, [r7, #12]
 80095a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095a6:	4313      	orrs	r3, r2
 80095a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095d2:	f023 0303 	bic.w	r3, r3, #3
 80095d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095e6:	f023 0302 	bic.w	r3, r3, #2
 80095ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b085      	sub	sp, #20
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009614:	f023 0303 	bic.w	r3, r3, #3
 8009618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009628:	f043 0302 	orr.w	r3, r3, #2
 800962c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4013      	ands	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009654:	68fb      	ldr	r3, [r7, #12]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	4013      	ands	r3, r2
 8009684:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	0c1b      	lsrs	r3, r3, #16
}
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	4013      	ands	r3, r2
 80096b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	b29b      	uxth	r3, r3
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	4013      	ands	r3, r2
 80096f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096f8:	68bb      	ldr	r3, [r7, #8]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009706:	b480      	push	{r7}
 8009708:	b087      	sub	sp, #28
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009728:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	fa22 f303 	lsr.w	r3, r2, r3
 8009736:	01db      	lsls	r3, r3, #7
 8009738:	b2db      	uxtb	r3, r3
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	4313      	orrs	r3, r2
 800973e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	4013      	ands	r3, r2
 8009752:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009754:	68bb      	ldr	r3, [r7, #8]
}
 8009756:	4618      	mov	r0, r3
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	f003 0301 	and.w	r3, r3, #1
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800977e:	b480      	push	{r7}
 8009780:	b085      	sub	sp, #20
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009798:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800979c:	f023 0307 	bic.w	r3, r3, #7
 80097a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	460b      	mov	r3, r1
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	333c      	adds	r3, #60	; 0x3c
 80097da:	3304      	adds	r3, #4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	4a26      	ldr	r2, [pc, #152]	; (800987c <USB_EP0_OutStart+0xb8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d90a      	bls.n	80097fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097f8:	d101      	bne.n	80097fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e037      	b.n	800986e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009804:	461a      	mov	r2, r3
 8009806:	2300      	movs	r3, #0
 8009808:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009818:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800981c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982c:	f043 0318 	orr.w	r3, r3, #24
 8009830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009840:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009844:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009846:	7afb      	ldrb	r3, [r7, #11]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d10f      	bne.n	800986c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009852:	461a      	mov	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009866:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800986a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	4f54300a 	.word	0x4f54300a

08009880 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009888:	2300      	movs	r3, #0
 800988a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3301      	adds	r3, #1
 8009890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4a13      	ldr	r2, [pc, #76]	; (80098e4 <USB_CoreReset+0x64>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d901      	bls.n	800989e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e01b      	b.n	80098d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	daf2      	bge.n	800988c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	f043 0201 	orr.w	r2, r3, #1
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3301      	adds	r3, #1
 80098ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4a09      	ldr	r2, [pc, #36]	; (80098e4 <USB_CoreReset+0x64>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d901      	bls.n	80098c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e006      	b.n	80098d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d0f0      	beq.n	80098b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	00030d40 	.word	0x00030d40

080098e8 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	607a      	str	r2, [r7, #4]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80098fa:	89fb      	ldrh	r3, [r7, #14]
 80098fc:	021b      	lsls	r3, r3, #8
 80098fe:	b21a      	sxth	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	b21b      	sxth	r3, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	b21b      	sxth	r3, r3
 800990a:	b29b      	uxth	r3, r3
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	601a      	str	r2, [r3, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
#endif
   g->char_h_space = 1;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   g->char_v_space = 1;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   g->font=NULL;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	611a      	str	r2, [r3, #16]
   g->currentFont.bytes_per_char = 0;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	831a      	strh	r2, [r3, #24]
   g->currentFont.char_height = 0;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	75da      	strb	r2, [r3, #23]
   g->currentFont.char_width = 0;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	759a      	strb	r2, [r3, #22]
   g->currentFont.number_of_chars = 0;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	835a      	strh	r2, [r3, #26]
   g->currentFont.number_of_offsets = 0;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	839a      	strh	r2, [r3, #28]
   g->currentFont.widths = NULL;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	621a      	str	r2, [r3, #32]
   g->currentFont.offsets = NULL;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	625a      	str	r2, [r3, #36]	; 0x24
   g->currentFont.data = NULL;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.font = NULL;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	62da      	str	r2, [r3, #44]	; 0x2c
   g->desktop_color = C_DESKTOP_COLOR;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800997a:	871a      	strh	r2, [r3, #56]	; 0x38
   g->fore_color = C_WHITE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009982:	869a      	strh	r2, [r3, #52]	; 0x34
   g->back_color = C_BLACK;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	86da      	strh	r2, [r3, #54]	; 0x36
   g->next_window = NULL;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	605a      	str	r2, [r3, #4]
   g->active_window = NULL;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	609a      	str	r2, [r3, #8]
   g->last_window = NULL;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	60da      	str	r2, [r3, #12]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800999c:	2300      	movs	r3, #0
 800999e:	73fb      	strb	r3, [r7, #15]
 80099a0:	e010      	b.n	80099c4 <UG_Init+0xac>
   {
      g->driver[i].driver = NULL;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	3307      	adds	r3, #7
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	4413      	add	r3, r2
 80099ac:	2200      	movs	r2, #0
 80099ae:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	3307      	adds	r3, #7
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	4413      	add	r3, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	3301      	adds	r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d9eb      	bls.n	80099a2 <UG_Init+0x8a>
   }

   gui = g;
 80099ca:	4a05      	ldr	r2, [pc, #20]	; (80099e0 <UG_Init+0xc8>)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6013      	str	r3, [r2, #0]
   return 1;
 80099d0:	2301      	movs	r3, #1
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20000990 	.word	0x20000990

080099e4 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80099ec:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <UG_FontSelect+0x1c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	611a      	str	r2, [r3, #16]
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	20000990 	.word	0x20000990

08009a04 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8009a0e:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <UG_FillScreen+0x44>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	b21a      	sxth	r2, r3
 8009a20:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <UG_FillScreen+0x44>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	b219      	sxth	r1, r3
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	460b      	mov	r3, r1
 8009a38:	2100      	movs	r1, #0
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f000 f806 	bl	8009a4c <UG_FillFrame>
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20000990 	.word	0x20000990

08009a4c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8009a4c:	b5b0      	push	{r4, r5, r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4623      	mov	r3, r4
 8009a5c:	80fb      	strh	r3, [r7, #6]
 8009a5e:	4603      	mov	r3, r0
 8009a60:	80bb      	strh	r3, [r7, #4]
 8009a62:	460b      	mov	r3, r1
 8009a64:	807b      	strh	r3, [r7, #2]
 8009a66:	4613      	mov	r3, r2
 8009a68:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8009a6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	da05      	bge.n	8009a82 <UG_FillFrame+0x36>
     swap(x1,x2);
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	817b      	strh	r3, [r7, #10]
 8009a7a:	887b      	ldrh	r3, [r7, #2]
 8009a7c:	80fb      	strh	r3, [r7, #6]
 8009a7e:	897b      	ldrh	r3, [r7, #10]
 8009a80:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8009a82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009a86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	da05      	bge.n	8009a9a <UG_FillFrame+0x4e>
     swap(y1,y2);
 8009a8e:	88bb      	ldrh	r3, [r7, #4]
 8009a90:	813b      	strh	r3, [r7, #8]
 8009a92:	883b      	ldrh	r3, [r7, #0]
 8009a94:	80bb      	strh	r3, [r7, #4]
 8009a96:	893b      	ldrh	r3, [r7, #8]
 8009a98:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8009a9a:	4b24      	ldr	r3, [pc, #144]	; (8009b2c <UG_FillFrame+0xe0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d012      	beq.n	8009ad0 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8009aaa:	4b20      	ldr	r3, [pc, #128]	; (8009b2c <UG_FillFrame+0xe0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab0:	461d      	mov	r5, r3
 8009ab2:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009ab6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009aba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009abe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009ac2:	8c3b      	ldrh	r3, [r7, #32]
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4623      	mov	r3, r4
 8009ac8:	47a8      	blx	r5
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d028      	beq.n	8009b22 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8009ad0:	88bb      	ldrh	r3, [r7, #4]
 8009ad2:	81bb      	strh	r3, [r7, #12]
 8009ad4:	e01e      	b.n	8009b14 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8009ad6:	88fb      	ldrh	r3, [r7, #6]
 8009ad8:	81fb      	strh	r3, [r7, #14]
 8009ada:	e00f      	b.n	8009afc <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8009adc:	4b13      	ldr	r3, [pc, #76]	; (8009b2c <UG_FillFrame+0xe0>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	8c3a      	ldrh	r2, [r7, #32]
 8009ae6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8009aea:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8009aee:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8009af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3301      	adds	r3, #1
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	81fb      	strh	r3, [r7, #14]
 8009afc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	dde9      	ble.n	8009adc <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8009b08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3301      	adds	r3, #1
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	81bb      	strh	r3, [r7, #12]
 8009b14:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009b18:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	ddda      	ble.n	8009ad6 <UG_FillFrame+0x8a>
 8009b20:	e000      	b.n	8009b24 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8009b22:	bf00      	nop
      }
   }
}
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bdb0      	pop	{r4, r5, r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000990 	.word	0x20000990

08009b30 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8009b30:	b5b0      	push	{r4, r5, r7, lr}
 8009b32:	b08a      	sub	sp, #40	; 0x28
 8009b34:	af02      	add	r7, sp, #8
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4623      	mov	r3, r4
 8009b40:	80fb      	strh	r3, [r7, #6]
 8009b42:	4603      	mov	r3, r0
 8009b44:	80bb      	strh	r3, [r7, #4]
 8009b46:	460b      	mov	r3, r1
 8009b48:	807b      	strh	r3, [r7, #2]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8009b4e:	4b67      	ldr	r3, [pc, #412]	; (8009cec <UG_DrawLine+0x1bc>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d013      	beq.n	8009b86 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8009b5e:	4b63      	ldr	r3, [pc, #396]	; (8009cec <UG_DrawLine+0x1bc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	461d      	mov	r5, r3
 8009b66:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009b6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009b6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009b72:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009b76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	4623      	mov	r3, r4
 8009b7c:	47a8      	blx	r5
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 80ae 	beq.w	8009ce2 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8009b86:	887a      	ldrh	r2, [r7, #2]
 8009b88:	88fb      	ldrh	r3, [r7, #6]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8009b90:	883a      	ldrh	r2, [r7, #0]
 8009b92:	88bb      	ldrh	r3, [r7, #4]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8009b9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfb8      	it	lt
 8009ba2:	425b      	neglt	r3, r3
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8009ba8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bfb8      	it	lt
 8009bb0:	425b      	neglt	r3, r3
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8009bb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dd01      	ble.n	8009bc2 <UG_DrawLine+0x92>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e001      	b.n	8009bc6 <UG_DrawLine+0x96>
 8009bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bc6:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8009bc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dd01      	ble.n	8009bd4 <UG_DrawLine+0xa4>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e001      	b.n	8009bd8 <UG_DrawLine+0xa8>
 8009bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bd8:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8009bda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009bde:	105b      	asrs	r3, r3, #1
 8009be0:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8009be2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009be6:	105b      	asrs	r3, r3, #1
 8009be8:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8009bea:	88fb      	ldrh	r3, [r7, #6]
 8009bec:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8009bee:	88bb      	ldrh	r3, [r7, #4]
 8009bf0:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8009bf2:	4b3e      	ldr	r3, [pc, #248]	; (8009cec <UG_DrawLine+0x1bc>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009bfc:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8009c00:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8009c04:	4798      	blx	r3

   if( dxabs >= dyabs )
 8009c06:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	db33      	blt.n	8009c7a <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8009c12:	2300      	movs	r3, #0
 8009c14:	83fb      	strh	r3, [r7, #30]
 8009c16:	e029      	b.n	8009c6c <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8009c18:	8b7a      	ldrh	r2, [r7, #26]
 8009c1a:	89fb      	ldrh	r3, [r7, #14]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8009c22:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8009c26:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	db09      	blt.n	8009c42 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8009c2e:	8b7a      	ldrh	r2, [r7, #26]
 8009c30:	8a3b      	ldrh	r3, [r7, #16]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8009c38:	8afa      	ldrh	r2, [r7, #22]
 8009c3a:	897b      	ldrh	r3, [r7, #10]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8009c42:	8b3a      	ldrh	r2, [r7, #24]
 8009c44:	89bb      	ldrh	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8009c4c:	4b27      	ldr	r3, [pc, #156]	; (8009cec <UG_DrawLine+0x1bc>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009c56:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8009c5a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8009c5e:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8009c60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	3301      	adds	r3, #1
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	83fb      	strh	r3, [r7, #30]
 8009c6c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009c70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	dbcf      	blt.n	8009c18 <UG_DrawLine+0xe8>
 8009c78:	e034      	b.n	8009ce4 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	83fb      	strh	r3, [r7, #30]
 8009c7e:	e029      	b.n	8009cd4 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8009c80:	8bba      	ldrh	r2, [r7, #28]
 8009c82:	8a3b      	ldrh	r3, [r7, #16]
 8009c84:	4413      	add	r3, r2
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8009c8a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	db09      	blt.n	8009caa <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8009c96:	8bba      	ldrh	r2, [r7, #28]
 8009c98:	89fb      	ldrh	r3, [r7, #14]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8009ca0:	8b3a      	ldrh	r2, [r7, #24]
 8009ca2:	89bb      	ldrh	r3, [r7, #12]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8009caa:	8afa      	ldrh	r2, [r7, #22]
 8009cac:	897b      	ldrh	r3, [r7, #10]
 8009cae:	4413      	add	r3, r2
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8009cb4:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <UG_DrawLine+0x1bc>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009cbe:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8009cc2:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8009cc6:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8009cc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	3301      	adds	r3, #1
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	83fb      	strh	r3, [r7, #30]
 8009cd4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	dbcf      	blt.n	8009c80 <UG_DrawLine+0x150>
 8009ce0:	e000      	b.n	8009ce4 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8009ce2:	bf00      	nop
      }
   }  
}
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000990 	.word	0x20000990

08009cf0 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8009cf0:	b590      	push	{r4, r7, lr}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af02      	add	r7, sp, #8
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	603a      	str	r2, [r7, #0]
 8009cfa:	80fb      	strh	r3, [r7, #6]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8009d04:	88bb      	ldrh	r3, [r7, #4]
 8009d06:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8009d08:	4b3c      	ldr	r3, [pc, #240]	; (8009dfc <UG_PutString+0x10c>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fa12 	bl	800a138 <_UG_FontSelect>
   while ( *str != 0 )
 8009d14:	e054      	b.n	8009dc0 <UG_PutString+0xd0>
      }
      else{
         chr = *str++;
      }
      #else
      chr = *str++;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	603a      	str	r2, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	72fb      	strb	r3, [r7, #11]
      #endif

      if ( chr == '\n' )
 8009d20:	7afb      	ldrb	r3, [r7, #11]
 8009d22:	2b0a      	cmp	r3, #10
 8009d24:	d105      	bne.n	8009d32 <UG_PutString+0x42>
      {
         xp = gui->device->x_dim;
 8009d26:	4b35      	ldr	r3, [pc, #212]	; (8009dfc <UG_PutString+0x10c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	81fb      	strh	r3, [r7, #14]
         continue;
 8009d30:	e046      	b.n	8009dc0 <UG_PutString+0xd0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8009d32:	7afb      	ldrb	r3, [r7, #11]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f8ae 	bl	8009e98 <_UG_GetCharData>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8009d40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d48:	d100      	bne.n	8009d4c <UG_PutString+0x5c>
 8009d4a:	e039      	b.n	8009dc0 <UG_PutString+0xd0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8009d4c:	4b2b      	ldr	r3, [pc, #172]	; (8009dfc <UG_PutString+0x10c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d56:	4619      	mov	r1, r3
 8009d58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009d5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009d60:	4413      	add	r3, r2
 8009d62:	4299      	cmp	r1, r3
 8009d64:	dc11      	bgt.n	8009d8a <UG_PutString+0x9a>
      {
         xp = x;
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8009d6a:	4b24      	ldr	r3, [pc, #144]	; (8009dfc <UG_PutString+0x10c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	7ddb      	ldrb	r3, [r3, #23]
 8009d70:	b21a      	sxth	r2, r3
 8009d72:	4b22      	ldr	r3, [pc, #136]	; (8009dfc <UG_PutString+0x10c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8009d7a:	b21b      	sxth	r3, r3
 8009d7c:	4413      	add	r3, r2
 8009d7e:	b21b      	sxth	r3, r3
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	89bb      	ldrh	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <UG_PutString+0x10c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 8009d90:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <UG_PutString+0x10c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009d9a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009d9e:	7af8      	ldrb	r0, [r7, #11]
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	4623      	mov	r3, r4
 8009da4:	f000 fa46 	bl	800a234 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8009da8:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <UG_PutString+0x10c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	893b      	ldrh	r3, [r7, #8]
 8009db4:	4413      	add	r3, r2
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	89fb      	ldrh	r3, [r7, #14]
 8009dba:	4413      	add	r3, r2
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1a6      	bne.n	8009d16 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8009dc8:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <UG_PutString+0x10c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009dd0:	f003 0302 	and.w	r3, r3, #2
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00c      	beq.n	8009df2 <UG_PutString+0x102>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8009dd8:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <UG_PutString+0x10c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dde:	461c      	mov	r4, r3
 8009de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df0:	47a0      	blx	r4
}
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd90      	pop	{r4, r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000990 	.word	0x20000990

08009e00 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8009e0a:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <UG_SetForecolor+0x20>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	88fa      	ldrh	r2, [r7, #6]
 8009e10:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8009e12:	bf00      	nop
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	20000990 	.word	0x20000990

08009e24 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <UG_SetBackcolor+0x20>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	88fa      	ldrh	r2, [r7, #6]
 8009e34:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	20000990 	.word	0x20000990

08009e48 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8009e52:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <UG_FontSetHSpace+0x24>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	88fa      	ldrh	r2, [r7, #6]
 8009e58:	b252      	sxtb	r2, r2
 8009e5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8009e5e:	bf00      	nop
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20000990 	.word	0x20000990

08009e70 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8009e7a:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <UG_FontSetVSpace+0x24>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	88fa      	ldrh	r2, [r7, #6]
 8009e80:	b252      	sxtb	r2, r2
 8009e82:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20000990 	.word	0x20000990

08009e98 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	71fb      	strb	r3, [r7, #7]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8009eb8:	4b9a      	ldr	r3, [pc, #616]	; (800a124 <_UG_GetCharData+0x28c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ebe:	4b9a      	ldr	r3, [pc, #616]	; (800a128 <_UG_GetCharData+0x290>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d10f      	bne.n	8009ee6 <_UG_GetCharData+0x4e>
 8009ec6:	4b99      	ldr	r3, [pc, #612]	; (800a12c <_UG_GetCharData+0x294>)
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	79fa      	ldrb	r2, [r7, #7]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d10a      	bne.n	8009ee6 <_UG_GetCharData+0x4e>
    if(p){
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8009ed6:	4b96      	ldr	r3, [pc, #600]	; (800a130 <_UG_GetCharData+0x298>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8009ede:	4b95      	ldr	r3, [pc, #596]	; (800a134 <_UG_GetCharData+0x29c>)
 8009ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ee4:	e119      	b.n	800a11a <_UG_GetCharData+0x282>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8009ee6:	4b8f      	ldr	r3, [pc, #572]	; (800a124 <_UG_GetCharData+0x28c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	7d5b      	ldrb	r3, [r3, #21]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d07d      	beq.n	8009fec <_UG_GetCharData+0x154>
    switch ( encoding )
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	2bfc      	cmp	r3, #252	; 0xfc
 8009ef4:	f300 80ce 	bgt.w	800a094 <_UG_GetCharData+0x1fc>
 8009ef8:	2bd6      	cmp	r3, #214	; 0xd6
 8009efa:	da09      	bge.n	8009f10 <_UG_GetCharData+0x78>
 8009efc:	2bc4      	cmp	r3, #196	; 0xc4
 8009efe:	d06c      	beq.n	8009fda <_UG_GetCharData+0x142>
 8009f00:	2bc4      	cmp	r3, #196	; 0xc4
 8009f02:	f300 80c7 	bgt.w	800a094 <_UG_GetCharData+0x1fc>
 8009f06:	2bb0      	cmp	r3, #176	; 0xb0
 8009f08:	d06d      	beq.n	8009fe6 <_UG_GetCharData+0x14e>
 8009f0a:	2bb5      	cmp	r3, #181	; 0xb5
 8009f0c:	d068      	beq.n	8009fe0 <_UG_GetCharData+0x148>
 8009f0e:	e06e      	b.n	8009fee <_UG_GetCharData+0x156>
 8009f10:	3bd6      	subs	r3, #214	; 0xd6
 8009f12:	2b26      	cmp	r3, #38	; 0x26
 8009f14:	f200 80be 	bhi.w	800a094 <_UG_GetCharData+0x1fc>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <_UG_GetCharData+0x88>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009fc3 	.word	0x08009fc3
 8009f24:	0800a095 	.word	0x0800a095
 8009f28:	0800a095 	.word	0x0800a095
 8009f2c:	0800a095 	.word	0x0800a095
 8009f30:	0800a095 	.word	0x0800a095
 8009f34:	0800a095 	.word	0x0800a095
 8009f38:	08009fcf 	.word	0x08009fcf
 8009f3c:	0800a095 	.word	0x0800a095
 8009f40:	0800a095 	.word	0x0800a095
 8009f44:	0800a095 	.word	0x0800a095
 8009f48:	0800a095 	.word	0x0800a095
 8009f4c:	0800a095 	.word	0x0800a095
 8009f50:	0800a095 	.word	0x0800a095
 8009f54:	0800a095 	.word	0x0800a095
 8009f58:	08009fd5 	.word	0x08009fd5
 8009f5c:	0800a095 	.word	0x0800a095
 8009f60:	0800a095 	.word	0x0800a095
 8009f64:	0800a095 	.word	0x0800a095
 8009f68:	0800a095 	.word	0x0800a095
 8009f6c:	0800a095 	.word	0x0800a095
 8009f70:	0800a095 	.word	0x0800a095
 8009f74:	0800a095 	.word	0x0800a095
 8009f78:	0800a095 	.word	0x0800a095
 8009f7c:	0800a095 	.word	0x0800a095
 8009f80:	0800a095 	.word	0x0800a095
 8009f84:	0800a095 	.word	0x0800a095
 8009f88:	0800a095 	.word	0x0800a095
 8009f8c:	0800a095 	.word	0x0800a095
 8009f90:	0800a095 	.word	0x0800a095
 8009f94:	0800a095 	.word	0x0800a095
 8009f98:	0800a095 	.word	0x0800a095
 8009f9c:	0800a095 	.word	0x0800a095
 8009fa0:	08009fbd 	.word	0x08009fbd
 8009fa4:	0800a095 	.word	0x0800a095
 8009fa8:	0800a095 	.word	0x0800a095
 8009fac:	0800a095 	.word	0x0800a095
 8009fb0:	0800a095 	.word	0x0800a095
 8009fb4:	0800a095 	.word	0x0800a095
 8009fb8:	08009fc9 	.word	0x08009fc9
    {
       case 0xF6: encoding = 0x94; break; // ö
 8009fbc:	2394      	movs	r3, #148	; 0x94
 8009fbe:	71fb      	strb	r3, [r7, #7]
 8009fc0:	e015      	b.n	8009fee <_UG_GetCharData+0x156>
       case 0xD6: encoding = 0x99; break; // Ö
 8009fc2:	2399      	movs	r3, #153	; 0x99
 8009fc4:	71fb      	strb	r3, [r7, #7]
 8009fc6:	e012      	b.n	8009fee <_UG_GetCharData+0x156>
       case 0xFC: encoding = 0x81; break; // ü
 8009fc8:	2381      	movs	r3, #129	; 0x81
 8009fca:	71fb      	strb	r3, [r7, #7]
 8009fcc:	e00f      	b.n	8009fee <_UG_GetCharData+0x156>
       case 0xDC: encoding = 0x9A; break; // Ü
 8009fce:	239a      	movs	r3, #154	; 0x9a
 8009fd0:	71fb      	strb	r3, [r7, #7]
 8009fd2:	e00c      	b.n	8009fee <_UG_GetCharData+0x156>
       case 0xE4: encoding = 0x84; break; // ä
 8009fd4:	2384      	movs	r3, #132	; 0x84
 8009fd6:	71fb      	strb	r3, [r7, #7]
 8009fd8:	e009      	b.n	8009fee <_UG_GetCharData+0x156>
       case 0xC4: encoding = 0x8E; break; // Ä
 8009fda:	238e      	movs	r3, #142	; 0x8e
 8009fdc:	71fb      	strb	r3, [r7, #7]
 8009fde:	e006      	b.n	8009fee <_UG_GetCharData+0x156>
       case 0xB5: encoding = 0xE6; break; // µ
 8009fe0:	23e6      	movs	r3, #230	; 0xe6
 8009fe2:	71fb      	strb	r3, [r7, #7]
 8009fe4:	e003      	b.n	8009fee <_UG_GetCharData+0x156>
       case 0xB0: encoding = 0xF8; break; // °
 8009fe6:	23f8      	movs	r3, #248	; 0xf8
 8009fe8:	71fb      	strb	r3, [r7, #7]
 8009fea:	e000      	b.n	8009fee <_UG_GetCharData+0x156>
    }
  }
 8009fec:	bf00      	nop

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8009fee:	e051      	b.n	800a094 <_UG_GetCharData+0x1fc>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8009ff0:	4b4c      	ldr	r3, [pc, #304]	; (800a124 <_UG_GetCharData+0x28c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	8a7a      	ldrh	r2, [r7, #18]
 8009ff8:	0052      	lsls	r2, r2, #1
 8009ffa:	4413      	add	r3, r2
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff fc73 	bl	80098e8 <ptr_8to16>
 800a002:	4603      	mov	r3, r0
 800a004:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800a006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	da06      	bge.n	800a01c <_UG_GetCharData+0x184>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 800a00e:	89fb      	ldrh	r3, [r7, #14]
 800a010:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a014:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800a016:	2301      	movs	r3, #1
 800a018:	747b      	strb	r3, [r7, #17]
 800a01a:	e038      	b.n	800a08e <_UG_GetCharData+0x1f6>
    }
    else if(range)                                                  // If range previously set, this is the range end
 800a01c:	7c7b      	ldrb	r3, [r7, #17]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d025      	beq.n	800a06e <_UG_GetCharData+0x1d6>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	b29b      	uxth	r3, r3
 800a026:	8afa      	ldrh	r2, [r7, #22]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d80f      	bhi.n	800a04c <_UG_GetCharData+0x1b4>
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	89fa      	ldrh	r2, [r7, #14]
 800a032:	429a      	cmp	r2, r3
 800a034:	d30a      	bcc.n	800a04c <_UG_GetCharData+0x1b4>
      {
        skip += (encoding-start);                             // Calculate the skip value
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	b29a      	uxth	r2, r3
 800a03a:	8afb      	ldrh	r3, [r7, #22]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	b29a      	uxth	r2, r3
 800a040:	8abb      	ldrh	r3, [r7, #20]
 800a042:	4413      	add	r3, r2
 800a044:	82bb      	strh	r3, [r7, #20]
        found=1;
 800a046:	2301      	movs	r3, #1
 800a048:	743b      	strb	r3, [r7, #16]
        break;
 800a04a:	e02d      	b.n	800a0a8 <_UG_GetCharData+0x210>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	8afa      	ldrh	r2, [r7, #22]
 800a052:	429a      	cmp	r2, r3
 800a054:	d825      	bhi.n	800a0a2 <_UG_GetCharData+0x20a>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 800a056:	89fa      	ldrh	r2, [r7, #14]
 800a058:	8afb      	ldrh	r3, [r7, #22]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	8abb      	ldrh	r3, [r7, #20]
 800a060:	4413      	add	r3, r2
 800a062:	b29b      	uxth	r3, r3
 800a064:	3301      	adds	r3, #1
 800a066:	82bb      	strh	r3, [r7, #20]
      range=0;
 800a068:	2300      	movs	r3, #0
 800a06a:	747b      	strb	r3, [r7, #17]
 800a06c:	e00f      	b.n	800a08e <_UG_GetCharData+0x1f6>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	b29b      	uxth	r3, r3
 800a072:	89fa      	ldrh	r2, [r7, #14]
 800a074:	429a      	cmp	r2, r3
 800a076:	d102      	bne.n	800a07e <_UG_GetCharData+0x1e6>
      {
        found=1;
 800a078:	2301      	movs	r3, #1
 800a07a:	743b      	strb	r3, [r7, #16]
        break;
 800a07c:	e014      	b.n	800a0a8 <_UG_GetCharData+0x210>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	b29b      	uxth	r3, r3
 800a082:	89fa      	ldrh	r2, [r7, #14]
 800a084:	429a      	cmp	r2, r3
 800a086:	d80e      	bhi.n	800a0a6 <_UG_GetCharData+0x20e>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 800a088:	8abb      	ldrh	r3, [r7, #20]
 800a08a:	3301      	adds	r3, #1
 800a08c:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800a08e:	8a7b      	ldrh	r3, [r7, #18]
 800a090:	3301      	adds	r3, #1
 800a092:	827b      	strh	r3, [r7, #18]
 800a094:	4b23      	ldr	r3, [pc, #140]	; (800a124 <_UG_GetCharData+0x28c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	8b9b      	ldrh	r3, [r3, #28]
 800a09a:	8a7a      	ldrh	r2, [r7, #18]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d3a7      	bcc.n	8009ff0 <_UG_GetCharData+0x158>
 800a0a0:	e002      	b.n	800a0a8 <_UG_GetCharData+0x210>
        break;
 800a0a2:	bf00      	nop
 800a0a4:	e000      	b.n	800a0a8 <_UG_GetCharData+0x210>
        break;
 800a0a6:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 800a0a8:	7c3b      	ldrb	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d033      	beq.n	800a116 <_UG_GetCharData+0x27e>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800a0ae:	4b1d      	ldr	r3, [pc, #116]	; (800a124 <_UG_GetCharData+0x28c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	4a1c      	ldr	r2, [pc, #112]	; (800a128 <_UG_GetCharData+0x290>)
 800a0b6:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 800a0b8:	4a1c      	ldr	r2, [pc, #112]	; (800a12c <_UG_GetCharData+0x294>)
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	7013      	strb	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 800a0be:	4b19      	ldr	r3, [pc, #100]	; (800a124 <_UG_GetCharData+0x28c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c4:	8aba      	ldrh	r2, [r7, #20]
 800a0c6:	4917      	ldr	r1, [pc, #92]	; (800a124 <_UG_GetCharData+0x28c>)
 800a0c8:	6809      	ldr	r1, [r1, #0]
 800a0ca:	8b09      	ldrh	r1, [r1, #24]
 800a0cc:	fb01 f202 	mul.w	r2, r1, r2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	4a17      	ldr	r2, [pc, #92]	; (800a130 <_UG_GetCharData+0x298>)
 800a0d4:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800a0d6:	4b13      	ldr	r3, [pc, #76]	; (800a124 <_UG_GetCharData+0x28c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d009      	beq.n	800a0f4 <_UG_GetCharData+0x25c>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 800a0e0:	4b10      	ldr	r3, [pc, #64]	; (800a124 <_UG_GetCharData+0x28c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6a1a      	ldr	r2, [r3, #32]
 800a0e6:	8abb      	ldrh	r3, [r7, #20]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b21a      	sxth	r2, r3
 800a0ee:	4b11      	ldr	r3, [pc, #68]	; (800a134 <_UG_GetCharData+0x29c>)
 800a0f0:	801a      	strh	r2, [r3, #0]
 800a0f2:	e005      	b.n	800a100 <_UG_GetCharData+0x268>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 800a0f4:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <_UG_GetCharData+0x28c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	7d9b      	ldrb	r3, [r3, #22]
 800a0fa:	b21a      	sxth	r2, r3
 800a0fc:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <_UG_GetCharData+0x29c>)
 800a0fe:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <_UG_GetCharData+0x276>
      *p=last_p;                                                    // Load char bitmap address
 800a106:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <_UG_GetCharData+0x298>)
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 800a10e:	4b09      	ldr	r3, [pc, #36]	; (800a134 <_UG_GetCharData+0x29c>)
 800a110:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a114:	e001      	b.n	800a11a <_UG_GetCharData+0x282>
  }
  return -1;                                                        // -1 = char not found
 800a116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20000990 	.word	0x20000990
 800a128:	20000994 	.word	0x20000994
 800a12c:	20000998 	.word	0x20000998
 800a130:	2000099c 	.word	0x2000099c
 800a134:	200009a0 	.word	0x200009a0

0800a138 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 800a138:	b590      	push	{r4, r7, lr}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 800a140:	4b3b      	ldr	r3, [pc, #236]	; (800a230 <_UG_FontSelect+0xf8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d06c      	beq.n	800a226 <_UG_FontSelect+0xee>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 800a14c:	4b38      	ldr	r3, [pc, #224]	; (800a230 <_UG_FontSelect+0xf8>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	62da      	str	r2, [r3, #44]	; 0x2c
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	781a      	ldrb	r2, [r3, #0]
 800a158:	4b35      	ldr	r3, [pc, #212]	; (800a230 <_UG_FontSelect+0xf8>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a160:	b2d2      	uxtb	r2, r2
 800a162:	751a      	strb	r2, [r3, #20]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	b25b      	sxtb	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	da01      	bge.n	800a176 <_UG_FontSelect+0x3e>
 800a172:	2201      	movs	r2, #1
 800a174:	e000      	b.n	800a178 <_UG_FontSelect+0x40>
 800a176:	2200      	movs	r2, #0
 800a178:	4b2d      	ldr	r3, [pc, #180]	; (800a230 <_UG_FontSelect+0xf8>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	b2d2      	uxtb	r2, r2
 800a17e:	755a      	strb	r2, [r3, #21]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	4a2a      	ldr	r2, [pc, #168]	; (800a230 <_UG_FontSelect+0xf8>)
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	7593      	strb	r3, [r2, #22]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	4a26      	ldr	r2, [pc, #152]	; (800a230 <_UG_FontSelect+0xf8>)
 800a196:	6812      	ldr	r2, [r2, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	75d3      	strb	r3, [r2, #23]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 800a19c:	4b24      	ldr	r3, [pc, #144]	; (800a230 <_UG_FontSelect+0xf8>)
 800a19e:	681c      	ldr	r4, [r3, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff fba1 	bl	80098e8 <ptr_8to16>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	8363      	strh	r3, [r4, #26]
  font+=2;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 800a1b0:	4b1f      	ldr	r3, [pc, #124]	; (800a230 <_UG_FontSelect+0xf8>)
 800a1b2:	681c      	ldr	r4, [r3, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff fb97 	bl	80098e8 <ptr_8to16>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	83a3      	strh	r3, [r4, #28]
  font+=2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 800a1c4:	4b1a      	ldr	r3, [pc, #104]	; (800a230 <_UG_FontSelect+0xf8>)
 800a1c6:	681c      	ldr	r4, [r3, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff fb8d 	bl	80098e8 <ptr_8to16>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	8323      	strh	r3, [r4, #24]
  font+=2;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	3302      	adds	r3, #2
 800a1d6:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	607a      	str	r2, [r7, #4]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <_UG_FontSelect+0xc4>
     gui->currentFont.widths = font;                      // Save pointer to width table
 800a1e4:	4b12      	ldr	r3, [pc, #72]	; (800a230 <_UG_FontSelect+0xf8>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	621a      	str	r2, [r3, #32]
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800a1ec:	4b10      	ldr	r3, [pc, #64]	; (800a230 <_UG_FontSelect+0xf8>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	8b5b      	ldrh	r3, [r3, #26]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	607b      	str	r3, [r7, #4]
 800a1fa:	e003      	b.n	800a204 <_UG_FontSelect+0xcc>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800a1fc:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <_UG_FontSelect+0xf8>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2200      	movs	r2, #0
 800a202:	621a      	str	r2, [r3, #32]
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 800a204:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <_UG_FontSelect+0xf8>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	625a      	str	r2, [r3, #36]	; 0x24
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800a20c:	4b08      	ldr	r3, [pc, #32]	; (800a230 <_UG_FontSelect+0xf8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	8b9b      	ldrh	r3, [r3, #28]
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	461a      	mov	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4413      	add	r3, r2
 800a21a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800a21c:	4b04      	ldr	r3, [pc, #16]	; (800a230 <_UG_FontSelect+0xf8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	629a      	str	r2, [r3, #40]	; 0x28
 800a224:	e000      	b.n	800a228 <_UG_FontSelect+0xf0>
    return;
 800a226:	bf00      	nop
}
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd90      	pop	{r4, r7, pc}
 800a22e:	bf00      	nop
 800a230:	20000990 	.word	0x20000990

0800a234 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 800a234:	b5b0      	push	{r4, r5, r7, lr}
 800a236:	b08c      	sub	sp, #48	; 0x30
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4623      	mov	r3, r4
 800a244:	71fb      	strb	r3, [r7, #7]
 800a246:	4603      	mov	r3, r0
 800a248:	80bb      	strh	r3, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	807b      	strh	r3, [r7, #2]
 800a24e:	4613      	mov	r3, r2
 800a250:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 800a252:	2300      	movs	r3, #0
 800a254:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a256:	2300      	movs	r3, #0
 800a258:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a25a:	2300      	movs	r3, #0
 800a25c:	847b      	strh	r3, [r7, #34]	; 0x22
 800a25e:	2300      	movs	r3, #0
 800a260:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800a262:	4b8a      	ldr	r3, [pc, #552]	; (800a48c <_UG_PutChar+0x258>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a26a:	75fb      	strb	r3, [r7, #23]
 800a26c:	4b87      	ldr	r3, [pc, #540]	; (800a48c <_UG_PutChar+0x258>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a274:	f003 0302 	and.w	r3, r3, #2
 800a278:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800a27e:	f107 0208 	add.w	r2, r7, #8
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	4611      	mov	r1, r2
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff fe06 	bl	8009e98 <_UG_GetCharData>
 800a28c:	4603      	mov	r3, r0
 800a28e:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 800a290:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a298:	d102      	bne.n	800a2a0 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 800a29a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a29e:	e21e      	b.n	800a6de <_UG_PutChar+0x4aa>

   bn =  gui->currentFont.char_width;
 800a2a0:	4b7a      	ldr	r3, [pc, #488]	; (800a48c <_UG_PutChar+0x258>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	7d9b      	ldrb	r3, [r3, #22]
 800a2a6:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 800a2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <_UG_PutChar+0x7e>
     return 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e215      	b.n	800a6de <_UG_PutChar+0x4aa>
   }
   bn >>= 3;
 800a2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2b4:	08db      	lsrs	r3, r3, #3
 800a2b6:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 800a2b8:	4b74      	ldr	r3, [pc, #464]	; (800a48c <_UG_PutChar+0x258>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	7d9b      	ldrb	r3, [r3, #22]
 800a2be:	f003 0307 	and.w	r3, r3, #7
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <_UG_PutChar+0x9a>
 800a2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 800a2ce:	7dbb      	ldrb	r3, [r7, #22]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d01c      	beq.n	800a30e <_UG_PutChar+0xda>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 800a2d4:	4b6d      	ldr	r3, [pc, #436]	; (800a48c <_UG_PutChar+0x258>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2da:	461d      	mov	r5, r3
 800a2dc:	88ba      	ldrh	r2, [r7, #4]
 800a2de:	8abb      	ldrh	r3, [r7, #20]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	b21c      	sxth	r4, r3
 800a2ea:	4b68      	ldr	r3, [pc, #416]	; (800a48c <_UG_PutChar+0x258>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	7ddb      	ldrb	r3, [r3, #23]
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	887b      	ldrh	r3, [r7, #2]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	b21b      	sxth	r3, r3
 800a2fe:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800a302:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800a306:	4622      	mov	r2, r4
 800a308:	47a8      	blx	r5
 800a30a:	4603      	mov	r3, r0
 800a30c:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 800a30e:	4b5f      	ldr	r3, [pc, #380]	; (800a48c <_UG_PutChar+0x258>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	7d1b      	ldrb	r3, [r3, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f040 8171 	bne.w	800a5fc <_UG_PutChar+0x3c8>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800a31a:	2300      	movs	r3, #0
 800a31c:	853b      	strh	r3, [r7, #40]	; 0x28
 800a31e:	e0ec      	b.n	800a4fa <_UG_PutChar+0x2c6>
     {
       c=0;
 800a320:	2300      	movs	r3, #0
 800a322:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800a324:	2300      	movs	r3, #0
 800a326:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a328:	e0df      	b.n	800a4ea <_UG_PutChar+0x2b6>
       {
         b = *data++;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	60ba      	str	r2, [r7, #8]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800a334:	2300      	movs	r3, #0
 800a336:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a338:	e0ca      	b.n	800a4d0 <_UG_PutChar+0x29c>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 800a33a:	7f7b      	ldrb	r3, [r7, #29]
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	2b00      	cmp	r3, #0
 800a342:	d033      	beq.n	800a3ac <_UG_PutChar+0x178>
           {
             if(driver)
 800a344:	7dbb      	ldrb	r3, [r7, #22]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d01f      	beq.n	800a38a <_UG_PutChar+0x156>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 800a34a:	8c3b      	ldrh	r3, [r7, #32]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00a      	beq.n	800a366 <_UG_PutChar+0x132>
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d107      	bne.n	800a366 <_UG_PutChar+0x132>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 800a356:	8c3a      	ldrh	r2, [r7, #32]
 800a358:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	4610      	mov	r0, r2
 800a360:	4798      	blx	r3
                 bpixels=0;
 800a362:	2300      	movs	r3, #0
 800a364:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 800a366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <_UG_PutChar+0x14e>
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <_UG_PutChar+0x14e>
               {
                 x0=x+c;
 800a372:	88ba      	ldrh	r2, [r7, #4]
 800a374:	8bfb      	ldrh	r3, [r7, #30]
 800a376:	4413      	add	r3, r2
 800a378:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 800a37a:	887a      	ldrh	r2, [r7, #2]
 800a37c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a37e:	4413      	add	r3, r2
 800a380:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 800a382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a384:	3301      	adds	r3, #1
 800a386:	847b      	strh	r3, [r7, #34]	; 0x22
 800a388:	e096      	b.n	800a4b8 <_UG_PutChar+0x284>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 800a38a:	4b40      	ldr	r3, [pc, #256]	; (800a48c <_UG_PutChar+0x258>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	88b9      	ldrh	r1, [r7, #4]
 800a394:	8bfa      	ldrh	r2, [r7, #30]
 800a396:	440a      	add	r2, r1
 800a398:	b292      	uxth	r2, r2
 800a39a:	b210      	sxth	r0, r2
 800a39c:	8879      	ldrh	r1, [r7, #2]
 800a39e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a3a0:	440a      	add	r2, r1
 800a3a2:	b292      	uxth	r2, r2
 800a3a4:	b211      	sxth	r1, r2
 800a3a6:	883a      	ldrh	r2, [r7, #0]
 800a3a8:	4798      	blx	r3
 800a3aa:	e085      	b.n	800a4b8 <_UG_PutChar+0x284>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 800a3ac:	7dbb      	ldrb	r3, [r7, #22]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d06e      	beq.n	800a490 <_UG_PutChar+0x25c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 800a3b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d064      	beq.n	800a482 <_UG_PutChar+0x24e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d15e      	bne.n	800a47c <_UG_PutChar+0x248>
                 {
                   push_pixels(fpixels,fc);
 800a3be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a3c0:	8839      	ldrh	r1, [r7, #0]
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4798      	blx	r3
                   fpixels=0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	847b      	strh	r3, [r7, #34]	; 0x22
 800a3cc:	e059      	b.n	800a482 <_UG_PutChar+0x24e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 800a3ce:	88ba      	ldrh	r2, [r7, #4]
 800a3d0:	8abb      	ldrh	r3, [r7, #20]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 800a3dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d003      	beq.n	800a3ee <_UG_PutChar+0x1ba>
 800a3e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a3e8:	89fb      	ldrh	r3, [r7, #14]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d224      	bcs.n	800a438 <_UG_PutChar+0x204>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800a3ee:	4b27      	ldr	r3, [pc, #156]	; (800a48c <_UG_PutChar+0x258>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f4:	461d      	mov	r5, r3
 800a3f6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800a3fa:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800a3fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a400:	89fb      	ldrh	r3, [r7, #14]
 800a402:	4413      	add	r3, r2
 800a404:	b29b      	uxth	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	b29b      	uxth	r3, r3
 800a40a:	b21c      	sxth	r4, r3
 800a40c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a40e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a412:	fb92 f3f3 	sdiv	r3, r2, r3
 800a416:	b29a      	uxth	r2, r3
 800a418:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a41a:	4413      	add	r3, r2
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	b21b      	sxth	r3, r3
 800a420:	4622      	mov	r2, r4
 800a422:	47a8      	blx	r5
 800a424:	4603      	mov	r3, r0
 800a426:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800a428:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a42a:	8839      	ldrh	r1, [r7, #0]
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	4610      	mov	r0, r2
 800a430:	4798      	blx	r3
                       fpixels=0;
 800a432:	2300      	movs	r3, #0
 800a434:	847b      	strh	r3, [r7, #34]	; 0x22
 800a436:	e021      	b.n	800a47c <_UG_PutChar+0x248>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800a438:	4b14      	ldr	r3, [pc, #80]	; (800a48c <_UG_PutChar+0x258>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43e:	461c      	mov	r4, r3
 800a440:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800a444:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800a448:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a44a:	89fb      	ldrh	r3, [r7, #14]
 800a44c:	4413      	add	r3, r2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	3b01      	subs	r3, #1
 800a452:	b29b      	uxth	r3, r3
 800a454:	b21a      	sxth	r2, r3
 800a456:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a45a:	47a0      	blx	r4
 800a45c:	4603      	mov	r3, r0
 800a45e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800a460:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a462:	8839      	ldrh	r1, [r7, #0]
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	4610      	mov	r0, r2
 800a468:	4798      	blx	r3
                       fpixels -= width;
 800a46a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a46c:	89fb      	ldrh	r3, [r7, #14]
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 800a472:	88bb      	ldrh	r3, [r7, #4]
 800a474:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 800a476:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a478:	3301      	adds	r3, #1
 800a47a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 800a47c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1a5      	bne.n	800a3ce <_UG_PutChar+0x19a>
                     }
                   }
                 }
               }
               bpixels++;
 800a482:	8c3b      	ldrh	r3, [r7, #32]
 800a484:	3301      	adds	r3, #1
 800a486:	843b      	strh	r3, [r7, #32]
 800a488:	e016      	b.n	800a4b8 <_UG_PutChar+0x284>
 800a48a:	bf00      	nop
 800a48c:	20000990 	.word	0x20000990
             }
             else if(!trans)                           // Not accelerated output
 800a490:	7dfb      	ldrb	r3, [r7, #23]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d110      	bne.n	800a4b8 <_UG_PutChar+0x284>
             {
               gui->device->pset(x+c,y+j,bc);
 800a496:	4b94      	ldr	r3, [pc, #592]	; (800a6e8 <_UG_PutChar+0x4b4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	88b9      	ldrh	r1, [r7, #4]
 800a4a0:	8bfa      	ldrh	r2, [r7, #30]
 800a4a2:	440a      	add	r2, r1
 800a4a4:	b292      	uxth	r2, r2
 800a4a6:	b210      	sxth	r0, r2
 800a4a8:	8879      	ldrh	r1, [r7, #2]
 800a4aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a4ac:	440a      	add	r2, r1
 800a4ae:	b292      	uxth	r2, r2
 800a4b0:	b211      	sxth	r1, r2
 800a4b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a4b6:	4798      	blx	r3
             }
           }
           b >>= 1;
 800a4b8:	7f7b      	ldrb	r3, [r7, #29]
 800a4ba:	085b      	lsrs	r3, r3, #1
 800a4bc:	777b      	strb	r3, [r7, #29]
           c++;
 800a4be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800a4ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a4d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4d2:	2b07      	cmp	r3, #7
 800a4d4:	d806      	bhi.n	800a4e4 <_UG_PutChar+0x2b0>
 800a4d6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a4da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	f6ff af2b 	blt.w	800a33a <_UG_PutChar+0x106>
       for( i=0;i<bn;i++ )
 800a4e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a4ea:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a4ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	f4ff af1b 	bcc.w	800a32a <_UG_PutChar+0xf6>
     for( j=0;j< gui->currentFont.char_height;j++ )
 800a4f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	853b      	strh	r3, [r7, #40]	; 0x28
 800a4fa:	4b7b      	ldr	r3, [pc, #492]	; (800a6e8 <_UG_PutChar+0x4b4>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	7ddb      	ldrb	r3, [r3, #23]
 800a500:	b29b      	uxth	r3, r3
 800a502:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a504:	429a      	cmp	r2, r3
 800a506:	f4ff af0b 	bcc.w	800a320 <_UG_PutChar+0xec>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 800a50a:	7dbb      	ldrb	r3, [r7, #22]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 80e4 	beq.w	800a6da <_UG_PutChar+0x4a6>
       if(bpixels && !trans)
 800a512:	8c3b      	ldrh	r3, [r7, #32]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d009      	beq.n	800a52c <_UG_PutChar+0x2f8>
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d106      	bne.n	800a52c <_UG_PutChar+0x2f8>
       {
         push_pixels(bpixels,bc);
 800a51e:	8c3a      	ldrh	r2, [r7, #32]
 800a520:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	4610      	mov	r0, r2
 800a528:	4798      	blx	r3
 800a52a:	e0d6      	b.n	800a6da <_UG_PutChar+0x4a6>
       }
       else if(fpixels)
 800a52c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 80d3 	beq.w	800a6da <_UG_PutChar+0x4a6>
       {
         if(!trans)
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d15c      	bne.n	800a5f4 <_UG_PutChar+0x3c0>
         {
           push_pixels(fpixels,fc);
 800a53a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a53c:	8839      	ldrh	r1, [r7, #0]
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	4610      	mov	r0, r2
 800a542:	4798      	blx	r3
 800a544:	e0c9      	b.n	800a6da <_UG_PutChar+0x4a6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 800a546:	88ba      	ldrh	r2, [r7, #4]
 800a548:	8abb      	ldrh	r3, [r7, #20]
 800a54a:	4413      	add	r3, r2
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 800a554:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a556:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d003      	beq.n	800a566 <_UG_PutChar+0x332>
 800a55e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a560:	8a3b      	ldrh	r3, [r7, #16]
 800a562:	429a      	cmp	r2, r3
 800a564:	d224      	bcs.n	800a5b0 <_UG_PutChar+0x37c>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800a566:	4b60      	ldr	r3, [pc, #384]	; (800a6e8 <_UG_PutChar+0x4b4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a56c:	461d      	mov	r5, r3
 800a56e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800a572:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800a576:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a578:	8a3b      	ldrh	r3, [r7, #16]
 800a57a:	4413      	add	r3, r2
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	3b01      	subs	r3, #1
 800a580:	b29b      	uxth	r3, r3
 800a582:	b21c      	sxth	r4, r3
 800a584:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a586:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a58a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a58e:	b29a      	uxth	r2, r3
 800a590:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a592:	4413      	add	r3, r2
 800a594:	b29b      	uxth	r3, r3
 800a596:	b21b      	sxth	r3, r3
 800a598:	4622      	mov	r2, r4
 800a59a:	47a8      	blx	r5
 800a59c:	4603      	mov	r3, r0
 800a59e:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800a5a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a5a2:	8839      	ldrh	r1, [r7, #0]
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	4798      	blx	r3
               fpixels=0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	847b      	strh	r3, [r7, #34]	; 0x22
 800a5ae:	e021      	b.n	800a5f4 <_UG_PutChar+0x3c0>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800a5b0:	4b4d      	ldr	r3, [pc, #308]	; (800a6e8 <_UG_PutChar+0x4b4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5b6:	461c      	mov	r4, r3
 800a5b8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800a5bc:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800a5c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5c2:	8a3b      	ldrh	r3, [r7, #16]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	b21a      	sxth	r2, r3
 800a5ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a5d2:	47a0      	blx	r4
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800a5d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a5da:	8839      	ldrh	r1, [r7, #0]
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	4610      	mov	r0, r2
 800a5e0:	4798      	blx	r3
               fpixels -= width;
 800a5e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a5e4:	8a3b      	ldrh	r3, [r7, #16]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 800a5ea:	88bb      	ldrh	r3, [r7, #4]
 800a5ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 800a5ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 800a5f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1a5      	bne.n	800a546 <_UG_PutChar+0x312>
 800a5fa:	e06e      	b.n	800a6da <_UG_PutChar+0x4a6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 800a5fc:	4b3a      	ldr	r3, [pc, #232]	; (800a6e8 <_UG_PutChar+0x4b4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	7d1b      	ldrb	r3, [r3, #20]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d169      	bne.n	800a6da <_UG_PutChar+0x4a6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800a606:	2300      	movs	r3, #0
 800a608:	853b      	strh	r3, [r7, #40]	; 0x28
 800a60a:	e05f      	b.n	800a6cc <_UG_PutChar+0x498>
     {
       for( i=0;i<actual_char_width;i++ )
 800a60c:	2300      	movs	r3, #0
 800a60e:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a610:	e04a      	b.n	800a6a8 <_UG_PutChar+0x474>
       {
         b = *data++;
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	60ba      	str	r2, [r7, #8]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800a61c:	883b      	ldrh	r3, [r7, #0]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	7f7a      	ldrb	r2, [r7, #29]
 800a622:	fb03 f202 	mul.w	r2, r3, r2
 800a626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	7f79      	ldrb	r1, [r7, #29]
 800a62e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800a632:	fb01 f303 	mul.w	r3, r1, r3
 800a636:	4413      	add	r3, r2
 800a638:	121b      	asrs	r3, r3, #8
 800a63a:	b21b      	sxth	r3, r3
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 800a640:	883b      	ldrh	r3, [r7, #0]
 800a642:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a646:	7f79      	ldrb	r1, [r7, #29]
 800a648:	fb03 f101 	mul.w	r1, r3, r1
 800a64c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a654:	7f78      	ldrb	r0, [r7, #29]
 800a656:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a65a:	fb00 f303 	mul.w	r3, r0, r3
 800a65e:	440b      	add	r3, r1
 800a660:	121b      	asrs	r3, r3, #8
 800a662:	b21b      	sxth	r3, r3
 800a664:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a668:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800a66a:	4313      	orrs	r3, r2
 800a66c:	b21b      	sxth	r3, r3
 800a66e:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 800a670:	7dbb      	ldrb	r3, [r7, #22]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d005      	beq.n	800a682 <_UG_PutChar+0x44e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800a676:	8a7a      	ldrh	r2, [r7, #18]
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	4611      	mov	r1, r2
 800a67c:	2001      	movs	r0, #1
 800a67e:	4798      	blx	r3
 800a680:	e00f      	b.n	800a6a2 <_UG_PutChar+0x46e>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800a682:	4b19      	ldr	r3, [pc, #100]	; (800a6e8 <_UG_PutChar+0x4b4>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	88b9      	ldrh	r1, [r7, #4]
 800a68c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a68e:	440a      	add	r2, r1
 800a690:	b292      	uxth	r2, r2
 800a692:	b210      	sxth	r0, r2
 800a694:	8879      	ldrh	r1, [r7, #2]
 800a696:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a698:	440a      	add	r2, r1
 800a69a:	b292      	uxth	r2, r2
 800a69c:	b211      	sxth	r1, r2
 800a69e:	8a7a      	ldrh	r2, [r7, #18]
 800a6a0:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 800a6a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a6a8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a6aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	dbaf      	blt.n	800a612 <_UG_PutChar+0x3de>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	4a0c      	ldr	r2, [pc, #48]	; (800a6e8 <_UG_PutChar+0x4b4>)
 800a6b6:	6812      	ldr	r2, [r2, #0]
 800a6b8:	7d92      	ldrb	r2, [r2, #22]
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a6c0:	1a8a      	subs	r2, r1, r2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 800a6c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	853b      	strh	r3, [r7, #40]	; 0x28
 800a6cc:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <_UG_PutChar+0x4b4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	7ddb      	ldrb	r3, [r3, #23]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d398      	bcc.n	800a60c <_UG_PutChar+0x3d8>
     }
   }
   #endif
   return (actual_char_width);
 800a6da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3730      	adds	r7, #48	; 0x30
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000990 	.word	0x20000990

0800a6ec <_UG_UpdateObjects>:
   }
}
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	82fb      	strh	r3, [r7, #22]
 800a6fe:	e01f      	b.n	800a740 <_UG_UpdateObjects+0x54>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	8afb      	ldrh	r3, [r7, #22]
 800a706:	015b      	lsls	r3, r3, #5
 800a708:	4413      	add	r3, r2
 800a70a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800a712:	7bfb      	ldrb	r3, [r7, #15]
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10e      	bne.n	800a73a <_UG_UpdateObjects+0x4e>
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <_UG_UpdateObjects+0x4e>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	f003 0320 	and.w	r3, r3, #32
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d004      	beq.n	800a73a <_UG_UpdateObjects+0x4e>
         {
            obj->update(wnd,obj);
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	6939      	ldr	r1, [r7, #16]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 800a73a:	8afb      	ldrh	r3, [r7, #22]
 800a73c:	3301      	adds	r3, #1
 800a73e:	82fb      	strh	r3, [r7, #22]
 800a740:	8afa      	ldrh	r2, [r7, #22]
 800a742:	8abb      	ldrh	r3, [r7, #20]
 800a744:	429a      	cmp	r2, r3
 800a746:	d3db      	bcc.n	800a700 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 800a75c:	4b22      	ldr	r3, [pc, #136]	; (800a7e8 <_UG_HandleEvents+0x94>)
 800a75e:	2200      	movs	r2, #0
 800a760:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 800a762:	4b21      	ldr	r3, [pc, #132]	; (800a7e8 <_UG_HandleEvents+0x94>)
 800a764:	2202      	movs	r2, #2
 800a766:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800a76e:	2300      	movs	r3, #0
 800a770:	82fb      	strh	r3, [r7, #22]
 800a772:	e02f      	b.n	800a7d4 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	8afb      	ldrh	r3, [r7, #22]
 800a77a:	015b      	lsls	r3, r3, #5
 800a77c:	4413      	add	r3, r2
 800a77e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d11e      	bne.n	800a7ce <_UG_HandleEvents+0x7a>
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d019      	beq.n	800a7ce <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	7e9b      	ldrb	r3, [r3, #26]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d015      	beq.n	800a7ce <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 800a7a2:	4a11      	ldr	r2, [pc, #68]	; (800a7e8 <_UG_HandleEvents+0x94>)
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	7e1a      	ldrb	r2, [r3, #24]
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <_UG_HandleEvents+0x94>)
 800a7ae:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	7e5a      	ldrb	r2, [r3, #25]
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <_UG_HandleEvents+0x94>)
 800a7b6:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	7e9a      	ldrb	r2, [r3, #26]
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <_UG_HandleEvents+0x94>)
 800a7be:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c4:	4808      	ldr	r0, [pc, #32]	; (800a7e8 <_UG_HandleEvents+0x94>)
 800a7c6:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 800a7ce:	8afb      	ldrh	r3, [r7, #22]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	82fb      	strh	r3, [r7, #22]
 800a7d4:	8afa      	ldrh	r2, [r7, #22]
 800a7d6:	8abb      	ldrh	r3, [r7, #20]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d3cb      	bcc.n	800a774 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	200009a4 	.word	0x200009a4

0800a7ec <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 800a7ec:	b590      	push	{r4, r7, lr}
 800a7ee:	b08f      	sub	sp, #60	; 0x3c
 800a7f0:	af02      	add	r7, sp, #8
 800a7f2:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 8102 	beq.w	800aa02 <_UG_PutText+0x216>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 80fd 	beq.w	800aa02 <_UG_PutText+0x216>
     return;
   }

   UG_S16 ye=txt->a.ye;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	89db      	ldrh	r3, [r3, #14]
 800a80c:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	895b      	ldrh	r3, [r3, #10]
 800a812:	833b      	strh	r3, [r7, #24]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	3302      	adds	r3, #2
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	82fb      	strh	r3, [r7, #22]

   if ( (ye - ys) < char_height ){
 800a81e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a822:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a826:	1ad2      	subs	r2, r2, r3
 800a828:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	f2c0 80ea 	blt.w	800aa06 <_UG_PutText+0x21a>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	891b      	ldrh	r3, [r3, #8]
 800a836:	82bb      	strh	r3, [r7, #20]
   UG_S16 xe=txt->a.xe;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	899b      	ldrh	r3, [r3, #12]
 800a83c:	827b      	strh	r3, [r7, #18]
   UG_U8  align=txt->align;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7d1b      	ldrb	r3, [r3, #20]
 800a842:	747b      	strb	r3, [r7, #17]
   UG_S16 char_h_space=txt->h_space;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	8adb      	ldrh	r3, [r3, #22]
 800a848:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_v_space=txt->v_space;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	8b1b      	ldrh	r3, [r3, #24]
 800a84e:	81bb      	strh	r3, [r7, #12]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	623b      	str	r3, [r7, #32]
   char* c = str;
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	61fb      	str	r3, [r7, #28]

   _UG_FontSelect(txt->font);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff fc6a 	bl	800a138 <_UG_FontSelect>

   rc=1;
 800a864:	2301      	movs	r3, #1
 800a866:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	61fb      	str	r3, [r7, #28]
     }
     else{
       chr = *c++;
     }
     #else
     chr = *c++;
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	61fa      	str	r2, [r7, #28]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	72fb      	strb	r3, [r7, #11]
     #endif
     if(!chr) break;
 800a876:	7afb      	ldrb	r3, [r7, #11]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d006      	beq.n	800a88a <_UG_PutText+0x9e>
     if ( chr == '\n' ) rc++;
 800a87c:	7afb      	ldrb	r3, [r7, #11]
 800a87e:	2b0a      	cmp	r3, #10
 800a880:	d1f4      	bne.n	800a86c <_UG_PutText+0x80>
 800a882:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a884:	3301      	adds	r3, #1
 800a886:	85bb      	strh	r3, [r7, #44]	; 0x2c
     chr = *c++;
 800a888:	e7f0      	b.n	800a86c <_UG_PutText+0x80>
     if(!chr) break;
 800a88a:	bf00      	nop
   }

   yp = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 800a890:	7c7b      	ldrb	r3, [r7, #17]
 800a892:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a896:	2b00      	cmp	r3, #0
 800a898:	d01f      	beq.n	800a8da <_UG_PutText+0xee>
   {
      yp = ye - ys + 1;
 800a89a:	8b7a      	ldrh	r2, [r7, #26]
 800a89c:	8b3b      	ldrh	r3, [r7, #24]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 800a8a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8aa:	8afb      	ldrh	r3, [r7, #22]
 800a8ac:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800a8ae:	fb11 f303 	smulbb	r3, r1, r3
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 800a8ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	b299      	uxth	r1, r3
 800a8c2:	89bb      	ldrh	r3, [r7, #12]
 800a8c4:	fb11 f303 	smulbb	r3, r1, r3
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 800a8d0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f2c0 8098 	blt.w	800aa0a <_UG_PutText+0x21e>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 800a8da:	7c7b      	ldrb	r3, [r7, #17]
 800a8dc:	f003 0310 	and.w	r3, r3, #16
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <_UG_PutText+0x100>
 800a8e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a8e8:	105b      	asrs	r3, r3, #1
 800a8ea:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 800a8ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8ee:	8b3b      	ldrh	r3, [r7, #24]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 800a8fa:	6a3b      	ldr	r3, [r7, #32]
 800a8fc:	61fb      	str	r3, [r7, #28]
      wl = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        else{
          chr = *c++;
        }
        #else
        chr = *c++;
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	1c5a      	adds	r2, r3, #1
 800a906:	61fa      	str	r2, [r7, #28]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	72fb      	strb	r3, [r7, #11]
        #endif
        if( chr == 0 || chr == '\n'){
 800a90c:	7afb      	ldrb	r3, [r7, #11]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d01b      	beq.n	800a94a <_UG_PutText+0x15e>
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	2b0a      	cmp	r3, #10
 800a916:	d018      	beq.n	800a94a <_UG_PutText+0x15e>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 800a918:	7afb      	ldrb	r3, [r7, #11]
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff fabb 	bl	8009e98 <_UG_GetCharData>
 800a922:	4603      	mov	r3, r0
 800a924:	813b      	strh	r3, [r7, #8]
         if (w == -1){continue;}
 800a926:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a92a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a92e:	d00a      	beq.n	800a946 <_UG_PutText+0x15a>
         sl++;
 800a930:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a932:	3301      	adds	r3, #1
 800a934:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 800a936:	893a      	ldrh	r2, [r7, #8]
 800a938:	89fb      	ldrh	r3, [r7, #14]
 800a93a:	4413      	add	r3, r2
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a940:	4413      	add	r3, r2
 800a942:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a944:	e7dd      	b.n	800a902 <_UG_PutText+0x116>
         if (w == -1){continue;}
 800a946:	bf00      	nop
        chr = *c++;
 800a948:	e7db      	b.n	800a902 <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 800a94a:	89fb      	ldrh	r3, [r7, #14]
 800a94c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 800a952:	8a7a      	ldrh	r2, [r7, #18]
 800a954:	8abb      	ldrh	r3, [r7, #20]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	b29b      	uxth	r3, r3
 800a95a:	3301      	adds	r3, #1
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 800a960:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a962:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	b29b      	uxth	r3, r3
 800a968:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 800a96a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a96e:	2b00      	cmp	r3, #0
 800a970:	db4d      	blt.n	800aa0e <_UG_PutText+0x222>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 800a972:	7c7b      	ldrb	r3, [r7, #17]
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <_UG_PutText+0x196>
 800a97c:	2300      	movs	r3, #0
 800a97e:	853b      	strh	r3, [r7, #40]	; 0x28
 800a980:	e008      	b.n	800a994 <_UG_PutText+0x1a8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 800a982:	7c7b      	ldrb	r3, [r7, #17]
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <_UG_PutText+0x1a8>
 800a98c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a990:	105b      	asrs	r3, r3, #1
 800a992:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 800a994:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a996:	8abb      	ldrh	r3, [r7, #20]
 800a998:	4413      	add	r3, r2
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	853b      	strh	r3, [r7, #40]	; 0x28
         }
         else{
           chr = *str++;
         }
         #else
         chr = *str++;
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	623a      	str	r2, [r7, #32]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	72fb      	strb	r3, [r7, #11]
         #endif
         if ( chr == 0 ){
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d031      	beq.n	800aa12 <_UG_PutText+0x226>
           return;
         }
         else if(chr=='\n'){
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	2b0a      	cmp	r3, #10
 800a9b2:	d01c      	beq.n	800a9ee <_UG_PutText+0x202>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	8a1c      	ldrh	r4, [r3, #16]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	8a5b      	ldrh	r3, [r3, #18]
 800a9bc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a9c0:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 800a9c4:	7af8      	ldrb	r0, [r7, #11]
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	f7ff fc33 	bl	800a234 <_UG_PutChar>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	813b      	strh	r3, [r7, #8]
         if(w!=-1)
 800a9d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9da:	d0e0      	beq.n	800a99e <_UG_PutText+0x1b2>
           xp += w + char_h_space;
 800a9dc:	893a      	ldrh	r2, [r7, #8]
 800a9de:	89fb      	ldrh	r3, [r7, #14]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9e6:	4413      	add	r3, r2
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	853b      	strh	r3, [r7, #40]	; 0x28
         chr = *str++;
 800a9ec:	e7d7      	b.n	800a99e <_UG_PutText+0x1b2>
           break;
 800a9ee:	bf00      	nop
      }
      yp += char_height + char_v_space;
 800a9f0:	8afa      	ldrh	r2, [r7, #22]
 800a9f2:	89bb      	ldrh	r3, [r7, #12]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9fa:	4413      	add	r3, r2
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 800aa00:	e779      	b.n	800a8f6 <_UG_PutText+0x10a>
     return;
 800aa02:	bf00      	nop
 800aa04:	e006      	b.n	800aa14 <_UG_PutText+0x228>
     return;
 800aa06:	bf00      	nop
 800aa08:	e004      	b.n	800aa14 <_UG_PutText+0x228>
        return;
 800aa0a:	bf00      	nop
 800aa0c:	e002      	b.n	800aa14 <_UG_PutText+0x228>
      if ( xp < 0 ) break;
 800aa0e:	bf00      	nop
 800aa10:	e000      	b.n	800aa14 <_UG_PutText+0x228>
           return;
 800aa12:	bf00      	nop
   }
}
 800aa14:	3734      	adds	r7, #52	; 0x34
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd90      	pop	{r4, r7, pc}

0800aa1a <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 800aa1a:	b5b0      	push	{r4, r5, r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af02      	add	r7, sp, #8
 800aa20:	4604      	mov	r4, r0
 800aa22:	4608      	mov	r0, r1
 800aa24:	4611      	mov	r1, r2
 800aa26:	461a      	mov	r2, r3
 800aa28:	4623      	mov	r3, r4
 800aa2a:	80fb      	strh	r3, [r7, #6]
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	80bb      	strh	r3, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	807b      	strh	r3, [r7, #2]
 800aa34:	4613      	mov	r3, r2
 800aa36:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800aa38:	887b      	ldrh	r3, [r7, #2]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	b21c      	sxth	r4, r3
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	1c9a      	adds	r2, r3, #2
 800aa44:	61ba      	str	r2, [r7, #24]
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800aa4c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800aa50:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	4613      	mov	r3, r2
 800aa58:	4622      	mov	r2, r4
 800aa5a:	f7ff f869 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 800aa5e:	88bb      	ldrh	r3, [r7, #4]
 800aa60:	3301      	adds	r3, #1
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	b219      	sxth	r1, r3
 800aa66:	883b      	ldrh	r3, [r7, #0]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	b21c      	sxth	r4, r3
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	1c9a      	adds	r2, r3, #2
 800aa72:	61ba      	str	r2, [r7, #24]
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa7a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	4623      	mov	r3, r4
 800aa82:	f7ff f855 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	1c9a      	adds	r2, r3, #2
 800aa8a:	61ba      	str	r2, [r7, #24]
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	f9b7 4000 	ldrsh.w	r4, [r7]
 800aa92:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800aa96:	f9b7 1000 	ldrsh.w	r1, [r7]
 800aa9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	f7ff f845 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 800aaa6:	883b      	ldrh	r3, [r7, #0]
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	b21c      	sxth	r4, r3
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	1c9a      	adds	r2, r3, #2
 800aab2:	61ba      	str	r2, [r7, #24]
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800aaba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800aabe:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	4623      	mov	r3, r4
 800aac6:	f7ff f833 	bl	8009b30 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 800aaca:	88fb      	ldrh	r3, [r7, #6]
 800aacc:	3301      	adds	r3, #1
 800aace:	b29b      	uxth	r3, r3
 800aad0:	b218      	sxth	r0, r3
 800aad2:	88bb      	ldrh	r3, [r7, #4]
 800aad4:	3301      	adds	r3, #1
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	b219      	sxth	r1, r3
 800aada:	887b      	ldrh	r3, [r7, #2]
 800aadc:	3b02      	subs	r3, #2
 800aade:	b29b      	uxth	r3, r3
 800aae0:	b21c      	sxth	r4, r3
 800aae2:	88bb      	ldrh	r3, [r7, #4]
 800aae4:	3301      	adds	r3, #1
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	b21d      	sxth	r5, r3
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	1c9a      	adds	r2, r3, #2
 800aaee:	61ba      	str	r2, [r7, #24]
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	f7ff f81a 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 800aafc:	88fb      	ldrh	r3, [r7, #6]
 800aafe:	3301      	adds	r3, #1
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	b218      	sxth	r0, r3
 800ab04:	88bb      	ldrh	r3, [r7, #4]
 800ab06:	3302      	adds	r3, #2
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	b219      	sxth	r1, r3
 800ab0c:	88fb      	ldrh	r3, [r7, #6]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	b21c      	sxth	r4, r3
 800ab14:	883b      	ldrh	r3, [r7, #0]
 800ab16:	3b02      	subs	r3, #2
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	b21d      	sxth	r5, r3
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	1c9a      	adds	r2, r3, #2
 800ab20:	61ba      	str	r2, [r7, #24]
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	462b      	mov	r3, r5
 800ab28:	4622      	mov	r2, r4
 800ab2a:	f7ff f801 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 800ab2e:	88fb      	ldrh	r3, [r7, #6]
 800ab30:	3301      	adds	r3, #1
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	b218      	sxth	r0, r3
 800ab36:	883b      	ldrh	r3, [r7, #0]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	b219      	sxth	r1, r3
 800ab3e:	887b      	ldrh	r3, [r7, #2]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	b21c      	sxth	r4, r3
 800ab46:	883b      	ldrh	r3, [r7, #0]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	b21d      	sxth	r5, r3
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	1c9a      	adds	r2, r3, #2
 800ab52:	61ba      	str	r2, [r7, #24]
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	462b      	mov	r3, r5
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	f7fe ffe8 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800ab60:	887b      	ldrh	r3, [r7, #2]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	b218      	sxth	r0, r3
 800ab68:	88bb      	ldrh	r3, [r7, #4]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	b219      	sxth	r1, r3
 800ab70:	887b      	ldrh	r3, [r7, #2]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	b21c      	sxth	r4, r3
 800ab78:	883b      	ldrh	r3, [r7, #0]
 800ab7a:	3b02      	subs	r3, #2
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	b21d      	sxth	r5, r3
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	1c9a      	adds	r2, r3, #2
 800ab84:	61ba      	str	r2, [r7, #24]
 800ab86:	881b      	ldrh	r3, [r3, #0]
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	f7fe ffcf 	bl	8009b30 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	3302      	adds	r3, #2
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	b218      	sxth	r0, r3
 800ab9a:	88bb      	ldrh	r3, [r7, #4]
 800ab9c:	3302      	adds	r3, #2
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	b219      	sxth	r1, r3
 800aba2:	887b      	ldrh	r3, [r7, #2]
 800aba4:	3b03      	subs	r3, #3
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	b21c      	sxth	r4, r3
 800abaa:	88bb      	ldrh	r3, [r7, #4]
 800abac:	3302      	adds	r3, #2
 800abae:	b29b      	uxth	r3, r3
 800abb0:	b21d      	sxth	r5, r3
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	1c9a      	adds	r2, r3, #2
 800abb6:	61ba      	str	r2, [r7, #24]
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	462b      	mov	r3, r5
 800abbe:	4622      	mov	r2, r4
 800abc0:	f7fe ffb6 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 800abc4:	88fb      	ldrh	r3, [r7, #6]
 800abc6:	3302      	adds	r3, #2
 800abc8:	b29b      	uxth	r3, r3
 800abca:	b218      	sxth	r0, r3
 800abcc:	88bb      	ldrh	r3, [r7, #4]
 800abce:	3303      	adds	r3, #3
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	b219      	sxth	r1, r3
 800abd4:	88fb      	ldrh	r3, [r7, #6]
 800abd6:	3302      	adds	r3, #2
 800abd8:	b29b      	uxth	r3, r3
 800abda:	b21c      	sxth	r4, r3
 800abdc:	883b      	ldrh	r3, [r7, #0]
 800abde:	3b03      	subs	r3, #3
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	b21d      	sxth	r5, r3
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	1c9a      	adds	r2, r3, #2
 800abe8:	61ba      	str	r2, [r7, #24]
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	462b      	mov	r3, r5
 800abf0:	4622      	mov	r2, r4
 800abf2:	f7fe ff9d 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 800abf6:	88fb      	ldrh	r3, [r7, #6]
 800abf8:	3302      	adds	r3, #2
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	b218      	sxth	r0, r3
 800abfe:	883b      	ldrh	r3, [r7, #0]
 800ac00:	3b02      	subs	r3, #2
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	b219      	sxth	r1, r3
 800ac06:	887b      	ldrh	r3, [r7, #2]
 800ac08:	3b02      	subs	r3, #2
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	b21c      	sxth	r4, r3
 800ac0e:	883b      	ldrh	r3, [r7, #0]
 800ac10:	3b02      	subs	r3, #2
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	b21d      	sxth	r5, r3
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	1c9a      	adds	r2, r3, #2
 800ac1a:	61ba      	str	r2, [r7, #24]
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	462b      	mov	r3, r5
 800ac22:	4622      	mov	r2, r4
 800ac24:	f7fe ff84 	bl	8009b30 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 800ac28:	887b      	ldrh	r3, [r7, #2]
 800ac2a:	3b02      	subs	r3, #2
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	b218      	sxth	r0, r3
 800ac30:	88bb      	ldrh	r3, [r7, #4]
 800ac32:	3302      	adds	r3, #2
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	b219      	sxth	r1, r3
 800ac38:	887b      	ldrh	r3, [r7, #2]
 800ac3a:	3b02      	subs	r3, #2
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	b21a      	sxth	r2, r3
 800ac40:	883b      	ldrh	r3, [r7, #0]
 800ac42:	3b03      	subs	r3, #3
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	b21c      	sxth	r4, r3
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	4623      	mov	r3, r4
 800ac50:	f7fe ff6e 	bl	8009b30 <UG_DrawLine>
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bdb0      	pop	{r4, r5, r7, pc}

0800ac5c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	6039      	str	r1, [r7, #0]
 800ac66:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	d810      	bhi.n	800ac90 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800ac6e:	4b0b      	ldr	r3, [pc, #44]	; (800ac9c <UG_DriverRegister+0x40>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	3307      	adds	r3, #7
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800ac7e:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <UG_DriverRegister+0x40>)
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	3307      	adds	r3, #7
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	4413      	add	r3, r2
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	721a      	strb	r2, [r3, #8]
 800ac8e:	e000      	b.n	800ac92 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800ac90:	bf00      	nop
}
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	20000990 	.word	0x20000990

0800aca0 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 800aca6:	4b5d      	ldr	r3, [pc, #372]	; (800ae1c <UG_Update+0x17c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800acae:	f003 0301 	and.w	r3, r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00a      	beq.n	800accc <UG_Update+0x2c>
 800acb6:	4b59      	ldr	r3, [pc, #356]	; (800ae1c <UG_Update+0x17c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800acbe:	4b57      	ldr	r3, [pc, #348]	; (800ae1c <UG_Update+0x17c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f022 0201 	bic.w	r2, r2, #1
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 800accc:	4b53      	ldr	r3, [pc, #332]	; (800ae1c <UG_Update+0x17c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	4b52      	ldr	r3, [pc, #328]	; (800ae1c <UG_Update+0x17c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d071      	beq.n	800adc0 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 800acdc:	4b4f      	ldr	r3, [pc, #316]	; (800ae1c <UG_Update+0x17c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d06c      	beq.n	800adc0 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 800ace6:	4b4d      	ldr	r3, [pc, #308]	; (800ae1c <UG_Update+0x17c>)
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	4b4c      	ldr	r3, [pc, #304]	; (800ae1c <UG_Update+0x17c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	6892      	ldr	r2, [r2, #8]
 800acf0:	60da      	str	r2, [r3, #12]
         gui->active_window = gui->next_window;
 800acf2:	4b4a      	ldr	r3, [pc, #296]	; (800ae1c <UG_Update+0x17c>)
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	4b49      	ldr	r3, [pc, #292]	; (800ae1c <UG_Update+0x17c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6852      	ldr	r2, [r2, #4]
 800acfc:	609a      	str	r2, [r3, #8]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 800acfe:	4b47      	ldr	r3, [pc, #284]	; (800ae1c <UG_Update+0x17c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d045      	beq.n	800ad94 <UG_Update+0xf4>
 800ad08:	4b44      	ldr	r3, [pc, #272]	; (800ae1c <UG_Update+0x17c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	7d9b      	ldrb	r3, [r3, #22]
 800ad10:	f003 0302 	and.w	r3, r3, #2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d03d      	beq.n	800ad94 <UG_Update+0xf4>
 800ad18:	4b40      	ldr	r3, [pc, #256]	; (800ae1c <UG_Update+0x17c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	7a1b      	ldrb	r3, [r3, #8]
 800ad20:	f003 0308 	and.w	r3, r3, #8
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d035      	beq.n	800ad94 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 800ad28:	4b3c      	ldr	r3, [pc, #240]	; (800ae1c <UG_Update+0x17c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800ad32:	4b3a      	ldr	r3, [pc, #232]	; (800ae1c <UG_Update+0x17c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d123      	bne.n	800ad88 <UG_Update+0xe8>
 800ad40:	4b36      	ldr	r3, [pc, #216]	; (800ae1c <UG_Update+0x17c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800ad4a:	4b34      	ldr	r3, [pc, #208]	; (800ae1c <UG_Update+0x17c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d117      	bne.n	800ad88 <UG_Update+0xe8>
 800ad58:	4b30      	ldr	r3, [pc, #192]	; (800ae1c <UG_Update+0x17c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800ad62:	4b2e      	ldr	r3, [pc, #184]	; (800ae1c <UG_Update+0x17c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d10b      	bne.n	800ad88 <UG_Update+0xe8>
 800ad70:	4b2a      	ldr	r3, [pc, #168]	; (800ae1c <UG_Update+0x17c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800ad7a:	4b28      	ldr	r3, [pc, #160]	; (800ae1c <UG_Update+0x17c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d005      	beq.n	800ad94 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 800ad88:	4b24      	ldr	r3, [pc, #144]	; (800ae1c <UG_Update+0x17c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 f846 	bl	800ae20 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 800ad94:	4b21      	ldr	r3, [pc, #132]	; (800ae1c <UG_Update+0x17c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	7a1a      	ldrb	r2, [r3, #8]
 800ad9c:	4b1f      	ldr	r3, [pc, #124]	; (800ae1c <UG_Update+0x17c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ada6:	b2d2      	uxtb	r2, r2
 800ada8:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 800adaa:	4b1c      	ldr	r3, [pc, #112]	; (800ae1c <UG_Update+0x17c>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	7a1a      	ldrb	r2, [r3, #8]
 800adb2:	4b1a      	ldr	r3, [pc, #104]	; (800ae1c <UG_Update+0x17c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800adbc:	b2d2      	uxtb	r2, r2
 800adbe:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 800adc0:	4b16      	ldr	r3, [pc, #88]	; (800ae1c <UG_Update+0x17c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d018      	beq.n	800adfc <UG_Update+0x15c>
   {
      wnd = gui->active_window;
 800adca:	4b14      	ldr	r3, [pc, #80]	; (800ae1c <UG_Update+0x17c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	7a1b      	ldrb	r3, [r3, #8]
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f8c8 	bl	800af74 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7a1b      	ldrb	r3, [r3, #8]
 800ade8:	f003 0308 	and.w	r3, r3, #8
 800adec:	2b00      	cmp	r3, #0
 800adee:	d005      	beq.n	800adfc <UG_Update+0x15c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
         #endif
         _UG_UpdateObjects( wnd );
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff fc7b 	bl	800a6ec <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff fcac 	bl	800a754 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 800adfc:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <UG_Update+0x17c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <UG_Update+0x172>
     gui->device->flush();
 800ae08:	4b04      	ldr	r3, [pc, #16]	; (800ae1c <UG_Update+0x17c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	4798      	blx	r3
   }
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	20000990 	.word	0x20000990

0800ae20 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 800ae20:	b590      	push	{r4, r7, lr}
 800ae22:	b08f      	sub	sp, #60	; 0x3c
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 809a 	beq.w	800af64 <_UG_WindowDrawTitle+0x144>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	7a1b      	ldrb	r3, [r3, #8]
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 8093 	beq.w	800af64 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	89db      	ldrh	r3, [r3, #14]
 800ae42:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	8a1b      	ldrh	r3, [r3, #16]
 800ae48:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	8a5b      	ldrh	r3, [r3, #18]
 800ae4e:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	8a9b      	ldrh	r3, [r3, #20]
 800ae54:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	7d9b      	ldrb	r3, [r3, #22]
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00f      	beq.n	800ae82 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 800ae62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae64:	3303      	adds	r3, #3
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 800ae6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae6c:	3303      	adds	r3, #3
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 800ae72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ae74:	3b03      	subs	r3, #3
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 800ae7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae7c:	3b03      	subs	r3, #3
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 800ae82:	4b3b      	ldr	r3, [pc, #236]	; (800af70 <_UG_WindowDrawTitle+0x150>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d106      	bne.n	800ae9c <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae92:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae98:	83bb      	strh	r3, [r7, #28]
 800ae9a:	e005      	b.n	800aea8 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea0:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aea6:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aeb2:	4413      	add	r3, r2
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	b21c      	sxth	r4, r3
 800aebc:	8bfb      	ldrh	r3, [r7, #30]
 800aebe:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800aec2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800aec6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	4623      	mov	r3, r4
 800aece:	f7fe fdbd 	bl	8009a4c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 800aede:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aee0:	3303      	adds	r3, #3
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	b21b      	sxth	r3, r3
 800aee6:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 800aee8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aeea:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 800aeec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aeee:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aefa:	4413      	add	r3, r2
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	3b01      	subs	r3, #1
 800af00:	b29b      	uxth	r3, r3
 800af02:	b21b      	sxth	r3, r3
 800af04:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800af0c:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800af16:	b21b      	sxth	r3, r3
 800af18:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 800af20:	b21b      	sxth	r3, r3
 800af22:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 800af24:	f107 030c 	add.w	r3, r7, #12
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fc5f 	bl	800a7ec <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af34:	b29a      	uxth	r2, r3
 800af36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af38:	4413      	add	r3, r2
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	b219      	sxth	r1, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af44:	b29a      	uxth	r2, r3
 800af46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af48:	4413      	add	r3, r2
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	b21b      	sxth	r3, r3
 800af4e:	f649 5413 	movw	r4, #40211	; 0x9d13
 800af52:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800af56:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800af5a:	9400      	str	r4, [sp, #0]
 800af5c:	f7fe fde8 	bl	8009b30 <UG_DrawLine>
      return UG_RESULT_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	e001      	b.n	800af68 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 800af64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3734      	adds	r7, #52	; 0x34
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd90      	pop	{r4, r7, pc}
 800af70:	20000990 	.word	0x20000990

0800af74 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 800af74:	b590      	push	{r4, r7, lr}
 800af76:	b089      	sub	sp, #36	; 0x24
 800af78:	af02      	add	r7, sp, #8
 800af7a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	89db      	ldrh	r3, [r3, #14]
 800af80:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	8a1b      	ldrh	r3, [r3, #16]
 800af86:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	8a5b      	ldrh	r3, [r3, #18]
 800af8c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	8a9b      	ldrh	r3, [r3, #20]
 800af92:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	7a1b      	ldrb	r3, [r3, #8]
 800af98:	f023 0320 	bic.w	r3, r3, #32
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7a1b      	ldrb	r3, [r3, #8]
 800afa6:	f003 0308 	and.w	r3, r3, #8
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 8084 	beq.w	800b0b8 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	7d9b      	ldrb	r3, [r3, #22]
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d021      	beq.n	800b000 <_UG_WindowUpdate+0x8c>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	7a1b      	ldrb	r3, [r3, #8]
 800afc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d11b      	bne.n	800b000 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 800afc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800afcc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800afd0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800afd4:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800afd8:	4c42      	ldr	r4, [pc, #264]	; (800b0e4 <_UG_WindowUpdate+0x170>)
 800afda:	9400      	str	r4, [sp, #0]
 800afdc:	f7ff fd1d 	bl	800aa1a <_UG_DrawObjectFrame>
         xs+=3;
 800afe0:	8abb      	ldrh	r3, [r7, #20]
 800afe2:	3303      	adds	r3, #3
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 800afe8:	8a7b      	ldrh	r3, [r7, #18]
 800afea:	3303      	adds	r3, #3
 800afec:	b29b      	uxth	r3, r3
 800afee:	827b      	strh	r3, [r7, #18]
         xe-=3;
 800aff0:	8a3b      	ldrh	r3, [r7, #16]
 800aff2:	3b03      	subs	r3, #3
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	823b      	strh	r3, [r7, #16]
         ye-=3;
 800aff8:	89fb      	ldrh	r3, [r7, #14]
 800affa:	3b03      	subs	r3, #3
 800affc:	b29b      	uxth	r3, r3
 800affe:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	7d9b      	ldrb	r3, [r3, #22]
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d01a      	beq.n	800b042 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff ff07 	bl	800ae20 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b018:	b29a      	uxth	r2, r3
 800b01a:	8a7b      	ldrh	r3, [r7, #18]
 800b01c:	4413      	add	r3, r2
 800b01e:	b29b      	uxth	r3, r3
 800b020:	3301      	adds	r3, #1
 800b022:	b29b      	uxth	r3, r3
 800b024:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	7a1b      	ldrb	r3, [r3, #8]
 800b02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d007      	beq.n	800b042 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7a1b      	ldrb	r3, [r3, #8]
 800b036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	721a      	strb	r2, [r3, #8]
            return;
 800b040:	e04d      	b.n	800b0de <_UG_WindowUpdate+0x16a>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	899b      	ldrh	r3, [r3, #12]
 800b046:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800b04a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b04e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800b052:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	4623      	mov	r3, r4
 800b05a:	f7fe fcf7 	bl	8009a4c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 800b064:	2300      	movs	r3, #0
 800b066:	82fb      	strh	r3, [r7, #22]
 800b068:	e021      	b.n	800b0ae <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	8afb      	ldrh	r3, [r7, #22]
 800b070:	015b      	lsls	r3, r3, #5
 800b072:	4413      	add	r3, r2
 800b074:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d112      	bne.n	800b0a8 <_UG_WindowUpdate+0x134>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00c      	beq.n	800b0a8 <_UG_WindowUpdate+0x134>
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	f003 0308 	and.w	r3, r3, #8
 800b096:	2b00      	cmp	r3, #0
 800b098:	d006      	beq.n	800b0a8 <_UG_WindowUpdate+0x134>
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 800b0a8:	8afb      	ldrh	r3, [r7, #22]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	82fb      	strh	r3, [r7, #22]
 800b0ae:	8afa      	ldrh	r2, [r7, #22]
 800b0b0:	89bb      	ldrh	r3, [r7, #12]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d3d9      	bcc.n	800b06a <_UG_WindowUpdate+0xf6>
 800b0b6:	e012      	b.n	800b0de <_UG_WindowUpdate+0x16a>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 800b0d0:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <_UG_WindowUpdate+0x174>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	4623      	mov	r3, r4
 800b0da:	f7fe fcb7 	bl	8009a4c <UG_FillFrame>
   }
}
 800b0de:	371c      	adds	r7, #28
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd90      	pop	{r4, r7, pc}
 800b0e4:	08013c44 	.word	0x08013c44
 800b0e8:	20000990 	.word	0x20000990

0800b0ec <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 fcb2 	bl	800ca66 <VL53L0X_get_offset_calibration_data_micro_meter>
 800b102:	4603      	mov	r3, r0
 800b104:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800b106:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800b114:	b5b0      	push	{r4, r5, r7, lr}
 800b116:	b096      	sub	sp, #88	; 0x58
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b11c:	2300      	movs	r3, #0
 800b11e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800b122:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b126:	2b00      	cmp	r3, #0
 800b128:	d107      	bne.n	800b13a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800b12a:	2200      	movs	r2, #0
 800b12c:	2188      	movs	r1, #136	; 0x88
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f004 feaa 	bl	800fe88 <VL53L0X_WrByte>
 800b134:	4603      	mov	r3, r0
 800b136:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b148:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b152:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a9e      	ldr	r2, [pc, #632]	; (800b3d4 <VL53L0X_DataInit+0x2c0>)
 800b15a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a9d      	ldr	r2, [pc, #628]	; (800b3d8 <VL53L0X_DataInit+0x2c4>)
 800b162:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b16c:	f107 0310 	add.w	r3, r7, #16
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fac2 	bl	800b6fc <VL53L0X_GetDeviceParameters>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800b17e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b182:	2b00      	cmp	r3, #0
 800b184:	d112      	bne.n	800b1ac <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800b186:	2300      	movs	r3, #0
 800b188:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800b18a:	2300      	movs	r3, #0
 800b18c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f103 0410 	add.w	r4, r3, #16
 800b194:	f107 0510 	add.w	r5, r7, #16
 800b198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b19c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b19e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b1a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2264      	movs	r2, #100	; 0x64
 800b1b0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b1ba:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b1c4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b1ce:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b1da:	2201      	movs	r2, #1
 800b1dc:	2180      	movs	r1, #128	; 0x80
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f004 fe52 	bl	800fe88 <VL53L0X_WrByte>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	21ff      	movs	r1, #255	; 0xff
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f004 fe46 	bl	800fe88 <VL53L0X_WrByte>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b204:	4313      	orrs	r3, r2
 800b206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b20a:	2200      	movs	r2, #0
 800b20c:	2100      	movs	r1, #0
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f004 fe3a 	bl	800fe88 <VL53L0X_WrByte>
 800b214:	4603      	mov	r3, r0
 800b216:	461a      	mov	r2, r3
 800b218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b21c:	4313      	orrs	r3, r2
 800b21e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800b222:	f107 030f 	add.w	r3, r7, #15
 800b226:	461a      	mov	r2, r3
 800b228:	2191      	movs	r1, #145	; 0x91
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f004 feae 	bl	800ff8c <VL53L0X_RdByte>
 800b230:	4603      	mov	r3, r0
 800b232:	461a      	mov	r2, r3
 800b234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b238:	4313      	orrs	r3, r2
 800b23a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800b23e:	7bfa      	ldrb	r2, [r7, #15]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b246:	2201      	movs	r2, #1
 800b248:	2100      	movs	r1, #0
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f004 fe1c 	bl	800fe88 <VL53L0X_WrByte>
 800b250:	4603      	mov	r3, r0
 800b252:	461a      	mov	r2, r3
 800b254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b258:	4313      	orrs	r3, r2
 800b25a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b25e:	2200      	movs	r2, #0
 800b260:	21ff      	movs	r1, #255	; 0xff
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f004 fe10 	bl	800fe88 <VL53L0X_WrByte>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b270:	4313      	orrs	r3, r2
 800b272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b276:	2200      	movs	r2, #0
 800b278:	2180      	movs	r1, #128	; 0x80
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f004 fe04 	bl	800fe88 <VL53L0X_WrByte>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b288:	4313      	orrs	r3, r2
 800b28a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b28e:	2300      	movs	r3, #0
 800b290:	653b      	str	r3, [r7, #80]	; 0x50
 800b292:	e014      	b.n	800b2be <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800b294:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d114      	bne.n	800b2c6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800b29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fd35 	bl	800bd14 <VL53L0X_SetLimitCheckEnable>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b2b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	653b      	str	r3, [r7, #80]	; 0x50
 800b2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2c0:	2b05      	cmp	r3, #5
 800b2c2:	dde7      	ble.n	800b294 <VL53L0X_DataInit+0x180>
 800b2c4:	e000      	b.n	800b2c8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800b2c6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800b2c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d107      	bne.n	800b2e0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2102      	movs	r1, #2
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fd1d 	bl	800bd14 <VL53L0X_SetLimitCheckEnable>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b2e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d107      	bne.n	800b2f8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2103      	movs	r1, #3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fd11 	bl	800bd14 <VL53L0X_SetLimitCheckEnable>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b2f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d107      	bne.n	800b310 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b300:	2200      	movs	r2, #0
 800b302:	2104      	movs	r1, #4
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 fd05 	bl	800bd14 <VL53L0X_SetLimitCheckEnable>
 800b30a:	4603      	mov	r3, r0
 800b30c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b310:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b314:	2b00      	cmp	r3, #0
 800b316:	d107      	bne.n	800b328 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b318:	2200      	movs	r2, #0
 800b31a:	2105      	movs	r1, #5
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fcf9 	bl	800bd14 <VL53L0X_SetLimitCheckEnable>
 800b322:	4603      	mov	r3, r0
 800b324:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800b328:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d108      	bne.n	800b342 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b330:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800b334:	2100      	movs	r1, #0
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fd9c 	bl	800be74 <VL53L0X_SetLimitCheckValue>
 800b33c:	4603      	mov	r3, r0
 800b33e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b342:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b346:	2b00      	cmp	r3, #0
 800b348:	d108      	bne.n	800b35c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b34a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b34e:	2101      	movs	r1, #1
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fd8f 	bl	800be74 <VL53L0X_SetLimitCheckValue>
 800b356:	4603      	mov	r3, r0
 800b358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b35c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b360:	2b00      	cmp	r3, #0
 800b362:	d108      	bne.n	800b376 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b364:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800b368:	2102      	movs	r1, #2
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fd82 	bl	800be74 <VL53L0X_SetLimitCheckValue>
 800b370:	4603      	mov	r3, r0
 800b372:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b376:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d107      	bne.n	800b38e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b37e:	2200      	movs	r2, #0
 800b380:	2103      	movs	r1, #3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fd76 	bl	800be74 <VL53L0X_SetLimitCheckValue>
 800b388:	4603      	mov	r3, r0
 800b38a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b38e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10f      	bne.n	800b3b6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	22ff      	movs	r2, #255	; 0xff
 800b39a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b39e:	22ff      	movs	r2, #255	; 0xff
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f004 fd70 	bl	800fe88 <VL53L0X_WrByte>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b3b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d103      	bne.n	800b3c6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800b3c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3758      	adds	r7, #88	; 0x58
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	00016b85 	.word	0x00016b85
 800b3d8:	000970a4 	.word	0x000970a4

0800b3dc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800b3dc:	b5b0      	push	{r4, r5, r7, lr}
 800b3de:	b09e      	sub	sp, #120	; 0x78
 800b3e0:	af02      	add	r7, sp, #8
 800b3e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800b3ea:	f107 031c 	add.w	r3, r7, #28
 800b3ee:	2240      	movs	r2, #64	; 0x40
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f007 fb3e 	bl	8012a74 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800b418:	2101      	movs	r1, #1
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f002 fa79 	bl	800d912 <VL53L0X_get_info_from_device>
 800b420:	4603      	mov	r3, r0
 800b422:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800b42c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800b438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d80d      	bhi.n	800b45c <VL53L0X_StaticInit+0x80>
 800b440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b444:	2b01      	cmp	r3, #1
 800b446:	d102      	bne.n	800b44e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800b448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b44a:	2b20      	cmp	r3, #32
 800b44c:	d806      	bhi.n	800b45c <VL53L0X_StaticInit+0x80>
 800b44e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10e      	bne.n	800b474 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800b456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b458:	2b0c      	cmp	r3, #12
 800b45a:	d90b      	bls.n	800b474 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800b45c:	f107 0218 	add.w	r2, r7, #24
 800b460:	f107 0314 	add.w	r3, r7, #20
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f001 fcf8 	bl	800ce5c <VL53L0X_perform_ref_spad_management>
 800b46c:	4603      	mov	r3, r0
 800b46e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b472:	e009      	b.n	800b488 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800b474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b478:	461a      	mov	r2, r3
 800b47a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f001 fef9 	bl	800d274 <VL53L0X_set_reference_spads>
 800b482:	4603      	mov	r3, r0
 800b484:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800b488:	4b94      	ldr	r3, [pc, #592]	; (800b6dc <VL53L0X_StaticInit+0x300>)
 800b48a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800b48c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10f      	bne.n	800b4b4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800b49a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800b49e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d104      	bne.n	800b4b0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b4ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4ae:	e001      	b.n	800b4b4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800b4b0:	4b8a      	ldr	r3, [pc, #552]	; (800b6dc <VL53L0X_StaticInit+0x300>)
 800b4b2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b4b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d106      	bne.n	800b4ca <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800b4bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f003 fdcc 	bl	800f05c <VL53L0X_load_tuning_settings>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800b4ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10a      	bne.n	800b4e8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	2304      	movs	r3, #4
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2100      	movs	r1, #0
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 f8f1 	bl	800c6c4 <VL53L0X_SetGpioConfig>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b4e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d121      	bne.n	800b534 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	21ff      	movs	r1, #255	; 0xff
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f004 fcc7 	bl	800fe88 <VL53L0X_WrByte>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800b500:	f107 031a 	add.w	r3, r7, #26
 800b504:	461a      	mov	r2, r3
 800b506:	2184      	movs	r1, #132	; 0x84
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f004 fd69 	bl	800ffe0 <VL53L0X_RdWord>
 800b50e:	4603      	mov	r3, r0
 800b510:	461a      	mov	r2, r3
 800b512:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b516:	4313      	orrs	r3, r2
 800b518:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b51c:	2200      	movs	r2, #0
 800b51e:	21ff      	movs	r1, #255	; 0xff
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f004 fcb1 	bl	800fe88 <VL53L0X_WrByte>
 800b526:	4603      	mov	r3, r0
 800b528:	461a      	mov	r2, r3
 800b52a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b52e:	4313      	orrs	r3, r2
 800b530:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b534:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d105      	bne.n	800b548 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800b53c:	8b7b      	ldrh	r3, [r7, #26]
 800b53e:	011b      	lsls	r3, r3, #4
 800b540:	461a      	mov	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800b548:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d108      	bne.n	800b562 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b550:	f107 031c 	add.w	r3, r7, #28
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f8d0 	bl	800b6fc <VL53L0X_GetDeviceParameters>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800b562:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b566:	2b00      	cmp	r3, #0
 800b568:	d110      	bne.n	800b58c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b56a:	f107 0319 	add.w	r3, r7, #25
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f992 	bl	800b89a <VL53L0X_GetFractionEnable>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800b57c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b580:	2b00      	cmp	r3, #0
 800b582:	d103      	bne.n	800b58c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b584:	7e7a      	ldrb	r2, [r7, #25]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b58c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10e      	bne.n	800b5b2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f103 0410 	add.w	r4, r3, #16
 800b59a:	f107 051c 	add.w	r5, r7, #28
 800b59e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b5ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800b5b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d111      	bne.n	800b5de <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800b5ba:	f107 0319 	add.w	r3, r7, #25
 800b5be:	461a      	mov	r2, r3
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f004 fce2 	bl	800ff8c <VL53L0X_RdByte>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800b5ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d103      	bne.n	800b5de <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b5d6:	7e7a      	ldrb	r2, [r7, #25]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800b5de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d107      	bne.n	800b5f6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f9ca 	bl	800b984 <VL53L0X_SetSequenceStepEnable>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b5f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d107      	bne.n	800b60e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b5fe:	2200      	movs	r2, #0
 800b600:	2102      	movs	r1, #2
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f9be 	bl	800b984 <VL53L0X_SetSequenceStepEnable>
 800b608:	4603      	mov	r3, r0
 800b60a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b60e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b612:	2b00      	cmp	r3, #0
 800b614:	d103      	bne.n	800b61e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2203      	movs	r2, #3
 800b61a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b61e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b622:	2b00      	cmp	r3, #0
 800b624:	d109      	bne.n	800b63a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b626:	f107 0313 	add.w	r3, r7, #19
 800b62a:	461a      	mov	r2, r3
 800b62c:	2100      	movs	r1, #0
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f990 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800b634:	4603      	mov	r3, r0
 800b636:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b63a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d103      	bne.n	800b64a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b642:	7cfa      	ldrb	r2, [r7, #19]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b64a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d109      	bne.n	800b666 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b652:	f107 0313 	add.w	r3, r7, #19
 800b656:	461a      	mov	r2, r3
 800b658:	2101      	movs	r1, #1
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f97a 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800b660:	4603      	mov	r3, r0
 800b662:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b666:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d103      	bne.n	800b676 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b66e:	7cfa      	ldrb	r2, [r7, #19]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d109      	bne.n	800b692 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800b67e:	f107 030c 	add.w	r3, r7, #12
 800b682:	461a      	mov	r2, r3
 800b684:	2103      	movs	r1, #3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f002 fec4 	bl	800e414 <get_sequence_step_timeout>
 800b68c:	4603      	mov	r3, r0
 800b68e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b692:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b696:	2b00      	cmp	r3, #0
 800b698:	d103      	bne.n	800b6a2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b6a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d109      	bne.n	800b6be <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800b6aa:	f107 030c 	add.w	r3, r7, #12
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	2104      	movs	r1, #4
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f002 feae 	bl	800e414 <get_sequence_step_timeout>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b6be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d103      	bne.n	800b6ce <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3770      	adds	r7, #112	; 0x70
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20000200 	.word	0x20000200

0800b6e0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b6e8:	239d      	movs	r3, #157	; 0x9d
 800b6ea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b6ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f8b0 	bl	800b874 <VL53L0X_GetDeviceMode>
 800b714:	4603      	mov	r3, r0
 800b716:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d107      	bne.n	800b730 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fa78 	bl	800bc1c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2200      	movs	r2, #0
 800b73c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d107      	bne.n	800b756 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	3310      	adds	r3, #16
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 faae 	bl	800bcae <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b752:	4603      	mov	r3, r0
 800b754:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d107      	bne.n	800b76e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	3314      	adds	r3, #20
 800b762:	4619      	mov	r1, r3
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff fcc1 	bl	800b0ec <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d134      	bne.n	800b7e0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b776:	2300      	movs	r3, #0
 800b778:	60bb      	str	r3, [r7, #8]
 800b77a:	e02a      	b.n	800b7d2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d12a      	bne.n	800b7da <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	b299      	uxth	r1, r3
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	3308      	adds	r3, #8
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4413      	add	r3, r2
 800b792:	3304      	adds	r3, #4
 800b794:	461a      	mov	r2, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fbce 	bl	800bf38 <VL53L0X_GetLimitCheckValue>
 800b79c:	4603      	mov	r3, r0
 800b79e:	461a      	mov	r2, r3
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d117      	bne.n	800b7de <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	b299      	uxth	r1, r3
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	3318      	adds	r3, #24
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fb35 	bl	800be2c <VL53L0X_GetLimitCheckEnable>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	60bb      	str	r3, [r7, #8]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	2b05      	cmp	r3, #5
 800b7d6:	ddd1      	ble.n	800b77c <VL53L0X_GetDeviceParameters+0x80>
 800b7d8:	e002      	b.n	800b7e0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800b7da:	bf00      	nop
 800b7dc:	e000      	b.n	800b7e0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b7de:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b7e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d107      	bne.n	800b7f8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	333c      	adds	r3, #60	; 0x3c
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fc30 	bl	800c054 <VL53L0X_GetWrapAroundCheckEnable>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b7f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d107      	bne.n	800b810 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	3304      	adds	r3, #4
 800b804:	4619      	mov	r1, r3
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f879 	bl	800b8fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b810:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b82c:	78fb      	ldrb	r3, [r7, #3]
 800b82e:	2b15      	cmp	r3, #21
 800b830:	bf8c      	ite	hi
 800b832:	2201      	movhi	r2, #1
 800b834:	2200      	movls	r2, #0
 800b836:	b2d2      	uxtb	r2, r2
 800b838:	2a00      	cmp	r2, #0
 800b83a:	d10e      	bne.n	800b85a <VL53L0X_SetDeviceMode+0x3e>
 800b83c:	2201      	movs	r2, #1
 800b83e:	409a      	lsls	r2, r3
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <VL53L0X_SetDeviceMode+0x54>)
 800b842:	4013      	ands	r3, r2
 800b844:	2b00      	cmp	r3, #0
 800b846:	bf14      	ite	ne
 800b848:	2301      	movne	r3, #1
 800b84a:	2300      	moveq	r3, #0
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	78fa      	ldrb	r2, [r7, #3]
 800b856:	741a      	strb	r2, [r3, #16]
		break;
 800b858:	e001      	b.n	800b85e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b85a:	23f8      	movs	r3, #248	; 0xf8
 800b85c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	0030000b 	.word	0x0030000b

0800b874 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	7c1a      	ldrb	r2, [r3, #16]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	2109      	movs	r1, #9
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f004 fb6d 	bl	800ff8c <VL53L0X_RdByte>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d106      	bne.n	800b8cc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	f003 0301 	and.w	r3, r3, #1
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b8cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f003 fa26 	bl	800ed3a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b8f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b908:	2300      	movs	r3, #0
 800b90a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f003 faf3 	bl	800eefa <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	460b      	mov	r3, r1
 800b92e:	70fb      	strb	r3, [r7, #3]
 800b930:	4613      	mov	r3, r2
 800b932:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800b938:	78ba      	ldrb	r2, [r7, #2]
 800b93a:	78fb      	ldrb	r3, [r7, #3]
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f002 ff3b 	bl	800e7ba <VL53L0X_set_vcsel_pulse_period>
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	460b      	mov	r3, r1
 800b95e:	607a      	str	r2, [r7, #4]
 800b960:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b962:	2300      	movs	r3, #0
 800b964:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800b966:	7afb      	ldrb	r3, [r7, #11]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	4619      	mov	r1, r3
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f003 f9ad 	bl	800eccc <VL53L0X_get_vcsel_pulse_period>
 800b972:	4603      	mov	r3, r0
 800b974:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b976:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3718      	adds	r7, #24
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
 800b990:	4613      	mov	r3, r2
 800b992:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b994:	2300      	movs	r3, #0
 800b996:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b9a0:	f107 030f 	add.w	r3, r7, #15
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f004 faef 	bl	800ff8c <VL53L0X_RdByte>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800b9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d15a      	bne.n	800ba74 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800b9be:	78bb      	ldrb	r3, [r7, #2]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d12b      	bne.n	800ba1c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	2b04      	cmp	r3, #4
 800b9c8:	d825      	bhi.n	800ba16 <VL53L0X_SetSequenceStepEnable+0x92>
 800b9ca:	a201      	add	r2, pc, #4	; (adr r2, 800b9d0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800b9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d0:	0800b9e5 	.word	0x0800b9e5
 800b9d4:	0800b9ef 	.word	0x0800b9ef
 800b9d8:	0800b9f9 	.word	0x0800b9f9
 800b9dc:	0800ba03 	.word	0x0800ba03
 800b9e0:	0800ba0d 	.word	0x0800ba0d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	f043 0310 	orr.w	r3, r3, #16
 800b9ea:	75bb      	strb	r3, [r7, #22]
				break;
 800b9ec:	e043      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800b9ee:	7dbb      	ldrb	r3, [r7, #22]
 800b9f0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800b9f4:	75bb      	strb	r3, [r7, #22]
				break;
 800b9f6:	e03e      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800b9f8:	7dbb      	ldrb	r3, [r7, #22]
 800b9fa:	f043 0304 	orr.w	r3, r3, #4
 800b9fe:	75bb      	strb	r3, [r7, #22]
				break;
 800ba00:	e039      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800ba02:	7dbb      	ldrb	r3, [r7, #22]
 800ba04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba08:	75bb      	strb	r3, [r7, #22]
				break;
 800ba0a:	e034      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800ba0c:	7dbb      	ldrb	r3, [r7, #22]
 800ba0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba12:	75bb      	strb	r3, [r7, #22]
				break;
 800ba14:	e02f      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba16:	23fc      	movs	r3, #252	; 0xfc
 800ba18:	75fb      	strb	r3, [r7, #23]
 800ba1a:	e02c      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800ba1c:	78fb      	ldrb	r3, [r7, #3]
 800ba1e:	2b04      	cmp	r3, #4
 800ba20:	d825      	bhi.n	800ba6e <VL53L0X_SetSequenceStepEnable+0xea>
 800ba22:	a201      	add	r2, pc, #4	; (adr r2, 800ba28 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800ba24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba28:	0800ba3d 	.word	0x0800ba3d
 800ba2c:	0800ba47 	.word	0x0800ba47
 800ba30:	0800ba51 	.word	0x0800ba51
 800ba34:	0800ba5b 	.word	0x0800ba5b
 800ba38:	0800ba65 	.word	0x0800ba65
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800ba3c:	7dbb      	ldrb	r3, [r7, #22]
 800ba3e:	f023 0310 	bic.w	r3, r3, #16
 800ba42:	75bb      	strb	r3, [r7, #22]
				break;
 800ba44:	e017      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800ba46:	7dbb      	ldrb	r3, [r7, #22]
 800ba48:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800ba4c:	75bb      	strb	r3, [r7, #22]
				break;
 800ba4e:	e012      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800ba50:	7dbb      	ldrb	r3, [r7, #22]
 800ba52:	f023 0304 	bic.w	r3, r3, #4
 800ba56:	75bb      	strb	r3, [r7, #22]
				break;
 800ba58:	e00d      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800ba5a:	7dbb      	ldrb	r3, [r7, #22]
 800ba5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba60:	75bb      	strb	r3, [r7, #22]
				break;
 800ba62:	e008      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800ba64:	7dbb      	ldrb	r3, [r7, #22]
 800ba66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba6a:	75bb      	strb	r3, [r7, #22]
				break;
 800ba6c:	e003      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba6e:	23fc      	movs	r3, #252	; 0xfc
 800ba70:	75fb      	strb	r3, [r7, #23]
 800ba72:	e000      	b.n	800ba76 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800ba74:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
 800ba78:	7dba      	ldrb	r2, [r7, #22]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d01e      	beq.n	800babc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800ba7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d107      	bne.n	800ba96 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800ba86:	7dbb      	ldrb	r3, [r7, #22]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f004 f9fb 	bl	800fe88 <VL53L0X_WrByte>
 800ba92:	4603      	mov	r3, r0
 800ba94:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800ba96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d103      	bne.n	800baa6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	7dba      	ldrb	r2, [r7, #22]
 800baa2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800baa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d106      	bne.n	800babc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800bab4:	6939      	ldr	r1, [r7, #16]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff ff0e 	bl	800b8d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800babc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	607b      	str	r3, [r7, #4]
 800bad2:	460b      	mov	r3, r1
 800bad4:	72fb      	strb	r3, [r7, #11]
 800bad6:	4613      	mov	r3, r2
 800bad8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bada:	2300      	movs	r3, #0
 800badc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800bae4:	7afb      	ldrb	r3, [r7, #11]
 800bae6:	2b04      	cmp	r3, #4
 800bae8:	d836      	bhi.n	800bb58 <sequence_step_enabled+0x90>
 800baea:	a201      	add	r2, pc, #4	; (adr r2, 800baf0 <sequence_step_enabled+0x28>)
 800baec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf0:	0800bb05 	.word	0x0800bb05
 800baf4:	0800bb17 	.word	0x0800bb17
 800baf8:	0800bb29 	.word	0x0800bb29
 800bafc:	0800bb3b 	.word	0x0800bb3b
 800bb00:	0800bb4d 	.word	0x0800bb4d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800bb04:	7abb      	ldrb	r3, [r7, #10]
 800bb06:	111b      	asrs	r3, r3, #4
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	701a      	strb	r2, [r3, #0]
		break;
 800bb14:	e022      	b.n	800bb5c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800bb16:	7abb      	ldrb	r3, [r7, #10]
 800bb18:	10db      	asrs	r3, r3, #3
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	701a      	strb	r2, [r3, #0]
		break;
 800bb26:	e019      	b.n	800bb5c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800bb28:	7abb      	ldrb	r3, [r7, #10]
 800bb2a:	109b      	asrs	r3, r3, #2
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	701a      	strb	r2, [r3, #0]
		break;
 800bb38:	e010      	b.n	800bb5c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800bb3a:	7abb      	ldrb	r3, [r7, #10]
 800bb3c:	119b      	asrs	r3, r3, #6
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	701a      	strb	r2, [r3, #0]
		break;
 800bb4a:	e007      	b.n	800bb5c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800bb4c:	7abb      	ldrb	r3, [r7, #10]
 800bb4e:	09db      	lsrs	r3, r3, #7
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	701a      	strb	r2, [r3, #0]
		break;
 800bb56:	e001      	b.n	800bb5c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb58:	23fc      	movs	r3, #252	; 0xfc
 800bb5a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	371c      	adds	r7, #28
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bb7e:	f107 030e 	add.w	r3, r7, #14
 800bb82:	461a      	mov	r2, r3
 800bb84:	2101      	movs	r1, #1
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f004 fa00 	bl	800ff8c <VL53L0X_RdByte>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800bb90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d107      	bne.n	800bba8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800bb98:	7bba      	ldrb	r2, [r7, #14]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7ff ff92 	bl	800bac8 <sequence_step_enabled>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d108      	bne.n	800bbc2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800bbb0:	7bba      	ldrb	r2, [r7, #14]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	3302      	adds	r3, #2
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff ff85 	bl	800bac8 <sequence_step_enabled>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bbc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d108      	bne.n	800bbdc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800bbca:	7bba      	ldrb	r2, [r7, #14]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	2102      	movs	r1, #2
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff ff78 	bl	800bac8 <sequence_step_enabled>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bbdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d108      	bne.n	800bbf6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800bbe4:	7bba      	ldrb	r2, [r7, #14]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	3303      	adds	r3, #3
 800bbea:	2103      	movs	r1, #3
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7ff ff6b 	bl	800bac8 <sequence_step_enabled>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d108      	bne.n	800bc10 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800bbfe:	7bba      	ldrb	r2, [r7, #14]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	3304      	adds	r3, #4
 800bc04:	2104      	movs	r1, #4
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7ff ff5e 	bl	800bac8 <sequence_step_enabled>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bc10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc26:	2300      	movs	r3, #0
 800bc28:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800bc2a:	f107 030c 	add.w	r3, r7, #12
 800bc2e:	461a      	mov	r2, r3
 800bc30:	21f8      	movs	r1, #248	; 0xf8
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f004 f9d4 	bl	800ffe0 <VL53L0X_RdWord>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800bc3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d108      	bne.n	800bc56 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800bc44:	f107 0308 	add.w	r3, r7, #8
 800bc48:	461a      	mov	r2, r3
 800bc4a:	2104      	movs	r1, #4
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f004 f9ff 	bl	8010050 <VL53L0X_RdDWord>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bc56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10c      	bne.n	800bc78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800bc5e:	89bb      	ldrh	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d005      	beq.n	800bc70 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	89ba      	ldrh	r2, [r7, #12]
 800bc68:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bc78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7f1b      	ldrb	r3, [r3, #28]
 800bc96:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	7bba      	ldrb	r2, [r7, #14]
 800bc9c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bc9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b086      	sub	sp, #24
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800bcbc:	f107 030e 	add.w	r3, r7, #14
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	2120      	movs	r1, #32
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f004 f98b 	bl	800ffe0 <VL53L0X_RdWord>
 800bcca:	4603      	mov	r3, r0
 800bccc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800bcce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d118      	bne.n	800bd08 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800bcd6:	89fb      	ldrh	r3, [r7, #14]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d109      	bne.n	800bcf0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a1b      	ldr	r3, [r3, #32]
 800bce0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	771a      	strb	r2, [r3, #28]
 800bcee:	e00b      	b.n	800bd08 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800bcf0:	89fb      	ldrh	r3, [r7, #14]
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	807b      	strh	r3, [r7, #2]
 800bd20:	4613      	mov	r3, r2
 800bd22:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd24:	2300      	movs	r3, #0
 800bd26:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bd34:	887b      	ldrh	r3, [r7, #2]
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	d902      	bls.n	800bd40 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bd3a:	23fc      	movs	r3, #252	; 0xfc
 800bd3c:	75fb      	strb	r3, [r7, #23]
 800bd3e:	e05b      	b.n	800bdf8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800bd40:	787b      	ldrb	r3, [r7, #1]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d106      	bne.n	800bd54 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	73bb      	strb	r3, [r7, #14]
 800bd52:	e00a      	b.n	800bd6a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bd54:	887b      	ldrh	r3, [r7, #2]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	330c      	adds	r3, #12
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800bd66:	2301      	movs	r3, #1
 800bd68:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800bd6a:	887b      	ldrh	r3, [r7, #2]
 800bd6c:	2b05      	cmp	r3, #5
 800bd6e:	d841      	bhi.n	800bdf4 <VL53L0X_SetLimitCheckEnable+0xe0>
 800bd70:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <VL53L0X_SetLimitCheckEnable+0x64>)
 800bd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd76:	bf00      	nop
 800bd78:	0800bd91 	.word	0x0800bd91
 800bd7c:	0800bd9b 	.word	0x0800bd9b
 800bd80:	0800bdb1 	.word	0x0800bdb1
 800bd84:	0800bdbb 	.word	0x0800bdbb
 800bd88:	0800bdc5 	.word	0x0800bdc5
 800bd8c:	0800bddd 	.word	0x0800bddd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7bfa      	ldrb	r2, [r7, #15]
 800bd94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800bd98:	e02e      	b.n	800bdf8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	461a      	mov	r2, r3
 800bda2:	2144      	movs	r1, #68	; 0x44
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f004 f893 	bl	800fed0 <VL53L0X_WrWord>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	75fb      	strb	r3, [r7, #23]

			break;
 800bdae:	e023      	b.n	800bdf8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	7bfa      	ldrb	r2, [r7, #15]
 800bdb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800bdb8:	e01e      	b.n	800bdf8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	7bfa      	ldrb	r2, [r7, #15]
 800bdbe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800bdc2:	e019      	b.n	800bdf8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800bdca:	7b7b      	ldrb	r3, [r7, #13]
 800bdcc:	22fe      	movs	r2, #254	; 0xfe
 800bdce:	2160      	movs	r1, #96	; 0x60
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f004 f8a7 	bl	800ff24 <VL53L0X_UpdateByte>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800bdda:	e00d      	b.n	800bdf8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	011b      	lsls	r3, r3, #4
 800bde0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800bde2:	7b7b      	ldrb	r3, [r7, #13]
 800bde4:	22ef      	movs	r2, #239	; 0xef
 800bde6:	2160      	movs	r1, #96	; 0x60
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f004 f89b 	bl	800ff24 <VL53L0X_UpdateByte>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800bdf2:	e001      	b.n	800bdf8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bdf4:	23fc      	movs	r3, #252	; 0xfc
 800bdf6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bdf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10f      	bne.n	800be20 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800be00:	787b      	ldrb	r3, [r7, #1]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d106      	bne.n	800be14 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800be06:	887b      	ldrh	r3, [r7, #2]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	4413      	add	r3, r2
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800be12:	e005      	b.n	800be20 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800be14:	887b      	ldrh	r3, [r7, #2]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	4413      	add	r3, r2
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b087      	sub	sp, #28
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	460b      	mov	r3, r1
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be3a:	2300      	movs	r3, #0
 800be3c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800be3e:	897b      	ldrh	r3, [r7, #10]
 800be40:	2b05      	cmp	r3, #5
 800be42:	d905      	bls.n	800be50 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be44:	23fc      	movs	r3, #252	; 0xfc
 800be46:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	701a      	strb	r2, [r3, #0]
 800be4e:	e008      	b.n	800be62 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800be50:	897b      	ldrh	r3, [r7, #10]
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	4413      	add	r3, r2
 800be56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be5a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	7dba      	ldrb	r2, [r7, #22]
 800be60:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800be62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be66:	4618      	mov	r0, r3
 800be68:	371c      	adds	r7, #28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
	...

0800be74 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	460b      	mov	r3, r1
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be82:	2300      	movs	r3, #0
 800be84:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800be86:	897b      	ldrh	r3, [r7, #10]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	4413      	add	r3, r2
 800be8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be90:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800be92:	7dbb      	ldrb	r3, [r7, #22]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d107      	bne.n	800bea8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be98:	897b      	ldrh	r3, [r7, #10]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	330c      	adds	r3, #12
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	605a      	str	r2, [r3, #4]
 800bea6:	e040      	b.n	800bf2a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800bea8:	897b      	ldrh	r3, [r7, #10]
 800beaa:	2b05      	cmp	r3, #5
 800beac:	d830      	bhi.n	800bf10 <VL53L0X_SetLimitCheckValue+0x9c>
 800beae:	a201      	add	r2, pc, #4	; (adr r2, 800beb4 <VL53L0X_SetLimitCheckValue+0x40>)
 800beb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb4:	0800becd 	.word	0x0800becd
 800beb8:	0800bed5 	.word	0x0800bed5
 800bebc:	0800beeb 	.word	0x0800beeb
 800bec0:	0800bef3 	.word	0x0800bef3
 800bec4:	0800befb 	.word	0x0800befb
 800bec8:	0800befb 	.word	0x0800befb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800bed2:	e01f      	b.n	800bf14 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bed8:	b29b      	uxth	r3, r3
 800beda:	461a      	mov	r2, r3
 800bedc:	2144      	movs	r1, #68	; 0x44
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f003 fff6 	bl	800fed0 <VL53L0X_WrWord>
 800bee4:	4603      	mov	r3, r0
 800bee6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800bee8:	e014      	b.n	800bf14 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800bef0:	e010      	b.n	800bf14 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800bef8:	e00c      	b.n	800bf14 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800befe:	b29b      	uxth	r3, r3
 800bf00:	461a      	mov	r2, r3
 800bf02:	2164      	movs	r1, #100	; 0x64
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f003 ffe3 	bl	800fed0 <VL53L0X_WrWord>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800bf0e:	e001      	b.n	800bf14 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bf10:	23fc      	movs	r3, #252	; 0xfc
 800bf12:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800bf14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d106      	bne.n	800bf2a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bf1c:	897b      	ldrh	r3, [r7, #10]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	330c      	adds	r3, #12
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop

0800bf38 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b088      	sub	sp, #32
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	460b      	mov	r3, r1
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf46:	2300      	movs	r3, #0
 800bf48:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800bf4e:	897b      	ldrh	r3, [r7, #10]
 800bf50:	2b05      	cmp	r3, #5
 800bf52:	d847      	bhi.n	800bfe4 <VL53L0X_GetLimitCheckValue+0xac>
 800bf54:	a201      	add	r2, pc, #4	; (adr r2, 800bf5c <VL53L0X_GetLimitCheckValue+0x24>)
 800bf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5a:	bf00      	nop
 800bf5c:	0800bf75 	.word	0x0800bf75
 800bf60:	0800bf81 	.word	0x0800bf81
 800bf64:	0800bfa7 	.word	0x0800bfa7
 800bf68:	0800bfb3 	.word	0x0800bfb3
 800bf6c:	0800bfbf 	.word	0x0800bfbf
 800bf70:	0800bfbf 	.word	0x0800bfbf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf78:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	77bb      	strb	r3, [r7, #30]
		break;
 800bf7e:	e033      	b.n	800bfe8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800bf80:	f107 0316 	add.w	r3, r7, #22
 800bf84:	461a      	mov	r2, r3
 800bf86:	2144      	movs	r1, #68	; 0x44
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f004 f829 	bl	800ffe0 <VL53L0X_RdWord>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bf92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d102      	bne.n	800bfa0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bf9a:	8afb      	ldrh	r3, [r7, #22]
 800bf9c:	025b      	lsls	r3, r3, #9
 800bf9e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	77bb      	strb	r3, [r7, #30]
		break;
 800bfa4:	e020      	b.n	800bfe8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfaa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	77bb      	strb	r3, [r7, #30]
		break;
 800bfb0:	e01a      	b.n	800bfe8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	77bb      	strb	r3, [r7, #30]
		break;
 800bfbc:	e014      	b.n	800bfe8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800bfbe:	f107 0316 	add.w	r3, r7, #22
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	2164      	movs	r1, #100	; 0x64
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f004 f80a 	bl	800ffe0 <VL53L0X_RdWord>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bfd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d102      	bne.n	800bfde <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bfd8:	8afb      	ldrh	r3, [r7, #22]
 800bfda:	025b      	lsls	r3, r3, #9
 800bfdc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	77bb      	strb	r3, [r7, #30]
		break;
 800bfe2:	e001      	b.n	800bfe8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bfe4:	23fc      	movs	r3, #252	; 0xfc
 800bfe6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bfe8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d12a      	bne.n	800c046 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800bff0:	7fbb      	ldrb	r3, [r7, #30]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d124      	bne.n	800c040 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d110      	bne.n	800c01e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800bffc:	897b      	ldrh	r3, [r7, #10]
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	330c      	adds	r3, #12
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c010:	897b      	ldrh	r3, [r7, #10]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	4413      	add	r3, r2
 800c016:	2200      	movs	r2, #0
 800c018:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c01c:	e013      	b.n	800c046 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	69ba      	ldr	r2, [r7, #24]
 800c022:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c024:	897b      	ldrh	r3, [r7, #10]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	330c      	adds	r3, #12
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	69ba      	ldr	r2, [r7, #24]
 800c030:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c032:	897b      	ldrh	r3, [r7, #10]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	4413      	add	r3, r2
 800c038:	2201      	movs	r2, #1
 800c03a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c03e:	e002      	b.n	800c046 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c046:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3720      	adds	r7, #32
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop

0800c054 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c05e:	2300      	movs	r3, #0
 800c060:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800c062:	f107 030e 	add.w	r3, r7, #14
 800c066:	461a      	mov	r2, r3
 800c068:	2101      	movs	r1, #1
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f003 ff8e 	bl	800ff8c <VL53L0X_RdByte>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800c074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10e      	bne.n	800c09a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800c07c:	7bba      	ldrb	r2, [r7, #14]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	b25b      	sxtb	r3, r3
 800c088:	2b00      	cmp	r3, #0
 800c08a:	da03      	bge.n	800c094 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2201      	movs	r2, #1
 800c090:	701a      	strb	r2, [r3, #0]
 800c092:	e002      	b.n	800c09a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2200      	movs	r2, #0
 800c098:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d104      	bne.n	800c0ac <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	781a      	ldrb	r2, [r3, #0]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c0c4:	f107 030e 	add.w	r3, r7, #14
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff fbd2 	bl	800b874 <VL53L0X_GetDeviceMode>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d107      	bne.n	800c0ec <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c0dc:	7bbb      	ldrb	r3, [r7, #14]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d104      	bne.n	800c0ec <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f898 	bl	800c218 <VL53L0X_StartMeasurement>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d104      	bne.n	800c0fe <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 fb3f 	bl	800d778 <VL53L0X_measurement_poll_for_completion>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d103      	bne.n	800c114 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2203      	movs	r2, #3
 800c110:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800c114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c12c:	2300      	movs	r3, #0
 800c12e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800c130:	2301      	movs	r3, #1
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	68b9      	ldr	r1, [r7, #8]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f001 fae1 	bl	800d6fe <VL53L0X_perform_ref_calibration>
 800c13c:	4603      	mov	r3, r0
 800c13e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800c140:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3718      	adds	r7, #24
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c158:	2300      	movs	r3, #0
 800c15a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c162:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800c164:	7dbb      	ldrb	r3, [r7, #22]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d005      	beq.n	800c176 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800c16a:	7dbb      	ldrb	r3, [r7, #22]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d002      	beq.n	800c176 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800c170:	7dbb      	ldrb	r3, [r7, #22]
 800c172:	2b03      	cmp	r3, #3
 800c174:	d147      	bne.n	800c206 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800c176:	f107 030c 	add.w	r3, r7, #12
 800c17a:	f107 0210 	add.w	r2, r7, #16
 800c17e:	2101      	movs	r1, #1
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fbc3 	bl	800c90c <VL53L0X_GetInterruptThresholds>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c190:	d803      	bhi.n	800c19a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800c192:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800c194:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c198:	d935      	bls.n	800c206 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800c19a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d131      	bne.n	800c206 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800c1a2:	78fb      	ldrb	r3, [r7, #3]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d006      	beq.n	800c1b6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800c1a8:	491a      	ldr	r1, [pc, #104]	; (800c214 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f002 ff56 	bl	800f05c <VL53L0X_load_tuning_settings>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	75fb      	strb	r3, [r7, #23]
 800c1b4:	e027      	b.n	800c206 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c1b6:	2204      	movs	r2, #4
 800c1b8:	21ff      	movs	r1, #255	; 0xff
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f003 fe64 	bl	800fe88 <VL53L0X_WrByte>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2170      	movs	r1, #112	; 0x70
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f003 fe5a 	bl	800fe88 <VL53L0X_WrByte>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c1de:	2200      	movs	r2, #0
 800c1e0:	21ff      	movs	r1, #255	; 0xff
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f003 fe50 	bl	800fe88 <VL53L0X_WrByte>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	7dfb      	ldrb	r3, [r7, #23]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2180      	movs	r1, #128	; 0x80
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f003 fe46 	bl	800fe88 <VL53L0X_WrByte>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	461a      	mov	r2, r3
 800c200:	7dfb      	ldrb	r3, [r7, #23]
 800c202:	4313      	orrs	r3, r2
 800c204:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800c206:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20000048 	.word	0x20000048

0800c218 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c220:	2300      	movs	r3, #0
 800c222:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800c224:	2301      	movs	r3, #1
 800c226:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c228:	f107 030e 	add.w	r3, r7, #14
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff fb20 	bl	800b874 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c234:	2201      	movs	r2, #1
 800c236:	2180      	movs	r1, #128	; 0x80
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f003 fe25 	bl	800fe88 <VL53L0X_WrByte>
 800c23e:	4603      	mov	r3, r0
 800c240:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c242:	2201      	movs	r2, #1
 800c244:	21ff      	movs	r1, #255	; 0xff
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f003 fe1e 	bl	800fe88 <VL53L0X_WrByte>
 800c24c:	4603      	mov	r3, r0
 800c24e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c250:	2200      	movs	r2, #0
 800c252:	2100      	movs	r1, #0
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f003 fe17 	bl	800fe88 <VL53L0X_WrByte>
 800c25a:	4603      	mov	r3, r0
 800c25c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800c264:	461a      	mov	r2, r3
 800c266:	2191      	movs	r1, #145	; 0x91
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f003 fe0d 	bl	800fe88 <VL53L0X_WrByte>
 800c26e:	4603      	mov	r3, r0
 800c270:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c272:	2201      	movs	r2, #1
 800c274:	2100      	movs	r1, #0
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f003 fe06 	bl	800fe88 <VL53L0X_WrByte>
 800c27c:	4603      	mov	r3, r0
 800c27e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c280:	2200      	movs	r2, #0
 800c282:	21ff      	movs	r1, #255	; 0xff
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f003 fdff 	bl	800fe88 <VL53L0X_WrByte>
 800c28a:	4603      	mov	r3, r0
 800c28c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c28e:	2200      	movs	r2, #0
 800c290:	2180      	movs	r1, #128	; 0x80
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f003 fdf8 	bl	800fe88 <VL53L0X_WrByte>
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800c29c:	7bbb      	ldrb	r3, [r7, #14]
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d054      	beq.n	800c34c <VL53L0X_StartMeasurement+0x134>
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	dc6c      	bgt.n	800c380 <VL53L0X_StartMeasurement+0x168>
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <VL53L0X_StartMeasurement+0x98>
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d034      	beq.n	800c318 <VL53L0X_StartMeasurement+0x100>
 800c2ae:	e067      	b.n	800c380 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f003 fde7 	bl	800fe88 <VL53L0X_WrByte>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800c2c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d15d      	bne.n	800c386 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d008      	beq.n	800c2e6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800c2d4:	f107 030d 	add.w	r3, r7, #13
 800c2d8:	461a      	mov	r2, r3
 800c2da:	2100      	movs	r1, #0
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f003 fe55 	bl	800ff8c <VL53L0X_RdByte>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800c2ec:	7b7a      	ldrb	r2, [r7, #13]
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c2f4:	7bfa      	ldrb	r2, [r7, #15]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d107      	bne.n	800c30a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800c2fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d103      	bne.n	800c30a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c308:	d3e1      	bcc.n	800c2ce <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c310:	d339      	bcc.n	800c386 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800c312:	23f9      	movs	r3, #249	; 0xf9
 800c314:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800c316:	e036      	b.n	800c386 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d105      	bne.n	800c32c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c320:	2101      	movs	r1, #1
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff ff12 	bl	800c14c <VL53L0X_CheckAndLoadInterruptSettings>
 800c328:	4603      	mov	r3, r0
 800c32a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c32c:	2202      	movs	r2, #2
 800c32e:	2100      	movs	r1, #0
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f003 fda9 	bl	800fe88 <VL53L0X_WrByte>
 800c336:	4603      	mov	r3, r0
 800c338:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800c33a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d123      	bne.n	800c38a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2204      	movs	r2, #4
 800c346:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c34a:	e01e      	b.n	800c38a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c34c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d105      	bne.n	800c360 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c354:	2101      	movs	r1, #1
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff fef8 	bl	800c14c <VL53L0X_CheckAndLoadInterruptSettings>
 800c35c:	4603      	mov	r3, r0
 800c35e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c360:	2204      	movs	r2, #4
 800c362:	2100      	movs	r1, #0
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f003 fd8f 	bl	800fe88 <VL53L0X_WrByte>
 800c36a:	4603      	mov	r3, r0
 800c36c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800c36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10b      	bne.n	800c38e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2204      	movs	r2, #4
 800c37a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c37e:	e006      	b.n	800c38e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c380:	23f8      	movs	r3, #248	; 0xf8
 800c382:	75fb      	strb	r3, [r7, #23]
 800c384:	e004      	b.n	800c390 <VL53L0X_StartMeasurement+0x178>
		break;
 800c386:	bf00      	nop
 800c388:	e002      	b.n	800c390 <VL53L0X_StartMeasurement+0x178>
		break;
 800c38a:	bf00      	nop
 800c38c:	e000      	b.n	800c390 <VL53L0X_StartMeasurement+0x178>
		break;
 800c38e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3718      	adds	r7, #24
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c3b0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800c3b2:	7bbb      	ldrb	r3, [r7, #14]
 800c3b4:	2b04      	cmp	r3, #4
 800c3b6:	d112      	bne.n	800c3de <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c3b8:	f107 0308 	add.w	r3, r7, #8
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fb1a 	bl	800c9f8 <VL53L0X_GetInterruptMaskStatus>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2b04      	cmp	r3, #4
 800c3cc:	d103      	bne.n	800c3d6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	701a      	strb	r2, [r3, #0]
 800c3d4:	e01c      	b.n	800c410 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	701a      	strb	r2, [r3, #0]
 800c3dc:	e018      	b.n	800c410 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c3de:	f107 030d 	add.w	r3, r7, #13
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	2114      	movs	r1, #20
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f003 fdd0 	bl	800ff8c <VL53L0X_RdByte>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800c3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10b      	bne.n	800c410 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800c3f8:	7b7b      	ldrb	r3, [r7, #13]
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2201      	movs	r2, #1
 800c406:	701a      	strb	r2, [r3, #0]
 800c408:	e002      	b.n	800c410 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2200      	movs	r2, #0
 800c40e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3710      	adds	r7, #16
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c41c:	b5b0      	push	{r4, r5, r7, lr}
 800c41e:	b096      	sub	sp, #88	; 0x58
 800c420:	af02      	add	r7, sp, #8
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c426:	2300      	movs	r3, #0
 800c428:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c42c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c430:	230c      	movs	r3, #12
 800c432:	2114      	movs	r1, #20
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f003 fcfb 	bl	800fe30 <VL53L0X_ReadMulti>
 800c43a:	4603      	mov	r3, r0
 800c43c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800c440:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c444:	2b00      	cmp	r3, #0
 800c446:	f040 80d1 	bne.w	800c5ec <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	2200      	movs	r2, #0
 800c44e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c456:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	021b      	lsls	r3, r3, #8
 800c45e:	b29a      	uxth	r2, r3
 800c460:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c464:	b29b      	uxth	r3, r3
 800c466:	4413      	add	r3, r2
 800c468:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2200      	movs	r2, #0
 800c470:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c472:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c476:	b29b      	uxth	r3, r3
 800c478:	021b      	lsls	r3, r3, #8
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c480:	b29b      	uxth	r3, r3
 800c482:	4413      	add	r3, r2
 800c484:	b29b      	uxth	r3, r3
 800c486:	025b      	lsls	r3, r3, #9
 800c488:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c48e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c490:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c494:	b29b      	uxth	r3, r3
 800c496:	021b      	lsls	r3, r3, #8
 800c498:	b29a      	uxth	r2, r3
 800c49a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	4413      	add	r3, r2
 800c4a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c4a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c4aa:	025b      	lsls	r3, r3, #9
 800c4ac:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800c4b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	021b      	lsls	r3, r3, #8
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c4ce:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800c4d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c4d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800c4de:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800c4e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800c4ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c4ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4f0:	d046      	beq.n	800c580 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800c4f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c4f4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c4f8:	fb02 f303 	mul.w	r3, r2, r3
 800c4fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c500:	4a57      	ldr	r2, [pc, #348]	; (800c660 <VL53L0X_GetRangingMeasurementData+0x244>)
 800c502:	fb82 1203 	smull	r1, r2, r2, r3
 800c506:	1192      	asrs	r2, r2, #6
 800c508:	17db      	asrs	r3, r3, #31
 800c50a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c50c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7f1b      	ldrb	r3, [r3, #28]
 800c51a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c51e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c522:	2b00      	cmp	r3, #0
 800c524:	d02c      	beq.n	800c580 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c526:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c528:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c52c:	fb02 f303 	mul.w	r3, r2, r3
 800c530:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800c534:	429a      	cmp	r2, r3
 800c536:	d10d      	bne.n	800c554 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800c538:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d004      	beq.n	800c54a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800c540:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c544:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c548:	e016      	b.n	800c578 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800c54a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c54e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c552:	e011      	b.n	800c578 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c554:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c55a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c55e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c560:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c564:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800c568:	121b      	asrs	r3, r3, #8
 800c56a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800c56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c56e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800c570:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800c574:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c578:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c57c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c580:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00d      	beq.n	800c5a4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c588:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c58c:	089b      	lsrs	r3, r3, #2
 800c58e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c594:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	019b      	lsls	r3, r3, #6
 800c59c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	75da      	strb	r2, [r3, #23]
 800c5a2:	e006      	b.n	800c5b2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c5aa:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c5b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c5b6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800c5ba:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800c5be:	9301      	str	r3, [sp, #4]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f003 f9e5 	bl	800f998 <VL53L0X_get_pal_range_status>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c5dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d103      	bne.n	800c5ec <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c5e4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c5ec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d12f      	bne.n	800c654 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f107 040c 	add.w	r4, r7, #12
 800c5fa:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c5fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c606:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c60e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c61c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c622:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c628:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c62e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c634:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c63a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c644:	f107 050c 	add.w	r5, r7, #12
 800c648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c64a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c64c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c654:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3750      	adds	r7, #80	; 0x50
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bdb0      	pop	{r4, r5, r7, pc}
 800c660:	10624dd3 	.word	0x10624dd3

0800c664 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c672:	2100      	movs	r1, #0
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff f8d1 	bl	800b81c <VL53L0X_SetDeviceMode>
 800c67a:	4603      	mov	r3, r0
 800c67c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d104      	bne.n	800c690 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff fd16 	bl	800c0b8 <VL53L0X_PerformSingleMeasurement>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d105      	bne.n	800c6a4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff febe 	bl	800c41c <VL53L0X_GetRangingMeasurementData>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d105      	bne.n	800c6b8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f962 	bl	800c978 <VL53L0X_ClearInterruptMask>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c6b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	4608      	mov	r0, r1
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	70fb      	strb	r3, [r7, #3]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	70bb      	strb	r3, [r7, #2]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c6e2:	78fb      	ldrb	r3, [r7, #3]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d002      	beq.n	800c6ee <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c6e8:	23f6      	movs	r3, #246	; 0xf6
 800c6ea:	73fb      	strb	r3, [r7, #15]
 800c6ec:	e107      	b.n	800c8fe <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c6ee:	78bb      	ldrb	r3, [r7, #2]
 800c6f0:	2b14      	cmp	r3, #20
 800c6f2:	d110      	bne.n	800c716 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c6f4:	7e3b      	ldrb	r3, [r7, #24]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d102      	bne.n	800c700 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c6fa:	2310      	movs	r3, #16
 800c6fc:	73bb      	strb	r3, [r7, #14]
 800c6fe:	e001      	b.n	800c704 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c700:	2301      	movs	r3, #1
 800c702:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c704:	7bbb      	ldrb	r3, [r7, #14]
 800c706:	461a      	mov	r2, r3
 800c708:	2184      	movs	r1, #132	; 0x84
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f003 fbbc 	bl	800fe88 <VL53L0X_WrByte>
 800c710:	4603      	mov	r3, r0
 800c712:	73fb      	strb	r3, [r7, #15]
 800c714:	e0f3      	b.n	800c8fe <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c716:	78bb      	ldrb	r3, [r7, #2]
 800c718:	2b15      	cmp	r3, #21
 800c71a:	f040 8097 	bne.w	800c84c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c71e:	2201      	movs	r2, #1
 800c720:	21ff      	movs	r1, #255	; 0xff
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f003 fbb0 	bl	800fe88 <VL53L0X_WrByte>
 800c728:	4603      	mov	r3, r0
 800c72a:	461a      	mov	r2, r3
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	4313      	orrs	r3, r2
 800c730:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c732:	2200      	movs	r2, #0
 800c734:	2100      	movs	r1, #0
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f003 fba6 	bl	800fe88 <VL53L0X_WrByte>
 800c73c:	4603      	mov	r3, r0
 800c73e:	461a      	mov	r2, r3
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4313      	orrs	r3, r2
 800c744:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c746:	2200      	movs	r2, #0
 800c748:	21ff      	movs	r1, #255	; 0xff
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f003 fb9c 	bl	800fe88 <VL53L0X_WrByte>
 800c750:	4603      	mov	r3, r0
 800c752:	461a      	mov	r2, r3
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	4313      	orrs	r3, r2
 800c758:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c75a:	2201      	movs	r2, #1
 800c75c:	2180      	movs	r1, #128	; 0x80
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f003 fb92 	bl	800fe88 <VL53L0X_WrByte>
 800c764:	4603      	mov	r3, r0
 800c766:	461a      	mov	r2, r3
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c76e:	2202      	movs	r2, #2
 800c770:	2185      	movs	r1, #133	; 0x85
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f003 fb88 	bl	800fe88 <VL53L0X_WrByte>
 800c778:	4603      	mov	r3, r0
 800c77a:	461a      	mov	r2, r3
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	4313      	orrs	r3, r2
 800c780:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c782:	2204      	movs	r2, #4
 800c784:	21ff      	movs	r1, #255	; 0xff
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f003 fb7e 	bl	800fe88 <VL53L0X_WrByte>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461a      	mov	r2, r3
 800c790:	7bfb      	ldrb	r3, [r7, #15]
 800c792:	4313      	orrs	r3, r2
 800c794:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c796:	2200      	movs	r2, #0
 800c798:	21cd      	movs	r1, #205	; 0xcd
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f003 fb74 	bl	800fe88 <VL53L0X_WrByte>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c7aa:	2211      	movs	r2, #17
 800c7ac:	21cc      	movs	r1, #204	; 0xcc
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f003 fb6a 	bl	800fe88 <VL53L0X_WrByte>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c7be:	2207      	movs	r2, #7
 800c7c0:	21ff      	movs	r1, #255	; 0xff
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f003 fb60 	bl	800fe88 <VL53L0X_WrByte>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	21be      	movs	r1, #190	; 0xbe
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f003 fb56 	bl	800fe88 <VL53L0X_WrByte>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c7e6:	2206      	movs	r2, #6
 800c7e8:	21ff      	movs	r1, #255	; 0xff
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f003 fb4c 	bl	800fe88 <VL53L0X_WrByte>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	7bfb      	ldrb	r3, [r7, #15]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c7fa:	2209      	movs	r2, #9
 800c7fc:	21cc      	movs	r1, #204	; 0xcc
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f003 fb42 	bl	800fe88 <VL53L0X_WrByte>
 800c804:	4603      	mov	r3, r0
 800c806:	461a      	mov	r2, r3
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c80e:	2200      	movs	r2, #0
 800c810:	21ff      	movs	r1, #255	; 0xff
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f003 fb38 	bl	800fe88 <VL53L0X_WrByte>
 800c818:	4603      	mov	r3, r0
 800c81a:	461a      	mov	r2, r3
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
 800c81e:	4313      	orrs	r3, r2
 800c820:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c822:	2201      	movs	r2, #1
 800c824:	21ff      	movs	r1, #255	; 0xff
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f003 fb2e 	bl	800fe88 <VL53L0X_WrByte>
 800c82c:	4603      	mov	r3, r0
 800c82e:	461a      	mov	r2, r3
 800c830:	7bfb      	ldrb	r3, [r7, #15]
 800c832:	4313      	orrs	r3, r2
 800c834:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c836:	2200      	movs	r2, #0
 800c838:	2100      	movs	r1, #0
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f003 fb24 	bl	800fe88 <VL53L0X_WrByte>
 800c840:	4603      	mov	r3, r0
 800c842:	461a      	mov	r2, r3
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	4313      	orrs	r3, r2
 800c848:	73fb      	strb	r3, [r7, #15]
 800c84a:	e058      	b.n	800c8fe <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d121      	bne.n	800c898 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800c854:	787b      	ldrb	r3, [r7, #1]
 800c856:	2b04      	cmp	r3, #4
 800c858:	d81b      	bhi.n	800c892 <VL53L0X_SetGpioConfig+0x1ce>
 800c85a:	a201      	add	r2, pc, #4	; (adr r2, 800c860 <VL53L0X_SetGpioConfig+0x19c>)
 800c85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c860:	0800c875 	.word	0x0800c875
 800c864:	0800c87b 	.word	0x0800c87b
 800c868:	0800c881 	.word	0x0800c881
 800c86c:	0800c887 	.word	0x0800c887
 800c870:	0800c88d 	.word	0x0800c88d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c874:	2300      	movs	r3, #0
 800c876:	73bb      	strb	r3, [r7, #14]
				break;
 800c878:	e00f      	b.n	800c89a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c87a:	2301      	movs	r3, #1
 800c87c:	73bb      	strb	r3, [r7, #14]
				break;
 800c87e:	e00c      	b.n	800c89a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c880:	2302      	movs	r3, #2
 800c882:	73bb      	strb	r3, [r7, #14]
				break;
 800c884:	e009      	b.n	800c89a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c886:	2303      	movs	r3, #3
 800c888:	73bb      	strb	r3, [r7, #14]
				break;
 800c88a:	e006      	b.n	800c89a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c88c:	2304      	movs	r3, #4
 800c88e:	73bb      	strb	r3, [r7, #14]
				break;
 800c890:	e003      	b.n	800c89a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800c892:	23f5      	movs	r3, #245	; 0xf5
 800c894:	73fb      	strb	r3, [r7, #15]
 800c896:	e000      	b.n	800c89a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800c898:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800c89a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d107      	bne.n	800c8b2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800c8a2:	7bbb      	ldrb	r3, [r7, #14]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	210a      	movs	r1, #10
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f003 faed 	bl	800fe88 <VL53L0X_WrByte>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10f      	bne.n	800c8da <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c8ba:	7e3b      	ldrb	r3, [r7, #24]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d102      	bne.n	800c8c6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	73bb      	strb	r3, [r7, #14]
 800c8c4:	e001      	b.n	800c8ca <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800c8c6:	2310      	movs	r3, #16
 800c8c8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
 800c8cc:	22ef      	movs	r2, #239	; 0xef
 800c8ce:	2184      	movs	r1, #132	; 0x84
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f003 fb27 	bl	800ff24 <VL53L0X_UpdateByte>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d103      	bne.n	800c8ea <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	787a      	ldrb	r2, [r7, #1]
 800c8e6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d105      	bne.n	800c8fe <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 f83f 	bl	800c978 <VL53L0X_ClearInterruptMask>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop

0800c90c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	607a      	str	r2, [r7, #4]
 800c916:	603b      	str	r3, [r7, #0]
 800c918:	460b      	mov	r3, r1
 800c91a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c91c:	2300      	movs	r3, #0
 800c91e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c920:	f107 0314 	add.w	r3, r7, #20
 800c924:	461a      	mov	r2, r3
 800c926:	210e      	movs	r1, #14
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f003 fb59 	bl	800ffe0 <VL53L0X_RdWord>
 800c92e:	4603      	mov	r3, r0
 800c930:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c932:	8abb      	ldrh	r3, [r7, #20]
 800c934:	045b      	lsls	r3, r3, #17
 800c936:	461a      	mov	r2, r3
 800c938:	4b0e      	ldr	r3, [pc, #56]	; (800c974 <VL53L0X_GetInterruptThresholds+0x68>)
 800c93a:	4013      	ands	r3, r2
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10f      	bne.n	800c968 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c948:	f107 0314 	add.w	r3, r7, #20
 800c94c:	461a      	mov	r2, r3
 800c94e:	210c      	movs	r1, #12
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f003 fb45 	bl	800ffe0 <VL53L0X_RdWord>
 800c956:	4603      	mov	r3, r0
 800c958:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c95a:	8abb      	ldrh	r3, [r7, #20]
 800c95c:	045b      	lsls	r3, r3, #17
 800c95e:	461a      	mov	r2, r3
 800c960:	4b04      	ldr	r3, [pc, #16]	; (800c974 <VL53L0X_GetInterruptThresholds+0x68>)
 800c962:	4013      	ands	r3, r2
		*pThresholdHigh =
 800c964:	683a      	ldr	r2, [r7, #0]
 800c966:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	1ffe0000 	.word	0x1ffe0000

0800c978 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800c986:	2300      	movs	r3, #0
 800c988:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800c98a:	2201      	movs	r2, #1
 800c98c:	210b      	movs	r1, #11
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f003 fa7a 	bl	800fe88 <VL53L0X_WrByte>
 800c994:	4603      	mov	r3, r0
 800c996:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800c998:	2200      	movs	r2, #0
 800c99a:	210b      	movs	r1, #11
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f003 fa73 	bl	800fe88 <VL53L0X_WrByte>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800c9ac:	f107 030d 	add.w	r3, r7, #13
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	2113      	movs	r1, #19
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f003 fae9 	bl	800ff8c <VL53L0X_RdByte>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	461a      	mov	r2, r3
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800c9c4:	7bbb      	ldrb	r3, [r7, #14]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800c9ca:	7b7b      	ldrb	r3, [r7, #13]
 800c9cc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d006      	beq.n	800c9e2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d803      	bhi.n	800c9e2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800c9da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0d3      	beq.n	800c98a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800c9e2:	7bbb      	ldrb	r3, [r7, #14]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d901      	bls.n	800c9ec <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c9e8:	23f4      	movs	r3, #244	; 0xf4
 800c9ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800c9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800ca06:	f107 030e 	add.w	r3, r7, #14
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	2113      	movs	r1, #19
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f003 fabc 	bl	800ff8c <VL53L0X_RdByte>
 800ca14:	4603      	mov	r3, r0
 800ca16:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800ca18:	7bbb      	ldrb	r3, [r7, #14]
 800ca1a:	f003 0207 	and.w	r2, r3, #7
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800ca22:	7bbb      	ldrb	r3, [r7, #14]
 800ca24:	f003 0318 	and.w	r3, r3, #24
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800ca2c:	23fa      	movs	r3, #250	; 0xfa
 800ca2e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800ca30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b086      	sub	sp, #24
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	68b9      	ldr	r1, [r7, #8]
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f000 fa03 	bl	800ce5c <VL53L0X_perform_ref_spad_management>
 800ca56:	4603      	mov	r3, r0
 800ca58:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800ca5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3718      	adds	r7, #24
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800ca74:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ca78:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800ca7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca7e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800ca80:	f107 0308 	add.w	r3, r7, #8
 800ca84:	461a      	mov	r2, r3
 800ca86:	2128      	movs	r1, #40	; 0x28
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f003 faa9 	bl	800ffe0 <VL53L0X_RdWord>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800ca92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d11e      	bne.n	800cad8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800ca9a:	893b      	ldrh	r3, [r7, #8]
 800ca9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800caa4:	893b      	ldrh	r3, [r7, #8]
 800caa6:	461a      	mov	r2, r3
 800caa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800caac:	429a      	cmp	r2, r3
 800caae:	dd0b      	ble.n	800cac8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800cab0:	893a      	ldrh	r2, [r7, #8]
 800cab2:	897b      	ldrh	r3, [r7, #10]
 800cab4:	1ad3      	subs	r3, r2, r3
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	b21b      	sxth	r3, r3
 800caba:	461a      	mov	r2, r3
					* 250;
 800cabc:	23fa      	movs	r3, #250	; 0xfa
 800cabe:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	601a      	str	r2, [r3, #0]
 800cac6:	e007      	b.n	800cad8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800cac8:	893b      	ldrh	r3, [r7, #8]
 800caca:	b21b      	sxth	r3, r3
 800cacc:	461a      	mov	r2, r3
 800cace:	23fa      	movs	r3, #250	; 0xfa
 800cad0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800cad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b08b      	sub	sp, #44	; 0x2c
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800caf2:	2308      	movs	r3, #8
 800caf4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb00:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb0a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	69ba      	ldr	r2, [r7, #24]
 800cb10:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb14:	69b9      	ldr	r1, [r7, #24]
 800cb16:	fb01 f202 	mul.w	r2, r1, r2
 800cb1a:	1a9b      	subs	r3, r3, r2
 800cb1c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24
 800cb22:	e030      	b.n	800cb86 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	4413      	add	r3, r2
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800cb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d11e      	bne.n	800cb78 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800cb3a:	7ffa      	ldrb	r2, [r7, #31]
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	fa42 f303 	asr.w	r3, r2, r3
 800cb42:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800cb48:	e016      	b.n	800cb78 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800cb4a:	7ffb      	ldrb	r3, [r7, #31]
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00b      	beq.n	800cb6c <get_next_good_spad+0x88>
				success = 1;
 800cb54:	2301      	movs	r3, #1
 800cb56:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	69ba      	ldr	r2, [r7, #24]
 800cb5c:	fb03 f202 	mul.w	r2, r3, r2
 800cb60:	6a3b      	ldr	r3, [r7, #32]
 800cb62:	4413      	add	r3, r2
 800cb64:	461a      	mov	r2, r3
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	601a      	str	r2, [r3, #0]
				break;
 800cb6a:	e009      	b.n	800cb80 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800cb6c:	7ffb      	ldrb	r3, [r7, #31]
 800cb6e:	085b      	lsrs	r3, r3, #1
 800cb70:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	3301      	adds	r3, #1
 800cb76:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800cb78:	6a3a      	ldr	r2, [r7, #32]
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d3e4      	bcc.n	800cb4a <get_next_good_spad+0x66>
				coarseIndex++) {
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	3301      	adds	r3, #1
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cb86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d202      	bcs.n	800cb94 <get_next_good_spad+0xb0>
 800cb8e:	7fbb      	ldrb	r3, [r7, #30]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0c7      	beq.n	800cb24 <get_next_good_spad+0x40>
		}
	}
}
 800cb94:	bf00      	nop
 800cb96:	372c      	adds	r7, #44	; 0x2c
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	099b      	lsrs	r3, r3, #6
 800cbb0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800cbb2:	4a07      	ldr	r2, [pc, #28]	; (800cbd0 <is_aperture+0x30>)
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d101      	bne.n	800cbc2 <is_aperture+0x22>
		isAperture = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	200002f4 	.word	0x200002f4

0800cbd4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b089      	sub	sp, #36	; 0x24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800cbe4:	2308      	movs	r3, #8
 800cbe6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbf0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	69ba      	ldr	r2, [r7, #24]
 800cbf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbfa:	69b9      	ldr	r1, [r7, #24]
 800cbfc:	fb01 f202 	mul.w	r2, r1, r2
 800cc00:	1a9b      	subs	r3, r3, r2
 800cc02:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d302      	bcc.n	800cc12 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cc0c:	23ce      	movs	r3, #206	; 0xce
 800cc0e:	77fb      	strb	r3, [r7, #31]
 800cc10:	e010      	b.n	800cc34 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	4413      	add	r3, r2
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	b25a      	sxtb	r2, r3
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	fa01 f303 	lsl.w	r3, r1, r3
 800cc24:	b25b      	sxtb	r3, r3
 800cc26:	4313      	orrs	r3, r2
 800cc28:	b259      	sxtb	r1, r3
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	4413      	add	r3, r2
 800cc30:	b2ca      	uxtb	r2, r1
 800cc32:	701a      	strb	r2, [r3, #0]

	return status;
 800cc34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3724      	adds	r7, #36	; 0x24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800cc4e:	2306      	movs	r3, #6
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	21b0      	movs	r1, #176	; 0xb0
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f003 f8bb 	bl	800fdd0 <VL53L0X_WriteMulti>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800cc5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800cc74:	2306      	movs	r3, #6
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	21b0      	movs	r1, #176	; 0xb0
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f003 f8d8 	bl	800fe30 <VL53L0X_ReadMulti>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800cc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08c      	sub	sp, #48	; 0x30
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	607a      	str	r2, [r7, #4]
 800cc9a:	603b      	str	r3, [r7, #0]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800cca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800ccaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ccae:	2300      	movs	r3, #0
 800ccb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccb2:	e02b      	b.n	800cd0c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800ccb4:	f107 031c 	add.w	r3, r7, #28
 800ccb8:	6a3a      	ldr	r2, [r7, #32]
 800ccba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7ff ff11 	bl	800cae4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccc8:	d103      	bne.n	800ccd2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ccca:	23ce      	movs	r3, #206	; 0xce
 800cccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ccd0:	e020      	b.n	800cd14 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccd8:	4413      	add	r3, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff ff60 	bl	800cba0 <is_aperture>
 800cce0:	4603      	mov	r3, r0
 800cce2:	461a      	mov	r2, r3
 800cce4:	7afb      	ldrb	r3, [r7, #11]
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d003      	beq.n	800ccf2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ccea:	23ce      	movs	r3, #206	; 0xce
 800ccec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ccf0:	e010      	b.n	800cd14 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800ccf6:	6a3a      	ldr	r2, [r7, #32]
 800ccf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccfa:	6838      	ldr	r0, [r7, #0]
 800ccfc:	f7ff ff6a 	bl	800cbd4 <enable_spad_bit>
		currentSpad++;
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	3301      	adds	r3, #1
 800cd04:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd08:	3301      	adds	r3, #1
 800cd0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d3cf      	bcc.n	800ccb4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800cd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd16:	6a3a      	ldr	r2, [r7, #32]
 800cd18:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800cd1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d106      	bne.n	800cd30 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f7ff ff8d 	bl	800cc44 <set_ref_spad_map>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800cd30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d121      	bne.n	800cd7c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800cd38:	f107 0314 	add.w	r3, r7, #20
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f7ff ff93 	bl	800cc6a <get_ref_spad_map>
 800cd44:	4603      	mov	r3, r0
 800cd46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800cd4e:	e011      	b.n	800cd74 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	4413      	add	r3, r2
 800cd56:	781a      	ldrb	r2, [r3, #0]
 800cd58:	f107 0114 	add.w	r1, r7, #20
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	440b      	add	r3, r1
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d003      	beq.n	800cd6e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cd66:	23ce      	movs	r3, #206	; 0xce
 800cd68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800cd6c:	e006      	b.n	800cd7c <enable_ref_spads+0xec>
			}
			i++;
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	3301      	adds	r3, #1
 800cd72:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800cd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d3e9      	bcc.n	800cd50 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800cd7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3730      	adds	r7, #48	; 0x30
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08a      	sub	sp, #40	; 0x28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cd92:	2300      	movs	r3, #0
 800cd94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800cda4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800cda8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d107      	bne.n	800cdc0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800cdb0:	22c0      	movs	r2, #192	; 0xc0
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f003 f867 	bl	800fe88 <VL53L0X_WrByte>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800cdc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d108      	bne.n	800cdda <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800cdc8:	f107 0308 	add.w	r3, r7, #8
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff fc48 	bl	800c664 <VL53L0X_PerformSingleRangingMeasurement>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800cdda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d107      	bne.n	800cdf2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cde2:	2201      	movs	r2, #1
 800cde4:	21ff      	movs	r1, #255	; 0xff
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f003 f84e 	bl	800fe88 <VL53L0X_WrByte>
 800cdec:	4603      	mov	r3, r0
 800cdee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800cdf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d107      	bne.n	800ce0a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	21b6      	movs	r1, #182	; 0xb6
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f003 f8ee 	bl	800ffe0 <VL53L0X_RdWord>
 800ce04:	4603      	mov	r3, r0
 800ce06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800ce0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d107      	bne.n	800ce22 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ce12:	2200      	movs	r2, #0
 800ce14:	21ff      	movs	r1, #255	; 0xff
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f003 f836 	bl	800fe88 <VL53L0X_WrByte>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800ce22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d112      	bne.n	800ce50 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ce2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce2e:	461a      	mov	r2, r3
 800ce30:	2101      	movs	r1, #1
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f003 f828 	bl	800fe88 <VL53L0X_WrByte>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800ce3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d104      	bne.n	800ce50 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ce4c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800ce50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3728      	adds	r7, #40	; 0x28
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800ce5c:	b590      	push	{r4, r7, lr}
 800ce5e:	b09d      	sub	sp, #116	; 0x74
 800ce60:	af06      	add	r7, sp, #24
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800ce6e:	23b4      	movs	r3, #180	; 0xb4
 800ce70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800ce74:	2303      	movs	r3, #3
 800ce76:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800ce78:	232c      	movs	r3, #44	; 0x2c
 800ce7a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800ce88:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800ce8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800ce96:	2306      	movs	r3, #6
 800ce98:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800cec0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800cec2:	2300      	movs	r3, #0
 800cec4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cec6:	e009      	b.n	800cedc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cecc:	4413      	add	r3, r2
 800cece:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ced2:	2200      	movs	r2, #0
 800ced4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ced6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ced8:	3301      	adds	r3, #1
 800ceda:	64bb      	str	r3, [r7, #72]	; 0x48
 800cedc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d3f1      	bcc.n	800cec8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cee4:	2201      	movs	r2, #1
 800cee6:	21ff      	movs	r1, #255	; 0xff
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f002 ffcd 	bl	800fe88 <VL53L0X_WrByte>
 800ceee:	4603      	mov	r3, r0
 800cef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800cef4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d107      	bne.n	800cf0c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800cefc:	2200      	movs	r2, #0
 800cefe:	214f      	movs	r1, #79	; 0x4f
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f002 ffc1 	bl	800fe88 <VL53L0X_WrByte>
 800cf06:	4603      	mov	r3, r0
 800cf08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800cf0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d107      	bne.n	800cf24 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800cf14:	222c      	movs	r2, #44	; 0x2c
 800cf16:	214e      	movs	r1, #78	; 0x4e
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f002 ffb5 	bl	800fe88 <VL53L0X_WrByte>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800cf24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d107      	bne.n	800cf3c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	21ff      	movs	r1, #255	; 0xff
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f002 ffa9 	bl	800fe88 <VL53L0X_WrByte>
 800cf36:	4603      	mov	r3, r0
 800cf38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800cf3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d109      	bne.n	800cf58 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800cf44:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cf48:	461a      	mov	r2, r3
 800cf4a:	21b6      	movs	r1, #182	; 0xb6
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f002 ff9b 	bl	800fe88 <VL53L0X_WrByte>
 800cf52:	4603      	mov	r3, r0
 800cf54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800cf58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d107      	bne.n	800cf70 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800cf60:	2200      	movs	r2, #0
 800cf62:	2180      	movs	r1, #128	; 0x80
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f002 ff8f 	bl	800fe88 <VL53L0X_WrByte>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800cf70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10a      	bne.n	800cf8e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800cf78:	f107 0210 	add.w	r2, r7, #16
 800cf7c:	f107 0111 	add.w	r1, r7, #17
 800cf80:	2300      	movs	r3, #0
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 fbbb 	bl	800d6fe <VL53L0X_perform_ref_calibration>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800cf8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d121      	bne.n	800cfda <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800cf9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf9c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800cfa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfa4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800cfb2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cfb6:	f107 0218 	add.w	r2, r7, #24
 800cfba:	9204      	str	r2, [sp, #16]
 800cfbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfbe:	9203      	str	r2, [sp, #12]
 800cfc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfc2:	9202      	str	r2, [sp, #8]
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	4623      	mov	r3, r4
 800cfcc:	4602      	mov	r2, r0
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f7ff fe5e 	bl	800cc90 <enable_ref_spads>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cfda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d174      	bne.n	800d0cc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800cfe6:	f107 0312 	add.w	r3, r7, #18
 800cfea:	4619      	mov	r1, r3
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f7ff fecb 	bl	800cd88 <perform_ref_signal_measurement>
 800cff2:	4603      	mov	r3, r0
 800cff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800cff8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d161      	bne.n	800d0c4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800d000:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d002:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d004:	429a      	cmp	r2, r3
 800d006:	d25d      	bcs.n	800d0c4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800d008:	2300      	movs	r3, #0
 800d00a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d00c:	e009      	b.n	800d022 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d012:	4413      	add	r3, r2
 800d014:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d018:	2200      	movs	r2, #0
 800d01a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800d01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d01e:	3301      	adds	r3, #1
 800d020:	64bb      	str	r3, [r7, #72]	; 0x48
 800d022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	429a      	cmp	r2, r3
 800d028:	d3f1      	bcc.n	800d00e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800d02a:	e002      	b.n	800d032 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800d02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d02e:	3301      	adds	r3, #1
 800d030:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800d032:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d038:	4413      	add	r3, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff fdb0 	bl	800cba0 <is_aperture>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d103      	bne.n	800d04e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800d046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d3ee      	bcc.n	800d02c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800d04e:	2301      	movs	r3, #1
 800d050:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800d052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d054:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800d062:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d066:	f107 0218 	add.w	r2, r7, #24
 800d06a:	9204      	str	r2, [sp, #16]
 800d06c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d06e:	9203      	str	r2, [sp, #12]
 800d070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d072:	9202      	str	r2, [sp, #8]
 800d074:	9301      	str	r3, [sp, #4]
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	4623      	mov	r3, r4
 800d07c:	4602      	mov	r2, r0
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f7ff fe06 	bl	800cc90 <enable_ref_spads>
 800d084:	4603      	mov	r3, r0
 800d086:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d08a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d11b      	bne.n	800d0ca <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800d096:	f107 0312 	add.w	r3, r7, #18
 800d09a:	4619      	mov	r1, r3
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff fe73 	bl	800cd88 <perform_ref_signal_measurement>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800d0a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10c      	bne.n	800d0ca <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800d0b0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800d0b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d208      	bcs.n	800d0ca <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800d0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800d0c2:	e002      	b.n	800d0ca <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0c8:	e000      	b.n	800d0cc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800d0ca:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d0cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f040 80af 	bne.w	800d234 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800d0d6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800d0d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	f240 80aa 	bls.w	800d234 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800d0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800d0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800d0f0:	f107 031c 	add.w	r3, r7, #28
 800d0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f005 fcae 	bl	8012a58 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800d0fc:	8a7b      	ldrh	r3, [r7, #18]
 800d0fe:	461a      	mov	r2, r3
 800d100:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	2b00      	cmp	r3, #0
 800d106:	bfb8      	it	lt
 800d108:	425b      	neglt	r3, r3
 800d10a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800d10c:	2300      	movs	r3, #0
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800d112:	e086      	b.n	800d222 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800d11a:	f107 0314 	add.w	r3, r7, #20
 800d11e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d122:	f7ff fcdf 	bl	800cae4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d12c:	d103      	bne.n	800d136 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d12e:	23ce      	movs	r3, #206	; 0xce
 800d130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800d134:	e07e      	b.n	800d234 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800d136:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	4413      	add	r3, r2
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff fd2e 	bl	800cba0 <is_aperture>
 800d144:	4603      	mov	r3, r0
 800d146:	461a      	mov	r2, r3
 800d148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d003      	beq.n	800d156 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800d14e:	2301      	movs	r3, #1
 800d150:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800d154:	e06e      	b.n	800d234 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800d156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d158:	3301      	adds	r3, #1
 800d15a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800d166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7ff fd32 	bl	800cbd4 <enable_spad_bit>
 800d170:	4603      	mov	r3, r0
 800d172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d176:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d10c      	bne.n	800d198 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800d17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d180:	3301      	adds	r3, #1
 800d182:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800d18a:	4619      	mov	r1, r3
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f7ff fd59 	bl	800cc44 <set_ref_spad_map>
 800d192:	4603      	mov	r3, r0
 800d194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800d198:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d146      	bne.n	800d22e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800d1a0:	f107 0312 	add.w	r3, r7, #18
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f7ff fdee 	bl	800cd88 <perform_ref_signal_measurement>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800d1b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d13b      	bne.n	800d232 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d1ba:	8a7b      	ldrh	r3, [r7, #18]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	bfb8      	it	lt
 800d1c6:	425b      	neglt	r3, r3
 800d1c8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800d1ca:	8a7b      	ldrh	r3, [r7, #18]
 800d1cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d21c      	bcs.n	800d20c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800d1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d914      	bls.n	800d204 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800d1da:	f107 031c 	add.w	r3, r7, #28
 800d1de:	4619      	mov	r1, r3
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f7ff fd2f 	bl	800cc44 <set_ref_spad_map>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800d1f2:	f107 011c 	add.w	r1, r7, #28
 800d1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f005 fc2d 	bl	8012a58 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800d1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d200:	3b01      	subs	r3, #1
 800d202:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20a:	e00a      	b.n	800d222 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800d216:	f107 031c 	add.w	r3, r7, #28
 800d21a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d21c:	4618      	mov	r0, r3
 800d21e:	f005 fc1b 	bl	8012a58 <memcpy>
		while (!complete) {
 800d222:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d226:	2b00      	cmp	r3, #0
 800d228:	f43f af74 	beq.w	800d114 <VL53L0X_perform_ref_spad_management+0x2b8>
 800d22c:	e002      	b.n	800d234 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d22e:	bf00      	nop
 800d230:	e000      	b.n	800d234 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d232:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d234:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d115      	bne.n	800d268 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d240:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d248:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	b2da      	uxtb	r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	781a      	ldrb	r2, [r3, #0]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800d268:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	375c      	adds	r7, #92	; 0x5c
 800d270:	46bd      	mov	sp, r7
 800d272:	bd90      	pop	{r4, r7, pc}

0800d274 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800d274:	b590      	push	{r4, r7, lr}
 800d276:	b093      	sub	sp, #76	; 0x4c
 800d278:	af06      	add	r7, sp, #24
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	4613      	mov	r3, r2
 800d280:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d282:	2300      	movs	r3, #0
 800d284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800d28c:	23b4      	movs	r3, #180	; 0xb4
 800d28e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800d292:	2306      	movs	r3, #6
 800d294:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800d296:	232c      	movs	r3, #44	; 0x2c
 800d298:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d29a:	2201      	movs	r2, #1
 800d29c:	21ff      	movs	r1, #255	; 0xff
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f002 fdf2 	bl	800fe88 <VL53L0X_WrByte>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d2aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d107      	bne.n	800d2c2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	214f      	movs	r1, #79	; 0x4f
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f002 fde6 	bl	800fe88 <VL53L0X_WrByte>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d2c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d107      	bne.n	800d2da <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800d2ca:	222c      	movs	r2, #44	; 0x2c
 800d2cc:	214e      	movs	r1, #78	; 0x4e
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f002 fdda 	bl	800fe88 <VL53L0X_WrByte>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d2da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d107      	bne.n	800d2f2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	21ff      	movs	r1, #255	; 0xff
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f002 fdce 	bl	800fe88 <VL53L0X_WrByte>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d2f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d109      	bne.n	800d30e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800d2fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2fe:	461a      	mov	r2, r3
 800d300:	21b6      	movs	r1, #182	; 0xb6
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f002 fdc0 	bl	800fe88 <VL53L0X_WrByte>
 800d308:	4603      	mov	r3, r0
 800d30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800d30e:	2300      	movs	r3, #0
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
 800d312:	e009      	b.n	800d328 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	4413      	add	r3, r2
 800d31a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d31e:	2200      	movs	r2, #0
 800d320:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	3301      	adds	r3, #1
 800d326:	627b      	str	r3, [r7, #36]	; 0x24
 800d328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d3f1      	bcc.n	800d314 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d011      	beq.n	800d35a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d336:	e002      	b.n	800d33e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	3301      	adds	r3, #1
 800d33c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d33e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	4413      	add	r3, r2
 800d346:	4618      	mov	r0, r3
 800d348:	f7ff fc2a 	bl	800cba0 <is_aperture>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d103      	bne.n	800d35a <VL53L0X_set_reference_spads+0xe6>
 800d352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	429a      	cmp	r2, r3
 800d358:	d3ee      	bcc.n	800d338 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800d366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d36a:	79f9      	ldrb	r1, [r7, #7]
 800d36c:	f107 0214 	add.w	r2, r7, #20
 800d370:	9204      	str	r2, [sp, #16]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	9203      	str	r2, [sp, #12]
 800d376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d378:	9202      	str	r2, [sp, #8]
 800d37a:	9301      	str	r3, [sp, #4]
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	4623      	mov	r3, r4
 800d382:	4602      	mov	r2, r0
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f7ff fc83 	bl	800cc90 <enable_ref_spads>
 800d38a:	4603      	mov	r3, r0
 800d38c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800d390:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10c      	bne.n	800d3b2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	79fa      	ldrb	r2, [r7, #7]
 800d3ae:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800d3b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3734      	adds	r7, #52	; 0x34
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd90      	pop	{r4, r7, pc}

0800d3be <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b084      	sub	sp, #16
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10a      	bne.n	800d3ec <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800d3d6:	78fb      	ldrb	r3, [r7, #3]
 800d3d8:	f043 0301 	orr.w	r3, r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	461a      	mov	r2, r3
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f002 fd50 	bl	800fe88 <VL53L0X_WrByte>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800d3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d104      	bne.n	800d3fe <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f9bf 	bl	800d778 <VL53L0X_measurement_poll_for_completion>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d105      	bne.n	800d412 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d406:	2100      	movs	r1, #0
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7ff fab5 	bl	800c978 <VL53L0X_ClearInterruptMask>
 800d40e:	4603      	mov	r3, r0
 800d410:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d106      	bne.n	800d428 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800d41a:	2200      	movs	r2, #0
 800d41c:	2100      	movs	r1, #0
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f002 fd32 	bl	800fe88 <VL53L0X_WrByte>
 800d424:	4603      	mov	r3, r0
 800d426:	73fb      	strb	r3, [r7, #15]

	return Status;
 800d428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	4608      	mov	r0, r1
 800d43e:	4611      	mov	r1, r2
 800d440:	461a      	mov	r2, r3
 800d442:	4603      	mov	r3, r0
 800d444:	70fb      	strb	r3, [r7, #3]
 800d446:	460b      	mov	r3, r1
 800d448:	70bb      	strb	r3, [r7, #2]
 800d44a:	4613      	mov	r3, r2
 800d44c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d44e:	2300      	movs	r3, #0
 800d450:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800d452:	2300      	movs	r3, #0
 800d454:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d456:	2201      	movs	r2, #1
 800d458:	21ff      	movs	r1, #255	; 0xff
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f002 fd14 	bl	800fe88 <VL53L0X_WrByte>
 800d460:	4603      	mov	r3, r0
 800d462:	461a      	mov	r2, r3
 800d464:	7bfb      	ldrb	r3, [r7, #15]
 800d466:	4313      	orrs	r3, r2
 800d468:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d46a:	2200      	movs	r2, #0
 800d46c:	2100      	movs	r1, #0
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f002 fd0a 	bl	800fe88 <VL53L0X_WrByte>
 800d474:	4603      	mov	r3, r0
 800d476:	461a      	mov	r2, r3
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d47e:	2200      	movs	r2, #0
 800d480:	21ff      	movs	r1, #255	; 0xff
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f002 fd00 	bl	800fe88 <VL53L0X_WrByte>
 800d488:	4603      	mov	r3, r0
 800d48a:	461a      	mov	r2, r3
 800d48c:	7bfb      	ldrb	r3, [r7, #15]
 800d48e:	4313      	orrs	r3, r2
 800d490:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800d492:	78fb      	ldrb	r3, [r7, #3]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d01e      	beq.n	800d4d6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800d498:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d009      	beq.n	800d4b4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d4a0:	69ba      	ldr	r2, [r7, #24]
 800d4a2:	21cb      	movs	r1, #203	; 0xcb
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f002 fd71 	bl	800ff8c <VL53L0X_RdByte>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d4b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d02a      	beq.n	800d512 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d4bc:	f107 030e 	add.w	r3, r7, #14
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	21ee      	movs	r1, #238	; 0xee
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f002 fd61 	bl	800ff8c <VL53L0X_RdByte>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	7bfb      	ldrb	r3, [r7, #15]
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	73fb      	strb	r3, [r7, #15]
 800d4d4:	e01d      	b.n	800d512 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800d4d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00a      	beq.n	800d4f4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d4de:	78bb      	ldrb	r3, [r7, #2]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	21cb      	movs	r1, #203	; 0xcb
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f002 fccf 	bl	800fe88 <VL53L0X_WrByte>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d4f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00a      	beq.n	800d512 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d4fc:	787b      	ldrb	r3, [r7, #1]
 800d4fe:	2280      	movs	r2, #128	; 0x80
 800d500:	21ee      	movs	r1, #238	; 0xee
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f002 fd0e 	bl	800ff24 <VL53L0X_UpdateByte>
 800d508:	4603      	mov	r3, r0
 800d50a:	461a      	mov	r2, r3
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
 800d50e:	4313      	orrs	r3, r2
 800d510:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d512:	2201      	movs	r2, #1
 800d514:	21ff      	movs	r1, #255	; 0xff
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f002 fcb6 	bl	800fe88 <VL53L0X_WrByte>
 800d51c:	4603      	mov	r3, r0
 800d51e:	461a      	mov	r2, r3
 800d520:	7bfb      	ldrb	r3, [r7, #15]
 800d522:	4313      	orrs	r3, r2
 800d524:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d526:	2201      	movs	r2, #1
 800d528:	2100      	movs	r1, #0
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f002 fcac 	bl	800fe88 <VL53L0X_WrByte>
 800d530:	4603      	mov	r3, r0
 800d532:	461a      	mov	r2, r3
 800d534:	7bfb      	ldrb	r3, [r7, #15]
 800d536:	4313      	orrs	r3, r2
 800d538:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d53a:	2200      	movs	r2, #0
 800d53c:	21ff      	movs	r1, #255	; 0xff
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f002 fca2 	bl	800fe88 <VL53L0X_WrByte>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d54e:	7bbb      	ldrb	r3, [r7, #14]
 800d550:	f023 0310 	bic.w	r3, r3, #16
 800d554:	b2da      	uxtb	r2, r3
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	701a      	strb	r2, [r3, #0]

	return Status;
 800d55a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b08a      	sub	sp, #40	; 0x28
 800d56a:	af04      	add	r7, sp, #16
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	4611      	mov	r1, r2
 800d572:	461a      	mov	r2, r3
 800d574:	460b      	mov	r3, r1
 800d576:	71fb      	strb	r3, [r7, #7]
 800d578:	4613      	mov	r3, r2
 800d57a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d57c:	2300      	movs	r3, #0
 800d57e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d584:	2300      	movs	r3, #0
 800d586:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d588:	2300      	movs	r3, #0
 800d58a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d590:	79bb      	ldrb	r3, [r7, #6]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d003      	beq.n	800d59e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d59c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d59e:	2201      	movs	r2, #1
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f002 fc70 	bl	800fe88 <VL53L0X_WrByte>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d5ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d105      	bne.n	800d5c0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d5b4:	2140      	movs	r1, #64	; 0x40
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f7ff ff01 	bl	800d3be <VL53L0X_perform_single_ref_calibration>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d5c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d115      	bne.n	800d5f4 <VL53L0X_perform_vhv_calibration+0x8e>
 800d5c8:	79fb      	ldrb	r3, [r7, #7]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d112      	bne.n	800d5f4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d5ce:	7d39      	ldrb	r1, [r7, #20]
 800d5d0:	7d7a      	ldrb	r2, [r7, #21]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	9303      	str	r3, [sp, #12]
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	9302      	str	r3, [sp, #8]
 800d5da:	f107 0313 	add.w	r3, r7, #19
 800d5de:	9301      	str	r3, [sp, #4]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	2101      	movs	r1, #1
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f7ff ff23 	bl	800d434 <VL53L0X_ref_calibration_io>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	75fb      	strb	r3, [r7, #23]
 800d5f2:	e002      	b.n	800d5fa <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d112      	bne.n	800d628 <VL53L0X_perform_vhv_calibration+0xc2>
 800d602:	79bb      	ldrb	r3, [r7, #6]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00f      	beq.n	800d628 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d608:	7dbb      	ldrb	r3, [r7, #22]
 800d60a:	461a      	mov	r2, r3
 800d60c:	2101      	movs	r1, #1
 800d60e:	68f8      	ldr	r0, [r7, #12]
 800d610:	f002 fc3a 	bl	800fe88 <VL53L0X_WrByte>
 800d614:	4603      	mov	r3, r0
 800d616:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d103      	bne.n	800d628 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	7dba      	ldrb	r2, [r7, #22]
 800d624:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3718      	adds	r7, #24
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08a      	sub	sp, #40	; 0x28
 800d638:	af04      	add	r7, sp, #16
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	4611      	mov	r1, r2
 800d640:	461a      	mov	r2, r3
 800d642:	460b      	mov	r3, r1
 800d644:	71fb      	strb	r3, [r7, #7]
 800d646:	4613      	mov	r3, r2
 800d648:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d64a:	2300      	movs	r3, #0
 800d64c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d64e:	2300      	movs	r3, #0
 800d650:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d652:	2300      	movs	r3, #0
 800d654:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d656:	2300      	movs	r3, #0
 800d658:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d65a:	79bb      	ldrb	r3, [r7, #6]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d003      	beq.n	800d668 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d666:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d668:	2202      	movs	r2, #2
 800d66a:	2101      	movs	r1, #1
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f002 fc0b 	bl	800fe88 <VL53L0X_WrByte>
 800d672:	4603      	mov	r3, r0
 800d674:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d105      	bne.n	800d68a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d67e:	2100      	movs	r1, #0
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f7ff fe9c 	bl	800d3be <VL53L0X_perform_single_ref_calibration>
 800d686:	4603      	mov	r3, r0
 800d688:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d115      	bne.n	800d6be <VL53L0X_perform_phase_calibration+0x8a>
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d112      	bne.n	800d6be <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d698:	7d39      	ldrb	r1, [r7, #20]
 800d69a:	7d7a      	ldrb	r2, [r7, #21]
 800d69c:	2301      	movs	r3, #1
 800d69e:	9303      	str	r3, [sp, #12]
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	9302      	str	r3, [sp, #8]
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	9301      	str	r3, [sp, #4]
 800d6a8:	f107 0313 	add.w	r3, r7, #19
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	2101      	movs	r1, #1
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f7ff febe 	bl	800d434 <VL53L0X_ref_calibration_io>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	75fb      	strb	r3, [r7, #23]
 800d6bc:	e002      	b.n	800d6c4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d6c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d112      	bne.n	800d6f2 <VL53L0X_perform_phase_calibration+0xbe>
 800d6cc:	79bb      	ldrb	r3, [r7, #6]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00f      	beq.n	800d6f2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d6d2:	7dbb      	ldrb	r3, [r7, #22]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	2101      	movs	r1, #1
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f002 fbd5 	bl	800fe88 <VL53L0X_WrByte>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d6e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d103      	bne.n	800d6f2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	7dba      	ldrb	r2, [r7, #22]
 800d6ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d6f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3718      	adds	r7, #24
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b086      	sub	sp, #24
 800d702:	af00      	add	r7, sp, #0
 800d704:	60f8      	str	r0, [r7, #12]
 800d706:	60b9      	str	r1, [r7, #8]
 800d708:	607a      	str	r2, [r7, #4]
 800d70a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d70c:	2300      	movs	r3, #0
 800d70e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d71a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d71c:	78fa      	ldrb	r2, [r7, #3]
 800d71e:	2300      	movs	r3, #0
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f7ff ff1f 	bl	800d566 <VL53L0X_perform_vhv_calibration>
 800d728:	4603      	mov	r3, r0
 800d72a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d72c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d107      	bne.n	800d744 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d734:	78fa      	ldrb	r2, [r7, #3]
 800d736:	2300      	movs	r3, #0
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f7ff ff7a 	bl	800d634 <VL53L0X_perform_phase_calibration>
 800d740:	4603      	mov	r3, r0
 800d742:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10f      	bne.n	800d76c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d74c:	7dbb      	ldrb	r3, [r7, #22]
 800d74e:	461a      	mov	r2, r3
 800d750:	2101      	movs	r1, #1
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f002 fb98 	bl	800fe88 <VL53L0X_WrByte>
 800d758:	4603      	mov	r3, r0
 800d75a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d103      	bne.n	800d76c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	7dba      	ldrb	r2, [r7, #22]
 800d768:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d76c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d780:	2300      	movs	r3, #0
 800d782:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d78c:	f107 030f 	add.w	r3, r7, #15
 800d790:	4619      	mov	r1, r3
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7fe fe02 	bl	800c39c <VL53L0X_GetMeasurementDataReady>
 800d798:	4603      	mov	r3, r0
 800d79a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800d79c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d110      	bne.n	800d7c6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d00f      	beq.n	800d7ca <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d7b6:	d302      	bcc.n	800d7be <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d7b8:	23f9      	movs	r3, #249	; 0xf9
 800d7ba:	75fb      	strb	r3, [r7, #23]
			break;
 800d7bc:	e006      	b.n	800d7cc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f002 fc82 	bl	80100c8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d7c4:	e7e2      	b.n	800d78c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800d7c6:	bf00      	nop
 800d7c8:	e000      	b.n	800d7cc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800d7ca:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800d7cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3718      	adds	r7, #24
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3714      	adds	r7, #20
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b085      	sub	sp, #20
 800d802:	af00      	add	r7, sp, #0
 800d804:	4603      	mov	r3, r0
 800d806:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800d80c:	79fb      	ldrb	r3, [r7, #7]
 800d80e:	085b      	lsrs	r3, r3, #1
 800d810:	b2db      	uxtb	r3, r3
 800d812:	3b01      	subs	r3, #1
 800d814:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800d816:	7bfb      	ldrb	r3, [r7, #15]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3714      	adds	r7, #20
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d834:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800d836:	e002      	b.n	800d83e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	089b      	lsrs	r3, r3, #2
 800d83c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	429a      	cmp	r2, r3
 800d844:	d8f8      	bhi.n	800d838 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800d846:	e017      	b.n	800d878 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	4413      	add	r3, r2
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	429a      	cmp	r2, r3
 800d852:	d30b      	bcc.n	800d86c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	4413      	add	r3, r2
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	085b      	lsrs	r3, r3, #1
 800d864:	68ba      	ldr	r2, [r7, #8]
 800d866:	4413      	add	r3, r2
 800d868:	60fb      	str	r3, [r7, #12]
 800d86a:	e002      	b.n	800d872 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	085b      	lsrs	r3, r3, #1
 800d870:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	089b      	lsrs	r3, r3, #2
 800d876:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e4      	bne.n	800d848 <VL53L0X_isqrt+0x24>
	}

	return res;
 800d87e:	68fb      	ldr	r3, [r7, #12]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d894:	2300      	movs	r3, #0
 800d896:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800d898:	2200      	movs	r2, #0
 800d89a:	2183      	movs	r1, #131	; 0x83
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f002 faf3 	bl	800fe88 <VL53L0X_WrByte>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800d8ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d11e      	bne.n	800d8f2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800d8b8:	f107 030f 	add.w	r3, r7, #15
 800d8bc:	461a      	mov	r2, r3
 800d8be:	2183      	movs	r1, #131	; 0x83
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f002 fb63 	bl	800ff8c <VL53L0X_RdByte>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d10a      	bne.n	800d8e6 <VL53L0X_device_read_strobe+0x5a>
 800d8d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d106      	bne.n	800d8e6 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d8e4:	d3e8      	bcc.n	800d8b8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d8ec:	d301      	bcc.n	800d8f2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d8ee:	23f9      	movs	r3, #249	; 0xf9
 800d8f0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	2183      	movs	r1, #131	; 0x83
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f002 fac6 	bl	800fe88 <VL53L0X_WrByte>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	461a      	mov	r2, r3
 800d900:	7dfb      	ldrb	r3, [r7, #23]
 800d902:	4313      	orrs	r3, r2
 800d904:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800d906:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3718      	adds	r7, #24
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b098      	sub	sp, #96	; 0x60
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	460b      	mov	r3, r1
 800d91c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d91e:	2300      	movs	r3, #0
 800d920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800d924:	2300      	movs	r3, #0
 800d926:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800d938:	2300      	movs	r3, #0
 800d93a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800d93c:	2300      	movs	r3, #0
 800d93e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800d942:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800d946:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800d94c:	2300      	movs	r3, #0
 800d94e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d95a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800d95e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d962:	2b07      	cmp	r3, #7
 800d964:	f000 8408 	beq.w	800e178 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d968:	2201      	movs	r2, #1
 800d96a:	2180      	movs	r1, #128	; 0x80
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f002 fa8b 	bl	800fe88 <VL53L0X_WrByte>
 800d972:	4603      	mov	r3, r0
 800d974:	461a      	mov	r2, r3
 800d976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d97a:	4313      	orrs	r3, r2
 800d97c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d980:	2201      	movs	r2, #1
 800d982:	21ff      	movs	r1, #255	; 0xff
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f002 fa7f 	bl	800fe88 <VL53L0X_WrByte>
 800d98a:	4603      	mov	r3, r0
 800d98c:	461a      	mov	r2, r3
 800d98e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d992:	4313      	orrs	r3, r2
 800d994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d998:	2200      	movs	r2, #0
 800d99a:	2100      	movs	r1, #0
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f002 fa73 	bl	800fe88 <VL53L0X_WrByte>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d9b0:	2206      	movs	r2, #6
 800d9b2:	21ff      	movs	r1, #255	; 0xff
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f002 fa67 	bl	800fe88 <VL53L0X_WrByte>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	461a      	mov	r2, r3
 800d9be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d9c8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	2183      	movs	r1, #131	; 0x83
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f002 fadb 	bl	800ff8c <VL53L0X_RdByte>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	461a      	mov	r2, r3
 800d9da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800d9e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9e8:	f043 0304 	orr.w	r3, r3, #4
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	2183      	movs	r1, #131	; 0x83
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f002 fa48 	bl	800fe88 <VL53L0X_WrByte>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da00:	4313      	orrs	r3, r2
 800da02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800da06:	2207      	movs	r2, #7
 800da08:	21ff      	movs	r1, #255	; 0xff
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f002 fa3c 	bl	800fe88 <VL53L0X_WrByte>
 800da10:	4603      	mov	r3, r0
 800da12:	461a      	mov	r2, r3
 800da14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da18:	4313      	orrs	r3, r2
 800da1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800da1e:	2201      	movs	r2, #1
 800da20:	2181      	movs	r1, #129	; 0x81
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f002 fa30 	bl	800fe88 <VL53L0X_WrByte>
 800da28:	4603      	mov	r3, r0
 800da2a:	461a      	mov	r2, r3
 800da2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da30:	4313      	orrs	r3, r2
 800da32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f002 fb46 	bl	80100c8 <VL53L0X_PollingDelay>
 800da3c:	4603      	mov	r3, r0
 800da3e:	461a      	mov	r2, r3
 800da40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da44:	4313      	orrs	r3, r2
 800da46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800da4a:	2201      	movs	r2, #1
 800da4c:	2180      	movs	r1, #128	; 0x80
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f002 fa1a 	bl	800fe88 <VL53L0X_WrByte>
 800da54:	4603      	mov	r3, r0
 800da56:	461a      	mov	r2, r3
 800da58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da5c:	4313      	orrs	r3, r2
 800da5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800da62:	78fb      	ldrb	r3, [r7, #3]
 800da64:	f003 0301 	and.w	r3, r3, #1
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f000 8098 	beq.w	800db9e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800da6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da72:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800da76:	2b00      	cmp	r3, #0
 800da78:	f040 8091 	bne.w	800db9e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800da7c:	226b      	movs	r2, #107	; 0x6b
 800da7e:	2194      	movs	r1, #148	; 0x94
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f002 fa01 	bl	800fe88 <VL53L0X_WrByte>
 800da86:	4603      	mov	r3, r0
 800da88:	461a      	mov	r2, r3
 800da8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da8e:	4313      	orrs	r3, r2
 800da90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff fef9 	bl	800d88c <VL53L0X_device_read_strobe>
 800da9a:	4603      	mov	r3, r0
 800da9c:	461a      	mov	r2, r3
 800da9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daa2:	4313      	orrs	r3, r2
 800daa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800daa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800daac:	461a      	mov	r2, r3
 800daae:	2190      	movs	r1, #144	; 0x90
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f002 facd 	bl	8010050 <VL53L0X_RdDWord>
 800dab6:	4603      	mov	r3, r0
 800dab8:	461a      	mov	r2, r3
 800daba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dabe:	4313      	orrs	r3, r2
 800dac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	0a1b      	lsrs	r3, r3, #8
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dace:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	0bdb      	lsrs	r3, r3, #15
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	f003 0301 	and.w	r3, r3, #1
 800dadc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800dae0:	2224      	movs	r2, #36	; 0x24
 800dae2:	2194      	movs	r1, #148	; 0x94
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f002 f9cf 	bl	800fe88 <VL53L0X_WrByte>
 800daea:	4603      	mov	r3, r0
 800daec:	461a      	mov	r2, r3
 800daee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daf2:	4313      	orrs	r3, r2
 800daf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7ff fec7 	bl	800d88c <VL53L0X_device_read_strobe>
 800dafe:	4603      	mov	r3, r0
 800db00:	461a      	mov	r2, r3
 800db02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db06:	4313      	orrs	r3, r2
 800db08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db10:	461a      	mov	r2, r3
 800db12:	2190      	movs	r1, #144	; 0x90
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f002 fa9b 	bl	8010050 <VL53L0X_RdDWord>
 800db1a:	4603      	mov	r3, r0
 800db1c:	461a      	mov	r2, r3
 800db1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db22:	4313      	orrs	r3, r2
 800db24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800db28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2a:	0e1b      	lsrs	r3, r3, #24
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	0c1b      	lsrs	r3, r3, #16
 800db34:	b2db      	uxtb	r3, r3
 800db36:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	0a1b      	lsrs	r3, r3, #8
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800db40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db42:	b2db      	uxtb	r3, r3
 800db44:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800db46:	2225      	movs	r2, #37	; 0x25
 800db48:	2194      	movs	r1, #148	; 0x94
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f002 f99c 	bl	800fe88 <VL53L0X_WrByte>
 800db50:	4603      	mov	r3, r0
 800db52:	461a      	mov	r2, r3
 800db54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db58:	4313      	orrs	r3, r2
 800db5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff fe94 	bl	800d88c <VL53L0X_device_read_strobe>
 800db64:	4603      	mov	r3, r0
 800db66:	461a      	mov	r2, r3
 800db68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db6c:	4313      	orrs	r3, r2
 800db6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800db72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db76:	461a      	mov	r2, r3
 800db78:	2190      	movs	r1, #144	; 0x90
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f002 fa68 	bl	8010050 <VL53L0X_RdDWord>
 800db80:	4603      	mov	r3, r0
 800db82:	461a      	mov	r2, r3
 800db84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db88:	4313      	orrs	r3, r2
 800db8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	0e1b      	lsrs	r3, r3, #24
 800db92:	b2db      	uxtb	r3, r3
 800db94:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	0c1b      	lsrs	r3, r3, #16
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800db9e:	78fb      	ldrb	r3, [r7, #3]
 800dba0:	f003 0302 	and.w	r3, r3, #2
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f000 8189 	beq.w	800debc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800dbaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbae:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	f040 8182 	bne.w	800debc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800dbb8:	2202      	movs	r2, #2
 800dbba:	2194      	movs	r1, #148	; 0x94
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f002 f963 	bl	800fe88 <VL53L0X_WrByte>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7ff fe5b 	bl	800d88c <VL53L0X_device_read_strobe>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
 800dbda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800dbe4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800dbe8:	461a      	mov	r2, r3
 800dbea:	2190      	movs	r1, #144	; 0x90
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f002 f9cd 	bl	800ff8c <VL53L0X_RdByte>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800dc00:	227b      	movs	r2, #123	; 0x7b
 800dc02:	2194      	movs	r1, #148	; 0x94
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f002 f93f 	bl	800fe88 <VL53L0X_WrByte>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc12:	4313      	orrs	r3, r2
 800dc14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f7ff fe37 	bl	800d88c <VL53L0X_device_read_strobe>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	461a      	mov	r2, r3
 800dc22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc26:	4313      	orrs	r3, r2
 800dc28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800dc2c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800dc30:	461a      	mov	r2, r3
 800dc32:	2190      	movs	r1, #144	; 0x90
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f002 f9a9 	bl	800ff8c <VL53L0X_RdByte>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc42:	4313      	orrs	r3, r2
 800dc44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800dc48:	2277      	movs	r2, #119	; 0x77
 800dc4a:	2194      	movs	r1, #148	; 0x94
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f002 f91b 	bl	800fe88 <VL53L0X_WrByte>
 800dc52:	4603      	mov	r3, r0
 800dc54:	461a      	mov	r2, r3
 800dc56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff fe13 	bl	800d88c <VL53L0X_device_read_strobe>
 800dc66:	4603      	mov	r3, r0
 800dc68:	461a      	mov	r2, r3
 800dc6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dc74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc78:	461a      	mov	r2, r3
 800dc7a:	2190      	movs	r1, #144	; 0x90
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f002 f9e7 	bl	8010050 <VL53L0X_RdDWord>
 800dc82:	4603      	mov	r3, r0
 800dc84:	461a      	mov	r2, r3
 800dc86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800dc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc92:	0e5b      	lsrs	r3, r3, #25
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca0:	0c9b      	lsrs	r3, r3, #18
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcae:	0adb      	lsrs	r3, r3, #11
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800dcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbc:	091b      	lsrs	r3, r3, #4
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800dcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800dcda:	2278      	movs	r2, #120	; 0x78
 800dcdc:	2194      	movs	r1, #148	; 0x94
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f002 f8d2 	bl	800fe88 <VL53L0X_WrByte>
 800dce4:	4603      	mov	r3, r0
 800dce6:	461a      	mov	r2, r3
 800dce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcec:	4313      	orrs	r3, r2
 800dcee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff fdca 	bl	800d88c <VL53L0X_device_read_strobe>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd00:	4313      	orrs	r3, r2
 800dd02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dd06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	2190      	movs	r1, #144	; 0x90
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f002 f99e 	bl	8010050 <VL53L0X_RdDWord>
 800dd14:	4603      	mov	r3, r0
 800dd16:	461a      	mov	r2, r3
 800dd18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800dd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd24:	0f5b      	lsrs	r3, r3, #29
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd2c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800dd2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd32:	4413      	add	r3, r2
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3a:	0d9b      	lsrs	r3, r3, #22
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	0bdb      	lsrs	r3, r3, #15
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	0a1b      	lsrs	r3, r3, #8
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	085b      	lsrs	r3, r3, #1
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800dd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	019b      	lsls	r3, r3, #6
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800dd82:	2279      	movs	r2, #121	; 0x79
 800dd84:	2194      	movs	r1, #148	; 0x94
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f002 f87e 	bl	800fe88 <VL53L0X_WrByte>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	461a      	mov	r2, r3
 800dd90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd94:	4313      	orrs	r3, r2
 800dd96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff fd76 	bl	800d88c <VL53L0X_device_read_strobe>
 800dda0:	4603      	mov	r3, r0
 800dda2:	461a      	mov	r2, r3
 800dda4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ddae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	2190      	movs	r1, #144	; 0x90
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f002 f94a 	bl	8010050 <VL53L0X_RdDWord>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddcc:	0e9b      	lsrs	r3, r3, #26
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddd4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800ddd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddda:	4413      	add	r3, r2
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	0cdb      	lsrs	r3, r3, #19
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800ddee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf0:	0b1b      	lsrs	r3, r3, #12
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	095b      	lsrs	r3, r3, #5
 800de00:	b2db      	uxtb	r3, r3
 800de02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de06:	b2db      	uxtb	r3, r3
 800de08:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800de0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	b2db      	uxtb	r3, r3
 800de12:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800de16:	b2db      	uxtb	r3, r3
 800de18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800de1c:	227a      	movs	r2, #122	; 0x7a
 800de1e:	2194      	movs	r1, #148	; 0x94
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f002 f831 	bl	800fe88 <VL53L0X_WrByte>
 800de26:	4603      	mov	r3, r0
 800de28:	461a      	mov	r2, r3
 800de2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de2e:	4313      	orrs	r3, r2
 800de30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7ff fd29 	bl	800d88c <VL53L0X_device_read_strobe>
 800de3a:	4603      	mov	r3, r0
 800de3c:	461a      	mov	r2, r3
 800de3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de42:	4313      	orrs	r3, r2
 800de44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800de48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de4c:	461a      	mov	r2, r3
 800de4e:	2190      	movs	r1, #144	; 0x90
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f002 f8fd 	bl	8010050 <VL53L0X_RdDWord>
 800de56:	4603      	mov	r3, r0
 800de58:	461a      	mov	r2, r3
 800de5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de5e:	4313      	orrs	r3, r2
 800de60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de66:	0f9b      	lsrs	r3, r3, #30
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de6e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800de70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de74:	4413      	add	r3, r2
 800de76:	b2db      	uxtb	r3, r3
 800de78:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800de7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7c:	0ddb      	lsrs	r3, r3, #23
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de84:	b2db      	uxtb	r3, r3
 800de86:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800de88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8a:	0c1b      	lsrs	r3, r3, #16
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de92:	b2db      	uxtb	r3, r3
 800de94:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800de96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de98:	0a5b      	lsrs	r3, r3, #9
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800dea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea8:	089b      	lsrs	r3, r3, #2
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800deb6:	2300      	movs	r3, #0
 800deb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800debc:	78fb      	ldrb	r3, [r7, #3]
 800debe:	f003 0304 	and.w	r3, r3, #4
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f000 80f1 	beq.w	800e0aa <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800dec8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800decc:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f040 80ea 	bne.w	800e0aa <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ded6:	227b      	movs	r2, #123	; 0x7b
 800ded8:	2194      	movs	r1, #148	; 0x94
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f001 ffd4 	bl	800fe88 <VL53L0X_WrByte>
 800dee0:	4603      	mov	r3, r0
 800dee2:	461a      	mov	r2, r3
 800dee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dee8:	4313      	orrs	r3, r2
 800deea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff fccc 	bl	800d88c <VL53L0X_device_read_strobe>
 800def4:	4603      	mov	r3, r0
 800def6:	461a      	mov	r2, r3
 800def8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800defc:	4313      	orrs	r3, r2
 800defe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800df02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df06:	461a      	mov	r2, r3
 800df08:	2190      	movs	r1, #144	; 0x90
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f002 f8a0 	bl	8010050 <VL53L0X_RdDWord>
 800df10:	4603      	mov	r3, r0
 800df12:	461a      	mov	r2, r3
 800df14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df18:	4313      	orrs	r3, r2
 800df1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800df1e:	227c      	movs	r2, #124	; 0x7c
 800df20:	2194      	movs	r1, #148	; 0x94
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f001 ffb0 	bl	800fe88 <VL53L0X_WrByte>
 800df28:	4603      	mov	r3, r0
 800df2a:	461a      	mov	r2, r3
 800df2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df30:	4313      	orrs	r3, r2
 800df32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff fca8 	bl	800d88c <VL53L0X_device_read_strobe>
 800df3c:	4603      	mov	r3, r0
 800df3e:	461a      	mov	r2, r3
 800df40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df44:	4313      	orrs	r3, r2
 800df46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800df4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df4e:	461a      	mov	r2, r3
 800df50:	2190      	movs	r1, #144	; 0x90
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f002 f87c 	bl	8010050 <VL53L0X_RdDWord>
 800df58:	4603      	mov	r3, r0
 800df5a:	461a      	mov	r2, r3
 800df5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df60:	4313      	orrs	r3, r2
 800df62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800df66:	2273      	movs	r2, #115	; 0x73
 800df68:	2194      	movs	r1, #148	; 0x94
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f001 ff8c 	bl	800fe88 <VL53L0X_WrByte>
 800df70:	4603      	mov	r3, r0
 800df72:	461a      	mov	r2, r3
 800df74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df78:	4313      	orrs	r3, r2
 800df7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff fc84 	bl	800d88c <VL53L0X_device_read_strobe>
 800df84:	4603      	mov	r3, r0
 800df86:	461a      	mov	r2, r3
 800df88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df8c:	4313      	orrs	r3, r2
 800df8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800df92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df96:	461a      	mov	r2, r3
 800df98:	2190      	movs	r1, #144	; 0x90
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f002 f858 	bl	8010050 <VL53L0X_RdDWord>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800dfb6:	2274      	movs	r2, #116	; 0x74
 800dfb8:	2194      	movs	r1, #148	; 0x94
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f001 ff64 	bl	800fe88 <VL53L0X_WrByte>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff fc5c 	bl	800d88c <VL53L0X_device_read_strobe>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dfe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	2190      	movs	r1, #144	; 0x90
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f002 f830 	bl	8010050 <VL53L0X_RdDWord>
 800dff0:	4603      	mov	r3, r0
 800dff2:	461a      	mov	r2, r3
 800dff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dff8:	4313      	orrs	r3, r2
 800dffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800e002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e004:	4313      	orrs	r3, r2
 800e006:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800e008:	2275      	movs	r2, #117	; 0x75
 800e00a:	2194      	movs	r1, #148	; 0x94
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f001 ff3b 	bl	800fe88 <VL53L0X_WrByte>
 800e012:	4603      	mov	r3, r0
 800e014:	461a      	mov	r2, r3
 800e016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e01a:	4313      	orrs	r3, r2
 800e01c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff fc33 	bl	800d88c <VL53L0X_device_read_strobe>
 800e026:	4603      	mov	r3, r0
 800e028:	461a      	mov	r2, r3
 800e02a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e02e:	4313      	orrs	r3, r2
 800e030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e038:	461a      	mov	r2, r3
 800e03a:	2190      	movs	r1, #144	; 0x90
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f002 f807 	bl	8010050 <VL53L0X_RdDWord>
 800e042:	4603      	mov	r3, r0
 800e044:	461a      	mov	r2, r3
 800e046:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e04a:	4313      	orrs	r3, r2
 800e04c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800e050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e052:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800e054:	b29b      	uxth	r3, r3
 800e056:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e058:	2276      	movs	r2, #118	; 0x76
 800e05a:	2194      	movs	r1, #148	; 0x94
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f001 ff13 	bl	800fe88 <VL53L0X_WrByte>
 800e062:	4603      	mov	r3, r0
 800e064:	461a      	mov	r2, r3
 800e066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e06a:	4313      	orrs	r3, r2
 800e06c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff fc0b 	bl	800d88c <VL53L0X_device_read_strobe>
 800e076:	4603      	mov	r3, r0
 800e078:	461a      	mov	r2, r3
 800e07a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e07e:	4313      	orrs	r3, r2
 800e080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e088:	461a      	mov	r2, r3
 800e08a:	2190      	movs	r1, #144	; 0x90
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f001 ffdf 	bl	8010050 <VL53L0X_RdDWord>
 800e092:	4603      	mov	r3, r0
 800e094:	461a      	mov	r2, r3
 800e096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e09a:	4313      	orrs	r3, r2
 800e09c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800e0a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	2181      	movs	r1, #129	; 0x81
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f001 feea 	bl	800fe88 <VL53L0X_WrByte>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e0c2:	2206      	movs	r2, #6
 800e0c4:	21ff      	movs	r1, #255	; 0xff
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f001 fede 	bl	800fe88 <VL53L0X_WrByte>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e0da:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800e0de:	461a      	mov	r2, r3
 800e0e0:	2183      	movs	r1, #131	; 0x83
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f001 ff52 	bl	800ff8c <VL53L0X_RdByte>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800e0f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0fa:	f023 0304 	bic.w	r3, r3, #4
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	461a      	mov	r2, r3
 800e102:	2183      	movs	r1, #131	; 0x83
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f001 febf 	bl	800fe88 <VL53L0X_WrByte>
 800e10a:	4603      	mov	r3, r0
 800e10c:	461a      	mov	r2, r3
 800e10e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e112:	4313      	orrs	r3, r2
 800e114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e118:	2201      	movs	r2, #1
 800e11a:	21ff      	movs	r1, #255	; 0xff
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f001 feb3 	bl	800fe88 <VL53L0X_WrByte>
 800e122:	4603      	mov	r3, r0
 800e124:	461a      	mov	r2, r3
 800e126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e12a:	4313      	orrs	r3, r2
 800e12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e130:	2201      	movs	r2, #1
 800e132:	2100      	movs	r1, #0
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f001 fea7 	bl	800fe88 <VL53L0X_WrByte>
 800e13a:	4603      	mov	r3, r0
 800e13c:	461a      	mov	r2, r3
 800e13e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e142:	4313      	orrs	r3, r2
 800e144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e148:	2200      	movs	r2, #0
 800e14a:	21ff      	movs	r1, #255	; 0xff
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f001 fe9b 	bl	800fe88 <VL53L0X_WrByte>
 800e152:	4603      	mov	r3, r0
 800e154:	461a      	mov	r2, r3
 800e156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e15a:	4313      	orrs	r3, r2
 800e15c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e160:	2200      	movs	r2, #0
 800e162:	2180      	movs	r1, #128	; 0x80
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f001 fe8f 	bl	800fe88 <VL53L0X_WrByte>
 800e16a:	4603      	mov	r3, r0
 800e16c:	461a      	mov	r2, r3
 800e16e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e172:	4313      	orrs	r3, r2
 800e174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800e178:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f040 808f 	bne.w	800e2a0 <VL53L0X_get_info_from_device+0x98e>
 800e182:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e186:	2b07      	cmp	r3, #7
 800e188:	f000 808a 	beq.w	800e2a0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800e18c:	78fb      	ldrb	r3, [r7, #3]
 800e18e:	f003 0301 	and.w	r3, r3, #1
 800e192:	2b00      	cmp	r3, #0
 800e194:	d024      	beq.n	800e1e0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800e196:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e19a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d11e      	bne.n	800e1e0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800e1a8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800e1b2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1ba:	e00e      	b.n	800e1da <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800e1bc:	f107 0208 	add.w	r2, r7, #8
 800e1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c2:	4413      	add	r3, r2
 800e1c4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ca:	4413      	add	r3, r2
 800e1cc:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e1d0:	460a      	mov	r2, r1
 800e1d2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1dc:	2b05      	cmp	r3, #5
 800e1de:	dded      	ble.n	800e1bc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800e1e0:	78fb      	ldrb	r3, [r7, #3]
 800e1e2:	f003 0302 	and.w	r3, r3, #2
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d018      	beq.n	800e21c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e1ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1ee:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d112      	bne.n	800e21c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e1f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e200:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	33f3      	adds	r3, #243	; 0xf3
 800e20e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800e210:	f107 0310 	add.w	r3, r7, #16
 800e214:	4619      	mov	r1, r3
 800e216:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e218:	f004 fc54 	bl	8012ac4 <strcpy>

		}

		if (((option & 4) == 4) &&
 800e21c:	78fb      	ldrb	r3, [r7, #3]
 800e21e:	f003 0304 	and.w	r3, r3, #4
 800e222:	2b00      	cmp	r3, #0
 800e224:	d030      	beq.n	800e288 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e226:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e22a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d12a      	bne.n	800e288 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800e242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e244:	025b      	lsls	r3, r3, #9
 800e246:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e24c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800e256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d011      	beq.n	800e280 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800e25c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e25e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800e264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e26a:	fb02 f303 	mul.w	r3, r2, r3
 800e26e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800e270:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800e274:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800e278:	425b      	negs	r3, r3
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800e280:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800e288:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e28c:	78fb      	ldrb	r3, [r7, #3]
 800e28e:	4313      	orrs	r3, r2
 800e290:	b2db      	uxtb	r3, r3
 800e292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800e296:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e2a0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3760      	adds	r7, #96	; 0x60
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b087      	sub	sp, #28
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800e2b8:	f240 6277 	movw	r2, #1655	; 0x677
 800e2bc:	f04f 0300 	mov.w	r3, #0
 800e2c0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800e2c4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800e2c8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800e2ca:	78fb      	ldrb	r3, [r7, #3]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	fb02 f303 	mul.w	r3, r2, r3
 800e2d8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800e2da:	68bb      	ldr	r3, [r7, #8]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	371c      	adds	r7, #28
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b087      	sub	sp, #28
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d017      	beq.n	800e332 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	3b01      	subs	r3, #1
 800e306:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e308:	e005      	b.n	800e316 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	085b      	lsrs	r3, r3, #1
 800e30e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e310:	89fb      	ldrh	r3, [r7, #14]
 800e312:	3301      	adds	r3, #1
 800e314:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d1f4      	bne.n	800e30a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e320:	89fb      	ldrh	r3, [r7, #14]
 800e322:	021b      	lsls	r3, r3, #8
 800e324:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e32e:	4413      	add	r3, r2
 800e330:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e332:	8afb      	ldrh	r3, [r7, #22]

}
 800e334:	4618      	mov	r0, r3
 800e336:	371c      	adds	r7, #28
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr

0800e340 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e34e:	88fb      	ldrh	r3, [r7, #6]
 800e350:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e352:	88fa      	ldrh	r2, [r7, #6]
 800e354:	0a12      	lsrs	r2, r2, #8
 800e356:	b292      	uxth	r2, r2
 800e358:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e35a:	3301      	adds	r3, #1
 800e35c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e35e:	68fb      	ldr	r3, [r7, #12]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	4613      	mov	r3, r2
 800e378:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	4619      	mov	r1, r3
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f7ff ff92 	bl	800e2ac <VL53L0X_calc_macro_period_ps>
 800e388:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e390:	4a0a      	ldr	r2, [pc, #40]	; (800e3bc <VL53L0X_calc_timeout_mclks+0x50>)
 800e392:	fba2 2303 	umull	r2, r3, r2, r3
 800e396:	099b      	lsrs	r3, r3, #6
 800e398:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3a0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	085b      	lsrs	r3, r3, #1
 800e3a8:	441a      	add	r2, r3
	timeout_period_mclks =
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800e3b2:	69fb      	ldr	r3, [r7, #28]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3720      	adds	r7, #32
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	10624dd3 	.word	0x10624dd3

0800e3c0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	807b      	strh	r3, [r7, #2]
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e3d4:	787b      	ldrb	r3, [r7, #1]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7ff ff67 	bl	800e2ac <VL53L0X_calc_macro_period_ps>
 800e3de:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e3e6:	4a0a      	ldr	r2, [pc, #40]	; (800e410 <VL53L0X_calc_timeout_us+0x50>)
 800e3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ec:	099b      	lsrs	r3, r3, #6
 800e3ee:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800e3f0:	887b      	ldrh	r3, [r7, #2]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	fb02 f303 	mul.w	r3, r2, r3
 800e3f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800e3fc:	4a04      	ldr	r2, [pc, #16]	; (800e410 <VL53L0X_calc_timeout_us+0x50>)
 800e3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e402:	099b      	lsrs	r3, r3, #6
 800e404:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800e406:	697b      	ldr	r3, [r7, #20]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3718      	adds	r7, #24
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	10624dd3 	.word	0x10624dd3

0800e414 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08c      	sub	sp, #48	; 0x30
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	460b      	mov	r3, r1
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e422:	2300      	movs	r3, #0
 800e424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e43a:	7afb      	ldrb	r3, [r7, #11]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d005      	beq.n	800e44c <get_sequence_step_timeout+0x38>
 800e440:	7afb      	ldrb	r3, [r7, #11]
 800e442:	2b01      	cmp	r3, #1
 800e444:	d002      	beq.n	800e44c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e446:	7afb      	ldrb	r3, [r7, #11]
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d128      	bne.n	800e49e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e44c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e450:	461a      	mov	r2, r3
 800e452:	2100      	movs	r1, #0
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f7fd fa7d 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e45a:	4603      	mov	r3, r0
 800e45c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800e460:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e464:	2b00      	cmp	r3, #0
 800e466:	d109      	bne.n	800e47c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800e468:	f107 0320 	add.w	r3, r7, #32
 800e46c:	461a      	mov	r2, r3
 800e46e:	2146      	movs	r1, #70	; 0x46
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f001 fd8b 	bl	800ff8c <VL53L0X_RdByte>
 800e476:	4603      	mov	r3, r0
 800e478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e47c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e480:	b29b      	uxth	r3, r3
 800e482:	4618      	mov	r0, r3
 800e484:	f7ff ff5c 	bl	800e340 <VL53L0X_decode_timeout>
 800e488:	4603      	mov	r3, r0
 800e48a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e48c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e490:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e492:	4619      	mov	r1, r3
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7ff ff93 	bl	800e3c0 <VL53L0X_calc_timeout_us>
 800e49a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e49c:	e092      	b.n	800e5c4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e49e:	7afb      	ldrb	r3, [r7, #11]
 800e4a0:	2b03      	cmp	r3, #3
 800e4a2:	d135      	bne.n	800e510 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e4a4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	68f8      	ldr	r0, [r7, #12]
 800e4ae:	f7fd fa51 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e4b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f040 8081 	bne.w	800e5c4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e4c2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	f7fd fa42 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800e4d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d109      	bne.n	800e4f2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800e4de:	f107 031e 	add.w	r3, r7, #30
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	2151      	movs	r1, #81	; 0x51
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f001 fd7a 	bl	800ffe0 <VL53L0X_RdWord>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e4f2:	8bfb      	ldrh	r3, [r7, #30]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7ff ff23 	bl	800e340 <VL53L0X_decode_timeout>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e4fe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e502:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e504:	4619      	mov	r1, r3
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f7ff ff5a 	bl	800e3c0 <VL53L0X_calc_timeout_us>
 800e50c:	62b8      	str	r0, [r7, #40]	; 0x28
 800e50e:	e059      	b.n	800e5c4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e510:	7afb      	ldrb	r3, [r7, #11]
 800e512:	2b04      	cmp	r3, #4
 800e514:	d156      	bne.n	800e5c4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e516:	f107 0314 	add.w	r3, r7, #20
 800e51a:	4619      	mov	r1, r3
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f7fd fb25 	bl	800bb6c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e526:	7dfb      	ldrb	r3, [r7, #23]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d01d      	beq.n	800e568 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e52c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e530:	461a      	mov	r2, r3
 800e532:	2100      	movs	r1, #0
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f7fd fa0d 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e53a:	4603      	mov	r3, r0
 800e53c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e540:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10f      	bne.n	800e568 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800e548:	f107 031e 	add.w	r3, r7, #30
 800e54c:	461a      	mov	r2, r3
 800e54e:	2151      	movs	r1, #81	; 0x51
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f001 fd45 	bl	800ffe0 <VL53L0X_RdWord>
 800e556:	4603      	mov	r3, r0
 800e558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e55c:	8bfb      	ldrh	r3, [r7, #30]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7ff feee 	bl	800e340 <VL53L0X_decode_timeout>
 800e564:	4603      	mov	r3, r0
 800e566:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e568:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d109      	bne.n	800e584 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e570:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e574:	461a      	mov	r2, r3
 800e576:	2101      	movs	r1, #1
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7fd f9eb 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e57e:	4603      	mov	r3, r0
 800e580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e584:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d10f      	bne.n	800e5ac <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800e58c:	f107 031c 	add.w	r3, r7, #28
 800e590:	461a      	mov	r2, r3
 800e592:	2171      	movs	r1, #113	; 0x71
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f001 fd23 	bl	800ffe0 <VL53L0X_RdWord>
 800e59a:	4603      	mov	r3, r0
 800e59c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e5a0:	8bbb      	ldrh	r3, [r7, #28]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7ff fecc 	bl	800e340 <VL53L0X_decode_timeout>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e5ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e5b4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e5b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f7ff feff 	bl	800e3c0 <VL53L0X_calc_timeout_us>
 800e5c2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5c8:	601a      	str	r2, [r3, #0]

	return Status;
 800e5ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3730      	adds	r7, #48	; 0x30
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b08a      	sub	sp, #40	; 0x28
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	607a      	str	r2, [r7, #4]
 800e5e2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e5ea:	7afb      	ldrb	r3, [r7, #11]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d005      	beq.n	800e5fc <set_sequence_step_timeout+0x26>
 800e5f0:	7afb      	ldrb	r3, [r7, #11]
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d002      	beq.n	800e5fc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e5f6:	7afb      	ldrb	r3, [r7, #11]
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	d138      	bne.n	800e66e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e5fc:	f107 031b 	add.w	r3, r7, #27
 800e600:	461a      	mov	r2, r3
 800e602:	2100      	movs	r1, #0
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f7fd f9a5 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e60a:	4603      	mov	r3, r0
 800e60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e614:	2b00      	cmp	r3, #0
 800e616:	d11a      	bne.n	800e64e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e618:	7efb      	ldrb	r3, [r7, #27]
 800e61a:	461a      	mov	r2, r3
 800e61c:	6879      	ldr	r1, [r7, #4]
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	f7ff fea4 	bl	800e36c <VL53L0X_calc_timeout_mclks>
 800e624:	4603      	mov	r3, r0
 800e626:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e628:	8bbb      	ldrh	r3, [r7, #28]
 800e62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e62e:	d903      	bls.n	800e638 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e630:	23ff      	movs	r3, #255	; 0xff
 800e632:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e636:	e004      	b.n	800e642 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e638:	8bbb      	ldrh	r3, [r7, #28]
 800e63a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e63c:	3b01      	subs	r3, #1
 800e63e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e642:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e646:	b29a      	uxth	r2, r3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e64e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e652:	2b00      	cmp	r3, #0
 800e654:	f040 80ab 	bne.w	800e7ae <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e658:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e65c:	461a      	mov	r2, r3
 800e65e:	2146      	movs	r1, #70	; 0x46
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f001 fc11 	bl	800fe88 <VL53L0X_WrByte>
 800e666:	4603      	mov	r3, r0
 800e668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e66c:	e09f      	b.n	800e7ae <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e66e:	7afb      	ldrb	r3, [r7, #11]
 800e670:	2b03      	cmp	r3, #3
 800e672:	d135      	bne.n	800e6e0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e674:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d11b      	bne.n	800e6b4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e67c:	f107 031b 	add.w	r3, r7, #27
 800e680:	461a      	mov	r2, r3
 800e682:	2100      	movs	r1, #0
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f7fd f965 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e68a:	4603      	mov	r3, r0
 800e68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e690:	7efb      	ldrb	r3, [r7, #27]
 800e692:	461a      	mov	r2, r3
 800e694:	6879      	ldr	r1, [r7, #4]
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f7ff fe68 	bl	800e36c <VL53L0X_calc_timeout_mclks>
 800e69c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e69e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e6a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7ff fe20 	bl	800e2e8 <VL53L0X_encode_timeout>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e6ac:	8b3a      	ldrh	r2, [r7, #24]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e6b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d108      	bne.n	800e6ce <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e6bc:	8b3b      	ldrh	r3, [r7, #24]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	2151      	movs	r1, #81	; 0x51
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f001 fc04 	bl	800fed0 <VL53L0X_WrWord>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e6ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d16b      	bne.n	800e7ae <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e6de:	e066      	b.n	800e7ae <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e6e0:	7afb      	ldrb	r3, [r7, #11]
 800e6e2:	2b04      	cmp	r3, #4
 800e6e4:	d160      	bne.n	800e7a8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e6e6:	f107 0310 	add.w	r3, r7, #16
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	f7fd fa3d 	bl	800bb6c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e6f6:	7cfb      	ldrb	r3, [r7, #19]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01d      	beq.n	800e738 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e6fc:	f107 031b 	add.w	r3, r7, #27
 800e700:	461a      	mov	r2, r3
 800e702:	2100      	movs	r1, #0
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7fd f925 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e70a:	4603      	mov	r3, r0
 800e70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e714:	2b00      	cmp	r3, #0
 800e716:	d10f      	bne.n	800e738 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e718:	f107 0318 	add.w	r3, r7, #24
 800e71c:	461a      	mov	r2, r3
 800e71e:	2151      	movs	r1, #81	; 0x51
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f001 fc5d 	bl	800ffe0 <VL53L0X_RdWord>
 800e726:	4603      	mov	r3, r0
 800e728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e72c:	8b3b      	ldrh	r3, [r7, #24]
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff fe06 	bl	800e340 <VL53L0X_decode_timeout>
 800e734:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e736:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e738:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d109      	bne.n	800e754 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e740:	f107 031b 	add.w	r3, r7, #27
 800e744:	461a      	mov	r2, r3
 800e746:	2101      	movs	r1, #1
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f7fd f903 	bl	800b954 <VL53L0X_GetVcselPulsePeriod>
 800e74e:	4603      	mov	r3, r0
 800e750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800e754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d128      	bne.n	800e7ae <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e75c:	7efb      	ldrb	r3, [r7, #27]
 800e75e:	461a      	mov	r2, r3
 800e760:	6879      	ldr	r1, [r7, #4]
 800e762:	68f8      	ldr	r0, [r7, #12]
 800e764:	f7ff fe02 	bl	800e36c <VL53L0X_calc_timeout_mclks>
 800e768:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e76a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76c:	6a3a      	ldr	r2, [r7, #32]
 800e76e:	4413      	add	r3, r2
 800e770:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e772:	6a38      	ldr	r0, [r7, #32]
 800e774:	f7ff fdb8 	bl	800e2e8 <VL53L0X_encode_timeout>
 800e778:	4603      	mov	r3, r0
 800e77a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800e77c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e780:	2b00      	cmp	r3, #0
 800e782:	d108      	bne.n	800e796 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800e784:	8bfb      	ldrh	r3, [r7, #30]
 800e786:	461a      	mov	r2, r3
 800e788:	2171      	movs	r1, #113	; 0x71
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	f001 fba0 	bl	800fed0 <VL53L0X_WrWord>
 800e790:	4603      	mov	r3, r0
 800e792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800e796:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d107      	bne.n	800e7ae <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800e7a6:	e002      	b.n	800e7ae <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e7a8:	23fc      	movs	r3, #252	; 0xfc
 800e7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800e7ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3728      	adds	r7, #40	; 0x28
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b08a      	sub	sp, #40	; 0x28
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	70fb      	strb	r3, [r7, #3]
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800e7d0:	230c      	movs	r3, #12
 800e7d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800e7d6:	2312      	movs	r3, #18
 800e7d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800e7dc:	2308      	movs	r3, #8
 800e7de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800e7e2:	230e      	movs	r3, #14
 800e7e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800e7ec:	78bb      	ldrb	r3, [r7, #2]
 800e7ee:	f003 0301 	and.w	r3, r3, #1
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d003      	beq.n	800e800 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e7f8:	23fc      	movs	r3, #252	; 0xfc
 800e7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7fe:	e020      	b.n	800e842 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800e800:	78fb      	ldrb	r3, [r7, #3]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10d      	bne.n	800e822 <VL53L0X_set_vcsel_pulse_period+0x68>
 800e806:	78ba      	ldrb	r2, [r7, #2]
 800e808:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d304      	bcc.n	800e81a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800e810:	78ba      	ldrb	r2, [r7, #2]
 800e812:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e816:	429a      	cmp	r2, r3
 800e818:	d903      	bls.n	800e822 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e81a:	23fc      	movs	r3, #252	; 0xfc
 800e81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e820:	e00f      	b.n	800e842 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800e822:	78fb      	ldrb	r3, [r7, #3]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d10c      	bne.n	800e842 <VL53L0X_set_vcsel_pulse_period+0x88>
 800e828:	78ba      	ldrb	r2, [r7, #2]
 800e82a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e82e:	429a      	cmp	r2, r3
 800e830:	d304      	bcc.n	800e83c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800e832:	78ba      	ldrb	r2, [r7, #2]
 800e834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e838:	429a      	cmp	r2, r3
 800e83a:	d902      	bls.n	800e842 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e83c:	23fc      	movs	r3, #252	; 0xfc
 800e83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800e842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e846:	2b00      	cmp	r3, #0
 800e848:	d002      	beq.n	800e850 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800e84a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e84e:	e239      	b.n	800ecc4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800e850:	78fb      	ldrb	r3, [r7, #3]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d150      	bne.n	800e8f8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800e856:	78bb      	ldrb	r3, [r7, #2]
 800e858:	2b0c      	cmp	r3, #12
 800e85a:	d110      	bne.n	800e87e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800e85c:	2218      	movs	r2, #24
 800e85e:	2157      	movs	r1, #87	; 0x57
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f001 fb11 	bl	800fe88 <VL53L0X_WrByte>
 800e866:	4603      	mov	r3, r0
 800e868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800e86c:	2208      	movs	r2, #8
 800e86e:	2156      	movs	r1, #86	; 0x56
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f001 fb09 	bl	800fe88 <VL53L0X_WrByte>
 800e876:	4603      	mov	r3, r0
 800e878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e87c:	e17f      	b.n	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e87e:	78bb      	ldrb	r3, [r7, #2]
 800e880:	2b0e      	cmp	r3, #14
 800e882:	d110      	bne.n	800e8a6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800e884:	2230      	movs	r2, #48	; 0x30
 800e886:	2157      	movs	r1, #87	; 0x57
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f001 fafd 	bl	800fe88 <VL53L0X_WrByte>
 800e88e:	4603      	mov	r3, r0
 800e890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800e894:	2208      	movs	r2, #8
 800e896:	2156      	movs	r1, #86	; 0x56
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f001 faf5 	bl	800fe88 <VL53L0X_WrByte>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8a4:	e16b      	b.n	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800e8a6:	78bb      	ldrb	r3, [r7, #2]
 800e8a8:	2b10      	cmp	r3, #16
 800e8aa:	d110      	bne.n	800e8ce <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800e8ac:	2240      	movs	r2, #64	; 0x40
 800e8ae:	2157      	movs	r1, #87	; 0x57
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f001 fae9 	bl	800fe88 <VL53L0X_WrByte>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800e8bc:	2208      	movs	r2, #8
 800e8be:	2156      	movs	r1, #86	; 0x56
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f001 fae1 	bl	800fe88 <VL53L0X_WrByte>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8cc:	e157      	b.n	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800e8ce:	78bb      	ldrb	r3, [r7, #2]
 800e8d0:	2b12      	cmp	r3, #18
 800e8d2:	f040 8154 	bne.w	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e8d6:	2250      	movs	r2, #80	; 0x50
 800e8d8:	2157      	movs	r1, #87	; 0x57
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f001 fad4 	bl	800fe88 <VL53L0X_WrByte>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800e8e6:	2208      	movs	r2, #8
 800e8e8:	2156      	movs	r1, #86	; 0x56
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f001 facc 	bl	800fe88 <VL53L0X_WrByte>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8f6:	e142      	b.n	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800e8f8:	78fb      	ldrb	r3, [r7, #3]
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	f040 813f 	bne.w	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800e900:	78bb      	ldrb	r3, [r7, #2]
 800e902:	2b08      	cmp	r3, #8
 800e904:	d14c      	bne.n	800e9a0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800e906:	2210      	movs	r2, #16
 800e908:	2148      	movs	r1, #72	; 0x48
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f001 fabc 	bl	800fe88 <VL53L0X_WrByte>
 800e910:	4603      	mov	r3, r0
 800e912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800e916:	2208      	movs	r2, #8
 800e918:	2147      	movs	r1, #71	; 0x47
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f001 fab4 	bl	800fe88 <VL53L0X_WrByte>
 800e920:	4603      	mov	r3, r0
 800e922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e926:	2202      	movs	r2, #2
 800e928:	2132      	movs	r1, #50	; 0x32
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f001 faac 	bl	800fe88 <VL53L0X_WrByte>
 800e930:	4603      	mov	r3, r0
 800e932:	461a      	mov	r2, r3
 800e934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e938:	4313      	orrs	r3, r2
 800e93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800e93e:	220c      	movs	r2, #12
 800e940:	2130      	movs	r1, #48	; 0x30
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f001 faa0 	bl	800fe88 <VL53L0X_WrByte>
 800e948:	4603      	mov	r3, r0
 800e94a:	461a      	mov	r2, r3
 800e94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e950:	4313      	orrs	r3, r2
 800e952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e956:	2201      	movs	r2, #1
 800e958:	21ff      	movs	r1, #255	; 0xff
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f001 fa94 	bl	800fe88 <VL53L0X_WrByte>
 800e960:	4603      	mov	r3, r0
 800e962:	461a      	mov	r2, r3
 800e964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e968:	4313      	orrs	r3, r2
 800e96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800e96e:	2230      	movs	r2, #48	; 0x30
 800e970:	2130      	movs	r1, #48	; 0x30
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f001 fa88 	bl	800fe88 <VL53L0X_WrByte>
 800e978:	4603      	mov	r3, r0
 800e97a:	461a      	mov	r2, r3
 800e97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e980:	4313      	orrs	r3, r2
 800e982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e986:	2200      	movs	r2, #0
 800e988:	21ff      	movs	r1, #255	; 0xff
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f001 fa7c 	bl	800fe88 <VL53L0X_WrByte>
 800e990:	4603      	mov	r3, r0
 800e992:	461a      	mov	r2, r3
 800e994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e998:	4313      	orrs	r3, r2
 800e99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e99e:	e0ee      	b.n	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800e9a0:	78bb      	ldrb	r3, [r7, #2]
 800e9a2:	2b0a      	cmp	r3, #10
 800e9a4:	d14c      	bne.n	800ea40 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800e9a6:	2228      	movs	r2, #40	; 0x28
 800e9a8:	2148      	movs	r1, #72	; 0x48
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f001 fa6c 	bl	800fe88 <VL53L0X_WrByte>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800e9b6:	2208      	movs	r2, #8
 800e9b8:	2147      	movs	r1, #71	; 0x47
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f001 fa64 	bl	800fe88 <VL53L0X_WrByte>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e9c6:	2203      	movs	r2, #3
 800e9c8:	2132      	movs	r1, #50	; 0x32
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f001 fa5c 	bl	800fe88 <VL53L0X_WrByte>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e9de:	2209      	movs	r2, #9
 800e9e0:	2130      	movs	r1, #48	; 0x30
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f001 fa50 	bl	800fe88 <VL53L0X_WrByte>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	21ff      	movs	r1, #255	; 0xff
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f001 fa44 	bl	800fe88 <VL53L0X_WrByte>
 800ea00:	4603      	mov	r3, r0
 800ea02:	461a      	mov	r2, r3
 800ea04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ea0e:	2220      	movs	r2, #32
 800ea10:	2130      	movs	r1, #48	; 0x30
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f001 fa38 	bl	800fe88 <VL53L0X_WrByte>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea20:	4313      	orrs	r3, r2
 800ea22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ea26:	2200      	movs	r2, #0
 800ea28:	21ff      	movs	r1, #255	; 0xff
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f001 fa2c 	bl	800fe88 <VL53L0X_WrByte>
 800ea30:	4603      	mov	r3, r0
 800ea32:	461a      	mov	r2, r3
 800ea34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea3e:	e09e      	b.n	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800ea40:	78bb      	ldrb	r3, [r7, #2]
 800ea42:	2b0c      	cmp	r3, #12
 800ea44:	d14c      	bne.n	800eae0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800ea46:	2238      	movs	r2, #56	; 0x38
 800ea48:	2148      	movs	r1, #72	; 0x48
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f001 fa1c 	bl	800fe88 <VL53L0X_WrByte>
 800ea50:	4603      	mov	r3, r0
 800ea52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800ea56:	2208      	movs	r2, #8
 800ea58:	2147      	movs	r1, #71	; 0x47
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f001 fa14 	bl	800fe88 <VL53L0X_WrByte>
 800ea60:	4603      	mov	r3, r0
 800ea62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ea66:	2203      	movs	r2, #3
 800ea68:	2132      	movs	r1, #50	; 0x32
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f001 fa0c 	bl	800fe88 <VL53L0X_WrByte>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ea7e:	2208      	movs	r2, #8
 800ea80:	2130      	movs	r1, #48	; 0x30
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f001 fa00 	bl	800fe88 <VL53L0X_WrByte>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea90:	4313      	orrs	r3, r2
 800ea92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ea96:	2201      	movs	r2, #1
 800ea98:	21ff      	movs	r1, #255	; 0xff
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f001 f9f4 	bl	800fe88 <VL53L0X_WrByte>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800eaae:	2220      	movs	r2, #32
 800eab0:	2130      	movs	r1, #48	; 0x30
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f001 f9e8 	bl	800fe88 <VL53L0X_WrByte>
 800eab8:	4603      	mov	r3, r0
 800eaba:	461a      	mov	r2, r3
 800eabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eac0:	4313      	orrs	r3, r2
 800eac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800eac6:	2200      	movs	r2, #0
 800eac8:	21ff      	movs	r1, #255	; 0xff
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f001 f9dc 	bl	800fe88 <VL53L0X_WrByte>
 800ead0:	4603      	mov	r3, r0
 800ead2:	461a      	mov	r2, r3
 800ead4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ead8:	4313      	orrs	r3, r2
 800eada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eade:	e04e      	b.n	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800eae0:	78bb      	ldrb	r3, [r7, #2]
 800eae2:	2b0e      	cmp	r3, #14
 800eae4:	d14b      	bne.n	800eb7e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800eae6:	2248      	movs	r2, #72	; 0x48
 800eae8:	2148      	movs	r1, #72	; 0x48
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f001 f9cc 	bl	800fe88 <VL53L0X_WrByte>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800eaf6:	2208      	movs	r2, #8
 800eaf8:	2147      	movs	r1, #71	; 0x47
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f001 f9c4 	bl	800fe88 <VL53L0X_WrByte>
 800eb00:	4603      	mov	r3, r0
 800eb02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800eb06:	2203      	movs	r2, #3
 800eb08:	2132      	movs	r1, #50	; 0x32
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f001 f9bc 	bl	800fe88 <VL53L0X_WrByte>
 800eb10:	4603      	mov	r3, r0
 800eb12:	461a      	mov	r2, r3
 800eb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800eb1e:	2207      	movs	r2, #7
 800eb20:	2130      	movs	r1, #48	; 0x30
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f001 f9b0 	bl	800fe88 <VL53L0X_WrByte>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb30:	4313      	orrs	r3, r2
 800eb32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800eb36:	2201      	movs	r2, #1
 800eb38:	21ff      	movs	r1, #255	; 0xff
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f001 f9a4 	bl	800fe88 <VL53L0X_WrByte>
 800eb40:	4603      	mov	r3, r0
 800eb42:	461a      	mov	r2, r3
 800eb44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800eb4e:	2220      	movs	r2, #32
 800eb50:	2130      	movs	r1, #48	; 0x30
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f001 f998 	bl	800fe88 <VL53L0X_WrByte>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb60:	4313      	orrs	r3, r2
 800eb62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800eb66:	2200      	movs	r2, #0
 800eb68:	21ff      	movs	r1, #255	; 0xff
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f001 f98c 	bl	800fe88 <VL53L0X_WrByte>
 800eb70:	4603      	mov	r3, r0
 800eb72:	461a      	mov	r2, r3
 800eb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800eb7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d17f      	bne.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800eb86:	78bb      	ldrb	r3, [r7, #2]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fe fe38 	bl	800d7fe <VL53L0X_encode_vcsel_period>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800eb94:	78fb      	ldrb	r3, [r7, #3]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d002      	beq.n	800eba0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d045      	beq.n	800ec2a <VL53L0X_set_vcsel_pulse_period+0x470>
 800eb9e:	e06e      	b.n	800ec7e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800eba0:	f107 0314 	add.w	r3, r7, #20
 800eba4:	461a      	mov	r2, r3
 800eba6:	2103      	movs	r1, #3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7ff fc33 	bl	800e414 <get_sequence_step_timeout>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ebb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d109      	bne.n	800ebd0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ebbc:	f107 0310 	add.w	r3, r7, #16
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	2102      	movs	r1, #2
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff fc25 	bl	800e414 <get_sequence_step_timeout>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ebd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d109      	bne.n	800ebec <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ebd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ebdc:	461a      	mov	r2, r3
 800ebde:	2150      	movs	r1, #80	; 0x50
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f001 f951 	bl	800fe88 <VL53L0X_WrByte>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ebec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d108      	bne.n	800ec06 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	2103      	movs	r1, #3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff fceb 	bl	800e5d6 <set_sequence_step_timeout>
 800ec00:	4603      	mov	r3, r0
 800ec02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800ec06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d108      	bne.n	800ec20 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	461a      	mov	r2, r3
 800ec12:	2102      	movs	r1, #2
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff fcde 	bl	800e5d6 <set_sequence_step_timeout>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	78ba      	ldrb	r2, [r7, #2]
 800ec24:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ec28:	e02e      	b.n	800ec88 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ec2a:	f107 0318 	add.w	r3, r7, #24
 800ec2e:	461a      	mov	r2, r3
 800ec30:	2104      	movs	r1, #4
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff fbee 	bl	800e414 <get_sequence_step_timeout>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ec3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d109      	bne.n	800ec5a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800ec46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	2170      	movs	r1, #112	; 0x70
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f001 f91a 	bl	800fe88 <VL53L0X_WrByte>
 800ec54:	4603      	mov	r3, r0
 800ec56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ec5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d108      	bne.n	800ec74 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	461a      	mov	r2, r3
 800ec66:	2104      	movs	r1, #4
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff fcb4 	bl	800e5d6 <set_sequence_step_timeout>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	78ba      	ldrb	r2, [r7, #2]
 800ec78:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ec7c:	e004      	b.n	800ec88 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec7e:	23fc      	movs	r3, #252	; 0xfc
 800ec80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec84:	e000      	b.n	800ec88 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ec86:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ec88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d109      	bne.n	800eca4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ec96:	69f9      	ldr	r1, [r7, #28]
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7fc fe1d 	bl	800b8d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800eca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d109      	bne.n	800ecc0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ecac:	f107 010f 	add.w	r1, r7, #15
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7fe fcbd 	bl	800d634 <VL53L0X_perform_phase_calibration>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ecc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3728      	adds	r7, #40	; 0x28
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b086      	sub	sp, #24
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	607a      	str	r2, [r7, #4]
 800ecd8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ecde:	7afb      	ldrb	r3, [r7, #11]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d00a      	beq.n	800ecfe <VL53L0X_get_vcsel_pulse_period+0x32>
 800ece8:	e013      	b.n	800ed12 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ecea:	f107 0316 	add.w	r3, r7, #22
 800ecee:	461a      	mov	r2, r3
 800ecf0:	2150      	movs	r1, #80	; 0x50
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f001 f94a 	bl	800ff8c <VL53L0X_RdByte>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ecfc:	e00b      	b.n	800ed16 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ecfe:	f107 0316 	add.w	r3, r7, #22
 800ed02:	461a      	mov	r2, r3
 800ed04:	2170      	movs	r1, #112	; 0x70
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f001 f940 	bl	800ff8c <VL53L0X_RdByte>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ed10:	e001      	b.n	800ed16 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed12:	23fc      	movs	r3, #252	; 0xfc
 800ed14:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ed16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d107      	bne.n	800ed2e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ed1e:	7dbb      	ldrb	r3, [r7, #22]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fe fd59 	bl	800d7d8 <VL53L0X_decode_vcsel_period>
 800ed26:	4603      	mov	r3, r0
 800ed28:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	701a      	strb	r2, [r3, #0]

	return Status;
 800ed2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3718      	adds	r7, #24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b092      	sub	sp, #72	; 0x48
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
 800ed42:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed44:	2300      	movs	r3, #0
 800ed46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ed4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ed4e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ed50:	f240 7376 	movw	r3, #1910	; 0x776
 800ed54:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ed56:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ed5a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ed5c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ed60:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ed62:	f240 234e 	movw	r3, #590	; 0x24e
 800ed66:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ed68:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ed6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ed6e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ed72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ed74:	f240 2326 	movw	r3, #550	; 0x226
 800ed78:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ed7e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ed82:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ed84:	2300      	movs	r3, #0
 800ed86:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	6a3b      	ldr	r3, [r7, #32]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d205      	bcs.n	800ed9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed90:	23fc      	movs	r3, #252	; 0xfc
 800ed92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ed96:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ed9a:	e0aa      	b.n	800eef2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ed9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800eda8:	f107 0314 	add.w	r3, r7, #20
 800edac:	4619      	mov	r1, r3
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7fc fedc 	bl	800bb6c <VL53L0X_GetSequenceStepEnables>
 800edb4:	4603      	mov	r3, r0
 800edb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800edba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d15b      	bne.n	800ee7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800edc2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d105      	bne.n	800edd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800edc8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800edce:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d052      	beq.n	800ee7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800edd4:	f107 0310 	add.w	r3, r7, #16
 800edd8:	461a      	mov	r2, r3
 800edda:	2102      	movs	r1, #2
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7ff fb19 	bl	800e414 <get_sequence_step_timeout>
 800ede2:	4603      	mov	r3, r0
 800ede4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ede8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800edec:	2b00      	cmp	r3, #0
 800edee:	d002      	beq.n	800edf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800edf0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800edf4:	e07d      	b.n	800eef2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800edf6:	7d3b      	ldrb	r3, [r7, #20]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00f      	beq.n	800ee1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800edfc:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800edfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee00:	4413      	add	r3, r2
 800ee02:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ee04:	69fa      	ldr	r2, [r7, #28]
 800ee06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d204      	bcs.n	800ee16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ee0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	1ad3      	subs	r3, r2, r3
 800ee12:	643b      	str	r3, [r7, #64]	; 0x40
 800ee14:	e002      	b.n	800ee1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee16:	23fc      	movs	r3, #252	; 0xfc
 800ee18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ee1c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d002      	beq.n	800ee2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ee24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee28:	e063      	b.n	800eef2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ee2a:	7dbb      	ldrb	r3, [r7, #22]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d011      	beq.n	800ee54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee34:	4413      	add	r3, r2
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ee3a:	69fa      	ldr	r2, [r7, #28]
 800ee3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d204      	bcs.n	800ee4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ee42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	643b      	str	r3, [r7, #64]	; 0x40
 800ee4a:	e016      	b.n	800ee7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee4c:	23fc      	movs	r3, #252	; 0xfc
 800ee4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ee52:	e012      	b.n	800ee7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ee54:	7d7b      	ldrb	r3, [r7, #21]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00f      	beq.n	800ee7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee5e:	4413      	add	r3, r2
 800ee60:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ee62:	69fa      	ldr	r2, [r7, #28]
 800ee64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d204      	bcs.n	800ee74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ee6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	643b      	str	r3, [r7, #64]	; 0x40
 800ee72:	e002      	b.n	800ee7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee74:	23fc      	movs	r3, #252	; 0xfc
 800ee76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ee7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d002      	beq.n	800ee88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ee82:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ee86:	e034      	b.n	800eef2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d019      	beq.n	800eec2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ee8e:	f107 030c 	add.w	r3, r7, #12
 800ee92:	461a      	mov	r2, r3
 800ee94:	2103      	movs	r1, #3
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7ff fabc 	bl	800e414 <get_sequence_step_timeout>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eea6:	4413      	add	r3, r2
 800eea8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800eeaa:	69fa      	ldr	r2, [r7, #28]
 800eeac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d204      	bcs.n	800eebc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800eeb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	643b      	str	r3, [r7, #64]	; 0x40
 800eeba:	e002      	b.n	800eec2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eebc:	23fc      	movs	r3, #252	; 0xfc
 800eebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800eec2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d111      	bne.n	800eeee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800eeca:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00e      	beq.n	800eeee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800eed0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800eed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eeda:	2104      	movs	r1, #4
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7ff fb7a 	bl	800e5d6 <set_sequence_step_timeout>
 800eee2:	4603      	mov	r3, r0
 800eee4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	683a      	ldr	r2, [r7, #0]
 800eeec:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800eeee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3748      	adds	r7, #72	; 0x48
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b090      	sub	sp, #64	; 0x40
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
 800ef02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef04:	2300      	movs	r3, #0
 800ef06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ef0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ef0e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ef10:	f240 7376 	movw	r3, #1910	; 0x776
 800ef14:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ef16:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ef1a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ef1c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ef20:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ef22:	f240 234e 	movw	r3, #590	; 0x24e
 800ef26:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ef28:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ef2c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ef2e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ef32:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ef34:	f240 2326 	movw	r3, #550	; 0x226
 800ef38:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ef3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef42:	441a      	add	r2, r3
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ef48:	f107 0318 	add.w	r3, r7, #24
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7fc fe0c 	bl	800bb6c <VL53L0X_GetSequenceStepEnables>
 800ef54:	4603      	mov	r3, r0
 800ef56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ef5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d002      	beq.n	800ef68 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ef62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef66:	e075      	b.n	800f054 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ef68:	7e3b      	ldrb	r3, [r7, #24]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d105      	bne.n	800ef7a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ef6e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d102      	bne.n	800ef7a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ef74:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d030      	beq.n	800efdc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ef7a:	f107 0310 	add.w	r3, r7, #16
 800ef7e:	461a      	mov	r2, r3
 800ef80:	2102      	movs	r1, #2
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7ff fa46 	bl	800e414 <get_sequence_step_timeout>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ef8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d122      	bne.n	800efdc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ef96:	7e3b      	ldrb	r3, [r7, #24]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d007      	beq.n	800efac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800efa0:	6939      	ldr	r1, [r7, #16]
 800efa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800efa6:	441a      	add	r2, r3
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800efac:	7ebb      	ldrb	r3, [r7, #26]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d009      	beq.n	800efc6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800efb6:	6939      	ldr	r1, [r7, #16]
 800efb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efba:	440b      	add	r3, r1
 800efbc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800efbe:	441a      	add	r2, r3
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	e00a      	b.n	800efdc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800efc6:	7e7b      	ldrb	r3, [r7, #25]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d007      	beq.n	800efdc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800efd0:	6939      	ldr	r1, [r7, #16]
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800efd6:	441a      	add	r2, r3
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800efdc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d114      	bne.n	800f00e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800efe4:	7efb      	ldrb	r3, [r7, #27]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d011      	beq.n	800f00e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800efea:	f107 030c 	add.w	r3, r7, #12
 800efee:	461a      	mov	r2, r3
 800eff0:	2103      	movs	r1, #3
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7ff fa0e 	bl	800e414 <get_sequence_step_timeout>
 800eff8:	4603      	mov	r3, r0
 800effa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800f002:	68f9      	ldr	r1, [r7, #12]
 800f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f006:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f008:	441a      	add	r2, r3
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f00e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f012:	2b00      	cmp	r3, #0
 800f014:	d114      	bne.n	800f040 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800f016:	7f3b      	ldrb	r3, [r7, #28]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d011      	beq.n	800f040 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800f01c:	f107 0314 	add.w	r3, r7, #20
 800f020:	461a      	mov	r2, r3
 800f022:	2104      	movs	r1, #4
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7ff f9f5 	bl	800e414 <get_sequence_step_timeout>
 800f02a:	4603      	mov	r3, r0
 800f02c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800f034:	6979      	ldr	r1, [r7, #20]
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f03a:	441a      	add	r2, r3
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f040:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f044:	2b00      	cmp	r3, #0
 800f046:	d103      	bne.n	800f050 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f050:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f054:	4618      	mov	r0, r3
 800f056:	3740      	adds	r7, #64	; 0x40
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f066:	2300      	movs	r3, #0
 800f068:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f06e:	e0c6      	b.n	800f1fe <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	4413      	add	r3, r2
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	74fb      	strb	r3, [r7, #19]
		Index++;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	3301      	adds	r3, #1
 800f07e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800f080:	7cfb      	ldrb	r3, [r7, #19]
 800f082:	2bff      	cmp	r3, #255	; 0xff
 800f084:	f040 808d 	bne.w	800f1a2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	4413      	add	r3, r2
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	747b      	strb	r3, [r7, #17]
			Index++;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	3301      	adds	r3, #1
 800f096:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800f098:	7c7b      	ldrb	r3, [r7, #17]
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	d87e      	bhi.n	800f19c <VL53L0X_load_tuning_settings+0x140>
 800f09e:	a201      	add	r2, pc, #4	; (adr r2, 800f0a4 <VL53L0X_load_tuning_settings+0x48>)
 800f0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a4:	0800f0b5 	.word	0x0800f0b5
 800f0a8:	0800f0ef 	.word	0x0800f0ef
 800f0ac:	0800f129 	.word	0x0800f129
 800f0b0:	0800f163 	.word	0x0800f163
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	683a      	ldr	r2, [r7, #0]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	743b      	strb	r3, [r7, #16]
				Index++;
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	683a      	ldr	r2, [r7, #0]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f0d4:	7c3b      	ldrb	r3, [r7, #16]
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	021b      	lsls	r3, r3, #8
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	7bfb      	ldrb	r3, [r7, #15]
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	4413      	add	r3, r2
 800f0e2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	89ba      	ldrh	r2, [r7, #12]
 800f0e8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800f0ec:	e087      	b.n	800f1fe <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	683a      	ldr	r2, [r7, #0]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	743b      	strb	r3, [r7, #16]
				Index++;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	4413      	add	r3, r2
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	3301      	adds	r3, #1
 800f10c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f10e:	7c3b      	ldrb	r3, [r7, #16]
 800f110:	b29b      	uxth	r3, r3
 800f112:	021b      	lsls	r3, r3, #8
 800f114:	b29a      	uxth	r2, r3
 800f116:	7bfb      	ldrb	r3, [r7, #15]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	4413      	add	r3, r2
 800f11c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	89ba      	ldrh	r2, [r7, #12]
 800f122:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800f126:	e06a      	b.n	800f1fe <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	683a      	ldr	r2, [r7, #0]
 800f12c:	4413      	add	r3, r2
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	743b      	strb	r3, [r7, #16]
				Index++;
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	3301      	adds	r3, #1
 800f136:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	4413      	add	r3, r2
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	3301      	adds	r3, #1
 800f146:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f148:	7c3b      	ldrb	r3, [r7, #16]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	021b      	lsls	r3, r3, #8
 800f14e:	b29a      	uxth	r2, r3
 800f150:	7bfb      	ldrb	r3, [r7, #15]
 800f152:	b29b      	uxth	r3, r3
 800f154:	4413      	add	r3, r2
 800f156:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	89ba      	ldrh	r2, [r7, #12]
 800f15c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800f160:	e04d      	b.n	800f1fe <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	4413      	add	r3, r2
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	743b      	strb	r3, [r7, #16]
				Index++;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	3301      	adds	r3, #1
 800f170:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	683a      	ldr	r2, [r7, #0]
 800f176:	4413      	add	r3, r2
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	3301      	adds	r3, #1
 800f180:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f182:	7c3b      	ldrb	r3, [r7, #16]
 800f184:	b29b      	uxth	r3, r3
 800f186:	021b      	lsls	r3, r3, #8
 800f188:	b29a      	uxth	r2, r3
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	4413      	add	r3, r2
 800f190:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	89ba      	ldrh	r2, [r7, #12]
 800f196:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800f19a:	e030      	b.n	800f1fe <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f19c:	23fc      	movs	r3, #252	; 0xfc
 800f19e:	77fb      	strb	r3, [r7, #31]
 800f1a0:	e02d      	b.n	800f1fe <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800f1a2:	7cfb      	ldrb	r3, [r7, #19]
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d828      	bhi.n	800f1fa <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	74bb      	strb	r3, [r7, #18]
			Index++;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	61bb      	str	r3, [r7, #24]
 800f1bc:	e00f      	b.n	800f1de <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	7819      	ldrb	r1, [r3, #0]
 800f1c6:	f107 0208 	add.w	r2, r7, #8
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	460a      	mov	r2, r1
 800f1d0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	61bb      	str	r3, [r7, #24]
 800f1de:	7cfb      	ldrb	r3, [r7, #19]
 800f1e0:	69ba      	ldr	r2, [r7, #24]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	dbeb      	blt.n	800f1be <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800f1e6:	7cfb      	ldrb	r3, [r7, #19]
 800f1e8:	f107 0208 	add.w	r2, r7, #8
 800f1ec:	7cb9      	ldrb	r1, [r7, #18]
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 fdee 	bl	800fdd0 <VL53L0X_WriteMulti>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	77fb      	strb	r3, [r7, #31]
 800f1f8:	e001      	b.n	800f1fe <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f1fa:	23fc      	movs	r3, #252	; 0xfc
 800f1fc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	4413      	add	r3, r2
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d004      	beq.n	800f214 <VL53L0X_load_tuning_settings+0x1b8>
 800f20a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f43f af2e 	beq.w	800f070 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f214:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3720      	adds	r7, #32
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b088      	sub	sp, #32
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f22c:	2300      	movs	r3, #0
 800f22e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800f236:	f107 0313 	add.w	r3, r7, #19
 800f23a:	4619      	mov	r1, r3
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f7fc fd21 	bl	800bc84 <VL53L0X_GetXTalkCompensationEnable>
 800f242:	4603      	mov	r3, r0
 800f244:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800f246:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d111      	bne.n	800f272 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800f24e:	7cfb      	ldrb	r3, [r7, #19]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00e      	beq.n	800f272 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	8a9b      	ldrh	r3, [r3, #20]
 800f25e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	fb02 f303 	mul.w	r3, r2, r3
 800f266:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	3380      	adds	r3, #128	; 0x80
 800f26c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800f272:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3720      	adds	r7, #32
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b086      	sub	sp, #24
 800f282:	af00      	add	r7, sp, #0
 800f284:	60f8      	str	r0, [r7, #12]
 800f286:	60b9      	str	r1, [r7, #8]
 800f288:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f28a:	2300      	movs	r3, #0
 800f28c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800f296:	f107 0310 	add.w	r3, r7, #16
 800f29a:	461a      	mov	r2, r3
 800f29c:	68b9      	ldr	r1, [r7, #8]
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	f7ff ffbe 	bl	800f220 <VL53L0X_get_total_xtalk_rate>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800f2a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d105      	bne.n	800f2bc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	441a      	add	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	601a      	str	r2, [r3, #0]

	return Status;
 800f2bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b09a      	sub	sp, #104	; 0x68
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
 800f2d4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800f2d6:	2312      	movs	r3, #18
 800f2d8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800f2da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f2de:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800f2e0:	2342      	movs	r3, #66	; 0x42
 800f2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800f2e4:	2306      	movs	r3, #6
 800f2e6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800f2e8:	2307      	movs	r3, #7
 800f2ea:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800f2f8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f300:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800f302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f306:	fb02 f303 	mul.w	r3, r2, r3
 800f30a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800f30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30e:	3380      	adds	r3, #128	; 0x80
 800f310:	0a1b      	lsrs	r3, r3, #8
 800f312:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800f314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f318:	fb02 f303 	mul.w	r3, r2, r3
 800f31c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800f31e:	2300      	movs	r3, #0
 800f320:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d01a      	beq.n	800f35e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	029b      	lsls	r3, r3, #10
 800f32c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800f332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f334:	4413      	add	r3, r2
 800f336:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800f338:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f340:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800f342:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f344:	4613      	mov	r3, r2
 800f346:	005b      	lsls	r3, r3, #1
 800f348:	4413      	add	r3, r2
 800f34a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800f34c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f34e:	fb03 f303 	mul.w	r3, r3, r3
 800f352:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800f354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f356:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f35a:	0c1b      	lsrs	r3, r3, #16
 800f35c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f362:	fb02 f303 	mul.w	r3, r2, r3
 800f366:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f36e:	0c1b      	lsrs	r3, r3, #16
 800f370:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800f372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f374:	fb03 f303 	mul.w	r3, r3, r3
 800f378:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800f37a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f37c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f380:	0c1b      	lsrs	r3, r3, #16
 800f382:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800f384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f386:	085a      	lsrs	r2, r3, #1
 800f388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38a:	441a      	add	r2, r3
 800f38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f392:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f398:	fb02 f303 	mul.w	r3, r2, r3
 800f39c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3a4:	d302      	bcc.n	800f3ac <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800f3a6:	4b54      	ldr	r3, [pc, #336]	; (800f4f8 <VL53L0X_calc_dmax+0x230>)
 800f3a8:	663b      	str	r3, [r7, #96]	; 0x60
 800f3aa:	e015      	b.n	800f3d8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800f3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3ae:	085a      	lsrs	r2, r3, #1
 800f3b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3b2:	441a      	add	r2, r3
 800f3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3ba:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800f3bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3c0:	fb02 f303 	mul.w	r3, r2, r3
 800f3c4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800f3c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f3cc:	0c1b      	lsrs	r3, r3, #16
 800f3ce:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800f3d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3d2:	fb03 f303 	mul.w	r3, r3, r3
 800f3d6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800f3d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3da:	039b      	lsls	r3, r3, #14
 800f3dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f3e0:	4a46      	ldr	r2, [pc, #280]	; (800f4fc <VL53L0X_calc_dmax+0x234>)
 800f3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3e6:	099b      	lsrs	r3, r3, #6
 800f3e8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	fb03 f303 	mul.w	r3, r3, r3
 800f3f0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800f3f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3f4:	fb03 f303 	mul.w	r3, r3, r3
 800f3f8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	3308      	adds	r3, #8
 800f3fe:	091b      	lsrs	r3, r3, #4
 800f400:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800f402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f404:	6a3b      	ldr	r3, [r7, #32]
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800f40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f40c:	4613      	mov	r3, r2
 800f40e:	005b      	lsls	r3, r3, #1
 800f410:	4413      	add	r3, r2
 800f412:	011b      	lsls	r3, r3, #4
 800f414:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f41c:	0b9b      	lsrs	r3, r3, #14
 800f41e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800f420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f424:	4413      	add	r3, r2
 800f426:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800f428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f42a:	085b      	lsrs	r3, r3, #1
 800f42c:	69ba      	ldr	r2, [r7, #24]
 800f42e:	4413      	add	r3, r2
 800f430:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800f432:	69ba      	ldr	r2, [r7, #24]
 800f434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f436:	fbb2 f3f3 	udiv	r3, r2, r3
 800f43a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	039b      	lsls	r3, r3, #14
 800f440:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	085b      	lsrs	r3, r3, #1
 800f446:	69ba      	ldr	r2, [r7, #24]
 800f448:	4413      	add	r3, r2
 800f44a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800f44c:	69ba      	ldr	r2, [r7, #24]
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	fbb2 f3f3 	udiv	r3, r2, r3
 800f454:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f45a:	fb02 f303 	mul.w	r3, r2, r3
 800f45e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f466:	4a25      	ldr	r2, [pc, #148]	; (800f4fc <VL53L0X_calc_dmax+0x234>)
 800f468:	fba2 2303 	umull	r2, r3, r2, r3
 800f46c:	099b      	lsrs	r3, r3, #6
 800f46e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800f470:	69bb      	ldr	r3, [r7, #24]
 800f472:	011b      	lsls	r3, r3, #4
 800f474:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f47c:	4a1f      	ldr	r2, [pc, #124]	; (800f4fc <VL53L0X_calc_dmax+0x234>)
 800f47e:	fba2 2303 	umull	r2, r3, r2, r3
 800f482:	099b      	lsrs	r3, r3, #6
 800f484:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800f486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f488:	3380      	adds	r3, #128	; 0x80
 800f48a:	0a1b      	lsrs	r3, r3, #8
 800f48c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d008      	beq.n	800f4a6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	085a      	lsrs	r2, r3, #1
 800f498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49a:	441a      	add	r2, r3
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f4a4:	e001      	b.n	800f4aa <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800f4aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f4ac:	f7fe f9ba 	bl	800d824 <VL53L0X_isqrt>
 800f4b0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d008      	beq.n	800f4ca <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	085a      	lsrs	r2, r3, #1
 800f4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4be:	441a      	add	r2, r3
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4c8:	e001      	b.n	800f4ce <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800f4ce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f4d0:	f7fe f9a8 	bl	800d824 <VL53L0X_isqrt>
 800f4d4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800f4d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800f4dc:	693a      	ldr	r2, [r7, #16]
 800f4de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d902      	bls.n	800f4ea <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800f4e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4e8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800f4ea:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3768      	adds	r7, #104	; 0x68
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	fff00000 	.word	0xfff00000
 800f4fc:	10624dd3 	.word	0x10624dd3

0800f500 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b0b4      	sub	sp, #208	; 0xd0
 800f504:	af04      	add	r7, sp, #16
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	607a      	str	r2, [r7, #4]
 800f50c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800f50e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f516:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f51a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800f51e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f526:	f241 235c 	movw	r3, #4700	; 0x125c
 800f52a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f52e:	4b9e      	ldr	r3, [pc, #632]	; (800f7a8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800f530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f534:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f538:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f53a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f53e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f542:	fbb2 f3f3 	udiv	r3, r2, r3
 800f546:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f548:	4b98      	ldr	r3, [pc, #608]	; (800f7ac <VL53L0X_calc_sigma_estimate+0x2ac>)
 800f54a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f54c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f550:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f552:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f556:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800f558:	f240 6377 	movw	r3, #1655	; 0x677
 800f55c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f55e:	2300      	movs	r3, #0
 800f560:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6a1b      	ldr	r3, [r3, #32]
 800f568:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	691b      	ldr	r3, [r3, #16]
 800f56e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f572:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f576:	0c1b      	lsrs	r3, r3, #16
 800f578:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800f580:	f107 0310 	add.w	r3, r7, #16
 800f584:	461a      	mov	r2, r3
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f7ff fe78 	bl	800f27e <VL53L0X_get_total_signal_rate>
 800f58e:	4603      	mov	r3, r0
 800f590:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f594:	f107 0314 	add.w	r3, r7, #20
 800f598:	461a      	mov	r2, r3
 800f59a:	68b9      	ldr	r1, [r7, #8]
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f7ff fe3f 	bl	800f220 <VL53L0X_get_total_xtalk_rate>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5ae:	fb02 f303 	mul.w	r3, r2, r3
 800f5b2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f5b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f5ba:	0c1b      	lsrs	r3, r3, #16
 800f5bc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5c4:	fb02 f303 	mul.w	r3, r2, r3
 800f5c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f5cc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d902      	bls.n	800f5dc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f5dc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d168      	bne.n	800f6b6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f5ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f5f4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f5f8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f7fe feb2 	bl	800e36c <VL53L0X_calc_timeout_mclks>
 800f608:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f61a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f61e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f622:	461a      	mov	r2, r3
 800f624:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f628:	68f8      	ldr	r0, [r7, #12]
 800f62a:	f7fe fe9f 	bl	800e36c <VL53L0X_calc_timeout_mclks>
 800f62e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f630:	2303      	movs	r3, #3
 800f632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800f636:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f63a:	2b08      	cmp	r3, #8
 800f63c:	d102      	bne.n	800f644 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800f63e:	2302      	movs	r3, #2
 800f640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f648:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f64a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f64e:	fb02 f303 	mul.w	r3, r2, r3
 800f652:	02db      	lsls	r3, r3, #11
 800f654:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f658:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f65c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f660:	4a53      	ldr	r2, [pc, #332]	; (800f7b0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f662:	fba2 2303 	umull	r2, r3, r2, r3
 800f666:	099b      	lsrs	r3, r3, #6
 800f668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800f66c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f670:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f672:	fb02 f303 	mul.w	r3, r2, r3
 800f676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f67a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f67e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f682:	4a4b      	ldr	r2, [pc, #300]	; (800f7b0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f684:	fba2 2303 	umull	r2, r3, r2, r3
 800f688:	099b      	lsrs	r3, r3, #6
 800f68a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	3380      	adds	r3, #128	; 0x80
 800f692:	0a1b      	lsrs	r3, r3, #8
 800f694:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f696:	693a      	ldr	r2, [r7, #16]
 800f698:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f69c:	fb02 f303 	mul.w	r3, r2, r3
 800f6a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f6a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f6a8:	3380      	adds	r3, #128	; 0x80
 800f6aa:	0a1b      	lsrs	r3, r3, #8
 800f6ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	021b      	lsls	r3, r3, #8
 800f6b4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f6b6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d002      	beq.n	800f6c4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800f6be:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f6c2:	e15e      	b.n	800f982 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800f6c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d10c      	bne.n	800f6e4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6d0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	e14c      	b.n	800f97e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f6e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d102      	bne.n	800f6f2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f6f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6f6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f6f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6fa:	041a      	lsls	r2, r3, #16
 800f6fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800f702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f70a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d902      	bls.n	800f716 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f71a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f71e:	fb02 f303 	mul.w	r3, r2, r3
 800f722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f726:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f72a:	4613      	mov	r3, r2
 800f72c:	005b      	lsls	r3, r3, #1
 800f72e:	4413      	add	r3, r2
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	4618      	mov	r0, r3
 800f734:	f7fe f876 	bl	800d824 <VL53L0X_isqrt>
 800f738:	4603      	mov	r3, r0
 800f73a:	005b      	lsls	r3, r3, #1
 800f73c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	891b      	ldrh	r3, [r3, #8]
 800f742:	461a      	mov	r2, r3
 800f744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f746:	fb02 f303 	mul.w	r3, r2, r3
 800f74a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f74c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f74e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f754:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f756:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f758:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f75c:	4a14      	ldr	r2, [pc, #80]	; (800f7b0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f75e:	fba2 2303 	umull	r2, r3, r2, r3
 800f762:	099b      	lsrs	r3, r3, #6
 800f764:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f768:	041b      	lsls	r3, r3, #16
 800f76a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f76e:	4a10      	ldr	r2, [pc, #64]	; (800f7b0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f770:	fba2 2303 	umull	r2, r3, r2, r3
 800f774:	099b      	lsrs	r3, r3, #6
 800f776:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f77a:	021b      	lsls	r3, r3, #8
 800f77c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f77e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f782:	fbb2 f3f3 	udiv	r3, r2, r3
 800f786:	2b00      	cmp	r3, #0
 800f788:	bfb8      	it	lt
 800f78a:	425b      	neglt	r3, r3
 800f78c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f790:	021b      	lsls	r3, r3, #8
 800f792:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	7e1b      	ldrb	r3, [r3, #24]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00b      	beq.n	800f7b4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800f79c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f7a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f7a4:	e033      	b.n	800f80e <VL53L0X_calc_sigma_estimate+0x30e>
 800f7a6:	bf00      	nop
 800f7a8:	028f87ae 	.word	0x028f87ae
 800f7ac:	0006999a 	.word	0x0006999a
 800f7b0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f7b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7c4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800f7c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7cc:	fb02 f303 	mul.w	r3, r2, r3
 800f7d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f7d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f7d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7da:	4413      	add	r3, r2
 800f7dc:	0c1b      	lsrs	r3, r3, #16
 800f7de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f7e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f7ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f7ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7f2:	085b      	lsrs	r3, r3, #1
 800f7f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f7f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7fc:	fb03 f303 	mul.w	r3, r3, r3
 800f800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f808:	0b9b      	lsrs	r3, r3, #14
 800f80a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f80e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f814:	fb02 f303 	mul.w	r3, r2, r3
 800f818:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f820:	0c1b      	lsrs	r3, r3, #16
 800f822:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f826:	fb03 f303 	mul.w	r3, r3, r3
 800f82a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f82c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f830:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f834:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f838:	0c1b      	lsrs	r3, r3, #16
 800f83a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	fb03 f303 	mul.w	r3, r3, r3
 800f842:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f848:	4413      	add	r3, r2
 800f84a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f84c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f84e:	f7fd ffe9 	bl	800d824 <VL53L0X_isqrt>
 800f852:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f856:	041b      	lsls	r3, r3, #16
 800f858:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85c:	3332      	adds	r3, #50	; 0x32
 800f85e:	4a4b      	ldr	r2, [pc, #300]	; (800f98c <VL53L0X_calc_sigma_estimate+0x48c>)
 800f860:	fba2 2303 	umull	r2, r3, r2, r3
 800f864:	095a      	lsrs	r2, r3, #5
 800f866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f868:	fbb2 f3f3 	udiv	r3, r2, r3
 800f86c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f874:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800f878:	fb02 f303 	mul.w	r3, r2, r3
 800f87c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f884:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800f888:	3308      	adds	r3, #8
 800f88a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800f88e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f892:	4a3f      	ldr	r2, [pc, #252]	; (800f990 <VL53L0X_calc_sigma_estimate+0x490>)
 800f894:	fba2 2303 	umull	r2, r3, r2, r3
 800f898:	0b5b      	lsrs	r3, r3, #13
 800f89a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f89e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f8a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d902      	bls.n	800f8ae <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f8a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f8ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f8b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800f8bc:	4a35      	ldr	r2, [pc, #212]	; (800f994 <VL53L0X_calc_sigma_estimate+0x494>)
 800f8be:	fba2 2303 	umull	r2, r3, r2, r3
 800f8c2:	099b      	lsrs	r3, r3, #6
 800f8c4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f8c6:	6a3b      	ldr	r3, [r7, #32]
 800f8c8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f8ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8ce:	441a      	add	r2, r3
 800f8d0:	6a3b      	ldr	r3, [r7, #32]
 800f8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fd ffa4 	bl	800d824 <VL53L0X_isqrt>
 800f8dc:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	021b      	lsls	r3, r3, #8
 800f8e2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f8ea:	4a2a      	ldr	r2, [pc, #168]	; (800f994 <VL53L0X_calc_sigma_estimate+0x494>)
 800f8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f0:	099b      	lsrs	r3, r3, #6
 800f8f2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f8f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f8f8:	fb03 f303 	mul.w	r3, r3, r3
 800f8fc:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	fb03 f303 	mul.w	r3, r3, r3
 800f904:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90a:	4413      	add	r3, r2
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fd ff89 	bl	800d824 <VL53L0X_isqrt>
 800f912:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f91a:	fb02 f303 	mul.w	r3, r2, r3
 800f91e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f924:	2b00      	cmp	r3, #0
 800f926:	d009      	beq.n	800f93c <VL53L0X_calc_sigma_estimate+0x43c>
 800f928:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d005      	beq.n	800f93c <VL53L0X_calc_sigma_estimate+0x43c>
 800f930:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f938:	429a      	cmp	r2, r3
 800f93a:	d903      	bls.n	800f944 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800f93c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f940:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f94a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800f956:	6939      	ldr	r1, [r7, #16]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	9303      	str	r3, [sp, #12]
 800f95c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f960:	9302      	str	r3, [sp, #8]
 800f962:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f966:	9301      	str	r3, [sp, #4]
 800f968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f970:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f7ff fca8 	bl	800f2c8 <VL53L0X_calc_dmax>
 800f978:	4603      	mov	r3, r0
 800f97a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f97e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800f982:	4618      	mov	r0, r3
 800f984:	37c0      	adds	r7, #192	; 0xc0
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	51eb851f 	.word	0x51eb851f
 800f990:	d1b71759 	.word	0xd1b71759
 800f994:	10624dd3 	.word	0x10624dd3

0800f998 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b090      	sub	sp, #64	; 0x40
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	607a      	str	r2, [r7, #4]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	72fb      	strb	r3, [r7, #11]
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f9ea:	7afb      	ldrb	r3, [r7, #11]
 800f9ec:	10db      	asrs	r3, r3, #3
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	f003 030f 	and.w	r3, r3, #15
 800f9f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800f9f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d017      	beq.n	800fa30 <VL53L0X_get_pal_range_status+0x98>
 800fa00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa04:	2b05      	cmp	r3, #5
 800fa06:	d013      	beq.n	800fa30 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800fa08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa0c:	2b07      	cmp	r3, #7
 800fa0e:	d00f      	beq.n	800fa30 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800fa10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa14:	2b0c      	cmp	r3, #12
 800fa16:	d00b      	beq.n	800fa30 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800fa18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa1c:	2b0d      	cmp	r3, #13
 800fa1e:	d007      	beq.n	800fa30 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800fa20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa24:	2b0e      	cmp	r3, #14
 800fa26:	d003      	beq.n	800fa30 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800fa28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fa2c:	2b0f      	cmp	r3, #15
 800fa2e:	d103      	bne.n	800fa38 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800fa30:	2301      	movs	r3, #1
 800fa32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fa36:	e002      	b.n	800fa3e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fa3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d109      	bne.n	800fa5a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fa46:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f7fc f9ec 	bl	800be2c <VL53L0X_GetLimitCheckEnable>
 800fa54:	4603      	mov	r3, r0
 800fa56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800fa5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d02e      	beq.n	800fac0 <VL53L0X_get_pal_range_status+0x128>
 800fa62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d12a      	bne.n	800fac0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800fa6a:	f107 0310 	add.w	r3, r7, #16
 800fa6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fa72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f7ff fd43 	bl	800f500 <VL53L0X_calc_sigma_estimate>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800fa80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d103      	bne.n	800fa90 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa8e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800fa90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d113      	bne.n	800fac0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800fa98:	f107 0320 	add.w	r3, r7, #32
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	2100      	movs	r1, #0
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f7fc fa49 	bl	800bf38 <VL53L0X_GetLimitCheckValue>
 800faa6:	4603      	mov	r3, r0
 800faa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d006      	beq.n	800fac0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800fab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fab4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d902      	bls.n	800fac0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800faba:	2301      	movs	r3, #1
 800fabc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fac0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d109      	bne.n	800fadc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fac8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800facc:	461a      	mov	r2, r3
 800face:	2102      	movs	r1, #2
 800fad0:	68f8      	ldr	r0, [r7, #12]
 800fad2:	f7fc f9ab 	bl	800be2c <VL53L0X_GetLimitCheckEnable>
 800fad6:	4603      	mov	r3, r0
 800fad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800fadc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d044      	beq.n	800fb6e <VL53L0X_get_pal_range_status+0x1d6>
 800fae4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d140      	bne.n	800fb6e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800faec:	f107 031c 	add.w	r3, r7, #28
 800faf0:	461a      	mov	r2, r3
 800faf2:	2102      	movs	r1, #2
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f7fc fa1f 	bl	800bf38 <VL53L0X_GetLimitCheckValue>
 800fafa:	4603      	mov	r3, r0
 800fafc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800fb00:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d107      	bne.n	800fb18 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800fb08:	2201      	movs	r2, #1
 800fb0a:	21ff      	movs	r1, #255	; 0xff
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f000 f9bb 	bl	800fe88 <VL53L0X_WrByte>
 800fb12:	4603      	mov	r3, r0
 800fb14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800fb18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d109      	bne.n	800fb34 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800fb20:	f107 0316 	add.w	r3, r7, #22
 800fb24:	461a      	mov	r2, r3
 800fb26:	21b6      	movs	r1, #182	; 0xb6
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 fa59 	bl	800ffe0 <VL53L0X_RdWord>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800fb34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d107      	bne.n	800fb4c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	21ff      	movs	r1, #255	; 0xff
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f000 f9a1 	bl	800fe88 <VL53L0X_WrByte>
 800fb46:	4603      	mov	r3, r0
 800fb48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800fb4c:	8afb      	ldrh	r3, [r7, #22]
 800fb4e:	025b      	lsls	r3, r3, #9
 800fb50:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb56:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d006      	beq.n	800fb6e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800fb60:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800fb62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d902      	bls.n	800fb6e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fb6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d109      	bne.n	800fb8a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fb76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	2103      	movs	r1, #3
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f7fc f954 	bl	800be2c <VL53L0X_GetLimitCheckEnable>
 800fb84:	4603      	mov	r3, r0
 800fb86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800fb8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d023      	beq.n	800fbda <VL53L0X_get_pal_range_status+0x242>
 800fb92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d11f      	bne.n	800fbda <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800fb9a:	893b      	ldrh	r3, [r7, #8]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d102      	bne.n	800fba6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800fba0:	2300      	movs	r3, #0
 800fba2:	637b      	str	r3, [r7, #52]	; 0x34
 800fba4:	e005      	b.n	800fbb2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	021a      	lsls	r2, r3, #8
 800fbaa:	893b      	ldrh	r3, [r7, #8]
 800fbac:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbb0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fbb2:	f107 0318 	add.w	r3, r7, #24
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	2103      	movs	r1, #3
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f7fc f9bc 	bl	800bf38 <VL53L0X_GetLimitCheckValue>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d006      	beq.n	800fbda <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800fbcc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800fbce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d202      	bcs.n	800fbda <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fbda:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d14a      	bne.n	800fc78 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800fbe2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d103      	bne.n	800fbf2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800fbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbec:	22ff      	movs	r2, #255	; 0xff
 800fbee:	701a      	strb	r2, [r3, #0]
 800fbf0:	e042      	b.n	800fc78 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800fbf2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d007      	beq.n	800fc0a <VL53L0X_get_pal_range_status+0x272>
 800fbfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d003      	beq.n	800fc0a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800fc02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc06:	2b03      	cmp	r3, #3
 800fc08:	d103      	bne.n	800fc12 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800fc0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc0c:	2205      	movs	r2, #5
 800fc0e:	701a      	strb	r2, [r3, #0]
 800fc10:	e032      	b.n	800fc78 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800fc12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc16:	2b06      	cmp	r3, #6
 800fc18:	d003      	beq.n	800fc22 <VL53L0X_get_pal_range_status+0x28a>
 800fc1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc1e:	2b09      	cmp	r3, #9
 800fc20:	d103      	bne.n	800fc2a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800fc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc24:	2204      	movs	r2, #4
 800fc26:	701a      	strb	r2, [r3, #0]
 800fc28:	e026      	b.n	800fc78 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800fc2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc2e:	2b08      	cmp	r3, #8
 800fc30:	d007      	beq.n	800fc42 <VL53L0X_get_pal_range_status+0x2aa>
 800fc32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc36:	2b0a      	cmp	r3, #10
 800fc38:	d003      	beq.n	800fc42 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800fc3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	d103      	bne.n	800fc4a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800fc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc44:	2203      	movs	r2, #3
 800fc46:	701a      	strb	r2, [r3, #0]
 800fc48:	e016      	b.n	800fc78 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800fc4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fc4e:	2b04      	cmp	r3, #4
 800fc50:	d003      	beq.n	800fc5a <VL53L0X_get_pal_range_status+0x2c2>
 800fc52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d103      	bne.n	800fc62 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800fc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5c:	2202      	movs	r2, #2
 800fc5e:	701a      	strb	r2, [r3, #0]
 800fc60:	e00a      	b.n	800fc78 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800fc62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d103      	bne.n	800fc72 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800fc6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	701a      	strb	r2, [r3, #0]
 800fc70:	e002      	b.n	800fc78 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800fc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc74:	2200      	movs	r2, #0
 800fc76:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800fc78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d102      	bne.n	800fc86 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800fc80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc82:	2200      	movs	r2, #0
 800fc84:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fc86:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	2101      	movs	r1, #1
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f7fc f8cc 	bl	800be2c <VL53L0X_GetLimitCheckEnable>
 800fc94:	4603      	mov	r3, r0
 800fc96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800fc9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d14f      	bne.n	800fd42 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800fca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d003      	beq.n	800fcb2 <VL53L0X_get_pal_range_status+0x31a>
 800fcaa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d103      	bne.n	800fcba <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcb8:	e002      	b.n	800fcc0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fcc6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800fcca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcce:	2b04      	cmp	r3, #4
 800fcd0:	d003      	beq.n	800fcda <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800fcd2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d103      	bne.n	800fce2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fce0:	e002      	b.n	800fce8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fcee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800fcf2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d003      	beq.n	800fd02 <VL53L0X_get_pal_range_status+0x36a>
 800fcfa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d103      	bne.n	800fd0a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800fd02:	2301      	movs	r3, #1
 800fd04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd08:	e002      	b.n	800fd10 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fd16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800fd1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d003      	beq.n	800fd2a <VL53L0X_get_pal_range_status+0x392>
 800fd22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d103      	bne.n	800fd32 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd30:	e002      	b.n	800fd38 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800fd32:	2300      	movs	r3, #0
 800fd34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fd3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fd42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3740      	adds	r7, #64	; 0x40
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b088      	sub	sp, #32
 800fd52:	af02      	add	r7, sp, #8
 800fd54:	60f8      	str	r0, [r7, #12]
 800fd56:	60b9      	str	r1, [r7, #8]
 800fd58:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	330a      	adds	r3, #10
 800fd5e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800fd6c:	b299      	uxth	r1, r3
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	4613      	mov	r3, r2
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	f7f3 f997 	bl	80030ac <HAL_I2C_Master_Transmit>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fd82:	693b      	ldr	r3, [r7, #16]
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3718      	adds	r7, #24
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b088      	sub	sp, #32
 800fd90:	af02      	add	r7, sp, #8
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	330a      	adds	r3, #10
 800fd9c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800fdaa:	f043 0301 	orr.w	r3, r3, #1
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	b299      	uxth	r1, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	9300      	str	r3, [sp, #0]
 800fdba:	4613      	mov	r3, r2
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	f7f3 fa73 	bl	80032a8 <HAL_I2C_Master_Receive>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fdc6:	693b      	ldr	r3, [r7, #16]
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3718      	adds	r7, #24
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	607a      	str	r2, [r7, #4]
 800fdda:	603b      	str	r3, [r7, #0]
 800fddc:	460b      	mov	r3, r1
 800fdde:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fde0:	2300      	movs	r3, #0
 800fde2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	2b3f      	cmp	r3, #63	; 0x3f
 800fde8:	d902      	bls.n	800fdf0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800fdea:	f06f 0303 	mvn.w	r3, #3
 800fdee:	e016      	b.n	800fe1e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800fdf0:	4a0d      	ldr	r2, [pc, #52]	; (800fe28 <VL53L0X_WriteMulti+0x58>)
 800fdf2:	7afb      	ldrb	r3, [r7, #11]
 800fdf4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	6879      	ldr	r1, [r7, #4]
 800fdfa:	480c      	ldr	r0, [pc, #48]	; (800fe2c <VL53L0X_WriteMulti+0x5c>)
 800fdfc:	f002 fe2c 	bl	8012a58 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	3301      	adds	r3, #1
 800fe04:	461a      	mov	r2, r3
 800fe06:	4908      	ldr	r1, [pc, #32]	; (800fe28 <VL53L0X_WriteMulti+0x58>)
 800fe08:	68f8      	ldr	r0, [r7, #12]
 800fe0a:	f7ff ffa0 	bl	800fd4e <_I2CWrite>
 800fe0e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d001      	beq.n	800fe1a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe16:	23ec      	movs	r3, #236	; 0xec
 800fe18:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fe1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3718      	adds	r7, #24
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	200009ac 	.word	0x200009ac
 800fe2c:	200009ad 	.word	0x200009ad

0800fe30 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b086      	sub	sp, #24
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	607a      	str	r2, [r7, #4]
 800fe3a:	603b      	str	r3, [r7, #0]
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe40:	2300      	movs	r3, #0
 800fe42:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fe44:	f107 030b 	add.w	r3, r7, #11
 800fe48:	2201      	movs	r2, #1
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	68f8      	ldr	r0, [r7, #12]
 800fe4e:	f7ff ff7e 	bl	800fd4e <_I2CWrite>
 800fe52:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d002      	beq.n	800fe60 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe5a:	23ec      	movs	r3, #236	; 0xec
 800fe5c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800fe5e:	e00c      	b.n	800fe7a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800fe60:	683a      	ldr	r2, [r7, #0]
 800fe62:	6879      	ldr	r1, [r7, #4]
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f7ff ff91 	bl	800fd8c <_I2CRead>
 800fe6a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d002      	beq.n	800fe78 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fe72:	23ec      	movs	r3, #236	; 0xec
 800fe74:	75fb      	strb	r3, [r7, #23]
 800fe76:	e000      	b.n	800fe7a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800fe78:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800fe7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	70fb      	strb	r3, [r7, #3]
 800fe94:	4613      	mov	r3, r2
 800fe96:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800fe9c:	4a0b      	ldr	r2, [pc, #44]	; (800fecc <VL53L0X_WrByte+0x44>)
 800fe9e:	78fb      	ldrb	r3, [r7, #3]
 800fea0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800fea2:	4a0a      	ldr	r2, [pc, #40]	; (800fecc <VL53L0X_WrByte+0x44>)
 800fea4:	78bb      	ldrb	r3, [r7, #2]
 800fea6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fea8:	2202      	movs	r2, #2
 800feaa:	4908      	ldr	r1, [pc, #32]	; (800fecc <VL53L0X_WrByte+0x44>)
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7ff ff4e 	bl	800fd4e <_I2CWrite>
 800feb2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d001      	beq.n	800febe <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800feba:	23ec      	movs	r3, #236	; 0xec
 800febc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800febe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	200009ac 	.word	0x200009ac

0800fed0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	460b      	mov	r3, r1
 800feda:	70fb      	strb	r3, [r7, #3]
 800fedc:	4613      	mov	r3, r2
 800fede:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fee0:	2300      	movs	r3, #0
 800fee2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800fee4:	4a0e      	ldr	r2, [pc, #56]	; (800ff20 <VL53L0X_WrWord+0x50>)
 800fee6:	78fb      	ldrb	r3, [r7, #3]
 800fee8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800feea:	883b      	ldrh	r3, [r7, #0]
 800feec:	0a1b      	lsrs	r3, r3, #8
 800feee:	b29b      	uxth	r3, r3
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <VL53L0X_WrWord+0x50>)
 800fef4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800fef6:	883b      	ldrh	r3, [r7, #0]
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	4b09      	ldr	r3, [pc, #36]	; (800ff20 <VL53L0X_WrWord+0x50>)
 800fefc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800fefe:	2203      	movs	r2, #3
 800ff00:	4907      	ldr	r1, [pc, #28]	; (800ff20 <VL53L0X_WrWord+0x50>)
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f7ff ff23 	bl	800fd4e <_I2CWrite>
 800ff08:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d001      	beq.n	800ff14 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff10:	23ec      	movs	r3, #236	; 0xec
 800ff12:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ff14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3710      	adds	r7, #16
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	200009ac 	.word	0x200009ac

0800ff24 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	4608      	mov	r0, r1
 800ff2e:	4611      	mov	r1, r2
 800ff30:	461a      	mov	r2, r3
 800ff32:	4603      	mov	r3, r0
 800ff34:	70fb      	strb	r3, [r7, #3]
 800ff36:	460b      	mov	r3, r1
 800ff38:	70bb      	strb	r3, [r7, #2]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ff42:	f107 020e 	add.w	r2, r7, #14
 800ff46:	78fb      	ldrb	r3, [r7, #3]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 f81e 	bl	800ff8c <VL53L0X_RdByte>
 800ff50:	4603      	mov	r3, r0
 800ff52:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ff54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d110      	bne.n	800ff7e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ff5c:	7bba      	ldrb	r2, [r7, #14]
 800ff5e:	78bb      	ldrb	r3, [r7, #2]
 800ff60:	4013      	ands	r3, r2
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	787b      	ldrb	r3, [r7, #1]
 800ff66:	4313      	orrs	r3, r2
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ff6c:	7bba      	ldrb	r2, [r7, #14]
 800ff6e:	78fb      	ldrb	r3, [r7, #3]
 800ff70:	4619      	mov	r1, r3
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f7ff ff88 	bl	800fe88 <VL53L0X_WrByte>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	73fb      	strb	r3, [r7, #15]
 800ff7c:	e000      	b.n	800ff80 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ff7e:	bf00      	nop
done:
    return Status;
 800ff80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b086      	sub	sp, #24
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	460b      	mov	r3, r1
 800ff96:	607a      	str	r2, [r7, #4]
 800ff98:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ff9e:	f107 030b 	add.w	r3, r7, #11
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	f7ff fed1 	bl	800fd4e <_I2CWrite>
 800ffac:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d002      	beq.n	800ffba <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ffb4:	23ec      	movs	r3, #236	; 0xec
 800ffb6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ffb8:	e00c      	b.n	800ffd4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ffba:	2201      	movs	r2, #1
 800ffbc:	6879      	ldr	r1, [r7, #4]
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	f7ff fee4 	bl	800fd8c <_I2CRead>
 800ffc4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d002      	beq.n	800ffd2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ffcc:	23ec      	movs	r3, #236	; 0xec
 800ffce:	75fb      	strb	r3, [r7, #23]
 800ffd0:	e000      	b.n	800ffd4 <VL53L0X_RdByte+0x48>
    }
done:
 800ffd2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ffd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	607a      	str	r2, [r7, #4]
 800ffec:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ffee:	2300      	movs	r3, #0
 800fff0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fff2:	f107 030b 	add.w	r3, r7, #11
 800fff6:	2201      	movs	r2, #1
 800fff8:	4619      	mov	r1, r3
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f7ff fea7 	bl	800fd4e <_I2CWrite>
 8010000:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010008:	23ec      	movs	r3, #236	; 0xec
 801000a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801000c:	e017      	b.n	801003e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801000e:	2202      	movs	r2, #2
 8010010:	490e      	ldr	r1, [pc, #56]	; (801004c <VL53L0X_RdWord+0x6c>)
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f7ff feba 	bl	800fd8c <_I2CRead>
 8010018:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010020:	23ec      	movs	r3, #236	; 0xec
 8010022:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010024:	e00b      	b.n	801003e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8010026:	4b09      	ldr	r3, [pc, #36]	; (801004c <VL53L0X_RdWord+0x6c>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	b29b      	uxth	r3, r3
 801002c:	021b      	lsls	r3, r3, #8
 801002e:	b29a      	uxth	r2, r3
 8010030:	4b06      	ldr	r3, [pc, #24]	; (801004c <VL53L0X_RdWord+0x6c>)
 8010032:	785b      	ldrb	r3, [r3, #1]
 8010034:	b29b      	uxth	r3, r3
 8010036:	4413      	add	r3, r2
 8010038:	b29a      	uxth	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 801003e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3718      	adds	r7, #24
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	200009ac 	.word	0x200009ac

08010050 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	460b      	mov	r3, r1
 801005a:	607a      	str	r2, [r7, #4]
 801005c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801005e:	2300      	movs	r3, #0
 8010060:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010062:	f107 030b 	add.w	r3, r7, #11
 8010066:	2201      	movs	r2, #1
 8010068:	4619      	mov	r1, r3
 801006a:	68f8      	ldr	r0, [r7, #12]
 801006c:	f7ff fe6f 	bl	800fd4e <_I2CWrite>
 8010070:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010078:	23ec      	movs	r3, #236	; 0xec
 801007a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801007c:	e01b      	b.n	80100b6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 801007e:	2204      	movs	r2, #4
 8010080:	4910      	ldr	r1, [pc, #64]	; (80100c4 <VL53L0X_RdDWord+0x74>)
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f7ff fe82 	bl	800fd8c <_I2CRead>
 8010088:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d002      	beq.n	8010096 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010090:	23ec      	movs	r3, #236	; 0xec
 8010092:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010094:	e00f      	b.n	80100b6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8010096:	4b0b      	ldr	r3, [pc, #44]	; (80100c4 <VL53L0X_RdDWord+0x74>)
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	061a      	lsls	r2, r3, #24
 801009c:	4b09      	ldr	r3, [pc, #36]	; (80100c4 <VL53L0X_RdDWord+0x74>)
 801009e:	785b      	ldrb	r3, [r3, #1]
 80100a0:	041b      	lsls	r3, r3, #16
 80100a2:	441a      	add	r2, r3
 80100a4:	4b07      	ldr	r3, [pc, #28]	; (80100c4 <VL53L0X_RdDWord+0x74>)
 80100a6:	789b      	ldrb	r3, [r3, #2]
 80100a8:	021b      	lsls	r3, r3, #8
 80100aa:	4413      	add	r3, r2
 80100ac:	4a05      	ldr	r2, [pc, #20]	; (80100c4 <VL53L0X_RdDWord+0x74>)
 80100ae:	78d2      	ldrb	r2, [r2, #3]
 80100b0:	441a      	add	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80100b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3718      	adds	r7, #24
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	200009ac 	.word	0x200009ac

080100c8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80100d0:	2300      	movs	r3, #0
 80100d2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80100d4:	2002      	movs	r0, #2
 80100d6:	f7f1 fff5 	bl	80020c4 <HAL_Delay>
    return status;
 80100da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
	...

080100e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80100f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80100f8:	f002 fc40 	bl	801297c <USBD_static_malloc>
 80100fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d109      	bne.n	8010118 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	32b0      	adds	r2, #176	; 0xb0
 801010e:	2100      	movs	r1, #0
 8010110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010114:	2302      	movs	r3, #2
 8010116:	e0d4      	b.n	80102c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010118:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801011c:	2100      	movs	r1, #0
 801011e:	68f8      	ldr	r0, [r7, #12]
 8010120:	f002 fca8 	bl	8012a74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	32b0      	adds	r2, #176	; 0xb0
 801012e:	68f9      	ldr	r1, [r7, #12]
 8010130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	32b0      	adds	r2, #176	; 0xb0
 801013e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	7c1b      	ldrb	r3, [r3, #16]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d138      	bne.n	80101c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010150:	4b5e      	ldr	r3, [pc, #376]	; (80102cc <USBD_CDC_Init+0x1e4>)
 8010152:	7819      	ldrb	r1, [r3, #0]
 8010154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010158:	2202      	movs	r2, #2
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f002 faeb 	bl	8012736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010160:	4b5a      	ldr	r3, [pc, #360]	; (80102cc <USBD_CDC_Init+0x1e4>)
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	f003 020f 	and.w	r2, r3, #15
 8010168:	6879      	ldr	r1, [r7, #4]
 801016a:	4613      	mov	r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	4413      	add	r3, r2
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	440b      	add	r3, r1
 8010174:	3324      	adds	r3, #36	; 0x24
 8010176:	2201      	movs	r2, #1
 8010178:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801017a:	4b55      	ldr	r3, [pc, #340]	; (80102d0 <USBD_CDC_Init+0x1e8>)
 801017c:	7819      	ldrb	r1, [r3, #0]
 801017e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010182:	2202      	movs	r2, #2
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f002 fad6 	bl	8012736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801018a:	4b51      	ldr	r3, [pc, #324]	; (80102d0 <USBD_CDC_Init+0x1e8>)
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	f003 020f 	and.w	r2, r3, #15
 8010192:	6879      	ldr	r1, [r7, #4]
 8010194:	4613      	mov	r3, r2
 8010196:	009b      	lsls	r3, r3, #2
 8010198:	4413      	add	r3, r2
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	440b      	add	r3, r1
 801019e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80101a2:	2201      	movs	r2, #1
 80101a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80101a6:	4b4b      	ldr	r3, [pc, #300]	; (80102d4 <USBD_CDC_Init+0x1ec>)
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f003 020f 	and.w	r2, r3, #15
 80101ae:	6879      	ldr	r1, [r7, #4]
 80101b0:	4613      	mov	r3, r2
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4413      	add	r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	440b      	add	r3, r1
 80101ba:	3326      	adds	r3, #38	; 0x26
 80101bc:	2210      	movs	r2, #16
 80101be:	801a      	strh	r2, [r3, #0]
 80101c0:	e035      	b.n	801022e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80101c2:	4b42      	ldr	r3, [pc, #264]	; (80102cc <USBD_CDC_Init+0x1e4>)
 80101c4:	7819      	ldrb	r1, [r3, #0]
 80101c6:	2340      	movs	r3, #64	; 0x40
 80101c8:	2202      	movs	r2, #2
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f002 fab3 	bl	8012736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80101d0:	4b3e      	ldr	r3, [pc, #248]	; (80102cc <USBD_CDC_Init+0x1e4>)
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	f003 020f 	and.w	r2, r3, #15
 80101d8:	6879      	ldr	r1, [r7, #4]
 80101da:	4613      	mov	r3, r2
 80101dc:	009b      	lsls	r3, r3, #2
 80101de:	4413      	add	r3, r2
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	440b      	add	r3, r1
 80101e4:	3324      	adds	r3, #36	; 0x24
 80101e6:	2201      	movs	r2, #1
 80101e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80101ea:	4b39      	ldr	r3, [pc, #228]	; (80102d0 <USBD_CDC_Init+0x1e8>)
 80101ec:	7819      	ldrb	r1, [r3, #0]
 80101ee:	2340      	movs	r3, #64	; 0x40
 80101f0:	2202      	movs	r2, #2
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f002 fa9f 	bl	8012736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80101f8:	4b35      	ldr	r3, [pc, #212]	; (80102d0 <USBD_CDC_Init+0x1e8>)
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	f003 020f 	and.w	r2, r3, #15
 8010200:	6879      	ldr	r1, [r7, #4]
 8010202:	4613      	mov	r3, r2
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	4413      	add	r3, r2
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	440b      	add	r3, r1
 801020c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010210:	2201      	movs	r2, #1
 8010212:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010214:	4b2f      	ldr	r3, [pc, #188]	; (80102d4 <USBD_CDC_Init+0x1ec>)
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	f003 020f 	and.w	r2, r3, #15
 801021c:	6879      	ldr	r1, [r7, #4]
 801021e:	4613      	mov	r3, r2
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	4413      	add	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	440b      	add	r3, r1
 8010228:	3326      	adds	r3, #38	; 0x26
 801022a:	2210      	movs	r2, #16
 801022c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801022e:	4b29      	ldr	r3, [pc, #164]	; (80102d4 <USBD_CDC_Init+0x1ec>)
 8010230:	7819      	ldrb	r1, [r3, #0]
 8010232:	2308      	movs	r3, #8
 8010234:	2203      	movs	r2, #3
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f002 fa7d 	bl	8012736 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801023c:	4b25      	ldr	r3, [pc, #148]	; (80102d4 <USBD_CDC_Init+0x1ec>)
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	f003 020f 	and.w	r2, r3, #15
 8010244:	6879      	ldr	r1, [r7, #4]
 8010246:	4613      	mov	r3, r2
 8010248:	009b      	lsls	r3, r3, #2
 801024a:	4413      	add	r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	440b      	add	r3, r1
 8010250:	3324      	adds	r3, #36	; 0x24
 8010252:	2201      	movs	r2, #1
 8010254:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2200      	movs	r2, #0
 801025a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	33b0      	adds	r3, #176	; 0xb0
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	4413      	add	r3, r2
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2200      	movs	r2, #0
 8010276:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2200      	movs	r2, #0
 801027e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010288:	2b00      	cmp	r3, #0
 801028a:	d101      	bne.n	8010290 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801028c:	2302      	movs	r3, #2
 801028e:	e018      	b.n	80102c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	7c1b      	ldrb	r3, [r3, #16]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d10a      	bne.n	80102ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010298:	4b0d      	ldr	r3, [pc, #52]	; (80102d0 <USBD_CDC_Init+0x1e8>)
 801029a:	7819      	ldrb	r1, [r3, #0]
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80102a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f002 fb34 	bl	8012914 <USBD_LL_PrepareReceive>
 80102ac:	e008      	b.n	80102c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80102ae:	4b08      	ldr	r3, [pc, #32]	; (80102d0 <USBD_CDC_Init+0x1e8>)
 80102b0:	7819      	ldrb	r1, [r3, #0]
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80102b8:	2340      	movs	r3, #64	; 0x40
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f002 fb2a 	bl	8012914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	2000038b 	.word	0x2000038b
 80102d0:	2000038c 	.word	0x2000038c
 80102d4:	2000038d 	.word	0x2000038d

080102d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	460b      	mov	r3, r1
 80102e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80102e4:	4b3a      	ldr	r3, [pc, #232]	; (80103d0 <USBD_CDC_DeInit+0xf8>)
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	4619      	mov	r1, r3
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f002 fa49 	bl	8012782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80102f0:	4b37      	ldr	r3, [pc, #220]	; (80103d0 <USBD_CDC_DeInit+0xf8>)
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	f003 020f 	and.w	r2, r3, #15
 80102f8:	6879      	ldr	r1, [r7, #4]
 80102fa:	4613      	mov	r3, r2
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	4413      	add	r3, r2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	440b      	add	r3, r1
 8010304:	3324      	adds	r3, #36	; 0x24
 8010306:	2200      	movs	r2, #0
 8010308:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801030a:	4b32      	ldr	r3, [pc, #200]	; (80103d4 <USBD_CDC_DeInit+0xfc>)
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	4619      	mov	r1, r3
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f002 fa36 	bl	8012782 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010316:	4b2f      	ldr	r3, [pc, #188]	; (80103d4 <USBD_CDC_DeInit+0xfc>)
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	f003 020f 	and.w	r2, r3, #15
 801031e:	6879      	ldr	r1, [r7, #4]
 8010320:	4613      	mov	r3, r2
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	4413      	add	r3, r2
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	440b      	add	r3, r1
 801032a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801032e:	2200      	movs	r2, #0
 8010330:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010332:	4b29      	ldr	r3, [pc, #164]	; (80103d8 <USBD_CDC_DeInit+0x100>)
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	4619      	mov	r1, r3
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f002 fa22 	bl	8012782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801033e:	4b26      	ldr	r3, [pc, #152]	; (80103d8 <USBD_CDC_DeInit+0x100>)
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	f003 020f 	and.w	r2, r3, #15
 8010346:	6879      	ldr	r1, [r7, #4]
 8010348:	4613      	mov	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	4413      	add	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	440b      	add	r3, r1
 8010352:	3324      	adds	r3, #36	; 0x24
 8010354:	2200      	movs	r2, #0
 8010356:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010358:	4b1f      	ldr	r3, [pc, #124]	; (80103d8 <USBD_CDC_DeInit+0x100>)
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	f003 020f 	and.w	r2, r3, #15
 8010360:	6879      	ldr	r1, [r7, #4]
 8010362:	4613      	mov	r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4413      	add	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	440b      	add	r3, r1
 801036c:	3326      	adds	r3, #38	; 0x26
 801036e:	2200      	movs	r2, #0
 8010370:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	32b0      	adds	r2, #176	; 0xb0
 801037c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d01f      	beq.n	80103c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	33b0      	adds	r3, #176	; 0xb0
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	4413      	add	r3, r2
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	32b0      	adds	r2, #176	; 0xb0
 80103a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a6:	4618      	mov	r0, r3
 80103a8:	f002 faf6 	bl	8012998 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	32b0      	adds	r2, #176	; 0xb0
 80103b6:	2100      	movs	r1, #0
 80103b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80103c4:	2300      	movs	r3, #0
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3708      	adds	r7, #8
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	2000038b 	.word	0x2000038b
 80103d4:	2000038c 	.word	0x2000038c
 80103d8:	2000038d 	.word	0x2000038d

080103dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	32b0      	adds	r2, #176	; 0xb0
 80103f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80103f6:	2300      	movs	r3, #0
 80103f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80103fa:	2300      	movs	r3, #0
 80103fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80103fe:	2300      	movs	r3, #0
 8010400:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d101      	bne.n	801040c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010408:	2303      	movs	r3, #3
 801040a:	e0bf      	b.n	801058c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010414:	2b00      	cmp	r3, #0
 8010416:	d050      	beq.n	80104ba <USBD_CDC_Setup+0xde>
 8010418:	2b20      	cmp	r3, #32
 801041a:	f040 80af 	bne.w	801057c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	88db      	ldrh	r3, [r3, #6]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d03a      	beq.n	801049c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	b25b      	sxtb	r3, r3
 801042c:	2b00      	cmp	r3, #0
 801042e:	da1b      	bge.n	8010468 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	33b0      	adds	r3, #176	; 0xb0
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4413      	add	r3, r2
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	683a      	ldr	r2, [r7, #0]
 8010444:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010446:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010448:	683a      	ldr	r2, [r7, #0]
 801044a:	88d2      	ldrh	r2, [r2, #6]
 801044c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	88db      	ldrh	r3, [r3, #6]
 8010452:	2b07      	cmp	r3, #7
 8010454:	bf28      	it	cs
 8010456:	2307      	movcs	r3, #7
 8010458:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	89fa      	ldrh	r2, [r7, #14]
 801045e:	4619      	mov	r1, r3
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f001 fd43 	bl	8011eec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010466:	e090      	b.n	801058a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	785a      	ldrb	r2, [r3, #1]
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	88db      	ldrh	r3, [r3, #6]
 8010476:	2b3f      	cmp	r3, #63	; 0x3f
 8010478:	d803      	bhi.n	8010482 <USBD_CDC_Setup+0xa6>
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	88db      	ldrh	r3, [r3, #6]
 801047e:	b2da      	uxtb	r2, r3
 8010480:	e000      	b.n	8010484 <USBD_CDC_Setup+0xa8>
 8010482:	2240      	movs	r2, #64	; 0x40
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801048a:	6939      	ldr	r1, [r7, #16]
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010492:	461a      	mov	r2, r3
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f001 fd55 	bl	8011f44 <USBD_CtlPrepareRx>
      break;
 801049a:	e076      	b.n	801058a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	33b0      	adds	r3, #176	; 0xb0
 80104a6:	009b      	lsls	r3, r3, #2
 80104a8:	4413      	add	r3, r2
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	689b      	ldr	r3, [r3, #8]
 80104ae:	683a      	ldr	r2, [r7, #0]
 80104b0:	7850      	ldrb	r0, [r2, #1]
 80104b2:	2200      	movs	r2, #0
 80104b4:	6839      	ldr	r1, [r7, #0]
 80104b6:	4798      	blx	r3
      break;
 80104b8:	e067      	b.n	801058a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	785b      	ldrb	r3, [r3, #1]
 80104be:	2b0b      	cmp	r3, #11
 80104c0:	d851      	bhi.n	8010566 <USBD_CDC_Setup+0x18a>
 80104c2:	a201      	add	r2, pc, #4	; (adr r2, 80104c8 <USBD_CDC_Setup+0xec>)
 80104c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c8:	080104f9 	.word	0x080104f9
 80104cc:	08010575 	.word	0x08010575
 80104d0:	08010567 	.word	0x08010567
 80104d4:	08010567 	.word	0x08010567
 80104d8:	08010567 	.word	0x08010567
 80104dc:	08010567 	.word	0x08010567
 80104e0:	08010567 	.word	0x08010567
 80104e4:	08010567 	.word	0x08010567
 80104e8:	08010567 	.word	0x08010567
 80104ec:	08010567 	.word	0x08010567
 80104f0:	08010523 	.word	0x08010523
 80104f4:	0801054d 	.word	0x0801054d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	2b03      	cmp	r3, #3
 8010502:	d107      	bne.n	8010514 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010504:	f107 030a 	add.w	r3, r7, #10
 8010508:	2202      	movs	r2, #2
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f001 fced 	bl	8011eec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010512:	e032      	b.n	801057a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010514:	6839      	ldr	r1, [r7, #0]
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f001 fc77 	bl	8011e0a <USBD_CtlError>
            ret = USBD_FAIL;
 801051c:	2303      	movs	r3, #3
 801051e:	75fb      	strb	r3, [r7, #23]
          break;
 8010520:	e02b      	b.n	801057a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010528:	b2db      	uxtb	r3, r3
 801052a:	2b03      	cmp	r3, #3
 801052c:	d107      	bne.n	801053e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801052e:	f107 030d 	add.w	r3, r7, #13
 8010532:	2201      	movs	r2, #1
 8010534:	4619      	mov	r1, r3
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f001 fcd8 	bl	8011eec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801053c:	e01d      	b.n	801057a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f001 fc62 	bl	8011e0a <USBD_CtlError>
            ret = USBD_FAIL;
 8010546:	2303      	movs	r3, #3
 8010548:	75fb      	strb	r3, [r7, #23]
          break;
 801054a:	e016      	b.n	801057a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010552:	b2db      	uxtb	r3, r3
 8010554:	2b03      	cmp	r3, #3
 8010556:	d00f      	beq.n	8010578 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010558:	6839      	ldr	r1, [r7, #0]
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f001 fc55 	bl	8011e0a <USBD_CtlError>
            ret = USBD_FAIL;
 8010560:	2303      	movs	r3, #3
 8010562:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010564:	e008      	b.n	8010578 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010566:	6839      	ldr	r1, [r7, #0]
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f001 fc4e 	bl	8011e0a <USBD_CtlError>
          ret = USBD_FAIL;
 801056e:	2303      	movs	r3, #3
 8010570:	75fb      	strb	r3, [r7, #23]
          break;
 8010572:	e002      	b.n	801057a <USBD_CDC_Setup+0x19e>
          break;
 8010574:	bf00      	nop
 8010576:	e008      	b.n	801058a <USBD_CDC_Setup+0x1ae>
          break;
 8010578:	bf00      	nop
      }
      break;
 801057a:	e006      	b.n	801058a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f001 fc43 	bl	8011e0a <USBD_CtlError>
      ret = USBD_FAIL;
 8010584:	2303      	movs	r3, #3
 8010586:	75fb      	strb	r3, [r7, #23]
      break;
 8010588:	bf00      	nop
  }

  return (uint8_t)ret;
 801058a:	7dfb      	ldrb	r3, [r7, #23]
}
 801058c:	4618      	mov	r0, r3
 801058e:	3718      	adds	r7, #24
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	460b      	mov	r3, r1
 801059e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	32b0      	adds	r2, #176	; 0xb0
 80105b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d101      	bne.n	80105be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80105ba:	2303      	movs	r3, #3
 80105bc:	e065      	b.n	801068a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	32b0      	adds	r2, #176	; 0xb0
 80105c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80105ce:	78fb      	ldrb	r3, [r7, #3]
 80105d0:	f003 020f 	and.w	r2, r3, #15
 80105d4:	6879      	ldr	r1, [r7, #4]
 80105d6:	4613      	mov	r3, r2
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	4413      	add	r3, r2
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	440b      	add	r3, r1
 80105e0:	3318      	adds	r3, #24
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d02f      	beq.n	8010648 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80105e8:	78fb      	ldrb	r3, [r7, #3]
 80105ea:	f003 020f 	and.w	r2, r3, #15
 80105ee:	6879      	ldr	r1, [r7, #4]
 80105f0:	4613      	mov	r3, r2
 80105f2:	009b      	lsls	r3, r3, #2
 80105f4:	4413      	add	r3, r2
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	440b      	add	r3, r1
 80105fa:	3318      	adds	r3, #24
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	78fb      	ldrb	r3, [r7, #3]
 8010600:	f003 010f 	and.w	r1, r3, #15
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	460b      	mov	r3, r1
 8010608:	00db      	lsls	r3, r3, #3
 801060a:	440b      	add	r3, r1
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	4403      	add	r3, r0
 8010610:	3348      	adds	r3, #72	; 0x48
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	fbb2 f1f3 	udiv	r1, r2, r3
 8010618:	fb01 f303 	mul.w	r3, r1, r3
 801061c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801061e:	2b00      	cmp	r3, #0
 8010620:	d112      	bne.n	8010648 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010622:	78fb      	ldrb	r3, [r7, #3]
 8010624:	f003 020f 	and.w	r2, r3, #15
 8010628:	6879      	ldr	r1, [r7, #4]
 801062a:	4613      	mov	r3, r2
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	4413      	add	r3, r2
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	440b      	add	r3, r1
 8010634:	3318      	adds	r3, #24
 8010636:	2200      	movs	r2, #0
 8010638:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801063a:	78f9      	ldrb	r1, [r7, #3]
 801063c:	2300      	movs	r3, #0
 801063e:	2200      	movs	r2, #0
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f002 f946 	bl	80128d2 <USBD_LL_Transmit>
 8010646:	e01f      	b.n	8010688 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	2200      	movs	r2, #0
 801064c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010656:	687a      	ldr	r2, [r7, #4]
 8010658:	33b0      	adds	r3, #176	; 0xb0
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	691b      	ldr	r3, [r3, #16]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d010      	beq.n	8010688 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	33b0      	adds	r3, #176	; 0xb0
 8010670:	009b      	lsls	r3, r3, #2
 8010672:	4413      	add	r3, r2
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	691b      	ldr	r3, [r3, #16]
 8010678:	68ba      	ldr	r2, [r7, #8]
 801067a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801067e:	68ba      	ldr	r2, [r7, #8]
 8010680:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010684:	78fa      	ldrb	r2, [r7, #3]
 8010686:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010688:	2300      	movs	r3, #0
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	460b      	mov	r3, r1
 801069c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	32b0      	adds	r2, #176	; 0xb0
 80106a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	32b0      	adds	r2, #176	; 0xb0
 80106b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d101      	bne.n	80106c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80106c0:	2303      	movs	r3, #3
 80106c2:	e01a      	b.n	80106fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80106c4:	78fb      	ldrb	r3, [r7, #3]
 80106c6:	4619      	mov	r1, r3
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f002 f944 	bl	8012956 <USBD_LL_GetRxDataSize>
 80106ce:	4602      	mov	r2, r0
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80106dc:	687a      	ldr	r2, [r7, #4]
 80106de:	33b0      	adds	r3, #176	; 0xb0
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	4413      	add	r3, r2
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80106f4:	4611      	mov	r1, r2
 80106f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80106f8:	2300      	movs	r3, #0
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b084      	sub	sp, #16
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	32b0      	adds	r2, #176	; 0xb0
 8010714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010718:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d101      	bne.n	8010724 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010720:	2303      	movs	r3, #3
 8010722:	e025      	b.n	8010770 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	33b0      	adds	r3, #176	; 0xb0
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	4413      	add	r3, r2
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d01a      	beq.n	801076e <USBD_CDC_EP0_RxReady+0x6c>
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801073e:	2bff      	cmp	r3, #255	; 0xff
 8010740:	d015      	beq.n	801076e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	33b0      	adds	r3, #176	; 0xb0
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	4413      	add	r3, r2
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	68fa      	ldr	r2, [r7, #12]
 8010756:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801075a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801075c:	68fa      	ldr	r2, [r7, #12]
 801075e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010762:	b292      	uxth	r2, r2
 8010764:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	22ff      	movs	r2, #255	; 0xff
 801076a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010780:	2182      	movs	r1, #130	; 0x82
 8010782:	4818      	ldr	r0, [pc, #96]	; (80107e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010784:	f000 fd09 	bl	801119a <USBD_GetEpDesc>
 8010788:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801078a:	2101      	movs	r1, #1
 801078c:	4815      	ldr	r0, [pc, #84]	; (80107e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801078e:	f000 fd04 	bl	801119a <USBD_GetEpDesc>
 8010792:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010794:	2181      	movs	r1, #129	; 0x81
 8010796:	4813      	ldr	r0, [pc, #76]	; (80107e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010798:	f000 fcff 	bl	801119a <USBD_GetEpDesc>
 801079c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d002      	beq.n	80107aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	2210      	movs	r2, #16
 80107a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d006      	beq.n	80107be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107b8:	711a      	strb	r2, [r3, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d006      	beq.n	80107d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2200      	movs	r2, #0
 80107c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107cc:	711a      	strb	r2, [r3, #4]
 80107ce:	2200      	movs	r2, #0
 80107d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2243      	movs	r2, #67	; 0x43
 80107d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80107d8:	4b02      	ldr	r3, [pc, #8]	; (80107e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3718      	adds	r7, #24
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	20000348 	.word	0x20000348

080107e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b086      	sub	sp, #24
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80107f0:	2182      	movs	r1, #130	; 0x82
 80107f2:	4818      	ldr	r0, [pc, #96]	; (8010854 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80107f4:	f000 fcd1 	bl	801119a <USBD_GetEpDesc>
 80107f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80107fa:	2101      	movs	r1, #1
 80107fc:	4815      	ldr	r0, [pc, #84]	; (8010854 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80107fe:	f000 fccc 	bl	801119a <USBD_GetEpDesc>
 8010802:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010804:	2181      	movs	r1, #129	; 0x81
 8010806:	4813      	ldr	r0, [pc, #76]	; (8010854 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010808:	f000 fcc7 	bl	801119a <USBD_GetEpDesc>
 801080c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d002      	beq.n	801081a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	2210      	movs	r2, #16
 8010818:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d006      	beq.n	801082e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	2200      	movs	r2, #0
 8010824:	711a      	strb	r2, [r3, #4]
 8010826:	2200      	movs	r2, #0
 8010828:	f042 0202 	orr.w	r2, r2, #2
 801082c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d006      	beq.n	8010842 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2200      	movs	r2, #0
 8010838:	711a      	strb	r2, [r3, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	f042 0202 	orr.w	r2, r2, #2
 8010840:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2243      	movs	r2, #67	; 0x43
 8010846:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010848:	4b02      	ldr	r3, [pc, #8]	; (8010854 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801084a:	4618      	mov	r0, r3
 801084c:	3718      	adds	r7, #24
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	20000348 	.word	0x20000348

08010858 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b086      	sub	sp, #24
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010860:	2182      	movs	r1, #130	; 0x82
 8010862:	4818      	ldr	r0, [pc, #96]	; (80108c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010864:	f000 fc99 	bl	801119a <USBD_GetEpDesc>
 8010868:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801086a:	2101      	movs	r1, #1
 801086c:	4815      	ldr	r0, [pc, #84]	; (80108c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801086e:	f000 fc94 	bl	801119a <USBD_GetEpDesc>
 8010872:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010874:	2181      	movs	r1, #129	; 0x81
 8010876:	4813      	ldr	r0, [pc, #76]	; (80108c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010878:	f000 fc8f 	bl	801119a <USBD_GetEpDesc>
 801087c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d002      	beq.n	801088a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	2210      	movs	r2, #16
 8010888:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d006      	beq.n	801089e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	2200      	movs	r2, #0
 8010894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010898:	711a      	strb	r2, [r3, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d006      	beq.n	80108b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2200      	movs	r2, #0
 80108a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80108ac:	711a      	strb	r2, [r3, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2243      	movs	r2, #67	; 0x43
 80108b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80108b8:	4b02      	ldr	r3, [pc, #8]	; (80108c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3718      	adds	r7, #24
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	20000348 	.word	0x20000348

080108c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	220a      	movs	r2, #10
 80108d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80108d6:	4b03      	ldr	r3, [pc, #12]	; (80108e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80108d8:	4618      	mov	r0, r3
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr
 80108e4:	20000304 	.word	0x20000304

080108e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80108f8:	2303      	movs	r3, #3
 80108fa:	e009      	b.n	8010910 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	33b0      	adds	r3, #176	; 0xb0
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	4413      	add	r3, r2
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801091c:	b480      	push	{r7}
 801091e:	b087      	sub	sp, #28
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	32b0      	adds	r2, #176	; 0xb0
 8010932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010936:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d101      	bne.n	8010942 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801093e:	2303      	movs	r3, #3
 8010940:	e008      	b.n	8010954 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	68ba      	ldr	r2, [r7, #8]
 8010946:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	371c      	adds	r7, #28
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010960:	b480      	push	{r7}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	32b0      	adds	r2, #176	; 0xb0
 8010974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010978:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d101      	bne.n	8010984 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010980:	2303      	movs	r3, #3
 8010982:	e004      	b.n	801098e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801098c:	2300      	movs	r3, #0
}
 801098e:	4618      	mov	r0, r3
 8010990:	3714      	adds	r7, #20
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr
	...

0801099c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	32b0      	adds	r2, #176	; 0xb0
 80109ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	32b0      	adds	r2, #176	; 0xb0
 80109be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d101      	bne.n	80109ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80109c6:	2303      	movs	r3, #3
 80109c8:	e018      	b.n	80109fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	7c1b      	ldrb	r3, [r3, #16]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d10a      	bne.n	80109e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80109d2:	4b0c      	ldr	r3, [pc, #48]	; (8010a04 <USBD_CDC_ReceivePacket+0x68>)
 80109d4:	7819      	ldrb	r1, [r3, #0]
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80109dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f001 ff97 	bl	8012914 <USBD_LL_PrepareReceive>
 80109e6:	e008      	b.n	80109fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80109e8:	4b06      	ldr	r3, [pc, #24]	; (8010a04 <USBD_CDC_ReceivePacket+0x68>)
 80109ea:	7819      	ldrb	r1, [r3, #0]
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80109f2:	2340      	movs	r3, #64	; 0x40
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f001 ff8d 	bl	8012914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80109fa:	2300      	movs	r3, #0
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3710      	adds	r7, #16
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	2000038c 	.word	0x2000038c

08010a08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b086      	sub	sp, #24
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	60f8      	str	r0, [r7, #12]
 8010a10:	60b9      	str	r1, [r7, #8]
 8010a12:	4613      	mov	r3, r2
 8010a14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d101      	bne.n	8010a20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010a1c:	2303      	movs	r3, #3
 8010a1e:	e01f      	b.n	8010a60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2200      	movs	r2, #0
 8010a24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2200      	movs	r2, #0
 8010a34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d003      	beq.n	8010a46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	68ba      	ldr	r2, [r7, #8]
 8010a42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	79fa      	ldrb	r2, [r7, #7]
 8010a52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f001 fe07 	bl	8012668 <USBD_LL_Init>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3718      	adds	r7, #24
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010a72:	2300      	movs	r3, #0
 8010a74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d101      	bne.n	8010a80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	e025      	b.n	8010acc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	683a      	ldr	r2, [r7, #0]
 8010a84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	32ae      	adds	r2, #174	; 0xae
 8010a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00f      	beq.n	8010abc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	32ae      	adds	r2, #174	; 0xae
 8010aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aac:	f107 020e 	add.w	r2, r7, #14
 8010ab0:	4610      	mov	r0, r2
 8010ab2:	4798      	blx	r3
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8010aca:	2300      	movs	r3, #0
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3710      	adds	r7, #16
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f001 fe0f 	bl	8012700 <USBD_LL_Start>
 8010ae2:	4603      	mov	r3, r0
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010af4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	370c      	adds	r7, #12
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b084      	sub	sp, #16
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d009      	beq.n	8010b30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	78fa      	ldrb	r2, [r7, #3]
 8010b26:	4611      	mov	r1, r2
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	4798      	blx	r3
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3710      	adds	r7, #16
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b084      	sub	sp, #16
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
 8010b42:	460b      	mov	r3, r1
 8010b44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	78fa      	ldrb	r2, [r7, #3]
 8010b54:	4611      	mov	r1, r2
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	4798      	blx	r3
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d001      	beq.n	8010b64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010b60:	2303      	movs	r3, #3
 8010b62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b084      	sub	sp, #16
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
 8010b76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b7e:	6839      	ldr	r1, [r7, #0]
 8010b80:	4618      	mov	r0, r3
 8010b82:	f001 f908 	bl	8011d96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010b94:	461a      	mov	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010ba2:	f003 031f 	and.w	r3, r3, #31
 8010ba6:	2b02      	cmp	r3, #2
 8010ba8:	d01a      	beq.n	8010be0 <USBD_LL_SetupStage+0x72>
 8010baa:	2b02      	cmp	r3, #2
 8010bac:	d822      	bhi.n	8010bf4 <USBD_LL_SetupStage+0x86>
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d002      	beq.n	8010bb8 <USBD_LL_SetupStage+0x4a>
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d00a      	beq.n	8010bcc <USBD_LL_SetupStage+0x5e>
 8010bb6:	e01d      	b.n	8010bf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 fb5f 	bl	8011284 <USBD_StdDevReq>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8010bca:	e020      	b.n	8010c0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 fbc7 	bl	8011368 <USBD_StdItfReq>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8010bde:	e016      	b.n	8010c0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010be6:	4619      	mov	r1, r3
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 fc29 	bl	8011440 <USBD_StdEPReq>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8010bf2:	e00c      	b.n	8010c0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	4619      	mov	r1, r3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f001 fddc 	bl	80127c0 <USBD_LL_StallEP>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8010c0c:	bf00      	nop
  }

  return ret;
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	460b      	mov	r3, r1
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010c26:	2300      	movs	r3, #0
 8010c28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010c2a:	7afb      	ldrb	r3, [r7, #11]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d16e      	bne.n	8010d0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010c36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010c3e:	2b03      	cmp	r3, #3
 8010c40:	f040 8098 	bne.w	8010d74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	689a      	ldr	r2, [r3, #8]
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d913      	bls.n	8010c78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	689a      	ldr	r2, [r3, #8]
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	68db      	ldr	r3, [r3, #12]
 8010c58:	1ad2      	subs	r2, r2, r3
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	68da      	ldr	r2, [r3, #12]
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	689b      	ldr	r3, [r3, #8]
 8010c66:	4293      	cmp	r3, r2
 8010c68:	bf28      	it	cs
 8010c6a:	4613      	movcs	r3, r2
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	6879      	ldr	r1, [r7, #4]
 8010c70:	68f8      	ldr	r0, [r7, #12]
 8010c72:	f001 f984 	bl	8011f7e <USBD_CtlContinueRx>
 8010c76:	e07d      	b.n	8010d74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010c7e:	f003 031f 	and.w	r3, r3, #31
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d014      	beq.n	8010cb0 <USBD_LL_DataOutStage+0x98>
 8010c86:	2b02      	cmp	r3, #2
 8010c88:	d81d      	bhi.n	8010cc6 <USBD_LL_DataOutStage+0xae>
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d002      	beq.n	8010c94 <USBD_LL_DataOutStage+0x7c>
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d003      	beq.n	8010c9a <USBD_LL_DataOutStage+0x82>
 8010c92:	e018      	b.n	8010cc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010c94:	2300      	movs	r3, #0
 8010c96:	75bb      	strb	r3, [r7, #22]
            break;
 8010c98:	e018      	b.n	8010ccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	68f8      	ldr	r0, [r7, #12]
 8010ca6:	f000 fa5e 	bl	8011166 <USBD_CoreFindIF>
 8010caa:	4603      	mov	r3, r0
 8010cac:	75bb      	strb	r3, [r7, #22]
            break;
 8010cae:	e00d      	b.n	8010ccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	4619      	mov	r1, r3
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	f000 fa60 	bl	8011180 <USBD_CoreFindEP>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	75bb      	strb	r3, [r7, #22]
            break;
 8010cc4:	e002      	b.n	8010ccc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	75bb      	strb	r3, [r7, #22]
            break;
 8010cca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010ccc:	7dbb      	ldrb	r3, [r7, #22]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d119      	bne.n	8010d06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	2b03      	cmp	r3, #3
 8010cdc:	d113      	bne.n	8010d06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010cde:	7dba      	ldrb	r2, [r7, #22]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	32ae      	adds	r2, #174	; 0xae
 8010ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00b      	beq.n	8010d06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010cee:	7dba      	ldrb	r2, [r7, #22]
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010cf6:	7dba      	ldrb	r2, [r7, #22]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	32ae      	adds	r2, #174	; 0xae
 8010cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d00:	691b      	ldr	r3, [r3, #16]
 8010d02:	68f8      	ldr	r0, [r7, #12]
 8010d04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f001 f94a 	bl	8011fa0 <USBD_CtlSendStatus>
 8010d0c:	e032      	b.n	8010d74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010d0e:	7afb      	ldrb	r3, [r7, #11]
 8010d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	4619      	mov	r1, r3
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f000 fa31 	bl	8011180 <USBD_CoreFindEP>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010d22:	7dbb      	ldrb	r3, [r7, #22]
 8010d24:	2bff      	cmp	r3, #255	; 0xff
 8010d26:	d025      	beq.n	8010d74 <USBD_LL_DataOutStage+0x15c>
 8010d28:	7dbb      	ldrb	r3, [r7, #22]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d122      	bne.n	8010d74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	2b03      	cmp	r3, #3
 8010d38:	d117      	bne.n	8010d6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010d3a:	7dba      	ldrb	r2, [r7, #22]
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	32ae      	adds	r2, #174	; 0xae
 8010d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d44:	699b      	ldr	r3, [r3, #24]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d00f      	beq.n	8010d6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010d4a:	7dba      	ldrb	r2, [r7, #22]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010d52:	7dba      	ldrb	r2, [r7, #22]
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	32ae      	adds	r2, #174	; 0xae
 8010d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d5c:	699b      	ldr	r3, [r3, #24]
 8010d5e:	7afa      	ldrb	r2, [r7, #11]
 8010d60:	4611      	mov	r1, r2
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	4798      	blx	r3
 8010d66:	4603      	mov	r3, r0
 8010d68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010d6a:	7dfb      	ldrb	r3, [r7, #23]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d001      	beq.n	8010d74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
 8010d72:	e000      	b.n	8010d76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010d74:	2300      	movs	r3, #0
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3718      	adds	r7, #24
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}

08010d7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010d7e:	b580      	push	{r7, lr}
 8010d80:	b086      	sub	sp, #24
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	60f8      	str	r0, [r7, #12]
 8010d86:	460b      	mov	r3, r1
 8010d88:	607a      	str	r2, [r7, #4]
 8010d8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010d8c:	7afb      	ldrb	r3, [r7, #11]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d16f      	bne.n	8010e72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	3314      	adds	r3, #20
 8010d96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010d9e:	2b02      	cmp	r3, #2
 8010da0:	d15a      	bne.n	8010e58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	689a      	ldr	r2, [r3, #8]
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d914      	bls.n	8010dd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	689a      	ldr	r2, [r3, #8]
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	1ad2      	subs	r2, r2, r3
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	689b      	ldr	r3, [r3, #8]
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	6879      	ldr	r1, [r7, #4]
 8010dc4:	68f8      	ldr	r0, [r7, #12]
 8010dc6:	f001 f8ac 	bl	8011f22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010dca:	2300      	movs	r3, #0
 8010dcc:	2200      	movs	r2, #0
 8010dce:	2100      	movs	r1, #0
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f001 fd9f 	bl	8012914 <USBD_LL_PrepareReceive>
 8010dd6:	e03f      	b.n	8010e58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	68da      	ldr	r2, [r3, #12]
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	689b      	ldr	r3, [r3, #8]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d11c      	bne.n	8010e1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	685a      	ldr	r2, [r3, #4]
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d316      	bcc.n	8010e1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	685a      	ldr	r2, [r3, #4]
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d20f      	bcs.n	8010e1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010dfe:	2200      	movs	r2, #0
 8010e00:	2100      	movs	r1, #0
 8010e02:	68f8      	ldr	r0, [r7, #12]
 8010e04:	f001 f88d 	bl	8011f22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010e10:	2300      	movs	r3, #0
 8010e12:	2200      	movs	r2, #0
 8010e14:	2100      	movs	r1, #0
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f001 fd7c 	bl	8012914 <USBD_LL_PrepareReceive>
 8010e1c:	e01c      	b.n	8010e58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	2b03      	cmp	r3, #3
 8010e28:	d10f      	bne.n	8010e4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d009      	beq.n	8010e4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e4a:	2180      	movs	r1, #128	; 0x80
 8010e4c:	68f8      	ldr	r0, [r7, #12]
 8010e4e:	f001 fcb7 	bl	80127c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f001 f8b7 	bl	8011fc6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d03a      	beq.n	8010ed8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f7ff fe42 	bl	8010aec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010e70:	e032      	b.n	8010ed8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010e72:	7afb      	ldrb	r3, [r7, #11]
 8010e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f000 f97f 	bl	8011180 <USBD_CoreFindEP>
 8010e82:	4603      	mov	r3, r0
 8010e84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010e86:	7dfb      	ldrb	r3, [r7, #23]
 8010e88:	2bff      	cmp	r3, #255	; 0xff
 8010e8a:	d025      	beq.n	8010ed8 <USBD_LL_DataInStage+0x15a>
 8010e8c:	7dfb      	ldrb	r3, [r7, #23]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d122      	bne.n	8010ed8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	2b03      	cmp	r3, #3
 8010e9c:	d11c      	bne.n	8010ed8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010e9e:	7dfa      	ldrb	r2, [r7, #23]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	32ae      	adds	r2, #174	; 0xae
 8010ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ea8:	695b      	ldr	r3, [r3, #20]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d014      	beq.n	8010ed8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010eae:	7dfa      	ldrb	r2, [r7, #23]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010eb6:	7dfa      	ldrb	r2, [r7, #23]
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	32ae      	adds	r2, #174	; 0xae
 8010ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	7afa      	ldrb	r2, [r7, #11]
 8010ec4:	4611      	mov	r1, r2
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	4798      	blx	r3
 8010eca:	4603      	mov	r3, r0
 8010ecc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010ece:	7dbb      	ldrb	r3, [r7, #22]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010ed4:	7dbb      	ldrb	r3, [r7, #22]
 8010ed6:	e000      	b.n	8010eda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010ed8:	2300      	movs	r3, #0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3718      	adds	r7, #24
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}

08010ee2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010ee2:	b580      	push	{r7, lr}
 8010ee4:	b084      	sub	sp, #16
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010eea:	2300      	movs	r3, #0
 8010eec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2200      	movs	r2, #0
 8010f02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d014      	beq.n	8010f48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00e      	beq.n	8010f48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	6852      	ldr	r2, [r2, #4]
 8010f36:	b2d2      	uxtb	r2, r2
 8010f38:	4611      	mov	r1, r2
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	4798      	blx	r3
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d001      	beq.n	8010f48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010f44:	2303      	movs	r3, #3
 8010f46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010f48:	2340      	movs	r3, #64	; 0x40
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f001 fbf1 	bl	8012736 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2201      	movs	r2, #1
 8010f58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2240      	movs	r2, #64	; 0x40
 8010f60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010f64:	2340      	movs	r3, #64	; 0x40
 8010f66:	2200      	movs	r2, #0
 8010f68:	2180      	movs	r1, #128	; 0x80
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f001 fbe3 	bl	8012736 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2201      	movs	r2, #1
 8010f74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2240      	movs	r2, #64	; 0x40
 8010f7a:	621a      	str	r2, [r3, #32]

  return ret;
 8010f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010f86:	b480      	push	{r7}
 8010f88:	b083      	sub	sp, #12
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	460b      	mov	r3, r1
 8010f90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	78fa      	ldrb	r2, [r7, #3]
 8010f96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	370c      	adds	r7, #12
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr

08010fa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010fa6:	b480      	push	{r7}
 8010fa8:	b083      	sub	sp, #12
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fb4:	b2da      	uxtb	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2204      	movs	r2, #4
 8010fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010fc4:	2300      	movs	r3, #0
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	370c      	adds	r7, #12
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd0:	4770      	bx	lr

08010fd2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010fd2:	b480      	push	{r7}
 8010fd4:	b083      	sub	sp, #12
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	d106      	bne.n	8010ff4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010ff4:	2300      	movs	r3, #0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	370c      	adds	r7, #12
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr

08011002 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b082      	sub	sp, #8
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011010:	b2db      	uxtb	r3, r3
 8011012:	2b03      	cmp	r3, #3
 8011014:	d110      	bne.n	8011038 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00b      	beq.n	8011038 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011026:	69db      	ldr	r3, [r3, #28]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d005      	beq.n	8011038 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011032:	69db      	ldr	r3, [r3, #28]
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011038:	2300      	movs	r3, #0
}
 801103a:	4618      	mov	r0, r3
 801103c:	3708      	adds	r7, #8
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b082      	sub	sp, #8
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
 801104a:	460b      	mov	r3, r1
 801104c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	32ae      	adds	r2, #174	; 0xae
 8011058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d101      	bne.n	8011064 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011060:	2303      	movs	r3, #3
 8011062:	e01c      	b.n	801109e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801106a:	b2db      	uxtb	r3, r3
 801106c:	2b03      	cmp	r3, #3
 801106e:	d115      	bne.n	801109c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	32ae      	adds	r2, #174	; 0xae
 801107a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801107e:	6a1b      	ldr	r3, [r3, #32]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00b      	beq.n	801109c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	32ae      	adds	r2, #174	; 0xae
 801108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011092:	6a1b      	ldr	r3, [r3, #32]
 8011094:	78fa      	ldrb	r2, [r7, #3]
 8011096:	4611      	mov	r1, r2
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801109c:	2300      	movs	r3, #0
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3708      	adds	r7, #8
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b082      	sub	sp, #8
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	6078      	str	r0, [r7, #4]
 80110ae:	460b      	mov	r3, r1
 80110b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	32ae      	adds	r2, #174	; 0xae
 80110bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d101      	bne.n	80110c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80110c4:	2303      	movs	r3, #3
 80110c6:	e01c      	b.n	8011102 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	2b03      	cmp	r3, #3
 80110d2:	d115      	bne.n	8011100 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	32ae      	adds	r2, #174	; 0xae
 80110de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d00b      	beq.n	8011100 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	32ae      	adds	r2, #174	; 0xae
 80110f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f8:	78fa      	ldrb	r2, [r7, #3]
 80110fa:	4611      	mov	r1, r2
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011100:	2300      	movs	r3, #0
}
 8011102:	4618      	mov	r0, r3
 8011104:	3708      	adds	r7, #8
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}

0801110a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801110a:	b480      	push	{r7}
 801110c:	b083      	sub	sp, #12
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	370c      	adds	r7, #12
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr

08011120 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011128:	2300      	movs	r3, #0
 801112a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2201      	movs	r2, #1
 8011130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00e      	beq.n	801115c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	6852      	ldr	r2, [r2, #4]
 801114a:	b2d2      	uxtb	r2, r2
 801114c:	4611      	mov	r1, r2
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	4798      	blx	r3
 8011152:	4603      	mov	r3, r0
 8011154:	2b00      	cmp	r3, #0
 8011156:	d001      	beq.n	801115c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011158:	2303      	movs	r3, #3
 801115a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801115c:	7bfb      	ldrb	r3, [r7, #15]
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011166:	b480      	push	{r7}
 8011168:	b083      	sub	sp, #12
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
 801116e:	460b      	mov	r3, r1
 8011170:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011172:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011174:	4618      	mov	r0, r3
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	460b      	mov	r3, r1
 801118a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801118c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801118e:	4618      	mov	r0, r3
 8011190:	370c      	adds	r7, #12
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr

0801119a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801119a:	b580      	push	{r7, lr}
 801119c:	b086      	sub	sp, #24
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
 80111a2:	460b      	mov	r3, r1
 80111a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80111ae:	2300      	movs	r3, #0
 80111b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	885b      	ldrh	r3, [r3, #2]
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	b29b      	uxth	r3, r3
 80111be:	429a      	cmp	r2, r3
 80111c0:	d920      	bls.n	8011204 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80111ca:	e013      	b.n	80111f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80111cc:	f107 030a 	add.w	r3, r7, #10
 80111d0:	4619      	mov	r1, r3
 80111d2:	6978      	ldr	r0, [r7, #20]
 80111d4:	f000 f81b 	bl	801120e <USBD_GetNextDesc>
 80111d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	785b      	ldrb	r3, [r3, #1]
 80111de:	2b05      	cmp	r3, #5
 80111e0:	d108      	bne.n	80111f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	789b      	ldrb	r3, [r3, #2]
 80111ea:	78fa      	ldrb	r2, [r7, #3]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d008      	beq.n	8011202 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80111f0:	2300      	movs	r3, #0
 80111f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	885b      	ldrh	r3, [r3, #2]
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	897b      	ldrh	r3, [r7, #10]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d8e5      	bhi.n	80111cc <USBD_GetEpDesc+0x32>
 8011200:	e000      	b.n	8011204 <USBD_GetEpDesc+0x6a>
          break;
 8011202:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011204:	693b      	ldr	r3, [r7, #16]
}
 8011206:	4618      	mov	r0, r3
 8011208:	3718      	adds	r7, #24
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801120e:	b480      	push	{r7}
 8011210:	b085      	sub	sp, #20
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	881a      	ldrh	r2, [r3, #0]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	b29b      	uxth	r3, r3
 8011226:	4413      	add	r3, r2
 8011228:	b29a      	uxth	r2, r3
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	461a      	mov	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	4413      	add	r3, r2
 8011238:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801123a:	68fb      	ldr	r3, [r7, #12]
}
 801123c:	4618      	mov	r0, r3
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr

08011248 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011248:	b480      	push	{r7}
 801124a:	b087      	sub	sp, #28
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	3301      	adds	r3, #1
 801125e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011266:	8a3b      	ldrh	r3, [r7, #16]
 8011268:	021b      	lsls	r3, r3, #8
 801126a:	b21a      	sxth	r2, r3
 801126c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011270:	4313      	orrs	r3, r2
 8011272:	b21b      	sxth	r3, r3
 8011274:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011276:	89fb      	ldrh	r3, [r7, #14]
}
 8011278:	4618      	mov	r0, r3
 801127a:	371c      	adds	r7, #28
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801128e:	2300      	movs	r3, #0
 8011290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801129a:	2b40      	cmp	r3, #64	; 0x40
 801129c:	d005      	beq.n	80112aa <USBD_StdDevReq+0x26>
 801129e:	2b40      	cmp	r3, #64	; 0x40
 80112a0:	d857      	bhi.n	8011352 <USBD_StdDevReq+0xce>
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d00f      	beq.n	80112c6 <USBD_StdDevReq+0x42>
 80112a6:	2b20      	cmp	r3, #32
 80112a8:	d153      	bne.n	8011352 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	32ae      	adds	r2, #174	; 0xae
 80112b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	6839      	ldr	r1, [r7, #0]
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	4798      	blx	r3
 80112c0:	4603      	mov	r3, r0
 80112c2:	73fb      	strb	r3, [r7, #15]
      break;
 80112c4:	e04a      	b.n	801135c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	785b      	ldrb	r3, [r3, #1]
 80112ca:	2b09      	cmp	r3, #9
 80112cc:	d83b      	bhi.n	8011346 <USBD_StdDevReq+0xc2>
 80112ce:	a201      	add	r2, pc, #4	; (adr r2, 80112d4 <USBD_StdDevReq+0x50>)
 80112d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d4:	08011329 	.word	0x08011329
 80112d8:	0801133d 	.word	0x0801133d
 80112dc:	08011347 	.word	0x08011347
 80112e0:	08011333 	.word	0x08011333
 80112e4:	08011347 	.word	0x08011347
 80112e8:	08011307 	.word	0x08011307
 80112ec:	080112fd 	.word	0x080112fd
 80112f0:	08011347 	.word	0x08011347
 80112f4:	0801131f 	.word	0x0801131f
 80112f8:	08011311 	.word	0x08011311
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80112fc:	6839      	ldr	r1, [r7, #0]
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 fa3c 	bl	801177c <USBD_GetDescriptor>
          break;
 8011304:	e024      	b.n	8011350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011306:	6839      	ldr	r1, [r7, #0]
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f000 fba1 	bl	8011a50 <USBD_SetAddress>
          break;
 801130e:	e01f      	b.n	8011350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011310:	6839      	ldr	r1, [r7, #0]
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 fbe0 	bl	8011ad8 <USBD_SetConfig>
 8011318:	4603      	mov	r3, r0
 801131a:	73fb      	strb	r3, [r7, #15]
          break;
 801131c:	e018      	b.n	8011350 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801131e:	6839      	ldr	r1, [r7, #0]
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fc83 	bl	8011c2c <USBD_GetConfig>
          break;
 8011326:	e013      	b.n	8011350 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011328:	6839      	ldr	r1, [r7, #0]
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 fcb4 	bl	8011c98 <USBD_GetStatus>
          break;
 8011330:	e00e      	b.n	8011350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011332:	6839      	ldr	r1, [r7, #0]
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 fce3 	bl	8011d00 <USBD_SetFeature>
          break;
 801133a:	e009      	b.n	8011350 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801133c:	6839      	ldr	r1, [r7, #0]
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 fd07 	bl	8011d52 <USBD_ClrFeature>
          break;
 8011344:	e004      	b.n	8011350 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011346:	6839      	ldr	r1, [r7, #0]
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f000 fd5e 	bl	8011e0a <USBD_CtlError>
          break;
 801134e:	bf00      	nop
      }
      break;
 8011350:	e004      	b.n	801135c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f000 fd58 	bl	8011e0a <USBD_CtlError>
      break;
 801135a:	bf00      	nop
  }

  return ret;
 801135c:	7bfb      	ldrb	r3, [r7, #15]
}
 801135e:	4618      	mov	r0, r3
 8011360:	3710      	adds	r7, #16
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop

08011368 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b084      	sub	sp, #16
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011372:	2300      	movs	r3, #0
 8011374:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801137e:	2b40      	cmp	r3, #64	; 0x40
 8011380:	d005      	beq.n	801138e <USBD_StdItfReq+0x26>
 8011382:	2b40      	cmp	r3, #64	; 0x40
 8011384:	d852      	bhi.n	801142c <USBD_StdItfReq+0xc4>
 8011386:	2b00      	cmp	r3, #0
 8011388:	d001      	beq.n	801138e <USBD_StdItfReq+0x26>
 801138a:	2b20      	cmp	r3, #32
 801138c:	d14e      	bne.n	801142c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011394:	b2db      	uxtb	r3, r3
 8011396:	3b01      	subs	r3, #1
 8011398:	2b02      	cmp	r3, #2
 801139a:	d840      	bhi.n	801141e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	889b      	ldrh	r3, [r3, #4]
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d836      	bhi.n	8011414 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	889b      	ldrh	r3, [r3, #4]
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	4619      	mov	r1, r3
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f7ff fed9 	bl	8011166 <USBD_CoreFindIF>
 80113b4:	4603      	mov	r3, r0
 80113b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80113b8:	7bbb      	ldrb	r3, [r7, #14]
 80113ba:	2bff      	cmp	r3, #255	; 0xff
 80113bc:	d01d      	beq.n	80113fa <USBD_StdItfReq+0x92>
 80113be:	7bbb      	ldrb	r3, [r7, #14]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d11a      	bne.n	80113fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80113c4:	7bba      	ldrb	r2, [r7, #14]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	32ae      	adds	r2, #174	; 0xae
 80113ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d00f      	beq.n	80113f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80113d4:	7bba      	ldrb	r2, [r7, #14]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80113dc:	7bba      	ldrb	r2, [r7, #14]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	32ae      	adds	r2, #174	; 0xae
 80113e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113e6:	689b      	ldr	r3, [r3, #8]
 80113e8:	6839      	ldr	r1, [r7, #0]
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	4798      	blx	r3
 80113ee:	4603      	mov	r3, r0
 80113f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80113f2:	e004      	b.n	80113fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80113f4:	2303      	movs	r3, #3
 80113f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80113f8:	e001      	b.n	80113fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80113fa:	2303      	movs	r3, #3
 80113fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	88db      	ldrh	r3, [r3, #6]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d110      	bne.n	8011428 <USBD_StdItfReq+0xc0>
 8011406:	7bfb      	ldrb	r3, [r7, #15]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d10d      	bne.n	8011428 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 fdc7 	bl	8011fa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011412:	e009      	b.n	8011428 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011414:	6839      	ldr	r1, [r7, #0]
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f000 fcf7 	bl	8011e0a <USBD_CtlError>
          break;
 801141c:	e004      	b.n	8011428 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801141e:	6839      	ldr	r1, [r7, #0]
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 fcf2 	bl	8011e0a <USBD_CtlError>
          break;
 8011426:	e000      	b.n	801142a <USBD_StdItfReq+0xc2>
          break;
 8011428:	bf00      	nop
      }
      break;
 801142a:	e004      	b.n	8011436 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801142c:	6839      	ldr	r1, [r7, #0]
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 fceb 	bl	8011e0a <USBD_CtlError>
      break;
 8011434:	bf00      	nop
  }

  return ret;
 8011436:	7bfb      	ldrb	r3, [r7, #15]
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801144a:	2300      	movs	r3, #0
 801144c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	889b      	ldrh	r3, [r3, #4]
 8011452:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801145c:	2b40      	cmp	r3, #64	; 0x40
 801145e:	d007      	beq.n	8011470 <USBD_StdEPReq+0x30>
 8011460:	2b40      	cmp	r3, #64	; 0x40
 8011462:	f200 817f 	bhi.w	8011764 <USBD_StdEPReq+0x324>
 8011466:	2b00      	cmp	r3, #0
 8011468:	d02a      	beq.n	80114c0 <USBD_StdEPReq+0x80>
 801146a:	2b20      	cmp	r3, #32
 801146c:	f040 817a 	bne.w	8011764 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011470:	7bbb      	ldrb	r3, [r7, #14]
 8011472:	4619      	mov	r1, r3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff fe83 	bl	8011180 <USBD_CoreFindEP>
 801147a:	4603      	mov	r3, r0
 801147c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801147e:	7b7b      	ldrb	r3, [r7, #13]
 8011480:	2bff      	cmp	r3, #255	; 0xff
 8011482:	f000 8174 	beq.w	801176e <USBD_StdEPReq+0x32e>
 8011486:	7b7b      	ldrb	r3, [r7, #13]
 8011488:	2b00      	cmp	r3, #0
 801148a:	f040 8170 	bne.w	801176e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801148e:	7b7a      	ldrb	r2, [r7, #13]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011496:	7b7a      	ldrb	r2, [r7, #13]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	32ae      	adds	r2, #174	; 0xae
 801149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114a0:	689b      	ldr	r3, [r3, #8]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	f000 8163 	beq.w	801176e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80114a8:	7b7a      	ldrb	r2, [r7, #13]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	32ae      	adds	r2, #174	; 0xae
 80114ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114b2:	689b      	ldr	r3, [r3, #8]
 80114b4:	6839      	ldr	r1, [r7, #0]
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	4798      	blx	r3
 80114ba:	4603      	mov	r3, r0
 80114bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80114be:	e156      	b.n	801176e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	785b      	ldrb	r3, [r3, #1]
 80114c4:	2b03      	cmp	r3, #3
 80114c6:	d008      	beq.n	80114da <USBD_StdEPReq+0x9a>
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	f300 8145 	bgt.w	8011758 <USBD_StdEPReq+0x318>
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	f000 809b 	beq.w	801160a <USBD_StdEPReq+0x1ca>
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d03c      	beq.n	8011552 <USBD_StdEPReq+0x112>
 80114d8:	e13e      	b.n	8011758 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	2b02      	cmp	r3, #2
 80114e4:	d002      	beq.n	80114ec <USBD_StdEPReq+0xac>
 80114e6:	2b03      	cmp	r3, #3
 80114e8:	d016      	beq.n	8011518 <USBD_StdEPReq+0xd8>
 80114ea:	e02c      	b.n	8011546 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80114ec:	7bbb      	ldrb	r3, [r7, #14]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d00d      	beq.n	801150e <USBD_StdEPReq+0xce>
 80114f2:	7bbb      	ldrb	r3, [r7, #14]
 80114f4:	2b80      	cmp	r3, #128	; 0x80
 80114f6:	d00a      	beq.n	801150e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80114f8:	7bbb      	ldrb	r3, [r7, #14]
 80114fa:	4619      	mov	r1, r3
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f001 f95f 	bl	80127c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011502:	2180      	movs	r1, #128	; 0x80
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f001 f95b 	bl	80127c0 <USBD_LL_StallEP>
 801150a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801150c:	e020      	b.n	8011550 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801150e:	6839      	ldr	r1, [r7, #0]
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f000 fc7a 	bl	8011e0a <USBD_CtlError>
              break;
 8011516:	e01b      	b.n	8011550 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	885b      	ldrh	r3, [r3, #2]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d10e      	bne.n	801153e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011520:	7bbb      	ldrb	r3, [r7, #14]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d00b      	beq.n	801153e <USBD_StdEPReq+0xfe>
 8011526:	7bbb      	ldrb	r3, [r7, #14]
 8011528:	2b80      	cmp	r3, #128	; 0x80
 801152a:	d008      	beq.n	801153e <USBD_StdEPReq+0xfe>
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	88db      	ldrh	r3, [r3, #6]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d104      	bne.n	801153e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011534:	7bbb      	ldrb	r3, [r7, #14]
 8011536:	4619      	mov	r1, r3
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f001 f941 	bl	80127c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 fd2e 	bl	8011fa0 <USBD_CtlSendStatus>

              break;
 8011544:	e004      	b.n	8011550 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011546:	6839      	ldr	r1, [r7, #0]
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f000 fc5e 	bl	8011e0a <USBD_CtlError>
              break;
 801154e:	bf00      	nop
          }
          break;
 8011550:	e107      	b.n	8011762 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011558:	b2db      	uxtb	r3, r3
 801155a:	2b02      	cmp	r3, #2
 801155c:	d002      	beq.n	8011564 <USBD_StdEPReq+0x124>
 801155e:	2b03      	cmp	r3, #3
 8011560:	d016      	beq.n	8011590 <USBD_StdEPReq+0x150>
 8011562:	e04b      	b.n	80115fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011564:	7bbb      	ldrb	r3, [r7, #14]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00d      	beq.n	8011586 <USBD_StdEPReq+0x146>
 801156a:	7bbb      	ldrb	r3, [r7, #14]
 801156c:	2b80      	cmp	r3, #128	; 0x80
 801156e:	d00a      	beq.n	8011586 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011570:	7bbb      	ldrb	r3, [r7, #14]
 8011572:	4619      	mov	r1, r3
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f001 f923 	bl	80127c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801157a:	2180      	movs	r1, #128	; 0x80
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f001 f91f 	bl	80127c0 <USBD_LL_StallEP>
 8011582:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011584:	e040      	b.n	8011608 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011586:	6839      	ldr	r1, [r7, #0]
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 fc3e 	bl	8011e0a <USBD_CtlError>
              break;
 801158e:	e03b      	b.n	8011608 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	885b      	ldrh	r3, [r3, #2]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d136      	bne.n	8011606 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011598:	7bbb      	ldrb	r3, [r7, #14]
 801159a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d004      	beq.n	80115ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80115a2:	7bbb      	ldrb	r3, [r7, #14]
 80115a4:	4619      	mov	r1, r3
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f001 f929 	bl	80127fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 fcf7 	bl	8011fa0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80115b2:	7bbb      	ldrb	r3, [r7, #14]
 80115b4:	4619      	mov	r1, r3
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7ff fde2 	bl	8011180 <USBD_CoreFindEP>
 80115bc:	4603      	mov	r3, r0
 80115be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80115c0:	7b7b      	ldrb	r3, [r7, #13]
 80115c2:	2bff      	cmp	r3, #255	; 0xff
 80115c4:	d01f      	beq.n	8011606 <USBD_StdEPReq+0x1c6>
 80115c6:	7b7b      	ldrb	r3, [r7, #13]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d11c      	bne.n	8011606 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80115cc:	7b7a      	ldrb	r2, [r7, #13]
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80115d4:	7b7a      	ldrb	r2, [r7, #13]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	32ae      	adds	r2, #174	; 0xae
 80115da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115de:	689b      	ldr	r3, [r3, #8]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d010      	beq.n	8011606 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80115e4:	7b7a      	ldrb	r2, [r7, #13]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	32ae      	adds	r2, #174	; 0xae
 80115ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115ee:	689b      	ldr	r3, [r3, #8]
 80115f0:	6839      	ldr	r1, [r7, #0]
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	4798      	blx	r3
 80115f6:	4603      	mov	r3, r0
 80115f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80115fa:	e004      	b.n	8011606 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80115fc:	6839      	ldr	r1, [r7, #0]
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 fc03 	bl	8011e0a <USBD_CtlError>
              break;
 8011604:	e000      	b.n	8011608 <USBD_StdEPReq+0x1c8>
              break;
 8011606:	bf00      	nop
          }
          break;
 8011608:	e0ab      	b.n	8011762 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011610:	b2db      	uxtb	r3, r3
 8011612:	2b02      	cmp	r3, #2
 8011614:	d002      	beq.n	801161c <USBD_StdEPReq+0x1dc>
 8011616:	2b03      	cmp	r3, #3
 8011618:	d032      	beq.n	8011680 <USBD_StdEPReq+0x240>
 801161a:	e097      	b.n	801174c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801161c:	7bbb      	ldrb	r3, [r7, #14]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d007      	beq.n	8011632 <USBD_StdEPReq+0x1f2>
 8011622:	7bbb      	ldrb	r3, [r7, #14]
 8011624:	2b80      	cmp	r3, #128	; 0x80
 8011626:	d004      	beq.n	8011632 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011628:	6839      	ldr	r1, [r7, #0]
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 fbed 	bl	8011e0a <USBD_CtlError>
                break;
 8011630:	e091      	b.n	8011756 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011636:	2b00      	cmp	r3, #0
 8011638:	da0b      	bge.n	8011652 <USBD_StdEPReq+0x212>
 801163a:	7bbb      	ldrb	r3, [r7, #14]
 801163c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011640:	4613      	mov	r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	4413      	add	r3, r2
 8011646:	009b      	lsls	r3, r3, #2
 8011648:	3310      	adds	r3, #16
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	4413      	add	r3, r2
 801164e:	3304      	adds	r3, #4
 8011650:	e00b      	b.n	801166a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011652:	7bbb      	ldrb	r3, [r7, #14]
 8011654:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011658:	4613      	mov	r3, r2
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	4413      	add	r3, r2
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011664:	687a      	ldr	r2, [r7, #4]
 8011666:	4413      	add	r3, r2
 8011668:	3304      	adds	r3, #4
 801166a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	2200      	movs	r2, #0
 8011670:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	2202      	movs	r2, #2
 8011676:	4619      	mov	r1, r3
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f000 fc37 	bl	8011eec <USBD_CtlSendData>
              break;
 801167e:	e06a      	b.n	8011756 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011684:	2b00      	cmp	r3, #0
 8011686:	da11      	bge.n	80116ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011688:	7bbb      	ldrb	r3, [r7, #14]
 801168a:	f003 020f 	and.w	r2, r3, #15
 801168e:	6879      	ldr	r1, [r7, #4]
 8011690:	4613      	mov	r3, r2
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	440b      	add	r3, r1
 801169a:	3324      	adds	r3, #36	; 0x24
 801169c:	881b      	ldrh	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d117      	bne.n	80116d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80116a2:	6839      	ldr	r1, [r7, #0]
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f000 fbb0 	bl	8011e0a <USBD_CtlError>
                  break;
 80116aa:	e054      	b.n	8011756 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80116ac:	7bbb      	ldrb	r3, [r7, #14]
 80116ae:	f003 020f 	and.w	r2, r3, #15
 80116b2:	6879      	ldr	r1, [r7, #4]
 80116b4:	4613      	mov	r3, r2
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	4413      	add	r3, r2
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	440b      	add	r3, r1
 80116be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80116c2:	881b      	ldrh	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d104      	bne.n	80116d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80116c8:	6839      	ldr	r1, [r7, #0]
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 fb9d 	bl	8011e0a <USBD_CtlError>
                  break;
 80116d0:	e041      	b.n	8011756 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	da0b      	bge.n	80116f2 <USBD_StdEPReq+0x2b2>
 80116da:	7bbb      	ldrb	r3, [r7, #14]
 80116dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80116e0:	4613      	mov	r3, r2
 80116e2:	009b      	lsls	r3, r3, #2
 80116e4:	4413      	add	r3, r2
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	3310      	adds	r3, #16
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	4413      	add	r3, r2
 80116ee:	3304      	adds	r3, #4
 80116f0:	e00b      	b.n	801170a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80116f2:	7bbb      	ldrb	r3, [r7, #14]
 80116f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116f8:	4613      	mov	r3, r2
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	4413      	add	r3, r2
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	4413      	add	r3, r2
 8011708:	3304      	adds	r3, #4
 801170a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801170c:	7bbb      	ldrb	r3, [r7, #14]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d002      	beq.n	8011718 <USBD_StdEPReq+0x2d8>
 8011712:	7bbb      	ldrb	r3, [r7, #14]
 8011714:	2b80      	cmp	r3, #128	; 0x80
 8011716:	d103      	bne.n	8011720 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2200      	movs	r2, #0
 801171c:	601a      	str	r2, [r3, #0]
 801171e:	e00e      	b.n	801173e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011720:	7bbb      	ldrb	r3, [r7, #14]
 8011722:	4619      	mov	r1, r3
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f001 f889 	bl	801283c <USBD_LL_IsStallEP>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d003      	beq.n	8011738 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	2201      	movs	r2, #1
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	e002      	b.n	801173e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	2200      	movs	r2, #0
 801173c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	2202      	movs	r2, #2
 8011742:	4619      	mov	r1, r3
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f000 fbd1 	bl	8011eec <USBD_CtlSendData>
              break;
 801174a:	e004      	b.n	8011756 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801174c:	6839      	ldr	r1, [r7, #0]
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 fb5b 	bl	8011e0a <USBD_CtlError>
              break;
 8011754:	bf00      	nop
          }
          break;
 8011756:	e004      	b.n	8011762 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011758:	6839      	ldr	r1, [r7, #0]
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 fb55 	bl	8011e0a <USBD_CtlError>
          break;
 8011760:	bf00      	nop
      }
      break;
 8011762:	e005      	b.n	8011770 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011764:	6839      	ldr	r1, [r7, #0]
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f000 fb4f 	bl	8011e0a <USBD_CtlError>
      break;
 801176c:	e000      	b.n	8011770 <USBD_StdEPReq+0x330>
      break;
 801176e:	bf00      	nop
  }

  return ret;
 8011770:	7bfb      	ldrb	r3, [r7, #15]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3710      	adds	r7, #16
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
	...

0801177c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011786:	2300      	movs	r3, #0
 8011788:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801178a:	2300      	movs	r3, #0
 801178c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801178e:	2300      	movs	r3, #0
 8011790:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	885b      	ldrh	r3, [r3, #2]
 8011796:	0a1b      	lsrs	r3, r3, #8
 8011798:	b29b      	uxth	r3, r3
 801179a:	3b01      	subs	r3, #1
 801179c:	2b06      	cmp	r3, #6
 801179e:	f200 8128 	bhi.w	80119f2 <USBD_GetDescriptor+0x276>
 80117a2:	a201      	add	r2, pc, #4	; (adr r2, 80117a8 <USBD_GetDescriptor+0x2c>)
 80117a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117a8:	080117c5 	.word	0x080117c5
 80117ac:	080117dd 	.word	0x080117dd
 80117b0:	0801181d 	.word	0x0801181d
 80117b4:	080119f3 	.word	0x080119f3
 80117b8:	080119f3 	.word	0x080119f3
 80117bc:	08011993 	.word	0x08011993
 80117c0:	080119bf 	.word	0x080119bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	7c12      	ldrb	r2, [r2, #16]
 80117d0:	f107 0108 	add.w	r1, r7, #8
 80117d4:	4610      	mov	r0, r2
 80117d6:	4798      	blx	r3
 80117d8:	60f8      	str	r0, [r7, #12]
      break;
 80117da:	e112      	b.n	8011a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7c1b      	ldrb	r3, [r3, #16]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d10d      	bne.n	8011800 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ec:	f107 0208 	add.w	r2, r7, #8
 80117f0:	4610      	mov	r0, r2
 80117f2:	4798      	blx	r3
 80117f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	3301      	adds	r3, #1
 80117fa:	2202      	movs	r2, #2
 80117fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80117fe:	e100      	b.n	8011a02 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011808:	f107 0208 	add.w	r2, r7, #8
 801180c:	4610      	mov	r0, r2
 801180e:	4798      	blx	r3
 8011810:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	3301      	adds	r3, #1
 8011816:	2202      	movs	r2, #2
 8011818:	701a      	strb	r2, [r3, #0]
      break;
 801181a:	e0f2      	b.n	8011a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	885b      	ldrh	r3, [r3, #2]
 8011820:	b2db      	uxtb	r3, r3
 8011822:	2b05      	cmp	r3, #5
 8011824:	f200 80ac 	bhi.w	8011980 <USBD_GetDescriptor+0x204>
 8011828:	a201      	add	r2, pc, #4	; (adr r2, 8011830 <USBD_GetDescriptor+0xb4>)
 801182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182e:	bf00      	nop
 8011830:	08011849 	.word	0x08011849
 8011834:	0801187d 	.word	0x0801187d
 8011838:	080118b1 	.word	0x080118b1
 801183c:	080118e5 	.word	0x080118e5
 8011840:	08011919 	.word	0x08011919
 8011844:	0801194d 	.word	0x0801194d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00b      	beq.n	801186c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	7c12      	ldrb	r2, [r2, #16]
 8011860:	f107 0108 	add.w	r1, r7, #8
 8011864:	4610      	mov	r0, r2
 8011866:	4798      	blx	r3
 8011868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801186a:	e091      	b.n	8011990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801186c:	6839      	ldr	r1, [r7, #0]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 facb 	bl	8011e0a <USBD_CtlError>
            err++;
 8011874:	7afb      	ldrb	r3, [r7, #11]
 8011876:	3301      	adds	r3, #1
 8011878:	72fb      	strb	r3, [r7, #11]
          break;
 801187a:	e089      	b.n	8011990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011882:	689b      	ldr	r3, [r3, #8]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00b      	beq.n	80118a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801188e:	689b      	ldr	r3, [r3, #8]
 8011890:	687a      	ldr	r2, [r7, #4]
 8011892:	7c12      	ldrb	r2, [r2, #16]
 8011894:	f107 0108 	add.w	r1, r7, #8
 8011898:	4610      	mov	r0, r2
 801189a:	4798      	blx	r3
 801189c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801189e:	e077      	b.n	8011990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80118a0:	6839      	ldr	r1, [r7, #0]
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f000 fab1 	bl	8011e0a <USBD_CtlError>
            err++;
 80118a8:	7afb      	ldrb	r3, [r7, #11]
 80118aa:	3301      	adds	r3, #1
 80118ac:	72fb      	strb	r3, [r7, #11]
          break;
 80118ae:	e06f      	b.n	8011990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d00b      	beq.n	80118d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	7c12      	ldrb	r2, [r2, #16]
 80118c8:	f107 0108 	add.w	r1, r7, #8
 80118cc:	4610      	mov	r0, r2
 80118ce:	4798      	blx	r3
 80118d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80118d2:	e05d      	b.n	8011990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80118d4:	6839      	ldr	r1, [r7, #0]
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 fa97 	bl	8011e0a <USBD_CtlError>
            err++;
 80118dc:	7afb      	ldrb	r3, [r7, #11]
 80118de:	3301      	adds	r3, #1
 80118e0:	72fb      	strb	r3, [r7, #11]
          break;
 80118e2:	e055      	b.n	8011990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118ea:	691b      	ldr	r3, [r3, #16]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00b      	beq.n	8011908 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118f6:	691b      	ldr	r3, [r3, #16]
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	7c12      	ldrb	r2, [r2, #16]
 80118fc:	f107 0108 	add.w	r1, r7, #8
 8011900:	4610      	mov	r0, r2
 8011902:	4798      	blx	r3
 8011904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011906:	e043      	b.n	8011990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011908:	6839      	ldr	r1, [r7, #0]
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f000 fa7d 	bl	8011e0a <USBD_CtlError>
            err++;
 8011910:	7afb      	ldrb	r3, [r7, #11]
 8011912:	3301      	adds	r3, #1
 8011914:	72fb      	strb	r3, [r7, #11]
          break;
 8011916:	e03b      	b.n	8011990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801191e:	695b      	ldr	r3, [r3, #20]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d00b      	beq.n	801193c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801192a:	695b      	ldr	r3, [r3, #20]
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	7c12      	ldrb	r2, [r2, #16]
 8011930:	f107 0108 	add.w	r1, r7, #8
 8011934:	4610      	mov	r0, r2
 8011936:	4798      	blx	r3
 8011938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801193a:	e029      	b.n	8011990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801193c:	6839      	ldr	r1, [r7, #0]
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 fa63 	bl	8011e0a <USBD_CtlError>
            err++;
 8011944:	7afb      	ldrb	r3, [r7, #11]
 8011946:	3301      	adds	r3, #1
 8011948:	72fb      	strb	r3, [r7, #11]
          break;
 801194a:	e021      	b.n	8011990 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011952:	699b      	ldr	r3, [r3, #24]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00b      	beq.n	8011970 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801195e:	699b      	ldr	r3, [r3, #24]
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	7c12      	ldrb	r2, [r2, #16]
 8011964:	f107 0108 	add.w	r1, r7, #8
 8011968:	4610      	mov	r0, r2
 801196a:	4798      	blx	r3
 801196c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801196e:	e00f      	b.n	8011990 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011970:	6839      	ldr	r1, [r7, #0]
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 fa49 	bl	8011e0a <USBD_CtlError>
            err++;
 8011978:	7afb      	ldrb	r3, [r7, #11]
 801197a:	3301      	adds	r3, #1
 801197c:	72fb      	strb	r3, [r7, #11]
          break;
 801197e:	e007      	b.n	8011990 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011980:	6839      	ldr	r1, [r7, #0]
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f000 fa41 	bl	8011e0a <USBD_CtlError>
          err++;
 8011988:	7afb      	ldrb	r3, [r7, #11]
 801198a:	3301      	adds	r3, #1
 801198c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801198e:	bf00      	nop
      }
      break;
 8011990:	e037      	b.n	8011a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	7c1b      	ldrb	r3, [r3, #16]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d109      	bne.n	80119ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119a2:	f107 0208 	add.w	r2, r7, #8
 80119a6:	4610      	mov	r0, r2
 80119a8:	4798      	blx	r3
 80119aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80119ac:	e029      	b.n	8011a02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80119ae:	6839      	ldr	r1, [r7, #0]
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f000 fa2a 	bl	8011e0a <USBD_CtlError>
        err++;
 80119b6:	7afb      	ldrb	r3, [r7, #11]
 80119b8:	3301      	adds	r3, #1
 80119ba:	72fb      	strb	r3, [r7, #11]
      break;
 80119bc:	e021      	b.n	8011a02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	7c1b      	ldrb	r3, [r3, #16]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d10d      	bne.n	80119e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ce:	f107 0208 	add.w	r2, r7, #8
 80119d2:	4610      	mov	r0, r2
 80119d4:	4798      	blx	r3
 80119d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	3301      	adds	r3, #1
 80119dc:	2207      	movs	r2, #7
 80119de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80119e0:	e00f      	b.n	8011a02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80119e2:	6839      	ldr	r1, [r7, #0]
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 fa10 	bl	8011e0a <USBD_CtlError>
        err++;
 80119ea:	7afb      	ldrb	r3, [r7, #11]
 80119ec:	3301      	adds	r3, #1
 80119ee:	72fb      	strb	r3, [r7, #11]
      break;
 80119f0:	e007      	b.n	8011a02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80119f2:	6839      	ldr	r1, [r7, #0]
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 fa08 	bl	8011e0a <USBD_CtlError>
      err++;
 80119fa:	7afb      	ldrb	r3, [r7, #11]
 80119fc:	3301      	adds	r3, #1
 80119fe:	72fb      	strb	r3, [r7, #11]
      break;
 8011a00:	bf00      	nop
  }

  if (err != 0U)
 8011a02:	7afb      	ldrb	r3, [r7, #11]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d11e      	bne.n	8011a46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	88db      	ldrh	r3, [r3, #6]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d016      	beq.n	8011a3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011a10:	893b      	ldrh	r3, [r7, #8]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00e      	beq.n	8011a34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	88da      	ldrh	r2, [r3, #6]
 8011a1a:	893b      	ldrh	r3, [r7, #8]
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	bf28      	it	cs
 8011a20:	4613      	movcs	r3, r2
 8011a22:	b29b      	uxth	r3, r3
 8011a24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011a26:	893b      	ldrh	r3, [r7, #8]
 8011a28:	461a      	mov	r2, r3
 8011a2a:	68f9      	ldr	r1, [r7, #12]
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 fa5d 	bl	8011eec <USBD_CtlSendData>
 8011a32:	e009      	b.n	8011a48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011a34:	6839      	ldr	r1, [r7, #0]
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f000 f9e7 	bl	8011e0a <USBD_CtlError>
 8011a3c:	e004      	b.n	8011a48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 faae 	bl	8011fa0 <USBD_CtlSendStatus>
 8011a44:	e000      	b.n	8011a48 <USBD_GetDescriptor+0x2cc>
    return;
 8011a46:	bf00      	nop
  }
}
 8011a48:	3710      	adds	r7, #16
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop

08011a50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	889b      	ldrh	r3, [r3, #4]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d131      	bne.n	8011ac6 <USBD_SetAddress+0x76>
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	88db      	ldrh	r3, [r3, #6]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d12d      	bne.n	8011ac6 <USBD_SetAddress+0x76>
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	885b      	ldrh	r3, [r3, #2]
 8011a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8011a70:	d829      	bhi.n	8011ac6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	885b      	ldrh	r3, [r3, #2]
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	2b03      	cmp	r3, #3
 8011a88:	d104      	bne.n	8011a94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011a8a:	6839      	ldr	r1, [r7, #0]
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f000 f9bc 	bl	8011e0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a92:	e01d      	b.n	8011ad0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	7bfa      	ldrb	r2, [r7, #15]
 8011a98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011a9c:	7bfb      	ldrb	r3, [r7, #15]
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 fef7 	bl	8012894 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fa7a 	bl	8011fa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011aac:	7bfb      	ldrb	r3, [r7, #15]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d004      	beq.n	8011abc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2202      	movs	r2, #2
 8011ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011aba:	e009      	b.n	8011ad0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2201      	movs	r2, #1
 8011ac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ac4:	e004      	b.n	8011ad0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011ac6:	6839      	ldr	r1, [r7, #0]
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 f99e 	bl	8011e0a <USBD_CtlError>
  }
}
 8011ace:	bf00      	nop
 8011ad0:	bf00      	nop
 8011ad2:	3710      	adds	r7, #16
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	885b      	ldrh	r3, [r3, #2]
 8011aea:	b2da      	uxtb	r2, r3
 8011aec:	4b4e      	ldr	r3, [pc, #312]	; (8011c28 <USBD_SetConfig+0x150>)
 8011aee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011af0:	4b4d      	ldr	r3, [pc, #308]	; (8011c28 <USBD_SetConfig+0x150>)
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d905      	bls.n	8011b04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011af8:	6839      	ldr	r1, [r7, #0]
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f000 f985 	bl	8011e0a <USBD_CtlError>
    return USBD_FAIL;
 8011b00:	2303      	movs	r3, #3
 8011b02:	e08c      	b.n	8011c1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b0a:	b2db      	uxtb	r3, r3
 8011b0c:	2b02      	cmp	r3, #2
 8011b0e:	d002      	beq.n	8011b16 <USBD_SetConfig+0x3e>
 8011b10:	2b03      	cmp	r3, #3
 8011b12:	d029      	beq.n	8011b68 <USBD_SetConfig+0x90>
 8011b14:	e075      	b.n	8011c02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011b16:	4b44      	ldr	r3, [pc, #272]	; (8011c28 <USBD_SetConfig+0x150>)
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d020      	beq.n	8011b60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011b1e:	4b42      	ldr	r3, [pc, #264]	; (8011c28 <USBD_SetConfig+0x150>)
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	461a      	mov	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011b28:	4b3f      	ldr	r3, [pc, #252]	; (8011c28 <USBD_SetConfig+0x150>)
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7fe ffe7 	bl	8010b02 <USBD_SetClassConfig>
 8011b34:	4603      	mov	r3, r0
 8011b36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011b38:	7bfb      	ldrb	r3, [r7, #15]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d008      	beq.n	8011b50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011b3e:	6839      	ldr	r1, [r7, #0]
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f000 f962 	bl	8011e0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2202      	movs	r2, #2
 8011b4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011b4e:	e065      	b.n	8011c1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f000 fa25 	bl	8011fa0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2203      	movs	r2, #3
 8011b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011b5e:	e05d      	b.n	8011c1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f000 fa1d 	bl	8011fa0 <USBD_CtlSendStatus>
      break;
 8011b66:	e059      	b.n	8011c1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011b68:	4b2f      	ldr	r3, [pc, #188]	; (8011c28 <USBD_SetConfig+0x150>)
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d112      	bne.n	8011b96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2202      	movs	r2, #2
 8011b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011b78:	4b2b      	ldr	r3, [pc, #172]	; (8011c28 <USBD_SetConfig+0x150>)
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011b82:	4b29      	ldr	r3, [pc, #164]	; (8011c28 <USBD_SetConfig+0x150>)
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	4619      	mov	r1, r3
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7fe ffd6 	bl	8010b3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 fa06 	bl	8011fa0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011b94:	e042      	b.n	8011c1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011b96:	4b24      	ldr	r3, [pc, #144]	; (8011c28 <USBD_SetConfig+0x150>)
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d02a      	beq.n	8011bfa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	4619      	mov	r1, r3
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7fe ffc4 	bl	8010b3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011bb2:	4b1d      	ldr	r3, [pc, #116]	; (8011c28 <USBD_SetConfig+0x150>)
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011bbc:	4b1a      	ldr	r3, [pc, #104]	; (8011c28 <USBD_SetConfig+0x150>)
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7fe ff9d 	bl	8010b02 <USBD_SetClassConfig>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011bcc:	7bfb      	ldrb	r3, [r7, #15]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d00f      	beq.n	8011bf2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011bd2:	6839      	ldr	r1, [r7, #0]
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f000 f918 	bl	8011e0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	4619      	mov	r1, r3
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f7fe ffa9 	bl	8010b3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2202      	movs	r2, #2
 8011bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011bf0:	e014      	b.n	8011c1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f000 f9d4 	bl	8011fa0 <USBD_CtlSendStatus>
      break;
 8011bf8:	e010      	b.n	8011c1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f000 f9d0 	bl	8011fa0 <USBD_CtlSendStatus>
      break;
 8011c00:	e00c      	b.n	8011c1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011c02:	6839      	ldr	r1, [r7, #0]
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f000 f900 	bl	8011e0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011c0a:	4b07      	ldr	r3, [pc, #28]	; (8011c28 <USBD_SetConfig+0x150>)
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	4619      	mov	r1, r3
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f7fe ff92 	bl	8010b3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011c16:	2303      	movs	r3, #3
 8011c18:	73fb      	strb	r3, [r7, #15]
      break;
 8011c1a:	bf00      	nop
  }

  return ret;
 8011c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3710      	adds	r7, #16
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	200009ec 	.word	0x200009ec

08011c2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	88db      	ldrh	r3, [r3, #6]
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d004      	beq.n	8011c48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011c3e:	6839      	ldr	r1, [r7, #0]
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 f8e2 	bl	8011e0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011c46:	e023      	b.n	8011c90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	2b02      	cmp	r3, #2
 8011c52:	dc02      	bgt.n	8011c5a <USBD_GetConfig+0x2e>
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	dc03      	bgt.n	8011c60 <USBD_GetConfig+0x34>
 8011c58:	e015      	b.n	8011c86 <USBD_GetConfig+0x5a>
 8011c5a:	2b03      	cmp	r3, #3
 8011c5c:	d00b      	beq.n	8011c76 <USBD_GetConfig+0x4a>
 8011c5e:	e012      	b.n	8011c86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2200      	movs	r2, #0
 8011c64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	3308      	adds	r3, #8
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 f93c 	bl	8011eec <USBD_CtlSendData>
        break;
 8011c74:	e00c      	b.n	8011c90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	3304      	adds	r3, #4
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f000 f934 	bl	8011eec <USBD_CtlSendData>
        break;
 8011c84:	e004      	b.n	8011c90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011c86:	6839      	ldr	r1, [r7, #0]
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 f8be 	bl	8011e0a <USBD_CtlError>
        break;
 8011c8e:	bf00      	nop
}
 8011c90:	bf00      	nop
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ca8:	b2db      	uxtb	r3, r3
 8011caa:	3b01      	subs	r3, #1
 8011cac:	2b02      	cmp	r3, #2
 8011cae:	d81e      	bhi.n	8011cee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	88db      	ldrh	r3, [r3, #6]
 8011cb4:	2b02      	cmp	r3, #2
 8011cb6:	d004      	beq.n	8011cc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011cb8:	6839      	ldr	r1, [r7, #0]
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 f8a5 	bl	8011e0a <USBD_CtlError>
        break;
 8011cc0:	e01a      	b.n	8011cf8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d005      	beq.n	8011cde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	f043 0202 	orr.w	r2, r3, #2
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	330c      	adds	r3, #12
 8011ce2:	2202      	movs	r2, #2
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f000 f900 	bl	8011eec <USBD_CtlSendData>
      break;
 8011cec:	e004      	b.n	8011cf8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011cee:	6839      	ldr	r1, [r7, #0]
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f000 f88a 	bl	8011e0a <USBD_CtlError>
      break;
 8011cf6:	bf00      	nop
  }
}
 8011cf8:	bf00      	nop
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	885b      	ldrh	r3, [r3, #2]
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d107      	bne.n	8011d22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2201      	movs	r2, #1
 8011d16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 f940 	bl	8011fa0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011d20:	e013      	b.n	8011d4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	885b      	ldrh	r3, [r3, #2]
 8011d26:	2b02      	cmp	r3, #2
 8011d28:	d10b      	bne.n	8011d42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	889b      	ldrh	r3, [r3, #4]
 8011d2e:	0a1b      	lsrs	r3, r3, #8
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f000 f930 	bl	8011fa0 <USBD_CtlSendStatus>
}
 8011d40:	e003      	b.n	8011d4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011d42:	6839      	ldr	r1, [r7, #0]
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f000 f860 	bl	8011e0a <USBD_CtlError>
}
 8011d4a:	bf00      	nop
 8011d4c:	3708      	adds	r7, #8
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}

08011d52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d52:	b580      	push	{r7, lr}
 8011d54:	b082      	sub	sp, #8
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	6078      	str	r0, [r7, #4]
 8011d5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	3b01      	subs	r3, #1
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	d80b      	bhi.n	8011d82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	885b      	ldrh	r3, [r3, #2]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d10c      	bne.n	8011d8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2200      	movs	r2, #0
 8011d76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 f910 	bl	8011fa0 <USBD_CtlSendStatus>
      }
      break;
 8011d80:	e004      	b.n	8011d8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011d82:	6839      	ldr	r1, [r7, #0]
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 f840 	bl	8011e0a <USBD_CtlError>
      break;
 8011d8a:	e000      	b.n	8011d8e <USBD_ClrFeature+0x3c>
      break;
 8011d8c:	bf00      	nop
  }
}
 8011d8e:	bf00      	nop
 8011d90:	3708      	adds	r7, #8
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
 8011d9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	781a      	ldrb	r2, [r3, #0]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	3301      	adds	r3, #1
 8011db0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	781a      	ldrb	r2, [r3, #0]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011dc0:	68f8      	ldr	r0, [r7, #12]
 8011dc2:	f7ff fa41 	bl	8011248 <SWAPBYTE>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	461a      	mov	r2, r3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011dda:	68f8      	ldr	r0, [r7, #12]
 8011ddc:	f7ff fa34 	bl	8011248 <SWAPBYTE>
 8011de0:	4603      	mov	r3, r0
 8011de2:	461a      	mov	r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	3301      	adds	r3, #1
 8011dec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	3301      	adds	r3, #1
 8011df2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f7ff fa27 	bl	8011248 <SWAPBYTE>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	461a      	mov	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	80da      	strh	r2, [r3, #6]
}
 8011e02:	bf00      	nop
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b082      	sub	sp, #8
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e14:	2180      	movs	r1, #128	; 0x80
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 fcd2 	bl	80127c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f000 fcce 	bl	80127c0 <USBD_LL_StallEP>
}
 8011e24:	bf00      	nop
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d036      	beq.n	8011eb0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011e46:	6938      	ldr	r0, [r7, #16]
 8011e48:	f000 f836 	bl	8011eb8 <USBD_GetLen>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	3301      	adds	r3, #1
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	005b      	lsls	r3, r3, #1
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011e5a:	7dfb      	ldrb	r3, [r7, #23]
 8011e5c:	68ba      	ldr	r2, [r7, #8]
 8011e5e:	4413      	add	r3, r2
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	7812      	ldrb	r2, [r2, #0]
 8011e64:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e66:	7dfb      	ldrb	r3, [r7, #23]
 8011e68:	3301      	adds	r3, #1
 8011e6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011e6c:	7dfb      	ldrb	r3, [r7, #23]
 8011e6e:	68ba      	ldr	r2, [r7, #8]
 8011e70:	4413      	add	r3, r2
 8011e72:	2203      	movs	r2, #3
 8011e74:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011e7c:	e013      	b.n	8011ea6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011e7e:	7dfb      	ldrb	r3, [r7, #23]
 8011e80:	68ba      	ldr	r2, [r7, #8]
 8011e82:	4413      	add	r3, r2
 8011e84:	693a      	ldr	r2, [r7, #16]
 8011e86:	7812      	ldrb	r2, [r2, #0]
 8011e88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	613b      	str	r3, [r7, #16]
    idx++;
 8011e90:	7dfb      	ldrb	r3, [r7, #23]
 8011e92:	3301      	adds	r3, #1
 8011e94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011e96:	7dfb      	ldrb	r3, [r7, #23]
 8011e98:	68ba      	ldr	r2, [r7, #8]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	701a      	strb	r2, [r3, #0]
    idx++;
 8011ea0:	7dfb      	ldrb	r3, [r7, #23]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d1e7      	bne.n	8011e7e <USBD_GetString+0x52>
 8011eae:	e000      	b.n	8011eb2 <USBD_GetString+0x86>
    return;
 8011eb0:	bf00      	nop
  }
}
 8011eb2:	3718      	adds	r7, #24
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b085      	sub	sp, #20
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011ec8:	e005      	b.n	8011ed6 <USBD_GetLen+0x1e>
  {
    len++;
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d1f5      	bne.n	8011eca <USBD_GetLen+0x12>
  }

  return len;
 8011ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	3714      	adds	r7, #20
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr

08011eec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2202      	movs	r2, #2
 8011efc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	68ba      	ldr	r2, [r7, #8]
 8011f10:	2100      	movs	r1, #0
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f000 fcdd 	bl	80128d2 <USBD_LL_Transmit>

  return USBD_OK;
 8011f18:	2300      	movs	r3, #0
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011f22:	b580      	push	{r7, lr}
 8011f24:	b084      	sub	sp, #16
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	60f8      	str	r0, [r7, #12]
 8011f2a:	60b9      	str	r1, [r7, #8]
 8011f2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	68ba      	ldr	r2, [r7, #8]
 8011f32:	2100      	movs	r1, #0
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f000 fccc 	bl	80128d2 <USBD_LL_Transmit>

  return USBD_OK;
 8011f3a:	2300      	movs	r3, #0
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3710      	adds	r7, #16
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2203      	movs	r2, #3
 8011f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	68ba      	ldr	r2, [r7, #8]
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	f000 fcd0 	bl	8012914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011f74:	2300      	movs	r3, #0
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3710      	adds	r7, #16
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	60f8      	str	r0, [r7, #12]
 8011f86:	60b9      	str	r1, [r7, #8]
 8011f88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	68ba      	ldr	r2, [r7, #8]
 8011f8e:	2100      	movs	r1, #0
 8011f90:	68f8      	ldr	r0, [r7, #12]
 8011f92:	f000 fcbf 	bl	8012914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011f96:	2300      	movs	r3, #0
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3710      	adds	r7, #16
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2204      	movs	r2, #4
 8011fac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	2100      	movs	r1, #0
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 fc8b 	bl	80128d2 <USBD_LL_Transmit>

  return USBD_OK;
 8011fbc:	2300      	movs	r3, #0
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3708      	adds	r7, #8
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}

08011fc6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011fc6:	b580      	push	{r7, lr}
 8011fc8:	b082      	sub	sp, #8
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2205      	movs	r2, #5
 8011fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	2200      	movs	r2, #0
 8011fda:	2100      	movs	r1, #0
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 fc99 	bl	8012914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011fe2:	2300      	movs	r3, #0
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3708      	adds	r7, #8
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	4912      	ldr	r1, [pc, #72]	; (801203c <MX_USB_DEVICE_Init+0x50>)
 8011ff4:	4812      	ldr	r0, [pc, #72]	; (8012040 <MX_USB_DEVICE_Init+0x54>)
 8011ff6:	f7fe fd07 	bl	8010a08 <USBD_Init>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d001      	beq.n	8012004 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012000:	f7ef f89a 	bl	8001138 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012004:	490f      	ldr	r1, [pc, #60]	; (8012044 <MX_USB_DEVICE_Init+0x58>)
 8012006:	480e      	ldr	r0, [pc, #56]	; (8012040 <MX_USB_DEVICE_Init+0x54>)
 8012008:	f7fe fd2e 	bl	8010a68 <USBD_RegisterClass>
 801200c:	4603      	mov	r3, r0
 801200e:	2b00      	cmp	r3, #0
 8012010:	d001      	beq.n	8012016 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012012:	f7ef f891 	bl	8001138 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012016:	490c      	ldr	r1, [pc, #48]	; (8012048 <MX_USB_DEVICE_Init+0x5c>)
 8012018:	4809      	ldr	r0, [pc, #36]	; (8012040 <MX_USB_DEVICE_Init+0x54>)
 801201a:	f7fe fc65 	bl	80108e8 <USBD_CDC_RegisterInterface>
 801201e:	4603      	mov	r3, r0
 8012020:	2b00      	cmp	r3, #0
 8012022:	d001      	beq.n	8012028 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012024:	f7ef f888 	bl	8001138 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012028:	4805      	ldr	r0, [pc, #20]	; (8012040 <MX_USB_DEVICE_Init+0x54>)
 801202a:	f7fe fd53 	bl	8010ad4 <USBD_Start>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	d001      	beq.n	8012038 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012034:	f7ef f880 	bl	8001138 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012038:	bf00      	nop
 801203a:	bd80      	pop	{r7, pc}
 801203c:	200003a4 	.word	0x200003a4
 8012040:	200009f0 	.word	0x200009f0
 8012044:	20000310 	.word	0x20000310
 8012048:	20000390 	.word	0x20000390

0801204c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012050:	2200      	movs	r2, #0
 8012052:	4905      	ldr	r1, [pc, #20]	; (8012068 <CDC_Init_FS+0x1c>)
 8012054:	4805      	ldr	r0, [pc, #20]	; (801206c <CDC_Init_FS+0x20>)
 8012056:	f7fe fc61 	bl	801091c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801205a:	4905      	ldr	r1, [pc, #20]	; (8012070 <CDC_Init_FS+0x24>)
 801205c:	4803      	ldr	r0, [pc, #12]	; (801206c <CDC_Init_FS+0x20>)
 801205e:	f7fe fc7f 	bl	8010960 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012062:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012064:	4618      	mov	r0, r3
 8012066:	bd80      	pop	{r7, pc}
 8012068:	200014cc 	.word	0x200014cc
 801206c:	200009f0 	.word	0x200009f0
 8012070:	20000ccc 	.word	0x20000ccc

08012074 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012074:	b480      	push	{r7}
 8012076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012078:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801207a:	4618      	mov	r0, r3
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr

08012084 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012084:	b480      	push	{r7}
 8012086:	b083      	sub	sp, #12
 8012088:	af00      	add	r7, sp, #0
 801208a:	4603      	mov	r3, r0
 801208c:	6039      	str	r1, [r7, #0]
 801208e:	71fb      	strb	r3, [r7, #7]
 8012090:	4613      	mov	r3, r2
 8012092:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012094:	79fb      	ldrb	r3, [r7, #7]
 8012096:	2b23      	cmp	r3, #35	; 0x23
 8012098:	d84a      	bhi.n	8012130 <CDC_Control_FS+0xac>
 801209a:	a201      	add	r2, pc, #4	; (adr r2, 80120a0 <CDC_Control_FS+0x1c>)
 801209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120a0:	08012131 	.word	0x08012131
 80120a4:	08012131 	.word	0x08012131
 80120a8:	08012131 	.word	0x08012131
 80120ac:	08012131 	.word	0x08012131
 80120b0:	08012131 	.word	0x08012131
 80120b4:	08012131 	.word	0x08012131
 80120b8:	08012131 	.word	0x08012131
 80120bc:	08012131 	.word	0x08012131
 80120c0:	08012131 	.word	0x08012131
 80120c4:	08012131 	.word	0x08012131
 80120c8:	08012131 	.word	0x08012131
 80120cc:	08012131 	.word	0x08012131
 80120d0:	08012131 	.word	0x08012131
 80120d4:	08012131 	.word	0x08012131
 80120d8:	08012131 	.word	0x08012131
 80120dc:	08012131 	.word	0x08012131
 80120e0:	08012131 	.word	0x08012131
 80120e4:	08012131 	.word	0x08012131
 80120e8:	08012131 	.word	0x08012131
 80120ec:	08012131 	.word	0x08012131
 80120f0:	08012131 	.word	0x08012131
 80120f4:	08012131 	.word	0x08012131
 80120f8:	08012131 	.word	0x08012131
 80120fc:	08012131 	.word	0x08012131
 8012100:	08012131 	.word	0x08012131
 8012104:	08012131 	.word	0x08012131
 8012108:	08012131 	.word	0x08012131
 801210c:	08012131 	.word	0x08012131
 8012110:	08012131 	.word	0x08012131
 8012114:	08012131 	.word	0x08012131
 8012118:	08012131 	.word	0x08012131
 801211c:	08012131 	.word	0x08012131
 8012120:	08012131 	.word	0x08012131
 8012124:	08012131 	.word	0x08012131
 8012128:	08012131 	.word	0x08012131
 801212c:	08012131 	.word	0x08012131
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012130:	bf00      	nop
  }

  return (USBD_OK);
 8012132:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012134:	4618      	mov	r0, r3
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr

08012140 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b084      	sub	sp, #16
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801214a:	6879      	ldr	r1, [r7, #4]
 801214c:	4813      	ldr	r0, [pc, #76]	; (801219c <CDC_Receive_FS+0x5c>)
 801214e:	f7fe fc07 	bl	8010960 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012152:	4812      	ldr	r0, [pc, #72]	; (801219c <CDC_Receive_FS+0x5c>)
 8012154:	f7fe fc22 	bl	801099c <USBD_CDC_ReceivePacket>
  memset(ResBuffer, '\0', 64); //Clear the buffer
 8012158:	2240      	movs	r2, #64	; 0x40
 801215a:	2100      	movs	r1, #0
 801215c:	4810      	ldr	r0, [pc, #64]	; (80121a0 <CDC_Receive_FS+0x60>)
 801215e:	f000 fc89 	bl	8012a74 <memset>
  uint8_t len = (uint8_t)*Len;
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	73fb      	strb	r3, [r7, #15]
  memcpy(ResBuffer, Buf, len); //Copy the data to buffer
 8012168:	7bfb      	ldrb	r3, [r7, #15]
 801216a:	461a      	mov	r2, r3
 801216c:	6879      	ldr	r1, [r7, #4]
 801216e:	480c      	ldr	r0, [pc, #48]	; (80121a0 <CDC_Receive_FS+0x60>)
 8012170:	f000 fc72 	bl	8012a58 <memcpy>
  memset(Buf, '\0', len); //Clear Buf
 8012174:	7bfb      	ldrb	r3, [r7, #15]
 8012176:	461a      	mov	r2, r3
 8012178:	2100      	movs	r1, #0
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 fc7a 	bl	8012a74 <memset>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8012180:	2201      	movs	r2, #1
 8012182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012186:	4807      	ldr	r0, [pc, #28]	; (80121a4 <CDC_Receive_FS+0x64>)
 8012188:	f7f0 fe0e 	bl	8002da8 <HAL_GPIO_WritePin>
  ReceiveFlag = 1;
 801218c:	4b06      	ldr	r3, [pc, #24]	; (80121a8 <CDC_Receive_FS+0x68>)
 801218e:	2201      	movs	r2, #1
 8012190:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8012192:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012194:	4618      	mov	r0, r3
 8012196:	3710      	adds	r7, #16
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	200009f0 	.word	0x200009f0
 80121a0:	200008c8 	.word	0x200008c8
 80121a4:	40020800 	.word	0x40020800
 80121a8:	20000908 	.word	0x20000908

080121ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b087      	sub	sp, #28
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	60b9      	str	r1, [r7, #8]
 80121b6:	4613      	mov	r3, r2
 80121b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80121ba:	2300      	movs	r3, #0
 80121bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80121be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	371c      	adds	r7, #28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr
	...

080121d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	4603      	mov	r3, r0
 80121d8:	6039      	str	r1, [r7, #0]
 80121da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	2212      	movs	r2, #18
 80121e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80121e2:	4b03      	ldr	r3, [pc, #12]	; (80121f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	370c      	adds	r7, #12
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr
 80121f0:	200003c0 	.word	0x200003c0

080121f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b083      	sub	sp, #12
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	4603      	mov	r3, r0
 80121fc:	6039      	str	r1, [r7, #0]
 80121fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	2204      	movs	r2, #4
 8012204:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012206:	4b03      	ldr	r3, [pc, #12]	; (8012214 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012208:	4618      	mov	r0, r3
 801220a:	370c      	adds	r7, #12
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr
 8012214:	200003d4 	.word	0x200003d4

08012218 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	4603      	mov	r3, r0
 8012220:	6039      	str	r1, [r7, #0]
 8012222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012224:	79fb      	ldrb	r3, [r7, #7]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d105      	bne.n	8012236 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801222a:	683a      	ldr	r2, [r7, #0]
 801222c:	4907      	ldr	r1, [pc, #28]	; (801224c <USBD_FS_ProductStrDescriptor+0x34>)
 801222e:	4808      	ldr	r0, [pc, #32]	; (8012250 <USBD_FS_ProductStrDescriptor+0x38>)
 8012230:	f7ff fdfc 	bl	8011e2c <USBD_GetString>
 8012234:	e004      	b.n	8012240 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012236:	683a      	ldr	r2, [r7, #0]
 8012238:	4904      	ldr	r1, [pc, #16]	; (801224c <USBD_FS_ProductStrDescriptor+0x34>)
 801223a:	4805      	ldr	r0, [pc, #20]	; (8012250 <USBD_FS_ProductStrDescriptor+0x38>)
 801223c:	f7ff fdf6 	bl	8011e2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012240:	4b02      	ldr	r3, [pc, #8]	; (801224c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012242:	4618      	mov	r0, r3
 8012244:	3708      	adds	r7, #8
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
 801224a:	bf00      	nop
 801224c:	20001ccc 	.word	0x20001ccc
 8012250:	0801337c 	.word	0x0801337c

08012254 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	4603      	mov	r3, r0
 801225c:	6039      	str	r1, [r7, #0]
 801225e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012260:	683a      	ldr	r2, [r7, #0]
 8012262:	4904      	ldr	r1, [pc, #16]	; (8012274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012264:	4804      	ldr	r0, [pc, #16]	; (8012278 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012266:	f7ff fde1 	bl	8011e2c <USBD_GetString>
  return USBD_StrDesc;
 801226a:	4b02      	ldr	r3, [pc, #8]	; (8012274 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801226c:	4618      	mov	r0, r3
 801226e:	3708      	adds	r7, #8
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	20001ccc 	.word	0x20001ccc
 8012278:	08013398 	.word	0x08013398

0801227c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
 8012282:	4603      	mov	r3, r0
 8012284:	6039      	str	r1, [r7, #0]
 8012286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	221a      	movs	r2, #26
 801228c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801228e:	f000 f843 	bl	8012318 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012292:	4b02      	ldr	r3, [pc, #8]	; (801229c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012294:	4618      	mov	r0, r3
 8012296:	3708      	adds	r7, #8
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}
 801229c:	200003d8 	.word	0x200003d8

080122a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	4603      	mov	r3, r0
 80122a8:	6039      	str	r1, [r7, #0]
 80122aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80122ac:	79fb      	ldrb	r3, [r7, #7]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d105      	bne.n	80122be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80122b2:	683a      	ldr	r2, [r7, #0]
 80122b4:	4907      	ldr	r1, [pc, #28]	; (80122d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80122b6:	4808      	ldr	r0, [pc, #32]	; (80122d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80122b8:	f7ff fdb8 	bl	8011e2c <USBD_GetString>
 80122bc:	e004      	b.n	80122c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80122be:	683a      	ldr	r2, [r7, #0]
 80122c0:	4904      	ldr	r1, [pc, #16]	; (80122d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80122c2:	4805      	ldr	r0, [pc, #20]	; (80122d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80122c4:	f7ff fdb2 	bl	8011e2c <USBD_GetString>
  }
  return USBD_StrDesc;
 80122c8:	4b02      	ldr	r3, [pc, #8]	; (80122d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3708      	adds	r7, #8
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
 80122d2:	bf00      	nop
 80122d4:	20001ccc 	.word	0x20001ccc
 80122d8:	080133ac 	.word	0x080133ac

080122dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	4603      	mov	r3, r0
 80122e4:	6039      	str	r1, [r7, #0]
 80122e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80122e8:	79fb      	ldrb	r3, [r7, #7]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d105      	bne.n	80122fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80122ee:	683a      	ldr	r2, [r7, #0]
 80122f0:	4907      	ldr	r1, [pc, #28]	; (8012310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80122f2:	4808      	ldr	r0, [pc, #32]	; (8012314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80122f4:	f7ff fd9a 	bl	8011e2c <USBD_GetString>
 80122f8:	e004      	b.n	8012304 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80122fa:	683a      	ldr	r2, [r7, #0]
 80122fc:	4904      	ldr	r1, [pc, #16]	; (8012310 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80122fe:	4805      	ldr	r0, [pc, #20]	; (8012314 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012300:	f7ff fd94 	bl	8011e2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012304:	4b02      	ldr	r3, [pc, #8]	; (8012310 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012306:	4618      	mov	r0, r3
 8012308:	3708      	adds	r7, #8
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}
 801230e:	bf00      	nop
 8012310:	20001ccc 	.word	0x20001ccc
 8012314:	080133b8 	.word	0x080133b8

08012318 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801231e:	4b0f      	ldr	r3, [pc, #60]	; (801235c <Get_SerialNum+0x44>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012324:	4b0e      	ldr	r3, [pc, #56]	; (8012360 <Get_SerialNum+0x48>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801232a:	4b0e      	ldr	r3, [pc, #56]	; (8012364 <Get_SerialNum+0x4c>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012330:	68fa      	ldr	r2, [r7, #12]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4413      	add	r3, r2
 8012336:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d009      	beq.n	8012352 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801233e:	2208      	movs	r2, #8
 8012340:	4909      	ldr	r1, [pc, #36]	; (8012368 <Get_SerialNum+0x50>)
 8012342:	68f8      	ldr	r0, [r7, #12]
 8012344:	f000 f814 	bl	8012370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012348:	2204      	movs	r2, #4
 801234a:	4908      	ldr	r1, [pc, #32]	; (801236c <Get_SerialNum+0x54>)
 801234c:	68b8      	ldr	r0, [r7, #8]
 801234e:	f000 f80f 	bl	8012370 <IntToUnicode>
  }
}
 8012352:	bf00      	nop
 8012354:	3710      	adds	r7, #16
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	1fff7a10 	.word	0x1fff7a10
 8012360:	1fff7a14 	.word	0x1fff7a14
 8012364:	1fff7a18 	.word	0x1fff7a18
 8012368:	200003da 	.word	0x200003da
 801236c:	200003ea 	.word	0x200003ea

08012370 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012370:	b480      	push	{r7}
 8012372:	b087      	sub	sp, #28
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	4613      	mov	r3, r2
 801237c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801237e:	2300      	movs	r3, #0
 8012380:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012382:	2300      	movs	r3, #0
 8012384:	75fb      	strb	r3, [r7, #23]
 8012386:	e027      	b.n	80123d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	0f1b      	lsrs	r3, r3, #28
 801238c:	2b09      	cmp	r3, #9
 801238e:	d80b      	bhi.n	80123a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	0f1b      	lsrs	r3, r3, #28
 8012394:	b2da      	uxtb	r2, r3
 8012396:	7dfb      	ldrb	r3, [r7, #23]
 8012398:	005b      	lsls	r3, r3, #1
 801239a:	4619      	mov	r1, r3
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	440b      	add	r3, r1
 80123a0:	3230      	adds	r2, #48	; 0x30
 80123a2:	b2d2      	uxtb	r2, r2
 80123a4:	701a      	strb	r2, [r3, #0]
 80123a6:	e00a      	b.n	80123be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	0f1b      	lsrs	r3, r3, #28
 80123ac:	b2da      	uxtb	r2, r3
 80123ae:	7dfb      	ldrb	r3, [r7, #23]
 80123b0:	005b      	lsls	r3, r3, #1
 80123b2:	4619      	mov	r1, r3
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	440b      	add	r3, r1
 80123b8:	3237      	adds	r2, #55	; 0x37
 80123ba:	b2d2      	uxtb	r2, r2
 80123bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	011b      	lsls	r3, r3, #4
 80123c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80123c4:	7dfb      	ldrb	r3, [r7, #23]
 80123c6:	005b      	lsls	r3, r3, #1
 80123c8:	3301      	adds	r3, #1
 80123ca:	68ba      	ldr	r2, [r7, #8]
 80123cc:	4413      	add	r3, r2
 80123ce:	2200      	movs	r2, #0
 80123d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80123d2:	7dfb      	ldrb	r3, [r7, #23]
 80123d4:	3301      	adds	r3, #1
 80123d6:	75fb      	strb	r3, [r7, #23]
 80123d8:	7dfa      	ldrb	r2, [r7, #23]
 80123da:	79fb      	ldrb	r3, [r7, #7]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d3d3      	bcc.n	8012388 <IntToUnicode+0x18>
  }
}
 80123e0:	bf00      	nop
 80123e2:	bf00      	nop
 80123e4:	371c      	adds	r7, #28
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr
	...

080123f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b08a      	sub	sp, #40	; 0x28
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80123f8:	f107 0314 	add.w	r3, r7, #20
 80123fc:	2200      	movs	r2, #0
 80123fe:	601a      	str	r2, [r3, #0]
 8012400:	605a      	str	r2, [r3, #4]
 8012402:	609a      	str	r2, [r3, #8]
 8012404:	60da      	str	r2, [r3, #12]
 8012406:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012410:	d13a      	bne.n	8012488 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012412:	2300      	movs	r3, #0
 8012414:	613b      	str	r3, [r7, #16]
 8012416:	4b1e      	ldr	r3, [pc, #120]	; (8012490 <HAL_PCD_MspInit+0xa0>)
 8012418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801241a:	4a1d      	ldr	r2, [pc, #116]	; (8012490 <HAL_PCD_MspInit+0xa0>)
 801241c:	f043 0301 	orr.w	r3, r3, #1
 8012420:	6313      	str	r3, [r2, #48]	; 0x30
 8012422:	4b1b      	ldr	r3, [pc, #108]	; (8012490 <HAL_PCD_MspInit+0xa0>)
 8012424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012426:	f003 0301 	and.w	r3, r3, #1
 801242a:	613b      	str	r3, [r7, #16]
 801242c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801242e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012434:	2302      	movs	r3, #2
 8012436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012438:	2300      	movs	r3, #0
 801243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801243c:	2303      	movs	r3, #3
 801243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012440:	230a      	movs	r3, #10
 8012442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012444:	f107 0314 	add.w	r3, r7, #20
 8012448:	4619      	mov	r1, r3
 801244a:	4812      	ldr	r0, [pc, #72]	; (8012494 <HAL_PCD_MspInit+0xa4>)
 801244c:	f7f0 fb10 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012450:	4b0f      	ldr	r3, [pc, #60]	; (8012490 <HAL_PCD_MspInit+0xa0>)
 8012452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012454:	4a0e      	ldr	r2, [pc, #56]	; (8012490 <HAL_PCD_MspInit+0xa0>)
 8012456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801245a:	6353      	str	r3, [r2, #52]	; 0x34
 801245c:	2300      	movs	r3, #0
 801245e:	60fb      	str	r3, [r7, #12]
 8012460:	4b0b      	ldr	r3, [pc, #44]	; (8012490 <HAL_PCD_MspInit+0xa0>)
 8012462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012464:	4a0a      	ldr	r2, [pc, #40]	; (8012490 <HAL_PCD_MspInit+0xa0>)
 8012466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801246a:	6453      	str	r3, [r2, #68]	; 0x44
 801246c:	4b08      	ldr	r3, [pc, #32]	; (8012490 <HAL_PCD_MspInit+0xa0>)
 801246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012474:	60fb      	str	r3, [r7, #12]
 8012476:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012478:	2200      	movs	r2, #0
 801247a:	2100      	movs	r1, #0
 801247c:	2043      	movs	r0, #67	; 0x43
 801247e:	f7ef ff20 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012482:	2043      	movs	r0, #67	; 0x43
 8012484:	f7ef ff39 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012488:	bf00      	nop
 801248a:	3728      	adds	r7, #40	; 0x28
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	40023800 	.word	0x40023800
 8012494:	40020000 	.word	0x40020000

08012498 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80124ac:	4619      	mov	r1, r3
 80124ae:	4610      	mov	r0, r2
 80124b0:	f7fe fb5d 	bl	8010b6e <USBD_LL_SetupStage>
}
 80124b4:	bf00      	nop
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	460b      	mov	r3, r1
 80124c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80124ce:	78fa      	ldrb	r2, [r7, #3]
 80124d0:	6879      	ldr	r1, [r7, #4]
 80124d2:	4613      	mov	r3, r2
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	4413      	add	r3, r2
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	440b      	add	r3, r1
 80124dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	78fb      	ldrb	r3, [r7, #3]
 80124e4:	4619      	mov	r1, r3
 80124e6:	f7fe fb97 	bl	8010c18 <USBD_LL_DataOutStage>
}
 80124ea:	bf00      	nop
 80124ec:	3708      	adds	r7, #8
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}

080124f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124f2:	b580      	push	{r7, lr}
 80124f4:	b082      	sub	sp, #8
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	6078      	str	r0, [r7, #4]
 80124fa:	460b      	mov	r3, r1
 80124fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012504:	78fa      	ldrb	r2, [r7, #3]
 8012506:	6879      	ldr	r1, [r7, #4]
 8012508:	4613      	mov	r3, r2
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	4413      	add	r3, r2
 801250e:	009b      	lsls	r3, r3, #2
 8012510:	440b      	add	r3, r1
 8012512:	334c      	adds	r3, #76	; 0x4c
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	78fb      	ldrb	r3, [r7, #3]
 8012518:	4619      	mov	r1, r3
 801251a:	f7fe fc30 	bl	8010d7e <USBD_LL_DataInStage>
}
 801251e:	bf00      	nop
 8012520:	3708      	adds	r7, #8
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b082      	sub	sp, #8
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012534:	4618      	mov	r0, r3
 8012536:	f7fe fd64 	bl	8011002 <USBD_LL_SOF>
}
 801253a:	bf00      	nop
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b084      	sub	sp, #16
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801254a:	2301      	movs	r3, #1
 801254c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	68db      	ldr	r3, [r3, #12]
 8012552:	2b02      	cmp	r3, #2
 8012554:	d001      	beq.n	801255a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012556:	f7ee fdef 	bl	8001138 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012560:	7bfa      	ldrb	r2, [r7, #15]
 8012562:	4611      	mov	r1, r2
 8012564:	4618      	mov	r0, r3
 8012566:	f7fe fd0e 	bl	8010f86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012570:	4618      	mov	r0, r3
 8012572:	f7fe fcb6 	bl	8010ee2 <USBD_LL_Reset>
}
 8012576:	bf00      	nop
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
	...

08012580 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801258e:	4618      	mov	r0, r3
 8012590:	f7fe fd09 	bl	8010fa6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	6812      	ldr	r2, [r2, #0]
 80125a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80125a6:	f043 0301 	orr.w	r3, r3, #1
 80125aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6a1b      	ldr	r3, [r3, #32]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d005      	beq.n	80125c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80125b4:	4b04      	ldr	r3, [pc, #16]	; (80125c8 <HAL_PCD_SuspendCallback+0x48>)
 80125b6:	691b      	ldr	r3, [r3, #16]
 80125b8:	4a03      	ldr	r2, [pc, #12]	; (80125c8 <HAL_PCD_SuspendCallback+0x48>)
 80125ba:	f043 0306 	orr.w	r3, r3, #6
 80125be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80125c0:	bf00      	nop
 80125c2:	3708      	adds	r7, #8
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	e000ed00 	.word	0xe000ed00

080125cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80125da:	4618      	mov	r0, r3
 80125dc:	f7fe fcf9 	bl	8010fd2 <USBD_LL_Resume>
}
 80125e0:	bf00      	nop
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	460b      	mov	r3, r1
 80125f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80125fa:	78fa      	ldrb	r2, [r7, #3]
 80125fc:	4611      	mov	r1, r2
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fe fd51 	bl	80110a6 <USBD_LL_IsoOUTIncomplete>
}
 8012604:	bf00      	nop
 8012606:	3708      	adds	r7, #8
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}

0801260c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	460b      	mov	r3, r1
 8012616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801261e:	78fa      	ldrb	r2, [r7, #3]
 8012620:	4611      	mov	r1, r2
 8012622:	4618      	mov	r0, r3
 8012624:	f7fe fd0d 	bl	8011042 <USBD_LL_IsoINIncomplete>
}
 8012628:	bf00      	nop
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801263e:	4618      	mov	r0, r3
 8012640:	f7fe fd63 	bl	801110a <USBD_LL_DevConnected>
}
 8012644:	bf00      	nop
 8012646:	3708      	adds	r7, #8
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801265a:	4618      	mov	r0, r3
 801265c:	f7fe fd60 	bl	8011120 <USBD_LL_DevDisconnected>
}
 8012660:	bf00      	nop
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d13c      	bne.n	80126f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012678:	4a20      	ldr	r2, [pc, #128]	; (80126fc <USBD_LL_Init+0x94>)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4a1e      	ldr	r2, [pc, #120]	; (80126fc <USBD_LL_Init+0x94>)
 8012684:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012688:	4b1c      	ldr	r3, [pc, #112]	; (80126fc <USBD_LL_Init+0x94>)
 801268a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801268e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012690:	4b1a      	ldr	r3, [pc, #104]	; (80126fc <USBD_LL_Init+0x94>)
 8012692:	2204      	movs	r2, #4
 8012694:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012696:	4b19      	ldr	r3, [pc, #100]	; (80126fc <USBD_LL_Init+0x94>)
 8012698:	2202      	movs	r2, #2
 801269a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801269c:	4b17      	ldr	r3, [pc, #92]	; (80126fc <USBD_LL_Init+0x94>)
 801269e:	2200      	movs	r2, #0
 80126a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80126a2:	4b16      	ldr	r3, [pc, #88]	; (80126fc <USBD_LL_Init+0x94>)
 80126a4:	2202      	movs	r2, #2
 80126a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80126a8:	4b14      	ldr	r3, [pc, #80]	; (80126fc <USBD_LL_Init+0x94>)
 80126aa:	2200      	movs	r2, #0
 80126ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80126ae:	4b13      	ldr	r3, [pc, #76]	; (80126fc <USBD_LL_Init+0x94>)
 80126b0:	2200      	movs	r2, #0
 80126b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80126b4:	4b11      	ldr	r3, [pc, #68]	; (80126fc <USBD_LL_Init+0x94>)
 80126b6:	2200      	movs	r2, #0
 80126b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80126ba:	4b10      	ldr	r3, [pc, #64]	; (80126fc <USBD_LL_Init+0x94>)
 80126bc:	2200      	movs	r2, #0
 80126be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80126c0:	4b0e      	ldr	r3, [pc, #56]	; (80126fc <USBD_LL_Init+0x94>)
 80126c2:	2200      	movs	r2, #0
 80126c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80126c6:	480d      	ldr	r0, [pc, #52]	; (80126fc <USBD_LL_Init+0x94>)
 80126c8:	f7f1 fb41 	bl	8003d4e <HAL_PCD_Init>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d001      	beq.n	80126d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80126d2:	f7ee fd31 	bl	8001138 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80126d6:	2180      	movs	r1, #128	; 0x80
 80126d8:	4808      	ldr	r0, [pc, #32]	; (80126fc <USBD_LL_Init+0x94>)
 80126da:	f7f2 fd98 	bl	800520e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80126de:	2240      	movs	r2, #64	; 0x40
 80126e0:	2100      	movs	r1, #0
 80126e2:	4806      	ldr	r0, [pc, #24]	; (80126fc <USBD_LL_Init+0x94>)
 80126e4:	f7f2 fd4c 	bl	8005180 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80126e8:	2280      	movs	r2, #128	; 0x80
 80126ea:	2101      	movs	r1, #1
 80126ec:	4803      	ldr	r0, [pc, #12]	; (80126fc <USBD_LL_Init+0x94>)
 80126ee:	f7f2 fd47 	bl	8005180 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	20001ecc 	.word	0x20001ecc

08012700 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012708:	2300      	movs	r3, #0
 801270a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801270c:	2300      	movs	r3, #0
 801270e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012716:	4618      	mov	r0, r3
 8012718:	f7f1 fc36 	bl	8003f88 <HAL_PCD_Start>
 801271c:	4603      	mov	r3, r0
 801271e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012720:	7bfb      	ldrb	r3, [r7, #15]
 8012722:	4618      	mov	r0, r3
 8012724:	f000 f942 	bl	80129ac <USBD_Get_USB_Status>
 8012728:	4603      	mov	r3, r0
 801272a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801272c:	7bbb      	ldrb	r3, [r7, #14]
}
 801272e:	4618      	mov	r0, r3
 8012730:	3710      	adds	r7, #16
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}

08012736 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012736:	b580      	push	{r7, lr}
 8012738:	b084      	sub	sp, #16
 801273a:	af00      	add	r7, sp, #0
 801273c:	6078      	str	r0, [r7, #4]
 801273e:	4608      	mov	r0, r1
 8012740:	4611      	mov	r1, r2
 8012742:	461a      	mov	r2, r3
 8012744:	4603      	mov	r3, r0
 8012746:	70fb      	strb	r3, [r7, #3]
 8012748:	460b      	mov	r3, r1
 801274a:	70bb      	strb	r3, [r7, #2]
 801274c:	4613      	mov	r3, r2
 801274e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012750:	2300      	movs	r3, #0
 8012752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012754:	2300      	movs	r3, #0
 8012756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801275e:	78bb      	ldrb	r3, [r7, #2]
 8012760:	883a      	ldrh	r2, [r7, #0]
 8012762:	78f9      	ldrb	r1, [r7, #3]
 8012764:	f7f2 f907 	bl	8004976 <HAL_PCD_EP_Open>
 8012768:	4603      	mov	r3, r0
 801276a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801276c:	7bfb      	ldrb	r3, [r7, #15]
 801276e:	4618      	mov	r0, r3
 8012770:	f000 f91c 	bl	80129ac <USBD_Get_USB_Status>
 8012774:	4603      	mov	r3, r0
 8012776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012778:	7bbb      	ldrb	r3, [r7, #14]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3710      	adds	r7, #16
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}

08012782 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012782:	b580      	push	{r7, lr}
 8012784:	b084      	sub	sp, #16
 8012786:	af00      	add	r7, sp, #0
 8012788:	6078      	str	r0, [r7, #4]
 801278a:	460b      	mov	r3, r1
 801278c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801278e:	2300      	movs	r3, #0
 8012790:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012792:	2300      	movs	r3, #0
 8012794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801279c:	78fa      	ldrb	r2, [r7, #3]
 801279e:	4611      	mov	r1, r2
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7f2 f950 	bl	8004a46 <HAL_PCD_EP_Close>
 80127a6:	4603      	mov	r3, r0
 80127a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127aa:	7bfb      	ldrb	r3, [r7, #15]
 80127ac:	4618      	mov	r0, r3
 80127ae:	f000 f8fd 	bl	80129ac <USBD_Get_USB_Status>
 80127b2:	4603      	mov	r3, r0
 80127b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3710      	adds	r7, #16
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	460b      	mov	r3, r1
 80127ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127cc:	2300      	movs	r3, #0
 80127ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127d0:	2300      	movs	r3, #0
 80127d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80127da:	78fa      	ldrb	r2, [r7, #3]
 80127dc:	4611      	mov	r1, r2
 80127de:	4618      	mov	r0, r3
 80127e0:	f7f2 fa28 	bl	8004c34 <HAL_PCD_EP_SetStall>
 80127e4:	4603      	mov	r3, r0
 80127e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127e8:	7bfb      	ldrb	r3, [r7, #15]
 80127ea:	4618      	mov	r0, r3
 80127ec:	f000 f8de 	bl	80129ac <USBD_Get_USB_Status>
 80127f0:	4603      	mov	r3, r0
 80127f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3710      	adds	r7, #16
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}

080127fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127fe:	b580      	push	{r7, lr}
 8012800:	b084      	sub	sp, #16
 8012802:	af00      	add	r7, sp, #0
 8012804:	6078      	str	r0, [r7, #4]
 8012806:	460b      	mov	r3, r1
 8012808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801280a:	2300      	movs	r3, #0
 801280c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801280e:	2300      	movs	r3, #0
 8012810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012818:	78fa      	ldrb	r2, [r7, #3]
 801281a:	4611      	mov	r1, r2
 801281c:	4618      	mov	r0, r3
 801281e:	f7f2 fa6d 	bl	8004cfc <HAL_PCD_EP_ClrStall>
 8012822:	4603      	mov	r3, r0
 8012824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012826:	7bfb      	ldrb	r3, [r7, #15]
 8012828:	4618      	mov	r0, r3
 801282a:	f000 f8bf 	bl	80129ac <USBD_Get_USB_Status>
 801282e:	4603      	mov	r3, r0
 8012830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012832:	7bbb      	ldrb	r3, [r7, #14]
}
 8012834:	4618      	mov	r0, r3
 8012836:	3710      	adds	r7, #16
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801283c:	b480      	push	{r7}
 801283e:	b085      	sub	sp, #20
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
 8012844:	460b      	mov	r3, r1
 8012846:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801284e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012854:	2b00      	cmp	r3, #0
 8012856:	da0b      	bge.n	8012870 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012858:	78fb      	ldrb	r3, [r7, #3]
 801285a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801285e:	68f9      	ldr	r1, [r7, #12]
 8012860:	4613      	mov	r3, r2
 8012862:	00db      	lsls	r3, r3, #3
 8012864:	4413      	add	r3, r2
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	440b      	add	r3, r1
 801286a:	333e      	adds	r3, #62	; 0x3e
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	e00b      	b.n	8012888 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012870:	78fb      	ldrb	r3, [r7, #3]
 8012872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012876:	68f9      	ldr	r1, [r7, #12]
 8012878:	4613      	mov	r3, r2
 801287a:	00db      	lsls	r3, r3, #3
 801287c:	4413      	add	r3, r2
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	440b      	add	r3, r1
 8012882:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012886:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012888:	4618      	mov	r0, r3
 801288a:	3714      	adds	r7, #20
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	460b      	mov	r3, r1
 801289e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128a0:	2300      	movs	r3, #0
 80128a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128a4:	2300      	movs	r3, #0
 80128a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80128ae:	78fa      	ldrb	r2, [r7, #3]
 80128b0:	4611      	mov	r1, r2
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7f2 f83a 	bl	800492c <HAL_PCD_SetAddress>
 80128b8:	4603      	mov	r3, r0
 80128ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128bc:	7bfb      	ldrb	r3, [r7, #15]
 80128be:	4618      	mov	r0, r3
 80128c0:	f000 f874 	bl	80129ac <USBD_Get_USB_Status>
 80128c4:	4603      	mov	r3, r0
 80128c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3710      	adds	r7, #16
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}

080128d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80128d2:	b580      	push	{r7, lr}
 80128d4:	b086      	sub	sp, #24
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	60f8      	str	r0, [r7, #12]
 80128da:	607a      	str	r2, [r7, #4]
 80128dc:	603b      	str	r3, [r7, #0]
 80128de:	460b      	mov	r3, r1
 80128e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128e2:	2300      	movs	r3, #0
 80128e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128e6:	2300      	movs	r3, #0
 80128e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80128f0:	7af9      	ldrb	r1, [r7, #11]
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	f7f2 f953 	bl	8004ba0 <HAL_PCD_EP_Transmit>
 80128fa:	4603      	mov	r3, r0
 80128fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128fe:	7dfb      	ldrb	r3, [r7, #23]
 8012900:	4618      	mov	r0, r3
 8012902:	f000 f853 	bl	80129ac <USBD_Get_USB_Status>
 8012906:	4603      	mov	r3, r0
 8012908:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801290a:	7dbb      	ldrb	r3, [r7, #22]
}
 801290c:	4618      	mov	r0, r3
 801290e:	3718      	adds	r7, #24
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b086      	sub	sp, #24
 8012918:	af00      	add	r7, sp, #0
 801291a:	60f8      	str	r0, [r7, #12]
 801291c:	607a      	str	r2, [r7, #4]
 801291e:	603b      	str	r3, [r7, #0]
 8012920:	460b      	mov	r3, r1
 8012922:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012924:	2300      	movs	r3, #0
 8012926:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012928:	2300      	movs	r3, #0
 801292a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012932:	7af9      	ldrb	r1, [r7, #11]
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	f7f2 f8cf 	bl	8004ada <HAL_PCD_EP_Receive>
 801293c:	4603      	mov	r3, r0
 801293e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012940:	7dfb      	ldrb	r3, [r7, #23]
 8012942:	4618      	mov	r0, r3
 8012944:	f000 f832 	bl	80129ac <USBD_Get_USB_Status>
 8012948:	4603      	mov	r3, r0
 801294a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801294c:	7dbb      	ldrb	r3, [r7, #22]
}
 801294e:	4618      	mov	r0, r3
 8012950:	3718      	adds	r7, #24
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}

08012956 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012956:	b580      	push	{r7, lr}
 8012958:	b082      	sub	sp, #8
 801295a:	af00      	add	r7, sp, #0
 801295c:	6078      	str	r0, [r7, #4]
 801295e:	460b      	mov	r3, r1
 8012960:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012968:	78fa      	ldrb	r2, [r7, #3]
 801296a:	4611      	mov	r1, r2
 801296c:	4618      	mov	r0, r3
 801296e:	f7f2 f8ff 	bl	8004b70 <HAL_PCD_EP_GetRxCount>
 8012972:	4603      	mov	r3, r0
}
 8012974:	4618      	mov	r0, r3
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012984:	4b03      	ldr	r3, [pc, #12]	; (8012994 <USBD_static_malloc+0x18>)
}
 8012986:	4618      	mov	r0, r3
 8012988:	370c      	adds	r7, #12
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	200023d8 	.word	0x200023d8

08012998 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]

}
 80129a0:	bf00      	nop
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr

080129ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b085      	sub	sp, #20
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	4603      	mov	r3, r0
 80129b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129b6:	2300      	movs	r3, #0
 80129b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80129ba:	79fb      	ldrb	r3, [r7, #7]
 80129bc:	2b03      	cmp	r3, #3
 80129be:	d817      	bhi.n	80129f0 <USBD_Get_USB_Status+0x44>
 80129c0:	a201      	add	r2, pc, #4	; (adr r2, 80129c8 <USBD_Get_USB_Status+0x1c>)
 80129c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129c6:	bf00      	nop
 80129c8:	080129d9 	.word	0x080129d9
 80129cc:	080129df 	.word	0x080129df
 80129d0:	080129e5 	.word	0x080129e5
 80129d4:	080129eb 	.word	0x080129eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80129d8:	2300      	movs	r3, #0
 80129da:	73fb      	strb	r3, [r7, #15]
    break;
 80129dc:	e00b      	b.n	80129f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80129de:	2303      	movs	r3, #3
 80129e0:	73fb      	strb	r3, [r7, #15]
    break;
 80129e2:	e008      	b.n	80129f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80129e4:	2301      	movs	r3, #1
 80129e6:	73fb      	strb	r3, [r7, #15]
    break;
 80129e8:	e005      	b.n	80129f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80129ea:	2303      	movs	r3, #3
 80129ec:	73fb      	strb	r3, [r7, #15]
    break;
 80129ee:	e002      	b.n	80129f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80129f0:	2303      	movs	r3, #3
 80129f2:	73fb      	strb	r3, [r7, #15]
    break;
 80129f4:	bf00      	nop
  }
  return usb_status;
 80129f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3714      	adds	r7, #20
 80129fc:	46bd      	mov	sp, r7
 80129fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a02:	4770      	bx	lr

08012a04 <__errno>:
 8012a04:	4b01      	ldr	r3, [pc, #4]	; (8012a0c <__errno+0x8>)
 8012a06:	6818      	ldr	r0, [r3, #0]
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	200003f4 	.word	0x200003f4

08012a10 <__libc_init_array>:
 8012a10:	b570      	push	{r4, r5, r6, lr}
 8012a12:	4d0d      	ldr	r5, [pc, #52]	; (8012a48 <__libc_init_array+0x38>)
 8012a14:	4c0d      	ldr	r4, [pc, #52]	; (8012a4c <__libc_init_array+0x3c>)
 8012a16:	1b64      	subs	r4, r4, r5
 8012a18:	10a4      	asrs	r4, r4, #2
 8012a1a:	2600      	movs	r6, #0
 8012a1c:	42a6      	cmp	r6, r4
 8012a1e:	d109      	bne.n	8012a34 <__libc_init_array+0x24>
 8012a20:	4d0b      	ldr	r5, [pc, #44]	; (8012a50 <__libc_init_array+0x40>)
 8012a22:	4c0c      	ldr	r4, [pc, #48]	; (8012a54 <__libc_init_array+0x44>)
 8012a24:	f000 fc96 	bl	8013354 <_init>
 8012a28:	1b64      	subs	r4, r4, r5
 8012a2a:	10a4      	asrs	r4, r4, #2
 8012a2c:	2600      	movs	r6, #0
 8012a2e:	42a6      	cmp	r6, r4
 8012a30:	d105      	bne.n	8012a3e <__libc_init_array+0x2e>
 8012a32:	bd70      	pop	{r4, r5, r6, pc}
 8012a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a38:	4798      	blx	r3
 8012a3a:	3601      	adds	r6, #1
 8012a3c:	e7ee      	b.n	8012a1c <__libc_init_array+0xc>
 8012a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a42:	4798      	blx	r3
 8012a44:	3601      	adds	r6, #1
 8012a46:	e7f2      	b.n	8012a2e <__libc_init_array+0x1e>
 8012a48:	08013c98 	.word	0x08013c98
 8012a4c:	08013c98 	.word	0x08013c98
 8012a50:	08013c98 	.word	0x08013c98
 8012a54:	08013c9c 	.word	0x08013c9c

08012a58 <memcpy>:
 8012a58:	440a      	add	r2, r1
 8012a5a:	4291      	cmp	r1, r2
 8012a5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012a60:	d100      	bne.n	8012a64 <memcpy+0xc>
 8012a62:	4770      	bx	lr
 8012a64:	b510      	push	{r4, lr}
 8012a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a6e:	4291      	cmp	r1, r2
 8012a70:	d1f9      	bne.n	8012a66 <memcpy+0xe>
 8012a72:	bd10      	pop	{r4, pc}

08012a74 <memset>:
 8012a74:	4402      	add	r2, r0
 8012a76:	4603      	mov	r3, r0
 8012a78:	4293      	cmp	r3, r2
 8012a7a:	d100      	bne.n	8012a7e <memset+0xa>
 8012a7c:	4770      	bx	lr
 8012a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8012a82:	e7f9      	b.n	8012a78 <memset+0x4>

08012a84 <siprintf>:
 8012a84:	b40e      	push	{r1, r2, r3}
 8012a86:	b500      	push	{lr}
 8012a88:	b09c      	sub	sp, #112	; 0x70
 8012a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8012a8c:	9002      	str	r0, [sp, #8]
 8012a8e:	9006      	str	r0, [sp, #24]
 8012a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012a94:	4809      	ldr	r0, [pc, #36]	; (8012abc <siprintf+0x38>)
 8012a96:	9107      	str	r1, [sp, #28]
 8012a98:	9104      	str	r1, [sp, #16]
 8012a9a:	4909      	ldr	r1, [pc, #36]	; (8012ac0 <siprintf+0x3c>)
 8012a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aa0:	9105      	str	r1, [sp, #20]
 8012aa2:	6800      	ldr	r0, [r0, #0]
 8012aa4:	9301      	str	r3, [sp, #4]
 8012aa6:	a902      	add	r1, sp, #8
 8012aa8:	f000 f870 	bl	8012b8c <_svfiprintf_r>
 8012aac:	9b02      	ldr	r3, [sp, #8]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	701a      	strb	r2, [r3, #0]
 8012ab2:	b01c      	add	sp, #112	; 0x70
 8012ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ab8:	b003      	add	sp, #12
 8012aba:	4770      	bx	lr
 8012abc:	200003f4 	.word	0x200003f4
 8012ac0:	ffff0208 	.word	0xffff0208

08012ac4 <strcpy>:
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012aca:	f803 2b01 	strb.w	r2, [r3], #1
 8012ace:	2a00      	cmp	r2, #0
 8012ad0:	d1f9      	bne.n	8012ac6 <strcpy+0x2>
 8012ad2:	4770      	bx	lr

08012ad4 <__ssputs_r>:
 8012ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ad8:	688e      	ldr	r6, [r1, #8]
 8012ada:	429e      	cmp	r6, r3
 8012adc:	4682      	mov	sl, r0
 8012ade:	460c      	mov	r4, r1
 8012ae0:	4690      	mov	r8, r2
 8012ae2:	461f      	mov	r7, r3
 8012ae4:	d838      	bhi.n	8012b58 <__ssputs_r+0x84>
 8012ae6:	898a      	ldrh	r2, [r1, #12]
 8012ae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012aec:	d032      	beq.n	8012b54 <__ssputs_r+0x80>
 8012aee:	6825      	ldr	r5, [r4, #0]
 8012af0:	6909      	ldr	r1, [r1, #16]
 8012af2:	eba5 0901 	sub.w	r9, r5, r1
 8012af6:	6965      	ldr	r5, [r4, #20]
 8012af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012afc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b00:	3301      	adds	r3, #1
 8012b02:	444b      	add	r3, r9
 8012b04:	106d      	asrs	r5, r5, #1
 8012b06:	429d      	cmp	r5, r3
 8012b08:	bf38      	it	cc
 8012b0a:	461d      	movcc	r5, r3
 8012b0c:	0553      	lsls	r3, r2, #21
 8012b0e:	d531      	bpl.n	8012b74 <__ssputs_r+0xa0>
 8012b10:	4629      	mov	r1, r5
 8012b12:	f000 fb55 	bl	80131c0 <_malloc_r>
 8012b16:	4606      	mov	r6, r0
 8012b18:	b950      	cbnz	r0, 8012b30 <__ssputs_r+0x5c>
 8012b1a:	230c      	movs	r3, #12
 8012b1c:	f8ca 3000 	str.w	r3, [sl]
 8012b20:	89a3      	ldrh	r3, [r4, #12]
 8012b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b26:	81a3      	strh	r3, [r4, #12]
 8012b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b30:	6921      	ldr	r1, [r4, #16]
 8012b32:	464a      	mov	r2, r9
 8012b34:	f7ff ff90 	bl	8012a58 <memcpy>
 8012b38:	89a3      	ldrh	r3, [r4, #12]
 8012b3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b42:	81a3      	strh	r3, [r4, #12]
 8012b44:	6126      	str	r6, [r4, #16]
 8012b46:	6165      	str	r5, [r4, #20]
 8012b48:	444e      	add	r6, r9
 8012b4a:	eba5 0509 	sub.w	r5, r5, r9
 8012b4e:	6026      	str	r6, [r4, #0]
 8012b50:	60a5      	str	r5, [r4, #8]
 8012b52:	463e      	mov	r6, r7
 8012b54:	42be      	cmp	r6, r7
 8012b56:	d900      	bls.n	8012b5a <__ssputs_r+0x86>
 8012b58:	463e      	mov	r6, r7
 8012b5a:	6820      	ldr	r0, [r4, #0]
 8012b5c:	4632      	mov	r2, r6
 8012b5e:	4641      	mov	r1, r8
 8012b60:	f000 faa8 	bl	80130b4 <memmove>
 8012b64:	68a3      	ldr	r3, [r4, #8]
 8012b66:	1b9b      	subs	r3, r3, r6
 8012b68:	60a3      	str	r3, [r4, #8]
 8012b6a:	6823      	ldr	r3, [r4, #0]
 8012b6c:	4433      	add	r3, r6
 8012b6e:	6023      	str	r3, [r4, #0]
 8012b70:	2000      	movs	r0, #0
 8012b72:	e7db      	b.n	8012b2c <__ssputs_r+0x58>
 8012b74:	462a      	mov	r2, r5
 8012b76:	f000 fb97 	bl	80132a8 <_realloc_r>
 8012b7a:	4606      	mov	r6, r0
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	d1e1      	bne.n	8012b44 <__ssputs_r+0x70>
 8012b80:	6921      	ldr	r1, [r4, #16]
 8012b82:	4650      	mov	r0, sl
 8012b84:	f000 fab0 	bl	80130e8 <_free_r>
 8012b88:	e7c7      	b.n	8012b1a <__ssputs_r+0x46>
	...

08012b8c <_svfiprintf_r>:
 8012b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b90:	4698      	mov	r8, r3
 8012b92:	898b      	ldrh	r3, [r1, #12]
 8012b94:	061b      	lsls	r3, r3, #24
 8012b96:	b09d      	sub	sp, #116	; 0x74
 8012b98:	4607      	mov	r7, r0
 8012b9a:	460d      	mov	r5, r1
 8012b9c:	4614      	mov	r4, r2
 8012b9e:	d50e      	bpl.n	8012bbe <_svfiprintf_r+0x32>
 8012ba0:	690b      	ldr	r3, [r1, #16]
 8012ba2:	b963      	cbnz	r3, 8012bbe <_svfiprintf_r+0x32>
 8012ba4:	2140      	movs	r1, #64	; 0x40
 8012ba6:	f000 fb0b 	bl	80131c0 <_malloc_r>
 8012baa:	6028      	str	r0, [r5, #0]
 8012bac:	6128      	str	r0, [r5, #16]
 8012bae:	b920      	cbnz	r0, 8012bba <_svfiprintf_r+0x2e>
 8012bb0:	230c      	movs	r3, #12
 8012bb2:	603b      	str	r3, [r7, #0]
 8012bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bb8:	e0d1      	b.n	8012d5e <_svfiprintf_r+0x1d2>
 8012bba:	2340      	movs	r3, #64	; 0x40
 8012bbc:	616b      	str	r3, [r5, #20]
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8012bc2:	2320      	movs	r3, #32
 8012bc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bcc:	2330      	movs	r3, #48	; 0x30
 8012bce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012d78 <_svfiprintf_r+0x1ec>
 8012bd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bd6:	f04f 0901 	mov.w	r9, #1
 8012bda:	4623      	mov	r3, r4
 8012bdc:	469a      	mov	sl, r3
 8012bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012be2:	b10a      	cbz	r2, 8012be8 <_svfiprintf_r+0x5c>
 8012be4:	2a25      	cmp	r2, #37	; 0x25
 8012be6:	d1f9      	bne.n	8012bdc <_svfiprintf_r+0x50>
 8012be8:	ebba 0b04 	subs.w	fp, sl, r4
 8012bec:	d00b      	beq.n	8012c06 <_svfiprintf_r+0x7a>
 8012bee:	465b      	mov	r3, fp
 8012bf0:	4622      	mov	r2, r4
 8012bf2:	4629      	mov	r1, r5
 8012bf4:	4638      	mov	r0, r7
 8012bf6:	f7ff ff6d 	bl	8012ad4 <__ssputs_r>
 8012bfa:	3001      	adds	r0, #1
 8012bfc:	f000 80aa 	beq.w	8012d54 <_svfiprintf_r+0x1c8>
 8012c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c02:	445a      	add	r2, fp
 8012c04:	9209      	str	r2, [sp, #36]	; 0x24
 8012c06:	f89a 3000 	ldrb.w	r3, [sl]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f000 80a2 	beq.w	8012d54 <_svfiprintf_r+0x1c8>
 8012c10:	2300      	movs	r3, #0
 8012c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c1a:	f10a 0a01 	add.w	sl, sl, #1
 8012c1e:	9304      	str	r3, [sp, #16]
 8012c20:	9307      	str	r3, [sp, #28]
 8012c22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c26:	931a      	str	r3, [sp, #104]	; 0x68
 8012c28:	4654      	mov	r4, sl
 8012c2a:	2205      	movs	r2, #5
 8012c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c30:	4851      	ldr	r0, [pc, #324]	; (8012d78 <_svfiprintf_r+0x1ec>)
 8012c32:	f7ed fad5 	bl	80001e0 <memchr>
 8012c36:	9a04      	ldr	r2, [sp, #16]
 8012c38:	b9d8      	cbnz	r0, 8012c72 <_svfiprintf_r+0xe6>
 8012c3a:	06d0      	lsls	r0, r2, #27
 8012c3c:	bf44      	itt	mi
 8012c3e:	2320      	movmi	r3, #32
 8012c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c44:	0711      	lsls	r1, r2, #28
 8012c46:	bf44      	itt	mi
 8012c48:	232b      	movmi	r3, #43	; 0x2b
 8012c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8012c52:	2b2a      	cmp	r3, #42	; 0x2a
 8012c54:	d015      	beq.n	8012c82 <_svfiprintf_r+0xf6>
 8012c56:	9a07      	ldr	r2, [sp, #28]
 8012c58:	4654      	mov	r4, sl
 8012c5a:	2000      	movs	r0, #0
 8012c5c:	f04f 0c0a 	mov.w	ip, #10
 8012c60:	4621      	mov	r1, r4
 8012c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c66:	3b30      	subs	r3, #48	; 0x30
 8012c68:	2b09      	cmp	r3, #9
 8012c6a:	d94e      	bls.n	8012d0a <_svfiprintf_r+0x17e>
 8012c6c:	b1b0      	cbz	r0, 8012c9c <_svfiprintf_r+0x110>
 8012c6e:	9207      	str	r2, [sp, #28]
 8012c70:	e014      	b.n	8012c9c <_svfiprintf_r+0x110>
 8012c72:	eba0 0308 	sub.w	r3, r0, r8
 8012c76:	fa09 f303 	lsl.w	r3, r9, r3
 8012c7a:	4313      	orrs	r3, r2
 8012c7c:	9304      	str	r3, [sp, #16]
 8012c7e:	46a2      	mov	sl, r4
 8012c80:	e7d2      	b.n	8012c28 <_svfiprintf_r+0x9c>
 8012c82:	9b03      	ldr	r3, [sp, #12]
 8012c84:	1d19      	adds	r1, r3, #4
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	9103      	str	r1, [sp, #12]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	bfbb      	ittet	lt
 8012c8e:	425b      	neglt	r3, r3
 8012c90:	f042 0202 	orrlt.w	r2, r2, #2
 8012c94:	9307      	strge	r3, [sp, #28]
 8012c96:	9307      	strlt	r3, [sp, #28]
 8012c98:	bfb8      	it	lt
 8012c9a:	9204      	strlt	r2, [sp, #16]
 8012c9c:	7823      	ldrb	r3, [r4, #0]
 8012c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8012ca0:	d10c      	bne.n	8012cbc <_svfiprintf_r+0x130>
 8012ca2:	7863      	ldrb	r3, [r4, #1]
 8012ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8012ca6:	d135      	bne.n	8012d14 <_svfiprintf_r+0x188>
 8012ca8:	9b03      	ldr	r3, [sp, #12]
 8012caa:	1d1a      	adds	r2, r3, #4
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	9203      	str	r2, [sp, #12]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	bfb8      	it	lt
 8012cb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012cb8:	3402      	adds	r4, #2
 8012cba:	9305      	str	r3, [sp, #20]
 8012cbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012d88 <_svfiprintf_r+0x1fc>
 8012cc0:	7821      	ldrb	r1, [r4, #0]
 8012cc2:	2203      	movs	r2, #3
 8012cc4:	4650      	mov	r0, sl
 8012cc6:	f7ed fa8b 	bl	80001e0 <memchr>
 8012cca:	b140      	cbz	r0, 8012cde <_svfiprintf_r+0x152>
 8012ccc:	2340      	movs	r3, #64	; 0x40
 8012cce:	eba0 000a 	sub.w	r0, r0, sl
 8012cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8012cd6:	9b04      	ldr	r3, [sp, #16]
 8012cd8:	4303      	orrs	r3, r0
 8012cda:	3401      	adds	r4, #1
 8012cdc:	9304      	str	r3, [sp, #16]
 8012cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ce2:	4826      	ldr	r0, [pc, #152]	; (8012d7c <_svfiprintf_r+0x1f0>)
 8012ce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ce8:	2206      	movs	r2, #6
 8012cea:	f7ed fa79 	bl	80001e0 <memchr>
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d038      	beq.n	8012d64 <_svfiprintf_r+0x1d8>
 8012cf2:	4b23      	ldr	r3, [pc, #140]	; (8012d80 <_svfiprintf_r+0x1f4>)
 8012cf4:	bb1b      	cbnz	r3, 8012d3e <_svfiprintf_r+0x1b2>
 8012cf6:	9b03      	ldr	r3, [sp, #12]
 8012cf8:	3307      	adds	r3, #7
 8012cfa:	f023 0307 	bic.w	r3, r3, #7
 8012cfe:	3308      	adds	r3, #8
 8012d00:	9303      	str	r3, [sp, #12]
 8012d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d04:	4433      	add	r3, r6
 8012d06:	9309      	str	r3, [sp, #36]	; 0x24
 8012d08:	e767      	b.n	8012bda <_svfiprintf_r+0x4e>
 8012d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d0e:	460c      	mov	r4, r1
 8012d10:	2001      	movs	r0, #1
 8012d12:	e7a5      	b.n	8012c60 <_svfiprintf_r+0xd4>
 8012d14:	2300      	movs	r3, #0
 8012d16:	3401      	adds	r4, #1
 8012d18:	9305      	str	r3, [sp, #20]
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	f04f 0c0a 	mov.w	ip, #10
 8012d20:	4620      	mov	r0, r4
 8012d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d26:	3a30      	subs	r2, #48	; 0x30
 8012d28:	2a09      	cmp	r2, #9
 8012d2a:	d903      	bls.n	8012d34 <_svfiprintf_r+0x1a8>
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d0c5      	beq.n	8012cbc <_svfiprintf_r+0x130>
 8012d30:	9105      	str	r1, [sp, #20]
 8012d32:	e7c3      	b.n	8012cbc <_svfiprintf_r+0x130>
 8012d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d38:	4604      	mov	r4, r0
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	e7f0      	b.n	8012d20 <_svfiprintf_r+0x194>
 8012d3e:	ab03      	add	r3, sp, #12
 8012d40:	9300      	str	r3, [sp, #0]
 8012d42:	462a      	mov	r2, r5
 8012d44:	4b0f      	ldr	r3, [pc, #60]	; (8012d84 <_svfiprintf_r+0x1f8>)
 8012d46:	a904      	add	r1, sp, #16
 8012d48:	4638      	mov	r0, r7
 8012d4a:	f3af 8000 	nop.w
 8012d4e:	1c42      	adds	r2, r0, #1
 8012d50:	4606      	mov	r6, r0
 8012d52:	d1d6      	bne.n	8012d02 <_svfiprintf_r+0x176>
 8012d54:	89ab      	ldrh	r3, [r5, #12]
 8012d56:	065b      	lsls	r3, r3, #25
 8012d58:	f53f af2c 	bmi.w	8012bb4 <_svfiprintf_r+0x28>
 8012d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d5e:	b01d      	add	sp, #116	; 0x74
 8012d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d64:	ab03      	add	r3, sp, #12
 8012d66:	9300      	str	r3, [sp, #0]
 8012d68:	462a      	mov	r2, r5
 8012d6a:	4b06      	ldr	r3, [pc, #24]	; (8012d84 <_svfiprintf_r+0x1f8>)
 8012d6c:	a904      	add	r1, sp, #16
 8012d6e:	4638      	mov	r0, r7
 8012d70:	f000 f87a 	bl	8012e68 <_printf_i>
 8012d74:	e7eb      	b.n	8012d4e <_svfiprintf_r+0x1c2>
 8012d76:	bf00      	nop
 8012d78:	08013c5c 	.word	0x08013c5c
 8012d7c:	08013c66 	.word	0x08013c66
 8012d80:	00000000 	.word	0x00000000
 8012d84:	08012ad5 	.word	0x08012ad5
 8012d88:	08013c62 	.word	0x08013c62

08012d8c <_printf_common>:
 8012d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d90:	4616      	mov	r6, r2
 8012d92:	4699      	mov	r9, r3
 8012d94:	688a      	ldr	r2, [r1, #8]
 8012d96:	690b      	ldr	r3, [r1, #16]
 8012d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	bfb8      	it	lt
 8012da0:	4613      	movlt	r3, r2
 8012da2:	6033      	str	r3, [r6, #0]
 8012da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012da8:	4607      	mov	r7, r0
 8012daa:	460c      	mov	r4, r1
 8012dac:	b10a      	cbz	r2, 8012db2 <_printf_common+0x26>
 8012dae:	3301      	adds	r3, #1
 8012db0:	6033      	str	r3, [r6, #0]
 8012db2:	6823      	ldr	r3, [r4, #0]
 8012db4:	0699      	lsls	r1, r3, #26
 8012db6:	bf42      	ittt	mi
 8012db8:	6833      	ldrmi	r3, [r6, #0]
 8012dba:	3302      	addmi	r3, #2
 8012dbc:	6033      	strmi	r3, [r6, #0]
 8012dbe:	6825      	ldr	r5, [r4, #0]
 8012dc0:	f015 0506 	ands.w	r5, r5, #6
 8012dc4:	d106      	bne.n	8012dd4 <_printf_common+0x48>
 8012dc6:	f104 0a19 	add.w	sl, r4, #25
 8012dca:	68e3      	ldr	r3, [r4, #12]
 8012dcc:	6832      	ldr	r2, [r6, #0]
 8012dce:	1a9b      	subs	r3, r3, r2
 8012dd0:	42ab      	cmp	r3, r5
 8012dd2:	dc26      	bgt.n	8012e22 <_printf_common+0x96>
 8012dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012dd8:	1e13      	subs	r3, r2, #0
 8012dda:	6822      	ldr	r2, [r4, #0]
 8012ddc:	bf18      	it	ne
 8012dde:	2301      	movne	r3, #1
 8012de0:	0692      	lsls	r2, r2, #26
 8012de2:	d42b      	bmi.n	8012e3c <_printf_common+0xb0>
 8012de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012de8:	4649      	mov	r1, r9
 8012dea:	4638      	mov	r0, r7
 8012dec:	47c0      	blx	r8
 8012dee:	3001      	adds	r0, #1
 8012df0:	d01e      	beq.n	8012e30 <_printf_common+0xa4>
 8012df2:	6823      	ldr	r3, [r4, #0]
 8012df4:	68e5      	ldr	r5, [r4, #12]
 8012df6:	6832      	ldr	r2, [r6, #0]
 8012df8:	f003 0306 	and.w	r3, r3, #6
 8012dfc:	2b04      	cmp	r3, #4
 8012dfe:	bf08      	it	eq
 8012e00:	1aad      	subeq	r5, r5, r2
 8012e02:	68a3      	ldr	r3, [r4, #8]
 8012e04:	6922      	ldr	r2, [r4, #16]
 8012e06:	bf0c      	ite	eq
 8012e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e0c:	2500      	movne	r5, #0
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	bfc4      	itt	gt
 8012e12:	1a9b      	subgt	r3, r3, r2
 8012e14:	18ed      	addgt	r5, r5, r3
 8012e16:	2600      	movs	r6, #0
 8012e18:	341a      	adds	r4, #26
 8012e1a:	42b5      	cmp	r5, r6
 8012e1c:	d11a      	bne.n	8012e54 <_printf_common+0xc8>
 8012e1e:	2000      	movs	r0, #0
 8012e20:	e008      	b.n	8012e34 <_printf_common+0xa8>
 8012e22:	2301      	movs	r3, #1
 8012e24:	4652      	mov	r2, sl
 8012e26:	4649      	mov	r1, r9
 8012e28:	4638      	mov	r0, r7
 8012e2a:	47c0      	blx	r8
 8012e2c:	3001      	adds	r0, #1
 8012e2e:	d103      	bne.n	8012e38 <_printf_common+0xac>
 8012e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e38:	3501      	adds	r5, #1
 8012e3a:	e7c6      	b.n	8012dca <_printf_common+0x3e>
 8012e3c:	18e1      	adds	r1, r4, r3
 8012e3e:	1c5a      	adds	r2, r3, #1
 8012e40:	2030      	movs	r0, #48	; 0x30
 8012e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e46:	4422      	add	r2, r4
 8012e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e50:	3302      	adds	r3, #2
 8012e52:	e7c7      	b.n	8012de4 <_printf_common+0x58>
 8012e54:	2301      	movs	r3, #1
 8012e56:	4622      	mov	r2, r4
 8012e58:	4649      	mov	r1, r9
 8012e5a:	4638      	mov	r0, r7
 8012e5c:	47c0      	blx	r8
 8012e5e:	3001      	adds	r0, #1
 8012e60:	d0e6      	beq.n	8012e30 <_printf_common+0xa4>
 8012e62:	3601      	adds	r6, #1
 8012e64:	e7d9      	b.n	8012e1a <_printf_common+0x8e>
	...

08012e68 <_printf_i>:
 8012e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e6c:	7e0f      	ldrb	r7, [r1, #24]
 8012e6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012e70:	2f78      	cmp	r7, #120	; 0x78
 8012e72:	4691      	mov	r9, r2
 8012e74:	4680      	mov	r8, r0
 8012e76:	460c      	mov	r4, r1
 8012e78:	469a      	mov	sl, r3
 8012e7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012e7e:	d807      	bhi.n	8012e90 <_printf_i+0x28>
 8012e80:	2f62      	cmp	r7, #98	; 0x62
 8012e82:	d80a      	bhi.n	8012e9a <_printf_i+0x32>
 8012e84:	2f00      	cmp	r7, #0
 8012e86:	f000 80d8 	beq.w	801303a <_printf_i+0x1d2>
 8012e8a:	2f58      	cmp	r7, #88	; 0x58
 8012e8c:	f000 80a3 	beq.w	8012fd6 <_printf_i+0x16e>
 8012e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012e98:	e03a      	b.n	8012f10 <_printf_i+0xa8>
 8012e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012e9e:	2b15      	cmp	r3, #21
 8012ea0:	d8f6      	bhi.n	8012e90 <_printf_i+0x28>
 8012ea2:	a101      	add	r1, pc, #4	; (adr r1, 8012ea8 <_printf_i+0x40>)
 8012ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ea8:	08012f01 	.word	0x08012f01
 8012eac:	08012f15 	.word	0x08012f15
 8012eb0:	08012e91 	.word	0x08012e91
 8012eb4:	08012e91 	.word	0x08012e91
 8012eb8:	08012e91 	.word	0x08012e91
 8012ebc:	08012e91 	.word	0x08012e91
 8012ec0:	08012f15 	.word	0x08012f15
 8012ec4:	08012e91 	.word	0x08012e91
 8012ec8:	08012e91 	.word	0x08012e91
 8012ecc:	08012e91 	.word	0x08012e91
 8012ed0:	08012e91 	.word	0x08012e91
 8012ed4:	08013021 	.word	0x08013021
 8012ed8:	08012f45 	.word	0x08012f45
 8012edc:	08013003 	.word	0x08013003
 8012ee0:	08012e91 	.word	0x08012e91
 8012ee4:	08012e91 	.word	0x08012e91
 8012ee8:	08013043 	.word	0x08013043
 8012eec:	08012e91 	.word	0x08012e91
 8012ef0:	08012f45 	.word	0x08012f45
 8012ef4:	08012e91 	.word	0x08012e91
 8012ef8:	08012e91 	.word	0x08012e91
 8012efc:	0801300b 	.word	0x0801300b
 8012f00:	682b      	ldr	r3, [r5, #0]
 8012f02:	1d1a      	adds	r2, r3, #4
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	602a      	str	r2, [r5, #0]
 8012f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f10:	2301      	movs	r3, #1
 8012f12:	e0a3      	b.n	801305c <_printf_i+0x1f4>
 8012f14:	6820      	ldr	r0, [r4, #0]
 8012f16:	6829      	ldr	r1, [r5, #0]
 8012f18:	0606      	lsls	r6, r0, #24
 8012f1a:	f101 0304 	add.w	r3, r1, #4
 8012f1e:	d50a      	bpl.n	8012f36 <_printf_i+0xce>
 8012f20:	680e      	ldr	r6, [r1, #0]
 8012f22:	602b      	str	r3, [r5, #0]
 8012f24:	2e00      	cmp	r6, #0
 8012f26:	da03      	bge.n	8012f30 <_printf_i+0xc8>
 8012f28:	232d      	movs	r3, #45	; 0x2d
 8012f2a:	4276      	negs	r6, r6
 8012f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f30:	485e      	ldr	r0, [pc, #376]	; (80130ac <_printf_i+0x244>)
 8012f32:	230a      	movs	r3, #10
 8012f34:	e019      	b.n	8012f6a <_printf_i+0x102>
 8012f36:	680e      	ldr	r6, [r1, #0]
 8012f38:	602b      	str	r3, [r5, #0]
 8012f3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012f3e:	bf18      	it	ne
 8012f40:	b236      	sxthne	r6, r6
 8012f42:	e7ef      	b.n	8012f24 <_printf_i+0xbc>
 8012f44:	682b      	ldr	r3, [r5, #0]
 8012f46:	6820      	ldr	r0, [r4, #0]
 8012f48:	1d19      	adds	r1, r3, #4
 8012f4a:	6029      	str	r1, [r5, #0]
 8012f4c:	0601      	lsls	r1, r0, #24
 8012f4e:	d501      	bpl.n	8012f54 <_printf_i+0xec>
 8012f50:	681e      	ldr	r6, [r3, #0]
 8012f52:	e002      	b.n	8012f5a <_printf_i+0xf2>
 8012f54:	0646      	lsls	r6, r0, #25
 8012f56:	d5fb      	bpl.n	8012f50 <_printf_i+0xe8>
 8012f58:	881e      	ldrh	r6, [r3, #0]
 8012f5a:	4854      	ldr	r0, [pc, #336]	; (80130ac <_printf_i+0x244>)
 8012f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8012f5e:	bf0c      	ite	eq
 8012f60:	2308      	moveq	r3, #8
 8012f62:	230a      	movne	r3, #10
 8012f64:	2100      	movs	r1, #0
 8012f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f6a:	6865      	ldr	r5, [r4, #4]
 8012f6c:	60a5      	str	r5, [r4, #8]
 8012f6e:	2d00      	cmp	r5, #0
 8012f70:	bfa2      	ittt	ge
 8012f72:	6821      	ldrge	r1, [r4, #0]
 8012f74:	f021 0104 	bicge.w	r1, r1, #4
 8012f78:	6021      	strge	r1, [r4, #0]
 8012f7a:	b90e      	cbnz	r6, 8012f80 <_printf_i+0x118>
 8012f7c:	2d00      	cmp	r5, #0
 8012f7e:	d04d      	beq.n	801301c <_printf_i+0x1b4>
 8012f80:	4615      	mov	r5, r2
 8012f82:	fbb6 f1f3 	udiv	r1, r6, r3
 8012f86:	fb03 6711 	mls	r7, r3, r1, r6
 8012f8a:	5dc7      	ldrb	r7, [r0, r7]
 8012f8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012f90:	4637      	mov	r7, r6
 8012f92:	42bb      	cmp	r3, r7
 8012f94:	460e      	mov	r6, r1
 8012f96:	d9f4      	bls.n	8012f82 <_printf_i+0x11a>
 8012f98:	2b08      	cmp	r3, #8
 8012f9a:	d10b      	bne.n	8012fb4 <_printf_i+0x14c>
 8012f9c:	6823      	ldr	r3, [r4, #0]
 8012f9e:	07de      	lsls	r6, r3, #31
 8012fa0:	d508      	bpl.n	8012fb4 <_printf_i+0x14c>
 8012fa2:	6923      	ldr	r3, [r4, #16]
 8012fa4:	6861      	ldr	r1, [r4, #4]
 8012fa6:	4299      	cmp	r1, r3
 8012fa8:	bfde      	ittt	le
 8012faa:	2330      	movle	r3, #48	; 0x30
 8012fac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012fb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012fb4:	1b52      	subs	r2, r2, r5
 8012fb6:	6122      	str	r2, [r4, #16]
 8012fb8:	f8cd a000 	str.w	sl, [sp]
 8012fbc:	464b      	mov	r3, r9
 8012fbe:	aa03      	add	r2, sp, #12
 8012fc0:	4621      	mov	r1, r4
 8012fc2:	4640      	mov	r0, r8
 8012fc4:	f7ff fee2 	bl	8012d8c <_printf_common>
 8012fc8:	3001      	adds	r0, #1
 8012fca:	d14c      	bne.n	8013066 <_printf_i+0x1fe>
 8012fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fd0:	b004      	add	sp, #16
 8012fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd6:	4835      	ldr	r0, [pc, #212]	; (80130ac <_printf_i+0x244>)
 8012fd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012fdc:	6829      	ldr	r1, [r5, #0]
 8012fde:	6823      	ldr	r3, [r4, #0]
 8012fe0:	f851 6b04 	ldr.w	r6, [r1], #4
 8012fe4:	6029      	str	r1, [r5, #0]
 8012fe6:	061d      	lsls	r5, r3, #24
 8012fe8:	d514      	bpl.n	8013014 <_printf_i+0x1ac>
 8012fea:	07df      	lsls	r7, r3, #31
 8012fec:	bf44      	itt	mi
 8012fee:	f043 0320 	orrmi.w	r3, r3, #32
 8012ff2:	6023      	strmi	r3, [r4, #0]
 8012ff4:	b91e      	cbnz	r6, 8012ffe <_printf_i+0x196>
 8012ff6:	6823      	ldr	r3, [r4, #0]
 8012ff8:	f023 0320 	bic.w	r3, r3, #32
 8012ffc:	6023      	str	r3, [r4, #0]
 8012ffe:	2310      	movs	r3, #16
 8013000:	e7b0      	b.n	8012f64 <_printf_i+0xfc>
 8013002:	6823      	ldr	r3, [r4, #0]
 8013004:	f043 0320 	orr.w	r3, r3, #32
 8013008:	6023      	str	r3, [r4, #0]
 801300a:	2378      	movs	r3, #120	; 0x78
 801300c:	4828      	ldr	r0, [pc, #160]	; (80130b0 <_printf_i+0x248>)
 801300e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013012:	e7e3      	b.n	8012fdc <_printf_i+0x174>
 8013014:	0659      	lsls	r1, r3, #25
 8013016:	bf48      	it	mi
 8013018:	b2b6      	uxthmi	r6, r6
 801301a:	e7e6      	b.n	8012fea <_printf_i+0x182>
 801301c:	4615      	mov	r5, r2
 801301e:	e7bb      	b.n	8012f98 <_printf_i+0x130>
 8013020:	682b      	ldr	r3, [r5, #0]
 8013022:	6826      	ldr	r6, [r4, #0]
 8013024:	6961      	ldr	r1, [r4, #20]
 8013026:	1d18      	adds	r0, r3, #4
 8013028:	6028      	str	r0, [r5, #0]
 801302a:	0635      	lsls	r5, r6, #24
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	d501      	bpl.n	8013034 <_printf_i+0x1cc>
 8013030:	6019      	str	r1, [r3, #0]
 8013032:	e002      	b.n	801303a <_printf_i+0x1d2>
 8013034:	0670      	lsls	r0, r6, #25
 8013036:	d5fb      	bpl.n	8013030 <_printf_i+0x1c8>
 8013038:	8019      	strh	r1, [r3, #0]
 801303a:	2300      	movs	r3, #0
 801303c:	6123      	str	r3, [r4, #16]
 801303e:	4615      	mov	r5, r2
 8013040:	e7ba      	b.n	8012fb8 <_printf_i+0x150>
 8013042:	682b      	ldr	r3, [r5, #0]
 8013044:	1d1a      	adds	r2, r3, #4
 8013046:	602a      	str	r2, [r5, #0]
 8013048:	681d      	ldr	r5, [r3, #0]
 801304a:	6862      	ldr	r2, [r4, #4]
 801304c:	2100      	movs	r1, #0
 801304e:	4628      	mov	r0, r5
 8013050:	f7ed f8c6 	bl	80001e0 <memchr>
 8013054:	b108      	cbz	r0, 801305a <_printf_i+0x1f2>
 8013056:	1b40      	subs	r0, r0, r5
 8013058:	6060      	str	r0, [r4, #4]
 801305a:	6863      	ldr	r3, [r4, #4]
 801305c:	6123      	str	r3, [r4, #16]
 801305e:	2300      	movs	r3, #0
 8013060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013064:	e7a8      	b.n	8012fb8 <_printf_i+0x150>
 8013066:	6923      	ldr	r3, [r4, #16]
 8013068:	462a      	mov	r2, r5
 801306a:	4649      	mov	r1, r9
 801306c:	4640      	mov	r0, r8
 801306e:	47d0      	blx	sl
 8013070:	3001      	adds	r0, #1
 8013072:	d0ab      	beq.n	8012fcc <_printf_i+0x164>
 8013074:	6823      	ldr	r3, [r4, #0]
 8013076:	079b      	lsls	r3, r3, #30
 8013078:	d413      	bmi.n	80130a2 <_printf_i+0x23a>
 801307a:	68e0      	ldr	r0, [r4, #12]
 801307c:	9b03      	ldr	r3, [sp, #12]
 801307e:	4298      	cmp	r0, r3
 8013080:	bfb8      	it	lt
 8013082:	4618      	movlt	r0, r3
 8013084:	e7a4      	b.n	8012fd0 <_printf_i+0x168>
 8013086:	2301      	movs	r3, #1
 8013088:	4632      	mov	r2, r6
 801308a:	4649      	mov	r1, r9
 801308c:	4640      	mov	r0, r8
 801308e:	47d0      	blx	sl
 8013090:	3001      	adds	r0, #1
 8013092:	d09b      	beq.n	8012fcc <_printf_i+0x164>
 8013094:	3501      	adds	r5, #1
 8013096:	68e3      	ldr	r3, [r4, #12]
 8013098:	9903      	ldr	r1, [sp, #12]
 801309a:	1a5b      	subs	r3, r3, r1
 801309c:	42ab      	cmp	r3, r5
 801309e:	dcf2      	bgt.n	8013086 <_printf_i+0x21e>
 80130a0:	e7eb      	b.n	801307a <_printf_i+0x212>
 80130a2:	2500      	movs	r5, #0
 80130a4:	f104 0619 	add.w	r6, r4, #25
 80130a8:	e7f5      	b.n	8013096 <_printf_i+0x22e>
 80130aa:	bf00      	nop
 80130ac:	08013c6d 	.word	0x08013c6d
 80130b0:	08013c7e 	.word	0x08013c7e

080130b4 <memmove>:
 80130b4:	4288      	cmp	r0, r1
 80130b6:	b510      	push	{r4, lr}
 80130b8:	eb01 0402 	add.w	r4, r1, r2
 80130bc:	d902      	bls.n	80130c4 <memmove+0x10>
 80130be:	4284      	cmp	r4, r0
 80130c0:	4623      	mov	r3, r4
 80130c2:	d807      	bhi.n	80130d4 <memmove+0x20>
 80130c4:	1e43      	subs	r3, r0, #1
 80130c6:	42a1      	cmp	r1, r4
 80130c8:	d008      	beq.n	80130dc <memmove+0x28>
 80130ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130d2:	e7f8      	b.n	80130c6 <memmove+0x12>
 80130d4:	4402      	add	r2, r0
 80130d6:	4601      	mov	r1, r0
 80130d8:	428a      	cmp	r2, r1
 80130da:	d100      	bne.n	80130de <memmove+0x2a>
 80130dc:	bd10      	pop	{r4, pc}
 80130de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80130e6:	e7f7      	b.n	80130d8 <memmove+0x24>

080130e8 <_free_r>:
 80130e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130ea:	2900      	cmp	r1, #0
 80130ec:	d044      	beq.n	8013178 <_free_r+0x90>
 80130ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130f2:	9001      	str	r0, [sp, #4]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f1a1 0404 	sub.w	r4, r1, #4
 80130fa:	bfb8      	it	lt
 80130fc:	18e4      	addlt	r4, r4, r3
 80130fe:	f000 f913 	bl	8013328 <__malloc_lock>
 8013102:	4a1e      	ldr	r2, [pc, #120]	; (801317c <_free_r+0x94>)
 8013104:	9801      	ldr	r0, [sp, #4]
 8013106:	6813      	ldr	r3, [r2, #0]
 8013108:	b933      	cbnz	r3, 8013118 <_free_r+0x30>
 801310a:	6063      	str	r3, [r4, #4]
 801310c:	6014      	str	r4, [r2, #0]
 801310e:	b003      	add	sp, #12
 8013110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013114:	f000 b90e 	b.w	8013334 <__malloc_unlock>
 8013118:	42a3      	cmp	r3, r4
 801311a:	d908      	bls.n	801312e <_free_r+0x46>
 801311c:	6825      	ldr	r5, [r4, #0]
 801311e:	1961      	adds	r1, r4, r5
 8013120:	428b      	cmp	r3, r1
 8013122:	bf01      	itttt	eq
 8013124:	6819      	ldreq	r1, [r3, #0]
 8013126:	685b      	ldreq	r3, [r3, #4]
 8013128:	1949      	addeq	r1, r1, r5
 801312a:	6021      	streq	r1, [r4, #0]
 801312c:	e7ed      	b.n	801310a <_free_r+0x22>
 801312e:	461a      	mov	r2, r3
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	b10b      	cbz	r3, 8013138 <_free_r+0x50>
 8013134:	42a3      	cmp	r3, r4
 8013136:	d9fa      	bls.n	801312e <_free_r+0x46>
 8013138:	6811      	ldr	r1, [r2, #0]
 801313a:	1855      	adds	r5, r2, r1
 801313c:	42a5      	cmp	r5, r4
 801313e:	d10b      	bne.n	8013158 <_free_r+0x70>
 8013140:	6824      	ldr	r4, [r4, #0]
 8013142:	4421      	add	r1, r4
 8013144:	1854      	adds	r4, r2, r1
 8013146:	42a3      	cmp	r3, r4
 8013148:	6011      	str	r1, [r2, #0]
 801314a:	d1e0      	bne.n	801310e <_free_r+0x26>
 801314c:	681c      	ldr	r4, [r3, #0]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	6053      	str	r3, [r2, #4]
 8013152:	4421      	add	r1, r4
 8013154:	6011      	str	r1, [r2, #0]
 8013156:	e7da      	b.n	801310e <_free_r+0x26>
 8013158:	d902      	bls.n	8013160 <_free_r+0x78>
 801315a:	230c      	movs	r3, #12
 801315c:	6003      	str	r3, [r0, #0]
 801315e:	e7d6      	b.n	801310e <_free_r+0x26>
 8013160:	6825      	ldr	r5, [r4, #0]
 8013162:	1961      	adds	r1, r4, r5
 8013164:	428b      	cmp	r3, r1
 8013166:	bf04      	itt	eq
 8013168:	6819      	ldreq	r1, [r3, #0]
 801316a:	685b      	ldreq	r3, [r3, #4]
 801316c:	6063      	str	r3, [r4, #4]
 801316e:	bf04      	itt	eq
 8013170:	1949      	addeq	r1, r1, r5
 8013172:	6021      	streq	r1, [r4, #0]
 8013174:	6054      	str	r4, [r2, #4]
 8013176:	e7ca      	b.n	801310e <_free_r+0x26>
 8013178:	b003      	add	sp, #12
 801317a:	bd30      	pop	{r4, r5, pc}
 801317c:	200025f8 	.word	0x200025f8

08013180 <sbrk_aligned>:
 8013180:	b570      	push	{r4, r5, r6, lr}
 8013182:	4e0e      	ldr	r6, [pc, #56]	; (80131bc <sbrk_aligned+0x3c>)
 8013184:	460c      	mov	r4, r1
 8013186:	6831      	ldr	r1, [r6, #0]
 8013188:	4605      	mov	r5, r0
 801318a:	b911      	cbnz	r1, 8013192 <sbrk_aligned+0x12>
 801318c:	f000 f8bc 	bl	8013308 <_sbrk_r>
 8013190:	6030      	str	r0, [r6, #0]
 8013192:	4621      	mov	r1, r4
 8013194:	4628      	mov	r0, r5
 8013196:	f000 f8b7 	bl	8013308 <_sbrk_r>
 801319a:	1c43      	adds	r3, r0, #1
 801319c:	d00a      	beq.n	80131b4 <sbrk_aligned+0x34>
 801319e:	1cc4      	adds	r4, r0, #3
 80131a0:	f024 0403 	bic.w	r4, r4, #3
 80131a4:	42a0      	cmp	r0, r4
 80131a6:	d007      	beq.n	80131b8 <sbrk_aligned+0x38>
 80131a8:	1a21      	subs	r1, r4, r0
 80131aa:	4628      	mov	r0, r5
 80131ac:	f000 f8ac 	bl	8013308 <_sbrk_r>
 80131b0:	3001      	adds	r0, #1
 80131b2:	d101      	bne.n	80131b8 <sbrk_aligned+0x38>
 80131b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80131b8:	4620      	mov	r0, r4
 80131ba:	bd70      	pop	{r4, r5, r6, pc}
 80131bc:	200025fc 	.word	0x200025fc

080131c0 <_malloc_r>:
 80131c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c4:	1ccd      	adds	r5, r1, #3
 80131c6:	f025 0503 	bic.w	r5, r5, #3
 80131ca:	3508      	adds	r5, #8
 80131cc:	2d0c      	cmp	r5, #12
 80131ce:	bf38      	it	cc
 80131d0:	250c      	movcc	r5, #12
 80131d2:	2d00      	cmp	r5, #0
 80131d4:	4607      	mov	r7, r0
 80131d6:	db01      	blt.n	80131dc <_malloc_r+0x1c>
 80131d8:	42a9      	cmp	r1, r5
 80131da:	d905      	bls.n	80131e8 <_malloc_r+0x28>
 80131dc:	230c      	movs	r3, #12
 80131de:	603b      	str	r3, [r7, #0]
 80131e0:	2600      	movs	r6, #0
 80131e2:	4630      	mov	r0, r6
 80131e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e8:	4e2e      	ldr	r6, [pc, #184]	; (80132a4 <_malloc_r+0xe4>)
 80131ea:	f000 f89d 	bl	8013328 <__malloc_lock>
 80131ee:	6833      	ldr	r3, [r6, #0]
 80131f0:	461c      	mov	r4, r3
 80131f2:	bb34      	cbnz	r4, 8013242 <_malloc_r+0x82>
 80131f4:	4629      	mov	r1, r5
 80131f6:	4638      	mov	r0, r7
 80131f8:	f7ff ffc2 	bl	8013180 <sbrk_aligned>
 80131fc:	1c43      	adds	r3, r0, #1
 80131fe:	4604      	mov	r4, r0
 8013200:	d14d      	bne.n	801329e <_malloc_r+0xde>
 8013202:	6834      	ldr	r4, [r6, #0]
 8013204:	4626      	mov	r6, r4
 8013206:	2e00      	cmp	r6, #0
 8013208:	d140      	bne.n	801328c <_malloc_r+0xcc>
 801320a:	6823      	ldr	r3, [r4, #0]
 801320c:	4631      	mov	r1, r6
 801320e:	4638      	mov	r0, r7
 8013210:	eb04 0803 	add.w	r8, r4, r3
 8013214:	f000 f878 	bl	8013308 <_sbrk_r>
 8013218:	4580      	cmp	r8, r0
 801321a:	d13a      	bne.n	8013292 <_malloc_r+0xd2>
 801321c:	6821      	ldr	r1, [r4, #0]
 801321e:	3503      	adds	r5, #3
 8013220:	1a6d      	subs	r5, r5, r1
 8013222:	f025 0503 	bic.w	r5, r5, #3
 8013226:	3508      	adds	r5, #8
 8013228:	2d0c      	cmp	r5, #12
 801322a:	bf38      	it	cc
 801322c:	250c      	movcc	r5, #12
 801322e:	4629      	mov	r1, r5
 8013230:	4638      	mov	r0, r7
 8013232:	f7ff ffa5 	bl	8013180 <sbrk_aligned>
 8013236:	3001      	adds	r0, #1
 8013238:	d02b      	beq.n	8013292 <_malloc_r+0xd2>
 801323a:	6823      	ldr	r3, [r4, #0]
 801323c:	442b      	add	r3, r5
 801323e:	6023      	str	r3, [r4, #0]
 8013240:	e00e      	b.n	8013260 <_malloc_r+0xa0>
 8013242:	6822      	ldr	r2, [r4, #0]
 8013244:	1b52      	subs	r2, r2, r5
 8013246:	d41e      	bmi.n	8013286 <_malloc_r+0xc6>
 8013248:	2a0b      	cmp	r2, #11
 801324a:	d916      	bls.n	801327a <_malloc_r+0xba>
 801324c:	1961      	adds	r1, r4, r5
 801324e:	42a3      	cmp	r3, r4
 8013250:	6025      	str	r5, [r4, #0]
 8013252:	bf18      	it	ne
 8013254:	6059      	strne	r1, [r3, #4]
 8013256:	6863      	ldr	r3, [r4, #4]
 8013258:	bf08      	it	eq
 801325a:	6031      	streq	r1, [r6, #0]
 801325c:	5162      	str	r2, [r4, r5]
 801325e:	604b      	str	r3, [r1, #4]
 8013260:	4638      	mov	r0, r7
 8013262:	f104 060b 	add.w	r6, r4, #11
 8013266:	f000 f865 	bl	8013334 <__malloc_unlock>
 801326a:	f026 0607 	bic.w	r6, r6, #7
 801326e:	1d23      	adds	r3, r4, #4
 8013270:	1af2      	subs	r2, r6, r3
 8013272:	d0b6      	beq.n	80131e2 <_malloc_r+0x22>
 8013274:	1b9b      	subs	r3, r3, r6
 8013276:	50a3      	str	r3, [r4, r2]
 8013278:	e7b3      	b.n	80131e2 <_malloc_r+0x22>
 801327a:	6862      	ldr	r2, [r4, #4]
 801327c:	42a3      	cmp	r3, r4
 801327e:	bf0c      	ite	eq
 8013280:	6032      	streq	r2, [r6, #0]
 8013282:	605a      	strne	r2, [r3, #4]
 8013284:	e7ec      	b.n	8013260 <_malloc_r+0xa0>
 8013286:	4623      	mov	r3, r4
 8013288:	6864      	ldr	r4, [r4, #4]
 801328a:	e7b2      	b.n	80131f2 <_malloc_r+0x32>
 801328c:	4634      	mov	r4, r6
 801328e:	6876      	ldr	r6, [r6, #4]
 8013290:	e7b9      	b.n	8013206 <_malloc_r+0x46>
 8013292:	230c      	movs	r3, #12
 8013294:	603b      	str	r3, [r7, #0]
 8013296:	4638      	mov	r0, r7
 8013298:	f000 f84c 	bl	8013334 <__malloc_unlock>
 801329c:	e7a1      	b.n	80131e2 <_malloc_r+0x22>
 801329e:	6025      	str	r5, [r4, #0]
 80132a0:	e7de      	b.n	8013260 <_malloc_r+0xa0>
 80132a2:	bf00      	nop
 80132a4:	200025f8 	.word	0x200025f8

080132a8 <_realloc_r>:
 80132a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ac:	4680      	mov	r8, r0
 80132ae:	4614      	mov	r4, r2
 80132b0:	460e      	mov	r6, r1
 80132b2:	b921      	cbnz	r1, 80132be <_realloc_r+0x16>
 80132b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132b8:	4611      	mov	r1, r2
 80132ba:	f7ff bf81 	b.w	80131c0 <_malloc_r>
 80132be:	b92a      	cbnz	r2, 80132cc <_realloc_r+0x24>
 80132c0:	f7ff ff12 	bl	80130e8 <_free_r>
 80132c4:	4625      	mov	r5, r4
 80132c6:	4628      	mov	r0, r5
 80132c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132cc:	f000 f838 	bl	8013340 <_malloc_usable_size_r>
 80132d0:	4284      	cmp	r4, r0
 80132d2:	4607      	mov	r7, r0
 80132d4:	d802      	bhi.n	80132dc <_realloc_r+0x34>
 80132d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80132da:	d812      	bhi.n	8013302 <_realloc_r+0x5a>
 80132dc:	4621      	mov	r1, r4
 80132de:	4640      	mov	r0, r8
 80132e0:	f7ff ff6e 	bl	80131c0 <_malloc_r>
 80132e4:	4605      	mov	r5, r0
 80132e6:	2800      	cmp	r0, #0
 80132e8:	d0ed      	beq.n	80132c6 <_realloc_r+0x1e>
 80132ea:	42bc      	cmp	r4, r7
 80132ec:	4622      	mov	r2, r4
 80132ee:	4631      	mov	r1, r6
 80132f0:	bf28      	it	cs
 80132f2:	463a      	movcs	r2, r7
 80132f4:	f7ff fbb0 	bl	8012a58 <memcpy>
 80132f8:	4631      	mov	r1, r6
 80132fa:	4640      	mov	r0, r8
 80132fc:	f7ff fef4 	bl	80130e8 <_free_r>
 8013300:	e7e1      	b.n	80132c6 <_realloc_r+0x1e>
 8013302:	4635      	mov	r5, r6
 8013304:	e7df      	b.n	80132c6 <_realloc_r+0x1e>
	...

08013308 <_sbrk_r>:
 8013308:	b538      	push	{r3, r4, r5, lr}
 801330a:	4d06      	ldr	r5, [pc, #24]	; (8013324 <_sbrk_r+0x1c>)
 801330c:	2300      	movs	r3, #0
 801330e:	4604      	mov	r4, r0
 8013310:	4608      	mov	r0, r1
 8013312:	602b      	str	r3, [r5, #0]
 8013314:	f7ee f9ec 	bl	80016f0 <_sbrk>
 8013318:	1c43      	adds	r3, r0, #1
 801331a:	d102      	bne.n	8013322 <_sbrk_r+0x1a>
 801331c:	682b      	ldr	r3, [r5, #0]
 801331e:	b103      	cbz	r3, 8013322 <_sbrk_r+0x1a>
 8013320:	6023      	str	r3, [r4, #0]
 8013322:	bd38      	pop	{r3, r4, r5, pc}
 8013324:	20002600 	.word	0x20002600

08013328 <__malloc_lock>:
 8013328:	4801      	ldr	r0, [pc, #4]	; (8013330 <__malloc_lock+0x8>)
 801332a:	f000 b811 	b.w	8013350 <__retarget_lock_acquire_recursive>
 801332e:	bf00      	nop
 8013330:	20002604 	.word	0x20002604

08013334 <__malloc_unlock>:
 8013334:	4801      	ldr	r0, [pc, #4]	; (801333c <__malloc_unlock+0x8>)
 8013336:	f000 b80c 	b.w	8013352 <__retarget_lock_release_recursive>
 801333a:	bf00      	nop
 801333c:	20002604 	.word	0x20002604

08013340 <_malloc_usable_size_r>:
 8013340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013344:	1f18      	subs	r0, r3, #4
 8013346:	2b00      	cmp	r3, #0
 8013348:	bfbc      	itt	lt
 801334a:	580b      	ldrlt	r3, [r1, r0]
 801334c:	18c0      	addlt	r0, r0, r3
 801334e:	4770      	bx	lr

08013350 <__retarget_lock_acquire_recursive>:
 8013350:	4770      	bx	lr

08013352 <__retarget_lock_release_recursive>:
 8013352:	4770      	bx	lr

08013354 <_init>:
 8013354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013356:	bf00      	nop
 8013358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801335a:	bc08      	pop	{r3}
 801335c:	469e      	mov	lr, r3
 801335e:	4770      	bx	lr

08013360 <_fini>:
 8013360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013362:	bf00      	nop
 8013364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013366:	bc08      	pop	{r3}
 8013368:	469e      	mov	lr, r3
 801336a:	4770      	bx	lr
