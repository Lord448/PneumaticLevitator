
Motherboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014014  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  080141b4  080141b4  000241b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014500  08014500  00030424  2**0
                  CONTENTS
  4 .ARM          00000008  08014500  08014500  00024500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014508  08014508  00030424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014508  08014508  00024508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801450c  0801450c  0002450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  08014510  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ce8  20000424  08014934  00030424  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000710c  08014934  0003710c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032d4b  00000000  00000000  00030454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006380  00000000  00000000  0006319f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002678  00000000  00000000  00069520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023e8  00000000  00000000  0006bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009b3a  00000000  00000000  0006df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000306b3  00000000  00000000  00077aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acc81  00000000  00000000  000a816d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154dee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4f4  00000000  00000000  00154e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000424 	.word	0x20000424
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801419c 	.word	0x0801419c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000428 	.word	0x20000428
 80001dc:	0801419c 	.word	0x0801419c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f001 f8b8 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f8d6 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fc1e 	bl	8000d30 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f4:	f000 fbd6 	bl	8000ca4 <MX_DMA_Init>
  MX_IWDG_Init();
 80004f8:	f000 f998 	bl	800082c <MX_IWDG_Init>
  MX_RTC_Init();
 80004fc:	f000 f9b0 	bl	8000860 <MX_RTC_Init>
  MX_I2C1_Init();
 8000500:	f000 f938 	bl	8000774 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000504:	f000 f964 	bl	80007d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000508:	f000 fba0 	bl	8000c4c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800050c:	f000 fa6a 	bl	80009e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000510:	f000 fade 	bl	8000ad0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000514:	f000 f9ca 	bl	80008ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000518:	f000 fa18 	bl	800094c <MX_TIM2_Init>
  MX_TIM5_Init();
 800051c:	f000 fb48 	bl	8000bb0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f00f fbc2 	bl	800fca8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphore_PID */
  xSemaphore_PIDHandle = osSemaphoreNew(1, 1, &xSemaphore_PID_attributes);
 8000524:	4a39      	ldr	r2, [pc, #228]	; (800060c <main+0x128>)
 8000526:	2101      	movs	r1, #1
 8000528:	2001      	movs	r0, #1
 800052a:	f00f fcf6 	bl	800ff1a <osSemaphoreNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a37      	ldr	r2, [pc, #220]	; (8000610 <main+0x12c>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of xSemaphore_PID_Init */
  xSemaphore_PID_InitHandle = osSemaphoreNew(1, 1, &xSemaphore_PID_Init_attributes);
 8000534:	4a37      	ldr	r2, [pc, #220]	; (8000614 <main+0x130>)
 8000536:	2101      	movs	r1, #1
 8000538:	2001      	movs	r0, #1
 800053a:	f00f fcee 	bl	800ff1a <osSemaphoreNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a35      	ldr	r2, [pc, #212]	; (8000618 <main+0x134>)
 8000542:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of xFIFO_COM */
  xFIFO_COMHandle = osMessageQueueNew (16, sizeof(PDU_t), &xFIFO_COM_attributes);
 8000544:	4a35      	ldr	r2, [pc, #212]	; (800061c <main+0x138>)
 8000546:	2108      	movs	r1, #8
 8000548:	2010      	movs	r0, #16
 800054a:	f00f fdb3 	bl	80100b4 <osMessageQueueNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a33      	ldr	r2, [pc, #204]	; (8000620 <main+0x13c>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_Distance */
  xFIFO_DistanceHandle = osMessageQueueNew (4, sizeof(uint16_t), &xFIFO_Distance_attributes);
 8000554:	4a33      	ldr	r2, [pc, #204]	; (8000624 <main+0x140>)
 8000556:	2102      	movs	r1, #2
 8000558:	2004      	movs	r0, #4
 800055a:	f00f fdab 	bl	80100b4 <osMessageQueueNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a31      	ldr	r2, [pc, #196]	; (8000628 <main+0x144>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_ControlAction */
  xFIFO_ControlActionHandle = osMessageQueueNew (16, sizeof(float), &xFIFO_ControlAction_attributes);
 8000564:	4a31      	ldr	r2, [pc, #196]	; (800062c <main+0x148>)
 8000566:	2104      	movs	r1, #4
 8000568:	2010      	movs	r0, #16
 800056a:	f00f fda3 	bl	80100b4 <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a2f      	ldr	r2, [pc, #188]	; (8000630 <main+0x14c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_PIDConfigs */
  xFIFO_PIDConfigsHandle = osMessageQueueNew (16, sizeof(PIDConfigs), &xFIFO_PIDConfigs_attributes);
 8000574:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <main+0x150>)
 8000576:	211c      	movs	r1, #28
 8000578:	2010      	movs	r0, #16
 800057a:	f00f fd9b 	bl	80100b4 <osMessageQueueNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a2d      	ldr	r2, [pc, #180]	; (8000638 <main+0x154>)
 8000582:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskIdle */
  TaskIdleHandle = osThreadNew(vTaskIdle, NULL, &TaskIdle_attributes);
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <main+0x158>)
 8000586:	2100      	movs	r1, #0
 8000588:	482d      	ldr	r0, [pc, #180]	; (8000640 <main+0x15c>)
 800058a:	f00f fbec 	bl	800fd66 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a2c      	ldr	r2, [pc, #176]	; (8000644 <main+0x160>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of TaskModeManager */
  TaskModeManagerHandle = osThreadNew(vTaskModeManager, NULL, &TaskModeManager_attributes);
 8000594:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <main+0x164>)
 8000596:	2100      	movs	r1, #0
 8000598:	482c      	ldr	r0, [pc, #176]	; (800064c <main+0x168>)
 800059a:	f00f fbe4 	bl	800fd66 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <main+0x16c>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of TaskPID */
  TaskPIDHandle = osThreadNew(vTaskPID, NULL, &TaskPID_attributes);
 80005a4:	4a2b      	ldr	r2, [pc, #172]	; (8000654 <main+0x170>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	482b      	ldr	r0, [pc, #172]	; (8000658 <main+0x174>)
 80005aa:	f00f fbdc 	bl	800fd66 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a2a      	ldr	r2, [pc, #168]	; (800065c <main+0x178>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of TaskCOM */
  TaskCOMHandle = osThreadNew(vTaskCOM, NULL, &TaskCOM_attributes);
 80005b4:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <main+0x17c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	482a      	ldr	r0, [pc, #168]	; (8000664 <main+0x180>)
 80005ba:	f00f fbd4 	bl	800fd66 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a29      	ldr	r2, [pc, #164]	; (8000668 <main+0x184>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of TaskSensorActua */
  TaskSensorActuaHandle = osThreadNew(vTaskSensorActuator, NULL, &TaskSensorActua_attributes);
 80005c4:	4a29      	ldr	r2, [pc, #164]	; (800066c <main+0x188>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4829      	ldr	r0, [pc, #164]	; (8000670 <main+0x18c>)
 80005ca:	f00f fbcc 	bl	800fd66 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <main+0x190>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of TaskWdgM */
  TaskWdgMHandle = osThreadNew(vTaskWdgM, NULL, &TaskWdgM_attributes);
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <main+0x194>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4828      	ldr	r0, [pc, #160]	; (800067c <main+0x198>)
 80005da:	f00f fbc4 	bl	800fd66 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <main+0x19c>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of TaskEcuM */
  TaskEcuMHandle = osThreadNew(vTaskEcuM, NULL, &TaskEcuM_attributes);
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <main+0x1a0>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4827      	ldr	r0, [pc, #156]	; (8000688 <main+0x1a4>)
 80005ea:	f00f fbbc 	bl	800fd66 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <main+0x1a8>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of TaskDiagAppl */
  TaskDiagApplHandle = osThreadNew(vTaskDiagAppl, NULL, &TaskDiagAppl_attributes);
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <main+0x1ac>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4826      	ldr	r0, [pc, #152]	; (8000694 <main+0x1b0>)
 80005fa:	f00f fbb4 	bl	800fd66 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <main+0x1b4>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f00f fb74 	bl	800fcf0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x124>
 800060a:	bf00      	nop
 800060c:	08014460 	.word	0x08014460
 8000610:	20000870 	.word	0x20000870
 8000614:	08014470 	.word	0x08014470
 8000618:	20000874 	.word	0x20000874
 800061c:	08014400 	.word	0x08014400
 8000620:	20000860 	.word	0x20000860
 8000624:	08014418 	.word	0x08014418
 8000628:	20000864 	.word	0x20000864
 800062c:	08014430 	.word	0x08014430
 8000630:	20000868 	.word	0x20000868
 8000634:	08014448 	.word	0x08014448
 8000638:	2000086c 	.word	0x2000086c
 800063c:	080142e0 	.word	0x080142e0
 8000640:	08000e61 	.word	0x08000e61
 8000644:	20000840 	.word	0x20000840
 8000648:	08014304 	.word	0x08014304
 800064c:	08013349 	.word	0x08013349
 8000650:	20000844 	.word	0x20000844
 8000654:	08014328 	.word	0x08014328
 8000658:	08013369 	.word	0x08013369
 800065c:	20000848 	.word	0x20000848
 8000660:	0801434c 	.word	0x0801434c
 8000664:	0801314b 	.word	0x0801314b
 8000668:	2000084c 	.word	0x2000084c
 800066c:	08014370 	.word	0x08014370
 8000670:	08000e75 	.word	0x08000e75
 8000674:	20000850 	.word	0x20000850
 8000678:	08014394 	.word	0x08014394
 800067c:	08000ec9 	.word	0x08000ec9
 8000680:	20000854 	.word	0x20000854
 8000684:	080143b8 	.word	0x080143b8
 8000688:	0801331f 	.word	0x0801331f
 800068c:	20000858 	.word	0x20000858
 8000690:	080143dc 	.word	0x080143dc
 8000694:	08013167 	.word	0x08013167
 8000698:	2000085c 	.word	0x2000085c

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f013 fca4 	bl	8013ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a28      	ldr	r2, [pc, #160]	; (800076c <SystemClock_Config+0xd0>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <SystemClock_Config+0xd0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <SystemClock_Config+0xd4>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <SystemClock_Config+0xd4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80006f8:	230d      	movs	r3, #13
 80006fa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000714:	2319      	movs	r3, #25
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000718:	23c0      	movs	r3, #192	; 0xc0
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f004 f8bd 	bl	80048a8 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000734:	f000 fbe2 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2103      	movs	r1, #3
 8000754:	4618      	mov	r0, r3
 8000756:	f004 fb1f 	bl	8004d98 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000760:	f000 fbcc 	bl	8000efc <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_I2C1_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_I2C1_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007b2:	f001 fe15 	bl	80023e0 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 fb9e 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000440 	.word	0x20000440
 80007c8:	40005400 	.word	0x40005400
 80007cc:	00061a80 	.word	0x00061a80

080007d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C2_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_I2C2_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C2_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_I2C2_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2C2_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_I2C2_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_I2C2_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2C2_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_I2C2_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2C2_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C2_Init+0x50>)
 800080e:	f001 fde7 	bl	80023e0 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 fb70 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000494 	.word	0x20000494
 8000824:	40005800 	.word	0x40005800
 8000828:	00061a80 	.word	0x00061a80

0800082c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_IWDG_Init+0x2c>)
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <MX_IWDG_Init+0x30>)
 8000834:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_IWDG_Init+0x2c>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_IWDG_Init+0x2c>)
 800083e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000842:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_IWDG_Init+0x2c>)
 8000846:	f002 fd60 	bl	800330a <HAL_IWDG_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000850:	f000 fb54 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200005a8 	.word	0x200005a8
 800085c:	40003000 	.word	0x40003000

08000860 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_RTC_Init+0x44>)
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MX_RTC_Init+0x48>)
 8000868:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_RTC_Init+0x44>)
 800086c:	2240      	movs	r2, #64	; 0x40
 800086e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_RTC_Init+0x44>)
 8000872:	227f      	movs	r2, #127	; 0x7f
 8000874:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_RTC_Init+0x44>)
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_RTC_Init+0x44>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_RTC_Init+0x44>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_RTC_Init+0x44>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_RTC_Init+0x44>)
 8000890:	f004 fd52 	bl	8005338 <HAL_RTC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800089a:	f000 fb2f 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200005b4 	.word	0x200005b4
 80008a8:	40002800 	.word	0x40002800

080008ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_TIM1_Init+0x98>)
 80008ca:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <MX_TIM1_Init+0x9c>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_TIM1_Init+0x98>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_TIM1_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_TIM1_Init+0x98>)
 80008dc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_TIM1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_TIM1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_TIM1_Init+0x98>)
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_TIM1_Init+0x98>)
 80008f6:	f004 fe19 	bl	800552c <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 fafc 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_TIM1_Init+0x98>)
 8000912:	f005 f973 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800091c:	f000 faee 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_TIM1_Init+0x98>)
 800092e:	f005 fe23 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000938:	f000 fae0 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200005d4 	.word	0x200005d4
 8000948:	40010000 	.word	0x40010000

0800094c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM2_Init+0x94>)
 800096a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_TIM2_Init+0x94>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM2_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_TIM2_Init+0x94>)
 800097e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_TIM2_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <MX_TIM2_Init+0x94>)
 8000992:	f004 fdcb 	bl	800552c <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800099c:	f000 faae 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_TIM2_Init+0x94>)
 80009ae:	f005 f925 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009b8:	f000 faa0 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_TIM2_Init+0x94>)
 80009ca:	f005 fdd5 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 fa92 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000061c 	.word	0x2000061c

080009e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a16:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <MX_TIM3_Init+0xe8>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a3a:	4823      	ldr	r0, [pc, #140]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a3c:	f004 fd76 	bl	800552c <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a46:	f000 fa59 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a54:	4619      	mov	r1, r3
 8000a56:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a58:	f005 f8d0 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a62:	f000 fa4b 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a66:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a68:	f004 fdaf 	bl	80055ca <HAL_TIM_PWM_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a72:	f000 fa43 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	4619      	mov	r1, r3
 8000a84:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a86:	f005 fd77 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a90:	f000 fa34 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a94:	2360      	movs	r3, #96	; 0x60
 8000a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000aac:	f004 ffe4 	bl	8005a78 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ab6:	f000 fa21 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000abc:	f000 fc24 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3738      	adds	r7, #56	; 0x38
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000664 	.word	0x20000664
 8000acc:	40000400 	.word	0x40000400

08000ad0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000afc:	4a2b      	ldr	r2, [pc, #172]	; (8000bac <MX_TIM4_Init+0xdc>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b20:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b22:	f004 fd03 	bl	800552c <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000b2c:	f000 f9e6 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b3e:	f005 f85d 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f9d8 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000b4c:	4816      	ldr	r0, [pc, #88]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b4e:	f004 fd95 	bl	800567c <HAL_TIM_IC_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 f9d0 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b6c:	f005 fd04 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000b76:	f000 f9c1 	bl	8000efc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b92:	f004 fed4 	bl	800593e <HAL_TIM_IC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000b9c:	f000 f9ae 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200006ac 	.word	0x200006ac
 8000bac:	40000800 	.word	0x40000800

08000bb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <MX_TIM5_Init+0x98>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 14;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bd4:	220e      	movs	r2, #14
 8000bd6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 63999;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000be0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000be4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bf4:	f004 fc9a 	bl	800552c <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000bfe:	f000 f97d 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000c10:	f004 fff4 	bl	8005bfc <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 f96f 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000c2c:	f005 fca4 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000c36:	f000 f961 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200006f4 	.word	0x200006f4
 8000c48:	40000c00 	.word	0x40000c00

08000c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c58:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c64:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c88:	f005 fcf8 	bl	800667c <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000c92:	f000 f933 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000073c 	.word	0x2000073c
 8000ca0:	40011000 	.word	0x40011000

08000ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_DMA_Init+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	200d      	movs	r0, #13
 8000ce8:	f000 fe29 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cec:	200d      	movs	r0, #13
 8000cee:	f000 fe42 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	202f      	movs	r0, #47	; 0x2f
 8000cf8:	f000 fe21 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000cfc:	202f      	movs	r0, #47	; 0x2f
 8000cfe:	f000 fe3a 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2105      	movs	r1, #5
 8000d06:	203a      	movs	r0, #58	; 0x3a
 8000d08:	f000 fe19 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d0c:	203a      	movs	r0, #58	; 0x3a
 8000d0e:	f000 fe32 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2105      	movs	r1, #5
 8000d16:	2046      	movs	r0, #70	; 0x46
 8000d18:	f000 fe11 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d1c:	2046      	movs	r0, #70	; 0x46
 8000d1e:	f000 fe2a 	bl	8001976 <HAL_NVIC_EnableIRQ>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a39      	ldr	r2, [pc, #228]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a2b      	ldr	r2, [pc, #172]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OR_GPIO_Port, LED_OR_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <MX_GPIO_Init+0x124>)
 8000dbe:	f001 faf5 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPLed1_Pin|GPLed2_Pin|WP_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2198      	movs	r1, #152	; 0x98
 8000dc6:	4824      	ldr	r0, [pc, #144]	; (8000e58 <MX_GPIO_Init+0x128>)
 8000dc8:	f001 faf0 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EnableFAN_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	21a0      	movs	r1, #160	; 0xa0
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000dd2:	f001 faeb 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_OR_Pin */
  GPIO_InitStruct.Pin = LED_OR_Pin;
 8000dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OR_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <MX_GPIO_Init+0x124>)
 8000df0:	f001 f958 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DevMode_IT_Pin */
  GPIO_InitStruct.Pin = DevMode_IT_Pin;
 8000df4:	2301      	movs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DevMode_IT_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_GPIO_Init+0x128>)
 8000e0a:	f001 f94b 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPLed1_Pin GPLed2_Pin WP_Pin */
  GPIO_InitStruct.Pin = GPLed1_Pin|GPLed2_Pin|WP_Pin;
 8000e0e:	2398      	movs	r3, #152	; 0x98
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_GPIO_Init+0x128>)
 8000e26:	f001 f93d 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EnableFAN_Pin TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = EnableFAN_Pin|TOF_XSHUT_Pin;
 8000e2a:	23a0      	movs	r3, #160	; 0xa0
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000e42:	f001 f92f 	bl	80020a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400

08000e60 <vTaskIdle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTaskIdle */
void vTaskIdle(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e68:	f012 fb86 	bl	8013578 <MX_USB_DEVICE_Init>
  /*TODO: Implement strategy for CPU Load measures*/

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f00f f80c 	bl	800fe8a <osDelay>
 8000e72:	e7fb      	b.n	8000e6c <vTaskIdle+0xc>

08000e74 <vTaskSensorActuator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskSensorActuator */
void vTaskSensorActuator(void *argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskSensorActuator */
	const TickType_t taskResolutionMS = 10;
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	60bb      	str	r3, [r7, #8]
	TickType_t tick;

	DistanceSensor_Init();
 8000e80:	f012 f978 	bl	8013174 <DistanceSensor_Init>
	FAN_Init();
 8000e84:	f012 fa52 	bl	801332c <FAN_Init>
	tick = osKernelGetTickCount();
 8000e88:	f00e ff58 	bl	800fd3c <osKernelGetTickCount>
 8000e8c:	60f8      	str	r0, [r7, #12]
  for(;;)
  {
  	DistanceSensor_MainRunnable();
 8000e8e:	f012 f9ef 	bl	8013270 <DistanceSensor_MainRunnable>
  	FAN_MainRunnable();
 8000e92:	f012 fa52 	bl	801333a <FAN_MainRunnable>
  	osSemaphoreRelease(xSemaphore_PIDHandle);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <vTaskSensorActuator+0x4c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00f f8c6 	bl	801002c <osSemaphoreRelease>

  	/*Parsed Loop Handling with 10ms resolution*/
  	tick += pdMS_TO_TICKS(taskResolutionMS);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <vTaskSensorActuator+0x50>)
 8000eac:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb0:	099b      	lsrs	r3, r3, #6
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
  	osDelayUntil(tick);
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f00f f801 	bl	800fec0 <osDelayUntil>
  	DistanceSensor_MainRunnable();
 8000ebe:	e7e6      	b.n	8000e8e <vTaskSensorActuator+0x1a>
 8000ec0:	20000870 	.word	0x20000870
 8000ec4:	10624dd3 	.word	0x10624dd3

08000ec8 <vTaskWdgM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskWdgM */
void vTaskWdgM(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskWdgM */
	const TickType_t ticksForResetWDG = pdMS_TO_TICKS(500); //WDG @ 500ms
 8000ed0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ed4:	60bb      	str	r3, [r7, #8]
	TickType_t ticks;

	HAL_IWDG_Init(&hiwdg);
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <vTaskWdgM+0x30>)
 8000ed8:	f002 fa17 	bl	800330a <HAL_IWDG_Init>
	ticks = osKernelGetTickCount();
 8000edc:	f00e ff2e 	bl	800fd3c <osKernelGetTickCount>
 8000ee0:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    HAL_IWDG_Refresh(&hiwdg);
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <vTaskWdgM+0x30>)
 8000ee4:	f002 fa53 	bl	800338e <HAL_IWDG_Refresh>
    ticks += ticksForResetWDG;
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4413      	add	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
    osDelayUntil(ticks);
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f00e ffe5 	bl	800fec0 <osDelayUntil>
    HAL_IWDG_Refresh(&hiwdg);
 8000ef6:	e7f4      	b.n	8000ee2 <vTaskWdgM+0x1a>
 8000ef8:	200005a8 	.word	0x200005a8

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_MspInit+0x54>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_MspInit+0x54>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_MspInit+0x54>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_MspInit+0x54>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_MspInit+0x54>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_MspInit+0x54>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	210f      	movs	r1, #15
 8000f4a:	f06f 0001 	mvn.w	r0, #1
 8000f4e:	f000 fcf6 	bl	800193e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a69      	ldr	r2, [pc, #420]	; (8001124 <HAL_I2C_MspInit+0x1c4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12d      	bne.n	8000fde <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	4b68      	ldr	r3, [pc, #416]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a67      	ldr	r2, [pc, #412]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b65      	ldr	r3, [pc, #404]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa4:	2312      	movs	r3, #18
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	485c      	ldr	r0, [pc, #368]	; (800112c <HAL_I2C_MspInit+0x1cc>)
 8000fbc:	f001 f872 	bl	80020a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	4b58      	ldr	r3, [pc, #352]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a57      	ldr	r2, [pc, #348]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b55      	ldr	r3, [pc, #340]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fdc:	e09e      	b.n	800111c <HAL_I2C_MspInit+0x1bc>
  else if(hi2c->Instance==I2C2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a53      	ldr	r2, [pc, #332]	; (8001130 <HAL_I2C_MspInit+0x1d0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	f040 8099 	bne.w	800111c <HAL_I2C_MspInit+0x1bc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001018:	2304      	movs	r3, #4
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4842      	ldr	r0, [pc, #264]	; (800112c <HAL_I2C_MspInit+0x1cc>)
 8001024:	f001 f83e 	bl	80020a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001028:	2308      	movs	r3, #8
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001038:	2309      	movs	r3, #9
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	483a      	ldr	r0, [pc, #232]	; (800112c <HAL_I2C_MspInit+0x1cc>)
 8001044:	f001 f82e 	bl	80020a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a35      	ldr	r2, [pc, #212]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 8001052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_I2C_MspInit+0x1c8>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001064:	4b33      	ldr	r3, [pc, #204]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 8001066:	4a34      	ldr	r2, [pc, #208]	; (8001138 <HAL_I2C_MspInit+0x1d8>)
 8001068:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 800106c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001070:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001072:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 8001080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001084:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80010a4:	4823      	ldr	r0, [pc, #140]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 80010a6:	f000 fc81 	bl	80019ac <HAL_DMA_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80010b0:	f7ff ff24 	bl	8000efc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38
 80010ba:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <HAL_I2C_MspInit+0x1d4>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_I2C_MspInit+0x1e0>)
 80010c4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010c8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010cc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010d0:	2240      	movs	r2, #64	; 0x40
 80010d2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001100:	480e      	ldr	r0, [pc, #56]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 8001102:	f000 fc53 	bl	80019ac <HAL_DMA_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_I2C_MspInit+0x1b0>
      Error_Handler();
 800110c:	f7ff fef6 	bl	8000efc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
 8001116:	4a09      	ldr	r2, [pc, #36]	; (800113c <HAL_I2C_MspInit+0x1dc>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800111c:	bf00      	nop
 800111e:	3730      	adds	r7, #48	; 0x30
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005400 	.word	0x40005400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400
 8001130:	40005800 	.word	0x40005800
 8001134:	200004e8 	.word	0x200004e8
 8001138:	40026040 	.word	0x40026040
 800113c:	20000548 	.word	0x20000548
 8001140:	400260b8 	.word	0x400260b8

08001144 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <HAL_RTC_MspInit+0x50>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d111      	bne.n	800118c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001168:	2302      	movs	r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800116c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001170:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4618      	mov	r0, r3
 8001178:	f003 ffee 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001182:	f7ff febb 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_RTC_MspInit+0x54>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40002800 	.word	0x40002800
 8001198:	42470e3c 	.word	0x42470e3c

0800119c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <HAL_TIM_Base_MspInit+0x154>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d116      	bne.n	80011ec <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
 80011c2:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2105      	movs	r1, #5
 80011de:	2019      	movs	r0, #25
 80011e0:	f000 fbad 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011e4:	2019      	movs	r0, #25
 80011e6:	f000 fbc6 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80011ea:	e07c      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f4:	d116      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2105      	movs	r1, #5
 8001216:	201c      	movs	r0, #28
 8001218:	f000 fb91 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800121c:	201c      	movs	r0, #28
 800121e:	f000 fbaa 	bl	8001976 <HAL_NVIC_EnableIRQ>
}
 8001222:	e060      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <HAL_TIM_Base_MspInit+0x15c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
}
 800124a:	e04c      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <HAL_TIM_Base_MspInit+0x160>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d12c      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RPMSpeed_IC_Pin;
 800128e:	2340      	movs	r3, #64	; 0x40
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001296:	2301      	movs	r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800129e:	2302      	movs	r3, #2
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RPMSpeed_IC_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	4815      	ldr	r0, [pc, #84]	; (8001300 <HAL_TIM_Base_MspInit+0x164>)
 80012aa:	f000 fefb 	bl	80020a4 <HAL_GPIO_Init>
}
 80012ae:	e01a      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_TIM_Base_MspInit+0x168>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d115      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_TIM_Base_MspInit+0x158>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2105      	movs	r1, #5
 80012da:	2032      	movs	r0, #50	; 0x32
 80012dc:	f000 fb2f 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80012e0:	2032      	movs	r0, #50	; 0x32
 80012e2:	f000 fb48 	bl	8001976 <HAL_NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3738      	adds	r7, #56	; 0x38
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40000400 	.word	0x40000400
 80012fc:	40000800 	.word	0x40000800
 8001300:	40020400 	.word	0x40020400
 8001304:	40000c00 	.word	0x40000c00

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_TIM_MspPostInit+0x68>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d11d      	bne.n	8001366 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_TIM_MspPostInit+0x6c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_TIM_MspPostInit+0x6c>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_TIM_MspPostInit+0x6c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin;
 8001346:	2310      	movs	r3, #16
 8001348:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001356:	2302      	movs	r3, #2
 8001358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_FAN_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_TIM_MspPostInit+0x70>)
 8001362:	f000 fe9f 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40000400 	.word	0x40000400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <HAL_UART_MspInit+0x150>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 8091 	bne.w	80014c2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_UART_MspInit+0x154>)
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	4a49      	ldr	r2, [pc, #292]	; (80014d0 <HAL_UART_MspInit+0x154>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6453      	str	r3, [r2, #68]	; 0x44
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_UART_MspInit+0x154>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <HAL_UART_MspInit+0x154>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	4a42      	ldr	r2, [pc, #264]	; (80014d0 <HAL_UART_MspInit+0x154>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <HAL_UART_MspInit+0x154>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4837      	ldr	r0, [pc, #220]	; (80014d4 <HAL_UART_MspInit+0x158>)
 80013f6:	f000 fe55 	bl	80020a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 80013fc:	4a37      	ldr	r2, [pc, #220]	; (80014dc <HAL_UART_MspInit+0x160>)
 80013fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 8001402:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001406:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 8001416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800143a:	4827      	ldr	r0, [pc, #156]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 800143c:	f000 fab6 	bl	80019ac <HAL_DMA_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001446:	f7ff fd59 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 800144e:	639a      	str	r2, [r3, #56]	; 0x38
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <HAL_UART_MspInit+0x15c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_UART_MspInit+0x164>)
 8001458:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <HAL_UART_MspInit+0x168>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800145c:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_UART_MspInit+0x164>)
 800145e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001462:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_UART_MspInit+0x164>)
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_UART_MspInit+0x164>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_UART_MspInit+0x164>)
 8001472:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001476:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_UART_MspInit+0x164>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_UART_MspInit+0x164>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_UART_MspInit+0x164>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0x164>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_UART_MspInit+0x164>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <HAL_UART_MspInit+0x164>)
 8001498:	f000 fa88 	bl	80019ac <HAL_DMA_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80014a2:	f7ff fd2b 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_UART_MspInit+0x164>)
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_UART_MspInit+0x164>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2105      	movs	r1, #5
 80014b6:	2025      	movs	r0, #37	; 0x25
 80014b8:	f000 fa41 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014bc:	2025      	movs	r0, #37	; 0x25
 80014be:	f000 fa5a 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40011000 	.word	0x40011000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	20000780 	.word	0x20000780
 80014dc:	40026440 	.word	0x40026440
 80014e0:	200007e0 	.word	0x200007e0
 80014e4:	400264b8 	.word	0x400264b8

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f8f2 	bl	8001700 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800151c:	f010 fda6 	bl	801206c <xTaskGetSchedulerState>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d001      	beq.n	800152a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001526:	f011 fb8f 	bl	8012c48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA1_Stream2_IRQHandler+0x10>)
 8001536:	f000 fb79 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200004e8 	.word	0x200004e8

08001544 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800154a:	f004 f8f0 	bl	800572e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200005d4 	.word	0x200005d4

08001558 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM2_IRQHandler+0x10>)
 800155e:	f004 f8e6 	bl	800572e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000061c 	.word	0x2000061c

0800156c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <USART1_IRQHandler+0x10>)
 8001572:	f005 f8d1 	bl	8006718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000073c 	.word	0x2000073c

08001580 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA1_Stream7_IRQHandler+0x10>)
 8001586:	f000 fb51 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000548 	.word	0x20000548

08001594 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM5_IRQHandler+0x10>)
 800159a:	f004 f8c8 	bl	800572e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200006f4 	.word	0x200006f4

080015a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <DMA2_Stream2_IRQHandler+0x10>)
 80015ae:	f000 fb3d 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000780 	.word	0x20000780

080015bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <OTG_FS_IRQHandler+0x10>)
 80015c2:	f002 f844 	bl	800364e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200069d8 	.word	0x200069d8

080015d0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <DMA2_Stream7_IRQHandler+0x10>)
 80015d6:	f000 fb29 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200007e0 	.word	0x200007e0

080015e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <Reset_Handler>:
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0x12>
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <LoopFillZerobss+0x1a>)
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <LoopFillZerobss+0x1e>)
 8001612:	2300      	movs	r3, #0
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:
 8001616:	58d4      	ldr	r4, [r2, r3]
 8001618:	50c4      	str	r4, [r0, r3]
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:
 800161c:	18c4      	adds	r4, r0, r3
 800161e:	428c      	cmp	r4, r1
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopFillZerobss+0x22>)
 8001624:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <LoopFillZerobss+0x26>)
 8001626:	2300      	movs	r3, #0
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:
 800162e:	42a2      	cmp	r2, r4
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>
 8001632:	f7ff ffd7 	bl	80015e4 <SystemInit>
 8001636:	f012 fcab 	bl	8013f90 <__libc_init_array>
 800163a:	f7fe ff53 	bl	80004e4 <main>
 800163e:	4770      	bx	lr
 8001640:	20020000 	.word	0x20020000
 8001644:	20000000 	.word	0x20000000
 8001648:	20000424 	.word	0x20000424
 800164c:	08014510 	.word	0x08014510
 8001650:	20000424 	.word	0x20000424
 8001654:	2000710c 	.word	0x2000710c

08001658 <ADC_IRQHandler>:
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_Init+0x40>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_Init+0x40>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_Init+0x40>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 f94f 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fc3a 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f967 	bl	8001992 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016dc:	f000 f92f 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	200008bc 	.word	0x200008bc

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	200008bc 	.word	0x200008bc

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff3e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff31 	bl	80017ec <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff feb6 	bl	8001728 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e099      	b.n	8001afc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e8:	e00f      	b.n	8001a0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ea:	f7ff fe9d 	bl	8001728 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d908      	bls.n	8001a0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2220      	movs	r2, #32
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2203      	movs	r2, #3
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e078      	b.n	8001afc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e8      	bne.n	80019ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_DMA_Init+0x158>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d107      	bne.n	8001a74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f023 0307 	bic.w	r3, r3, #7
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d117      	bne.n	8001ace <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00e      	beq.n	8001ace <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fa7b 	bl	8001fac <DMA_CheckFifoParam>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aca:	2301      	movs	r3, #1
 8001acc:	e016      	b.n	8001afc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fa32 	bl	8001f40 <DMA_CalcBaseAndBitshift>
 8001adc:	4603      	mov	r3, r0
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	223f      	movs	r2, #63	; 0x3f
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	f010803f 	.word	0xf010803f

08001b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b16:	f7ff fe07 	bl	8001728 <HAL_GetTick>
 8001b1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d008      	beq.n	8001b3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e052      	b.n	8001be0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0216 	bic.w	r2, r2, #22
 8001b48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <HAL_DMA_Abort+0x62>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8a:	e013      	b.n	8001bb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8c:	f7ff fdcc 	bl	8001728 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	d90c      	bls.n	8001bb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e015      	b.n	8001be0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1e4      	bne.n	8001b8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	223f      	movs	r2, #63	; 0x3f
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d004      	beq.n	8001c06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00c      	b.n	8001c20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2205      	movs	r2, #5
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0201 	bic.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c38:	4b8e      	ldr	r3, [pc, #568]	; (8001e74 <HAL_DMA_IRQHandler+0x248>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a8e      	ldr	r2, [pc, #568]	; (8001e78 <HAL_DMA_IRQHandler+0x24c>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2208      	movs	r2, #8
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01a      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	2208      	movs	r2, #8
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	f043 0202 	orr.w	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d012      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2210      	movs	r2, #16
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d043      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03c      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2210      	movs	r2, #16
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d018      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d024      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
 8001d5a:	e01f      	b.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
 8001d6c:	e016      	b.n	8001d9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0208 	bic.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	2220      	movs	r2, #32
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 808f 	beq.w	8001ecc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8087 	beq.w	8001ecc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d136      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0216 	bic.w	r2, r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_DMA_IRQHandler+0x1da>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	223f      	movs	r2, #63	; 0x3f
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d07e      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
        }
        return;
 8001e42:	e079      	b.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01d      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10d      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d031      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
 8001e70:	e02c      	b.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000
 8001e78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
 8001e8c:	e01e      	b.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10f      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0210 	bic.w	r2, r2, #16
 8001eaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d032      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d022      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2205      	movs	r2, #5
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	3301      	adds	r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d307      	bcc.n	8001f14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f2      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x2cc>
 8001f12:	e000      	b.n	8001f16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
 8001f36:	e000      	b.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f38:	bf00      	nop
    }
  }
}
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3b10      	subs	r3, #16
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f5a:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d909      	bls.n	8001f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	1d1a      	adds	r2, r3, #4
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f80:	e007      	b.n	8001f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	aaaaaaab 	.word	0xaaaaaaab
 8001fa8:	08014498 	.word	0x08014498

08001fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11f      	bne.n	8002006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d856      	bhi.n	800207a <DMA_CheckFifoParam+0xce>
 8001fcc:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <DMA_CheckFifoParam+0x28>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08001fe5 	.word	0x08001fe5
 8001fd8:	08001ff7 	.word	0x08001ff7
 8001fdc:	08001fe5 	.word	0x08001fe5
 8001fe0:	0800207b 	.word	0x0800207b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d046      	beq.n	800207e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff4:	e043      	b.n	800207e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ffe:	d140      	bne.n	8002082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002004:	e03d      	b.n	8002082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200e:	d121      	bne.n	8002054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d837      	bhi.n	8002086 <DMA_CheckFifoParam+0xda>
 8002016:	a201      	add	r2, pc, #4	; (adr r2, 800201c <DMA_CheckFifoParam+0x70>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	0800202d 	.word	0x0800202d
 8002020:	08002033 	.word	0x08002033
 8002024:	0800202d 	.word	0x0800202d
 8002028:	08002045 	.word	0x08002045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      break;
 8002030:	e030      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d025      	beq.n	800208a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002042:	e022      	b.n	800208a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800204c:	d11f      	bne.n	800208e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002052:	e01c      	b.n	800208e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d903      	bls.n	8002062 <DMA_CheckFifoParam+0xb6>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d003      	beq.n	8002068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002060:	e018      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      break;
 8002066:	e015      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e00b      	b.n	8002092 <DMA_CheckFifoParam+0xe6>
      break;
 800207a:	bf00      	nop
 800207c:	e00a      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e008      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e006      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002086:	bf00      	nop
 8002088:	e004      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
 800208c:	e002      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;   
 800208e:	bf00      	nop
 8002090:	e000      	b.n	8002094 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
    }
  } 
  
  return status; 
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e159      	b.n	8002374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8148 	bne.w	800236e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d005      	beq.n	80020f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d130      	bne.n	8002158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0201 	and.w	r2, r3, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d017      	beq.n	8002194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a2 	beq.w	800236e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <HAL_GPIO_Init+0x2e8>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a56      	ldr	r2, [pc, #344]	; (800238c <HAL_GPIO_Init+0x2e8>)
 8002234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b54      	ldr	r3, [pc, #336]	; (800238c <HAL_GPIO_Init+0x2e8>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002246:	4a52      	ldr	r2, [pc, #328]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a49      	ldr	r2, [pc, #292]	; (8002394 <HAL_GPIO_Init+0x2f0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_GPIO_Init+0x202>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a48      	ldr	r2, [pc, #288]	; (8002398 <HAL_GPIO_Init+0x2f4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x1fe>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a47      	ldr	r2, [pc, #284]	; (800239c <HAL_GPIO_Init+0x2f8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x1fa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a46      	ldr	r2, [pc, #280]	; (80023a0 <HAL_GPIO_Init+0x2fc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x1f6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <HAL_GPIO_Init+0x300>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x1f2>
 8002292:	2304      	movs	r3, #4
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 8002296:	2307      	movs	r3, #7
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 80022a6:	2300      	movs	r3, #0
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b8:	4935      	ldr	r1, [pc, #212]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_GPIO_Init+0x304>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233e:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_GPIO_Init+0x304>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	f67f aea2 	bls.w	80020c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e12b      	b.n	800264a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fdaa 	bl	8000f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	; 0x24
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002444:	f002 fe60 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 8002448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a81      	ldr	r2, [pc, #516]	; (8002654 <HAL_I2C_Init+0x274>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d807      	bhi.n	8002464 <HAL_I2C_Init+0x84>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a80      	ldr	r2, [pc, #512]	; (8002658 <HAL_I2C_Init+0x278>)
 8002458:	4293      	cmp	r3, r2
 800245a:	bf94      	ite	ls
 800245c:	2301      	movls	r3, #1
 800245e:	2300      	movhi	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e006      	b.n	8002472 <HAL_I2C_Init+0x92>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a7d      	ldr	r2, [pc, #500]	; (800265c <HAL_I2C_Init+0x27c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	bf94      	ite	ls
 800246c:	2301      	movls	r3, #1
 800246e:	2300      	movhi	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0e7      	b.n	800264a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a78      	ldr	r2, [pc, #480]	; (8002660 <HAL_I2C_Init+0x280>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0c9b      	lsrs	r3, r3, #18
 8002484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a6a      	ldr	r2, [pc, #424]	; (8002654 <HAL_I2C_Init+0x274>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d802      	bhi.n	80024b4 <HAL_I2C_Init+0xd4>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3301      	adds	r3, #1
 80024b2:	e009      	b.n	80024c8 <HAL_I2C_Init+0xe8>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	4a69      	ldr	r2, [pc, #420]	; (8002664 <HAL_I2C_Init+0x284>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	3301      	adds	r3, #1
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	495c      	ldr	r1, [pc, #368]	; (8002654 <HAL_I2C_Init+0x274>)
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d819      	bhi.n	800251c <HAL_I2C_Init+0x13c>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1e59      	subs	r1, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f6:	1c59      	adds	r1, r3, #1
 80024f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024fc:	400b      	ands	r3, r1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_I2C_Init+0x138>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1e59      	subs	r1, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002510:	3301      	adds	r3, #1
 8002512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002516:	e051      	b.n	80025bc <HAL_I2C_Init+0x1dc>
 8002518:	2304      	movs	r3, #4
 800251a:	e04f      	b.n	80025bc <HAL_I2C_Init+0x1dc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d111      	bne.n	8002548 <HAL_I2C_Init+0x168>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e58      	subs	r0, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	440b      	add	r3, r1
 8002532:	fbb0 f3f3 	udiv	r3, r0, r3
 8002536:	3301      	adds	r3, #1
 8002538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e012      	b.n	800256e <HAL_I2C_Init+0x18e>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	0099      	lsls	r1, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	fbb0 f3f3 	udiv	r3, r0, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Init+0x196>
 8002572:	2301      	movs	r3, #1
 8002574:	e022      	b.n	80025bc <HAL_I2C_Init+0x1dc>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <HAL_I2C_Init+0x1bc>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1e58      	subs	r0, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	440b      	add	r3, r1
 800258c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259a:	e00f      	b.n	80025bc <HAL_I2C_Init+0x1dc>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	0099      	lsls	r1, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	6809      	ldr	r1, [r1, #0]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6911      	ldr	r1, [r2, #16]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68d2      	ldr	r2, [r2, #12]
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	000186a0 	.word	0x000186a0
 8002658:	001e847f 	.word	0x001e847f
 800265c:	003d08ff 	.word	0x003d08ff
 8002660:	431bde83 	.word	0x431bde83
 8002664:	10624dd3 	.word	0x10624dd3

08002668 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	461a      	mov	r2, r3
 8002674:	460b      	mov	r3, r1
 8002676:	817b      	strh	r3, [r7, #10]
 8002678:	4613      	mov	r3, r2
 800267a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff f854 	bl	8001728 <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	f040 80e0 	bne.w	8002850 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	4970      	ldr	r1, [pc, #448]	; (800285c <HAL_I2C_Master_Transmit+0x1f4>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fc58 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0d3      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_I2C_Master_Transmit+0x50>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e0cc      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d007      	beq.n	80026de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2221      	movs	r2, #33	; 0x21
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2210      	movs	r2, #16
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	893a      	ldrh	r2, [r7, #8]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a50      	ldr	r2, [pc, #320]	; (8002860 <HAL_I2C_Master_Transmit+0x1f8>)
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fac2 	bl	8002cb0 <I2C_MasterRequestWrite>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e08d      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800274c:	e066      	b.n	800281c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	6a39      	ldr	r1, [r7, #32]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fcd2 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b04      	cmp	r3, #4
 8002764:	d107      	bne.n	8002776 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06b      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d11b      	bne.n	80027f0 <HAL_I2C_Master_Transmit+0x188>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d017      	beq.n	80027f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	781a      	ldrb	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	6a39      	ldr	r1, [r7, #32]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fcc2 	bl	800317e <I2C_WaitOnBTFFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	2b04      	cmp	r3, #4
 8002806:	d107      	bne.n	8002818 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002816:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e01a      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d194      	bne.n	800274e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	00100002 	.word	0x00100002
 8002860:	ffff0000 	.word	0xffff0000

08002864 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	461a      	mov	r2, r3
 8002870:	460b      	mov	r3, r1
 8002872:	817b      	strh	r3, [r7, #10]
 8002874:	4613      	mov	r3, r2
 8002876:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7fe ff56 	bl	8001728 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b20      	cmp	r3, #32
 8002888:	f040 820b 	bne.w	8002ca2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2319      	movs	r3, #25
 8002892:	2201      	movs	r2, #1
 8002894:	497c      	ldr	r1, [pc, #496]	; (8002a88 <HAL_I2C_Master_Receive+0x224>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fb5a 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
 80028a4:	e1fe      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_I2C_Master_Receive+0x50>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e1f7      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d007      	beq.n	80028da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2222      	movs	r2, #34	; 0x22
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2210      	movs	r2, #16
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	893a      	ldrh	r2, [r7, #8]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a5c      	ldr	r2, [pc, #368]	; (8002a8c <HAL_I2C_Master_Receive+0x228>)
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fa46 	bl	8002db4 <I2C_MasterRequestRead>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e1b8      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d113      	bne.n	8002962 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	623b      	str	r3, [r7, #32]
 800294e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e18c      	b.n	8002c7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	2b01      	cmp	r3, #1
 8002968:	d11b      	bne.n	80029a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e16c      	b.n	8002c7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d11b      	bne.n	80029e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	e14c      	b.n	8002c7c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a08:	e138      	b.n	8002c7c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	f200 80f1 	bhi.w	8002bf6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d123      	bne.n	8002a64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fbed 	bl	8003200 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e139      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a62:	e10b      	b.n	8002c7c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d14e      	bne.n	8002b0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	2200      	movs	r2, #0
 8002a74:	4906      	ldr	r1, [pc, #24]	; (8002a90 <HAL_I2C_Master_Receive+0x22c>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fa6a 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e10e      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
 8002a86:	bf00      	nop
 8002a88:	00100002 	.word	0x00100002
 8002a8c:	ffff0000 	.word	0xffff0000
 8002a90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b08:	e0b8      	b.n	8002c7c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	2200      	movs	r2, #0
 8002b12:	4966      	ldr	r1, [pc, #408]	; (8002cac <HAL_I2C_Master_Receive+0x448>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fa1b 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0bf      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	494f      	ldr	r1, [pc, #316]	; (8002cac <HAL_I2C_Master_Receive+0x448>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f9ed 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e091      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bf4:	e042      	b.n	8002c7c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fb00 	bl	8003200 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e04c      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d118      	bne.n	8002c7c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f47f aec2 	bne.w	8002a0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	00010004 	.word	0x00010004

08002cb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d006      	beq.n	8002cda <I2C_MasterRequestWrite+0x2a>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d003      	beq.n	8002cda <I2C_MasterRequestWrite+0x2a>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cd8:	d108      	bne.n	8002cec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e00b      	b.n	8002d04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	2b12      	cmp	r3, #18
 8002cf2:	d107      	bne.n	8002d04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f91d 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2a:	d103      	bne.n	8002d34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e035      	b.n	8002da4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d40:	d108      	bne.n	8002d54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d42:	897b      	ldrh	r3, [r7, #10]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d50:	611a      	str	r2, [r3, #16]
 8002d52:	e01b      	b.n	8002d8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d54:	897b      	ldrh	r3, [r7, #10]
 8002d56:	11db      	asrs	r3, r3, #7
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 0306 	and.w	r3, r3, #6
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f063 030f 	orn	r3, r3, #15
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	490e      	ldr	r1, [pc, #56]	; (8002dac <I2C_MasterRequestWrite+0xfc>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f943 	bl	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e010      	b.n	8002da4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4907      	ldr	r1, [pc, #28]	; (8002db0 <I2C_MasterRequestWrite+0x100>)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f933 	bl	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	00010008 	.word	0x00010008
 8002db0:	00010002 	.word	0x00010002

08002db4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d006      	beq.n	8002dee <I2C_MasterRequestRead+0x3a>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d003      	beq.n	8002dee <I2C_MasterRequestRead+0x3a>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dec:	d108      	bne.n	8002e00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e00b      	b.n	8002e18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	2b11      	cmp	r3, #17
 8002e06:	d107      	bne.n	8002e18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f893 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3e:	d103      	bne.n	8002e48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e079      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e54:	d108      	bne.n	8002e68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	e05f      	b.n	8002f28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	11db      	asrs	r3, r3, #7
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0306 	and.w	r3, r3, #6
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f063 030f 	orn	r3, r3, #15
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4930      	ldr	r1, [pc, #192]	; (8002f48 <I2C_MasterRequestRead+0x194>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8b9 	bl	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e054      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e96:	897b      	ldrh	r3, [r7, #10]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4929      	ldr	r1, [pc, #164]	; (8002f4c <I2C_MasterRequestRead+0x198>)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f8a9 	bl	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e044      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f831 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f02:	d103      	bne.n	8002f0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e017      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f10:	897b      	ldrh	r3, [r7, #10]
 8002f12:	11db      	asrs	r3, r3, #7
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0306 	and.w	r3, r3, #6
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f063 030e 	orn	r3, r3, #14
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <I2C_MasterRequestRead+0x198>)
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f865 	bl	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00010008 	.word	0x00010008
 8002f4c:	00010002 	.word	0x00010002

08002f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f60:	e025      	b.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f68:	d021      	beq.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe fbdd 	bl	8001728 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e023      	b.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10d      	bne.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	e00c      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d0b6      	beq.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800300c:	e051      	b.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301c:	d123      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003036:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0204 	orr.w	r2, r3, #4
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e046      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800306c:	d021      	beq.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe fb5b 	bl	8001728 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d116      	bne.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e020      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10c      	bne.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e00b      	b.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	43da      	mvns	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d18d      	bne.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003108:	e02d      	b.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f8ce 	bl	80032ac <I2C_IsAcknowledgeFailed>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e02d      	b.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003120:	d021      	beq.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fe fb01 	bl	8001728 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e007      	b.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d1ca      	bne.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800318a:	e02d      	b.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f88d 	bl	80032ac <I2C_IsAcknowledgeFailed>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e02d      	b.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a2:	d021      	beq.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a4:	f7fe fac0 	bl	8001728 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e007      	b.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d1ca      	bne.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800320c:	e042      	b.n	8003294 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b10      	cmp	r3, #16
 800321a:	d119      	bne.n	8003250 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0210 	mvn.w	r2, #16
 8003224:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e029      	b.n	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003250:	f7fe fa6a 	bl	8001728 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e007      	b.n	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d1b5      	bne.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d11b      	bne.n	80032fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0204 	orr.w	r2, r3, #4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e034      	b.n	8003386 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003324:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f245 5255 	movw	r2, #21845	; 0x5555
 800332e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003344:	f7fe f9f0 	bl	8001728 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800334a:	e00f      	b.n	800336c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800334c:	f7fe f9ec 	bl	8001728 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b31      	cmp	r3, #49	; 0x31
 8003358:	d908      	bls.n	800336c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e00c      	b.n	8003386 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e8      	bne.n	800334c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003382:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800339e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b0:	b08f      	sub	sp, #60	; 0x3c
 80033b2:	af0a      	add	r7, sp, #40	; 0x28
 80033b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e10f      	b.n	80035e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f010 face 	bl	801397c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2203      	movs	r2, #3
 80033e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 f965 	bl	80076ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	687e      	ldr	r6, [r7, #4]
 800340c:	466d      	mov	r5, sp
 800340e:	f106 0410 	add.w	r4, r6, #16
 8003412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800341e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003422:	1d33      	adds	r3, r6, #4
 8003424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f004 f83c 	bl	80074a4 <USB_CoreInit>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2202      	movs	r2, #2
 8003436:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0d0      	b.n	80035e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f004 f953 	bl	80076f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e04a      	b.n	80034e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	333d      	adds	r3, #61	; 0x3d
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	333c      	adds	r3, #60	; 0x3c
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	b298      	uxth	r0, r3
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3344      	adds	r3, #68	; 0x44
 800348c:	4602      	mov	r2, r0
 800348e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3340      	adds	r3, #64	; 0x40
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3348      	adds	r3, #72	; 0x48
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	334c      	adds	r3, #76	; 0x4c
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3354      	adds	r3, #84	; 0x54
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	3301      	adds	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d3af      	bcc.n	8003450 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e044      	b.n	8003580 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	3301      	adds	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d3b5      	bcc.n	80034f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	687e      	ldr	r6, [r7, #4]
 8003592:	466d      	mov	r5, sp
 8003594:	f106 0410 	add.w	r4, r6, #16
 8003598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80035a8:	1d33      	adds	r3, r6, #4
 80035aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ac:	6838      	ldr	r0, [r7, #0]
 80035ae:	f004 f8eb 	bl	8007788 <USB_DevInit>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e00d      	b.n	80035e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f005 fa3a 	bl	8008a52 <USB_DevDisconnect>

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_PCD_Start+0x1c>
 8003600:	2302      	movs	r3, #2
 8003602:	e020      	b.n	8003646 <HAL_PCD_Start+0x5e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	2b01      	cmp	r3, #1
 8003612:	d109      	bne.n	8003628 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003618:	2b01      	cmp	r3, #1
 800361a:	d005      	beq.n	8003628 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f004 f83d 	bl	80076ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f005 f9ea 	bl	8008a10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800364e:	b590      	push	{r4, r7, lr}
 8003650:	b08d      	sub	sp, #52	; 0x34
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f005 faa8 	bl	8008bba <USB_GetMode>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	f040 848a 	bne.w	8003f86 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f005 fa0c 	bl	8008a94 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8480 	beq.w	8003f84 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f005 f9f9 	bl	8008a94 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d107      	bne.n	80036bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f002 0202 	and.w	r2, r2, #2
 80036ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f005 f9e7 	bl	8008a94 <USB_ReadInterrupts>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d161      	bne.n	8003794 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0210 	bic.w	r2, r2, #16
 80036de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	0c5b      	lsrs	r3, r3, #17
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2b02      	cmp	r3, #2
 800370a:	d124      	bne.n	8003756 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d035      	beq.n	8003784 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003726:	b29b      	uxth	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	6a38      	ldr	r0, [r7, #32]
 800372c:	f005 f81e 	bl	800876c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800373c:	441a      	add	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800374e:	441a      	add	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	621a      	str	r2, [r3, #32]
 8003754:	e016      	b.n	8003784 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	0c5b      	lsrs	r3, r3, #17
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	2b06      	cmp	r3, #6
 8003760:	d110      	bne.n	8003784 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003768:	2208      	movs	r2, #8
 800376a:	4619      	mov	r1, r3
 800376c:	6a38      	ldr	r0, [r7, #32]
 800376e:	f004 fffd 	bl	800876c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800377e:	441a      	add	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0210 	orr.w	r2, r2, #16
 8003792:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f005 f97b 	bl	8008a94 <USB_ReadInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037a8:	f040 80a7 	bne.w	80038fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f005 f980 	bl	8008aba <USB_ReadDevAllOutEpInterrupt>
 80037ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80037bc:	e099      	b.n	80038f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 808e 	beq.w	80038e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f005 f9a4 	bl	8008b22 <USB_ReadDevOutEPInterrupt>
 80037da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	461a      	mov	r2, r3
 80037f4:	2301      	movs	r3, #1
 80037f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fec2 	bl	8004584 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003816:	461a      	mov	r2, r3
 8003818:	2308      	movs	r3, #8
 800381a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800381c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 ff98 	bl	8004754 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	2310      	movs	r3, #16
 800383e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d030      	beq.n	80038ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b80      	cmp	r3, #128	; 0x80
 8003854:	d109      	bne.n	800386a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003868:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4413      	add	r3, r2
 800387c:	3304      	adds	r3, #4
 800387e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	78db      	ldrb	r3, [r3, #3]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d108      	bne.n	800389a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2200      	movs	r2, #0
 800388c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f010 f96d 	bl	8013b74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	461a      	mov	r2, r3
 80038a8:	2302      	movs	r3, #2
 80038aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	461a      	mov	r2, r3
 80038c4:	2320      	movs	r3, #32
 80038c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038de:	461a      	mov	r2, r3
 80038e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	3301      	adds	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f47f af62 	bne.w	80037be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f005 f8c8 	bl	8008a94 <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800390e:	f040 80db 	bne.w	8003ac8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f005 f8e9 	bl	8008aee <USB_ReadDevAllInEpInterrupt>
 800391c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003922:	e0cd      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80c2 	beq.w	8003ab4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f005 f90f 	bl	8008b5e <USB_ReadDevInEPInterrupt>
 8003940:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d057      	beq.n	80039fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	2201      	movs	r2, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43db      	mvns	r3, r3
 8003966:	69f9      	ldr	r1, [r7, #28]
 8003968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800396c:	4013      	ands	r3, r2
 800396e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	461a      	mov	r2, r3
 800397e:	2301      	movs	r3, #1
 8003980:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d132      	bne.n	80039f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	334c      	adds	r3, #76	; 0x4c
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4403      	add	r3, r0
 80039aa:	3348      	adds	r3, #72	; 0x48
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4419      	add	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4403      	add	r3, r0
 80039be:	334c      	adds	r3, #76	; 0x4c
 80039c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d113      	bne.n	80039f0 <HAL_PCD_IRQHandler+0x3a2>
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3354      	adds	r3, #84	; 0x54
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d108      	bne.n	80039f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039e8:	461a      	mov	r2, r3
 80039ea:	2101      	movs	r1, #1
 80039ec:	f005 f916 	bl	8008c1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f010 f841 	bl	8013a7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	461a      	mov	r2, r3
 8003a14:	2308      	movs	r3, #8
 8003a16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2310      	movs	r3, #16
 8003a32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2340      	movs	r3, #64	; 0x40
 8003a4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d023      	beq.n	8003aa2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5c:	6a38      	ldr	r0, [r7, #32]
 8003a5e:	f003 fff7 	bl	8007a50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	3338      	adds	r3, #56	; 0x38
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	3304      	adds	r3, #4
 8003a74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	78db      	ldrb	r3, [r3, #3]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d108      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f010 f884 	bl	8013b98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fcdb 	bl	800446a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f47f af2e 	bne.w	8003924 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f004 ffe1 	bl	8008a94 <USB_ReadInterrupts>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003adc:	d122      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d108      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b04:	2100      	movs	r1, #0
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fec2 	bl	8004890 <HAL_PCDEx_LPM_Callback>
 8003b0c:	e002      	b.n	8003b14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f010 f822 	bl	8013b58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 ffb3 	bl	8008a94 <USB_ReadInterrupts>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	d112      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d102      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f00f ffde 	bl	8013b0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b5e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 ff95 	bl	8008a94 <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	f040 80b7 	bne.w	8003ce6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2110      	movs	r1, #16
 8003b92:	4618      	mov	r0, r3
 8003b94:	f003 ff5c 	bl	8007a50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9c:	e046      	b.n	8003c2c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003baa:	461a      	mov	r2, r3
 8003bac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	461a      	mov	r2, r3
 8003be0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	3301      	adds	r3, #1
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3b3      	bcc.n	8003b9e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c44:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c48:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d016      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c62:	f043 030b 	orr.w	r3, r3, #11
 8003c66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c78:	f043 030b 	orr.w	r3, r3, #11
 8003c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7e:	e015      	b.n	8003cac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c92:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c96:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca6:	f043 030b 	orr.w	r3, r3, #11
 8003caa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cbe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f004 ffa3 	bl	8008c1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 fed2 	bl	8008a94 <USB_ReadInterrupts>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfa:	d124      	bne.n	8003d46 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 ff68 	bl	8008bd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f003 ff1d 	bl	8007b4a <USB_GetDevSpeed>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681c      	ldr	r4, [r3, #0]
 8003d1c:	f001 f9e8 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 8003d20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f003 fc1c 	bl	8007568 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f00f fecc 	bl	8013ace <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f004 fea2 	bl	8008a94 <USB_ReadInterrupts>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d10a      	bne.n	8003d70 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f00f fea9 	bl	8013ab2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f002 0208 	and.w	r2, r2, #8
 8003d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f004 fe8d 	bl	8008a94 <USB_ReadInterrupts>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b80      	cmp	r3, #128	; 0x80
 8003d82:	d122      	bne.n	8003dca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d90:	2301      	movs	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
 8003d94:	e014      	b.n	8003dc0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d105      	bne.n	8003dba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fb27 	bl	8004408 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3e5      	bcc.n	8003d96 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f004 fe60 	bl	8008a94 <USB_ReadInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dde:	d13b      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003de0:	2301      	movs	r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	e02b      	b.n	8003e3e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3340      	adds	r3, #64	; 0x40
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d115      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	da12      	bge.n	8003e38 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	333f      	adds	r3, #63	; 0x3f
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fae8 	bl	8004408 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d3ce      	bcc.n	8003de6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f004 fe19 	bl	8008a94 <USB_ReadInterrupts>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e6c:	d155      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e6e:	2301      	movs	r3, #1
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
 8003e72:	e045      	b.n	8003f00 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d12e      	bne.n	8003efa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da2b      	bge.n	8003efa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003eae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d121      	bne.n	8003efa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef6:	6053      	str	r3, [r2, #4]
            break;
 8003ef8:	e007      	b.n	8003f0a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	3301      	adds	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d3b4      	bcc.n	8003e74 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 fdb8 	bl	8008a94 <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d10a      	bne.n	8003f46 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f00f fe43 	bl	8013bbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f004 fda2 	bl	8008a94 <USB_ReadInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d115      	bne.n	8003f86 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f00f fe33 	bl	8013bd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	e000      	b.n	8003f86 <HAL_PCD_IRQHandler+0x938>
      return;
 8003f84:	bf00      	nop
    }
  }
}
 8003f86:	3734      	adds	r7, #52	; 0x34
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd90      	pop	{r4, r7, pc}

08003f8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_PCD_SetAddress+0x1a>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e013      	b.n	8003fce <HAL_PCD_SetAddress+0x42>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f004 fd00 	bl	80089c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	4608      	mov	r0, r1
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	70fb      	strb	r3, [r7, #3]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	803b      	strh	r3, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	da0f      	bge.n	800401c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 020f 	and.w	r2, r3, #15
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	3338      	adds	r3, #56	; 0x38
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	705a      	strb	r2, [r3, #1]
 800401a:	e00f      	b.n	800403c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004048:	883a      	ldrh	r2, [r7, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	78ba      	ldrb	r2, [r7, #2]
 8004052:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004066:	78bb      	ldrb	r3, [r7, #2]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d102      	bne.n	8004072 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_PCD_EP_Open+0xaa>
 800407c:	2302      	movs	r3, #2
 800407e:	e00e      	b.n	800409e <HAL_PCD_EP_Open+0xc8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68f9      	ldr	r1, [r7, #12]
 800408e:	4618      	mov	r0, r3
 8004090:	f003 fd80 	bl	8007b94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800409c:	7afb      	ldrb	r3, [r7, #11]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da0f      	bge.n	80040da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 020f 	and.w	r2, r3, #15
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	3338      	adds	r3, #56	; 0x38
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	3304      	adds	r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	705a      	strb	r2, [r3, #1]
 80040d8:	e00f      	b.n	80040fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	f003 020f 	and.w	r2, r3, #15
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	3304      	adds	r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_PCD_EP_Close+0x6e>
 8004110:	2302      	movs	r3, #2
 8004112:	e00e      	b.n	8004132 <HAL_PCD_EP_Close+0x8c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68f9      	ldr	r1, [r7, #12]
 8004122:	4618      	mov	r0, r3
 8004124:	f003 fdbe 	bl	8007ca4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	460b      	mov	r3, r1
 8004148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	f003 020f 	and.w	r2, r3, #15
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	3304      	adds	r3, #4
 8004162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2200      	movs	r2, #0
 8004174:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	b2da      	uxtb	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d102      	bne.n	8004196 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	6979      	ldr	r1, [r7, #20]
 80041ae:	f004 f89d 	bl	80082ec <USB_EP0StartXfer>
 80041b2:	e008      	b.n	80041c6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	6979      	ldr	r1, [r7, #20]
 80041c2:	f003 fe4b 	bl	8007e5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 020f 	and.w	r2, r3, #15
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004210:	7afb      	ldrb	r3, [r7, #11]
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	3338      	adds	r3, #56	; 0x38
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	3304      	adds	r3, #4
 8004226:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2201      	movs	r2, #1
 800423e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004240:	7afb      	ldrb	r3, [r7, #11]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	b2da      	uxtb	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d102      	bne.n	800425a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800425a:	7afb      	ldrb	r3, [r7, #11]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	6979      	ldr	r1, [r7, #20]
 8004272:	f004 f83b 	bl	80082ec <USB_EP0StartXfer>
 8004276:	e008      	b.n	800428a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	6979      	ldr	r1, [r7, #20]
 8004286:	f003 fde9 	bl	8007e5c <USB_EPStartXfer>
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d901      	bls.n	80042b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e050      	b.n	8004354 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	da0f      	bge.n	80042da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	f003 020f 	and.w	r2, r3, #15
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	3338      	adds	r3, #56	; 0x38
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	3304      	adds	r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	705a      	strb	r2, [r3, #1]
 80042d8:	e00d      	b.n	80042f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042da:	78fa      	ldrb	r2, [r7, #3]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	3304      	adds	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_PCD_EP_SetStall+0x82>
 8004312:	2302      	movs	r3, #2
 8004314:	e01e      	b.n	8004354 <HAL_PCD_EP_SetStall+0xc0>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	4618      	mov	r0, r3
 8004326:	f004 fa79 	bl	800881c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	b2d9      	uxtb	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004344:	461a      	mov	r2, r3
 8004346:	f004 fc69 	bl	8008c1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	f003 020f 	and.w	r2, r3, #15
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d901      	bls.n	800437a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e042      	b.n	8004400 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800437a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800437e:	2b00      	cmp	r3, #0
 8004380:	da0f      	bge.n	80043a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	f003 020f 	and.w	r2, r3, #15
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	3338      	adds	r3, #56	; 0x38
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	3304      	adds	r3, #4
 8004398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	705a      	strb	r2, [r3, #1]
 80043a0:	e00f      	b.n	80043c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_PCD_EP_ClrStall+0x86>
 80043de:	2302      	movs	r3, #2
 80043e0:	e00e      	b.n	8004400 <HAL_PCD_EP_ClrStall+0xa4>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f004 fa81 	bl	80088f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004418:	2b00      	cmp	r3, #0
 800441a:	da0c      	bge.n	8004436 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	f003 020f 	and.w	r2, r3, #15
 8004422:	4613      	mov	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	3338      	adds	r3, #56	; 0x38
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	4413      	add	r3, r2
 8004430:	3304      	adds	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e00c      	b.n	8004450 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4413      	add	r3, r2
 800444c:	3304      	adds	r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	4618      	mov	r0, r3
 8004458:	f004 f8a0 	bl	800859c <USB_EPStopXfer>
 800445c:	4603      	mov	r3, r0
 800445e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004460:	7afb      	ldrb	r3, [r7, #11]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b08a      	sub	sp, #40	; 0x28
 800446e:	af02      	add	r7, sp, #8
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	3338      	adds	r3, #56	; 0x38
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4413      	add	r3, r2
 800448e:	3304      	adds	r3, #4
 8004490:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a1a      	ldr	r2, [r3, #32]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	429a      	cmp	r2, r3
 800449c:	d901      	bls.n	80044a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e06c      	b.n	800457c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d902      	bls.n	80044be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3303      	adds	r3, #3
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044c6:	e02b      	b.n	8004520 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d902      	bls.n	80044e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	3303      	adds	r3, #3
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6919      	ldr	r1, [r3, #16]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	4603      	mov	r3, r0
 8004502:	6978      	ldr	r0, [r7, #20]
 8004504:	f004 f8f4 	bl	80086f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	441a      	add	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	b29b      	uxth	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	429a      	cmp	r2, r3
 8004534:	d809      	bhi.n	800454a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800453e:	429a      	cmp	r2, r3
 8004540:	d203      	bcs.n	800454a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1be      	bne.n	80044c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	429a      	cmp	r2, r3
 8004554:	d811      	bhi.n	800457a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	2201      	movs	r2, #1
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	43db      	mvns	r3, r3
 8004570:	6939      	ldr	r1, [r7, #16]
 8004572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004576:	4013      	ands	r3, r2
 8004578:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	333c      	adds	r3, #60	; 0x3c
 800459c:	3304      	adds	r3, #4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d17b      	bne.n	80046b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d015      	beq.n	80045f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4a61      	ldr	r2, [pc, #388]	; (800474c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	f240 80b9 	bls.w	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80b3 	beq.w	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	461a      	mov	r2, r3
 80045e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ec:	6093      	str	r3, [r2, #8]
 80045ee:	e0a7      	b.n	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	461a      	mov	r2, r3
 8004608:	2320      	movs	r3, #32
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	e098      	b.n	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 8093 	bne.w	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4a4b      	ldr	r2, [pc, #300]	; (800474c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d90f      	bls.n	8004642 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	461a      	mov	r2, r3
 800463a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463e:	6093      	str	r3, [r2, #8]
 8004640:	e07e      	b.n	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	3304      	adds	r3, #4
 8004656:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	0159      	lsls	r1, r3, #5
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	440b      	add	r3, r1
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d114      	bne.n	80046a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800468c:	461a      	mov	r2, r3
 800468e:	2101      	movs	r1, #1
 8004690:	f004 fac4 	bl	8008c1c <USB_EP0_OutStart>
 8004694:	e006      	b.n	80046a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	441a      	add	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f00f f9cc 	bl	8013a48 <HAL_PCD_DataOutStageCallback>
 80046b0:	e046      	b.n	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d124      	bne.n	8004704 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	461a      	mov	r2, r3
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	6093      	str	r3, [r2, #8]
 80046d8:	e032      	b.n	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	461a      	mov	r2, r3
 80046f2:	2320      	movs	r3, #32
 80046f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	4619      	mov	r1, r3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f00f f9a3 	bl	8013a48 <HAL_PCD_DataOutStageCallback>
 8004702:	e01d      	b.n	8004740 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d114      	bne.n	8004734 <PCD_EP_OutXfrComplete_int+0x1b0>
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d108      	bne.n	8004734 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800472c:	461a      	mov	r2, r3
 800472e:	2100      	movs	r1, #0
 8004730:	f004 fa74 	bl	8008c1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f00f f984 	bl	8013a48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	4f54300a 	.word	0x4f54300a
 8004750:	4f54310a 	.word	0x4f54310a

08004754 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	333c      	adds	r3, #60	; 0x3c
 800476c:	3304      	adds	r3, #4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a15      	ldr	r2, [pc, #84]	; (80047dc <PCD_EP_OutSetupPacket_int+0x88>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d90e      	bls.n	80047a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	461a      	mov	r2, r3
 80047a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f00f f93b 	bl	8013a24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <PCD_EP_OutSetupPacket_int+0x88>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d90c      	bls.n	80047d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d108      	bne.n	80047d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047c8:	461a      	mov	r2, r3
 80047ca:	2101      	movs	r1, #1
 80047cc:	f004 fa26 	bl	8008c1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	4f54300a 	.word	0x4f54300a

080047e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
 80047ec:	4613      	mov	r3, r2
 80047ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047fe:	883b      	ldrh	r3, [r7, #0]
 8004800:	0419      	lsls	r1, r3, #16
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	430a      	orrs	r2, r1
 800480a:	629a      	str	r2, [r3, #40]	; 0x28
 800480c:	e028      	b.n	8004860 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	4413      	add	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]
 8004820:	e00d      	b.n	800483e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	3340      	adds	r3, #64	; 0x40
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4413      	add	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	3301      	adds	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
 800483e:	7bfa      	ldrb	r2, [r7, #15]
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	3b01      	subs	r3, #1
 8004844:	429a      	cmp	r2, r3
 8004846:	d3ec      	bcc.n	8004822 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004848:	883b      	ldrh	r3, [r7, #0]
 800484a:	0418      	lsls	r0, r3, #16
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	3b01      	subs	r3, #1
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	4302      	orrs	r2, r0
 8004858:	3340      	adds	r3, #64	; 0x40
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e267      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d075      	beq.n	80049b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048c6:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d00c      	beq.n	80048ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b85      	ldr	r3, [pc, #532]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d112      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b82      	ldr	r3, [pc, #520]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ea:	d10b      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4b7e      	ldr	r3, [pc, #504]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05b      	beq.n	80049b0 <HAL_RCC_OscConfig+0x108>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d157      	bne.n	80049b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e242      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d106      	bne.n	800491c <HAL_RCC_OscConfig+0x74>
 800490e:	4b76      	ldr	r3, [pc, #472]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a75      	ldr	r2, [pc, #468]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e01d      	b.n	8004958 <HAL_RCC_OscConfig+0xb0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x98>
 8004926:	4b70      	ldr	r3, [pc, #448]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6f      	ldr	r2, [pc, #444]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b6d      	ldr	r3, [pc, #436]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6c      	ldr	r2, [pc, #432]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0xb0>
 8004940:	4b69      	ldr	r3, [pc, #420]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a68      	ldr	r2, [pc, #416]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b66      	ldr	r3, [pc, #408]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a65      	ldr	r2, [pc, #404]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fc fee2 	bl	8001728 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004968:	f7fc fede 	bl	8001728 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e207      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	4b5b      	ldr	r3, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0xc0>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fc fece 	bl	8001728 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004990:	f7fc feca 	bl	8001728 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1f3      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	4b51      	ldr	r3, [pc, #324]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0xe8>
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d063      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049be:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d11c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b44      	ldr	r3, [pc, #272]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d116      	bne.n	8004a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e2:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_RCC_OscConfig+0x152>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e1c7      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fa:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4937      	ldr	r1, [pc, #220]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0e:	e03a      	b.n	8004a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a18:	4b34      	ldr	r3, [pc, #208]	; (8004aec <HAL_RCC_OscConfig+0x244>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fc fe83 	bl	8001728 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a26:	f7fc fe7f 	bl	8001728 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e1a8      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a38:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4925      	ldr	r1, [pc, #148]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]
 8004a58:	e015      	b.n	8004a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <HAL_RCC_OscConfig+0x244>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fc fe62 	bl	8001728 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a68:	f7fc fe5e 	bl	8001728 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e187      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d036      	beq.n	8004b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9a:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <HAL_RCC_OscConfig+0x248>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fc fe42 	bl	8001728 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa8:	f7fc fe3e 	bl	8001728 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e167      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x200>
 8004ac6:	e01b      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_OscConfig+0x248>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fc fe2b 	bl	8001728 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad4:	e00e      	b.n	8004af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad6:	f7fc fe27 	bl	8001728 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d907      	bls.n	8004af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e150      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	42470000 	.word	0x42470000
 8004af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ea      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8097 	beq.w	8004c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b81      	ldr	r3, [pc, #516]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10f      	bne.n	8004b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	4b7d      	ldr	r3, [pc, #500]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	4a7c      	ldr	r2, [pc, #496]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2e:	4b7a      	ldr	r3, [pc, #488]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3e:	4b77      	ldr	r3, [pc, #476]	; (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d118      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4a:	4b74      	ldr	r3, [pc, #464]	; (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a73      	ldr	r2, [pc, #460]	; (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b56:	f7fc fde7 	bl	8001728 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5e:	f7fc fde3 	bl	8001728 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e10c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	4b6a      	ldr	r3, [pc, #424]	; (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_OscConfig+0x2ea>
 8004b84:	4b64      	ldr	r3, [pc, #400]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	4a63      	ldr	r2, [pc, #396]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b90:	e01c      	b.n	8004bcc <HAL_RCC_OscConfig+0x324>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x30c>
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	4a5e      	ldr	r2, [pc, #376]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba6:	4b5c      	ldr	r3, [pc, #368]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a5b      	ldr	r2, [pc, #364]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0x324>
 8004bb4:	4b58      	ldr	r3, [pc, #352]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a57      	ldr	r2, [pc, #348]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc0:	4b55      	ldr	r3, [pc, #340]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	4a54      	ldr	r2, [pc, #336]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fc fda8 	bl	8001728 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fc fda4 	bl	8001728 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0cb      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ee      	beq.n	8004bdc <HAL_RCC_OscConfig+0x334>
 8004bfe:	e014      	b.n	8004c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c00:	f7fc fd92 	bl	8001728 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fc fd8e 	bl	8001728 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0b5      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ee      	bne.n	8004c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c30:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	4a38      	ldr	r2, [pc, #224]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80a1 	beq.w	8004d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c46:	4b34      	ldr	r3, [pc, #208]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d05c      	beq.n	8004d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d141      	bne.n	8004cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fc fd62 	bl	8001728 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fc fd5e 	bl	8001728 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e087      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69da      	ldr	r2, [r3, #28]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	491b      	ldr	r1, [pc, #108]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fc fd37 	bl	8001728 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fc fd33 	bl	8001728 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e05c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x416>
 8004cdc:	e054      	b.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fc fd20 	bl	8001728 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fc fd1c 	bl	8001728 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e045      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x444>
 8004d0a:	e03d      	b.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e038      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <HAL_RCC_OscConfig+0x4ec>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d028      	beq.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d121      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d11a      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d111      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800

08004d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0cc      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dac:	4b68      	ldr	r3, [pc, #416]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d90c      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b65      	ldr	r3, [pc, #404]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b63      	ldr	r3, [pc, #396]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0b8      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dec:	4b59      	ldr	r3, [pc, #356]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a58      	ldr	r2, [pc, #352]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e04:	4b53      	ldr	r3, [pc, #332]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a52      	ldr	r2, [pc, #328]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b50      	ldr	r3, [pc, #320]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	494d      	ldr	r1, [pc, #308]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d044      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d119      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e56:	4b3f      	ldr	r3, [pc, #252]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e06f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e067      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e76:	4b37      	ldr	r3, [pc, #220]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f023 0203 	bic.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4934      	ldr	r1, [pc, #208]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e88:	f7fc fc4e 	bl	8001728 <HAL_GetTick>
 8004e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e90:	f7fc fc4a 	bl	8001728 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e04f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 020c 	and.w	r2, r3, #12
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d1eb      	bne.n	8004e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d20c      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b22      	ldr	r3, [pc, #136]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e032      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eec:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4916      	ldr	r1, [pc, #88]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0a:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	490e      	ldr	r1, [pc, #56]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f1e:	f000 f821 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	490a      	ldr	r1, [pc, #40]	; (8004f58 <HAL_RCC_ClockConfig+0x1c0>)
 8004f30:	5ccb      	ldrb	r3, [r1, r3]
 8004f32:	fa22 f303 	lsr.w	r3, r2, r3
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc fbae 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023c00 	.word	0x40023c00
 8004f54:	40023800 	.word	0x40023800
 8004f58:	08014480 	.word	0x08014480
 8004f5c:	20000000 	.word	0x20000000
 8004f60:	20000004 	.word	0x20000004

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f68:	b090      	sub	sp, #64	; 0x40
 8004f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f70:	2300      	movs	r3, #0
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f74:	2300      	movs	r3, #0
 8004f76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f7c:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d00d      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	f200 80a1 	bhi.w	80050d0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x34>
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f96:	e09b      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f9c:	e09b      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f9e:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_GetSysClockFreq+0x188>)
 8004fa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fa2:	e098      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa4:	4b4f      	ldr	r3, [pc, #316]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fae:	4b4d      	ldr	r3, [pc, #308]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d028      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fba:	4b4a      	ldr	r3, [pc, #296]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	623b      	str	r3, [r7, #32]
 8004fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_RCC_GetSysClockFreq+0x188>)
 8004fd0:	fb03 f201 	mul.w	r2, r3, r1
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	fb00 f303 	mul.w	r3, r0, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	4a43      	ldr	r2, [pc, #268]	; (80050ec <HAL_RCC_GetSysClockFreq+0x188>)
 8004fde:	fba0 1202 	umull	r1, r2, r0, r2
 8004fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fea:	4413      	add	r3, r2
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	61fa      	str	r2, [r7, #28]
 8004ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ffe:	f7fb f8ef 	bl	80001e0 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4613      	mov	r3, r2
 8005008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800500a:	e053      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500c:	4b35      	ldr	r3, [pc, #212]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	099b      	lsrs	r3, r3, #6
 8005012:	2200      	movs	r2, #0
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	617a      	str	r2, [r7, #20]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800501e:	f04f 0b00 	mov.w	fp, #0
 8005022:	4652      	mov	r2, sl
 8005024:	465b      	mov	r3, fp
 8005026:	f04f 0000 	mov.w	r0, #0
 800502a:	f04f 0100 	mov.w	r1, #0
 800502e:	0159      	lsls	r1, r3, #5
 8005030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005034:	0150      	lsls	r0, r2, #5
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	ebb2 080a 	subs.w	r8, r2, sl
 800503e:	eb63 090b 	sbc.w	r9, r3, fp
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800504e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005052:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005056:	ebb2 0408 	subs.w	r4, r2, r8
 800505a:	eb63 0509 	sbc.w	r5, r3, r9
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	00eb      	lsls	r3, r5, #3
 8005068:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800506c:	00e2      	lsls	r2, r4, #3
 800506e:	4614      	mov	r4, r2
 8005070:	461d      	mov	r5, r3
 8005072:	eb14 030a 	adds.w	r3, r4, sl
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	eb45 030b 	adc.w	r3, r5, fp
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800508a:	4629      	mov	r1, r5
 800508c:	028b      	lsls	r3, r1, #10
 800508e:	4621      	mov	r1, r4
 8005090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005094:	4621      	mov	r1, r4
 8005096:	028a      	lsls	r2, r1, #10
 8005098:	4610      	mov	r0, r2
 800509a:	4619      	mov	r1, r3
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	2200      	movs	r2, #0
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	60fa      	str	r2, [r7, #12]
 80050a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050a8:	f7fb f89a 	bl	80001e0 <__aeabi_uldivmod>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4613      	mov	r3, r2
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	3301      	adds	r3, #1
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80050c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050ce:	e002      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3740      	adds	r7, #64	; 0x40
 80050dc:	46bd      	mov	sp, r7
 80050de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800
 80050e8:	00f42400 	.word	0x00f42400
 80050ec:	017d7840 	.word	0x017d7840

080050f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f4:	4b03      	ldr	r3, [pc, #12]	; (8005104 <HAL_RCC_GetHCLKFreq+0x14>)
 80050f6:	681b      	ldr	r3, [r3, #0]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000000 	.word	0x20000000

08005108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800510c:	f7ff fff0 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	0a9b      	lsrs	r3, r3, #10
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4903      	ldr	r1, [pc, #12]	; (800512c <HAL_RCC_GetPCLK1Freq+0x24>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40023800 	.word	0x40023800
 800512c:	08014490 	.word	0x08014490

08005130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005134:	f7ff ffdc 	bl	80050f0 <HAL_RCC_GetHCLKFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	0b5b      	lsrs	r3, r3, #13
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	4903      	ldr	r1, [pc, #12]	; (8005154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40023800 	.word	0x40023800
 8005154:	08014490 	.word	0x08014490

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800517c:	2b00      	cmp	r3, #0
 800517e:	d038      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005180:	4b68      	ldr	r3, [pc, #416]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005186:	f7fc facf 	bl	8001728 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800518e:	f7fc facb 	bl	8001728 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e0bd      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a0:	4b61      	ldr	r3, [pc, #388]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	019b      	lsls	r3, r3, #6
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	071b      	lsls	r3, r3, #28
 80051be:	495a      	ldr	r1, [pc, #360]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051c6:	4b57      	ldr	r3, [pc, #348]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051cc:	f7fc faac 	bl	8001728 <HAL_GetTick>
 80051d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051d4:	f7fc faa8 	bl	8001728 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e09a      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051e6:	4b50      	ldr	r3, [pc, #320]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8083 	beq.w	8005306 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	4b48      	ldr	r3, [pc, #288]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	4a47      	ldr	r2, [pc, #284]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	6413      	str	r3, [r2, #64]	; 0x40
 8005210:	4b45      	ldr	r3, [pc, #276]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800521c:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a42      	ldr	r2, [pc, #264]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005226:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005228:	f7fc fa7e 	bl	8001728 <HAL_GetTick>
 800522c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005230:	f7fc fa7a 	bl	8001728 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e06c      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005242:	4b3a      	ldr	r3, [pc, #232]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800524e:	4b36      	ldr	r3, [pc, #216]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005256:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d02f      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x166>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	429a      	cmp	r2, r3
 800526a:	d028      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800526c:	4b2e      	ldr	r3, [pc, #184]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005276:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800527c:	4b2c      	ldr	r3, [pc, #176]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005282:	4a29      	ldr	r2, [pc, #164]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005288:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	d114      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005294:	f7fc fa48 	bl	8001728 <HAL_GetTick>
 8005298:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529a:	e00a      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800529c:	f7fc fa44 	bl	8001728 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e034      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b2:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ee      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80052cc:	4b16      	ldr	r3, [pc, #88]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e0:	4911      	ldr	r1, [pc, #68]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
 80052e6:	e005      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4a0e      	ldr	r2, [pc, #56]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052f2:	6093      	str	r3, [r2, #8]
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005300:	4909      	ldr	r1, [pc, #36]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7d1a      	ldrb	r2, [r3, #20]
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005318:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	42470068 	.word	0x42470068
 8005328:	40023800 	.word	0x40023800
 800532c:	40007000 	.word	0x40007000
 8005330:	42470e40 	.word	0x42470e40
 8005334:	424711e0 	.word	0x424711e0

08005338 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e066      	b.n	800541c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	7f5b      	ldrb	r3, [r3, #29]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d105      	bne.n	8005364 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb fef0 	bl	8001144 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	22ca      	movs	r2, #202	; 0xca
 8005370:	625a      	str	r2, [r3, #36]	; 0x24
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2253      	movs	r2, #83	; 0x53
 8005378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f87a 	bl	8005474 <RTC_EnterInitMode>
 8005380:	4603      	mov	r3, r0
 8005382:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d12c      	bne.n	80053e4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6899      	ldr	r1, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68d2      	ldr	r2, [r2, #12]
 80053c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6919      	ldr	r1, [r3, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	041a      	lsls	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f881 	bl	80054e2 <RTC_ExitInitMode>
 80053e0:	4603      	mov	r3, r0
 80053e2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d113      	bne.n	8005412 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	22ff      	movs	r2, #255	; 0xff
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800543e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005440:	f7fc f972 	bl	8001728 <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005446:	e009      	b.n	800545c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005448:	f7fc f96e 	bl	8001728 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005456:	d901      	bls.n	800545c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e007      	b.n	800546c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0ee      	beq.n	8005448 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d122      	bne.n	80054d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054a2:	f7fc f941 	bl	8001728 <HAL_GetTick>
 80054a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054a8:	e00c      	b.n	80054c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054aa:	f7fc f93d 	bl	8001728 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b8:	d904      	bls.n	80054c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2204      	movs	r2, #4
 80054be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d102      	bne.n	80054d8 <RTC_EnterInitMode+0x64>
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d1e8      	bne.n	80054aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff89 	bl	8005424 <HAL_RTC_WaitForSynchro>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2204      	movs	r2, #4
 800551c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e041      	b.n	80055c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fb fe22 	bl	800119c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f000 fc40 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e041      	b.n	8005660 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f839 	bl	8005668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f000 fbf1 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e041      	b.n	8005712 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f839 	bl	800571a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 fb98 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d122      	bne.n	800578a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b02      	cmp	r3, #2
 8005750:	d11b      	bne.n	800578a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0202 	mvn.w	r2, #2
 800575a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fb1e 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005776:	e005      	b.n	8005784 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fb10 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fb21 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d122      	bne.n	80057de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d11b      	bne.n	80057de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0204 	mvn.w	r2, #4
 80057ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 faf4 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 80057ca:	e005      	b.n	80057d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fae6 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 faf7 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d122      	bne.n	8005832 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d11b      	bne.n	8005832 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f06f 0208 	mvn.w	r2, #8
 8005802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2204      	movs	r2, #4
 8005808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 faca 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 800581e:	e005      	b.n	800582c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fabc 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 facd 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b10      	cmp	r3, #16
 800583e:	d122      	bne.n	8005886 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b10      	cmp	r3, #16
 800584c:	d11b      	bne.n	8005886 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0210 	mvn.w	r2, #16
 8005856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2208      	movs	r2, #8
 800585c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 faa0 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005872:	e005      	b.n	8005880 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa92 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 faa3 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10e      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d107      	bne.n	80058b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f06f 0201 	mvn.w	r2, #1
 80058aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa6c 	bl	8005d8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d10e      	bne.n	80058de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d107      	bne.n	80058de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fec5 	bl	8006668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d10e      	bne.n	800590a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d107      	bne.n	800590a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fa68 	bl	8005dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b20      	cmp	r3, #32
 8005916:	d10e      	bne.n	8005936 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b20      	cmp	r3, #32
 8005924:	d107      	bne.n	8005936 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f06f 0220 	mvn.w	r2, #32
 800592e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fe8f 	bl	8006654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b086      	sub	sp, #24
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005958:	2302      	movs	r3, #2
 800595a:	e088      	b.n	8005a6e <HAL_TIM_IC_ConfigChannel+0x130>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11b      	bne.n	80059a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f000 fc45 	bl	8006208 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 020c 	bic.w	r2, r2, #12
 800598c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6999      	ldr	r1, [r3, #24]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	619a      	str	r2, [r3, #24]
 80059a0:	e060      	b.n	8005a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d11c      	bne.n	80059e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f000 fcbd 	bl	8006336 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	021a      	lsls	r2, r3, #8
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	619a      	str	r2, [r3, #24]
 80059e0:	e040      	b.n	8005a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d11b      	bne.n	8005a20 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f000 fd0a 	bl	8006410 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 020c 	bic.w	r2, r2, #12
 8005a0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69d9      	ldr	r1, [r3, #28]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	61da      	str	r2, [r3, #28]
 8005a1e:	e021      	b.n	8005a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d11c      	bne.n	8005a60 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f000 fd27 	bl	8006488 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69d9      	ldr	r1, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	021a      	lsls	r2, r3, #8
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	61da      	str	r2, [r3, #28]
 8005a5e:	e001      	b.n	8005a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0ae      	b.n	8005bf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	f200 809f 	bhi.w	8005be4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005ae1 	.word	0x08005ae1
 8005ab0:	08005be5 	.word	0x08005be5
 8005ab4:	08005be5 	.word	0x08005be5
 8005ab8:	08005be5 	.word	0x08005be5
 8005abc:	08005b21 	.word	0x08005b21
 8005ac0:	08005be5 	.word	0x08005be5
 8005ac4:	08005be5 	.word	0x08005be5
 8005ac8:	08005be5 	.word	0x08005be5
 8005acc:	08005b63 	.word	0x08005b63
 8005ad0:	08005be5 	.word	0x08005be5
 8005ad4:	08005be5 	.word	0x08005be5
 8005ad8:	08005be5 	.word	0x08005be5
 8005adc:	08005ba3 	.word	0x08005ba3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fa02 	bl	8005ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0208 	orr.w	r2, r2, #8
 8005afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0204 	bic.w	r2, r2, #4
 8005b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6999      	ldr	r1, [r3, #24]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	619a      	str	r2, [r3, #24]
      break;
 8005b1e:	e064      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fa48 	bl	8005fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6999      	ldr	r1, [r3, #24]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	021a      	lsls	r2, r3, #8
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	619a      	str	r2, [r3, #24]
      break;
 8005b60:	e043      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fa93 	bl	8006094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0208 	orr.w	r2, r2, #8
 8005b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0204 	bic.w	r2, r2, #4
 8005b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69d9      	ldr	r1, [r3, #28]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	61da      	str	r2, [r3, #28]
      break;
 8005ba0:	e023      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fadd 	bl	8006168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69d9      	ldr	r1, [r3, #28]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	021a      	lsls	r2, r3, #8
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	61da      	str	r2, [r3, #28]
      break;
 8005be2:	e002      	b.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_ConfigClockSource+0x1c>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e0b4      	b.n	8005d82 <HAL_TIM_ConfigClockSource+0x186>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c50:	d03e      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c56:	f200 8087 	bhi.w	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5e:	f000 8086 	beq.w	8005d6e <HAL_TIM_ConfigClockSource+0x172>
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c66:	d87f      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b70      	cmp	r3, #112	; 0x70
 8005c6a:	d01a      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0xa6>
 8005c6c:	2b70      	cmp	r3, #112	; 0x70
 8005c6e:	d87b      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b60      	cmp	r3, #96	; 0x60
 8005c72:	d050      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x11a>
 8005c74:	2b60      	cmp	r3, #96	; 0x60
 8005c76:	d877      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b50      	cmp	r3, #80	; 0x50
 8005c7a:	d03c      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c7c:	2b50      	cmp	r3, #80	; 0x50
 8005c7e:	d873      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d058      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x13a>
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d86f      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b30      	cmp	r3, #48	; 0x30
 8005c8a:	d064      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c8c:	2b30      	cmp	r3, #48	; 0x30
 8005c8e:	d86b      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d060      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d867      	bhi.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d05c      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d05a      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	e062      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6899      	ldr	r1, [r3, #8]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f000 fc41 	bl	8006538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	609a      	str	r2, [r3, #8]
      break;
 8005cce:	e04f      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f000 fc2a 	bl	8006538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cf2:	609a      	str	r2, [r3, #8]
      break;
 8005cf4:	e03c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fae8 	bl	80062d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2150      	movs	r1, #80	; 0x50
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fbf7 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e02c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fb44 	bl	80063b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2160      	movs	r1, #96	; 0x60
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fbe7 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e01c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6859      	ldr	r1, [r3, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f000 fac8 	bl	80062d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2140      	movs	r1, #64	; 0x40
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fbd7 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 8005d54:	e00c      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f000 fbce 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 8005d66:	e003      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d6c:	e000      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a34      	ldr	r2, [pc, #208]	; (8005ed4 <TIM_Base_SetConfig+0xe4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00f      	beq.n	8005e28 <TIM_Base_SetConfig+0x38>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0e:	d00b      	beq.n	8005e28 <TIM_Base_SetConfig+0x38>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a31      	ldr	r2, [pc, #196]	; (8005ed8 <TIM_Base_SetConfig+0xe8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_Base_SetConfig+0x38>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a30      	ldr	r2, [pc, #192]	; (8005edc <TIM_Base_SetConfig+0xec>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0x38>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a2f      	ldr	r2, [pc, #188]	; (8005ee0 <TIM_Base_SetConfig+0xf0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a25      	ldr	r2, [pc, #148]	; (8005ed4 <TIM_Base_SetConfig+0xe4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01b      	beq.n	8005e7a <TIM_Base_SetConfig+0x8a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d017      	beq.n	8005e7a <TIM_Base_SetConfig+0x8a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <TIM_Base_SetConfig+0xe8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <TIM_Base_SetConfig+0x8a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a21      	ldr	r2, [pc, #132]	; (8005edc <TIM_Base_SetConfig+0xec>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00f      	beq.n	8005e7a <TIM_Base_SetConfig+0x8a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a20      	ldr	r2, [pc, #128]	; (8005ee0 <TIM_Base_SetConfig+0xf0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00b      	beq.n	8005e7a <TIM_Base_SetConfig+0x8a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a1f      	ldr	r2, [pc, #124]	; (8005ee4 <TIM_Base_SetConfig+0xf4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <TIM_Base_SetConfig+0x8a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <TIM_Base_SetConfig+0xf8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_Base_SetConfig+0x8a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <TIM_Base_SetConfig+0xfc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d108      	bne.n	8005e8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <TIM_Base_SetConfig+0xe4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d103      	bne.n	8005ec0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	615a      	str	r2, [r3, #20]
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800

08005ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0201 	bic.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f023 0302 	bic.w	r3, r3, #2
 8005f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1c      	ldr	r2, [pc, #112]	; (8005fb8 <TIM_OC1_SetConfig+0xc8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10c      	bne.n	8005f66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0308 	bic.w	r3, r3, #8
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <TIM_OC1_SetConfig+0xc8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d111      	bne.n	8005f92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	621a      	str	r2, [r3, #32]
}
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	40010000 	.word	0x40010000

08005fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 0210 	bic.w	r2, r3, #16
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f023 0320 	bic.w	r3, r3, #32
 8006006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a1e      	ldr	r2, [pc, #120]	; (8006090 <TIM_OC2_SetConfig+0xd4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d10d      	bne.n	8006038 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006036:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a15      	ldr	r2, [pc, #84]	; (8006090 <TIM_OC2_SetConfig+0xd4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d113      	bne.n	8006068 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40010000 	.word	0x40010000

08006094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <TIM_OC3_SetConfig+0xd0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d10d      	bne.n	800610e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800610c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a14      	ldr	r2, [pc, #80]	; (8006164 <TIM_OC3_SetConfig+0xd0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d113      	bne.n	800613e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	40010000 	.word	0x40010000

08006168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a10      	ldr	r2, [pc, #64]	; (8006204 <TIM_OC4_SetConfig+0x9c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d109      	bne.n	80061dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010000 	.word	0x40010000

08006208 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0201 	bic.w	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <TIM_TI1_SetConfig+0xbc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623c:	d00f      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <TIM_TI1_SetConfig+0xc0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00b      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <TIM_TI1_SetConfig+0xc4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <TIM_TI1_SetConfig+0xc8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_TI1_SetConfig+0x56>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4a1e      	ldr	r2, [pc, #120]	; (80062d4 <TIM_TI1_SetConfig+0xcc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d101      	bne.n	8006262 <TIM_TI1_SetConfig+0x5a>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <TIM_TI1_SetConfig+0x5c>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 0303 	bic.w	r3, r3, #3
 800626e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e003      	b.n	8006282 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	b2db      	uxtb	r3, r3
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f023 030a 	bic.w	r3, r3, #10
 800629c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f003 030a 	and.w	r3, r3, #10
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40000c00 	.word	0x40000c00
 80062d4:	40014000 	.word	0x40014000

080062d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 030a 	bic.w	r3, r3, #10
 8006314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f023 0210 	bic.w	r2, r3, #16
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006362:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	031b      	lsls	r3, r3, #12
 800637a:	b29b      	uxth	r3, r3
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006388:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f023 0210 	bic.w	r2, r3, #16
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	031b      	lsls	r3, r3, #12
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	621a      	str	r2, [r3, #32]
}
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800644c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	b2db      	uxtb	r3, r3
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006460:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	621a      	str	r2, [r3, #32]
}
 800647c:	bf00      	nop
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	031b      	lsls	r3, r3, #12
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	031b      	lsls	r3, r3, #12
 80064e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	f043 0307 	orr.w	r3, r3, #7
 8006524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	609a      	str	r2, [r3, #8]
}
 800652c:	bf00      	nop
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	021a      	lsls	r2, r3, #8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	431a      	orrs	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4313      	orrs	r3, r2
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800658c:	2302      	movs	r3, #2
 800658e:	e050      	b.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065dc:	d013      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a16      	ldr	r2, [pc, #88]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a13      	ldr	r2, [pc, #76]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10c      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4313      	orrs	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40014000 	.word	0x40014000

08006654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e03f      	b.n	800670e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fa fe6a 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	; 0x24
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc7b 	bl	8006fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b0ba      	sub	sp, #232	; 0xe8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800673e:	2300      	movs	r3, #0
 8006740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006744:	2300      	movs	r3, #0
 8006746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10f      	bne.n	800677e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d009      	beq.n	800677e <HAL_UART_IRQHandler+0x66>
 800676a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fb65 	bl	8006e46 <UART_Receive_IT>
      return;
 800677c:	e256      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800677e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80de 	beq.w	8006944 <HAL_UART_IRQHandler+0x22c>
 8006788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006798:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80d1 	beq.w	8006944 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <HAL_UART_IRQHandler+0xae>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f043 0201 	orr.w	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <HAL_UART_IRQHandler+0xd2>
 80067d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0202 	orr.w	r2, r3, #2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <HAL_UART_IRQHandler+0xf6>
 80067f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f043 0204 	orr.w	r2, r3, #4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d011      	beq.n	800683e <HAL_UART_IRQHandler+0x126>
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f043 0208 	orr.w	r2, r3, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 81ed 	beq.w	8006c22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <HAL_UART_IRQHandler+0x14e>
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 faf0 	bl	8006e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d103      	bne.n	8006892 <HAL_UART_IRQHandler+0x17a>
 800688a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d04f      	beq.n	8006932 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f9f8 	bl	8006c88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d141      	bne.n	800692a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3314      	adds	r3, #20
 80068ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3314      	adds	r3, #20
 80068ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1d9      	bne.n	80068a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d013      	beq.n	8006922 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	4a7d      	ldr	r2, [pc, #500]	; (8006af4 <HAL_UART_IRQHandler+0x3dc>)
 8006900:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	4618      	mov	r0, r3
 8006908:	f7fb f96e 	bl	8001be8 <HAL_DMA_Abort_IT>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	e00e      	b.n	8006940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f99a 	bl	8006c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006928:	e00a      	b.n	8006940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f996 	bl	8006c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	e006      	b.n	8006940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f992 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800693e:	e170      	b.n	8006c22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	bf00      	nop
    return;
 8006942:	e16e      	b.n	8006c22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	2b01      	cmp	r3, #1
 800694a:	f040 814a 	bne.w	8006be2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8143 	beq.w	8006be2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 813c 	beq.w	8006be2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b40      	cmp	r3, #64	; 0x40
 800698c:	f040 80b4 	bne.w	8006af8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800699c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8140 	beq.w	8006c26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ae:	429a      	cmp	r2, r3
 80069b0:	f080 8139 	bcs.w	8006c26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c6:	f000 8088 	beq.w	8006ada <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d9      	bne.n	80069ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3314      	adds	r3, #20
 8006a1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3314      	adds	r3, #20
 8006a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e1      	bne.n	8006a16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3314      	adds	r3, #20
 8006a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e3      	bne.n	8006a52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	e853 3f00 	ldrex	r3, [r3]
 8006aa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aaa:	f023 0310 	bic.w	r3, r3, #16
 8006aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006abc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006abe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e3      	bne.n	8006a98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fb f817 	bl	8001b08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f8c0 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af0:	e099      	b.n	8006c26 <HAL_UART_IRQHandler+0x50e>
 8006af2:	bf00      	nop
 8006af4:	08006d4f 	.word	0x08006d4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 808b 	beq.w	8006c2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8086 	beq.w	8006c2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b42:	647a      	str	r2, [r7, #68]	; 0x44
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e3      	bne.n	8006b1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	623b      	str	r3, [r7, #32]
   return(result);
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3314      	adds	r3, #20
 8006b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e3      	bne.n	8006b56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0310 	bic.w	r3, r3, #16
 8006bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bc0:	61fa      	str	r2, [r7, #28]
 8006bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e3      	bne.n	8006b9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f848 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006be0:	e023      	b.n	8006c2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <HAL_UART_IRQHandler+0x4ea>
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f8bb 	bl	8006d76 <UART_Transmit_IT>
    return;
 8006c00:	e014      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00e      	beq.n	8006c2c <HAL_UART_IRQHandler+0x514>
 8006c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8fb 	bl	8006e16 <UART_EndTransmit_IT>
    return;
 8006c20:	e004      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
    return;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
      return;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
      return;
 8006c2a:	bf00      	nop
  }
}
 8006c2c:	37e8      	adds	r7, #232	; 0xe8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop

08006c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b095      	sub	sp, #84	; 0x54
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cb0:	643a      	str	r2, [r7, #64]	; 0x40
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3314      	adds	r3, #20
 8006cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3314      	adds	r3, #20
 8006ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d119      	bne.n	8006d34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	647b      	str	r3, [r7, #68]	; 0x44
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d20:	61ba      	str	r2, [r7, #24]
 8006d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6979      	ldr	r1, [r7, #20]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d42:	bf00      	nop
 8006d44:	3754      	adds	r7, #84	; 0x54
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff ff77 	bl	8006c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b21      	cmp	r3, #33	; 0x21
 8006d88:	d13e      	bne.n	8006e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	d114      	bne.n	8006dbe <UART_Transmit_IT+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d110      	bne.n	8006dbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	1c9a      	adds	r2, r3, #2
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	621a      	str	r2, [r3, #32]
 8006dbc:	e008      	b.n	8006dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6211      	str	r1, [r2, #32]
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10f      	bne.n	8006e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e000      	b.n	8006e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fefc 	bl	8006c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b08c      	sub	sp, #48	; 0x30
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b22      	cmp	r3, #34	; 0x22
 8006e58:	f040 80ab 	bne.w	8006fb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e64:	d117      	bne.n	8006e96 <UART_Receive_IT+0x50>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d113      	bne.n	8006e96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	1c9a      	adds	r2, r3, #2
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	629a      	str	r2, [r3, #40]	; 0x28
 8006e94:	e026      	b.n	8006ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea8:	d007      	beq.n	8006eba <UART_Receive_IT+0x74>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <UART_Receive_IT+0x82>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e008      	b.n	8006eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d15a      	bne.n	8006fae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0220 	bic.w	r2, r2, #32
 8006f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d135      	bne.n	8006fa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f023 0310 	bic.w	r3, r3, #16
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5e:	623a      	str	r2, [r7, #32]
 8006f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	69f9      	ldr	r1, [r7, #28]
 8006f64:	6a3a      	ldr	r2, [r7, #32]
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d10a      	bne.n	8006f96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff fe67 	bl	8006c70 <HAL_UARTEx_RxEventCallback>
 8006fa2:	e002      	b.n	8006faa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fe4f 	bl	8006c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e002      	b.n	8006fb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e000      	b.n	8006fb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fb2:	2302      	movs	r3, #2
  }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3730      	adds	r7, #48	; 0x30
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc0:	b0c0      	sub	sp, #256	; 0x100
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	68d9      	ldr	r1, [r3, #12]
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	ea40 0301 	orr.w	r3, r0, r1
 8006fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007014:	f021 010c 	bic.w	r1, r1, #12
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007022:	430b      	orrs	r3, r1
 8007024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007036:	6999      	ldr	r1, [r3, #24]
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	ea40 0301 	orr.w	r3, r0, r1
 8007042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b8f      	ldr	r3, [pc, #572]	; (8007288 <UART_SetConfig+0x2cc>)
 800704c:	429a      	cmp	r2, r3
 800704e:	d005      	beq.n	800705c <UART_SetConfig+0xa0>
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b8d      	ldr	r3, [pc, #564]	; (800728c <UART_SetConfig+0x2d0>)
 8007058:	429a      	cmp	r2, r3
 800705a:	d104      	bne.n	8007066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800705c:	f7fe f868 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 8007060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007064:	e003      	b.n	800706e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007066:	f7fe f84f 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 800706a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800706e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007078:	f040 810c 	bne.w	8007294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800707c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007080:	2200      	movs	r2, #0
 8007082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800708a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800708e:	4622      	mov	r2, r4
 8007090:	462b      	mov	r3, r5
 8007092:	1891      	adds	r1, r2, r2
 8007094:	65b9      	str	r1, [r7, #88]	; 0x58
 8007096:	415b      	adcs	r3, r3
 8007098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800709a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800709e:	4621      	mov	r1, r4
 80070a0:	eb12 0801 	adds.w	r8, r2, r1
 80070a4:	4629      	mov	r1, r5
 80070a6:	eb43 0901 	adc.w	r9, r3, r1
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070be:	4690      	mov	r8, r2
 80070c0:	4699      	mov	r9, r3
 80070c2:	4623      	mov	r3, r4
 80070c4:	eb18 0303 	adds.w	r3, r8, r3
 80070c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070cc:	462b      	mov	r3, r5
 80070ce:	eb49 0303 	adc.w	r3, r9, r3
 80070d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070ea:	460b      	mov	r3, r1
 80070ec:	18db      	adds	r3, r3, r3
 80070ee:	653b      	str	r3, [r7, #80]	; 0x50
 80070f0:	4613      	mov	r3, r2
 80070f2:	eb42 0303 	adc.w	r3, r2, r3
 80070f6:	657b      	str	r3, [r7, #84]	; 0x54
 80070f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007100:	f7f9 f86e 	bl	80001e0 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4b61      	ldr	r3, [pc, #388]	; (8007290 <UART_SetConfig+0x2d4>)
 800710a:	fba3 2302 	umull	r2, r3, r3, r2
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	011c      	lsls	r4, r3, #4
 8007112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007116:	2200      	movs	r2, #0
 8007118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800711c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	1891      	adds	r1, r2, r2
 800712a:	64b9      	str	r1, [r7, #72]	; 0x48
 800712c:	415b      	adcs	r3, r3
 800712e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007134:	4641      	mov	r1, r8
 8007136:	eb12 0a01 	adds.w	sl, r2, r1
 800713a:	4649      	mov	r1, r9
 800713c:	eb43 0b01 	adc.w	fp, r3, r1
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800714c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007154:	4692      	mov	sl, r2
 8007156:	469b      	mov	fp, r3
 8007158:	4643      	mov	r3, r8
 800715a:	eb1a 0303 	adds.w	r3, sl, r3
 800715e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007162:	464b      	mov	r3, r9
 8007164:	eb4b 0303 	adc.w	r3, fp, r3
 8007168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800717c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007180:	460b      	mov	r3, r1
 8007182:	18db      	adds	r3, r3, r3
 8007184:	643b      	str	r3, [r7, #64]	; 0x40
 8007186:	4613      	mov	r3, r2
 8007188:	eb42 0303 	adc.w	r3, r2, r3
 800718c:	647b      	str	r3, [r7, #68]	; 0x44
 800718e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007196:	f7f9 f823 	bl	80001e0 <__aeabi_uldivmod>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	4b3b      	ldr	r3, [pc, #236]	; (8007290 <UART_SetConfig+0x2d4>)
 80071a2:	fba3 2301 	umull	r2, r3, r3, r1
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	2264      	movs	r2, #100	; 0x64
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	1acb      	subs	r3, r1, r3
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071b6:	4b36      	ldr	r3, [pc, #216]	; (8007290 <UART_SetConfig+0x2d4>)
 80071b8:	fba3 2302 	umull	r2, r3, r3, r2
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071c4:	441c      	add	r4, r3
 80071c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071d8:	4642      	mov	r2, r8
 80071da:	464b      	mov	r3, r9
 80071dc:	1891      	adds	r1, r2, r2
 80071de:	63b9      	str	r1, [r7, #56]	; 0x38
 80071e0:	415b      	adcs	r3, r3
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071e8:	4641      	mov	r1, r8
 80071ea:	1851      	adds	r1, r2, r1
 80071ec:	6339      	str	r1, [r7, #48]	; 0x30
 80071ee:	4649      	mov	r1, r9
 80071f0:	414b      	adcs	r3, r1
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007200:	4659      	mov	r1, fp
 8007202:	00cb      	lsls	r3, r1, #3
 8007204:	4651      	mov	r1, sl
 8007206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800720a:	4651      	mov	r1, sl
 800720c:	00ca      	lsls	r2, r1, #3
 800720e:	4610      	mov	r0, r2
 8007210:	4619      	mov	r1, r3
 8007212:	4603      	mov	r3, r0
 8007214:	4642      	mov	r2, r8
 8007216:	189b      	adds	r3, r3, r2
 8007218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800721c:	464b      	mov	r3, r9
 800721e:	460a      	mov	r2, r1
 8007220:	eb42 0303 	adc.w	r3, r2, r3
 8007224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800723c:	460b      	mov	r3, r1
 800723e:	18db      	adds	r3, r3, r3
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
 8007242:	4613      	mov	r3, r2
 8007244:	eb42 0303 	adc.w	r3, r2, r3
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800724e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007252:	f7f8 ffc5 	bl	80001e0 <__aeabi_uldivmod>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <UART_SetConfig+0x2d4>)
 800725c:	fba3 1302 	umull	r1, r3, r3, r2
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	2164      	movs	r1, #100	; 0x64
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	3332      	adds	r3, #50	; 0x32
 800726e:	4a08      	ldr	r2, [pc, #32]	; (8007290 <UART_SetConfig+0x2d4>)
 8007270:	fba2 2303 	umull	r2, r3, r2, r3
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	f003 0207 	and.w	r2, r3, #7
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4422      	add	r2, r4
 8007282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007284:	e105      	b.n	8007492 <UART_SetConfig+0x4d6>
 8007286:	bf00      	nop
 8007288:	40011000 	.word	0x40011000
 800728c:	40011400 	.word	0x40011400
 8007290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007298:	2200      	movs	r2, #0
 800729a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800729e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80072a6:	4642      	mov	r2, r8
 80072a8:	464b      	mov	r3, r9
 80072aa:	1891      	adds	r1, r2, r2
 80072ac:	6239      	str	r1, [r7, #32]
 80072ae:	415b      	adcs	r3, r3
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
 80072b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072b6:	4641      	mov	r1, r8
 80072b8:	1854      	adds	r4, r2, r1
 80072ba:	4649      	mov	r1, r9
 80072bc:	eb43 0501 	adc.w	r5, r3, r1
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	00eb      	lsls	r3, r5, #3
 80072ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ce:	00e2      	lsls	r2, r4, #3
 80072d0:	4614      	mov	r4, r2
 80072d2:	461d      	mov	r5, r3
 80072d4:	4643      	mov	r3, r8
 80072d6:	18e3      	adds	r3, r4, r3
 80072d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072dc:	464b      	mov	r3, r9
 80072de:	eb45 0303 	adc.w	r3, r5, r3
 80072e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007302:	4629      	mov	r1, r5
 8007304:	008b      	lsls	r3, r1, #2
 8007306:	4621      	mov	r1, r4
 8007308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800730c:	4621      	mov	r1, r4
 800730e:	008a      	lsls	r2, r1, #2
 8007310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007314:	f7f8 ff64 	bl	80001e0 <__aeabi_uldivmod>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4b60      	ldr	r3, [pc, #384]	; (80074a0 <UART_SetConfig+0x4e4>)
 800731e:	fba3 2302 	umull	r2, r3, r3, r2
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	011c      	lsls	r4, r3, #4
 8007326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800732a:	2200      	movs	r2, #0
 800732c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007338:	4642      	mov	r2, r8
 800733a:	464b      	mov	r3, r9
 800733c:	1891      	adds	r1, r2, r2
 800733e:	61b9      	str	r1, [r7, #24]
 8007340:	415b      	adcs	r3, r3
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007348:	4641      	mov	r1, r8
 800734a:	1851      	adds	r1, r2, r1
 800734c:	6139      	str	r1, [r7, #16]
 800734e:	4649      	mov	r1, r9
 8007350:	414b      	adcs	r3, r1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007360:	4659      	mov	r1, fp
 8007362:	00cb      	lsls	r3, r1, #3
 8007364:	4651      	mov	r1, sl
 8007366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800736a:	4651      	mov	r1, sl
 800736c:	00ca      	lsls	r2, r1, #3
 800736e:	4610      	mov	r0, r2
 8007370:	4619      	mov	r1, r3
 8007372:	4603      	mov	r3, r0
 8007374:	4642      	mov	r2, r8
 8007376:	189b      	adds	r3, r3, r2
 8007378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800737c:	464b      	mov	r3, r9
 800737e:	460a      	mov	r2, r1
 8007380:	eb42 0303 	adc.w	r3, r2, r3
 8007384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	67bb      	str	r3, [r7, #120]	; 0x78
 8007392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80073a0:	4649      	mov	r1, r9
 80073a2:	008b      	lsls	r3, r1, #2
 80073a4:	4641      	mov	r1, r8
 80073a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073aa:	4641      	mov	r1, r8
 80073ac:	008a      	lsls	r2, r1, #2
 80073ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073b2:	f7f8 ff15 	bl	80001e0 <__aeabi_uldivmod>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <UART_SetConfig+0x4e4>)
 80073bc:	fba3 1302 	umull	r1, r3, r3, r2
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	2164      	movs	r1, #100	; 0x64
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	3332      	adds	r3, #50	; 0x32
 80073ce:	4a34      	ldr	r2, [pc, #208]	; (80074a0 <UART_SetConfig+0x4e4>)
 80073d0:	fba2 2303 	umull	r2, r3, r2, r3
 80073d4:	095b      	lsrs	r3, r3, #5
 80073d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073da:	441c      	add	r4, r3
 80073dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e0:	2200      	movs	r2, #0
 80073e2:	673b      	str	r3, [r7, #112]	; 0x70
 80073e4:	677a      	str	r2, [r7, #116]	; 0x74
 80073e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	1891      	adds	r1, r2, r2
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	415b      	adcs	r3, r3
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073fa:	4641      	mov	r1, r8
 80073fc:	1851      	adds	r1, r2, r1
 80073fe:	6039      	str	r1, [r7, #0]
 8007400:	4649      	mov	r1, r9
 8007402:	414b      	adcs	r3, r1
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007412:	4659      	mov	r1, fp
 8007414:	00cb      	lsls	r3, r1, #3
 8007416:	4651      	mov	r1, sl
 8007418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800741c:	4651      	mov	r1, sl
 800741e:	00ca      	lsls	r2, r1, #3
 8007420:	4610      	mov	r0, r2
 8007422:	4619      	mov	r1, r3
 8007424:	4603      	mov	r3, r0
 8007426:	4642      	mov	r2, r8
 8007428:	189b      	adds	r3, r3, r2
 800742a:	66bb      	str	r3, [r7, #104]	; 0x68
 800742c:	464b      	mov	r3, r9
 800742e:	460a      	mov	r2, r1
 8007430:	eb42 0303 	adc.w	r3, r2, r3
 8007434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	663b      	str	r3, [r7, #96]	; 0x60
 8007440:	667a      	str	r2, [r7, #100]	; 0x64
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800744e:	4649      	mov	r1, r9
 8007450:	008b      	lsls	r3, r1, #2
 8007452:	4641      	mov	r1, r8
 8007454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007458:	4641      	mov	r1, r8
 800745a:	008a      	lsls	r2, r1, #2
 800745c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007460:	f7f8 febe 	bl	80001e0 <__aeabi_uldivmod>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <UART_SetConfig+0x4e4>)
 800746a:	fba3 1302 	umull	r1, r3, r3, r2
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	2164      	movs	r1, #100	; 0x64
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	3332      	adds	r3, #50	; 0x32
 800747c:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <UART_SetConfig+0x4e4>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4422      	add	r2, r4
 8007490:	609a      	str	r2, [r3, #8]
}
 8007492:	bf00      	nop
 8007494:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007498:	46bd      	mov	sp, r7
 800749a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800749e:	bf00      	nop
 80074a0:	51eb851f 	.word	0x51eb851f

080074a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074a4:	b084      	sub	sp, #16
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	f107 001c 	add.w	r0, r7, #28
 80074b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d122      	bne.n	8007502 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80074d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d105      	bne.n	80074f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 fbee 	bl	8008cd8 <USB_CoreReset>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
 8007500:	e01a      	b.n	8007538 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fbe2 	bl	8008cd8 <USB_CoreReset>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	639a      	str	r2, [r3, #56]	; 0x38
 800752a:	e005      	b.n	8007538 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	2b01      	cmp	r3, #1
 800753c:	d10b      	bne.n	8007556 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f043 0206 	orr.w	r2, r3, #6
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f043 0220 	orr.w	r2, r3, #32
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007562:	b004      	add	sp, #16
 8007564:	4770      	bx	lr
	...

08007568 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d165      	bne.n	8007648 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4a41      	ldr	r2, [pc, #260]	; (8007684 <USB_SetTurnaroundTime+0x11c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d906      	bls.n	8007592 <USB_SetTurnaroundTime+0x2a>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a40      	ldr	r2, [pc, #256]	; (8007688 <USB_SetTurnaroundTime+0x120>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d202      	bcs.n	8007592 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800758c:	230f      	movs	r3, #15
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e062      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4a3c      	ldr	r2, [pc, #240]	; (8007688 <USB_SetTurnaroundTime+0x120>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d306      	bcc.n	80075a8 <USB_SetTurnaroundTime+0x40>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4a3b      	ldr	r2, [pc, #236]	; (800768c <USB_SetTurnaroundTime+0x124>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d202      	bcs.n	80075a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075a2:	230e      	movs	r3, #14
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e057      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a38      	ldr	r2, [pc, #224]	; (800768c <USB_SetTurnaroundTime+0x124>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d306      	bcc.n	80075be <USB_SetTurnaroundTime+0x56>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4a37      	ldr	r2, [pc, #220]	; (8007690 <USB_SetTurnaroundTime+0x128>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d202      	bcs.n	80075be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80075b8:	230d      	movs	r3, #13
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e04c      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4a33      	ldr	r2, [pc, #204]	; (8007690 <USB_SetTurnaroundTime+0x128>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d306      	bcc.n	80075d4 <USB_SetTurnaroundTime+0x6c>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4a32      	ldr	r2, [pc, #200]	; (8007694 <USB_SetTurnaroundTime+0x12c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d802      	bhi.n	80075d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80075ce:	230c      	movs	r3, #12
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e041      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4a2f      	ldr	r2, [pc, #188]	; (8007694 <USB_SetTurnaroundTime+0x12c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d906      	bls.n	80075ea <USB_SetTurnaroundTime+0x82>
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4a2e      	ldr	r2, [pc, #184]	; (8007698 <USB_SetTurnaroundTime+0x130>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d802      	bhi.n	80075ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80075e4:	230b      	movs	r3, #11
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e036      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4a2a      	ldr	r2, [pc, #168]	; (8007698 <USB_SetTurnaroundTime+0x130>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d906      	bls.n	8007600 <USB_SetTurnaroundTime+0x98>
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	4a29      	ldr	r2, [pc, #164]	; (800769c <USB_SetTurnaroundTime+0x134>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d802      	bhi.n	8007600 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80075fa:	230a      	movs	r3, #10
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	e02b      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4a26      	ldr	r2, [pc, #152]	; (800769c <USB_SetTurnaroundTime+0x134>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d906      	bls.n	8007616 <USB_SetTurnaroundTime+0xae>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4a25      	ldr	r2, [pc, #148]	; (80076a0 <USB_SetTurnaroundTime+0x138>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d202      	bcs.n	8007616 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007610:	2309      	movs	r3, #9
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	e020      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4a21      	ldr	r2, [pc, #132]	; (80076a0 <USB_SetTurnaroundTime+0x138>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d306      	bcc.n	800762c <USB_SetTurnaroundTime+0xc4>
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4a20      	ldr	r2, [pc, #128]	; (80076a4 <USB_SetTurnaroundTime+0x13c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d802      	bhi.n	800762c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007626:	2308      	movs	r3, #8
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	e015      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4a1d      	ldr	r2, [pc, #116]	; (80076a4 <USB_SetTurnaroundTime+0x13c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d906      	bls.n	8007642 <USB_SetTurnaroundTime+0xda>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4a1c      	ldr	r2, [pc, #112]	; (80076a8 <USB_SetTurnaroundTime+0x140>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d202      	bcs.n	8007642 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800763c:	2307      	movs	r3, #7
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	e00a      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007642:	2306      	movs	r3, #6
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	e007      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800764e:	2309      	movs	r3, #9
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e001      	b.n	8007658 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007654:	2309      	movs	r3, #9
 8007656:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	029b      	lsls	r3, r3, #10
 800766c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007670:	431a      	orrs	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	00d8acbf 	.word	0x00d8acbf
 8007688:	00e4e1c0 	.word	0x00e4e1c0
 800768c:	00f42400 	.word	0x00f42400
 8007690:	01067380 	.word	0x01067380
 8007694:	011a499f 	.word	0x011a499f
 8007698:	01312cff 	.word	0x01312cff
 800769c:	014ca43f 	.word	0x014ca43f
 80076a0:	016e3600 	.word	0x016e3600
 80076a4:	01a6ab1f 	.word	0x01a6ab1f
 80076a8:	01e84800 	.word	0x01e84800

080076ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f043 0201 	orr.w	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b083      	sub	sp, #12
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f023 0201 	bic.w	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d115      	bne.n	800773e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800771e:	2001      	movs	r0, #1
 8007720:	f7fa f80e 	bl	8001740 <HAL_Delay>
      ms++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 fa45 	bl	8008bba <USB_GetMode>
 8007730:	4603      	mov	r3, r0
 8007732:	2b01      	cmp	r3, #1
 8007734:	d01e      	beq.n	8007774 <USB_SetCurrentMode+0x84>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b31      	cmp	r3, #49	; 0x31
 800773a:	d9f0      	bls.n	800771e <USB_SetCurrentMode+0x2e>
 800773c:	e01a      	b.n	8007774 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d115      	bne.n	8007770 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007750:	2001      	movs	r0, #1
 8007752:	f7f9 fff5 	bl	8001740 <HAL_Delay>
      ms++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fa2c 	bl	8008bba <USB_GetMode>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <USB_SetCurrentMode+0x84>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b31      	cmp	r3, #49	; 0x31
 800776c:	d9f0      	bls.n	8007750 <USB_SetCurrentMode+0x60>
 800776e:	e001      	b.n	8007774 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e005      	b.n	8007780 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b32      	cmp	r3, #50	; 0x32
 8007778:	d101      	bne.n	800777e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007788:	b084      	sub	sp, #16
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	e009      	b.n	80077bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	3340      	adds	r3, #64	; 0x40
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	3301      	adds	r3, #1
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b0e      	cmp	r3, #14
 80077c0:	d9f2      	bls.n	80077a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d11c      	bne.n	8007802 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077d6:	f043 0302 	orr.w	r3, r3, #2
 80077da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38
 8007800:	e00b      	b.n	800781a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007820:	461a      	mov	r2, r3
 8007822:	2300      	movs	r3, #0
 8007824:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782c:	4619      	mov	r1, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007834:	461a      	mov	r2, r3
 8007836:	680b      	ldr	r3, [r1, #0]
 8007838:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10c      	bne.n	800785a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d104      	bne.n	8007850 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007846:	2100      	movs	r1, #0
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f965 	bl	8007b18 <USB_SetDevSpeed>
 800784e:	e008      	b.n	8007862 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007850:	2101      	movs	r1, #1
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f960 	bl	8007b18 <USB_SetDevSpeed>
 8007858:	e003      	b.n	8007862 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800785a:	2103      	movs	r1, #3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f95b 	bl	8007b18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007862:	2110      	movs	r1, #16
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f8f3 	bl	8007a50 <USB_FlushTxFifo>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f91f 	bl	8007ab8 <USB_FlushRxFifo>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788a:	461a      	mov	r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007896:	461a      	mov	r2, r3
 8007898:	2300      	movs	r3, #0
 800789a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a2:	461a      	mov	r2, r3
 80078a4:	2300      	movs	r3, #0
 80078a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a8:	2300      	movs	r3, #0
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	e043      	b.n	8007936 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078c4:	d118      	bne.n	80078f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	461a      	mov	r2, r3
 80078da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	e013      	b.n	800790a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ee:	461a      	mov	r2, r3
 80078f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	e008      	b.n	800790a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007904:	461a      	mov	r2, r3
 8007906:	2300      	movs	r3, #0
 8007908:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007916:	461a      	mov	r2, r3
 8007918:	2300      	movs	r3, #0
 800791a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007928:	461a      	mov	r2, r3
 800792a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800792e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3301      	adds	r3, #1
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	429a      	cmp	r2, r3
 800793c:	d3b7      	bcc.n	80078ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	e043      	b.n	80079cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800795a:	d118      	bne.n	800798e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	461a      	mov	r2, r3
 8007970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	e013      	b.n	80079a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	461a      	mov	r2, r3
 8007986:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	e008      	b.n	80079a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799a:	461a      	mov	r2, r3
 800799c:	2300      	movs	r3, #0
 800799e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ac:	461a      	mov	r2, r3
 80079ae:	2300      	movs	r3, #0
 80079b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079be:	461a      	mov	r2, r3
 80079c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3301      	adds	r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d3b7      	bcc.n	8007944 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80079f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	f043 0210 	orr.w	r2, r3, #16
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <USB_DevInit+0x2c4>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d005      	beq.n	8007a26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f043 0208 	orr.w	r2, r3, #8
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d107      	bne.n	8007a3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a34:	f043 0304 	orr.w	r3, r3, #4
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a48:	b004      	add	sp, #16
 8007a4a:	4770      	bx	lr
 8007a4c:	803c3800 	.word	0x803c3800

08007a50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <USB_FlushTxFifo+0x64>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d901      	bls.n	8007a70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e01b      	b.n	8007aa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	daf2      	bge.n	8007a5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	019b      	lsls	r3, r3, #6
 8007a80:	f043 0220 	orr.w	r2, r3, #32
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4a08      	ldr	r2, [pc, #32]	; (8007ab4 <USB_FlushTxFifo+0x64>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d901      	bls.n	8007a9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e006      	b.n	8007aa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b20      	cmp	r3, #32
 8007aa4:	d0f0      	beq.n	8007a88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	00030d40 	.word	0x00030d40

08007ab8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <USB_FlushRxFifo+0x5c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d901      	bls.n	8007ad6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e018      	b.n	8007b08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	daf2      	bge.n	8007ac4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <USB_FlushRxFifo+0x5c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d901      	bls.n	8007afa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e006      	b.n	8007b08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0310 	and.w	r3, r3, #16
 8007b02:	2b10      	cmp	r3, #16
 8007b04:	d0f0      	beq.n	8007ae8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	00030d40 	.word	0x00030d40

08007b18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b087      	sub	sp, #28
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 0306 	and.w	r3, r3, #6
 8007b62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]
 8007b6e:	e00a      	b.n	8007b86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d002      	beq.n	8007b7c <USB_GetDevSpeed+0x32>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b06      	cmp	r3, #6
 8007b7a:	d102      	bne.n	8007b82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	75fb      	strb	r3, [r7, #23]
 8007b80:	e001      	b.n	8007b86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b82:	230f      	movs	r3, #15
 8007b84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d13a      	bne.n	8007c26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	68f9      	ldr	r1, [r7, #12]
 8007bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d155      	bne.n	8007c94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	791b      	ldrb	r3, [r3, #4]
 8007c02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	059b      	lsls	r3, r3, #22
 8007c0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	0151      	lsls	r1, r2, #5
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	440a      	add	r2, r1
 8007c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	e036      	b.n	8007c94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2c:	69da      	ldr	r2, [r3, #28]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	2101      	movs	r1, #1
 8007c38:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3c:	041b      	lsls	r3, r3, #16
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c44:	4313      	orrs	r3, r2
 8007c46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d11a      	bne.n	8007c94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	791b      	ldrb	r3, [r3, #4]
 8007c78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d161      	bne.n	8007d84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd6:	d11f      	bne.n	8007d18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	0151      	lsls	r1, r2, #5
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	440a      	add	r2, r1
 8007cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cf6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	f003 030f 	and.w	r3, r3, #15
 8007d28:	2101      	movs	r1, #1
 8007d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	43db      	mvns	r3, r3
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d38:	4013      	ands	r3, r2
 8007d3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	43db      	mvns	r3, r3
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	0159      	lsls	r1, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	440b      	add	r3, r1
 8007d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4b35      	ldr	r3, [pc, #212]	; (8007e54 <USB_DeactivateEndpoint+0x1b0>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	600b      	str	r3, [r1, #0]
 8007d82:	e060      	b.n	8007e46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d9a:	d11f      	bne.n	8007ddc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	0151      	lsls	r1, r2, #5
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	440a      	add	r2, r1
 8007db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007dba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	2101      	movs	r1, #1
 8007dee:	fa01 f303 	lsl.w	r3, r1, r3
 8007df2:	041b      	lsls	r3, r3, #16
 8007df4:	43db      	mvns	r3, r3
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e06:	69da      	ldr	r2, [r3, #28]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	2101      	movs	r1, #1
 8007e12:	fa01 f303 	lsl.w	r3, r1, r3
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	68f9      	ldr	r1, [r7, #12]
 8007e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e20:	4013      	ands	r3, r2
 8007e22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	0159      	lsls	r1, r3, #5
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	440b      	add	r3, r1
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <USB_DeactivateEndpoint+0x1b4>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	ec337800 	.word	0xec337800
 8007e58:	eff37800 	.word	0xeff37800

08007e5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	; 0x28
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	4613      	mov	r3, r2
 8007e68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f040 815c 	bne.w	8008136 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d132      	bne.n	8007eec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	0151      	lsls	r1, r2, #5
 8007e98:	69fa      	ldr	r2, [r7, #28]
 8007e9a:	440a      	add	r2, r1
 8007e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ea4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	69fa      	ldr	r2, [r7, #28]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee4:	0cdb      	lsrs	r3, r3, #19
 8007ee6:	04db      	lsls	r3, r3, #19
 8007ee8:	6113      	str	r3, [r2, #16]
 8007eea:	e074      	b.n	8007fd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f06:	0cdb      	lsrs	r3, r3, #19
 8007f08:	04db      	lsls	r3, r3, #19
 8007f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	0151      	lsls	r1, r2, #5
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	440a      	add	r2, r1
 8007f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6999      	ldr	r1, [r3, #24]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	440b      	add	r3, r1
 8007f48:	1e59      	subs	r1, r3, #1
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f52:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f54:	4b9d      	ldr	r3, [pc, #628]	; (80081cc <USB_EPStartXfer+0x370>)
 8007f56:	400b      	ands	r3, r1
 8007f58:	69b9      	ldr	r1, [r7, #24]
 8007f5a:	0148      	lsls	r0, r1, #5
 8007f5c:	69f9      	ldr	r1, [r7, #28]
 8007f5e:	4401      	add	r1, r0
 8007f60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f64:	4313      	orrs	r3, r2
 8007f66:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	691a      	ldr	r2, [r3, #16]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f7e:	69b9      	ldr	r1, [r7, #24]
 8007f80:	0148      	lsls	r0, r1, #5
 8007f82:	69f9      	ldr	r1, [r7, #28]
 8007f84:	4401      	add	r1, r0
 8007f86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	791b      	ldrb	r3, [r3, #4]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d11f      	bne.n	8007fd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007fb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d14b      	bne.n	8008074 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d128      	bne.n	8008052 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d110      	bne.n	8008032 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	0151      	lsls	r1, r2, #5
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	440a      	add	r2, r1
 8008026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	e00f      	b.n	8008052 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800804c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008050:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	0151      	lsls	r1, r2, #5
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	440a      	add	r2, r1
 8008068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	e133      	b.n	80082dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	0151      	lsls	r1, r2, #5
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	440a      	add	r2, r1
 800808a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008092:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	791b      	ldrb	r3, [r3, #4]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d015      	beq.n	80080c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 811b 	beq.w	80082dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	2101      	movs	r1, #1
 80080b8:	fa01 f303 	lsl.w	r3, r1, r3
 80080bc:	69f9      	ldr	r1, [r7, #28]
 80080be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080c2:	4313      	orrs	r3, r2
 80080c4:	634b      	str	r3, [r1, #52]	; 0x34
 80080c6:	e109      	b.n	80082dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d110      	bne.n	80080fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	e00f      	b.n	800811a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008118:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6919      	ldr	r1, [r3, #16]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	b298      	uxth	r0, r3
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	4603      	mov	r3, r0
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 fade 	bl	80086f0 <USB_WritePacket>
 8008134:	e0d2      	b.n	80082dc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	0151      	lsls	r1, r2, #5
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	440a      	add	r2, r1
 800814c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008150:	0cdb      	lsrs	r3, r3, #19
 8008152:	04db      	lsls	r3, r3, #19
 8008154:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	0151      	lsls	r1, r2, #5
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	440a      	add	r2, r1
 800816c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008170:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008174:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008178:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d126      	bne.n	80081d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008198:	69b9      	ldr	r1, [r7, #24]
 800819a:	0148      	lsls	r0, r1, #5
 800819c:	69f9      	ldr	r1, [r7, #28]
 800819e:	4401      	add	r1, r0
 80081a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081a4:	4313      	orrs	r3, r2
 80081a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	0151      	lsls	r1, r2, #5
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	440a      	add	r2, r1
 80081be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081c6:	6113      	str	r3, [r2, #16]
 80081c8:	e03a      	b.n	8008240 <USB_EPStartXfer+0x3e4>
 80081ca:	bf00      	nop
 80081cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	699a      	ldr	r2, [r3, #24]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	1e5a      	subs	r2, r3, #1
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	8afa      	ldrh	r2, [r7, #22]
 80081ec:	fb03 f202 	mul.w	r2, r3, r2
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	8afb      	ldrh	r3, [r7, #22]
 8008204:	04d9      	lsls	r1, r3, #19
 8008206:	4b38      	ldr	r3, [pc, #224]	; (80082e8 <USB_EPStartXfer+0x48c>)
 8008208:	400b      	ands	r3, r1
 800820a:	69b9      	ldr	r1, [r7, #24]
 800820c:	0148      	lsls	r0, r1, #5
 800820e:	69f9      	ldr	r1, [r7, #28]
 8008210:	4401      	add	r1, r0
 8008212:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008216:	4313      	orrs	r3, r2
 8008218:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008230:	69b9      	ldr	r1, [r7, #24]
 8008232:	0148      	lsls	r0, r1, #5
 8008234:	69f9      	ldr	r1, [r7, #28]
 8008236:	4401      	add	r1, r0
 8008238:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800823c:	4313      	orrs	r3, r2
 800823e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d10d      	bne.n	8008262 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6919      	ldr	r1, [r3, #16]
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825e:	460a      	mov	r2, r1
 8008260:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	791b      	ldrb	r3, [r3, #4]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d128      	bne.n	80082bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008276:	2b00      	cmp	r3, #0
 8008278:	d110      	bne.n	800829c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	0151      	lsls	r1, r2, #5
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	440a      	add	r2, r1
 8008290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008294:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e00f      	b.n	80082bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	1ff80000 	.word	0x1ff80000

080082ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b01      	cmp	r3, #1
 800830a:	f040 80ce 	bne.w	80084aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d132      	bne.n	800837c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	0151      	lsls	r1, r2, #5
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	440a      	add	r2, r1
 800832c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008330:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008334:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	4413      	add	r3, r2
 8008342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	0151      	lsls	r1, r2, #5
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	440a      	add	r2, r1
 8008350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008358:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4413      	add	r3, r2
 8008362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	0151      	lsls	r1, r2, #5
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	440a      	add	r2, r1
 8008370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008374:	0cdb      	lsrs	r3, r3, #19
 8008376:	04db      	lsls	r3, r3, #19
 8008378:	6113      	str	r3, [r2, #16]
 800837a:	e04e      	b.n	800841a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008396:	0cdb      	lsrs	r3, r3, #19
 8008398:	04db      	lsls	r3, r3, #19
 800839a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	699a      	ldr	r2, [r3, #24]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d903      	bls.n	80083d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	68da      	ldr	r2, [r3, #12]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	0151      	lsls	r1, r2, #5
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	440a      	add	r2, r1
 80083ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800840a:	6939      	ldr	r1, [r7, #16]
 800840c:	0148      	lsls	r0, r1, #5
 800840e:	6979      	ldr	r1, [r7, #20]
 8008410:	4401      	add	r1, r0
 8008412:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008416:	4313      	orrs	r3, r2
 8008418:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d11e      	bne.n	800845e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008434:	461a      	mov	r2, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	4413      	add	r3, r2
 8008444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	0151      	lsls	r1, r2, #5
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	440a      	add	r2, r1
 8008452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	e097      	b.n	800858e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	440a      	add	r2, r1
 8008474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008478:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800847c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 8083 	beq.w	800858e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	2101      	movs	r1, #1
 800849a:	fa01 f303 	lsl.w	r3, r1, r3
 800849e:	6979      	ldr	r1, [r7, #20]
 80084a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084a4:	4313      	orrs	r3, r2
 80084a6:	634b      	str	r3, [r1, #52]	; 0x34
 80084a8:	e071      	b.n	800858e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c4:	0cdb      	lsrs	r3, r3, #19
 80084c6:	04db      	lsls	r3, r3, #19
 80084c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008524:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008532:	691a      	ldr	r2, [r3, #16]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800853c:	6939      	ldr	r1, [r7, #16]
 800853e:	0148      	lsls	r0, r1, #5
 8008540:	6979      	ldr	r1, [r7, #20]
 8008542:	4401      	add	r1, r0
 8008544:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008548:	4313      	orrs	r3, r2
 800854a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d10d      	bne.n	800856e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6919      	ldr	r1, [r3, #16]
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	460a      	mov	r2, r1
 800856c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008588:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800858c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	371c      	adds	r7, #28
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d14a      	bne.n	8008650 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d2:	f040 8086 	bne.w	80086e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	7812      	ldrb	r2, [r2, #0]
 80085ea:	0151      	lsls	r1, r2, #5
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	440a      	add	r2, r1
 80085f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	7812      	ldrb	r2, [r2, #0]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800861c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3301      	adds	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f242 7210 	movw	r2, #10000	; 0x2710
 800862a:	4293      	cmp	r3, r2
 800862c:	d902      	bls.n	8008634 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	75fb      	strb	r3, [r7, #23]
          break;
 8008632:	e056      	b.n	80086e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800864c:	d0e7      	beq.n	800861e <USB_EPStopXfer+0x82>
 800864e:	e048      	b.n	80086e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008668:	d13b      	bne.n	80086e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	7812      	ldrb	r2, [r2, #0]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800868c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	7812      	ldrb	r2, [r2, #0]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80086be:	4293      	cmp	r3, r2
 80086c0:	d902      	bls.n	80086c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	75fb      	strb	r3, [r7, #23]
          break;
 80086c6:	e00c      	b.n	80086e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086e0:	d0e7      	beq.n	80086b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b089      	sub	sp, #36	; 0x24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4611      	mov	r1, r2
 80086fc:	461a      	mov	r2, r3
 80086fe:	460b      	mov	r3, r1
 8008700:	71fb      	strb	r3, [r7, #7]
 8008702:	4613      	mov	r3, r2
 8008704:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800870e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	d123      	bne.n	800875e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008716:	88bb      	ldrh	r3, [r7, #4]
 8008718:	3303      	adds	r3, #3
 800871a:	089b      	lsrs	r3, r3, #2
 800871c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800871e:	2300      	movs	r3, #0
 8008720:	61bb      	str	r3, [r7, #24]
 8008722:	e018      	b.n	8008756 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	031a      	lsls	r2, r3, #12
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	4413      	add	r3, r2
 800872c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008730:	461a      	mov	r2, r3
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	3301      	adds	r3, #1
 800873c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	3301      	adds	r3, #1
 8008742:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	3301      	adds	r3, #1
 8008748:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	3301      	adds	r3, #1
 800874e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	3301      	adds	r3, #1
 8008754:	61bb      	str	r3, [r7, #24]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	429a      	cmp	r2, r3
 800875c:	d3e2      	bcc.n	8008724 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3724      	adds	r7, #36	; 0x24
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800876c:	b480      	push	{r7}
 800876e:	b08b      	sub	sp, #44	; 0x2c
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008782:	88fb      	ldrh	r3, [r7, #6]
 8008784:	089b      	lsrs	r3, r3, #2
 8008786:	b29b      	uxth	r3, r3
 8008788:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008792:	2300      	movs	r3, #0
 8008794:	623b      	str	r3, [r7, #32]
 8008796:	e014      	b.n	80087c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	3301      	adds	r3, #1
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	3301      	adds	r3, #1
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	3301      	adds	r3, #1
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	3301      	adds	r3, #1
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	3301      	adds	r3, #1
 80087c0:	623b      	str	r3, [r7, #32]
 80087c2:	6a3a      	ldr	r2, [r7, #32]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d3e6      	bcc.n	8008798 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087ca:	8bfb      	ldrh	r3, [r7, #30]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01e      	beq.n	800880e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087da:	461a      	mov	r2, r3
 80087dc:	f107 0310 	add.w	r3, r7, #16
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	701a      	strb	r2, [r3, #0]
      i++;
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	3301      	adds	r3, #1
 80087fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	3301      	adds	r3, #1
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008802:	8bfb      	ldrh	r3, [r7, #30]
 8008804:	3b01      	subs	r3, #1
 8008806:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008808:	8bfb      	ldrh	r3, [r7, #30]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1ea      	bne.n	80087e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008810:	4618      	mov	r0, r3
 8008812:	372c      	adds	r7, #44	; 0x2c
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	785b      	ldrb	r3, [r3, #1]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d12c      	bne.n	8008892 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	db12      	blt.n	8008870 <USB_EPSetStall+0x54>
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00f      	beq.n	8008870 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	440a      	add	r2, r1
 8008866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800886a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800886e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	440a      	add	r2, r1
 8008886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800888a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	e02b      	b.n	80088ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	db12      	blt.n	80088ca <USB_EPSetStall+0xae>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00f      	beq.n	80088ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	0151      	lsls	r1, r2, #5
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	440a      	add	r2, r1
 80088e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d128      	bne.n	8008966 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800892e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008932:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	791b      	ldrb	r3, [r3, #4]
 8008938:	2b03      	cmp	r3, #3
 800893a:	d003      	beq.n	8008944 <USB_EPClearStall+0x4c>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	791b      	ldrb	r3, [r3, #4]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d138      	bne.n	80089b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	0151      	lsls	r1, r2, #5
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	440a      	add	r2, r1
 800895a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800895e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	e027      	b.n	80089b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	0151      	lsls	r1, r2, #5
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	440a      	add	r2, r1
 800897c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008984:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	791b      	ldrb	r3, [r3, #4]
 800898a:	2b03      	cmp	r3, #3
 800898c:	d003      	beq.n	8008996 <USB_EPClearStall+0x9e>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	791b      	ldrb	r3, [r3, #4]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d10f      	bne.n	80089b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80089f8:	68f9      	ldr	r1, [r7, #12]
 80089fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089fe:	4313      	orrs	r3, r2
 8008a00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a3e:	f023 0302 	bic.w	r3, r3, #2
 8008a42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b085      	sub	sp, #20
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a6c:	f023 0303 	bic.w	r3, r3, #3
 8008a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a80:	f043 0302 	orr.w	r3, r3, #2
 8008a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	4013      	ands	r3, r2
 8008adc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	0c1b      	lsrs	r3, r3, #16
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b085      	sub	sp, #20
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	b29b      	uxth	r3, r3
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b085      	sub	sp, #20
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b50:	68bb      	ldr	r3, [r7, #8]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b087      	sub	sp, #28
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	460b      	mov	r3, r1
 8008b68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b82:	78fb      	ldrb	r3, [r7, #3]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8e:	01db      	lsls	r3, r3, #7
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bac:	68bb      	ldr	r3, [r7, #8]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008bf4:	f023 0307 	bic.w	r3, r3, #7
 8008bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	460b      	mov	r3, r1
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	333c      	adds	r3, #60	; 0x3c
 8008c32:	3304      	adds	r3, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	4a26      	ldr	r2, [pc, #152]	; (8008cd4 <USB_EP0_OutStart+0xb8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d90a      	bls.n	8008c56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c50:	d101      	bne.n	8008c56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	e037      	b.n	8008cc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	2300      	movs	r3, #0
 8008c60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c84:	f043 0318 	orr.w	r3, r3, #24
 8008c88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c9e:	7afb      	ldrb	r3, [r7, #11]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d10f      	bne.n	8008cc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008cc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	4f54300a 	.word	0x4f54300a

08008cd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a13      	ldr	r2, [pc, #76]	; (8008d3c <USB_CoreReset+0x64>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d901      	bls.n	8008cf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e01b      	b.n	8008d2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	daf2      	bge.n	8008ce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f043 0201 	orr.w	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <USB_CoreReset+0x64>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d901      	bls.n	8008d20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e006      	b.n	8008d2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d0f0      	beq.n	8008d0e <USB_CoreReset+0x36>

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	00030d40 	.word	0x00030d40

08008d40 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 fcb2 	bl	800a6ba <VL53L0X_get_offset_calibration_data_micro_meter>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8008d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8008d68:	b5b0      	push	{r4, r5, r7, lr}
 8008d6a:	b096      	sub	sp, #88	; 0x58
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8008d76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d107      	bne.n	8008d8e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2188      	movs	r1, #136	; 0x88
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f004 feaa 	bl	800dadc <VL53L0X_WrByte>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d9c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008da6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a9e      	ldr	r2, [pc, #632]	; (8009028 <VL53L0X_DataInit+0x2c0>)
 8008dae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a9d      	ldr	r2, [pc, #628]	; (800902c <VL53L0X_DataInit+0x2c4>)
 8008db6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008dc0:	f107 0310 	add.w	r3, r7, #16
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fac2 	bl	8009350 <VL53L0X_GetDeviceParameters>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8008dd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d112      	bne.n	8008e00 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8008dde:	2300      	movs	r3, #0
 8008de0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f103 0410 	add.w	r4, r3, #16
 8008de8:	f107 0510 	add.w	r5, r7, #16
 8008dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008df8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2264      	movs	r2, #100	; 0x64
 8008e04:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008e0e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008e18:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008e22:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008e2e:	2201      	movs	r2, #1
 8008e30:	2180      	movs	r1, #128	; 0x80
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f004 fe52 	bl	800dadc <VL53L0X_WrByte>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e40:	4313      	orrs	r3, r2
 8008e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e46:	2201      	movs	r2, #1
 8008e48:	21ff      	movs	r1, #255	; 0xff
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f004 fe46 	bl	800dadc <VL53L0X_WrByte>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2100      	movs	r1, #0
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f004 fe3a 	bl	800dadc <VL53L0X_WrByte>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e70:	4313      	orrs	r3, r2
 8008e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8008e76:	f107 030f 	add.w	r3, r7, #15
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	2191      	movs	r1, #145	; 0x91
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f004 feae 	bl	800dbe0 <VL53L0X_RdByte>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8008e92:	7bfa      	ldrb	r2, [r7, #15]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f004 fe1c 	bl	800dadc <VL53L0X_WrByte>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008eac:	4313      	orrs	r3, r2
 8008eae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	21ff      	movs	r1, #255	; 0xff
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f004 fe10 	bl	800dadc <VL53L0X_WrByte>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2180      	movs	r1, #128	; 0x80
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f004 fe04 	bl	800dadc <VL53L0X_WrByte>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8008ee6:	e014      	b.n	8008f12 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8008ee8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d114      	bne.n	8008f1a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8008ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fd35 	bl	8009968 <VL53L0X_SetLimitCheckEnable>
 8008efe:	4603      	mov	r3, r0
 8008f00:	461a      	mov	r2, r3
 8008f02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f06:	4313      	orrs	r3, r2
 8008f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f0e:	3301      	adds	r3, #1
 8008f10:	653b      	str	r3, [r7, #80]	; 0x50
 8008f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	dde7      	ble.n	8008ee8 <VL53L0X_DataInit+0x180>
 8008f18:	e000      	b.n	8008f1c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8008f1a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008f1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d107      	bne.n	8008f34 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008f24:	2200      	movs	r2, #0
 8008f26:	2102      	movs	r1, #2
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fd1d 	bl	8009968 <VL53L0X_SetLimitCheckEnable>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008f34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d107      	bne.n	8008f4c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2103      	movs	r1, #3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fd11 	bl	8009968 <VL53L0X_SetLimitCheckEnable>
 8008f46:	4603      	mov	r3, r0
 8008f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008f4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d107      	bne.n	8008f64 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008f54:	2200      	movs	r2, #0
 8008f56:	2104      	movs	r1, #4
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fd05 	bl	8009968 <VL53L0X_SetLimitCheckEnable>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008f64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d107      	bne.n	8008f7c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2105      	movs	r1, #5
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fcf9 	bl	8009968 <VL53L0X_SetLimitCheckEnable>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008f7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d108      	bne.n	8008f96 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f84:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008f88:	2100      	movs	r1, #0
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fd9c 	bl	8009ac8 <VL53L0X_SetLimitCheckValue>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008f96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d108      	bne.n	8008fb0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fd8f 	bl	8009ac8 <VL53L0X_SetLimitCheckValue>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d108      	bne.n	8008fca <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008fb8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008fbc:	2102      	movs	r1, #2
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fd82 	bl	8009ac8 <VL53L0X_SetLimitCheckValue>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d107      	bne.n	8008fe2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2103      	movs	r1, #3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fd76 	bl	8009ac8 <VL53L0X_SetLimitCheckValue>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fe2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10f      	bne.n	800900a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	22ff      	movs	r2, #255	; 0xff
 8008fee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008ff2:	22ff      	movs	r2, #255	; 0xff
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f004 fd70 	bl	800dadc <VL53L0X_WrByte>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800900a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800900e:	2b00      	cmp	r3, #0
 8009010:	d103      	bne.n	800901a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800901a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800901e:	4618      	mov	r0, r3
 8009020:	3758      	adds	r7, #88	; 0x58
 8009022:	46bd      	mov	sp, r7
 8009024:	bdb0      	pop	{r4, r5, r7, pc}
 8009026:	bf00      	nop
 8009028:	00016b85 	.word	0x00016b85
 800902c:	000970a4 	.word	0x000970a4

08009030 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009030:	b5b0      	push	{r4, r5, r7, lr}
 8009032:	b09e      	sub	sp, #120	; 0x78
 8009034:	af02      	add	r7, sp, #8
 8009036:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009038:	2300      	movs	r3, #0
 800903a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800903e:	f107 031c 	add.w	r3, r7, #28
 8009042:	2240      	movs	r2, #64	; 0x40
 8009044:	2100      	movs	r1, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f00a ffd6 	bl	8013ff8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800906c:	2101      	movs	r1, #1
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f002 fa79 	bl	800b566 <VL53L0X_get_info_from_device>
 8009074:	4603      	mov	r3, r0
 8009076:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009080:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800908c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009090:	2b01      	cmp	r3, #1
 8009092:	d80d      	bhi.n	80090b0 <VL53L0X_StaticInit+0x80>
 8009094:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009098:	2b01      	cmp	r3, #1
 800909a:	d102      	bne.n	80090a2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800909c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d806      	bhi.n	80090b0 <VL53L0X_StaticInit+0x80>
 80090a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10e      	bne.n	80090c8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80090aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090ac:	2b0c      	cmp	r3, #12
 80090ae:	d90b      	bls.n	80090c8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80090b0:	f107 0218 	add.w	r2, r7, #24
 80090b4:	f107 0314 	add.w	r3, r7, #20
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 fcf8 	bl	800aab0 <VL53L0X_perform_ref_spad_management>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80090c6:	e009      	b.n	80090dc <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80090c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090cc:	461a      	mov	r2, r3
 80090ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 fef9 	bl	800aec8 <VL53L0X_set_reference_spads>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80090dc:	4b94      	ldr	r3, [pc, #592]	; (8009330 <VL53L0X_StaticInit+0x300>)
 80090de:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80090e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10f      	bne.n	8009108 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80090ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80090f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009100:	66bb      	str	r3, [r7, #104]	; 0x68
 8009102:	e001      	b.n	8009108 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009104:	4b8a      	ldr	r3, [pc, #552]	; (8009330 <VL53L0X_StaticInit+0x300>)
 8009106:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009108:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009110:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f003 fdcc 	bl	800ccb0 <VL53L0X_load_tuning_settings>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800911e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009126:	2300      	movs	r3, #0
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	2304      	movs	r3, #4
 800912c:	2200      	movs	r2, #0
 800912e:	2100      	movs	r1, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 f8f1 	bl	800a318 <VL53L0X_SetGpioConfig>
 8009136:	4603      	mov	r3, r0
 8009138:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800913c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009140:	2b00      	cmp	r3, #0
 8009142:	d121      	bne.n	8009188 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009144:	2201      	movs	r2, #1
 8009146:	21ff      	movs	r1, #255	; 0xff
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f004 fcc7 	bl	800dadc <VL53L0X_WrByte>
 800914e:	4603      	mov	r3, r0
 8009150:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009154:	f107 031a 	add.w	r3, r7, #26
 8009158:	461a      	mov	r2, r3
 800915a:	2184      	movs	r1, #132	; 0x84
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f004 fd69 	bl	800dc34 <VL53L0X_RdWord>
 8009162:	4603      	mov	r3, r0
 8009164:	461a      	mov	r2, r3
 8009166:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800916a:	4313      	orrs	r3, r2
 800916c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009170:	2200      	movs	r2, #0
 8009172:	21ff      	movs	r1, #255	; 0xff
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f004 fcb1 	bl	800dadc <VL53L0X_WrByte>
 800917a:	4603      	mov	r3, r0
 800917c:	461a      	mov	r2, r3
 800917e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009182:	4313      	orrs	r3, r2
 8009184:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009188:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800918c:	2b00      	cmp	r3, #0
 800918e:	d105      	bne.n	800919c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009190:	8b7b      	ldrh	r3, [r7, #26]
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	461a      	mov	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800919c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d108      	bne.n	80091b6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80091a4:	f107 031c 	add.w	r3, r7, #28
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f8d0 	bl	8009350 <VL53L0X_GetDeviceParameters>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80091b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d110      	bne.n	80091e0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80091be:	f107 0319 	add.w	r3, r7, #25
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f992 	bl	80094ee <VL53L0X_GetFractionEnable>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80091d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80091d8:	7e7a      	ldrb	r2, [r7, #25]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80091e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10e      	bne.n	8009206 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f103 0410 	add.w	r4, r3, #16
 80091ee:	f107 051c 	add.w	r5, r7, #28
 80091f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8009206:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800920a:	2b00      	cmp	r3, #0
 800920c:	d111      	bne.n	8009232 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800920e:	f107 0319 	add.w	r3, r7, #25
 8009212:	461a      	mov	r2, r3
 8009214:	2101      	movs	r1, #1
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f004 fce2 	bl	800dbe0 <VL53L0X_RdByte>
 800921c:	4603      	mov	r3, r0
 800921e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009222:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800922a:	7e7a      	ldrb	r2, [r7, #25]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009232:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009236:	2b00      	cmp	r3, #0
 8009238:	d107      	bne.n	800924a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800923a:	2200      	movs	r2, #0
 800923c:	2100      	movs	r1, #0
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9ca 	bl	80095d8 <VL53L0X_SetSequenceStepEnable>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800924a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800924e:	2b00      	cmp	r3, #0
 8009250:	d107      	bne.n	8009262 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009252:	2200      	movs	r2, #0
 8009254:	2102      	movs	r1, #2
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f9be 	bl	80095d8 <VL53L0X_SetSequenceStepEnable>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8009262:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2203      	movs	r2, #3
 800926e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009272:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009276:	2b00      	cmp	r3, #0
 8009278:	d109      	bne.n	800928e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800927a:	f107 0313 	add.w	r3, r7, #19
 800927e:	461a      	mov	r2, r3
 8009280:	2100      	movs	r1, #0
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f990 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 8009288:	4603      	mov	r3, r0
 800928a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800928e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009292:	2b00      	cmp	r3, #0
 8009294:	d103      	bne.n	800929e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009296:	7cfa      	ldrb	r2, [r7, #19]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800929e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d109      	bne.n	80092ba <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80092a6:	f107 0313 	add.w	r3, r7, #19
 80092aa:	461a      	mov	r2, r3
 80092ac:	2101      	movs	r1, #1
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f97a 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80092ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80092c2:	7cfa      	ldrb	r2, [r7, #19]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80092ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d109      	bne.n	80092e6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80092d2:	f107 030c 	add.w	r3, r7, #12
 80092d6:	461a      	mov	r2, r3
 80092d8:	2103      	movs	r1, #3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f002 fec4 	bl	800c068 <get_sequence_step_timeout>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80092e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d103      	bne.n	80092f6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80092f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d109      	bne.n	8009312 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80092fe:	f107 030c 	add.w	r3, r7, #12
 8009302:	461a      	mov	r2, r3
 8009304:	2104      	movs	r1, #4
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f002 feae 	bl	800c068 <get_sequence_step_timeout>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009312:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009316:	2b00      	cmp	r3, #0
 8009318:	d103      	bne.n	8009322 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009322:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8009326:	4618      	mov	r0, r3
 8009328:	3770      	adds	r7, #112	; 0x70
 800932a:	46bd      	mov	sp, r7
 800932c:	bdb0      	pop	{r4, r5, r7, pc}
 800932e:	bf00      	nop
 8009330:	200001c4 	.word	0x200001c4

08009334 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800933c:	239d      	movs	r3, #157	; 0x9d
 800933e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8009340:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f8b0 	bl	80094c8 <VL53L0X_GetDeviceMode>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800936c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d107      	bne.n	8009384 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa78 	bl	8009870 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009380:	4603      	mov	r3, r0
 8009382:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8009384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2200      	movs	r2, #0
 8009390:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8009392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d107      	bne.n	80093aa <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	3310      	adds	r3, #16
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 faae 	bl	8009902 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80093aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d107      	bne.n	80093c2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	3314      	adds	r3, #20
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff fcc1 	bl	8008d40 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80093c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d134      	bne.n	8009434 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80093ca:	2300      	movs	r3, #0
 80093cc:	60bb      	str	r3, [r7, #8]
 80093ce:	e02a      	b.n	8009426 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80093d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d12a      	bne.n	800942e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	b299      	uxth	r1, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	3308      	adds	r3, #8
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4413      	add	r3, r2
 80093e6:	3304      	adds	r3, #4
 80093e8:	461a      	mov	r2, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fbce 	bl	8009b8c <VL53L0X_GetLimitCheckValue>
 80093f0:	4603      	mov	r3, r0
 80093f2:	461a      	mov	r2, r3
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80093fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d117      	bne.n	8009432 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	b299      	uxth	r1, r3
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	3318      	adds	r3, #24
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	4413      	add	r3, r2
 800940e:	461a      	mov	r2, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fb35 	bl	8009a80 <VL53L0X_GetLimitCheckEnable>
 8009416:	4603      	mov	r3, r0
 8009418:	461a      	mov	r2, r3
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	4313      	orrs	r3, r2
 800941e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	3301      	adds	r3, #1
 8009424:	60bb      	str	r3, [r7, #8]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2b05      	cmp	r3, #5
 800942a:	ddd1      	ble.n	80093d0 <VL53L0X_GetDeviceParameters+0x80>
 800942c:	e002      	b.n	8009434 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800942e:	bf00      	nop
 8009430:	e000      	b.n	8009434 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009432:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d107      	bne.n	800944c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	333c      	adds	r3, #60	; 0x3c
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fc30 	bl	8009ca8 <VL53L0X_GetWrapAroundCheckEnable>
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800944c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d107      	bne.n	8009464 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	3304      	adds	r3, #4
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f879 	bl	8009552 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	2b15      	cmp	r3, #21
 8009484:	bf8c      	ite	hi
 8009486:	2201      	movhi	r2, #1
 8009488:	2200      	movls	r2, #0
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	2a00      	cmp	r2, #0
 800948e:	d10e      	bne.n	80094ae <VL53L0X_SetDeviceMode+0x3e>
 8009490:	2201      	movs	r2, #1
 8009492:	409a      	lsls	r2, r3
 8009494:	4b0b      	ldr	r3, [pc, #44]	; (80094c4 <VL53L0X_SetDeviceMode+0x54>)
 8009496:	4013      	ands	r3, r2
 8009498:	2b00      	cmp	r3, #0
 800949a:	bf14      	ite	ne
 800949c:	2301      	movne	r3, #1
 800949e:	2300      	moveq	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	741a      	strb	r2, [r3, #16]
		break;
 80094ac:	e001      	b.n	80094b2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80094ae:	23f8      	movs	r3, #248	; 0xf8
 80094b0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80094b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	0030000b 	.word	0x0030000b

080094c8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	7c1a      	ldrb	r2, [r3, #16]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80094de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	2109      	movs	r1, #9
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f004 fb6d 	bl	800dbe0 <VL53L0X_RdByte>
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800950a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	b2da      	uxtb	r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f003 fa26 	bl	800c98e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8009546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f003 faf3 	bl	800cb4e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800956c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
 8009584:	4613      	mov	r3, r2
 8009586:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800958c:	78ba      	ldrb	r2, [r7, #2]
 800958e:	78fb      	ldrb	r3, [r7, #3]
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f002 ff3b 	bl	800c40e <VL53L0X_set_vcsel_pulse_period>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800959c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	460b      	mov	r3, r1
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095b6:	2300      	movs	r3, #0
 80095b8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80095ba:	7afb      	ldrb	r3, [r7, #11]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	4619      	mov	r1, r3
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f003 f9ad 	bl	800c920 <VL53L0X_get_vcsel_pulse_period>
 80095c6:	4603      	mov	r3, r0
 80095c8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80095ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
 80095e4:	4613      	mov	r3, r2
 80095e6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80095f4:	f107 030f 	add.w	r3, r7, #15
 80095f8:	461a      	mov	r2, r3
 80095fa:	2101      	movs	r1, #1
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f004 faef 	bl	800dbe0 <VL53L0X_RdByte>
 8009602:	4603      	mov	r3, r0
 8009604:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800960a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d15a      	bne.n	80096c8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009612:	78bb      	ldrb	r3, [r7, #2]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d12b      	bne.n	8009670 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009618:	78fb      	ldrb	r3, [r7, #3]
 800961a:	2b04      	cmp	r3, #4
 800961c:	d825      	bhi.n	800966a <VL53L0X_SetSequenceStepEnable+0x92>
 800961e:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009624:	08009639 	.word	0x08009639
 8009628:	08009643 	.word	0x08009643
 800962c:	0800964d 	.word	0x0800964d
 8009630:	08009657 	.word	0x08009657
 8009634:	08009661 	.word	0x08009661
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009638:	7dbb      	ldrb	r3, [r7, #22]
 800963a:	f043 0310 	orr.w	r3, r3, #16
 800963e:	75bb      	strb	r3, [r7, #22]
				break;
 8009640:	e043      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009642:	7dbb      	ldrb	r3, [r7, #22]
 8009644:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009648:	75bb      	strb	r3, [r7, #22]
				break;
 800964a:	e03e      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800964c:	7dbb      	ldrb	r3, [r7, #22]
 800964e:	f043 0304 	orr.w	r3, r3, #4
 8009652:	75bb      	strb	r3, [r7, #22]
				break;
 8009654:	e039      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009656:	7dbb      	ldrb	r3, [r7, #22]
 8009658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800965c:	75bb      	strb	r3, [r7, #22]
				break;
 800965e:	e034      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009660:	7dbb      	ldrb	r3, [r7, #22]
 8009662:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009666:	75bb      	strb	r3, [r7, #22]
				break;
 8009668:	e02f      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800966a:	23fc      	movs	r3, #252	; 0xfc
 800966c:	75fb      	strb	r3, [r7, #23]
 800966e:	e02c      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	2b04      	cmp	r3, #4
 8009674:	d825      	bhi.n	80096c2 <VL53L0X_SetSequenceStepEnable+0xea>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	08009691 	.word	0x08009691
 8009680:	0800969b 	.word	0x0800969b
 8009684:	080096a5 	.word	0x080096a5
 8009688:	080096af 	.word	0x080096af
 800968c:	080096b9 	.word	0x080096b9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009690:	7dbb      	ldrb	r3, [r7, #22]
 8009692:	f023 0310 	bic.w	r3, r3, #16
 8009696:	75bb      	strb	r3, [r7, #22]
				break;
 8009698:	e017      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800969a:	7dbb      	ldrb	r3, [r7, #22]
 800969c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80096a0:	75bb      	strb	r3, [r7, #22]
				break;
 80096a2:	e012      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80096a4:	7dbb      	ldrb	r3, [r7, #22]
 80096a6:	f023 0304 	bic.w	r3, r3, #4
 80096aa:	75bb      	strb	r3, [r7, #22]
				break;
 80096ac:	e00d      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80096ae:	7dbb      	ldrb	r3, [r7, #22]
 80096b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b4:	75bb      	strb	r3, [r7, #22]
				break;
 80096b6:	e008      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80096b8:	7dbb      	ldrb	r3, [r7, #22]
 80096ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096be:	75bb      	strb	r3, [r7, #22]
				break;
 80096c0:	e003      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096c2:	23fc      	movs	r3, #252	; 0xfc
 80096c4:	75fb      	strb	r3, [r7, #23]
 80096c6:	e000      	b.n	80096ca <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80096c8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	7dba      	ldrb	r2, [r7, #22]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d01e      	beq.n	8009710 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80096d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d107      	bne.n	80096ea <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80096da:	7dbb      	ldrb	r3, [r7, #22]
 80096dc:	461a      	mov	r2, r3
 80096de:	2101      	movs	r1, #1
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f004 f9fb 	bl	800dadc <VL53L0X_WrByte>
 80096e6:	4603      	mov	r3, r0
 80096e8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80096ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	7dba      	ldrb	r2, [r7, #22]
 80096f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80096fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009708:	6939      	ldr	r1, [r7, #16]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff ff0e 	bl	800952c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009710:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	607b      	str	r3, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	72fb      	strb	r3, [r7, #11]
 800972a:	4613      	mov	r3, r2
 800972c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	2b04      	cmp	r3, #4
 800973c:	d836      	bhi.n	80097ac <sequence_step_enabled+0x90>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <sequence_step_enabled+0x28>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	08009759 	.word	0x08009759
 8009748:	0800976b 	.word	0x0800976b
 800974c:	0800977d 	.word	0x0800977d
 8009750:	0800978f 	.word	0x0800978f
 8009754:	080097a1 	.word	0x080097a1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009758:	7abb      	ldrb	r3, [r7, #10]
 800975a:	111b      	asrs	r3, r3, #4
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	b2da      	uxtb	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	701a      	strb	r2, [r3, #0]
		break;
 8009768:	e022      	b.n	80097b0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800976a:	7abb      	ldrb	r3, [r7, #10]
 800976c:	10db      	asrs	r3, r3, #3
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	b2da      	uxtb	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	701a      	strb	r2, [r3, #0]
		break;
 800977a:	e019      	b.n	80097b0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800977c:	7abb      	ldrb	r3, [r7, #10]
 800977e:	109b      	asrs	r3, r3, #2
 8009780:	b2db      	uxtb	r3, r3
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	b2da      	uxtb	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	701a      	strb	r2, [r3, #0]
		break;
 800978c:	e010      	b.n	80097b0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800978e:	7abb      	ldrb	r3, [r7, #10]
 8009790:	119b      	asrs	r3, r3, #6
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	b2da      	uxtb	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	701a      	strb	r2, [r3, #0]
		break;
 800979e:	e007      	b.n	80097b0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80097a0:	7abb      	ldrb	r3, [r7, #10]
 80097a2:	09db      	lsrs	r3, r3, #7
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	701a      	strb	r2, [r3, #0]
		break;
 80097aa:	e001      	b.n	80097b0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80097ac:	23fc      	movs	r3, #252	; 0xfc
 80097ae:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	371c      	adds	r7, #28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80097d2:	f107 030e 	add.w	r3, r7, #14
 80097d6:	461a      	mov	r2, r3
 80097d8:	2101      	movs	r1, #1
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f004 fa00 	bl	800dbe0 <VL53L0X_RdByte>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80097e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d107      	bne.n	80097fc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80097ec:	7bba      	ldrb	r2, [r7, #14]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2100      	movs	r1, #0
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff ff92 	bl	800971c <sequence_step_enabled>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80097fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d108      	bne.n	8009816 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009804:	7bba      	ldrb	r2, [r7, #14]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	3302      	adds	r3, #2
 800980a:	2101      	movs	r1, #1
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ff85 	bl	800971c <sequence_step_enabled>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d108      	bne.n	8009830 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800981e:	7bba      	ldrb	r2, [r7, #14]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	3301      	adds	r3, #1
 8009824:	2102      	movs	r1, #2
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff ff78 	bl	800971c <sequence_step_enabled>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d108      	bne.n	800984a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009838:	7bba      	ldrb	r2, [r7, #14]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	3303      	adds	r3, #3
 800983e:	2103      	movs	r1, #3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff ff6b 	bl	800971c <sequence_step_enabled>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800984a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d108      	bne.n	8009864 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009852:	7bba      	ldrb	r2, [r7, #14]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	3304      	adds	r3, #4
 8009858:	2104      	movs	r1, #4
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff ff5e 	bl	800971c <sequence_step_enabled>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800987e:	f107 030c 	add.w	r3, r7, #12
 8009882:	461a      	mov	r2, r3
 8009884:	21f8      	movs	r1, #248	; 0xf8
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f004 f9d4 	bl	800dc34 <VL53L0X_RdWord>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d108      	bne.n	80098aa <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8009898:	f107 0308 	add.w	r3, r7, #8
 800989c:	461a      	mov	r2, r3
 800989e:	2104      	movs	r1, #4
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f004 f9ff 	bl	800dca4 <VL53L0X_RdDWord>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80098aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80098b2:	89bb      	ldrh	r3, [r7, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d005      	beq.n	80098c4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	89ba      	ldrh	r2, [r7, #12]
 80098bc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	7f1b      	ldrb	r3, [r3, #28]
 80098ea:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	7bba      	ldrb	r2, [r7, #14]
 80098f0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80098f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b086      	sub	sp, #24
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800990c:	2300      	movs	r3, #0
 800990e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009910:	f107 030e 	add.w	r3, r7, #14
 8009914:	461a      	mov	r2, r3
 8009916:	2120      	movs	r1, #32
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f004 f98b 	bl	800dc34 <VL53L0X_RdWord>
 800991e:	4603      	mov	r3, r0
 8009920:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d118      	bne.n	800995c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800992a:	89fb      	ldrh	r3, [r7, #14]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d109      	bne.n	8009944 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	771a      	strb	r2, [r3, #28]
 8009942:	e00b      	b.n	800995c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009944:	89fb      	ldrh	r3, [r7, #14]
 8009946:	00db      	lsls	r3, r3, #3
 8009948:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800995c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	807b      	strh	r3, [r7, #2]
 8009974:	4613      	mov	r3, r2
 8009976:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009978:	2300      	movs	r3, #0
 800997a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009988:	887b      	ldrh	r3, [r7, #2]
 800998a:	2b05      	cmp	r3, #5
 800998c:	d902      	bls.n	8009994 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800998e:	23fc      	movs	r3, #252	; 0xfc
 8009990:	75fb      	strb	r3, [r7, #23]
 8009992:	e05b      	b.n	8009a4c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009994:	787b      	ldrb	r3, [r7, #1]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d106      	bne.n	80099a8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80099a2:	2301      	movs	r3, #1
 80099a4:	73bb      	strb	r3, [r7, #14]
 80099a6:	e00a      	b.n	80099be <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80099a8:	887b      	ldrh	r3, [r7, #2]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	330c      	adds	r3, #12
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80099ba:	2301      	movs	r3, #1
 80099bc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80099be:	887b      	ldrh	r3, [r7, #2]
 80099c0:	2b05      	cmp	r3, #5
 80099c2:	d841      	bhi.n	8009a48 <VL53L0X_SetLimitCheckEnable+0xe0>
 80099c4:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <VL53L0X_SetLimitCheckEnable+0x64>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	080099e5 	.word	0x080099e5
 80099d0:	080099ef 	.word	0x080099ef
 80099d4:	08009a05 	.word	0x08009a05
 80099d8:	08009a0f 	.word	0x08009a0f
 80099dc:	08009a19 	.word	0x08009a19
 80099e0:	08009a31 	.word	0x08009a31

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	7bfa      	ldrb	r2, [r7, #15]
 80099e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80099ec:	e02e      	b.n	8009a4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	461a      	mov	r2, r3
 80099f6:	2144      	movs	r1, #68	; 0x44
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f004 f893 	bl	800db24 <VL53L0X_WrWord>
 80099fe:	4603      	mov	r3, r0
 8009a00:	75fb      	strb	r3, [r7, #23]

			break;
 8009a02:	e023      	b.n	8009a4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	7bfa      	ldrb	r2, [r7, #15]
 8009a08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009a0c:	e01e      	b.n	8009a4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7bfa      	ldrb	r2, [r7, #15]
 8009a12:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009a16:	e019      	b.n	8009a4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009a1e:	7b7b      	ldrb	r3, [r7, #13]
 8009a20:	22fe      	movs	r2, #254	; 0xfe
 8009a22:	2160      	movs	r1, #96	; 0x60
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f004 f8a7 	bl	800db78 <VL53L0X_UpdateByte>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009a2e:	e00d      	b.n	8009a4c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009a36:	7b7b      	ldrb	r3, [r7, #13]
 8009a38:	22ef      	movs	r2, #239	; 0xef
 8009a3a:	2160      	movs	r1, #96	; 0x60
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f004 f89b 	bl	800db78 <VL53L0X_UpdateByte>
 8009a42:	4603      	mov	r3, r0
 8009a44:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009a46:	e001      	b.n	8009a4c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a48:	23fc      	movs	r3, #252	; 0xfc
 8009a4a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10f      	bne.n	8009a74 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009a54:	787b      	ldrb	r3, [r7, #1]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d106      	bne.n	8009a68 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009a5a:	887b      	ldrh	r3, [r7, #2]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	4413      	add	r3, r2
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009a66:	e005      	b.n	8009a74 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009a68:	887b      	ldrh	r3, [r7, #2]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009a92:	897b      	ldrh	r3, [r7, #10]
 8009a94:	2b05      	cmp	r3, #5
 8009a96:	d905      	bls.n	8009aa4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a98:	23fc      	movs	r3, #252	; 0xfc
 8009a9a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	e008      	b.n	8009ab6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009aa4:	897b      	ldrh	r3, [r7, #10]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aae:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	7dba      	ldrb	r2, [r7, #22]
 8009ab4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
	...

08009ac8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009ada:	897b      	ldrh	r3, [r7, #10]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ae4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009ae6:	7dbb      	ldrb	r3, [r7, #22]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d107      	bne.n	8009afc <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009aec:	897b      	ldrh	r3, [r7, #10]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	330c      	adds	r3, #12
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	605a      	str	r2, [r3, #4]
 8009afa:	e040      	b.n	8009b7e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009afc:	897b      	ldrh	r3, [r7, #10]
 8009afe:	2b05      	cmp	r3, #5
 8009b00:	d830      	bhi.n	8009b64 <VL53L0X_SetLimitCheckValue+0x9c>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <VL53L0X_SetLimitCheckValue+0x40>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b21 	.word	0x08009b21
 8009b0c:	08009b29 	.word	0x08009b29
 8009b10:	08009b3f 	.word	0x08009b3f
 8009b14:	08009b47 	.word	0x08009b47
 8009b18:	08009b4f 	.word	0x08009b4f
 8009b1c:	08009b4f 	.word	0x08009b4f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009b26:	e01f      	b.n	8009b68 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	2144      	movs	r1, #68	; 0x44
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f003 fff6 	bl	800db24 <VL53L0X_WrWord>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009b3c:	e014      	b.n	8009b68 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009b44:	e010      	b.n	8009b68 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009b4c:	e00c      	b.n	8009b68 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	461a      	mov	r2, r3
 8009b56:	2164      	movs	r1, #100	; 0x64
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f003 ffe3 	bl	800db24 <VL53L0X_WrWord>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009b62:	e001      	b.n	8009b68 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b64:	23fc      	movs	r3, #252	; 0xfc
 8009b66:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b70:	897b      	ldrh	r3, [r7, #10]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	330c      	adds	r3, #12
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop

08009b8c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	460b      	mov	r3, r1
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009ba2:	897b      	ldrh	r3, [r7, #10]
 8009ba4:	2b05      	cmp	r3, #5
 8009ba6:	d847      	bhi.n	8009c38 <VL53L0X_GetLimitCheckValue+0xac>
 8009ba8:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <VL53L0X_GetLimitCheckValue+0x24>)
 8009baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bae:	bf00      	nop
 8009bb0:	08009bc9 	.word	0x08009bc9
 8009bb4:	08009bd5 	.word	0x08009bd5
 8009bb8:	08009bfb 	.word	0x08009bfb
 8009bbc:	08009c07 	.word	0x08009c07
 8009bc0:	08009c13 	.word	0x08009c13
 8009bc4:	08009c13 	.word	0x08009c13

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bcc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	77bb      	strb	r3, [r7, #30]
		break;
 8009bd2:	e033      	b.n	8009c3c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009bd4:	f107 0316 	add.w	r3, r7, #22
 8009bd8:	461a      	mov	r2, r3
 8009bda:	2144      	movs	r1, #68	; 0x44
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f004 f829 	bl	800dc34 <VL53L0X_RdWord>
 8009be2:	4603      	mov	r3, r0
 8009be4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009be6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009bee:	8afb      	ldrh	r3, [r7, #22]
 8009bf0:	025b      	lsls	r3, r3, #9
 8009bf2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	77bb      	strb	r3, [r7, #30]
		break;
 8009bf8:	e020      	b.n	8009c3c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009c00:	2300      	movs	r3, #0
 8009c02:	77bb      	strb	r3, [r7, #30]
		break;
 8009c04:	e01a      	b.n	8009c3c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	77bb      	strb	r3, [r7, #30]
		break;
 8009c10:	e014      	b.n	8009c3c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009c12:	f107 0316 	add.w	r3, r7, #22
 8009c16:	461a      	mov	r2, r3
 8009c18:	2164      	movs	r1, #100	; 0x64
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f004 f80a 	bl	800dc34 <VL53L0X_RdWord>
 8009c20:	4603      	mov	r3, r0
 8009c22:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009c24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009c2c:	8afb      	ldrh	r3, [r7, #22]
 8009c2e:	025b      	lsls	r3, r3, #9
 8009c30:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	77bb      	strb	r3, [r7, #30]
		break;
 8009c36:	e001      	b.n	8009c3c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c38:	23fc      	movs	r3, #252	; 0xfc
 8009c3a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d12a      	bne.n	8009c9a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009c44:	7fbb      	ldrb	r3, [r7, #30]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d124      	bne.n	8009c94 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d110      	bne.n	8009c72 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009c50:	897b      	ldrh	r3, [r7, #10]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	330c      	adds	r3, #12
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009c64:	897b      	ldrh	r3, [r7, #10]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009c70:	e013      	b.n	8009c9a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009c78:	897b      	ldrh	r3, [r7, #10]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	330c      	adds	r3, #12
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009c86:	897b      	ldrh	r3, [r7, #10]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009c92:	e002      	b.n	8009c9a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c9a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3720      	adds	r7, #32
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop

08009ca8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8009cb6:	f107 030e 	add.w	r3, r7, #14
 8009cba:	461a      	mov	r2, r3
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f003 ff8e 	bl	800dbe0 <VL53L0X_RdByte>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8009cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10e      	bne.n	8009cee <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009cd0:	7bba      	ldrb	r2, [r7, #14]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	b25b      	sxtb	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	da03      	bge.n	8009ce8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	e002      	b.n	8009cee <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2200      	movs	r2, #0
 8009cec:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d104      	bne.n	8009d00 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781a      	ldrb	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009d18:	f107 030e 	add.w	r3, r7, #14
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fbd2 	bl	80094c8 <VL53L0X_GetDeviceMode>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d107      	bne.n	8009d40 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d104      	bne.n	8009d40 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f898 	bl	8009e6c <VL53L0X_StartMeasurement>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fb3f 	bl	800b3cc <VL53L0X_measurement_poll_for_completion>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d103      	bne.n	8009d68 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2203      	movs	r2, #3
 8009d64:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8009d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d80:	2300      	movs	r3, #0
 8009d82:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009d84:	2301      	movs	r3, #1
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	68b9      	ldr	r1, [r7, #8]
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f001 fae1 	bl	800b352 <VL53L0X_perform_ref_calibration>
 8009d90:	4603      	mov	r3, r0
 8009d92:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dac:	2300      	movs	r3, #0
 8009dae:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009db6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8009db8:	7dbb      	ldrb	r3, [r7, #22]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d005      	beq.n	8009dca <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009dbe:	7dbb      	ldrb	r3, [r7, #22]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d002      	beq.n	8009dca <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009dc4:	7dbb      	ldrb	r3, [r7, #22]
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d147      	bne.n	8009e5a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8009dca:	f107 030c 	add.w	r3, r7, #12
 8009dce:	f107 0210 	add.w	r2, r7, #16
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fbc3 	bl	800a560 <VL53L0X_GetInterruptThresholds>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009de4:	d803      	bhi.n	8009dee <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8009de6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8009de8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009dec:	d935      	bls.n	8009e5a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8009dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d131      	bne.n	8009e5a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d006      	beq.n	8009e0a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009dfc:	491a      	ldr	r1, [pc, #104]	; (8009e68 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f002 ff56 	bl	800ccb0 <VL53L0X_load_tuning_settings>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75fb      	strb	r3, [r7, #23]
 8009e08:	e027      	b.n	8009e5a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	21ff      	movs	r1, #255	; 0xff
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f003 fe64 	bl	800dadc <VL53L0X_WrByte>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2170      	movs	r1, #112	; 0x70
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f003 fe5a 	bl	800dadc <VL53L0X_WrByte>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e32:	2200      	movs	r2, #0
 8009e34:	21ff      	movs	r1, #255	; 0xff
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f003 fe50 	bl	800dadc <VL53L0X_WrByte>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	461a      	mov	r2, r3
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009e46:	2200      	movs	r2, #0
 8009e48:	2180      	movs	r1, #128	; 0x80
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f003 fe46 	bl	800dadc <VL53L0X_WrByte>
 8009e50:	4603      	mov	r3, r0
 8009e52:	461a      	mov	r2, r3
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8009e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	2000000c 	.word	0x2000000c

08009e6c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e74:	2300      	movs	r3, #0
 8009e76:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009e7c:	f107 030e 	add.w	r3, r7, #14
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fb20 	bl	80094c8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009e88:	2201      	movs	r2, #1
 8009e8a:	2180      	movs	r1, #128	; 0x80
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f003 fe25 	bl	800dadc <VL53L0X_WrByte>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009e96:	2201      	movs	r2, #1
 8009e98:	21ff      	movs	r1, #255	; 0xff
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f003 fe1e 	bl	800dadc <VL53L0X_WrByte>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f003 fe17 	bl	800dadc <VL53L0X_WrByte>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8009eb8:	461a      	mov	r2, r3
 8009eba:	2191      	movs	r1, #145	; 0x91
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f003 fe0d 	bl	800dadc <VL53L0X_WrByte>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	2100      	movs	r1, #0
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f003 fe06 	bl	800dadc <VL53L0X_WrByte>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	21ff      	movs	r1, #255	; 0xff
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f003 fdff 	bl	800dadc <VL53L0X_WrByte>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2180      	movs	r1, #128	; 0x80
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f003 fdf8 	bl	800dadc <VL53L0X_WrByte>
 8009eec:	4603      	mov	r3, r0
 8009eee:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d054      	beq.n	8009fa0 <VL53L0X_StartMeasurement+0x134>
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	dc6c      	bgt.n	8009fd4 <VL53L0X_StartMeasurement+0x168>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <VL53L0X_StartMeasurement+0x98>
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d034      	beq.n	8009f6c <VL53L0X_StartMeasurement+0x100>
 8009f02:	e067      	b.n	8009fd4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8009f04:	2201      	movs	r2, #1
 8009f06:	2100      	movs	r1, #0
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f003 fde7 	bl	800dadc <VL53L0X_WrByte>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8009f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d15d      	bne.n	8009fda <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d008      	beq.n	8009f3a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8009f28:	f107 030d 	add.w	r3, r7, #13
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	2100      	movs	r1, #0
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f003 fe55 	bl	800dbe0 <VL53L0X_RdByte>
 8009f36:	4603      	mov	r3, r0
 8009f38:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009f40:	7b7a      	ldrb	r2, [r7, #13]
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	4013      	ands	r3, r2
 8009f46:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009f48:	7bfa      	ldrb	r2, [r7, #15]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d107      	bne.n	8009f5e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8009f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d103      	bne.n	8009f5e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009f5c:	d3e1      	bcc.n	8009f22 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009f64:	d339      	bcc.n	8009fda <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009f66:	23f9      	movs	r3, #249	; 0xf9
 8009f68:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009f6a:	e036      	b.n	8009fda <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009f74:	2101      	movs	r1, #1
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff ff12 	bl	8009da0 <VL53L0X_CheckAndLoadInterruptSettings>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009f80:	2202      	movs	r2, #2
 8009f82:	2100      	movs	r1, #0
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f003 fda9 	bl	800dadc <VL53L0X_WrByte>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8009f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d123      	bne.n	8009fde <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2204      	movs	r2, #4
 8009f9a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009f9e:	e01e      	b.n	8009fde <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d105      	bne.n	8009fb4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009fa8:	2101      	movs	r1, #1
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff fef8 	bl	8009da0 <VL53L0X_CheckAndLoadInterruptSettings>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009fb4:	2204      	movs	r2, #4
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f003 fd8f 	bl	800dadc <VL53L0X_WrByte>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8009fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10b      	bne.n	8009fe2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2204      	movs	r2, #4
 8009fce:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009fd2:	e006      	b.n	8009fe2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009fd4:	23f8      	movs	r3, #248	; 0xf8
 8009fd6:	75fb      	strb	r3, [r7, #23]
 8009fd8:	e004      	b.n	8009fe4 <VL53L0X_StartMeasurement+0x178>
		break;
 8009fda:	bf00      	nop
 8009fdc:	e002      	b.n	8009fe4 <VL53L0X_StartMeasurement+0x178>
		break;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <VL53L0X_StartMeasurement+0x178>
		break;
 8009fe2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8009fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a004:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	2b04      	cmp	r3, #4
 800a00a:	d112      	bne.n	800a032 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a00c:	f107 0308 	add.w	r3, r7, #8
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fb1a 	bl	800a64c <VL53L0X_GetInterruptMaskStatus>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b04      	cmp	r3, #4
 800a020:	d103      	bne.n	800a02a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2201      	movs	r2, #1
 800a026:	701a      	strb	r2, [r3, #0]
 800a028:	e01c      	b.n	800a064 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2200      	movs	r2, #0
 800a02e:	701a      	strb	r2, [r3, #0]
 800a030:	e018      	b.n	800a064 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a032:	f107 030d 	add.w	r3, r7, #13
 800a036:	461a      	mov	r2, r3
 800a038:	2114      	movs	r1, #20
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f003 fdd0 	bl	800dbe0 <VL53L0X_RdByte>
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10b      	bne.n	800a064 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a04c:	7b7b      	ldrb	r3, [r7, #13]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2201      	movs	r2, #1
 800a05a:	701a      	strb	r2, [r3, #0]
 800a05c:	e002      	b.n	800a064 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2200      	movs	r2, #0
 800a062:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a070:	b5b0      	push	{r4, r5, r7, lr}
 800a072:	b096      	sub	sp, #88	; 0x58
 800a074:	af02      	add	r7, sp, #8
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a07a:	2300      	movs	r3, #0
 800a07c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a080:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a084:	230c      	movs	r3, #12
 800a086:	2114      	movs	r1, #20
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f003 fcfb 	bl	800da84 <VL53L0X_ReadMulti>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a094:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f040 80d1 	bne.w	800a240 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a0aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	021b      	lsls	r3, r3, #8
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a0c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	4413      	add	r3, r2
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	025b      	lsls	r3, r3, #9
 800a0dc:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0e2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a0e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a0fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0fe:	025b      	lsls	r3, r3, #9
 800a100:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a106:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	b29a      	uxth	r2, r3
 800a110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a114:	b29b      	uxth	r3, r3
 800a116:	4413      	add	r3, r2
 800a118:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a122:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a124:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a128:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a132:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a13a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a13e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a144:	d046      	beq.n	800a1d4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a146:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a148:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a14c:	fb02 f303 	mul.w	r3, r2, r3
 800a150:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a154:	4a57      	ldr	r2, [pc, #348]	; (800a2b4 <VL53L0X_GetRangingMeasurementData+0x244>)
 800a156:	fb82 1203 	smull	r1, r2, r2, r3
 800a15a:	1192      	asrs	r2, r2, #6
 800a15c:	17db      	asrs	r3, r3, #31
 800a15e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a160:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	7f1b      	ldrb	r3, [r3, #28]
 800a16e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a176:	2b00      	cmp	r3, #0
 800a178:	d02c      	beq.n	800a1d4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a17a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a17c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a180:	fb02 f303 	mul.w	r3, r2, r3
 800a184:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800a188:	429a      	cmp	r2, r3
 800a18a:	d10d      	bne.n	800a1a8 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800a18c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800a194:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a198:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a19c:	e016      	b.n	800a1cc <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800a19e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a1a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a1a6:	e011      	b.n	800a1cc <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a1a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1ae:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a1b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a1b4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a1bc:	121b      	asrs	r3, r3, #8
 800a1be:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a1c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1c2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a1c4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a1c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a1cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a1d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a1d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00d      	beq.n	800a1f8 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a1dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a1e0:	089b      	lsrs	r3, r3, #2
 800a1e2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a1e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	019b      	lsls	r3, r3, #6
 800a1f0:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	75da      	strb	r2, [r3, #23]
 800a1f6:	e006      	b.n	800a206 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a1fe:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2200      	movs	r2, #0
 800a204:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a206:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a20a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a20e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	4613      	mov	r3, r2
 800a21a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f003 f9e5 	bl	800d5ec <VL53L0X_get_pal_range_status>
 800a222:	4603      	mov	r3, r0
 800a224:	461a      	mov	r2, r3
 800a226:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a22a:	4313      	orrs	r3, r2
 800a22c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a230:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a234:	2b00      	cmp	r3, #0
 800a236:	d103      	bne.n	800a240 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a238:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a240:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a244:	2b00      	cmp	r3, #0
 800a246:	d12f      	bne.n	800a2a8 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f107 040c 	add.w	r4, r7, #12
 800a24e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a25a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a262:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a270:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a276:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a27c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a282:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a288:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a28e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a298:	f107 050c 	add.w	r5, r7, #12
 800a29c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a29e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a2a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2a8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3750      	adds	r7, #80	; 0x50
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a2b4:	10624dd3 	.word	0x10624dd3

0800a2b8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff f8d1 	bl	8009470 <VL53L0X_SetDeviceMode>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a2d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d104      	bne.n	800a2e4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fd16 	bl	8009d0c <VL53L0X_PerformSingleMeasurement>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d105      	bne.n	800a2f8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7ff febe 	bl	800a070 <VL53L0X_GetRangingMeasurementData>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a2f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a300:	2100      	movs	r1, #0
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f962 	bl	800a5cc <VL53L0X_ClearInterruptMask>
 800a308:	4603      	mov	r3, r0
 800a30a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	4608      	mov	r0, r1
 800a322:	4611      	mov	r1, r2
 800a324:	461a      	mov	r2, r3
 800a326:	4603      	mov	r3, r0
 800a328:	70fb      	strb	r3, [r7, #3]
 800a32a:	460b      	mov	r3, r1
 800a32c:	70bb      	strb	r3, [r7, #2]
 800a32e:	4613      	mov	r3, r2
 800a330:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a33c:	23f6      	movs	r3, #246	; 0xf6
 800a33e:	73fb      	strb	r3, [r7, #15]
 800a340:	e107      	b.n	800a552 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a342:	78bb      	ldrb	r3, [r7, #2]
 800a344:	2b14      	cmp	r3, #20
 800a346:	d110      	bne.n	800a36a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a348:	7e3b      	ldrb	r3, [r7, #24]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a34e:	2310      	movs	r3, #16
 800a350:	73bb      	strb	r3, [r7, #14]
 800a352:	e001      	b.n	800a358 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a354:	2301      	movs	r3, #1
 800a356:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a358:	7bbb      	ldrb	r3, [r7, #14]
 800a35a:	461a      	mov	r2, r3
 800a35c:	2184      	movs	r1, #132	; 0x84
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f003 fbbc 	bl	800dadc <VL53L0X_WrByte>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
 800a368:	e0f3      	b.n	800a552 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a36a:	78bb      	ldrb	r3, [r7, #2]
 800a36c:	2b15      	cmp	r3, #21
 800a36e:	f040 8097 	bne.w	800a4a0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a372:	2201      	movs	r2, #1
 800a374:	21ff      	movs	r1, #255	; 0xff
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f003 fbb0 	bl	800dadc <VL53L0X_WrByte>
 800a37c:	4603      	mov	r3, r0
 800a37e:	461a      	mov	r2, r3
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	4313      	orrs	r3, r2
 800a384:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a386:	2200      	movs	r2, #0
 800a388:	2100      	movs	r1, #0
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f003 fba6 	bl	800dadc <VL53L0X_WrByte>
 800a390:	4603      	mov	r3, r0
 800a392:	461a      	mov	r2, r3
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	4313      	orrs	r3, r2
 800a398:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a39a:	2200      	movs	r2, #0
 800a39c:	21ff      	movs	r1, #255	; 0xff
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f003 fb9c 	bl	800dadc <VL53L0X_WrByte>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	2180      	movs	r1, #128	; 0x80
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f003 fb92 	bl	800dadc <VL53L0X_WrByte>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	2185      	movs	r1, #133	; 0x85
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f003 fb88 	bl	800dadc <VL53L0X_WrByte>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a3d6:	2204      	movs	r2, #4
 800a3d8:	21ff      	movs	r1, #255	; 0xff
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f003 fb7e 	bl	800dadc <VL53L0X_WrByte>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	21cd      	movs	r1, #205	; 0xcd
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f003 fb74 	bl	800dadc <VL53L0X_WrByte>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a3fe:	2211      	movs	r2, #17
 800a400:	21cc      	movs	r1, #204	; 0xcc
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f003 fb6a 	bl	800dadc <VL53L0X_WrByte>
 800a408:	4603      	mov	r3, r0
 800a40a:	461a      	mov	r2, r3
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	4313      	orrs	r3, r2
 800a410:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a412:	2207      	movs	r2, #7
 800a414:	21ff      	movs	r1, #255	; 0xff
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f003 fb60 	bl	800dadc <VL53L0X_WrByte>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	4313      	orrs	r3, r2
 800a424:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a426:	2200      	movs	r2, #0
 800a428:	21be      	movs	r1, #190	; 0xbe
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f003 fb56 	bl	800dadc <VL53L0X_WrByte>
 800a430:	4603      	mov	r3, r0
 800a432:	461a      	mov	r2, r3
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	4313      	orrs	r3, r2
 800a438:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a43a:	2206      	movs	r2, #6
 800a43c:	21ff      	movs	r1, #255	; 0xff
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f003 fb4c 	bl	800dadc <VL53L0X_WrByte>
 800a444:	4603      	mov	r3, r0
 800a446:	461a      	mov	r2, r3
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a44e:	2209      	movs	r2, #9
 800a450:	21cc      	movs	r1, #204	; 0xcc
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f003 fb42 	bl	800dadc <VL53L0X_WrByte>
 800a458:	4603      	mov	r3, r0
 800a45a:	461a      	mov	r2, r3
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	4313      	orrs	r3, r2
 800a460:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a462:	2200      	movs	r2, #0
 800a464:	21ff      	movs	r1, #255	; 0xff
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f003 fb38 	bl	800dadc <VL53L0X_WrByte>
 800a46c:	4603      	mov	r3, r0
 800a46e:	461a      	mov	r2, r3
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	4313      	orrs	r3, r2
 800a474:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a476:	2201      	movs	r2, #1
 800a478:	21ff      	movs	r1, #255	; 0xff
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f003 fb2e 	bl	800dadc <VL53L0X_WrByte>
 800a480:	4603      	mov	r3, r0
 800a482:	461a      	mov	r2, r3
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	4313      	orrs	r3, r2
 800a488:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a48a:	2200      	movs	r2, #0
 800a48c:	2100      	movs	r1, #0
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f003 fb24 	bl	800dadc <VL53L0X_WrByte>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	73fb      	strb	r3, [r7, #15]
 800a49e:	e058      	b.n	800a552 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d121      	bne.n	800a4ec <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a4a8:	787b      	ldrb	r3, [r7, #1]
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d81b      	bhi.n	800a4e6 <VL53L0X_SetGpioConfig+0x1ce>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <VL53L0X_SetGpioConfig+0x19c>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a4c9 	.word	0x0800a4c9
 800a4b8:	0800a4cf 	.word	0x0800a4cf
 800a4bc:	0800a4d5 	.word	0x0800a4d5
 800a4c0:	0800a4db 	.word	0x0800a4db
 800a4c4:	0800a4e1 	.word	0x0800a4e1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73bb      	strb	r3, [r7, #14]
				break;
 800a4cc:	e00f      	b.n	800a4ee <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	73bb      	strb	r3, [r7, #14]
				break;
 800a4d2:	e00c      	b.n	800a4ee <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	73bb      	strb	r3, [r7, #14]
				break;
 800a4d8:	e009      	b.n	800a4ee <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	73bb      	strb	r3, [r7, #14]
				break;
 800a4de:	e006      	b.n	800a4ee <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	73bb      	strb	r3, [r7, #14]
				break;
 800a4e4:	e003      	b.n	800a4ee <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a4e6:	23f5      	movs	r3, #245	; 0xf5
 800a4e8:	73fb      	strb	r3, [r7, #15]
 800a4ea:	e000      	b.n	800a4ee <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a4ec:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d107      	bne.n	800a506 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	210a      	movs	r1, #10
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f003 faed 	bl	800dadc <VL53L0X_WrByte>
 800a502:	4603      	mov	r3, r0
 800a504:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10f      	bne.n	800a52e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a50e:	7e3b      	ldrb	r3, [r7, #24]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d102      	bne.n	800a51a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	73bb      	strb	r3, [r7, #14]
 800a518:	e001      	b.n	800a51e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a51a:	2310      	movs	r3, #16
 800a51c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a51e:	7bbb      	ldrb	r3, [r7, #14]
 800a520:	22ef      	movs	r2, #239	; 0xef
 800a522:	2184      	movs	r1, #132	; 0x84
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f003 fb27 	bl	800db78 <VL53L0X_UpdateByte>
 800a52a:	4603      	mov	r3, r0
 800a52c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a52e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d103      	bne.n	800a53e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	787a      	ldrb	r2, [r7, #1]
 800a53a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d105      	bne.n	800a552 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a546:	2100      	movs	r1, #0
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f83f 	bl	800a5cc <VL53L0X_ClearInterruptMask>
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a552:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop

0800a560 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	607a      	str	r2, [r7, #4]
 800a56a:	603b      	str	r3, [r7, #0]
 800a56c:	460b      	mov	r3, r1
 800a56e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a570:	2300      	movs	r3, #0
 800a572:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a574:	f107 0314 	add.w	r3, r7, #20
 800a578:	461a      	mov	r2, r3
 800a57a:	210e      	movs	r1, #14
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f003 fb59 	bl	800dc34 <VL53L0X_RdWord>
 800a582:	4603      	mov	r3, r0
 800a584:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a586:	8abb      	ldrh	r3, [r7, #20]
 800a588:	045b      	lsls	r3, r3, #17
 800a58a:	461a      	mov	r2, r3
 800a58c:	4b0e      	ldr	r3, [pc, #56]	; (800a5c8 <VL53L0X_GetInterruptThresholds+0x68>)
 800a58e:	4013      	ands	r3, r2
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10f      	bne.n	800a5bc <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a59c:	f107 0314 	add.w	r3, r7, #20
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	210c      	movs	r1, #12
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f003 fb45 	bl	800dc34 <VL53L0X_RdWord>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a5ae:	8abb      	ldrh	r3, [r7, #20]
 800a5b0:	045b      	lsls	r3, r3, #17
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4b04      	ldr	r3, [pc, #16]	; (800a5c8 <VL53L0X_GetInterruptThresholds+0x68>)
 800a5b6:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	1ffe0000 	.word	0x1ffe0000

0800a5cc <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a5de:	2201      	movs	r2, #1
 800a5e0:	210b      	movs	r1, #11
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f003 fa7a 	bl	800dadc <VL53L0X_WrByte>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	210b      	movs	r1, #11
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f003 fa73 	bl	800dadc <VL53L0X_WrByte>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a600:	f107 030d 	add.w	r3, r7, #13
 800a604:	461a      	mov	r2, r3
 800a606:	2113      	movs	r1, #19
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f003 fae9 	bl	800dbe0 <VL53L0X_RdByte>
 800a60e:	4603      	mov	r3, r0
 800a610:	461a      	mov	r2, r3
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	4313      	orrs	r3, r2
 800a616:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	3301      	adds	r3, #1
 800a61c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a61e:	7b7b      	ldrb	r3, [r7, #13]
 800a620:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a624:	2b00      	cmp	r3, #0
 800a626:	d006      	beq.n	800a636 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a628:	7bbb      	ldrb	r3, [r7, #14]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d803      	bhi.n	800a636 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d0d3      	beq.n	800a5de <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d901      	bls.n	800a640 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a63c:	23f4      	movs	r3, #244	; 0xf4
 800a63e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800a65a:	f107 030e 	add.w	r3, r7, #14
 800a65e:	461a      	mov	r2, r3
 800a660:	2113      	movs	r1, #19
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f003 fabc 	bl	800dbe0 <VL53L0X_RdByte>
 800a668:	4603      	mov	r3, r0
 800a66a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	f003 0207 	and.w	r2, r3, #7
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	f003 0318 	and.w	r3, r3, #24
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a680:	23fa      	movs	r3, #250	; 0xfa
 800a682:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 fa03 	bl	800aab0 <VL53L0X_perform_ref_spad_management>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a6ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a6c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a6cc:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a6ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6d2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a6d4:	f107 0308 	add.w	r3, r7, #8
 800a6d8:	461a      	mov	r2, r3
 800a6da:	2128      	movs	r1, #40	; 0x28
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f003 faa9 	bl	800dc34 <VL53L0X_RdWord>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d11e      	bne.n	800a72c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a6ee:	893b      	ldrh	r3, [r7, #8]
 800a6f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a6f8:	893b      	ldrh	r3, [r7, #8]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a700:	429a      	cmp	r2, r3
 800a702:	dd0b      	ble.n	800a71c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a704:	893a      	ldrh	r2, [r7, #8]
 800a706:	897b      	ldrh	r3, [r7, #10]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	b21b      	sxth	r3, r3
 800a70e:	461a      	mov	r2, r3
					* 250;
 800a710:	23fa      	movs	r3, #250	; 0xfa
 800a712:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	e007      	b.n	800a72c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a71c:	893b      	ldrh	r3, [r7, #8]
 800a71e:	b21b      	sxth	r3, r3
 800a720:	461a      	mov	r2, r3
 800a722:	23fa      	movs	r3, #250	; 0xfa
 800a724:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a72c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a738:	b480      	push	{r7}
 800a73a:	b08b      	sub	sp, #44	; 0x2c
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a746:	2308      	movs	r3, #8
 800a748:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a754:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a75e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	69ba      	ldr	r2, [r7, #24]
 800a764:	fbb3 f2f2 	udiv	r2, r3, r2
 800a768:	69b9      	ldr	r1, [r7, #24]
 800a76a:	fb01 f202 	mul.w	r2, r1, r2
 800a76e:	1a9b      	subs	r3, r3, r2
 800a770:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	627b      	str	r3, [r7, #36]	; 0x24
 800a776:	e030      	b.n	800a7da <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	4413      	add	r3, r2
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800a786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d11e      	bne.n	800a7cc <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800a78e:	7ffa      	ldrb	r2, [r7, #31]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	fa42 f303 	asr.w	r3, r2, r3
 800a796:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800a79c:	e016      	b.n	800a7cc <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800a79e:	7ffb      	ldrb	r3, [r7, #31]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00b      	beq.n	800a7c0 <get_next_good_spad+0x88>
				success = 1;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	fb03 f202 	mul.w	r2, r3, r2
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	601a      	str	r2, [r3, #0]
				break;
 800a7be:	e009      	b.n	800a7d4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800a7c0:	7ffb      	ldrb	r3, [r7, #31]
 800a7c2:	085b      	lsrs	r3, r3, #1
 800a7c4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800a7cc:	6a3a      	ldr	r2, [r7, #32]
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d3e4      	bcc.n	800a79e <get_next_good_spad+0x66>
				coarseIndex++) {
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d202      	bcs.n	800a7e8 <get_next_good_spad+0xb0>
 800a7e2:	7fbb      	ldrb	r3, [r7, #30]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0c7      	beq.n	800a778 <get_next_good_spad+0x40>
		}
	}
}
 800a7e8:	bf00      	nop
 800a7ea:	372c      	adds	r7, #44	; 0x2c
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	099b      	lsrs	r3, r3, #6
 800a804:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800a806:	4a07      	ldr	r2, [pc, #28]	; (800a824 <is_aperture+0x30>)
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <is_aperture+0x22>
		isAperture = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	200002b8 	.word	0x200002b8

0800a828 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800a828:	b480      	push	{r7}
 800a82a:	b089      	sub	sp, #36	; 0x24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a834:	2300      	movs	r3, #0
 800a836:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800a838:	2308      	movs	r3, #8
 800a83a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	fbb2 f3f3 	udiv	r3, r2, r3
 800a844:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a84e:	69b9      	ldr	r1, [r7, #24]
 800a850:	fb01 f202 	mul.w	r2, r1, r2
 800a854:	1a9b      	subs	r3, r3, r2
 800a856:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d302      	bcc.n	800a866 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a860:	23ce      	movs	r3, #206	; 0xce
 800a862:	77fb      	strb	r3, [r7, #31]
 800a864:	e010      	b.n	800a888 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	4413      	add	r3, r2
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b25a      	sxtb	r2, r3
 800a870:	2101      	movs	r1, #1
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	fa01 f303 	lsl.w	r3, r1, r3
 800a878:	b25b      	sxtb	r3, r3
 800a87a:	4313      	orrs	r3, r2
 800a87c:	b259      	sxtb	r1, r3
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	4413      	add	r3, r2
 800a884:	b2ca      	uxtb	r2, r1
 800a886:	701a      	strb	r2, [r3, #0]

	return status;
 800a888:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3724      	adds	r7, #36	; 0x24
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800a8a2:	2306      	movs	r3, #6
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	21b0      	movs	r1, #176	; 0xb0
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f003 f8bb 	bl	800da24 <VL53L0X_WriteMulti>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800a8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800a8c8:	2306      	movs	r3, #6
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	21b0      	movs	r1, #176	; 0xb0
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f003 f8d8 	bl	800da84 <VL53L0X_ReadMulti>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800a8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08c      	sub	sp, #48	; 0x30
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	603b      	str	r3, [r7, #0]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800a8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8fc:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800a8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a900:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a902:	2300      	movs	r3, #0
 800a904:	62bb      	str	r3, [r7, #40]	; 0x28
 800a906:	e02b      	b.n	800a960 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800a908:	f107 031c 	add.w	r3, r7, #28
 800a90c:	6a3a      	ldr	r2, [r7, #32]
 800a90e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff11 	bl	800a738 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a91c:	d103      	bne.n	800a926 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a91e:	23ce      	movs	r3, #206	; 0xce
 800a920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a924:	e020      	b.n	800a968 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	461a      	mov	r2, r3
 800a92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a92c:	4413      	add	r3, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff ff60 	bl	800a7f4 <is_aperture>
 800a934:	4603      	mov	r3, r0
 800a936:	461a      	mov	r2, r3
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d003      	beq.n	800a946 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a93e:	23ce      	movs	r3, #206	; 0xce
 800a940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a944:	e010      	b.n	800a968 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800a94a:	6a3a      	ldr	r2, [r7, #32]
 800a94c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a94e:	6838      	ldr	r0, [r7, #0]
 800a950:	f7ff ff6a 	bl	800a828 <enable_spad_bit>
		currentSpad++;
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	3301      	adds	r3, #1
 800a958:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	3301      	adds	r3, #1
 800a95e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a964:	429a      	cmp	r2, r3
 800a966:	d3cf      	bcc.n	800a908 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800a968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a96a:	6a3a      	ldr	r2, [r7, #32]
 800a96c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800a96e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a972:	2b00      	cmp	r3, #0
 800a974:	d106      	bne.n	800a984 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7ff ff8d 	bl	800a898 <set_ref_spad_map>
 800a97e:	4603      	mov	r3, r0
 800a980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800a984:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d121      	bne.n	800a9d0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800a98c:	f107 0314 	add.w	r3, r7, #20
 800a990:	4619      	mov	r1, r3
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7ff ff93 	bl	800a8be <get_ref_spad_map>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800a9a2:	e011      	b.n	800a9c8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	4413      	add	r3, r2
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	f107 0114 	add.w	r1, r7, #20
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	440b      	add	r3, r1
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d003      	beq.n	800a9c2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a9ba:	23ce      	movs	r3, #206	; 0xce
 800a9bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a9c0:	e006      	b.n	800a9d0 <enable_ref_spads+0xec>
			}
			i++;
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800a9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d3e9      	bcc.n	800a9a4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800a9d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3730      	adds	r7, #48	; 0x30
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	; 0x28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a9f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800a9fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d107      	bne.n	800aa14 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800aa04:	22c0      	movs	r2, #192	; 0xc0
 800aa06:	2101      	movs	r1, #1
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f003 f867 	bl	800dadc <VL53L0X_WrByte>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800aa14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d108      	bne.n	800aa2e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800aa1c:	f107 0308 	add.w	r3, r7, #8
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff fc48 	bl	800a2b8 <VL53L0X_PerformSingleRangingMeasurement>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800aa2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d107      	bne.n	800aa46 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa36:	2201      	movs	r2, #1
 800aa38:	21ff      	movs	r1, #255	; 0xff
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f003 f84e 	bl	800dadc <VL53L0X_WrByte>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800aa46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d107      	bne.n	800aa5e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	21b6      	movs	r1, #182	; 0xb6
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f003 f8ee 	bl	800dc34 <VL53L0X_RdWord>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800aa5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d107      	bne.n	800aa76 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aa66:	2200      	movs	r2, #0
 800aa68:	21ff      	movs	r1, #255	; 0xff
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f003 f836 	bl	800dadc <VL53L0X_WrByte>
 800aa70:	4603      	mov	r3, r0
 800aa72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800aa76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d112      	bne.n	800aaa4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800aa7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa82:	461a      	mov	r2, r3
 800aa84:	2101      	movs	r1, #1
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f003 f828 	bl	800dadc <VL53L0X_WrByte>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800aa92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d104      	bne.n	800aaa4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aaa0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800aaa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3728      	adds	r7, #40	; 0x28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800aab0:	b590      	push	{r4, r7, lr}
 800aab2:	b09d      	sub	sp, #116	; 0x74
 800aab4:	af06      	add	r7, sp, #24
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800aac2:	23b4      	movs	r3, #180	; 0xb4
 800aac4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800aac8:	2303      	movs	r3, #3
 800aaca:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800aacc:	232c      	movs	r3, #44	; 0x2c
 800aace:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800aadc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800aae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800aaea:	2306      	movs	r3, #6
 800aaec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800ab14:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800ab16:	2300      	movs	r3, #0
 800ab18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab1a:	e009      	b.n	800ab30 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ab26:	2200      	movs	r2, #0
 800ab28:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ab2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d3f1      	bcc.n	800ab1c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ab38:	2201      	movs	r2, #1
 800ab3a:	21ff      	movs	r1, #255	; 0xff
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f002 ffcd 	bl	800dadc <VL53L0X_WrByte>
 800ab42:	4603      	mov	r3, r0
 800ab44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ab48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d107      	bne.n	800ab60 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800ab50:	2200      	movs	r2, #0
 800ab52:	214f      	movs	r1, #79	; 0x4f
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f002 ffc1 	bl	800dadc <VL53L0X_WrByte>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800ab60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d107      	bne.n	800ab78 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800ab68:	222c      	movs	r2, #44	; 0x2c
 800ab6a:	214e      	movs	r1, #78	; 0x4e
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f002 ffb5 	bl	800dadc <VL53L0X_WrByte>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ab78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d107      	bne.n	800ab90 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ab80:	2200      	movs	r2, #0
 800ab82:	21ff      	movs	r1, #255	; 0xff
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f002 ffa9 	bl	800dadc <VL53L0X_WrByte>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ab90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d109      	bne.n	800abac <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800ab98:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	21b6      	movs	r1, #182	; 0xb6
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f002 ff9b 	bl	800dadc <VL53L0X_WrByte>
 800aba6:	4603      	mov	r3, r0
 800aba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800abac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d107      	bne.n	800abc4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800abb4:	2200      	movs	r2, #0
 800abb6:	2180      	movs	r1, #128	; 0x80
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f002 ff8f 	bl	800dadc <VL53L0X_WrByte>
 800abbe:	4603      	mov	r3, r0
 800abc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800abc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800abcc:	f107 0210 	add.w	r2, r7, #16
 800abd0:	f107 0111 	add.w	r1, r7, #17
 800abd4:	2300      	movs	r3, #0
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 fbbb 	bl	800b352 <VL53L0X_perform_ref_calibration>
 800abdc:	4603      	mov	r3, r0
 800abde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800abe2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d121      	bne.n	800ac2e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800abee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abf0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800abf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abf8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800ac06:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ac0a:	f107 0218 	add.w	r2, r7, #24
 800ac0e:	9204      	str	r2, [sp, #16]
 800ac10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac12:	9203      	str	r2, [sp, #12]
 800ac14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac16:	9202      	str	r2, [sp, #8]
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	4623      	mov	r3, r4
 800ac20:	4602      	mov	r2, r0
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f7ff fe5e 	bl	800a8e4 <enable_ref_spads>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d174      	bne.n	800ad20 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800ac3a:	f107 0312 	add.w	r3, r7, #18
 800ac3e:	4619      	mov	r1, r3
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7ff fecb 	bl	800a9dc <perform_ref_signal_measurement>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ac4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d161      	bne.n	800ad18 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800ac54:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ac56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d25d      	bcs.n	800ad18 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac60:	e009      	b.n	800ac76 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac66:	4413      	add	r3, r2
 800ac68:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800ac70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac72:	3301      	adds	r3, #1
 800ac74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d3f1      	bcc.n	800ac62 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800ac7e:	e002      	b.n	800ac86 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800ac80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac82:	3301      	adds	r3, #1
 800ac84:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800ac86:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800ac8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac8c:	4413      	add	r3, r2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff fdb0 	bl	800a7f4 <is_aperture>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d103      	bne.n	800aca2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800ac9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d3ee      	bcc.n	800ac80 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800aca2:	2301      	movs	r3, #1
 800aca4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800aca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800acb6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800acba:	f107 0218 	add.w	r2, r7, #24
 800acbe:	9204      	str	r2, [sp, #16]
 800acc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acc2:	9203      	str	r2, [sp, #12]
 800acc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acc6:	9202      	str	r2, [sp, #8]
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	4623      	mov	r3, r4
 800acd0:	4602      	mov	r2, r0
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7ff fe06 	bl	800a8e4 <enable_ref_spads>
 800acd8:	4603      	mov	r3, r0
 800acda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800acde:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d11b      	bne.n	800ad1e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800acea:	f107 0312 	add.w	r3, r7, #18
 800acee:	4619      	mov	r1, r3
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff fe73 	bl	800a9dc <perform_ref_signal_measurement>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800acfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10c      	bne.n	800ad1e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800ad04:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800ad06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d208      	bcs.n	800ad1e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800ad12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad14:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800ad16:	e002      	b.n	800ad1e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad1c:	e000      	b.n	800ad20 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800ad1e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800ad20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f040 80af 	bne.w	800ae88 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800ad2a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800ad2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	f240 80aa 	bls.w	800ae88 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800ad34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800ad44:	f107 031c 	add.w	r3, r7, #28
 800ad48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f009 f946 	bl	8013fdc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800ad50:	8a7b      	ldrh	r3, [r7, #18]
 800ad52:	461a      	mov	r2, r3
 800ad54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad56:	1ad3      	subs	r3, r2, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	bfb8      	it	lt
 800ad5c:	425b      	neglt	r3, r3
 800ad5e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800ad66:	e086      	b.n	800ae76 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800ad6e:	f107 0314 	add.w	r3, r7, #20
 800ad72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad76:	f7ff fcdf 	bl	800a738 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad80:	d103      	bne.n	800ad8a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ad82:	23ce      	movs	r3, #206	; 0xce
 800ad84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800ad88:	e07e      	b.n	800ae88 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800ad8a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4413      	add	r3, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7ff fd2e 	bl	800a7f4 <is_aperture>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d003      	beq.n	800adaa <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800ada2:	2301      	movs	r3, #1
 800ada4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800ada8:	e06e      	b.n	800ae88 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800adaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adac:	3301      	adds	r3, #1
 800adae:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800adba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff fd32 	bl	800a828 <enable_spad_bit>
 800adc4:	4603      	mov	r3, r0
 800adc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800adca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10c      	bne.n	800adec <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800add2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800add4:	3301      	adds	r3, #1
 800add6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800adde:	4619      	mov	r1, r3
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f7ff fd59 	bl	800a898 <set_ref_spad_map>
 800ade6:	4603      	mov	r3, r0
 800ade8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800adec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d146      	bne.n	800ae82 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800adf4:	f107 0312 	add.w	r3, r7, #18
 800adf8:	4619      	mov	r1, r3
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f7ff fdee 	bl	800a9dc <perform_ref_signal_measurement>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800ae06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d13b      	bne.n	800ae86 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800ae0e:	8a7b      	ldrh	r3, [r7, #18]
 800ae10:	461a      	mov	r2, r3
 800ae12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bfb8      	it	lt
 800ae1a:	425b      	neglt	r3, r3
 800ae1c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800ae1e:	8a7b      	ldrh	r3, [r7, #18]
 800ae20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d21c      	bcs.n	800ae60 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800ae26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d914      	bls.n	800ae58 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800ae2e:	f107 031c 	add.w	r3, r7, #28
 800ae32:	4619      	mov	r1, r3
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff fd2f 	bl	800a898 <set_ref_spad_map>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800ae46:	f107 011c 	add.w	r1, r7, #28
 800ae4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f009 f8c5 	bl	8013fdc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800ae52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae54:	3b01      	subs	r3, #1
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae5e:	e00a      	b.n	800ae76 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800ae6a:	f107 031c 	add.w	r3, r7, #28
 800ae6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae70:	4618      	mov	r0, r3
 800ae72:	f009 f8b3 	bl	8013fdc <memcpy>
		while (!complete) {
 800ae76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f43f af74 	beq.w	800ad68 <VL53L0X_perform_ref_spad_management+0x2b8>
 800ae80:	e002      	b.n	800ae88 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800ae82:	bf00      	nop
 800ae84:	e000      	b.n	800ae88 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800ae86:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d115      	bne.n	800aebc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae94:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ae9c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800aebc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	375c      	adds	r7, #92	; 0x5c
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd90      	pop	{r4, r7, pc}

0800aec8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800aec8:	b590      	push	{r4, r7, lr}
 800aeca:	b093      	sub	sp, #76	; 0x4c
 800aecc:	af06      	add	r7, sp, #24
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	4613      	mov	r3, r2
 800aed4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aed6:	2300      	movs	r3, #0
 800aed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800aee0:	23b4      	movs	r3, #180	; 0xb4
 800aee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800aee6:	2306      	movs	r3, #6
 800aee8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800aeea:	232c      	movs	r3, #44	; 0x2c
 800aeec:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aeee:	2201      	movs	r2, #1
 800aef0:	21ff      	movs	r1, #255	; 0xff
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f002 fdf2 	bl	800dadc <VL53L0X_WrByte>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800aefe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af02:	2b00      	cmp	r3, #0
 800af04:	d107      	bne.n	800af16 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800af06:	2200      	movs	r2, #0
 800af08:	214f      	movs	r1, #79	; 0x4f
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f002 fde6 	bl	800dadc <VL53L0X_WrByte>
 800af10:	4603      	mov	r3, r0
 800af12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800af16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d107      	bne.n	800af2e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800af1e:	222c      	movs	r2, #44	; 0x2c
 800af20:	214e      	movs	r1, #78	; 0x4e
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f002 fdda 	bl	800dadc <VL53L0X_WrByte>
 800af28:	4603      	mov	r3, r0
 800af2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800af2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af32:	2b00      	cmp	r3, #0
 800af34:	d107      	bne.n	800af46 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af36:	2200      	movs	r2, #0
 800af38:	21ff      	movs	r1, #255	; 0xff
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f002 fdce 	bl	800dadc <VL53L0X_WrByte>
 800af40:	4603      	mov	r3, r0
 800af42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800af46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d109      	bne.n	800af62 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800af4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af52:	461a      	mov	r2, r3
 800af54:	21b6      	movs	r1, #182	; 0xb6
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f002 fdc0 	bl	800dadc <VL53L0X_WrByte>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800af62:	2300      	movs	r3, #0
 800af64:	627b      	str	r3, [r7, #36]	; 0x24
 800af66:	e009      	b.n	800af7c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800af72:	2200      	movs	r2, #0
 800af74:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	3301      	adds	r3, #1
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
 800af7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	429a      	cmp	r2, r3
 800af82:	d3f1      	bcc.n	800af68 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d011      	beq.n	800afae <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800af8a:	e002      	b.n	800af92 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	3301      	adds	r3, #1
 800af90:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800af92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800af96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af98:	4413      	add	r3, r2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff fc2a 	bl	800a7f4 <is_aperture>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d103      	bne.n	800afae <VL53L0X_set_reference_spads+0xe6>
 800afa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d3ee      	bcc.n	800af8c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800afba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afbe:	79f9      	ldrb	r1, [r7, #7]
 800afc0:	f107 0214 	add.w	r2, r7, #20
 800afc4:	9204      	str	r2, [sp, #16]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	9203      	str	r2, [sp, #12]
 800afca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afcc:	9202      	str	r2, [sp, #8]
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	4623      	mov	r3, r4
 800afd6:	4602      	mov	r2, r0
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f7ff fc83 	bl	800a8e4 <enable_ref_spads>
 800afde:	4603      	mov	r3, r0
 800afe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800afe4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10c      	bne.n	800b006 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	79fa      	ldrb	r2, [r7, #7]
 800b002:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b006:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3734      	adds	r7, #52	; 0x34
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd90      	pop	{r4, r7, pc}

0800b012 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b084      	sub	sp, #16
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b01e:	2300      	movs	r3, #0
 800b020:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	f043 0301 	orr.w	r3, r3, #1
 800b030:	b2db      	uxtb	r3, r3
 800b032:	461a      	mov	r2, r3
 800b034:	2100      	movs	r1, #0
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f002 fd50 	bl	800dadc <VL53L0X_WrByte>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d104      	bne.n	800b052 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 f9bf 	bl	800b3cc <VL53L0X_measurement_poll_for_completion>
 800b04e:	4603      	mov	r3, r0
 800b050:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d105      	bne.n	800b066 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b05a:	2100      	movs	r1, #0
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff fab5 	bl	800a5cc <VL53L0X_ClearInterruptMask>
 800b062:	4603      	mov	r3, r0
 800b064:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d106      	bne.n	800b07c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b06e:	2200      	movs	r2, #0
 800b070:	2100      	movs	r1, #0
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f002 fd32 	bl	800dadc <VL53L0X_WrByte>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b07c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	4608      	mov	r0, r1
 800b092:	4611      	mov	r1, r2
 800b094:	461a      	mov	r2, r3
 800b096:	4603      	mov	r3, r0
 800b098:	70fb      	strb	r3, [r7, #3]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70bb      	strb	r3, [r7, #2]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	21ff      	movs	r1, #255	; 0xff
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f002 fd14 	bl	800dadc <VL53L0X_WrByte>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f002 fd0a 	bl	800dadc <VL53L0X_WrByte>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	21ff      	movs	r1, #255	; 0xff
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f002 fd00 	bl	800dadc <VL53L0X_WrByte>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	461a      	mov	r2, r3
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b0e6:	78fb      	ldrb	r3, [r7, #3]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d01e      	beq.n	800b12a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b0ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d009      	beq.n	800b108 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	21cb      	movs	r1, #203	; 0xcb
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f002 fd71 	bl	800dbe0 <VL53L0X_RdByte>
 800b0fe:	4603      	mov	r3, r0
 800b100:	461a      	mov	r2, r3
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	4313      	orrs	r3, r2
 800b106:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b108:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d02a      	beq.n	800b166 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b110:	f107 030e 	add.w	r3, r7, #14
 800b114:	461a      	mov	r2, r3
 800b116:	21ee      	movs	r1, #238	; 0xee
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f002 fd61 	bl	800dbe0 <VL53L0X_RdByte>
 800b11e:	4603      	mov	r3, r0
 800b120:	461a      	mov	r2, r3
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	4313      	orrs	r3, r2
 800b126:	73fb      	strb	r3, [r7, #15]
 800b128:	e01d      	b.n	800b166 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b12a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00a      	beq.n	800b148 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b132:	78bb      	ldrb	r3, [r7, #2]
 800b134:	461a      	mov	r2, r3
 800b136:	21cb      	movs	r1, #203	; 0xcb
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f002 fccf 	bl	800dadc <VL53L0X_WrByte>
 800b13e:	4603      	mov	r3, r0
 800b140:	461a      	mov	r2, r3
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	4313      	orrs	r3, r2
 800b146:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b150:	787b      	ldrb	r3, [r7, #1]
 800b152:	2280      	movs	r2, #128	; 0x80
 800b154:	21ee      	movs	r1, #238	; 0xee
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f002 fd0e 	bl	800db78 <VL53L0X_UpdateByte>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	4313      	orrs	r3, r2
 800b164:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b166:	2201      	movs	r2, #1
 800b168:	21ff      	movs	r1, #255	; 0xff
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f002 fcb6 	bl	800dadc <VL53L0X_WrByte>
 800b170:	4603      	mov	r3, r0
 800b172:	461a      	mov	r2, r3
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	4313      	orrs	r3, r2
 800b178:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b17a:	2201      	movs	r2, #1
 800b17c:	2100      	movs	r1, #0
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f002 fcac 	bl	800dadc <VL53L0X_WrByte>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b18e:	2200      	movs	r2, #0
 800b190:	21ff      	movs	r1, #255	; 0xff
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f002 fca2 	bl	800dadc <VL53L0X_WrByte>
 800b198:	4603      	mov	r3, r0
 800b19a:	461a      	mov	r2, r3
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	f023 0310 	bic.w	r3, r3, #16
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	701a      	strb	r2, [r3, #0]

	return Status;
 800b1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b08a      	sub	sp, #40	; 0x28
 800b1be:	af04      	add	r7, sp, #16
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	71fb      	strb	r3, [r7, #7]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b1e4:	79bb      	ldrb	r3, [r7, #6]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b1f0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f002 fc70 	bl	800dadc <VL53L0X_WrByte>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d105      	bne.n	800b214 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b208:	2140      	movs	r1, #64	; 0x40
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff ff01 	bl	800b012 <VL53L0X_perform_single_ref_calibration>
 800b210:	4603      	mov	r3, r0
 800b212:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b214:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d115      	bne.n	800b248 <VL53L0X_perform_vhv_calibration+0x8e>
 800b21c:	79fb      	ldrb	r3, [r7, #7]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d112      	bne.n	800b248 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b222:	7d39      	ldrb	r1, [r7, #20]
 800b224:	7d7a      	ldrb	r2, [r7, #21]
 800b226:	2300      	movs	r3, #0
 800b228:	9303      	str	r3, [sp, #12]
 800b22a:	2301      	movs	r3, #1
 800b22c:	9302      	str	r3, [sp, #8]
 800b22e:	f107 0313 	add.w	r3, r7, #19
 800b232:	9301      	str	r3, [sp, #4]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	460b      	mov	r3, r1
 800b23a:	2101      	movs	r1, #1
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f7ff ff23 	bl	800b088 <VL53L0X_ref_calibration_io>
 800b242:	4603      	mov	r3, r0
 800b244:	75fb      	strb	r3, [r7, #23]
 800b246:	e002      	b.n	800b24e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2200      	movs	r2, #0
 800b24c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d112      	bne.n	800b27c <VL53L0X_perform_vhv_calibration+0xc2>
 800b256:	79bb      	ldrb	r3, [r7, #6]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00f      	beq.n	800b27c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b25c:	7dbb      	ldrb	r3, [r7, #22]
 800b25e:	461a      	mov	r2, r3
 800b260:	2101      	movs	r1, #1
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f002 fc3a 	bl	800dadc <VL53L0X_WrByte>
 800b268:	4603      	mov	r3, r0
 800b26a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b26c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d103      	bne.n	800b27c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	7dba      	ldrb	r2, [r7, #22]
 800b278:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b27c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	; 0x28
 800b28c:	af04      	add	r7, sp, #16
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	4611      	mov	r1, r2
 800b294:	461a      	mov	r2, r3
 800b296:	460b      	mov	r3, r1
 800b298:	71fb      	strb	r3, [r7, #7]
 800b29a:	4613      	mov	r3, r2
 800b29c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b2ae:	79bb      	ldrb	r3, [r7, #6]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b2ba:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b2bc:	2202      	movs	r2, #2
 800b2be:	2101      	movs	r1, #1
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f002 fc0b 	bl	800dadc <VL53L0X_WrByte>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d105      	bne.n	800b2de <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f7ff fe9c 	bl	800b012 <VL53L0X_perform_single_ref_calibration>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b2de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d115      	bne.n	800b312 <VL53L0X_perform_phase_calibration+0x8a>
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d112      	bne.n	800b312 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b2ec:	7d39      	ldrb	r1, [r7, #20]
 800b2ee:	7d7a      	ldrb	r2, [r7, #21]
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	9303      	str	r3, [sp, #12]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	9302      	str	r3, [sp, #8]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	f107 0313 	add.w	r3, r7, #19
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	460b      	mov	r3, r1
 800b304:	2101      	movs	r1, #1
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7ff febe 	bl	800b088 <VL53L0X_ref_calibration_io>
 800b30c:	4603      	mov	r3, r0
 800b30e:	75fb      	strb	r3, [r7, #23]
 800b310:	e002      	b.n	800b318 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	2200      	movs	r2, #0
 800b316:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d112      	bne.n	800b346 <VL53L0X_perform_phase_calibration+0xbe>
 800b320:	79bb      	ldrb	r3, [r7, #6]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00f      	beq.n	800b346 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b326:	7dbb      	ldrb	r3, [r7, #22]
 800b328:	461a      	mov	r2, r3
 800b32a:	2101      	movs	r1, #1
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f002 fbd5 	bl	800dadc <VL53L0X_WrByte>
 800b332:	4603      	mov	r3, r0
 800b334:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d103      	bne.n	800b346 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	7dba      	ldrb	r2, [r7, #22]
 800b342:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b346:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b086      	sub	sp, #24
 800b356:	af00      	add	r7, sp, #0
 800b358:	60f8      	str	r0, [r7, #12]
 800b35a:	60b9      	str	r1, [r7, #8]
 800b35c:	607a      	str	r2, [r7, #4]
 800b35e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b360:	2300      	movs	r3, #0
 800b362:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b36e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b370:	78fa      	ldrb	r2, [r7, #3]
 800b372:	2300      	movs	r3, #0
 800b374:	68b9      	ldr	r1, [r7, #8]
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f7ff ff1f 	bl	800b1ba <VL53L0X_perform_vhv_calibration>
 800b37c:	4603      	mov	r3, r0
 800b37e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d107      	bne.n	800b398 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b388:	78fa      	ldrb	r2, [r7, #3]
 800b38a:	2300      	movs	r3, #0
 800b38c:	6879      	ldr	r1, [r7, #4]
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7ff ff7a 	bl	800b288 <VL53L0X_perform_phase_calibration>
 800b394:	4603      	mov	r3, r0
 800b396:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b398:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10f      	bne.n	800b3c0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b3a0:	7dbb      	ldrb	r3, [r7, #22]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	2101      	movs	r1, #1
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f002 fb98 	bl	800dadc <VL53L0X_WrByte>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b3b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d103      	bne.n	800b3c0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	7dba      	ldrb	r2, [r7, #22]
 800b3bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b3c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b3e0:	f107 030f 	add.w	r3, r7, #15
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7fe fe02 	bl	8009ff0 <VL53L0X_GetMeasurementDataReady>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b3f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d110      	bne.n	800b41a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d00f      	beq.n	800b41e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	3301      	adds	r3, #1
 800b402:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b40a:	d302      	bcc.n	800b412 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b40c:	23f9      	movs	r3, #249	; 0xf9
 800b40e:	75fb      	strb	r3, [r7, #23]
			break;
 800b410:	e006      	b.n	800b420 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f002 fc82 	bl	800dd1c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b418:	e7e2      	b.n	800b3e0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b41a:	bf00      	nop
 800b41c:	e000      	b.n	800b420 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b41e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b43a:	79fb      	ldrb	r3, [r7, #7]
 800b43c:	3301      	adds	r3, #1
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b452:	b480      	push	{r7}
 800b454:	b085      	sub	sp, #20
 800b456:	af00      	add	r7, sp, #0
 800b458:	4603      	mov	r3, r0
 800b45a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	085b      	lsrs	r3, r3, #1
 800b464:	b2db      	uxtb	r3, r3
 800b466:	3b01      	subs	r3, #1
 800b468:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b488:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b48a:	e002      	b.n	800b492 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	089b      	lsrs	r3, r3, #2
 800b490:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	429a      	cmp	r2, r3
 800b498:	d8f8      	bhi.n	800b48c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b49a:	e017      	b.n	800b4cc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d30b      	bcc.n	800b4c0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	085b      	lsrs	r3, r3, #1
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	e002      	b.n	800b4c6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	085b      	lsrs	r3, r3, #1
 800b4c4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	089b      	lsrs	r3, r3, #2
 800b4ca:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1e4      	bne.n	800b49c <VL53L0X_isqrt+0x24>
	}

	return res;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	2183      	movs	r1, #131	; 0x83
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f002 faf3 	bl	800dadc <VL53L0X_WrByte>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b500:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d11e      	bne.n	800b546 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b50c:	f107 030f 	add.w	r3, r7, #15
 800b510:	461a      	mov	r2, r3
 800b512:	2183      	movs	r1, #131	; 0x83
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f002 fb63 	bl	800dbe0 <VL53L0X_RdByte>
 800b51a:	4603      	mov	r3, r0
 800b51c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <VL53L0X_device_read_strobe+0x5a>
 800b524:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d106      	bne.n	800b53a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	3301      	adds	r3, #1
 800b530:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b538:	d3e8      	bcc.n	800b50c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b540:	d301      	bcc.n	800b546 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b542:	23f9      	movs	r3, #249	; 0xf9
 800b544:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b546:	2201      	movs	r2, #1
 800b548:	2183      	movs	r1, #131	; 0x83
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f002 fac6 	bl	800dadc <VL53L0X_WrByte>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	4313      	orrs	r3, r2
 800b558:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b55a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b098      	sub	sp, #96	; 0x60
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b572:	2300      	movs	r3, #0
 800b574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800b588:	2300      	movs	r3, #0
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b596:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b59a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b5ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800b5b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b5b6:	2b07      	cmp	r3, #7
 800b5b8:	f000 8408 	beq.w	800bdcc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b5bc:	2201      	movs	r2, #1
 800b5be:	2180      	movs	r1, #128	; 0x80
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f002 fa8b 	bl	800dadc <VL53L0X_WrByte>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	21ff      	movs	r1, #255	; 0xff
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f002 fa7f 	bl	800dadc <VL53L0X_WrByte>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f002 fa73 	bl	800dadc <VL53L0X_WrByte>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5fe:	4313      	orrs	r3, r2
 800b600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b604:	2206      	movs	r2, #6
 800b606:	21ff      	movs	r1, #255	; 0xff
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f002 fa67 	bl	800dadc <VL53L0X_WrByte>
 800b60e:	4603      	mov	r3, r0
 800b610:	461a      	mov	r2, r3
 800b612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b616:	4313      	orrs	r3, r2
 800b618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b61c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b620:	461a      	mov	r2, r3
 800b622:	2183      	movs	r1, #131	; 0x83
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f002 fadb 	bl	800dbe0 <VL53L0X_RdByte>
 800b62a:	4603      	mov	r3, r0
 800b62c:	461a      	mov	r2, r3
 800b62e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b632:	4313      	orrs	r3, r2
 800b634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b63c:	f043 0304 	orr.w	r3, r3, #4
 800b640:	b2db      	uxtb	r3, r3
 800b642:	461a      	mov	r2, r3
 800b644:	2183      	movs	r1, #131	; 0x83
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f002 fa48 	bl	800dadc <VL53L0X_WrByte>
 800b64c:	4603      	mov	r3, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b654:	4313      	orrs	r3, r2
 800b656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b65a:	2207      	movs	r2, #7
 800b65c:	21ff      	movs	r1, #255	; 0xff
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f002 fa3c 	bl	800dadc <VL53L0X_WrByte>
 800b664:	4603      	mov	r3, r0
 800b666:	461a      	mov	r2, r3
 800b668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b66c:	4313      	orrs	r3, r2
 800b66e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b672:	2201      	movs	r2, #1
 800b674:	2181      	movs	r1, #129	; 0x81
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f002 fa30 	bl	800dadc <VL53L0X_WrByte>
 800b67c:	4603      	mov	r3, r0
 800b67e:	461a      	mov	r2, r3
 800b680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b684:	4313      	orrs	r3, r2
 800b686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f002 fb46 	bl	800dd1c <VL53L0X_PollingDelay>
 800b690:	4603      	mov	r3, r0
 800b692:	461a      	mov	r2, r3
 800b694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b698:	4313      	orrs	r3, r2
 800b69a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b69e:	2201      	movs	r2, #1
 800b6a0:	2180      	movs	r1, #128	; 0x80
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f002 fa1a 	bl	800dadc <VL53L0X_WrByte>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f000 8098 	beq.w	800b7f2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b6c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b6c6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f040 8091 	bne.w	800b7f2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b6d0:	226b      	movs	r2, #107	; 0x6b
 800b6d2:	2194      	movs	r1, #148	; 0x94
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f002 fa01 	bl	800dadc <VL53L0X_WrByte>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	461a      	mov	r2, r3
 800b6de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7ff fef9 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b6fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b700:	461a      	mov	r2, r3
 800b702:	2190      	movs	r1, #144	; 0x90
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f002 facd 	bl	800dca4 <VL53L0X_RdDWord>
 800b70a:	4603      	mov	r3, r0
 800b70c:	461a      	mov	r2, r3
 800b70e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b712:	4313      	orrs	r3, r2
 800b714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	0a1b      	lsrs	r3, r3, #8
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b722:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	0bdb      	lsrs	r3, r3, #15
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b734:	2224      	movs	r2, #36	; 0x24
 800b736:	2194      	movs	r1, #148	; 0x94
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f002 f9cf 	bl	800dadc <VL53L0X_WrByte>
 800b73e:	4603      	mov	r3, r0
 800b740:	461a      	mov	r2, r3
 800b742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b746:	4313      	orrs	r3, r2
 800b748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff fec7 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800b752:	4603      	mov	r3, r0
 800b754:	461a      	mov	r2, r3
 800b756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b75a:	4313      	orrs	r3, r2
 800b75c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b764:	461a      	mov	r2, r3
 800b766:	2190      	movs	r1, #144	; 0x90
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f002 fa9b 	bl	800dca4 <VL53L0X_RdDWord>
 800b76e:	4603      	mov	r3, r0
 800b770:	461a      	mov	r2, r3
 800b772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b776:	4313      	orrs	r3, r2
 800b778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	0e1b      	lsrs	r3, r3, #24
 800b780:	b2db      	uxtb	r3, r3
 800b782:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	0c1b      	lsrs	r3, r3, #16
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	0a1b      	lsrs	r3, r3, #8
 800b790:	b2db      	uxtb	r3, r3
 800b792:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	b2db      	uxtb	r3, r3
 800b798:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800b79a:	2225      	movs	r2, #37	; 0x25
 800b79c:	2194      	movs	r1, #148	; 0x94
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f002 f99c 	bl	800dadc <VL53L0X_WrByte>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff fe94 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b7c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	2190      	movs	r1, #144	; 0x90
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f002 fa68 	bl	800dca4 <VL53L0X_RdDWord>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	0e1b      	lsrs	r3, r3, #24
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	0c1b      	lsrs	r3, r3, #16
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800b7f2:	78fb      	ldrb	r3, [r7, #3]
 800b7f4:	f003 0302 	and.w	r3, r3, #2
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 8189 	beq.w	800bb10 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b7fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b802:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b806:	2b00      	cmp	r3, #0
 800b808:	f040 8182 	bne.w	800bb10 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800b80c:	2202      	movs	r2, #2
 800b80e:	2194      	movs	r1, #148	; 0x94
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f002 f963 	bl	800dadc <VL53L0X_WrByte>
 800b816:	4603      	mov	r3, r0
 800b818:	461a      	mov	r2, r3
 800b81a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b81e:	4313      	orrs	r3, r2
 800b820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff fe5b 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800b82a:	4603      	mov	r3, r0
 800b82c:	461a      	mov	r2, r3
 800b82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b832:	4313      	orrs	r3, r2
 800b834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800b838:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800b83c:	461a      	mov	r2, r3
 800b83e:	2190      	movs	r1, #144	; 0x90
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f002 f9cd 	bl	800dbe0 <VL53L0X_RdByte>
 800b846:	4603      	mov	r3, r0
 800b848:	461a      	mov	r2, r3
 800b84a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b84e:	4313      	orrs	r3, r2
 800b850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b854:	227b      	movs	r2, #123	; 0x7b
 800b856:	2194      	movs	r1, #148	; 0x94
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f002 f93f 	bl	800dadc <VL53L0X_WrByte>
 800b85e:	4603      	mov	r3, r0
 800b860:	461a      	mov	r2, r3
 800b862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b866:	4313      	orrs	r3, r2
 800b868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fe37 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800b872:	4603      	mov	r3, r0
 800b874:	461a      	mov	r2, r3
 800b876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b87a:	4313      	orrs	r3, r2
 800b87c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800b880:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800b884:	461a      	mov	r2, r3
 800b886:	2190      	movs	r1, #144	; 0x90
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f002 f9a9 	bl	800dbe0 <VL53L0X_RdByte>
 800b88e:	4603      	mov	r3, r0
 800b890:	461a      	mov	r2, r3
 800b892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b896:	4313      	orrs	r3, r2
 800b898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800b89c:	2277      	movs	r2, #119	; 0x77
 800b89e:	2194      	movs	r1, #148	; 0x94
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f002 f91b 	bl	800dadc <VL53L0X_WrByte>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff fe13 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	461a      	mov	r2, r3
 800b8be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b8c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	2190      	movs	r1, #144	; 0x90
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f002 f9e7 	bl	800dca4 <VL53L0X_RdDWord>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	461a      	mov	r2, r3
 800b8da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	0e5b      	lsrs	r3, r3, #25
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	0c9b      	lsrs	r3, r3, #18
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800b900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b902:	0adb      	lsrs	r3, r3, #11
 800b904:	b2db      	uxtb	r3, r3
 800b906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800b90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b910:	091b      	lsrs	r3, r3, #4
 800b912:	b2db      	uxtb	r3, r3
 800b914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	00db      	lsls	r3, r3, #3
 800b922:	b2db      	uxtb	r3, r3
 800b924:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800b92e:	2278      	movs	r2, #120	; 0x78
 800b930:	2194      	movs	r1, #148	; 0x94
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f002 f8d2 	bl	800dadc <VL53L0X_WrByte>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b940:	4313      	orrs	r3, r2
 800b942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff fdca 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800b94c:	4603      	mov	r3, r0
 800b94e:	461a      	mov	r2, r3
 800b950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b954:	4313      	orrs	r3, r2
 800b956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b95a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b95e:	461a      	mov	r2, r3
 800b960:	2190      	movs	r1, #144	; 0x90
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f002 f99e 	bl	800dca4 <VL53L0X_RdDWord>
 800b968:	4603      	mov	r3, r0
 800b96a:	461a      	mov	r2, r3
 800b96c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b970:	4313      	orrs	r3, r2
 800b972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	0f5b      	lsrs	r3, r3, #29
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b980:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800b982:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b986:	4413      	add	r3, r2
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	0d9b      	lsrs	r3, r3, #22
 800b990:	b2db      	uxtb	r3, r3
 800b992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b996:	b2db      	uxtb	r3, r3
 800b998:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	0bdb      	lsrs	r3, r3, #15
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	0a1b      	lsrs	r3, r3, #8
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	085b      	lsrs	r3, r3, #1
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	019b      	lsls	r3, r3, #6
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800b9d6:	2279      	movs	r2, #121	; 0x79
 800b9d8:	2194      	movs	r1, #148	; 0x94
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f002 f87e 	bl	800dadc <VL53L0X_WrByte>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7ff fd76 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ba02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba06:	461a      	mov	r2, r3
 800ba08:	2190      	movs	r1, #144	; 0x90
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f002 f94a 	bl	800dca4 <VL53L0X_RdDWord>
 800ba10:	4603      	mov	r3, r0
 800ba12:	461a      	mov	r2, r3
 800ba14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	0e9b      	lsrs	r3, r3, #26
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba28:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800ba2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba2e:	4413      	add	r3, r2
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	0cdb      	lsrs	r3, r3, #19
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	0b1b      	lsrs	r3, r3, #12
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800ba50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba52:	095b      	lsrs	r3, r3, #5
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ba70:	227a      	movs	r2, #122	; 0x7a
 800ba72:	2194      	movs	r1, #148	; 0x94
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f002 f831 	bl	800dadc <VL53L0X_WrByte>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba82:	4313      	orrs	r3, r2
 800ba84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff fd29 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	461a      	mov	r2, r3
 800ba92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba96:	4313      	orrs	r3, r2
 800ba98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ba9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800baa0:	461a      	mov	r2, r3
 800baa2:	2190      	movs	r1, #144	; 0x90
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f002 f8fd 	bl	800dca4 <VL53L0X_RdDWord>
 800baaa:	4603      	mov	r3, r0
 800baac:	461a      	mov	r2, r3
 800baae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bab2:	4313      	orrs	r3, r2
 800bab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	0f9b      	lsrs	r3, r3, #30
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800bac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bac8:	4413      	add	r3, r2
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	0ddb      	lsrs	r3, r3, #23
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	0c1b      	lsrs	r3, r3, #16
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	0a5b      	lsrs	r3, r3, #9
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	089b      	lsrs	r3, r3, #2
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	f003 0304 	and.w	r3, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 80f1 	beq.w	800bcfe <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bb1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bb20:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f040 80ea 	bne.w	800bcfe <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bb2a:	227b      	movs	r2, #123	; 0x7b
 800bb2c:	2194      	movs	r1, #148	; 0x94
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f001 ffd4 	bl	800dadc <VL53L0X_WrByte>
 800bb34:	4603      	mov	r3, r0
 800bb36:	461a      	mov	r2, r3
 800bb38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff fccc 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb50:	4313      	orrs	r3, r2
 800bb52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800bb56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	2190      	movs	r1, #144	; 0x90
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f002 f8a0 	bl	800dca4 <VL53L0X_RdDWord>
 800bb64:	4603      	mov	r3, r0
 800bb66:	461a      	mov	r2, r3
 800bb68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800bb72:	227c      	movs	r2, #124	; 0x7c
 800bb74:	2194      	movs	r1, #148	; 0x94
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f001 ffb0 	bl	800dadc <VL53L0X_WrByte>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb84:	4313      	orrs	r3, r2
 800bb86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fca8 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800bb90:	4603      	mov	r3, r0
 800bb92:	461a      	mov	r2, r3
 800bb94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800bb9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bba2:	461a      	mov	r2, r3
 800bba4:	2190      	movs	r1, #144	; 0x90
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f002 f87c 	bl	800dca4 <VL53L0X_RdDWord>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800bbba:	2273      	movs	r2, #115	; 0x73
 800bbbc:	2194      	movs	r1, #148	; 0x94
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f001 ff8c 	bl	800dadc <VL53L0X_WrByte>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fc84 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	461a      	mov	r2, r3
 800bbdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bbe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbea:	461a      	mov	r2, r3
 800bbec:	2190      	movs	r1, #144	; 0x90
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f002 f858 	bl	800dca4 <VL53L0X_RdDWord>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800bc0a:	2274      	movs	r2, #116	; 0x74
 800bc0c:	2194      	movs	r1, #148	; 0x94
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f001 ff64 	bl	800dadc <VL53L0X_WrByte>
 800bc14:	4603      	mov	r3, r0
 800bc16:	461a      	mov	r2, r3
 800bc18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff fc5c 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc30:	4313      	orrs	r3, r2
 800bc32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	2190      	movs	r1, #144	; 0x90
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f002 f830 	bl	800dca4 <VL53L0X_RdDWord>
 800bc44:	4603      	mov	r3, r0
 800bc46:	461a      	mov	r2, r3
 800bc48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800bc56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800bc5c:	2275      	movs	r2, #117	; 0x75
 800bc5e:	2194      	movs	r1, #148	; 0x94
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f001 ff3b 	bl	800dadc <VL53L0X_WrByte>
 800bc66:	4603      	mov	r3, r0
 800bc68:	461a      	mov	r2, r3
 800bc6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff fc33 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc82:	4313      	orrs	r3, r2
 800bc84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	2190      	movs	r1, #144	; 0x90
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f002 f807 	bl	800dca4 <VL53L0X_RdDWord>
 800bc96:	4603      	mov	r3, r0
 800bc98:	461a      	mov	r2, r3
 800bc9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800bcac:	2276      	movs	r2, #118	; 0x76
 800bcae:	2194      	movs	r1, #148	; 0x94
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f001 ff13 	bl	800dadc <VL53L0X_WrByte>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	461a      	mov	r2, r3
 800bcba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff fc0b 	bl	800b4e0 <VL53L0X_device_read_strobe>
 800bcca:	4603      	mov	r3, r0
 800bccc:	461a      	mov	r2, r3
 800bcce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bcd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcdc:	461a      	mov	r2, r3
 800bcde:	2190      	movs	r1, #144	; 0x90
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f001 ffdf 	bl	800dca4 <VL53L0X_RdDWord>
 800bce6:	4603      	mov	r3, r0
 800bce8:	461a      	mov	r2, r3
 800bcea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800bcf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2181      	movs	r1, #129	; 0x81
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f001 feea 	bl	800dadc <VL53L0X_WrByte>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd10:	4313      	orrs	r3, r2
 800bd12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bd16:	2206      	movs	r2, #6
 800bd18:	21ff      	movs	r1, #255	; 0xff
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f001 fede 	bl	800dadc <VL53L0X_WrByte>
 800bd20:	4603      	mov	r3, r0
 800bd22:	461a      	mov	r2, r3
 800bd24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bd2e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bd32:	461a      	mov	r2, r3
 800bd34:	2183      	movs	r1, #131	; 0x83
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f001 ff52 	bl	800dbe0 <VL53L0X_RdByte>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd44:	4313      	orrs	r3, r2
 800bd46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800bd4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd4e:	f023 0304 	bic.w	r3, r3, #4
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	461a      	mov	r2, r3
 800bd56:	2183      	movs	r1, #131	; 0x83
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f001 febf 	bl	800dadc <VL53L0X_WrByte>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	461a      	mov	r2, r3
 800bd62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd66:	4313      	orrs	r3, r2
 800bd68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	21ff      	movs	r1, #255	; 0xff
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f001 feb3 	bl	800dadc <VL53L0X_WrByte>
 800bd76:	4603      	mov	r3, r0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bd84:	2201      	movs	r2, #1
 800bd86:	2100      	movs	r1, #0
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f001 fea7 	bl	800dadc <VL53L0X_WrByte>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	461a      	mov	r2, r3
 800bd92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd96:	4313      	orrs	r3, r2
 800bd98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	21ff      	movs	r1, #255	; 0xff
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 fe9b 	bl	800dadc <VL53L0X_WrByte>
 800bda6:	4603      	mov	r3, r0
 800bda8:	461a      	mov	r2, r3
 800bdaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2180      	movs	r1, #128	; 0x80
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f001 fe8f 	bl	800dadc <VL53L0X_WrByte>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bdcc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f040 808f 	bne.w	800bef4 <VL53L0X_get_info_from_device+0x98e>
 800bdd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdda:	2b07      	cmp	r3, #7
 800bddc:	f000 808a 	beq.w	800bef4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800bde0:	78fb      	ldrb	r3, [r7, #3]
 800bde2:	f003 0301 	and.w	r3, r3, #1
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d024      	beq.n	800be34 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bdea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdee:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d11e      	bne.n	800be34 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800bdfc:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800be06:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800be0a:	2300      	movs	r3, #0
 800be0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be0e:	e00e      	b.n	800be2e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800be10:	f107 0208 	add.w	r2, r7, #8
 800be14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be16:	4413      	add	r3, r2
 800be18:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be1e:	4413      	add	r3, r2
 800be20:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800be24:	460a      	mov	r2, r1
 800be26:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800be28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be2a:	3301      	adds	r3, #1
 800be2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be30:	2b05      	cmp	r3, #5
 800be32:	dded      	ble.n	800be10 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	f003 0302 	and.w	r3, r3, #2
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d018      	beq.n	800be70 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800be3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be42:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800be46:	2b00      	cmp	r3, #0
 800be48:	d112      	bne.n	800be70 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be54:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	33f3      	adds	r3, #243	; 0xf3
 800be62:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800be64:	f107 0310 	add.w	r3, r7, #16
 800be68:	4619      	mov	r1, r3
 800be6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be6c:	f008 f936 	bl	80140dc <strcpy>

		}

		if (((option & 4) == 4) &&
 800be70:	78fb      	ldrb	r3, [r7, #3]
 800be72:	f003 0304 	and.w	r3, r3, #4
 800be76:	2b00      	cmp	r3, #0
 800be78:	d030      	beq.n	800bedc <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800be7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be7e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800be82:	2b00      	cmp	r3, #0
 800be84:	d12a      	bne.n	800bedc <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800be96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be98:	025b      	lsls	r3, r3, #9
 800be9a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bea0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800beaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beac:	2b00      	cmp	r3, #0
 800beae:	d011      	beq.n	800bed4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800beb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800beb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800beb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bebe:	fb02 f303 	mul.w	r3, r2, r3
 800bec2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800bec4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800bec8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800becc:	425b      	negs	r3, r3
 800bece:	b29b      	uxth	r3, r3
 800bed0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800bed4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800bedc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800beea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bef4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3760      	adds	r7, #96	; 0x60
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800bf0c:	f240 6277 	movw	r2, #1655	; 0x677
 800bf10:	f04f 0300 	mov.w	r3, #0
 800bf14:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800bf18:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800bf1c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800bf1e:	78fb      	ldrb	r3, [r7, #3]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	fb02 f303 	mul.w	r3, r2, r3
 800bf2c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800bf2e:	68bb      	ldr	r3, [r7, #8]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	371c      	adds	r7, #28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d017      	beq.n	800bf86 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	3b01      	subs	r3, #1
 800bf5a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800bf5c:	e005      	b.n	800bf6a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	085b      	lsrs	r3, r3, #1
 800bf62:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800bf64:	89fb      	ldrh	r3, [r7, #14]
 800bf66:	3301      	adds	r3, #1
 800bf68:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1f4      	bne.n	800bf5e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800bf74:	89fb      	ldrh	r3, [r7, #14]
 800bf76:	021b      	lsls	r3, r3, #8
 800bf78:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800bf82:	4413      	add	r3, r2
 800bf84:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800bf86:	8afb      	ldrh	r3, [r7, #22]

}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800bfa2:	88fb      	ldrh	r3, [r7, #6]
 800bfa4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800bfa6:	88fa      	ldrh	r2, [r7, #6]
 800bfa8:	0a12      	lsrs	r2, r2, #8
 800bfaa:	b292      	uxth	r2, r2
 800bfac:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800bfae:	3301      	adds	r3, #1
 800bfb0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800bfd2:	79fb      	ldrb	r3, [r7, #7]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff ff92 	bl	800bf00 <VL53L0X_calc_macro_period_ps>
 800bfdc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bfe4:	4a0a      	ldr	r2, [pc, #40]	; (800c010 <VL53L0X_calc_timeout_mclks+0x50>)
 800bfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfea:	099b      	lsrs	r3, r3, #6
 800bfec:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bff4:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	085b      	lsrs	r3, r3, #1
 800bffc:	441a      	add	r2, r3
	timeout_period_mclks =
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	fbb2 f3f3 	udiv	r3, r2, r3
 800c004:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c006:	69fb      	ldr	r3, [r7, #28]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3720      	adds	r7, #32
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	10624dd3 	.word	0x10624dd3

0800c014 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	807b      	strh	r3, [r7, #2]
 800c020:	4613      	mov	r3, r2
 800c022:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c028:	787b      	ldrb	r3, [r7, #1]
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7ff ff67 	bl	800bf00 <VL53L0X_calc_macro_period_ps>
 800c032:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c03a:	4a0a      	ldr	r2, [pc, #40]	; (800c064 <VL53L0X_calc_timeout_us+0x50>)
 800c03c:	fba2 2303 	umull	r2, r3, r2, r3
 800c040:	099b      	lsrs	r3, r3, #6
 800c042:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c044:	887b      	ldrh	r3, [r7, #2]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	fb02 f303 	mul.w	r3, r2, r3
 800c04c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c050:	4a04      	ldr	r2, [pc, #16]	; (800c064 <VL53L0X_calc_timeout_us+0x50>)
 800c052:	fba2 2303 	umull	r2, r3, r2, r3
 800c056:	099b      	lsrs	r3, r3, #6
 800c058:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c05a:	697b      	ldr	r3, [r7, #20]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	10624dd3 	.word	0x10624dd3

0800c068 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b08c      	sub	sp, #48	; 0x30
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	460b      	mov	r3, r1
 800c072:	607a      	str	r2, [r7, #4]
 800c074:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c076:	2300      	movs	r3, #0
 800c078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c08a:	2300      	movs	r3, #0
 800c08c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c08e:	7afb      	ldrb	r3, [r7, #11]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d005      	beq.n	800c0a0 <get_sequence_step_timeout+0x38>
 800c094:	7afb      	ldrb	r3, [r7, #11]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d002      	beq.n	800c0a0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c09a:	7afb      	ldrb	r3, [r7, #11]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d128      	bne.n	800c0f2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c0a0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f7fd fa7d 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c0b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d109      	bne.n	800c0d0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c0bc:	f107 0320 	add.w	r3, r7, #32
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	2146      	movs	r1, #70	; 0x46
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f001 fd8b 	bl	800dbe0 <VL53L0X_RdByte>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c0d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff ff5c 	bl	800bf94 <VL53L0X_decode_timeout>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c0e0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c0e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f7ff ff93 	bl	800c014 <VL53L0X_calc_timeout_us>
 800c0ee:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0f0:	e092      	b.n	800c218 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c0f2:	7afb      	ldrb	r3, [r7, #11]
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d135      	bne.n	800c164 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c0f8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	2100      	movs	r1, #0
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7fd fa51 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c106:	4603      	mov	r3, r0
 800c108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c10c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c110:	2b00      	cmp	r3, #0
 800c112:	f040 8081 	bne.w	800c218 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c116:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c11a:	461a      	mov	r2, r3
 800c11c:	2100      	movs	r1, #0
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f7fd fa42 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c124:	4603      	mov	r3, r0
 800c126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c12a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d109      	bne.n	800c146 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c132:	f107 031e 	add.w	r3, r7, #30
 800c136:	461a      	mov	r2, r3
 800c138:	2151      	movs	r1, #81	; 0x51
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f001 fd7a 	bl	800dc34 <VL53L0X_RdWord>
 800c140:	4603      	mov	r3, r0
 800c142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c146:	8bfb      	ldrh	r3, [r7, #30]
 800c148:	4618      	mov	r0, r3
 800c14a:	f7ff ff23 	bl	800bf94 <VL53L0X_decode_timeout>
 800c14e:	4603      	mov	r3, r0
 800c150:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c152:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c156:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c158:	4619      	mov	r1, r3
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f7ff ff5a 	bl	800c014 <VL53L0X_calc_timeout_us>
 800c160:	62b8      	str	r0, [r7, #40]	; 0x28
 800c162:	e059      	b.n	800c218 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c164:	7afb      	ldrb	r3, [r7, #11]
 800c166:	2b04      	cmp	r3, #4
 800c168:	d156      	bne.n	800c218 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c16a:	f107 0314 	add.w	r3, r7, #20
 800c16e:	4619      	mov	r1, r3
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f7fd fb25 	bl	80097c0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c17a:	7dfb      	ldrb	r3, [r7, #23]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d01d      	beq.n	800c1bc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c180:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c184:	461a      	mov	r2, r3
 800c186:	2100      	movs	r1, #0
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f7fd fa0d 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c18e:	4603      	mov	r3, r0
 800c190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c194:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10f      	bne.n	800c1bc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c19c:	f107 031e 	add.w	r3, r7, #30
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	2151      	movs	r1, #81	; 0x51
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f001 fd45 	bl	800dc34 <VL53L0X_RdWord>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c1b0:	8bfb      	ldrh	r3, [r7, #30]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff feee 	bl	800bf94 <VL53L0X_decode_timeout>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c1bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d109      	bne.n	800c1d8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c1c4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f7fd f9eb 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c1d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10f      	bne.n	800c200 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c1e0:	f107 031c 	add.w	r3, r7, #28
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	2171      	movs	r1, #113	; 0x71
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f001 fd23 	bl	800dc34 <VL53L0X_RdWord>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c1f4:	8bbb      	ldrh	r3, [r7, #28]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7ff fecc 	bl	800bf94 <VL53L0X_decode_timeout>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c200:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c208:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c20e:	4619      	mov	r1, r3
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f7ff feff 	bl	800c014 <VL53L0X_calc_timeout_us>
 800c216:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c21c:	601a      	str	r2, [r3, #0]

	return Status;
 800c21e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c222:	4618      	mov	r0, r3
 800c224:	3730      	adds	r7, #48	; 0x30
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b08a      	sub	sp, #40	; 0x28
 800c22e:	af00      	add	r7, sp, #0
 800c230:	60f8      	str	r0, [r7, #12]
 800c232:	460b      	mov	r3, r1
 800c234:	607a      	str	r2, [r7, #4]
 800c236:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c238:	2300      	movs	r3, #0
 800c23a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c23e:	7afb      	ldrb	r3, [r7, #11]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <set_sequence_step_timeout+0x26>
 800c244:	7afb      	ldrb	r3, [r7, #11]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d002      	beq.n	800c250 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c24a:	7afb      	ldrb	r3, [r7, #11]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d138      	bne.n	800c2c2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c250:	f107 031b 	add.w	r3, r7, #27
 800c254:	461a      	mov	r2, r3
 800c256:	2100      	movs	r1, #0
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f7fd f9a5 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c25e:	4603      	mov	r3, r0
 800c260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d11a      	bne.n	800c2a2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c26c:	7efb      	ldrb	r3, [r7, #27]
 800c26e:	461a      	mov	r2, r3
 800c270:	6879      	ldr	r1, [r7, #4]
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f7ff fea4 	bl	800bfc0 <VL53L0X_calc_timeout_mclks>
 800c278:	4603      	mov	r3, r0
 800c27a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c27c:	8bbb      	ldrh	r3, [r7, #28]
 800c27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c282:	d903      	bls.n	800c28c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c284:	23ff      	movs	r3, #255	; 0xff
 800c286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c28a:	e004      	b.n	800c296 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c28c:	8bbb      	ldrh	r3, [r7, #28]
 800c28e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c290:	3b01      	subs	r3, #1
 800c292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c296:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c2a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f040 80ab 	bne.w	800c402 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c2ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	2146      	movs	r1, #70	; 0x46
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f001 fc11 	bl	800dadc <VL53L0X_WrByte>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c2c0:	e09f      	b.n	800c402 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c2c2:	7afb      	ldrb	r3, [r7, #11]
 800c2c4:	2b03      	cmp	r3, #3
 800c2c6:	d135      	bne.n	800c334 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c2c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d11b      	bne.n	800c308 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c2d0:	f107 031b 	add.w	r3, r7, #27
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f7fd f965 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c2e4:	7efb      	ldrb	r3, [r7, #27]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f7ff fe68 	bl	800bfc0 <VL53L0X_calc_timeout_mclks>
 800c2f0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c2f2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c2f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff fe20 	bl	800bf3c <VL53L0X_encode_timeout>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c300:	8b3a      	ldrh	r2, [r7, #24]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c308:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d108      	bne.n	800c322 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c310:	8b3b      	ldrh	r3, [r7, #24]
 800c312:	461a      	mov	r2, r3
 800c314:	2151      	movs	r1, #81	; 0x51
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f001 fc04 	bl	800db24 <VL53L0X_WrWord>
 800c31c:	4603      	mov	r3, r0
 800c31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c322:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c326:	2b00      	cmp	r3, #0
 800c328:	d16b      	bne.n	800c402 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c332:	e066      	b.n	800c402 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	2b04      	cmp	r3, #4
 800c338:	d160      	bne.n	800c3fc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c33a:	f107 0310 	add.w	r3, r7, #16
 800c33e:	4619      	mov	r1, r3
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f7fd fa3d 	bl	80097c0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c34a:	7cfb      	ldrb	r3, [r7, #19]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d01d      	beq.n	800c38c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c350:	f107 031b 	add.w	r3, r7, #27
 800c354:	461a      	mov	r2, r3
 800c356:	2100      	movs	r1, #0
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f7fd f925 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c35e:	4603      	mov	r3, r0
 800c360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c364:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10f      	bne.n	800c38c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c36c:	f107 0318 	add.w	r3, r7, #24
 800c370:	461a      	mov	r2, r3
 800c372:	2151      	movs	r1, #81	; 0x51
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f001 fc5d 	bl	800dc34 <VL53L0X_RdWord>
 800c37a:	4603      	mov	r3, r0
 800c37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c380:	8b3b      	ldrh	r3, [r7, #24]
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff fe06 	bl	800bf94 <VL53L0X_decode_timeout>
 800c388:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c38a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c38c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c390:	2b00      	cmp	r3, #0
 800c392:	d109      	bne.n	800c3a8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c394:	f107 031b 	add.w	r3, r7, #27
 800c398:	461a      	mov	r2, r3
 800c39a:	2101      	movs	r1, #1
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7fd f903 	bl	80095a8 <VL53L0X_GetVcselPulsePeriod>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c3a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d128      	bne.n	800c402 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c3b0:	7efb      	ldrb	r3, [r7, #27]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	6879      	ldr	r1, [r7, #4]
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	f7ff fe02 	bl	800bfc0 <VL53L0X_calc_timeout_mclks>
 800c3bc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c3be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3c0:	6a3a      	ldr	r2, [r7, #32]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c3c6:	6a38      	ldr	r0, [r7, #32]
 800c3c8:	f7ff fdb8 	bl	800bf3c <VL53L0X_encode_timeout>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c3d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d108      	bne.n	800c3ea <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c3d8:	8bfb      	ldrh	r3, [r7, #30]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	2171      	movs	r1, #113	; 0x71
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f001 fba0 	bl	800db24 <VL53L0X_WrWord>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c3ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d107      	bne.n	800c402 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c3fa:	e002      	b.n	800c402 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c3fc:	23fc      	movs	r3, #252	; 0xfc
 800c3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c402:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c406:	4618      	mov	r0, r3
 800c408:	3728      	adds	r7, #40	; 0x28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b08a      	sub	sp, #40	; 0x28
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	460b      	mov	r3, r1
 800c418:	70fb      	strb	r3, [r7, #3]
 800c41a:	4613      	mov	r3, r2
 800c41c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c41e:	2300      	movs	r3, #0
 800c420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c424:	230c      	movs	r3, #12
 800c426:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c42a:	2312      	movs	r3, #18
 800c42c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c430:	2308      	movs	r3, #8
 800c432:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c436:	230e      	movs	r3, #14
 800c438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800c440:	78bb      	ldrb	r3, [r7, #2]
 800c442:	f003 0301 	and.w	r3, r3, #1
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d003      	beq.n	800c454 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c44c:	23fc      	movs	r3, #252	; 0xfc
 800c44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c452:	e020      	b.n	800c496 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10d      	bne.n	800c476 <VL53L0X_set_vcsel_pulse_period+0x68>
 800c45a:	78ba      	ldrb	r2, [r7, #2]
 800c45c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c460:	429a      	cmp	r2, r3
 800c462:	d304      	bcc.n	800c46e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c464:	78ba      	ldrb	r2, [r7, #2]
 800c466:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d903      	bls.n	800c476 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c46e:	23fc      	movs	r3, #252	; 0xfc
 800c470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c474:	e00f      	b.n	800c496 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d10c      	bne.n	800c496 <VL53L0X_set_vcsel_pulse_period+0x88>
 800c47c:	78ba      	ldrb	r2, [r7, #2]
 800c47e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c482:	429a      	cmp	r2, r3
 800c484:	d304      	bcc.n	800c490 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c486:	78ba      	ldrb	r2, [r7, #2]
 800c488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d902      	bls.n	800c496 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c490:	23fc      	movs	r3, #252	; 0xfc
 800c492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800c496:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c49e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4a2:	e239      	b.n	800c918 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d150      	bne.n	800c54c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c4aa:	78bb      	ldrb	r3, [r7, #2]
 800c4ac:	2b0c      	cmp	r3, #12
 800c4ae:	d110      	bne.n	800c4d2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c4b0:	2218      	movs	r2, #24
 800c4b2:	2157      	movs	r1, #87	; 0x57
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f001 fb11 	bl	800dadc <VL53L0X_WrByte>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c4c0:	2208      	movs	r2, #8
 800c4c2:	2156      	movs	r1, #86	; 0x56
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f001 fb09 	bl	800dadc <VL53L0X_WrByte>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4d0:	e17f      	b.n	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c4d2:	78bb      	ldrb	r3, [r7, #2]
 800c4d4:	2b0e      	cmp	r3, #14
 800c4d6:	d110      	bne.n	800c4fa <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c4d8:	2230      	movs	r2, #48	; 0x30
 800c4da:	2157      	movs	r1, #87	; 0x57
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f001 fafd 	bl	800dadc <VL53L0X_WrByte>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c4e8:	2208      	movs	r2, #8
 800c4ea:	2156      	movs	r1, #86	; 0x56
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f001 faf5 	bl	800dadc <VL53L0X_WrByte>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4f8:	e16b      	b.n	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800c4fa:	78bb      	ldrb	r3, [r7, #2]
 800c4fc:	2b10      	cmp	r3, #16
 800c4fe:	d110      	bne.n	800c522 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800c500:	2240      	movs	r2, #64	; 0x40
 800c502:	2157      	movs	r1, #87	; 0x57
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f001 fae9 	bl	800dadc <VL53L0X_WrByte>
 800c50a:	4603      	mov	r3, r0
 800c50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800c510:	2208      	movs	r2, #8
 800c512:	2156      	movs	r1, #86	; 0x56
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f001 fae1 	bl	800dadc <VL53L0X_WrByte>
 800c51a:	4603      	mov	r3, r0
 800c51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c520:	e157      	b.n	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800c522:	78bb      	ldrb	r3, [r7, #2]
 800c524:	2b12      	cmp	r3, #18
 800c526:	f040 8154 	bne.w	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c52a:	2250      	movs	r2, #80	; 0x50
 800c52c:	2157      	movs	r1, #87	; 0x57
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f001 fad4 	bl	800dadc <VL53L0X_WrByte>
 800c534:	4603      	mov	r3, r0
 800c536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800c53a:	2208      	movs	r2, #8
 800c53c:	2156      	movs	r1, #86	; 0x56
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f001 facc 	bl	800dadc <VL53L0X_WrByte>
 800c544:	4603      	mov	r3, r0
 800c546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c54a:	e142      	b.n	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800c54c:	78fb      	ldrb	r3, [r7, #3]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	f040 813f 	bne.w	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800c554:	78bb      	ldrb	r3, [r7, #2]
 800c556:	2b08      	cmp	r3, #8
 800c558:	d14c      	bne.n	800c5f4 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800c55a:	2210      	movs	r2, #16
 800c55c:	2148      	movs	r1, #72	; 0x48
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f001 fabc 	bl	800dadc <VL53L0X_WrByte>
 800c564:	4603      	mov	r3, r0
 800c566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800c56a:	2208      	movs	r2, #8
 800c56c:	2147      	movs	r1, #71	; 0x47
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f001 fab4 	bl	800dadc <VL53L0X_WrByte>
 800c574:	4603      	mov	r3, r0
 800c576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c57a:	2202      	movs	r2, #2
 800c57c:	2132      	movs	r1, #50	; 0x32
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f001 faac 	bl	800dadc <VL53L0X_WrByte>
 800c584:	4603      	mov	r3, r0
 800c586:	461a      	mov	r2, r3
 800c588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c58c:	4313      	orrs	r3, r2
 800c58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800c592:	220c      	movs	r2, #12
 800c594:	2130      	movs	r1, #48	; 0x30
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f001 faa0 	bl	800dadc <VL53L0X_WrByte>
 800c59c:	4603      	mov	r3, r0
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	21ff      	movs	r1, #255	; 0xff
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f001 fa94 	bl	800dadc <VL53L0X_WrByte>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c5c2:	2230      	movs	r2, #48	; 0x30
 800c5c4:	2130      	movs	r1, #48	; 0x30
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f001 fa88 	bl	800dadc <VL53L0X_WrByte>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c5da:	2200      	movs	r2, #0
 800c5dc:	21ff      	movs	r1, #255	; 0xff
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f001 fa7c 	bl	800dadc <VL53L0X_WrByte>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5f2:	e0ee      	b.n	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800c5f4:	78bb      	ldrb	r3, [r7, #2]
 800c5f6:	2b0a      	cmp	r3, #10
 800c5f8:	d14c      	bne.n	800c694 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800c5fa:	2228      	movs	r2, #40	; 0x28
 800c5fc:	2148      	movs	r1, #72	; 0x48
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f001 fa6c 	bl	800dadc <VL53L0X_WrByte>
 800c604:	4603      	mov	r3, r0
 800c606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800c60a:	2208      	movs	r2, #8
 800c60c:	2147      	movs	r1, #71	; 0x47
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f001 fa64 	bl	800dadc <VL53L0X_WrByte>
 800c614:	4603      	mov	r3, r0
 800c616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c61a:	2203      	movs	r2, #3
 800c61c:	2132      	movs	r1, #50	; 0x32
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f001 fa5c 	bl	800dadc <VL53L0X_WrByte>
 800c624:	4603      	mov	r3, r0
 800c626:	461a      	mov	r2, r3
 800c628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c62c:	4313      	orrs	r3, r2
 800c62e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c632:	2209      	movs	r2, #9
 800c634:	2130      	movs	r1, #48	; 0x30
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f001 fa50 	bl	800dadc <VL53L0X_WrByte>
 800c63c:	4603      	mov	r3, r0
 800c63e:	461a      	mov	r2, r3
 800c640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c644:	4313      	orrs	r3, r2
 800c646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c64a:	2201      	movs	r2, #1
 800c64c:	21ff      	movs	r1, #255	; 0xff
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f001 fa44 	bl	800dadc <VL53L0X_WrByte>
 800c654:	4603      	mov	r3, r0
 800c656:	461a      	mov	r2, r3
 800c658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c65c:	4313      	orrs	r3, r2
 800c65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c662:	2220      	movs	r2, #32
 800c664:	2130      	movs	r1, #48	; 0x30
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f001 fa38 	bl	800dadc <VL53L0X_WrByte>
 800c66c:	4603      	mov	r3, r0
 800c66e:	461a      	mov	r2, r3
 800c670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c674:	4313      	orrs	r3, r2
 800c676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c67a:	2200      	movs	r2, #0
 800c67c:	21ff      	movs	r1, #255	; 0xff
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fa2c 	bl	800dadc <VL53L0X_WrByte>
 800c684:	4603      	mov	r3, r0
 800c686:	461a      	mov	r2, r3
 800c688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c68c:	4313      	orrs	r3, r2
 800c68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c692:	e09e      	b.n	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800c694:	78bb      	ldrb	r3, [r7, #2]
 800c696:	2b0c      	cmp	r3, #12
 800c698:	d14c      	bne.n	800c734 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800c69a:	2238      	movs	r2, #56	; 0x38
 800c69c:	2148      	movs	r1, #72	; 0x48
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f001 fa1c 	bl	800dadc <VL53L0X_WrByte>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800c6aa:	2208      	movs	r2, #8
 800c6ac:	2147      	movs	r1, #71	; 0x47
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f001 fa14 	bl	800dadc <VL53L0X_WrByte>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c6ba:	2203      	movs	r2, #3
 800c6bc:	2132      	movs	r1, #50	; 0x32
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f001 fa0c 	bl	800dadc <VL53L0X_WrByte>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c6d2:	2208      	movs	r2, #8
 800c6d4:	2130      	movs	r1, #48	; 0x30
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 fa00 	bl	800dadc <VL53L0X_WrByte>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	461a      	mov	r2, r3
 800c6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	21ff      	movs	r1, #255	; 0xff
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f001 f9f4 	bl	800dadc <VL53L0X_WrByte>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c702:	2220      	movs	r2, #32
 800c704:	2130      	movs	r1, #48	; 0x30
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f001 f9e8 	bl	800dadc <VL53L0X_WrByte>
 800c70c:	4603      	mov	r3, r0
 800c70e:	461a      	mov	r2, r3
 800c710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c714:	4313      	orrs	r3, r2
 800c716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c71a:	2200      	movs	r2, #0
 800c71c:	21ff      	movs	r1, #255	; 0xff
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 f9dc 	bl	800dadc <VL53L0X_WrByte>
 800c724:	4603      	mov	r3, r0
 800c726:	461a      	mov	r2, r3
 800c728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c72c:	4313      	orrs	r3, r2
 800c72e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c732:	e04e      	b.n	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c734:	78bb      	ldrb	r3, [r7, #2]
 800c736:	2b0e      	cmp	r3, #14
 800c738:	d14b      	bne.n	800c7d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c73a:	2248      	movs	r2, #72	; 0x48
 800c73c:	2148      	movs	r1, #72	; 0x48
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 f9cc 	bl	800dadc <VL53L0X_WrByte>
 800c744:	4603      	mov	r3, r0
 800c746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800c74a:	2208      	movs	r2, #8
 800c74c:	2147      	movs	r1, #71	; 0x47
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f001 f9c4 	bl	800dadc <VL53L0X_WrByte>
 800c754:	4603      	mov	r3, r0
 800c756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c75a:	2203      	movs	r2, #3
 800c75c:	2132      	movs	r1, #50	; 0x32
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f001 f9bc 	bl	800dadc <VL53L0X_WrByte>
 800c764:	4603      	mov	r3, r0
 800c766:	461a      	mov	r2, r3
 800c768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c76c:	4313      	orrs	r3, r2
 800c76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c772:	2207      	movs	r2, #7
 800c774:	2130      	movs	r1, #48	; 0x30
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f001 f9b0 	bl	800dadc <VL53L0X_WrByte>
 800c77c:	4603      	mov	r3, r0
 800c77e:	461a      	mov	r2, r3
 800c780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c784:	4313      	orrs	r3, r2
 800c786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c78a:	2201      	movs	r2, #1
 800c78c:	21ff      	movs	r1, #255	; 0xff
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f001 f9a4 	bl	800dadc <VL53L0X_WrByte>
 800c794:	4603      	mov	r3, r0
 800c796:	461a      	mov	r2, r3
 800c798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c79c:	4313      	orrs	r3, r2
 800c79e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c7a2:	2220      	movs	r2, #32
 800c7a4:	2130      	movs	r1, #48	; 0x30
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f001 f998 	bl	800dadc <VL53L0X_WrByte>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	21ff      	movs	r1, #255	; 0xff
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f001 f98c 	bl	800dadc <VL53L0X_WrByte>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800c7d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d17f      	bne.n	800c8da <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800c7da:	78bb      	ldrb	r3, [r7, #2]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fe fe38 	bl	800b452 <VL53L0X_encode_vcsel_period>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800c7e8:	78fb      	ldrb	r3, [r7, #3]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d002      	beq.n	800c7f4 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d045      	beq.n	800c87e <VL53L0X_set_vcsel_pulse_period+0x470>
 800c7f2:	e06e      	b.n	800c8d2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800c7f4:	f107 0314 	add.w	r3, r7, #20
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	2103      	movs	r1, #3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff fc33 	bl	800c068 <get_sequence_step_timeout>
 800c802:	4603      	mov	r3, r0
 800c804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d109      	bne.n	800c824 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800c810:	f107 0310 	add.w	r3, r7, #16
 800c814:	461a      	mov	r2, r3
 800c816:	2102      	movs	r1, #2
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff fc25 	bl	800c068 <get_sequence_step_timeout>
 800c81e:	4603      	mov	r3, r0
 800c820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d109      	bne.n	800c840 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800c82c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c830:	461a      	mov	r2, r3
 800c832:	2150      	movs	r1, #80	; 0x50
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f001 f951 	bl	800dadc <VL53L0X_WrByte>
 800c83a:	4603      	mov	r3, r0
 800c83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800c840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c844:	2b00      	cmp	r3, #0
 800c846:	d108      	bne.n	800c85a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	461a      	mov	r2, r3
 800c84c:	2103      	movs	r1, #3
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7ff fceb 	bl	800c22a <set_sequence_step_timeout>
 800c854:	4603      	mov	r3, r0
 800c856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800c85a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d108      	bne.n	800c874 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	461a      	mov	r2, r3
 800c866:	2102      	movs	r1, #2
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7ff fcde 	bl	800c22a <set_sequence_step_timeout>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	78ba      	ldrb	r2, [r7, #2]
 800c878:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800c87c:	e02e      	b.n	800c8dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800c87e:	f107 0318 	add.w	r3, r7, #24
 800c882:	461a      	mov	r2, r3
 800c884:	2104      	movs	r1, #4
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7ff fbee 	bl	800c068 <get_sequence_step_timeout>
 800c88c:	4603      	mov	r3, r0
 800c88e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c892:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c896:	2b00      	cmp	r3, #0
 800c898:	d109      	bne.n	800c8ae <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800c89a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c89e:	461a      	mov	r2, r3
 800c8a0:	2170      	movs	r1, #112	; 0x70
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f001 f91a 	bl	800dadc <VL53L0X_WrByte>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800c8ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d108      	bne.n	800c8c8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	2104      	movs	r1, #4
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff fcb4 	bl	800c22a <set_sequence_step_timeout>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	78ba      	ldrb	r2, [r7, #2]
 800c8cc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800c8d0:	e004      	b.n	800c8dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c8d2:	23fc      	movs	r3, #252	; 0xfc
 800c8d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8d8:	e000      	b.n	800c8dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800c8da:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800c8dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d109      	bne.n	800c8f8 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800c8ea:	69f9      	ldr	r1, [r7, #28]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7fc fe1d 	bl	800952c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800c8f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d109      	bne.n	800c914 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800c900:	f107 010f 	add.w	r1, r7, #15
 800c904:	2301      	movs	r3, #1
 800c906:	2200      	movs	r2, #0
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7fe fcbd 	bl	800b288 <VL53L0X_perform_phase_calibration>
 800c90e:	4603      	mov	r3, r0
 800c910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800c914:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3728      	adds	r7, #40	; 0x28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	460b      	mov	r3, r1
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c92e:	2300      	movs	r3, #0
 800c930:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <VL53L0X_get_vcsel_pulse_period+0x1e>
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d00a      	beq.n	800c952 <VL53L0X_get_vcsel_pulse_period+0x32>
 800c93c:	e013      	b.n	800c966 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c93e:	f107 0316 	add.w	r3, r7, #22
 800c942:	461a      	mov	r2, r3
 800c944:	2150      	movs	r1, #80	; 0x50
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f001 f94a 	bl	800dbe0 <VL53L0X_RdByte>
 800c94c:	4603      	mov	r3, r0
 800c94e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c950:	e00b      	b.n	800c96a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c952:	f107 0316 	add.w	r3, r7, #22
 800c956:	461a      	mov	r2, r3
 800c958:	2170      	movs	r1, #112	; 0x70
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f001 f940 	bl	800dbe0 <VL53L0X_RdByte>
 800c960:	4603      	mov	r3, r0
 800c962:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c964:	e001      	b.n	800c96a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c966:	23fc      	movs	r3, #252	; 0xfc
 800c968:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800c96a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d107      	bne.n	800c982 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800c972:	7dbb      	ldrb	r3, [r7, #22]
 800c974:	4618      	mov	r0, r3
 800c976:	f7fe fd59 	bl	800b42c <VL53L0X_decode_vcsel_period>
 800c97a:	4603      	mov	r3, r0
 800c97c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	701a      	strb	r2, [r3, #0]

	return Status;
 800c982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3718      	adds	r7, #24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b092      	sub	sp, #72	; 0x48
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c998:	2300      	movs	r3, #0
 800c99a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c99e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c9a2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c9a4:	f240 7376 	movw	r3, #1910	; 0x776
 800c9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800c9aa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c9ae:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c9b0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c9b4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800c9b6:	f240 234e 	movw	r3, #590	; 0x24e
 800c9ba:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800c9bc:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c9c2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c9c6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c9c8:	f240 2326 	movw	r3, #550	; 0x226
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800c9d2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c9d6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d205      	bcs.n	800c9f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c9e4:	23fc      	movs	r3, #252	; 0xfc
 800c9e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800c9ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c9ee:	e0aa      	b.n	800cb46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800c9f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f4:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c9fc:	f107 0314 	add.w	r3, r7, #20
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7fc fedc 	bl	80097c0 <VL53L0X_GetSequenceStepEnables>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ca0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d15b      	bne.n	800cace <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ca16:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d105      	bne.n	800ca28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ca1c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ca22:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d052      	beq.n	800cace <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ca28:	f107 0310 	add.w	r3, r7, #16
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	2102      	movs	r1, #2
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff fb19 	bl	800c068 <get_sequence_step_timeout>
 800ca36:	4603      	mov	r3, r0
 800ca38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ca3c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ca44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca48:	e07d      	b.n	800cb46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ca4a:	7d3b      	ldrb	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00f      	beq.n	800ca70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ca50:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ca52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca54:	4413      	add	r3, r2
 800ca56:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ca58:	69fa      	ldr	r2, [r7, #28]
 800ca5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d204      	bcs.n	800ca6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ca60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	643b      	str	r3, [r7, #64]	; 0x40
 800ca68:	e002      	b.n	800ca70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ca6a:	23fc      	movs	r3, #252	; 0xfc
 800ca6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ca70:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ca78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca7c:	e063      	b.n	800cb46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ca7e:	7dbb      	ldrb	r3, [r7, #22]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d011      	beq.n	800caa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca88:	4413      	add	r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ca8e:	69fa      	ldr	r2, [r7, #28]
 800ca90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d204      	bcs.n	800caa0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ca96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	643b      	str	r3, [r7, #64]	; 0x40
 800ca9e:	e016      	b.n	800cace <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800caa0:	23fc      	movs	r3, #252	; 0xfc
 800caa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800caa6:	e012      	b.n	800cace <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800caa8:	7d7b      	ldrb	r3, [r7, #21]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00f      	beq.n	800cace <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cab2:	4413      	add	r3, r2
 800cab4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cab6:	69fa      	ldr	r2, [r7, #28]
 800cab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caba:	429a      	cmp	r2, r3
 800cabc:	d204      	bcs.n	800cac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cabe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	1ad3      	subs	r3, r2, r3
 800cac4:	643b      	str	r3, [r7, #64]	; 0x40
 800cac6:	e002      	b.n	800cace <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cac8:	23fc      	movs	r3, #252	; 0xfc
 800caca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cace:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cad6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cada:	e034      	b.n	800cb46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d019      	beq.n	800cb16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800cae2:	f107 030c 	add.w	r3, r7, #12
 800cae6:	461a      	mov	r2, r3
 800cae8:	2103      	movs	r1, #3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff fabc 	bl	800c068 <get_sequence_step_timeout>
 800caf0:	4603      	mov	r3, r0
 800caf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cafa:	4413      	add	r3, r2
 800cafc:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cafe:	69fa      	ldr	r2, [r7, #28]
 800cb00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d204      	bcs.n	800cb10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800cb06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	643b      	str	r3, [r7, #64]	; 0x40
 800cb0e:	e002      	b.n	800cb16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cb10:	23fc      	movs	r3, #252	; 0xfc
 800cb12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800cb16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d111      	bne.n	800cb42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800cb1e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00e      	beq.n	800cb42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800cb24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800cb2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb2e:	2104      	movs	r1, #4
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7ff fb7a 	bl	800c22a <set_sequence_step_timeout>
 800cb36:	4603      	mov	r3, r0
 800cb38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cb42:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3748      	adds	r7, #72	; 0x48
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b090      	sub	sp, #64	; 0x40
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cb5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cb62:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cb64:	f240 7376 	movw	r3, #1910	; 0x776
 800cb68:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800cb6a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cb6e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cb70:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cb74:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800cb76:	f240 234e 	movw	r3, #590	; 0x24e
 800cb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800cb7c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800cb80:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cb82:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cb86:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800cb88:	f240 2326 	movw	r3, #550	; 0x226
 800cb8c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800cb92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb96:	441a      	add	r2, r3
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cb9c:	f107 0318 	add.w	r3, r7, #24
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7fc fe0c 	bl	80097c0 <VL53L0X_GetSequenceStepEnables>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800cbae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cbb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cbba:	e075      	b.n	800cca8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800cbbc:	7e3b      	ldrb	r3, [r7, #24]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d105      	bne.n	800cbce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800cbc2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d102      	bne.n	800cbce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800cbc8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d030      	beq.n	800cc30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800cbce:	f107 0310 	add.w	r3, r7, #16
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	2102      	movs	r1, #2
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7ff fa46 	bl	800c068 <get_sequence_step_timeout>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800cbe2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d122      	bne.n	800cc30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800cbea:	7e3b      	ldrb	r3, [r7, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d007      	beq.n	800cc00 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cbf4:	6939      	ldr	r1, [r7, #16]
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cbfa:	441a      	add	r2, r3
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800cc00:	7ebb      	ldrb	r3, [r7, #26]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d009      	beq.n	800cc1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800cc0a:	6939      	ldr	r1, [r7, #16]
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	440b      	add	r3, r1
 800cc10:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc12:	441a      	add	r2, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	e00a      	b.n	800cc30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800cc1a:	7e7b      	ldrb	r3, [r7, #25]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d007      	beq.n	800cc30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cc24:	6939      	ldr	r1, [r7, #16]
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc2a:	441a      	add	r2, r3
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cc30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d114      	bne.n	800cc62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800cc38:	7efb      	ldrb	r3, [r7, #27]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d011      	beq.n	800cc62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800cc3e:	f107 030c 	add.w	r3, r7, #12
 800cc42:	461a      	mov	r2, r3
 800cc44:	2103      	movs	r1, #3
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7ff fa0e 	bl	800c068 <get_sequence_step_timeout>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800cc56:	68f9      	ldr	r1, [r7, #12]
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cc5c:	441a      	add	r2, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cc62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d114      	bne.n	800cc94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800cc6a:	7f3b      	ldrb	r3, [r7, #28]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d011      	beq.n	800cc94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800cc70:	f107 0314 	add.w	r3, r7, #20
 800cc74:	461a      	mov	r2, r3
 800cc76:	2104      	movs	r1, #4
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7ff f9f5 	bl	800c068 <get_sequence_step_timeout>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800cc88:	6979      	ldr	r1, [r7, #20]
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cc8e:	441a      	add	r2, r3
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cc94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d103      	bne.n	800cca4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cca4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3740      	adds	r7, #64	; 0x40
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b088      	sub	sp, #32
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ccc2:	e0c6      	b.n	800ce52 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4413      	add	r3, r2
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	74fb      	strb	r3, [r7, #19]
		Index++;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800ccd4:	7cfb      	ldrb	r3, [r7, #19]
 800ccd6:	2bff      	cmp	r3, #255	; 0xff
 800ccd8:	f040 808d 	bne.w	800cdf6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	4413      	add	r3, r2
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	747b      	strb	r3, [r7, #17]
			Index++;
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	3301      	adds	r3, #1
 800ccea:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ccec:	7c7b      	ldrb	r3, [r7, #17]
 800ccee:	2b03      	cmp	r3, #3
 800ccf0:	d87e      	bhi.n	800cdf0 <VL53L0X_load_tuning_settings+0x140>
 800ccf2:	a201      	add	r2, pc, #4	; (adr r2, 800ccf8 <VL53L0X_load_tuning_settings+0x48>)
 800ccf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf8:	0800cd09 	.word	0x0800cd09
 800ccfc:	0800cd43 	.word	0x0800cd43
 800cd00:	0800cd7d 	.word	0x0800cd7d
 800cd04:	0800cdb7 	.word	0x0800cdb7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	743b      	strb	r3, [r7, #16]
				Index++;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	3301      	adds	r3, #1
 800cd16:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	3301      	adds	r3, #1
 800cd26:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cd28:	7c3b      	ldrb	r3, [r7, #16]
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	021b      	lsls	r3, r3, #8
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	7bfb      	ldrb	r3, [r7, #15]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	4413      	add	r3, r2
 800cd36:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	89ba      	ldrh	r2, [r7, #12]
 800cd3c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800cd40:	e087      	b.n	800ce52 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	683a      	ldr	r2, [r7, #0]
 800cd46:	4413      	add	r3, r2
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	743b      	strb	r3, [r7, #16]
				Index++;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	4413      	add	r3, r2
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cd62:	7c3b      	ldrb	r3, [r7, #16]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	021b      	lsls	r3, r3, #8
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	4413      	add	r3, r2
 800cd70:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	89ba      	ldrh	r2, [r7, #12]
 800cd76:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800cd7a:	e06a      	b.n	800ce52 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	4413      	add	r3, r2
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	743b      	strb	r3, [r7, #16]
				Index++;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	4413      	add	r3, r2
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cd9c:	7c3b      	ldrb	r3, [r7, #16]
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	021b      	lsls	r3, r3, #8
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	4413      	add	r3, r2
 800cdaa:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	89ba      	ldrh	r2, [r7, #12]
 800cdb0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800cdb4:	e04d      	b.n	800ce52 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	4413      	add	r3, r2
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	743b      	strb	r3, [r7, #16]
				Index++;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	683a      	ldr	r2, [r7, #0]
 800cdca:	4413      	add	r3, r2
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cdd6:	7c3b      	ldrb	r3, [r7, #16]
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	021b      	lsls	r3, r3, #8
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	4413      	add	r3, r2
 800cde4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	89ba      	ldrh	r2, [r7, #12]
 800cdea:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800cdee:	e030      	b.n	800ce52 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cdf0:	23fc      	movs	r3, #252	; 0xfc
 800cdf2:	77fb      	strb	r3, [r7, #31]
 800cdf4:	e02d      	b.n	800ce52 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800cdf6:	7cfb      	ldrb	r3, [r7, #19]
 800cdf8:	2b04      	cmp	r3, #4
 800cdfa:	d828      	bhi.n	800ce4e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	683a      	ldr	r2, [r7, #0]
 800ce00:	4413      	add	r3, r2
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	61bb      	str	r3, [r7, #24]
 800ce10:	e00f      	b.n	800ce32 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	4413      	add	r3, r2
 800ce18:	7819      	ldrb	r1, [r3, #0]
 800ce1a:	f107 0208 	add.w	r2, r7, #8
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	4413      	add	r3, r2
 800ce22:	460a      	mov	r2, r1
 800ce24:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	61bb      	str	r3, [r7, #24]
 800ce32:	7cfb      	ldrb	r3, [r7, #19]
 800ce34:	69ba      	ldr	r2, [r7, #24]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	dbeb      	blt.n	800ce12 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ce3a:	7cfb      	ldrb	r3, [r7, #19]
 800ce3c:	f107 0208 	add.w	r2, r7, #8
 800ce40:	7cb9      	ldrb	r1, [r7, #18]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fdee 	bl	800da24 <VL53L0X_WriteMulti>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	77fb      	strb	r3, [r7, #31]
 800ce4c:	e001      	b.n	800ce52 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce4e:	23fc      	movs	r3, #252	; 0xfc
 800ce50:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	4413      	add	r3, r2
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d004      	beq.n	800ce68 <VL53L0X_load_tuning_settings+0x1b8>
 800ce5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f43f af2e 	beq.w	800ccc4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ce68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3720      	adds	r7, #32
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ce8a:	f107 0313 	add.w	r3, r7, #19
 800ce8e:	4619      	mov	r1, r3
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f7fc fd21 	bl	80098d8 <VL53L0X_GetXTalkCompensationEnable>
 800ce96:	4603      	mov	r3, r0
 800ce98:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ce9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d111      	bne.n	800cec6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800cea2:	7cfb      	ldrb	r3, [r7, #19]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00e      	beq.n	800cec6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	8a9b      	ldrh	r3, [r3, #20]
 800ceb2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	fb02 f303 	mul.w	r3, r2, r3
 800ceba:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	3380      	adds	r3, #128	; 0x80
 800cec0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800cec6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3720      	adds	r7, #32
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b086      	sub	sp, #24
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	60f8      	str	r0, [r7, #12]
 800ceda:	60b9      	str	r1, [r7, #8]
 800cedc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cede:	2300      	movs	r3, #0
 800cee0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ceea:	f107 0310 	add.w	r3, r7, #16
 800ceee:	461a      	mov	r2, r3
 800cef0:	68b9      	ldr	r1, [r7, #8]
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f7ff ffbe 	bl	800ce74 <VL53L0X_get_total_xtalk_rate>
 800cef8:	4603      	mov	r3, r0
 800cefa:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800cefc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d105      	bne.n	800cf10 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	441a      	add	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]

	return Status;
 800cf10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b09a      	sub	sp, #104	; 0x68
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800cf2a:	2312      	movs	r3, #18
 800cf2c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800cf2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf32:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800cf34:	2342      	movs	r3, #66	; 0x42
 800cf36:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800cf38:	2306      	movs	r3, #6
 800cf3a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800cf3c:	2307      	movs	r3, #7
 800cf3e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf40:	2300      	movs	r3, #0
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800cf4c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800cf54:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800cf56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf5a:	fb02 f303 	mul.w	r3, r2, r3
 800cf5e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800cf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf62:	3380      	adds	r3, #128	; 0x80
 800cf64:	0a1b      	lsrs	r3, r3, #8
 800cf66:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800cf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf6c:	fb02 f303 	mul.w	r3, r2, r3
 800cf70:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d01a      	beq.n	800cfb2 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	029b      	lsls	r3, r3, #10
 800cf80:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800cf86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf88:	4413      	add	r3, r2
 800cf8a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800cf8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf94:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800cf96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf98:	4613      	mov	r3, r2
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	4413      	add	r3, r2
 800cf9e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800cfa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfa2:	fb03 f303 	mul.w	r3, r3, r3
 800cfa6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800cfa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfaa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfae:	0c1b      	lsrs	r3, r3, #16
 800cfb0:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cfb6:	fb02 f303 	mul.w	r3, r2, r3
 800cfba:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800cfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfc2:	0c1b      	lsrs	r3, r3, #16
 800cfc4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	fb03 f303 	mul.w	r3, r3, r3
 800cfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800cfce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfd4:	0c1b      	lsrs	r3, r3, #16
 800cfd6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800cfd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfda:	085a      	lsrs	r2, r3, #1
 800cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfde:	441a      	add	r2, r3
 800cfe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfe6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800cfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfec:	fb02 f303 	mul.w	r3, r2, r3
 800cff0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cff8:	d302      	bcc.n	800d000 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800cffa:	4b54      	ldr	r3, [pc, #336]	; (800d14c <VL53L0X_calc_dmax+0x230>)
 800cffc:	663b      	str	r3, [r7, #96]	; 0x60
 800cffe:	e015      	b.n	800d02c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d002:	085a      	lsrs	r2, r3, #1
 800d004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d006:	441a      	add	r2, r3
 800d008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d00e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d014:	fb02 f303 	mul.w	r3, r2, r3
 800d018:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d01a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d01c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d020:	0c1b      	lsrs	r3, r3, #16
 800d022:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d026:	fb03 f303 	mul.w	r3, r3, r3
 800d02a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d02e:	039b      	lsls	r3, r3, #14
 800d030:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d034:	4a46      	ldr	r2, [pc, #280]	; (800d150 <VL53L0X_calc_dmax+0x234>)
 800d036:	fba2 2303 	umull	r2, r3, r2, r3
 800d03a:	099b      	lsrs	r3, r3, #6
 800d03c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	fb03 f303 	mul.w	r3, r3, r3
 800d044:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d048:	fb03 f303 	mul.w	r3, r3, r3
 800d04c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	3308      	adds	r3, #8
 800d052:	091b      	lsrs	r3, r3, #4
 800d054:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d060:	4613      	mov	r3, r2
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	4413      	add	r3, r2
 800d066:	011b      	lsls	r3, r3, #4
 800d068:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d070:	0b9b      	lsrs	r3, r3, #14
 800d072:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d078:	4413      	add	r3, r2
 800d07a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d07e:	085b      	lsrs	r3, r3, #1
 800d080:	69ba      	ldr	r2, [r7, #24]
 800d082:	4413      	add	r3, r2
 800d084:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d086:	69ba      	ldr	r2, [r7, #24]
 800d088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d08e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	039b      	lsls	r3, r3, #14
 800d094:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	085b      	lsrs	r3, r3, #1
 800d09a:	69ba      	ldr	r2, [r7, #24]
 800d09c:	4413      	add	r3, r2
 800d09e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d0a0:	69ba      	ldr	r2, [r7, #24]
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a8:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0ae:	fb02 f303 	mul.w	r3, r2, r3
 800d0b2:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d0ba:	4a25      	ldr	r2, [pc, #148]	; (800d150 <VL53L0X_calc_dmax+0x234>)
 800d0bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d0c0:	099b      	lsrs	r3, r3, #6
 800d0c2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	011b      	lsls	r3, r3, #4
 800d0c8:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d0d0:	4a1f      	ldr	r2, [pc, #124]	; (800d150 <VL53L0X_calc_dmax+0x234>)
 800d0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d6:	099b      	lsrs	r3, r3, #6
 800d0d8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0dc:	3380      	adds	r3, #128	; 0x80
 800d0de:	0a1b      	lsrs	r3, r3, #8
 800d0e0:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d008      	beq.n	800d0fa <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	085a      	lsrs	r2, r3, #1
 800d0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ee:	441a      	add	r2, r3
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d0f8:	e001      	b.n	800d0fe <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d0fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d100:	f7fe f9ba 	bl	800b478 <VL53L0X_isqrt>
 800d104:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d008      	beq.n	800d11e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	085a      	lsrs	r2, r3, #1
 800d110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d112:	441a      	add	r2, r3
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	fbb2 f3f3 	udiv	r3, r2, r3
 800d11a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d11c:	e001      	b.n	800d122 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d122:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d124:	f7fe f9a8 	bl	800b478 <VL53L0X_isqrt>
 800d128:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d12a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d134:	429a      	cmp	r2, r3
 800d136:	d902      	bls.n	800d13e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d13a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d13c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d13e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d142:	4618      	mov	r0, r3
 800d144:	3768      	adds	r7, #104	; 0x68
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	fff00000 	.word	0xfff00000
 800d150:	10624dd3 	.word	0x10624dd3

0800d154 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b0b4      	sub	sp, #208	; 0xd0
 800d158:	af04      	add	r7, sp, #16
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d162:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d16a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d16e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d172:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d17a:	f241 235c 	movw	r3, #4700	; 0x125c
 800d17e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d182:	4b9e      	ldr	r3, [pc, #632]	; (800d3fc <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d188:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d18c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d18e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d196:	fbb2 f3f3 	udiv	r3, r2, r3
 800d19a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d19c:	4b98      	ldr	r3, [pc, #608]	; (800d400 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d19e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d1a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1a4:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d1a6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d1aa:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d1ac:	f240 6377 	movw	r3, #1655	; 0x677
 800d1b0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d1c6:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d1ca:	0c1b      	lsrs	r3, r3, #16
 800d1cc:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d1d4:	f107 0310 	add.w	r3, r7, #16
 800d1d8:	461a      	mov	r2, r3
 800d1da:	68b9      	ldr	r1, [r7, #8]
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f7ff fe78 	bl	800ced2 <VL53L0X_get_total_signal_rate>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d1e8:	f107 0314 	add.w	r3, r7, #20
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	68b9      	ldr	r1, [r7, #8]
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f7ff fe3f 	bl	800ce74 <VL53L0X_get_total_xtalk_rate>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d202:	fb02 f303 	mul.w	r3, r2, r3
 800d206:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d20a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d20e:	0c1b      	lsrs	r3, r3, #16
 800d210:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d218:	fb02 f303 	mul.w	r3, r2, r3
 800d21c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d220:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d226:	429a      	cmp	r2, r3
 800d228:	d902      	bls.n	800d230 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d22c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d230:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d234:	2b00      	cmp	r3, #0
 800d236:	d168      	bne.n	800d30a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d23e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d248:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d24c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d250:	461a      	mov	r2, r3
 800d252:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f7fe feb2 	bl	800bfc0 <VL53L0X_calc_timeout_mclks>
 800d25c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d26e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d272:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d276:	461a      	mov	r2, r3
 800d278:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f7fe fe9f 	bl	800bfc0 <VL53L0X_calc_timeout_mclks>
 800d282:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d284:	2303      	movs	r3, #3
 800d286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d28a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d28e:	2b08      	cmp	r3, #8
 800d290:	d102      	bne.n	800d298 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d292:	2302      	movs	r3, #2
 800d294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d29c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d29e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d2a2:	fb02 f303 	mul.w	r3, r2, r3
 800d2a6:	02db      	lsls	r3, r3, #11
 800d2a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d2ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d2b4:	4a53      	ldr	r2, [pc, #332]	; (800d404 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ba:	099b      	lsrs	r3, r3, #6
 800d2bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d2c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d2c6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d2ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d2d6:	4a4b      	ldr	r2, [pc, #300]	; (800d404 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2dc:	099b      	lsrs	r3, r3, #6
 800d2de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	3380      	adds	r3, #128	; 0x80
 800d2e6:	0a1b      	lsrs	r3, r3, #8
 800d2e8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2f0:	fb02 f303 	mul.w	r3, r2, r3
 800d2f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d2f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d2fc:	3380      	adds	r3, #128	; 0x80
 800d2fe:	0a1b      	lsrs	r3, r3, #8
 800d300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	021b      	lsls	r3, r3, #8
 800d308:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d30a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d312:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d316:	e15e      	b.n	800d5d6 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10c      	bne.n	800d338 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d324:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d32c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2200      	movs	r2, #0
 800d334:	601a      	str	r2, [r3, #0]
 800d336:	e14c      	b.n	800d5d2 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d102      	bne.n	800d346 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d340:	2301      	movs	r3, #1
 800d342:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d34a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d34c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d34e:	041a      	lsls	r2, r3, #16
 800d350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d352:	fbb2 f3f3 	udiv	r3, r2, r3
 800d356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d35a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d360:	429a      	cmp	r2, r3
 800d362:	d902      	bls.n	800d36a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d36a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d36e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d372:	fb02 f303 	mul.w	r3, r2, r3
 800d376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d37a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d37e:	4613      	mov	r3, r2
 800d380:	005b      	lsls	r3, r3, #1
 800d382:	4413      	add	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4618      	mov	r0, r3
 800d388:	f7fe f876 	bl	800b478 <VL53L0X_isqrt>
 800d38c:	4603      	mov	r3, r0
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	891b      	ldrh	r3, [r3, #8]
 800d396:	461a      	mov	r2, r3
 800d398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d39a:	fb02 f303 	mul.w	r3, r2, r3
 800d39e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d3a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3a2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d3a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d3a8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d3aa:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d3ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d3b0:	4a14      	ldr	r2, [pc, #80]	; (800d404 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b6:	099b      	lsrs	r3, r3, #6
 800d3b8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d3ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3bc:	041b      	lsls	r3, r3, #16
 800d3be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d3c2:	4a10      	ldr	r2, [pc, #64]	; (800d404 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d3c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3c8:	099b      	lsrs	r3, r3, #6
 800d3ca:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ce:	021b      	lsls	r3, r3, #8
 800d3d0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d3d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	bfb8      	it	lt
 800d3de:	425b      	neglt	r3, r3
 800d3e0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e4:	021b      	lsls	r3, r3, #8
 800d3e6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	7e1b      	ldrb	r3, [r3, #24]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00b      	beq.n	800d408 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d3f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d3f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3f8:	e033      	b.n	800d462 <VL53L0X_calc_sigma_estimate+0x30e>
 800d3fa:	bf00      	nop
 800d3fc:	028f87ae 	.word	0x028f87ae
 800d400:	0006999a 	.word	0x0006999a
 800d404:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d40a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d40e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d418:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d41c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d420:	fb02 f303 	mul.w	r3, r2, r3
 800d424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d428:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d42c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d42e:	4413      	add	r3, r2
 800d430:	0c1b      	lsrs	r3, r3, #16
 800d432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d43a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d43e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d446:	085b      	lsrs	r3, r3, #1
 800d448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d44c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d450:	fb03 f303 	mul.w	r3, r3, r3
 800d454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d45c:	0b9b      	lsrs	r3, r3, #14
 800d45e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d468:	fb02 f303 	mul.w	r3, r2, r3
 800d46c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d474:	0c1b      	lsrs	r3, r3, #16
 800d476:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47a:	fb03 f303 	mul.w	r3, r3, r3
 800d47e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d484:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d48c:	0c1b      	lsrs	r3, r3, #16
 800d48e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	fb03 f303 	mul.w	r3, r3, r3
 800d496:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49c:	4413      	add	r3, r2
 800d49e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d4a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4a2:	f7fd ffe9 	bl	800b478 <VL53L0X_isqrt>
 800d4a6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	041b      	lsls	r3, r3, #16
 800d4ac:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	3332      	adds	r3, #50	; 0x32
 800d4b2:	4a4b      	ldr	r2, [pc, #300]	; (800d5e0 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b8:	095a      	lsrs	r2, r3, #5
 800d4ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d4c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d4c8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d4cc:	fb02 f303 	mul.w	r3, r2, r3
 800d4d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d4d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d4d8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d4dc:	3308      	adds	r3, #8
 800d4de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d4e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d4e6:	4a3f      	ldr	r2, [pc, #252]	; (800d5e4 <VL53L0X_calc_sigma_estimate+0x490>)
 800d4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ec:	0b5b      	lsrs	r3, r3, #13
 800d4ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d4f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d4f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d902      	bls.n	800d502 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d4fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d502:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d50a:	4413      	add	r3, r2
 800d50c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d510:	4a35      	ldr	r2, [pc, #212]	; (800d5e8 <VL53L0X_calc_sigma_estimate+0x494>)
 800d512:	fba2 2303 	umull	r2, r3, r2, r3
 800d516:	099b      	lsrs	r3, r3, #6
 800d518:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d51a:	6a3b      	ldr	r3, [r7, #32]
 800d51c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d51e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d522:	441a      	add	r2, r3
 800d524:	6a3b      	ldr	r3, [r7, #32]
 800d526:	fbb2 f3f3 	udiv	r3, r2, r3
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fd ffa4 	bl	800b478 <VL53L0X_isqrt>
 800d530:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	021b      	lsls	r3, r3, #8
 800d536:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d53e:	4a2a      	ldr	r2, [pc, #168]	; (800d5e8 <VL53L0X_calc_sigma_estimate+0x494>)
 800d540:	fba2 2303 	umull	r2, r3, r2, r3
 800d544:	099b      	lsrs	r3, r3, #6
 800d546:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d54c:	fb03 f303 	mul.w	r3, r3, r3
 800d550:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	fb03 f303 	mul.w	r3, r3, r3
 800d558:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	4413      	add	r3, r2
 800d560:	4618      	mov	r0, r3
 800d562:	f7fd ff89 	bl	800b478 <VL53L0X_isqrt>
 800d566:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d56e:	fb02 f303 	mul.w	r3, r2, r3
 800d572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d009      	beq.n	800d590 <VL53L0X_calc_sigma_estimate+0x43c>
 800d57c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d580:	2b00      	cmp	r3, #0
 800d582:	d005      	beq.n	800d590 <VL53L0X_calc_sigma_estimate+0x43c>
 800d584:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d903      	bls.n	800d598 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d59e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800d5aa:	6939      	ldr	r1, [r7, #16]
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	9303      	str	r3, [sp, #12]
 800d5b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5b4:	9302      	str	r3, [sp, #8]
 800d5b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d5ba:	9301      	str	r3, [sp, #4]
 800d5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d5c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff fca8 	bl	800cf1c <VL53L0X_calc_dmax>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d5d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	37c0      	adds	r7, #192	; 0xc0
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	51eb851f 	.word	0x51eb851f
 800d5e4:	d1b71759 	.word	0xd1b71759
 800d5e8:	10624dd3 	.word	0x10624dd3

0800d5ec <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b090      	sub	sp, #64	; 0x40
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	607a      	str	r2, [r7, #4]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	72fb      	strb	r3, [r7, #11]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d600:	2300      	movs	r3, #0
 800d602:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800d60c:	2300      	movs	r3, #0
 800d60e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d624:	2300      	movs	r3, #0
 800d626:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800d630:	2300      	movs	r3, #0
 800d632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800d636:	2300      	movs	r3, #0
 800d638:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d63e:	7afb      	ldrb	r3, [r7, #11]
 800d640:	10db      	asrs	r3, r3, #3
 800d642:	b2db      	uxtb	r3, r3
 800d644:	f003 030f 	and.w	r3, r3, #15
 800d648:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d64c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d650:	2b00      	cmp	r3, #0
 800d652:	d017      	beq.n	800d684 <VL53L0X_get_pal_range_status+0x98>
 800d654:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d658:	2b05      	cmp	r3, #5
 800d65a:	d013      	beq.n	800d684 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d65c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d660:	2b07      	cmp	r3, #7
 800d662:	d00f      	beq.n	800d684 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d664:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d668:	2b0c      	cmp	r3, #12
 800d66a:	d00b      	beq.n	800d684 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d66c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d670:	2b0d      	cmp	r3, #13
 800d672:	d007      	beq.n	800d684 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d674:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d678:	2b0e      	cmp	r3, #14
 800d67a:	d003      	beq.n	800d684 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d67c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d680:	2b0f      	cmp	r3, #15
 800d682:	d103      	bne.n	800d68c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d684:	2301      	movs	r3, #1
 800d686:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d68a:	e002      	b.n	800d692 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d692:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d696:	2b00      	cmp	r3, #0
 800d698:	d109      	bne.n	800d6ae <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d69a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d69e:	461a      	mov	r2, r3
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f7fc f9ec 	bl	8009a80 <VL53L0X_GetLimitCheckEnable>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d6ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d02e      	beq.n	800d714 <VL53L0X_get_pal_range_status+0x128>
 800d6b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d12a      	bne.n	800d714 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800d6be:	f107 0310 	add.w	r3, r7, #16
 800d6c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d6c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7ff fd43 	bl	800d154 <VL53L0X_calc_sigma_estimate>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800d6d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d103      	bne.n	800d6e4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6e2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d6e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d113      	bne.n	800d714 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d6ec:	f107 0320 	add.w	r3, r7, #32
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7fc fa49 	bl	8009b8c <VL53L0X_GetLimitCheckValue>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800d700:	6a3b      	ldr	r3, [r7, #32]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d006      	beq.n	800d714 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800d706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d708:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d902      	bls.n	800d714 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800d70e:	2301      	movs	r3, #1
 800d710:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d714:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d109      	bne.n	800d730 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d71c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800d720:	461a      	mov	r2, r3
 800d722:	2102      	movs	r1, #2
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f7fc f9ab 	bl	8009a80 <VL53L0X_GetLimitCheckEnable>
 800d72a:	4603      	mov	r3, r0
 800d72c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800d730:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d734:	2b00      	cmp	r3, #0
 800d736:	d044      	beq.n	800d7c2 <VL53L0X_get_pal_range_status+0x1d6>
 800d738:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d140      	bne.n	800d7c2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d740:	f107 031c 	add.w	r3, r7, #28
 800d744:	461a      	mov	r2, r3
 800d746:	2102      	movs	r1, #2
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7fc fa1f 	bl	8009b8c <VL53L0X_GetLimitCheckValue>
 800d74e:	4603      	mov	r3, r0
 800d750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800d754:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d107      	bne.n	800d76c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d75c:	2201      	movs	r2, #1
 800d75e:	21ff      	movs	r1, #255	; 0xff
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 f9bb 	bl	800dadc <VL53L0X_WrByte>
 800d766:	4603      	mov	r3, r0
 800d768:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800d76c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d770:	2b00      	cmp	r3, #0
 800d772:	d109      	bne.n	800d788 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800d774:	f107 0316 	add.w	r3, r7, #22
 800d778:	461a      	mov	r2, r3
 800d77a:	21b6      	movs	r1, #182	; 0xb6
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f000 fa59 	bl	800dc34 <VL53L0X_RdWord>
 800d782:	4603      	mov	r3, r0
 800d784:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800d788:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d107      	bne.n	800d7a0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d790:	2200      	movs	r2, #0
 800d792:	21ff      	movs	r1, #255	; 0xff
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f000 f9a1 	bl	800dadc <VL53L0X_WrByte>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800d7a0:	8afb      	ldrh	r3, [r7, #22]
 800d7a2:	025b      	lsls	r3, r3, #9
 800d7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7aa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d006      	beq.n	800d7c2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800d7b4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800d7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d902      	bls.n	800d7c2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d7c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d109      	bne.n	800d7de <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d7ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	2103      	movs	r1, #3
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7fc f954 	bl	8009a80 <VL53L0X_GetLimitCheckEnable>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800d7de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d023      	beq.n	800d82e <VL53L0X_get_pal_range_status+0x242>
 800d7e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d11f      	bne.n	800d82e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800d7ee:	893b      	ldrh	r3, [r7, #8]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d102      	bne.n	800d7fa <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800d7f8:	e005      	b.n	800d806 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	021a      	lsls	r2, r3, #8
 800d7fe:	893b      	ldrh	r3, [r7, #8]
 800d800:	fbb2 f3f3 	udiv	r3, r2, r3
 800d804:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d806:	f107 0318 	add.w	r3, r7, #24
 800d80a:	461a      	mov	r2, r3
 800d80c:	2103      	movs	r1, #3
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f7fc f9bc 	bl	8009b8c <VL53L0X_GetLimitCheckValue>
 800d814:	4603      	mov	r3, r0
 800d816:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d006      	beq.n	800d82e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800d820:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800d822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d824:	429a      	cmp	r2, r3
 800d826:	d202      	bcs.n	800d82e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800d828:	2301      	movs	r3, #1
 800d82a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d82e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d832:	2b00      	cmp	r3, #0
 800d834:	d14a      	bne.n	800d8cc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800d836:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d103      	bne.n	800d846 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800d83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d840:	22ff      	movs	r2, #255	; 0xff
 800d842:	701a      	strb	r2, [r3, #0]
 800d844:	e042      	b.n	800d8cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800d846:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d007      	beq.n	800d85e <VL53L0X_get_pal_range_status+0x272>
 800d84e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d852:	2b02      	cmp	r3, #2
 800d854:	d003      	beq.n	800d85e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800d856:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d103      	bne.n	800d866 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800d85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d860:	2205      	movs	r2, #5
 800d862:	701a      	strb	r2, [r3, #0]
 800d864:	e032      	b.n	800d8cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800d866:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d86a:	2b06      	cmp	r3, #6
 800d86c:	d003      	beq.n	800d876 <VL53L0X_get_pal_range_status+0x28a>
 800d86e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d872:	2b09      	cmp	r3, #9
 800d874:	d103      	bne.n	800d87e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800d876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d878:	2204      	movs	r2, #4
 800d87a:	701a      	strb	r2, [r3, #0]
 800d87c:	e026      	b.n	800d8cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800d87e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d882:	2b08      	cmp	r3, #8
 800d884:	d007      	beq.n	800d896 <VL53L0X_get_pal_range_status+0x2aa>
 800d886:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d88a:	2b0a      	cmp	r3, #10
 800d88c:	d003      	beq.n	800d896 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800d88e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d892:	2b01      	cmp	r3, #1
 800d894:	d103      	bne.n	800d89e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800d896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d898:	2203      	movs	r2, #3
 800d89a:	701a      	strb	r2, [r3, #0]
 800d89c:	e016      	b.n	800d8cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800d89e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8a2:	2b04      	cmp	r3, #4
 800d8a4:	d003      	beq.n	800d8ae <VL53L0X_get_pal_range_status+0x2c2>
 800d8a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d103      	bne.n	800d8b6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800d8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8b0:	2202      	movs	r2, #2
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	e00a      	b.n	800d8cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800d8b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d103      	bne.n	800d8c6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800d8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	701a      	strb	r2, [r3, #0]
 800d8c4:	e002      	b.n	800d8cc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800d8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800d8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800d8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d8da:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800d8de:	461a      	mov	r2, r3
 800d8e0:	2101      	movs	r1, #1
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7fc f8cc 	bl	8009a80 <VL53L0X_GetLimitCheckEnable>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800d8ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d14f      	bne.n	800d996 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800d8f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d003      	beq.n	800d906 <VL53L0X_get_pal_range_status+0x31a>
 800d8fe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d902:	2b01      	cmp	r3, #1
 800d904:	d103      	bne.n	800d90e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800d906:	2301      	movs	r3, #1
 800d908:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d90c:	e002      	b.n	800d914 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d91a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800d91e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d922:	2b04      	cmp	r3, #4
 800d924:	d003      	beq.n	800d92e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800d926:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d103      	bne.n	800d936 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800d92e:	2301      	movs	r3, #1
 800d930:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d934:	e002      	b.n	800d93c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d942:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800d946:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <VL53L0X_get_pal_range_status+0x36a>
 800d94e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d952:	2b01      	cmp	r3, #1
 800d954:	d103      	bne.n	800d95e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800d956:	2301      	movs	r3, #1
 800d958:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d95c:	e002      	b.n	800d964 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d96a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d96e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <VL53L0X_get_pal_range_status+0x392>
 800d976:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d103      	bne.n	800d986 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800d97e:	2301      	movs	r3, #1
 800d980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d984:	e002      	b.n	800d98c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d992:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d996:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3740      	adds	r7, #64	; 0x40
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b088      	sub	sp, #32
 800d9a6:	af02      	add	r7, sp, #8
 800d9a8:	60f8      	str	r0, [r7, #12]
 800d9aa:	60b9      	str	r1, [r7, #8]
 800d9ac:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	330a      	adds	r3, #10
 800d9b2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d9c0:	b299      	uxth	r1, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	f7f4 fe4b 	bl	8002668 <HAL_I2C_Master_Transmit>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d9d6:	693b      	ldr	r3, [r7, #16]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3718      	adds	r7, #24
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b088      	sub	sp, #32
 800d9e4:	af02      	add	r7, sp, #8
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	330a      	adds	r3, #10
 800d9f0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800d9fe:	f043 0301 	orr.w	r3, r3, #1
 800da02:	b2db      	uxtb	r3, r3
 800da04:	b299      	uxth	r1, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	b29a      	uxth	r2, r3
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	4613      	mov	r3, r2
 800da10:	68ba      	ldr	r2, [r7, #8]
 800da12:	f7f4 ff27 	bl	8002864 <HAL_I2C_Master_Receive>
 800da16:	4603      	mov	r3, r0
 800da18:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800da1a:	693b      	ldr	r3, [r7, #16]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	607a      	str	r2, [r7, #4]
 800da2e:	603b      	str	r3, [r7, #0]
 800da30:	460b      	mov	r3, r1
 800da32:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da34:	2300      	movs	r3, #0
 800da36:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2b3f      	cmp	r3, #63	; 0x3f
 800da3c:	d902      	bls.n	800da44 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800da3e:	f06f 0303 	mvn.w	r3, #3
 800da42:	e016      	b.n	800da72 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800da44:	4a0d      	ldr	r2, [pc, #52]	; (800da7c <VL53L0X_WriteMulti+0x58>)
 800da46:	7afb      	ldrb	r3, [r7, #11]
 800da48:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	6879      	ldr	r1, [r7, #4]
 800da4e:	480c      	ldr	r0, [pc, #48]	; (800da80 <VL53L0X_WriteMulti+0x5c>)
 800da50:	f006 fac4 	bl	8013fdc <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	3301      	adds	r3, #1
 800da58:	461a      	mov	r2, r3
 800da5a:	4908      	ldr	r1, [pc, #32]	; (800da7c <VL53L0X_WriteMulti+0x58>)
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f7ff ffa0 	bl	800d9a2 <_I2CWrite>
 800da62:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800da6a:	23ec      	movs	r3, #236	; 0xec
 800da6c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800da6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3718      	adds	r7, #24
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	200008c0 	.word	0x200008c0
 800da80:	200008c1 	.word	0x200008c1

0800da84 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	607a      	str	r2, [r7, #4]
 800da8e:	603b      	str	r3, [r7, #0]
 800da90:	460b      	mov	r3, r1
 800da92:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da94:	2300      	movs	r3, #0
 800da96:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800da98:	f107 030b 	add.w	r3, r7, #11
 800da9c:	2201      	movs	r2, #1
 800da9e:	4619      	mov	r1, r3
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7ff ff7e 	bl	800d9a2 <_I2CWrite>
 800daa6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800daae:	23ec      	movs	r3, #236	; 0xec
 800dab0:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dab2:	e00c      	b.n	800dace <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800dab4:	683a      	ldr	r2, [r7, #0]
 800dab6:	6879      	ldr	r1, [r7, #4]
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f7ff ff91 	bl	800d9e0 <_I2CRead>
 800dabe:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d002      	beq.n	800dacc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dac6:	23ec      	movs	r3, #236	; 0xec
 800dac8:	75fb      	strb	r3, [r7, #23]
 800daca:	e000      	b.n	800dace <VL53L0X_ReadMulti+0x4a>
    }
done:
 800dacc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800dace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
	...

0800dadc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	460b      	mov	r3, r1
 800dae6:	70fb      	strb	r3, [r7, #3]
 800dae8:	4613      	mov	r3, r2
 800daea:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800daec:	2300      	movs	r3, #0
 800daee:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800daf0:	4a0b      	ldr	r2, [pc, #44]	; (800db20 <VL53L0X_WrByte+0x44>)
 800daf2:	78fb      	ldrb	r3, [r7, #3]
 800daf4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800daf6:	4a0a      	ldr	r2, [pc, #40]	; (800db20 <VL53L0X_WrByte+0x44>)
 800daf8:	78bb      	ldrb	r3, [r7, #2]
 800dafa:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800dafc:	2202      	movs	r2, #2
 800dafe:	4908      	ldr	r1, [pc, #32]	; (800db20 <VL53L0X_WrByte+0x44>)
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7ff ff4e 	bl	800d9a2 <_I2CWrite>
 800db06:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d001      	beq.n	800db12 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800db0e:	23ec      	movs	r3, #236	; 0xec
 800db10:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800db12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	200008c0 	.word	0x200008c0

0800db24 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
 800db30:	4613      	mov	r3, r2
 800db32:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db34:	2300      	movs	r3, #0
 800db36:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800db38:	4a0e      	ldr	r2, [pc, #56]	; (800db74 <VL53L0X_WrWord+0x50>)
 800db3a:	78fb      	ldrb	r3, [r7, #3]
 800db3c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800db3e:	883b      	ldrh	r3, [r7, #0]
 800db40:	0a1b      	lsrs	r3, r3, #8
 800db42:	b29b      	uxth	r3, r3
 800db44:	b2da      	uxtb	r2, r3
 800db46:	4b0b      	ldr	r3, [pc, #44]	; (800db74 <VL53L0X_WrWord+0x50>)
 800db48:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800db4a:	883b      	ldrh	r3, [r7, #0]
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	4b09      	ldr	r3, [pc, #36]	; (800db74 <VL53L0X_WrWord+0x50>)
 800db50:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800db52:	2203      	movs	r2, #3
 800db54:	4907      	ldr	r1, [pc, #28]	; (800db74 <VL53L0X_WrWord+0x50>)
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7ff ff23 	bl	800d9a2 <_I2CWrite>
 800db5c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d001      	beq.n	800db68 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800db64:	23ec      	movs	r3, #236	; 0xec
 800db66:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800db68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	200008c0 	.word	0x200008c0

0800db78 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	4608      	mov	r0, r1
 800db82:	4611      	mov	r1, r2
 800db84:	461a      	mov	r2, r3
 800db86:	4603      	mov	r3, r0
 800db88:	70fb      	strb	r3, [r7, #3]
 800db8a:	460b      	mov	r3, r1
 800db8c:	70bb      	strb	r3, [r7, #2]
 800db8e:	4613      	mov	r3, r2
 800db90:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db92:	2300      	movs	r3, #0
 800db94:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800db96:	f107 020e 	add.w	r2, r7, #14
 800db9a:	78fb      	ldrb	r3, [r7, #3]
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f81e 	bl	800dbe0 <VL53L0X_RdByte>
 800dba4:	4603      	mov	r3, r0
 800dba6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800dba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d110      	bne.n	800dbd2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800dbb0:	7bba      	ldrb	r2, [r7, #14]
 800dbb2:	78bb      	ldrb	r3, [r7, #2]
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	787b      	ldrb	r3, [r7, #1]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800dbc0:	7bba      	ldrb	r2, [r7, #14]
 800dbc2:	78fb      	ldrb	r3, [r7, #3]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff ff88 	bl	800dadc <VL53L0X_WrByte>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]
 800dbd0:	e000      	b.n	800dbd4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800dbd2:	bf00      	nop
done:
    return Status;
 800dbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	460b      	mov	r3, r1
 800dbea:	607a      	str	r2, [r7, #4]
 800dbec:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dbf2:	f107 030b 	add.w	r3, r7, #11
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f7ff fed1 	bl	800d9a2 <_I2CWrite>
 800dc00:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc08:	23ec      	movs	r3, #236	; 0xec
 800dc0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dc0c:	e00c      	b.n	800dc28 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800dc0e:	2201      	movs	r2, #1
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f7ff fee4 	bl	800d9e0 <_I2CRead>
 800dc18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc20:	23ec      	movs	r3, #236	; 0xec
 800dc22:	75fb      	strb	r3, [r7, #23]
 800dc24:	e000      	b.n	800dc28 <VL53L0X_RdByte+0x48>
    }
done:
 800dc26:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800dc28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3718      	adds	r7, #24
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	607a      	str	r2, [r7, #4]
 800dc40:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc42:	2300      	movs	r3, #0
 800dc44:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dc46:	f107 030b 	add.w	r3, r7, #11
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f7ff fea7 	bl	800d9a2 <_I2CWrite>
 800dc54:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc5c:	23ec      	movs	r3, #236	; 0xec
 800dc5e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dc60:	e017      	b.n	800dc92 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800dc62:	2202      	movs	r2, #2
 800dc64:	490e      	ldr	r1, [pc, #56]	; (800dca0 <VL53L0X_RdWord+0x6c>)
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7ff feba 	bl	800d9e0 <_I2CRead>
 800dc6c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc74:	23ec      	movs	r3, #236	; 0xec
 800dc76:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dc78:	e00b      	b.n	800dc92 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800dc7a:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <VL53L0X_RdWord+0x6c>)
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	021b      	lsls	r3, r3, #8
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <VL53L0X_RdWord+0x6c>)
 800dc86:	785b      	ldrb	r3, [r3, #1]
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	4413      	add	r3, r2
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800dc92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3718      	adds	r7, #24
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	200008c0 	.word	0x200008c0

0800dca4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	460b      	mov	r3, r1
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dcb6:	f107 030b 	add.w	r3, r7, #11
 800dcba:	2201      	movs	r2, #1
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7ff fe6f 	bl	800d9a2 <_I2CWrite>
 800dcc4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d002      	beq.n	800dcd2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dccc:	23ec      	movs	r3, #236	; 0xec
 800dcce:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dcd0:	e01b      	b.n	800dd0a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800dcd2:	2204      	movs	r2, #4
 800dcd4:	4910      	ldr	r1, [pc, #64]	; (800dd18 <VL53L0X_RdDWord+0x74>)
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f7ff fe82 	bl	800d9e0 <_I2CRead>
 800dcdc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dce4:	23ec      	movs	r3, #236	; 0xec
 800dce6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dce8:	e00f      	b.n	800dd0a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800dcea:	4b0b      	ldr	r3, [pc, #44]	; (800dd18 <VL53L0X_RdDWord+0x74>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	061a      	lsls	r2, r3, #24
 800dcf0:	4b09      	ldr	r3, [pc, #36]	; (800dd18 <VL53L0X_RdDWord+0x74>)
 800dcf2:	785b      	ldrb	r3, [r3, #1]
 800dcf4:	041b      	lsls	r3, r3, #16
 800dcf6:	441a      	add	r2, r3
 800dcf8:	4b07      	ldr	r3, [pc, #28]	; (800dd18 <VL53L0X_RdDWord+0x74>)
 800dcfa:	789b      	ldrb	r3, [r3, #2]
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	4413      	add	r3, r2
 800dd00:	4a05      	ldr	r2, [pc, #20]	; (800dd18 <VL53L0X_RdDWord+0x74>)
 800dd02:	78d2      	ldrb	r2, [r2, #3]
 800dd04:	441a      	add	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800dd0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	200008c0 	.word	0x200008c0

0800dd1c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800dd24:	2300      	movs	r3, #0
 800dd26:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800dd28:	2002      	movs	r0, #2
 800dd2a:	f7f3 fd09 	bl	8001740 <HAL_Delay>
    return status;
 800dd2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
	...

0800dd3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	460b      	mov	r3, r1
 800dd46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dd48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dd4c:	f006 f8dc 	bl	8013f08 <USBD_static_malloc>
 800dd50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d109      	bne.n	800dd6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	32b0      	adds	r2, #176	; 0xb0
 800dd62:	2100      	movs	r1, #0
 800dd64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dd68:	2302      	movs	r3, #2
 800dd6a:	e0d4      	b.n	800df16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dd6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dd70:	2100      	movs	r1, #0
 800dd72:	68f8      	ldr	r0, [r7, #12]
 800dd74:	f006 f940 	bl	8013ff8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	32b0      	adds	r2, #176	; 0xb0
 800dd82:	68f9      	ldr	r1, [r7, #12]
 800dd84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	32b0      	adds	r2, #176	; 0xb0
 800dd92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	7c1b      	ldrb	r3, [r3, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d138      	bne.n	800de16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dda4:	4b5e      	ldr	r3, [pc, #376]	; (800df20 <USBD_CDC_Init+0x1e4>)
 800dda6:	7819      	ldrb	r1, [r3, #0]
 800dda8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddac:	2202      	movs	r2, #2
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f005 ff87 	bl	8013cc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ddb4:	4b5a      	ldr	r3, [pc, #360]	; (800df20 <USBD_CDC_Init+0x1e4>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	f003 020f 	and.w	r2, r3, #15
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	440b      	add	r3, r1
 800ddc8:	3324      	adds	r3, #36	; 0x24
 800ddca:	2201      	movs	r2, #1
 800ddcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ddce:	4b55      	ldr	r3, [pc, #340]	; (800df24 <USBD_CDC_Init+0x1e8>)
 800ddd0:	7819      	ldrb	r1, [r3, #0]
 800ddd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddd6:	2202      	movs	r2, #2
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f005 ff72 	bl	8013cc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ddde:	4b51      	ldr	r3, [pc, #324]	; (800df24 <USBD_CDC_Init+0x1e8>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	f003 020f 	and.w	r2, r3, #15
 800dde6:	6879      	ldr	r1, [r7, #4]
 800dde8:	4613      	mov	r3, r2
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4413      	add	r3, r2
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	440b      	add	r3, r1
 800ddf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ddfa:	4b4b      	ldr	r3, [pc, #300]	; (800df28 <USBD_CDC_Init+0x1ec>)
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	f003 020f 	and.w	r2, r3, #15
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	4613      	mov	r3, r2
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	4413      	add	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	440b      	add	r3, r1
 800de0e:	3326      	adds	r3, #38	; 0x26
 800de10:	2210      	movs	r2, #16
 800de12:	801a      	strh	r2, [r3, #0]
 800de14:	e035      	b.n	800de82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de16:	4b42      	ldr	r3, [pc, #264]	; (800df20 <USBD_CDC_Init+0x1e4>)
 800de18:	7819      	ldrb	r1, [r3, #0]
 800de1a:	2340      	movs	r3, #64	; 0x40
 800de1c:	2202      	movs	r2, #2
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f005 ff4f 	bl	8013cc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de24:	4b3e      	ldr	r3, [pc, #248]	; (800df20 <USBD_CDC_Init+0x1e4>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 020f 	and.w	r2, r3, #15
 800de2c:	6879      	ldr	r1, [r7, #4]
 800de2e:	4613      	mov	r3, r2
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	440b      	add	r3, r1
 800de38:	3324      	adds	r3, #36	; 0x24
 800de3a:	2201      	movs	r2, #1
 800de3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de3e:	4b39      	ldr	r3, [pc, #228]	; (800df24 <USBD_CDC_Init+0x1e8>)
 800de40:	7819      	ldrb	r1, [r3, #0]
 800de42:	2340      	movs	r3, #64	; 0x40
 800de44:	2202      	movs	r2, #2
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f005 ff3b 	bl	8013cc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de4c:	4b35      	ldr	r3, [pc, #212]	; (800df24 <USBD_CDC_Init+0x1e8>)
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	f003 020f 	and.w	r2, r3, #15
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	4613      	mov	r3, r2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	440b      	add	r3, r1
 800de60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de64:	2201      	movs	r2, #1
 800de66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800de68:	4b2f      	ldr	r3, [pc, #188]	; (800df28 <USBD_CDC_Init+0x1ec>)
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	f003 020f 	and.w	r2, r3, #15
 800de70:	6879      	ldr	r1, [r7, #4]
 800de72:	4613      	mov	r3, r2
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	4413      	add	r3, r2
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	440b      	add	r3, r1
 800de7c:	3326      	adds	r3, #38	; 0x26
 800de7e:	2210      	movs	r2, #16
 800de80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800de82:	4b29      	ldr	r3, [pc, #164]	; (800df28 <USBD_CDC_Init+0x1ec>)
 800de84:	7819      	ldrb	r1, [r3, #0]
 800de86:	2308      	movs	r3, #8
 800de88:	2203      	movs	r2, #3
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f005 ff19 	bl	8013cc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800de90:	4b25      	ldr	r3, [pc, #148]	; (800df28 <USBD_CDC_Init+0x1ec>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	f003 020f 	and.w	r2, r3, #15
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	4613      	mov	r3, r2
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4413      	add	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	440b      	add	r3, r1
 800dea4:	3324      	adds	r3, #36	; 0x24
 800dea6:	2201      	movs	r2, #1
 800dea8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	33b0      	adds	r3, #176	; 0xb0
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4413      	add	r3, r2
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2200      	movs	r2, #0
 800deca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2200      	movs	r2, #0
 800ded2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dee0:	2302      	movs	r3, #2
 800dee2:	e018      	b.n	800df16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7c1b      	ldrb	r3, [r3, #16]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10a      	bne.n	800df02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800deec:	4b0d      	ldr	r3, [pc, #52]	; (800df24 <USBD_CDC_Init+0x1e8>)
 800deee:	7819      	ldrb	r1, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800def6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f005 ffd0 	bl	8013ea0 <USBD_LL_PrepareReceive>
 800df00:	e008      	b.n	800df14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df02:	4b08      	ldr	r3, [pc, #32]	; (800df24 <USBD_CDC_Init+0x1e8>)
 800df04:	7819      	ldrb	r1, [r3, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df0c:	2340      	movs	r3, #64	; 0x40
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f005 ffc6 	bl	8013ea0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df14:	2300      	movs	r3, #0
}
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	2000034f 	.word	0x2000034f
 800df24:	20000350 	.word	0x20000350
 800df28:	20000351 	.word	0x20000351

0800df2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	460b      	mov	r3, r1
 800df36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800df38:	4b3a      	ldr	r3, [pc, #232]	; (800e024 <USBD_CDC_DeInit+0xf8>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	4619      	mov	r1, r3
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f005 fee5 	bl	8013d0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800df44:	4b37      	ldr	r3, [pc, #220]	; (800e024 <USBD_CDC_DeInit+0xf8>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 020f 	and.w	r2, r3, #15
 800df4c:	6879      	ldr	r1, [r7, #4]
 800df4e:	4613      	mov	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	4413      	add	r3, r2
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	440b      	add	r3, r1
 800df58:	3324      	adds	r3, #36	; 0x24
 800df5a:	2200      	movs	r2, #0
 800df5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800df5e:	4b32      	ldr	r3, [pc, #200]	; (800e028 <USBD_CDC_DeInit+0xfc>)
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	4619      	mov	r1, r3
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f005 fed2 	bl	8013d0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800df6a:	4b2f      	ldr	r3, [pc, #188]	; (800e028 <USBD_CDC_DeInit+0xfc>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	f003 020f 	and.w	r2, r3, #15
 800df72:	6879      	ldr	r1, [r7, #4]
 800df74:	4613      	mov	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	440b      	add	r3, r1
 800df7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df82:	2200      	movs	r2, #0
 800df84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800df86:	4b29      	ldr	r3, [pc, #164]	; (800e02c <USBD_CDC_DeInit+0x100>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	4619      	mov	r1, r3
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f005 febe 	bl	8013d0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800df92:	4b26      	ldr	r3, [pc, #152]	; (800e02c <USBD_CDC_DeInit+0x100>)
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	f003 020f 	and.w	r2, r3, #15
 800df9a:	6879      	ldr	r1, [r7, #4]
 800df9c:	4613      	mov	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	440b      	add	r3, r1
 800dfa6:	3324      	adds	r3, #36	; 0x24
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dfac:	4b1f      	ldr	r3, [pc, #124]	; (800e02c <USBD_CDC_DeInit+0x100>)
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	f003 020f 	and.w	r2, r3, #15
 800dfb4:	6879      	ldr	r1, [r7, #4]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3326      	adds	r3, #38	; 0x26
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	32b0      	adds	r2, #176	; 0xb0
 800dfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d01f      	beq.n	800e018 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	33b0      	adds	r3, #176	; 0xb0
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4413      	add	r3, r2
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	32b0      	adds	r2, #176	; 0xb0
 800dff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f005 ff92 	bl	8013f24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	32b0      	adds	r2, #176	; 0xb0
 800e00a:	2100      	movs	r1, #0
 800e00c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	2000034f 	.word	0x2000034f
 800e028:	20000350 	.word	0x20000350
 800e02c:	20000351 	.word	0x20000351

0800e030 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	32b0      	adds	r2, #176	; 0xb0
 800e044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e048:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e04a:	2300      	movs	r3, #0
 800e04c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e04e:	2300      	movs	r3, #0
 800e050:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d101      	bne.n	800e060 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e0bf      	b.n	800e1e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d050      	beq.n	800e10e <USBD_CDC_Setup+0xde>
 800e06c:	2b20      	cmp	r3, #32
 800e06e:	f040 80af 	bne.w	800e1d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	88db      	ldrh	r3, [r3, #6]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d03a      	beq.n	800e0f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	b25b      	sxtb	r3, r3
 800e080:	2b00      	cmp	r3, #0
 800e082:	da1b      	bge.n	800e0bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	33b0      	adds	r3, #176	; 0xb0
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e09a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e09c:	683a      	ldr	r2, [r7, #0]
 800e09e:	88d2      	ldrh	r2, [r2, #6]
 800e0a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	88db      	ldrh	r3, [r3, #6]
 800e0a6:	2b07      	cmp	r3, #7
 800e0a8:	bf28      	it	cs
 800e0aa:	2307      	movcs	r3, #7
 800e0ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	89fa      	ldrh	r2, [r7, #14]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f001 fd43 	bl	800fb40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e0ba:	e090      	b.n	800e1de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	785a      	ldrb	r2, [r3, #1]
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	88db      	ldrh	r3, [r3, #6]
 800e0ca:	2b3f      	cmp	r3, #63	; 0x3f
 800e0cc:	d803      	bhi.n	800e0d6 <USBD_CDC_Setup+0xa6>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	88db      	ldrh	r3, [r3, #6]
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	e000      	b.n	800e0d8 <USBD_CDC_Setup+0xa8>
 800e0d6:	2240      	movs	r2, #64	; 0x40
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e0de:	6939      	ldr	r1, [r7, #16]
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f001 fd55 	bl	800fb98 <USBD_CtlPrepareRx>
      break;
 800e0ee:	e076      	b.n	800e1de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	33b0      	adds	r3, #176	; 0xb0
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	4413      	add	r3, r2
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	683a      	ldr	r2, [r7, #0]
 800e104:	7850      	ldrb	r0, [r2, #1]
 800e106:	2200      	movs	r2, #0
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	4798      	blx	r3
      break;
 800e10c:	e067      	b.n	800e1de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	785b      	ldrb	r3, [r3, #1]
 800e112:	2b0b      	cmp	r3, #11
 800e114:	d851      	bhi.n	800e1ba <USBD_CDC_Setup+0x18a>
 800e116:	a201      	add	r2, pc, #4	; (adr r2, 800e11c <USBD_CDC_Setup+0xec>)
 800e118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11c:	0800e14d 	.word	0x0800e14d
 800e120:	0800e1c9 	.word	0x0800e1c9
 800e124:	0800e1bb 	.word	0x0800e1bb
 800e128:	0800e1bb 	.word	0x0800e1bb
 800e12c:	0800e1bb 	.word	0x0800e1bb
 800e130:	0800e1bb 	.word	0x0800e1bb
 800e134:	0800e1bb 	.word	0x0800e1bb
 800e138:	0800e1bb 	.word	0x0800e1bb
 800e13c:	0800e1bb 	.word	0x0800e1bb
 800e140:	0800e1bb 	.word	0x0800e1bb
 800e144:	0800e177 	.word	0x0800e177
 800e148:	0800e1a1 	.word	0x0800e1a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b03      	cmp	r3, #3
 800e156:	d107      	bne.n	800e168 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e158:	f107 030a 	add.w	r3, r7, #10
 800e15c:	2202      	movs	r2, #2
 800e15e:	4619      	mov	r1, r3
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f001 fced 	bl	800fb40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e166:	e032      	b.n	800e1ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f001 fc77 	bl	800fa5e <USBD_CtlError>
            ret = USBD_FAIL;
 800e170:	2303      	movs	r3, #3
 800e172:	75fb      	strb	r3, [r7, #23]
          break;
 800e174:	e02b      	b.n	800e1ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	2b03      	cmp	r3, #3
 800e180:	d107      	bne.n	800e192 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e182:	f107 030d 	add.w	r3, r7, #13
 800e186:	2201      	movs	r2, #1
 800e188:	4619      	mov	r1, r3
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f001 fcd8 	bl	800fb40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e190:	e01d      	b.n	800e1ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f001 fc62 	bl	800fa5e <USBD_CtlError>
            ret = USBD_FAIL;
 800e19a:	2303      	movs	r3, #3
 800e19c:	75fb      	strb	r3, [r7, #23]
          break;
 800e19e:	e016      	b.n	800e1ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d00f      	beq.n	800e1cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f001 fc55 	bl	800fa5e <USBD_CtlError>
            ret = USBD_FAIL;
 800e1b4:	2303      	movs	r3, #3
 800e1b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e1b8:	e008      	b.n	800e1cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f001 fc4e 	bl	800fa5e <USBD_CtlError>
          ret = USBD_FAIL;
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	75fb      	strb	r3, [r7, #23]
          break;
 800e1c6:	e002      	b.n	800e1ce <USBD_CDC_Setup+0x19e>
          break;
 800e1c8:	bf00      	nop
 800e1ca:	e008      	b.n	800e1de <USBD_CDC_Setup+0x1ae>
          break;
 800e1cc:	bf00      	nop
      }
      break;
 800e1ce:	e006      	b.n	800e1de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e1d0:	6839      	ldr	r1, [r7, #0]
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f001 fc43 	bl	800fa5e <USBD_CtlError>
      ret = USBD_FAIL;
 800e1d8:	2303      	movs	r3, #3
 800e1da:	75fb      	strb	r3, [r7, #23]
      break;
 800e1dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3718      	adds	r7, #24
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	32b0      	adds	r2, #176	; 0xb0
 800e206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e20e:	2303      	movs	r3, #3
 800e210:	e065      	b.n	800e2de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	32b0      	adds	r2, #176	; 0xb0
 800e21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e220:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e222:	78fb      	ldrb	r3, [r7, #3]
 800e224:	f003 020f 	and.w	r2, r3, #15
 800e228:	6879      	ldr	r1, [r7, #4]
 800e22a:	4613      	mov	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4413      	add	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	440b      	add	r3, r1
 800e234:	3318      	adds	r3, #24
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d02f      	beq.n	800e29c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e23c:	78fb      	ldrb	r3, [r7, #3]
 800e23e:	f003 020f 	and.w	r2, r3, #15
 800e242:	6879      	ldr	r1, [r7, #4]
 800e244:	4613      	mov	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4413      	add	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	440b      	add	r3, r1
 800e24e:	3318      	adds	r3, #24
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	78fb      	ldrb	r3, [r7, #3]
 800e254:	f003 010f 	and.w	r1, r3, #15
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	460b      	mov	r3, r1
 800e25c:	00db      	lsls	r3, r3, #3
 800e25e:	440b      	add	r3, r1
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4403      	add	r3, r0
 800e264:	3348      	adds	r3, #72	; 0x48
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	fbb2 f1f3 	udiv	r1, r2, r3
 800e26c:	fb01 f303 	mul.w	r3, r1, r3
 800e270:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e272:	2b00      	cmp	r3, #0
 800e274:	d112      	bne.n	800e29c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e276:	78fb      	ldrb	r3, [r7, #3]
 800e278:	f003 020f 	and.w	r2, r3, #15
 800e27c:	6879      	ldr	r1, [r7, #4]
 800e27e:	4613      	mov	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	440b      	add	r3, r1
 800e288:	3318      	adds	r3, #24
 800e28a:	2200      	movs	r2, #0
 800e28c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e28e:	78f9      	ldrb	r1, [r7, #3]
 800e290:	2300      	movs	r3, #0
 800e292:	2200      	movs	r2, #0
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f005 fde2 	bl	8013e5e <USBD_LL_Transmit>
 800e29a:	e01f      	b.n	800e2dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	33b0      	adds	r3, #176	; 0xb0
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	4413      	add	r3, r2
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d010      	beq.n	800e2dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	33b0      	adds	r3, #176	; 0xb0
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4413      	add	r3, r2
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e2d2:	68ba      	ldr	r2, [r7, #8]
 800e2d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e2d8:	78fa      	ldrb	r2, [r7, #3]
 800e2da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b084      	sub	sp, #16
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	32b0      	adds	r2, #176	; 0xb0
 800e2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e300:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	32b0      	adds	r2, #176	; 0xb0
 800e30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d101      	bne.n	800e318 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e314:	2303      	movs	r3, #3
 800e316:	e01a      	b.n	800e34e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e318:	78fb      	ldrb	r3, [r7, #3]
 800e31a:	4619      	mov	r1, r3
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f005 fde0 	bl	8013ee2 <USBD_LL_GetRxDataSize>
 800e322:	4602      	mov	r2, r0
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	33b0      	adds	r3, #176	; 0xb0
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e348:	4611      	mov	r1, r2
 800e34a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	32b0      	adds	r2, #176	; 0xb0
 800e368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e36c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d101      	bne.n	800e378 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e374:	2303      	movs	r3, #3
 800e376:	e025      	b.n	800e3c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	33b0      	adds	r3, #176	; 0xb0
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	4413      	add	r3, r2
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d01a      	beq.n	800e3c2 <USBD_CDC_EP0_RxReady+0x6c>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e392:	2bff      	cmp	r3, #255	; 0xff
 800e394:	d015      	beq.n	800e3c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	33b0      	adds	r3, #176	; 0xb0
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4413      	add	r3, r2
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e3ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e3b6:	b292      	uxth	r2, r2
 800e3b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	22ff      	movs	r2, #255	; 0xff
 800e3be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e3c2:	2300      	movs	r3, #0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b086      	sub	sp, #24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e3d4:	2182      	movs	r1, #130	; 0x82
 800e3d6:	4818      	ldr	r0, [pc, #96]	; (800e438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e3d8:	f000 fd09 	bl	800edee <USBD_GetEpDesc>
 800e3dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e3de:	2101      	movs	r1, #1
 800e3e0:	4815      	ldr	r0, [pc, #84]	; (800e438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e3e2:	f000 fd04 	bl	800edee <USBD_GetEpDesc>
 800e3e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e3e8:	2181      	movs	r1, #129	; 0x81
 800e3ea:	4813      	ldr	r0, [pc, #76]	; (800e438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e3ec:	f000 fcff 	bl	800edee <USBD_GetEpDesc>
 800e3f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	2210      	movs	r2, #16
 800e3fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d006      	beq.n	800e412 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	2200      	movs	r2, #0
 800e408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e40c:	711a      	strb	r2, [r3, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d006      	beq.n	800e426 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e420:	711a      	strb	r2, [r3, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2243      	movs	r2, #67	; 0x43
 800e42a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e42c:	4b02      	ldr	r3, [pc, #8]	; (800e438 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	2000030c 	.word	0x2000030c

0800e43c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e444:	2182      	movs	r1, #130	; 0x82
 800e446:	4818      	ldr	r0, [pc, #96]	; (800e4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e448:	f000 fcd1 	bl	800edee <USBD_GetEpDesc>
 800e44c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e44e:	2101      	movs	r1, #1
 800e450:	4815      	ldr	r0, [pc, #84]	; (800e4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e452:	f000 fccc 	bl	800edee <USBD_GetEpDesc>
 800e456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e458:	2181      	movs	r1, #129	; 0x81
 800e45a:	4813      	ldr	r0, [pc, #76]	; (800e4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e45c:	f000 fcc7 	bl	800edee <USBD_GetEpDesc>
 800e460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	2210      	movs	r2, #16
 800e46c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d006      	beq.n	800e482 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	2200      	movs	r2, #0
 800e478:	711a      	strb	r2, [r3, #4]
 800e47a:	2200      	movs	r2, #0
 800e47c:	f042 0202 	orr.w	r2, r2, #2
 800e480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d006      	beq.n	800e496 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2200      	movs	r2, #0
 800e48c:	711a      	strb	r2, [r3, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	f042 0202 	orr.w	r2, r2, #2
 800e494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2243      	movs	r2, #67	; 0x43
 800e49a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e49c:	4b02      	ldr	r3, [pc, #8]	; (800e4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	2000030c 	.word	0x2000030c

0800e4ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b086      	sub	sp, #24
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4b4:	2182      	movs	r1, #130	; 0x82
 800e4b6:	4818      	ldr	r0, [pc, #96]	; (800e518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e4b8:	f000 fc99 	bl	800edee <USBD_GetEpDesc>
 800e4bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4be:	2101      	movs	r1, #1
 800e4c0:	4815      	ldr	r0, [pc, #84]	; (800e518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e4c2:	f000 fc94 	bl	800edee <USBD_GetEpDesc>
 800e4c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4c8:	2181      	movs	r1, #129	; 0x81
 800e4ca:	4813      	ldr	r0, [pc, #76]	; (800e518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e4cc:	f000 fc8f 	bl	800edee <USBD_GetEpDesc>
 800e4d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	2210      	movs	r2, #16
 800e4dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d006      	beq.n	800e4f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4ec:	711a      	strb	r2, [r3, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d006      	beq.n	800e506 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e500:	711a      	strb	r2, [r3, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2243      	movs	r2, #67	; 0x43
 800e50a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e50c:	4b02      	ldr	r3, [pc, #8]	; (800e518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3718      	adds	r7, #24
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	2000030c 	.word	0x2000030c

0800e51c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	220a      	movs	r2, #10
 800e528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e52a:	4b03      	ldr	r3, [pc, #12]	; (800e538 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	200002c8 	.word	0x200002c8

0800e53c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d101      	bne.n	800e550 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e54c:	2303      	movs	r3, #3
 800e54e:	e009      	b.n	800e564 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	33b0      	adds	r3, #176	; 0xb0
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	4413      	add	r3, r2
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e570:	b480      	push	{r7}
 800e572:	b087      	sub	sp, #28
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	32b0      	adds	r2, #176	; 0xb0
 800e586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e58a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e592:	2303      	movs	r3, #3
 800e594:	e008      	b.n	800e5a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	68ba      	ldr	r2, [r7, #8]
 800e59a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e5a6:	2300      	movs	r3, #0
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	371c      	adds	r7, #28
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	32b0      	adds	r2, #176	; 0xb0
 800e5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d101      	bne.n	800e5d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	e004      	b.n	800e5e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3714      	adds	r7, #20
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr
	...

0800e5f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	32b0      	adds	r2, #176	; 0xb0
 800e602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e606:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	32b0      	adds	r2, #176	; 0xb0
 800e612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d101      	bne.n	800e61e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e61a:	2303      	movs	r3, #3
 800e61c:	e018      	b.n	800e650 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	7c1b      	ldrb	r3, [r3, #16]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10a      	bne.n	800e63c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e626:	4b0c      	ldr	r3, [pc, #48]	; (800e658 <USBD_CDC_ReceivePacket+0x68>)
 800e628:	7819      	ldrb	r1, [r3, #0]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e630:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f005 fc33 	bl	8013ea0 <USBD_LL_PrepareReceive>
 800e63a:	e008      	b.n	800e64e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e63c:	4b06      	ldr	r3, [pc, #24]	; (800e658 <USBD_CDC_ReceivePacket+0x68>)
 800e63e:	7819      	ldrb	r1, [r3, #0]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e646:	2340      	movs	r3, #64	; 0x40
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f005 fc29 	bl	8013ea0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	20000350 	.word	0x20000350

0800e65c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	4613      	mov	r3, r2
 800e668:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d101      	bne.n	800e674 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e670:	2303      	movs	r3, #3
 800e672:	e01f      	b.n	800e6b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2200      	movs	r2, #0
 800e678:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d003      	beq.n	800e69a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2201      	movs	r2, #1
 800e69e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	79fa      	ldrb	r2, [r7, #7]
 800e6a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f005 faa3 	bl	8013bf4 <USBD_LL_Init>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e6b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d101      	bne.n	800e6d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e6d0:	2303      	movs	r3, #3
 800e6d2:	e025      	b.n	800e720 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	32ae      	adds	r2, #174	; 0xae
 800e6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00f      	beq.n	800e710 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	32ae      	adds	r2, #174	; 0xae
 800e6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e700:	f107 020e 	add.w	r2, r7, #14
 800e704:	4610      	mov	r0, r2
 800e706:	4798      	blx	r3
 800e708:	4602      	mov	r2, r0
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f005 faab 	bl	8013c8c <USBD_LL_Start>
 800e736:	4603      	mov	r3, r0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e748:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b084      	sub	sp, #16
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	460b      	mov	r3, r1
 800e760:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e762:	2300      	movs	r3, #0
 800e764:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d009      	beq.n	800e784 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	78fa      	ldrb	r2, [r7, #3]
 800e77a:	4611      	mov	r1, r2
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	4798      	blx	r3
 800e780:	4603      	mov	r3, r0
 800e782:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e784:	7bfb      	ldrb	r3, [r7, #15]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b084      	sub	sp, #16
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	460b      	mov	r3, r1
 800e798:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e79a:	2300      	movs	r3, #0
 800e79c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	78fa      	ldrb	r2, [r7, #3]
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	4798      	blx	r3
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d001      	beq.n	800e7b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7d2:	6839      	ldr	r1, [r7, #0]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f001 f908 	bl	800f9ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7f6:	f003 031f 	and.w	r3, r3, #31
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d01a      	beq.n	800e834 <USBD_LL_SetupStage+0x72>
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d822      	bhi.n	800e848 <USBD_LL_SetupStage+0x86>
 800e802:	2b00      	cmp	r3, #0
 800e804:	d002      	beq.n	800e80c <USBD_LL_SetupStage+0x4a>
 800e806:	2b01      	cmp	r3, #1
 800e808:	d00a      	beq.n	800e820 <USBD_LL_SetupStage+0x5e>
 800e80a:	e01d      	b.n	800e848 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e812:	4619      	mov	r1, r3
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fb5f 	bl	800eed8 <USBD_StdDevReq>
 800e81a:	4603      	mov	r3, r0
 800e81c:	73fb      	strb	r3, [r7, #15]
      break;
 800e81e:	e020      	b.n	800e862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e826:	4619      	mov	r1, r3
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 fbc7 	bl	800efbc <USBD_StdItfReq>
 800e82e:	4603      	mov	r3, r0
 800e830:	73fb      	strb	r3, [r7, #15]
      break;
 800e832:	e016      	b.n	800e862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e83a:	4619      	mov	r1, r3
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 fc29 	bl	800f094 <USBD_StdEPReq>
 800e842:	4603      	mov	r3, r0
 800e844:	73fb      	strb	r3, [r7, #15]
      break;
 800e846:	e00c      	b.n	800e862 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e84e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e852:	b2db      	uxtb	r3, r3
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f005 fa78 	bl	8013d4c <USBD_LL_StallEP>
 800e85c:	4603      	mov	r3, r0
 800e85e:	73fb      	strb	r3, [r7, #15]
      break;
 800e860:	bf00      	nop
  }

  return ret;
 800e862:	7bfb      	ldrb	r3, [r7, #15]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	460b      	mov	r3, r1
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e87a:	2300      	movs	r3, #0
 800e87c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e87e:	7afb      	ldrb	r3, [r7, #11]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d16e      	bne.n	800e962 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e88a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e892:	2b03      	cmp	r3, #3
 800e894:	f040 8098 	bne.w	800e9c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	689a      	ldr	r2, [r3, #8]
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d913      	bls.n	800e8cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	689a      	ldr	r2, [r3, #8]
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	1ad2      	subs	r2, r2, r3
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	68da      	ldr	r2, [r3, #12]
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	bf28      	it	cs
 800e8be:	4613      	movcs	r3, r2
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	6879      	ldr	r1, [r7, #4]
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f001 f984 	bl	800fbd2 <USBD_CtlContinueRx>
 800e8ca:	e07d      	b.n	800e9c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e8d2:	f003 031f 	and.w	r3, r3, #31
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d014      	beq.n	800e904 <USBD_LL_DataOutStage+0x98>
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	d81d      	bhi.n	800e91a <USBD_LL_DataOutStage+0xae>
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d002      	beq.n	800e8e8 <USBD_LL_DataOutStage+0x7c>
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d003      	beq.n	800e8ee <USBD_LL_DataOutStage+0x82>
 800e8e6:	e018      	b.n	800e91a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	75bb      	strb	r3, [r7, #22]
            break;
 800e8ec:	e018      	b.n	800e920 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f000 fa5e 	bl	800edba <USBD_CoreFindIF>
 800e8fe:	4603      	mov	r3, r0
 800e900:	75bb      	strb	r3, [r7, #22]
            break;
 800e902:	e00d      	b.n	800e920 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	4619      	mov	r1, r3
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	f000 fa60 	bl	800edd4 <USBD_CoreFindEP>
 800e914:	4603      	mov	r3, r0
 800e916:	75bb      	strb	r3, [r7, #22]
            break;
 800e918:	e002      	b.n	800e920 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e91a:	2300      	movs	r3, #0
 800e91c:	75bb      	strb	r3, [r7, #22]
            break;
 800e91e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e920:	7dbb      	ldrb	r3, [r7, #22]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d119      	bne.n	800e95a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	2b03      	cmp	r3, #3
 800e930:	d113      	bne.n	800e95a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e932:	7dba      	ldrb	r2, [r7, #22]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	32ae      	adds	r2, #174	; 0xae
 800e938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e93c:	691b      	ldr	r3, [r3, #16]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00b      	beq.n	800e95a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e942:	7dba      	ldrb	r2, [r7, #22]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e94a:	7dba      	ldrb	r2, [r7, #22]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	32ae      	adds	r2, #174	; 0xae
 800e950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f001 f94a 	bl	800fbf4 <USBD_CtlSendStatus>
 800e960:	e032      	b.n	800e9c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e962:	7afb      	ldrb	r3, [r7, #11]
 800e964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	4619      	mov	r1, r3
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	f000 fa31 	bl	800edd4 <USBD_CoreFindEP>
 800e972:	4603      	mov	r3, r0
 800e974:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e976:	7dbb      	ldrb	r3, [r7, #22]
 800e978:	2bff      	cmp	r3, #255	; 0xff
 800e97a:	d025      	beq.n	800e9c8 <USBD_LL_DataOutStage+0x15c>
 800e97c:	7dbb      	ldrb	r3, [r7, #22]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d122      	bne.n	800e9c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b03      	cmp	r3, #3
 800e98c:	d117      	bne.n	800e9be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e98e:	7dba      	ldrb	r2, [r7, #22]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	32ae      	adds	r2, #174	; 0xae
 800e994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e998:	699b      	ldr	r3, [r3, #24]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00f      	beq.n	800e9be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e99e:	7dba      	ldrb	r2, [r7, #22]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e9a6:	7dba      	ldrb	r2, [r7, #22]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	32ae      	adds	r2, #174	; 0xae
 800e9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b0:	699b      	ldr	r3, [r3, #24]
 800e9b2:	7afa      	ldrb	r2, [r7, #11]
 800e9b4:	4611      	mov	r1, r2
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	4798      	blx	r3
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e9be:	7dfb      	ldrb	r3, [r7, #23]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d001      	beq.n	800e9c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e9c4:	7dfb      	ldrb	r3, [r7, #23]
 800e9c6:	e000      	b.n	800e9ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3718      	adds	r7, #24
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b086      	sub	sp, #24
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	60f8      	str	r0, [r7, #12]
 800e9da:	460b      	mov	r3, r1
 800e9dc:	607a      	str	r2, [r7, #4]
 800e9de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e9e0:	7afb      	ldrb	r3, [r7, #11]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d16f      	bne.n	800eac6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	3314      	adds	r3, #20
 800e9ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e9f2:	2b02      	cmp	r3, #2
 800e9f4:	d15a      	bne.n	800eaac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	689a      	ldr	r2, [r3, #8]
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d914      	bls.n	800ea2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	689a      	ldr	r2, [r3, #8]
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	1ad2      	subs	r2, r2, r3
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	461a      	mov	r2, r3
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f001 f8ac 	bl	800fb76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea1e:	2300      	movs	r3, #0
 800ea20:	2200      	movs	r2, #0
 800ea22:	2100      	movs	r1, #0
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f005 fa3b 	bl	8013ea0 <USBD_LL_PrepareReceive>
 800ea2a:	e03f      	b.n	800eaac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	68da      	ldr	r2, [r3, #12]
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d11c      	bne.n	800ea72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	685a      	ldr	r2, [r3, #4]
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d316      	bcc.n	800ea72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	685a      	ldr	r2, [r3, #4]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d20f      	bcs.n	800ea72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ea52:	2200      	movs	r2, #0
 800ea54:	2100      	movs	r1, #0
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f001 f88d 	bl	800fb76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea64:	2300      	movs	r3, #0
 800ea66:	2200      	movs	r2, #0
 800ea68:	2100      	movs	r1, #0
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f005 fa18 	bl	8013ea0 <USBD_LL_PrepareReceive>
 800ea70:	e01c      	b.n	800eaac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	2b03      	cmp	r3, #3
 800ea7c:	d10f      	bne.n	800ea9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d009      	beq.n	800ea9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	68f8      	ldr	r0, [r7, #12]
 800ea9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea9e:	2180      	movs	r1, #128	; 0x80
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f005 f953 	bl	8013d4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eaa6:	68f8      	ldr	r0, [r7, #12]
 800eaa8:	f001 f8b7 	bl	800fc1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d03a      	beq.n	800eb2c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f7ff fe42 	bl	800e740 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eac4:	e032      	b.n	800eb2c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800eac6:	7afb      	ldrb	r3, [r7, #11]
 800eac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	4619      	mov	r1, r3
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 f97f 	bl	800edd4 <USBD_CoreFindEP>
 800ead6:	4603      	mov	r3, r0
 800ead8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eada:	7dfb      	ldrb	r3, [r7, #23]
 800eadc:	2bff      	cmp	r3, #255	; 0xff
 800eade:	d025      	beq.n	800eb2c <USBD_LL_DataInStage+0x15a>
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d122      	bne.n	800eb2c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	2b03      	cmp	r3, #3
 800eaf0:	d11c      	bne.n	800eb2c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800eaf2:	7dfa      	ldrb	r2, [r7, #23]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	32ae      	adds	r2, #174	; 0xae
 800eaf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eafc:	695b      	ldr	r3, [r3, #20]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d014      	beq.n	800eb2c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800eb02:	7dfa      	ldrb	r2, [r7, #23]
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800eb0a:	7dfa      	ldrb	r2, [r7, #23]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	32ae      	adds	r2, #174	; 0xae
 800eb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb14:	695b      	ldr	r3, [r3, #20]
 800eb16:	7afa      	ldrb	r2, [r7, #11]
 800eb18:	4611      	mov	r1, r2
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	4798      	blx	r3
 800eb1e:	4603      	mov	r3, r0
 800eb20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800eb22:	7dbb      	ldrb	r3, [r7, #22]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800eb28:	7dbb      	ldrb	r3, [r7, #22]
 800eb2a:	e000      	b.n	800eb2e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3718      	adds	r7, #24
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b084      	sub	sp, #16
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d014      	beq.n	800eb9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00e      	beq.n	800eb9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	6852      	ldr	r2, [r2, #4]
 800eb8a:	b2d2      	uxtb	r2, r2
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	4798      	blx	r3
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d001      	beq.n	800eb9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb9c:	2340      	movs	r3, #64	; 0x40
 800eb9e:	2200      	movs	r2, #0
 800eba0:	2100      	movs	r1, #0
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f005 f88d 	bl	8013cc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2240      	movs	r2, #64	; 0x40
 800ebb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ebb8:	2340      	movs	r3, #64	; 0x40
 800ebba:	2200      	movs	r2, #0
 800ebbc:	2180      	movs	r1, #128	; 0x80
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f005 f87f 	bl	8013cc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2240      	movs	r2, #64	; 0x40
 800ebce:	621a      	str	r2, [r3, #32]

  return ret;
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ebda:	b480      	push	{r7}
 800ebdc:	b083      	sub	sp, #12
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	78fa      	ldrb	r2, [r7, #3]
 800ebea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ebec:	2300      	movs	r3, #0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	370c      	adds	r7, #12
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr

0800ebfa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2204      	movs	r2, #4
 800ec14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b083      	sub	sp, #12
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	2b04      	cmp	r3, #4
 800ec38:	d106      	bne.n	800ec48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	370c      	adds	r7, #12
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d110      	bne.n	800ec8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00b      	beq.n	800ec8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec7a:	69db      	ldr	r3, [r3, #28]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d005      	beq.n	800ec8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec86:	69db      	ldr	r3, [r3, #28]
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b082      	sub	sp, #8
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	460b      	mov	r3, r1
 800eca0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	32ae      	adds	r2, #174	; 0xae
 800ecac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d101      	bne.n	800ecb8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	e01c      	b.n	800ecf2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	2b03      	cmp	r3, #3
 800ecc2:	d115      	bne.n	800ecf0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	32ae      	adds	r2, #174	; 0xae
 800ecce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd2:	6a1b      	ldr	r3, [r3, #32]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00b      	beq.n	800ecf0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	32ae      	adds	r2, #174	; 0xae
 800ece2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece6:	6a1b      	ldr	r3, [r3, #32]
 800ece8:	78fa      	ldrb	r2, [r7, #3]
 800ecea:	4611      	mov	r1, r2
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b082      	sub	sp, #8
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	460b      	mov	r3, r1
 800ed04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	32ae      	adds	r2, #174	; 0xae
 800ed10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d101      	bne.n	800ed1c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ed18:	2303      	movs	r3, #3
 800ed1a:	e01c      	b.n	800ed56 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	2b03      	cmp	r3, #3
 800ed26:	d115      	bne.n	800ed54 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	32ae      	adds	r2, #174	; 0xae
 800ed32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00b      	beq.n	800ed54 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	32ae      	adds	r2, #174	; 0xae
 800ed46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed4c:	78fa      	ldrb	r2, [r7, #3]
 800ed4e:	4611      	mov	r1, r2
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b083      	sub	sp, #12
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ed66:	2300      	movs	r3, #0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d00e      	beq.n	800edb0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	6852      	ldr	r2, [r2, #4]
 800ed9e:	b2d2      	uxtb	r2, r2
 800eda0:	4611      	mov	r1, r2
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	4798      	blx	r3
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d001      	beq.n	800edb0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800edac:	2303      	movs	r3, #3
 800edae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800edb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800edba:	b480      	push	{r7}
 800edbc:	b083      	sub	sp, #12
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
 800edc2:	460b      	mov	r3, r1
 800edc4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800edc6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800edc8:	4618      	mov	r0, r3
 800edca:	370c      	adds	r7, #12
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	460b      	mov	r3, r1
 800edde:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ede0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b086      	sub	sp, #24
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	460b      	mov	r3, r1
 800edf8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ee02:	2300      	movs	r3, #0
 800ee04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	885b      	ldrh	r3, [r3, #2]
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d920      	bls.n	800ee58 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ee1e:	e013      	b.n	800ee48 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ee20:	f107 030a 	add.w	r3, r7, #10
 800ee24:	4619      	mov	r1, r3
 800ee26:	6978      	ldr	r0, [r7, #20]
 800ee28:	f000 f81b 	bl	800ee62 <USBD_GetNextDesc>
 800ee2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	785b      	ldrb	r3, [r3, #1]
 800ee32:	2b05      	cmp	r3, #5
 800ee34:	d108      	bne.n	800ee48 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	789b      	ldrb	r3, [r3, #2]
 800ee3e:	78fa      	ldrb	r2, [r7, #3]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d008      	beq.n	800ee56 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	885b      	ldrh	r3, [r3, #2]
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	897b      	ldrh	r3, [r7, #10]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d8e5      	bhi.n	800ee20 <USBD_GetEpDesc+0x32>
 800ee54:	e000      	b.n	800ee58 <USBD_GetEpDesc+0x6a>
          break;
 800ee56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ee58:	693b      	ldr	r3, [r7, #16]
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3718      	adds	r7, #24
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ee62:	b480      	push	{r7}
 800ee64:	b085      	sub	sp, #20
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
 800ee6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	881a      	ldrh	r2, [r3, #0]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	4413      	add	r3, r2
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3714      	adds	r7, #20
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b087      	sub	sp, #28
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eeba:	8a3b      	ldrh	r3, [r7, #16]
 800eebc:	021b      	lsls	r3, r3, #8
 800eebe:	b21a      	sxth	r2, r3
 800eec0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eec4:	4313      	orrs	r3, r2
 800eec6:	b21b      	sxth	r3, r3
 800eec8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eeca:	89fb      	ldrh	r3, [r7, #14]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	371c      	adds	r7, #28
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eee2:	2300      	movs	r3, #0
 800eee4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eeee:	2b40      	cmp	r3, #64	; 0x40
 800eef0:	d005      	beq.n	800eefe <USBD_StdDevReq+0x26>
 800eef2:	2b40      	cmp	r3, #64	; 0x40
 800eef4:	d857      	bhi.n	800efa6 <USBD_StdDevReq+0xce>
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00f      	beq.n	800ef1a <USBD_StdDevReq+0x42>
 800eefa:	2b20      	cmp	r3, #32
 800eefc:	d153      	bne.n	800efa6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	32ae      	adds	r2, #174	; 0xae
 800ef08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	4798      	blx	r3
 800ef14:	4603      	mov	r3, r0
 800ef16:	73fb      	strb	r3, [r7, #15]
      break;
 800ef18:	e04a      	b.n	800efb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	785b      	ldrb	r3, [r3, #1]
 800ef1e:	2b09      	cmp	r3, #9
 800ef20:	d83b      	bhi.n	800ef9a <USBD_StdDevReq+0xc2>
 800ef22:	a201      	add	r2, pc, #4	; (adr r2, 800ef28 <USBD_StdDevReq+0x50>)
 800ef24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef28:	0800ef7d 	.word	0x0800ef7d
 800ef2c:	0800ef91 	.word	0x0800ef91
 800ef30:	0800ef9b 	.word	0x0800ef9b
 800ef34:	0800ef87 	.word	0x0800ef87
 800ef38:	0800ef9b 	.word	0x0800ef9b
 800ef3c:	0800ef5b 	.word	0x0800ef5b
 800ef40:	0800ef51 	.word	0x0800ef51
 800ef44:	0800ef9b 	.word	0x0800ef9b
 800ef48:	0800ef73 	.word	0x0800ef73
 800ef4c:	0800ef65 	.word	0x0800ef65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ef50:	6839      	ldr	r1, [r7, #0]
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fa3c 	bl	800f3d0 <USBD_GetDescriptor>
          break;
 800ef58:	e024      	b.n	800efa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ef5a:	6839      	ldr	r1, [r7, #0]
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 fba1 	bl	800f6a4 <USBD_SetAddress>
          break;
 800ef62:	e01f      	b.n	800efa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ef64:	6839      	ldr	r1, [r7, #0]
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 fbe0 	bl	800f72c <USBD_SetConfig>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73fb      	strb	r3, [r7, #15]
          break;
 800ef70:	e018      	b.n	800efa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ef72:	6839      	ldr	r1, [r7, #0]
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f000 fc83 	bl	800f880 <USBD_GetConfig>
          break;
 800ef7a:	e013      	b.n	800efa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ef7c:	6839      	ldr	r1, [r7, #0]
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 fcb4 	bl	800f8ec <USBD_GetStatus>
          break;
 800ef84:	e00e      	b.n	800efa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ef86:	6839      	ldr	r1, [r7, #0]
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fce3 	bl	800f954 <USBD_SetFeature>
          break;
 800ef8e:	e009      	b.n	800efa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ef90:	6839      	ldr	r1, [r7, #0]
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 fd07 	bl	800f9a6 <USBD_ClrFeature>
          break;
 800ef98:	e004      	b.n	800efa4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 fd5e 	bl	800fa5e <USBD_CtlError>
          break;
 800efa2:	bf00      	nop
      }
      break;
 800efa4:	e004      	b.n	800efb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800efa6:	6839      	ldr	r1, [r7, #0]
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f000 fd58 	bl	800fa5e <USBD_CtlError>
      break;
 800efae:	bf00      	nop
  }

  return ret;
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop

0800efbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efd2:	2b40      	cmp	r3, #64	; 0x40
 800efd4:	d005      	beq.n	800efe2 <USBD_StdItfReq+0x26>
 800efd6:	2b40      	cmp	r3, #64	; 0x40
 800efd8:	d852      	bhi.n	800f080 <USBD_StdItfReq+0xc4>
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <USBD_StdItfReq+0x26>
 800efde:	2b20      	cmp	r3, #32
 800efe0:	d14e      	bne.n	800f080 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	3b01      	subs	r3, #1
 800efec:	2b02      	cmp	r3, #2
 800efee:	d840      	bhi.n	800f072 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	889b      	ldrh	r3, [r3, #4]
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d836      	bhi.n	800f068 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	889b      	ldrh	r3, [r3, #4]
 800effe:	b2db      	uxtb	r3, r3
 800f000:	4619      	mov	r1, r3
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7ff fed9 	bl	800edba <USBD_CoreFindIF>
 800f008:	4603      	mov	r3, r0
 800f00a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f00c:	7bbb      	ldrb	r3, [r7, #14]
 800f00e:	2bff      	cmp	r3, #255	; 0xff
 800f010:	d01d      	beq.n	800f04e <USBD_StdItfReq+0x92>
 800f012:	7bbb      	ldrb	r3, [r7, #14]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d11a      	bne.n	800f04e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f018:	7bba      	ldrb	r2, [r7, #14]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	32ae      	adds	r2, #174	; 0xae
 800f01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d00f      	beq.n	800f048 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f028:	7bba      	ldrb	r2, [r7, #14]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f030:	7bba      	ldrb	r2, [r7, #14]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	32ae      	adds	r2, #174	; 0xae
 800f036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f03a:	689b      	ldr	r3, [r3, #8]
 800f03c:	6839      	ldr	r1, [r7, #0]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	4798      	blx	r3
 800f042:	4603      	mov	r3, r0
 800f044:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f046:	e004      	b.n	800f052 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f048:	2303      	movs	r3, #3
 800f04a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f04c:	e001      	b.n	800f052 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f04e:	2303      	movs	r3, #3
 800f050:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	88db      	ldrh	r3, [r3, #6]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d110      	bne.n	800f07c <USBD_StdItfReq+0xc0>
 800f05a:	7bfb      	ldrb	r3, [r7, #15]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10d      	bne.n	800f07c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 fdc7 	bl	800fbf4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f066:	e009      	b.n	800f07c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f068:	6839      	ldr	r1, [r7, #0]
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 fcf7 	bl	800fa5e <USBD_CtlError>
          break;
 800f070:	e004      	b.n	800f07c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f072:	6839      	ldr	r1, [r7, #0]
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 fcf2 	bl	800fa5e <USBD_CtlError>
          break;
 800f07a:	e000      	b.n	800f07e <USBD_StdItfReq+0xc2>
          break;
 800f07c:	bf00      	nop
      }
      break;
 800f07e:	e004      	b.n	800f08a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fceb 	bl	800fa5e <USBD_CtlError>
      break;
 800f088:	bf00      	nop
  }

  return ret;
 800f08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	889b      	ldrh	r3, [r3, #4]
 800f0a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f0b0:	2b40      	cmp	r3, #64	; 0x40
 800f0b2:	d007      	beq.n	800f0c4 <USBD_StdEPReq+0x30>
 800f0b4:	2b40      	cmp	r3, #64	; 0x40
 800f0b6:	f200 817f 	bhi.w	800f3b8 <USBD_StdEPReq+0x324>
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d02a      	beq.n	800f114 <USBD_StdEPReq+0x80>
 800f0be:	2b20      	cmp	r3, #32
 800f0c0:	f040 817a 	bne.w	800f3b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f0c4:	7bbb      	ldrb	r3, [r7, #14]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7ff fe83 	bl	800edd4 <USBD_CoreFindEP>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0d2:	7b7b      	ldrb	r3, [r7, #13]
 800f0d4:	2bff      	cmp	r3, #255	; 0xff
 800f0d6:	f000 8174 	beq.w	800f3c2 <USBD_StdEPReq+0x32e>
 800f0da:	7b7b      	ldrb	r3, [r7, #13]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f040 8170 	bne.w	800f3c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f0e2:	7b7a      	ldrb	r2, [r7, #13]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f0ea:	7b7a      	ldrb	r2, [r7, #13]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	32ae      	adds	r2, #174	; 0xae
 800f0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	f000 8163 	beq.w	800f3c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f0fc:	7b7a      	ldrb	r2, [r7, #13]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	32ae      	adds	r2, #174	; 0xae
 800f102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	6839      	ldr	r1, [r7, #0]
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	4798      	blx	r3
 800f10e:	4603      	mov	r3, r0
 800f110:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f112:	e156      	b.n	800f3c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	785b      	ldrb	r3, [r3, #1]
 800f118:	2b03      	cmp	r3, #3
 800f11a:	d008      	beq.n	800f12e <USBD_StdEPReq+0x9a>
 800f11c:	2b03      	cmp	r3, #3
 800f11e:	f300 8145 	bgt.w	800f3ac <USBD_StdEPReq+0x318>
 800f122:	2b00      	cmp	r3, #0
 800f124:	f000 809b 	beq.w	800f25e <USBD_StdEPReq+0x1ca>
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d03c      	beq.n	800f1a6 <USBD_StdEPReq+0x112>
 800f12c:	e13e      	b.n	800f3ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f134:	b2db      	uxtb	r3, r3
 800f136:	2b02      	cmp	r3, #2
 800f138:	d002      	beq.n	800f140 <USBD_StdEPReq+0xac>
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	d016      	beq.n	800f16c <USBD_StdEPReq+0xd8>
 800f13e:	e02c      	b.n	800f19a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f140:	7bbb      	ldrb	r3, [r7, #14]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00d      	beq.n	800f162 <USBD_StdEPReq+0xce>
 800f146:	7bbb      	ldrb	r3, [r7, #14]
 800f148:	2b80      	cmp	r3, #128	; 0x80
 800f14a:	d00a      	beq.n	800f162 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f14c:	7bbb      	ldrb	r3, [r7, #14]
 800f14e:	4619      	mov	r1, r3
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f004 fdfb 	bl	8013d4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f156:	2180      	movs	r1, #128	; 0x80
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f004 fdf7 	bl	8013d4c <USBD_LL_StallEP>
 800f15e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f160:	e020      	b.n	800f1a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fc7a 	bl	800fa5e <USBD_CtlError>
              break;
 800f16a:	e01b      	b.n	800f1a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	885b      	ldrh	r3, [r3, #2]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d10e      	bne.n	800f192 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f174:	7bbb      	ldrb	r3, [r7, #14]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00b      	beq.n	800f192 <USBD_StdEPReq+0xfe>
 800f17a:	7bbb      	ldrb	r3, [r7, #14]
 800f17c:	2b80      	cmp	r3, #128	; 0x80
 800f17e:	d008      	beq.n	800f192 <USBD_StdEPReq+0xfe>
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	88db      	ldrh	r3, [r3, #6]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d104      	bne.n	800f192 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f188:	7bbb      	ldrb	r3, [r7, #14]
 800f18a:	4619      	mov	r1, r3
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f004 fddd 	bl	8013d4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 fd2e 	bl	800fbf4 <USBD_CtlSendStatus>

              break;
 800f198:	e004      	b.n	800f1a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f19a:	6839      	ldr	r1, [r7, #0]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fc5e 	bl	800fa5e <USBD_CtlError>
              break;
 800f1a2:	bf00      	nop
          }
          break;
 800f1a4:	e107      	b.n	800f3b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	d002      	beq.n	800f1b8 <USBD_StdEPReq+0x124>
 800f1b2:	2b03      	cmp	r3, #3
 800f1b4:	d016      	beq.n	800f1e4 <USBD_StdEPReq+0x150>
 800f1b6:	e04b      	b.n	800f250 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1b8:	7bbb      	ldrb	r3, [r7, #14]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00d      	beq.n	800f1da <USBD_StdEPReq+0x146>
 800f1be:	7bbb      	ldrb	r3, [r7, #14]
 800f1c0:	2b80      	cmp	r3, #128	; 0x80
 800f1c2:	d00a      	beq.n	800f1da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1c4:	7bbb      	ldrb	r3, [r7, #14]
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f004 fdbf 	bl	8013d4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1ce:	2180      	movs	r1, #128	; 0x80
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f004 fdbb 	bl	8013d4c <USBD_LL_StallEP>
 800f1d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f1d8:	e040      	b.n	800f25c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 fc3e 	bl	800fa5e <USBD_CtlError>
              break;
 800f1e2:	e03b      	b.n	800f25c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	885b      	ldrh	r3, [r3, #2]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d136      	bne.n	800f25a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f1ec:	7bbb      	ldrb	r3, [r7, #14]
 800f1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d004      	beq.n	800f200 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f1f6:	7bbb      	ldrb	r3, [r7, #14]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f004 fdc5 	bl	8013d8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 fcf7 	bl	800fbf4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f206:	7bbb      	ldrb	r3, [r7, #14]
 800f208:	4619      	mov	r1, r3
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7ff fde2 	bl	800edd4 <USBD_CoreFindEP>
 800f210:	4603      	mov	r3, r0
 800f212:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f214:	7b7b      	ldrb	r3, [r7, #13]
 800f216:	2bff      	cmp	r3, #255	; 0xff
 800f218:	d01f      	beq.n	800f25a <USBD_StdEPReq+0x1c6>
 800f21a:	7b7b      	ldrb	r3, [r7, #13]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d11c      	bne.n	800f25a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f220:	7b7a      	ldrb	r2, [r7, #13]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f228:	7b7a      	ldrb	r2, [r7, #13]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	32ae      	adds	r2, #174	; 0xae
 800f22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d010      	beq.n	800f25a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f238:	7b7a      	ldrb	r2, [r7, #13]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	32ae      	adds	r2, #174	; 0xae
 800f23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	4798      	blx	r3
 800f24a:	4603      	mov	r3, r0
 800f24c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f24e:	e004      	b.n	800f25a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f250:	6839      	ldr	r1, [r7, #0]
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 fc03 	bl	800fa5e <USBD_CtlError>
              break;
 800f258:	e000      	b.n	800f25c <USBD_StdEPReq+0x1c8>
              break;
 800f25a:	bf00      	nop
          }
          break;
 800f25c:	e0ab      	b.n	800f3b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f264:	b2db      	uxtb	r3, r3
 800f266:	2b02      	cmp	r3, #2
 800f268:	d002      	beq.n	800f270 <USBD_StdEPReq+0x1dc>
 800f26a:	2b03      	cmp	r3, #3
 800f26c:	d032      	beq.n	800f2d4 <USBD_StdEPReq+0x240>
 800f26e:	e097      	b.n	800f3a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f270:	7bbb      	ldrb	r3, [r7, #14]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d007      	beq.n	800f286 <USBD_StdEPReq+0x1f2>
 800f276:	7bbb      	ldrb	r3, [r7, #14]
 800f278:	2b80      	cmp	r3, #128	; 0x80
 800f27a:	d004      	beq.n	800f286 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fbed 	bl	800fa5e <USBD_CtlError>
                break;
 800f284:	e091      	b.n	800f3aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	da0b      	bge.n	800f2a6 <USBD_StdEPReq+0x212>
 800f28e:	7bbb      	ldrb	r3, [r7, #14]
 800f290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f294:	4613      	mov	r3, r2
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4413      	add	r3, r2
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	3310      	adds	r3, #16
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	3304      	adds	r3, #4
 800f2a4:	e00b      	b.n	800f2be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2a6:	7bbb      	ldrb	r3, [r7, #14]
 800f2a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	4413      	add	r3, r2
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	3304      	adds	r3, #4
 800f2be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	2202      	movs	r2, #2
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 fc37 	bl	800fb40 <USBD_CtlSendData>
              break;
 800f2d2:	e06a      	b.n	800f3aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f2d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	da11      	bge.n	800f300 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f2dc:	7bbb      	ldrb	r3, [r7, #14]
 800f2de:	f003 020f 	and.w	r2, r3, #15
 800f2e2:	6879      	ldr	r1, [r7, #4]
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	4413      	add	r3, r2
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	440b      	add	r3, r1
 800f2ee:	3324      	adds	r3, #36	; 0x24
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d117      	bne.n	800f326 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 fbb0 	bl	800fa5e <USBD_CtlError>
                  break;
 800f2fe:	e054      	b.n	800f3aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	f003 020f 	and.w	r2, r3, #15
 800f306:	6879      	ldr	r1, [r7, #4]
 800f308:	4613      	mov	r3, r2
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	4413      	add	r3, r2
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	440b      	add	r3, r1
 800f312:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f316:	881b      	ldrh	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d104      	bne.n	800f326 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f31c:	6839      	ldr	r1, [r7, #0]
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 fb9d 	bl	800fa5e <USBD_CtlError>
                  break;
 800f324:	e041      	b.n	800f3aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	da0b      	bge.n	800f346 <USBD_StdEPReq+0x2b2>
 800f32e:	7bbb      	ldrb	r3, [r7, #14]
 800f330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f334:	4613      	mov	r3, r2
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	4413      	add	r3, r2
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	3310      	adds	r3, #16
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	4413      	add	r3, r2
 800f342:	3304      	adds	r3, #4
 800f344:	e00b      	b.n	800f35e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f346:	7bbb      	ldrb	r3, [r7, #14]
 800f348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f34c:	4613      	mov	r3, r2
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	4413      	add	r3, r2
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	4413      	add	r3, r2
 800f35c:	3304      	adds	r3, #4
 800f35e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f360:	7bbb      	ldrb	r3, [r7, #14]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d002      	beq.n	800f36c <USBD_StdEPReq+0x2d8>
 800f366:	7bbb      	ldrb	r3, [r7, #14]
 800f368:	2b80      	cmp	r3, #128	; 0x80
 800f36a:	d103      	bne.n	800f374 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	2200      	movs	r2, #0
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	e00e      	b.n	800f392 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f374:	7bbb      	ldrb	r3, [r7, #14]
 800f376:	4619      	mov	r1, r3
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f004 fd25 	bl	8013dc8 <USBD_LL_IsStallEP>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d003      	beq.n	800f38c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	2201      	movs	r2, #1
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	e002      	b.n	800f392 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	2200      	movs	r2, #0
 800f390:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	2202      	movs	r2, #2
 800f396:	4619      	mov	r1, r3
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fbd1 	bl	800fb40 <USBD_CtlSendData>
              break;
 800f39e:	e004      	b.n	800f3aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 fb5b 	bl	800fa5e <USBD_CtlError>
              break;
 800f3a8:	bf00      	nop
          }
          break;
 800f3aa:	e004      	b.n	800f3b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 fb55 	bl	800fa5e <USBD_CtlError>
          break;
 800f3b4:	bf00      	nop
      }
      break;
 800f3b6:	e005      	b.n	800f3c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f3b8:	6839      	ldr	r1, [r7, #0]
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 fb4f 	bl	800fa5e <USBD_CtlError>
      break;
 800f3c0:	e000      	b.n	800f3c4 <USBD_StdEPReq+0x330>
      break;
 800f3c2:	bf00      	nop
  }

  return ret;
 800f3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
	...

0800f3d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	885b      	ldrh	r3, [r3, #2]
 800f3ea:	0a1b      	lsrs	r3, r3, #8
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	2b06      	cmp	r3, #6
 800f3f2:	f200 8128 	bhi.w	800f646 <USBD_GetDescriptor+0x276>
 800f3f6:	a201      	add	r2, pc, #4	; (adr r2, 800f3fc <USBD_GetDescriptor+0x2c>)
 800f3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3fc:	0800f419 	.word	0x0800f419
 800f400:	0800f431 	.word	0x0800f431
 800f404:	0800f471 	.word	0x0800f471
 800f408:	0800f647 	.word	0x0800f647
 800f40c:	0800f647 	.word	0x0800f647
 800f410:	0800f5e7 	.word	0x0800f5e7
 800f414:	0800f613 	.word	0x0800f613
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	7c12      	ldrb	r2, [r2, #16]
 800f424:	f107 0108 	add.w	r1, r7, #8
 800f428:	4610      	mov	r0, r2
 800f42a:	4798      	blx	r3
 800f42c:	60f8      	str	r0, [r7, #12]
      break;
 800f42e:	e112      	b.n	800f656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	7c1b      	ldrb	r3, [r3, #16]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d10d      	bne.n	800f454 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f440:	f107 0208 	add.w	r2, r7, #8
 800f444:	4610      	mov	r0, r2
 800f446:	4798      	blx	r3
 800f448:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3301      	adds	r3, #1
 800f44e:	2202      	movs	r2, #2
 800f450:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f452:	e100      	b.n	800f656 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45c:	f107 0208 	add.w	r2, r7, #8
 800f460:	4610      	mov	r0, r2
 800f462:	4798      	blx	r3
 800f464:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	3301      	adds	r3, #1
 800f46a:	2202      	movs	r2, #2
 800f46c:	701a      	strb	r2, [r3, #0]
      break;
 800f46e:	e0f2      	b.n	800f656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	885b      	ldrh	r3, [r3, #2]
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b05      	cmp	r3, #5
 800f478:	f200 80ac 	bhi.w	800f5d4 <USBD_GetDescriptor+0x204>
 800f47c:	a201      	add	r2, pc, #4	; (adr r2, 800f484 <USBD_GetDescriptor+0xb4>)
 800f47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f482:	bf00      	nop
 800f484:	0800f49d 	.word	0x0800f49d
 800f488:	0800f4d1 	.word	0x0800f4d1
 800f48c:	0800f505 	.word	0x0800f505
 800f490:	0800f539 	.word	0x0800f539
 800f494:	0800f56d 	.word	0x0800f56d
 800f498:	0800f5a1 	.word	0x0800f5a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d00b      	beq.n	800f4c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	7c12      	ldrb	r2, [r2, #16]
 800f4b4:	f107 0108 	add.w	r1, r7, #8
 800f4b8:	4610      	mov	r0, r2
 800f4ba:	4798      	blx	r3
 800f4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4be:	e091      	b.n	800f5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 facb 	bl	800fa5e <USBD_CtlError>
            err++;
 800f4c8:	7afb      	ldrb	r3, [r7, #11]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800f4ce:	e089      	b.n	800f5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00b      	beq.n	800f4f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4e2:	689b      	ldr	r3, [r3, #8]
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	7c12      	ldrb	r2, [r2, #16]
 800f4e8:	f107 0108 	add.w	r1, r7, #8
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	4798      	blx	r3
 800f4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4f2:	e077      	b.n	800f5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4f4:	6839      	ldr	r1, [r7, #0]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 fab1 	bl	800fa5e <USBD_CtlError>
            err++;
 800f4fc:	7afb      	ldrb	r3, [r7, #11]
 800f4fe:	3301      	adds	r3, #1
 800f500:	72fb      	strb	r3, [r7, #11]
          break;
 800f502:	e06f      	b.n	800f5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00b      	beq.n	800f528 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	7c12      	ldrb	r2, [r2, #16]
 800f51c:	f107 0108 	add.w	r1, r7, #8
 800f520:	4610      	mov	r0, r2
 800f522:	4798      	blx	r3
 800f524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f526:	e05d      	b.n	800f5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 fa97 	bl	800fa5e <USBD_CtlError>
            err++;
 800f530:	7afb      	ldrb	r3, [r7, #11]
 800f532:	3301      	adds	r3, #1
 800f534:	72fb      	strb	r3, [r7, #11]
          break;
 800f536:	e055      	b.n	800f5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00b      	beq.n	800f55c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f54a:	691b      	ldr	r3, [r3, #16]
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	7c12      	ldrb	r2, [r2, #16]
 800f550:	f107 0108 	add.w	r1, r7, #8
 800f554:	4610      	mov	r0, r2
 800f556:	4798      	blx	r3
 800f558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f55a:	e043      	b.n	800f5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f55c:	6839      	ldr	r1, [r7, #0]
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 fa7d 	bl	800fa5e <USBD_CtlError>
            err++;
 800f564:	7afb      	ldrb	r3, [r7, #11]
 800f566:	3301      	adds	r3, #1
 800f568:	72fb      	strb	r3, [r7, #11]
          break;
 800f56a:	e03b      	b.n	800f5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f572:	695b      	ldr	r3, [r3, #20]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00b      	beq.n	800f590 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f57e:	695b      	ldr	r3, [r3, #20]
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	7c12      	ldrb	r2, [r2, #16]
 800f584:	f107 0108 	add.w	r1, r7, #8
 800f588:	4610      	mov	r0, r2
 800f58a:	4798      	blx	r3
 800f58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f58e:	e029      	b.n	800f5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fa63 	bl	800fa5e <USBD_CtlError>
            err++;
 800f598:	7afb      	ldrb	r3, [r7, #11]
 800f59a:	3301      	adds	r3, #1
 800f59c:	72fb      	strb	r3, [r7, #11]
          break;
 800f59e:	e021      	b.n	800f5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5a6:	699b      	ldr	r3, [r3, #24]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00b      	beq.n	800f5c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5b2:	699b      	ldr	r3, [r3, #24]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	7c12      	ldrb	r2, [r2, #16]
 800f5b8:	f107 0108 	add.w	r1, r7, #8
 800f5bc:	4610      	mov	r0, r2
 800f5be:	4798      	blx	r3
 800f5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5c2:	e00f      	b.n	800f5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fa49 	bl	800fa5e <USBD_CtlError>
            err++;
 800f5cc:	7afb      	ldrb	r3, [r7, #11]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800f5d2:	e007      	b.n	800f5e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f5d4:	6839      	ldr	r1, [r7, #0]
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 fa41 	bl	800fa5e <USBD_CtlError>
          err++;
 800f5dc:	7afb      	ldrb	r3, [r7, #11]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f5e2:	bf00      	nop
      }
      break;
 800f5e4:	e037      	b.n	800f656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	7c1b      	ldrb	r3, [r3, #16]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d109      	bne.n	800f602 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5f6:	f107 0208 	add.w	r2, r7, #8
 800f5fa:	4610      	mov	r0, r2
 800f5fc:	4798      	blx	r3
 800f5fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f600:	e029      	b.n	800f656 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f602:	6839      	ldr	r1, [r7, #0]
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f000 fa2a 	bl	800fa5e <USBD_CtlError>
        err++;
 800f60a:	7afb      	ldrb	r3, [r7, #11]
 800f60c:	3301      	adds	r3, #1
 800f60e:	72fb      	strb	r3, [r7, #11]
      break;
 800f610:	e021      	b.n	800f656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	7c1b      	ldrb	r3, [r3, #16]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d10d      	bne.n	800f636 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f622:	f107 0208 	add.w	r2, r7, #8
 800f626:	4610      	mov	r0, r2
 800f628:	4798      	blx	r3
 800f62a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	3301      	adds	r3, #1
 800f630:	2207      	movs	r2, #7
 800f632:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f634:	e00f      	b.n	800f656 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f636:	6839      	ldr	r1, [r7, #0]
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fa10 	bl	800fa5e <USBD_CtlError>
        err++;
 800f63e:	7afb      	ldrb	r3, [r7, #11]
 800f640:	3301      	adds	r3, #1
 800f642:	72fb      	strb	r3, [r7, #11]
      break;
 800f644:	e007      	b.n	800f656 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 fa08 	bl	800fa5e <USBD_CtlError>
      err++;
 800f64e:	7afb      	ldrb	r3, [r7, #11]
 800f650:	3301      	adds	r3, #1
 800f652:	72fb      	strb	r3, [r7, #11]
      break;
 800f654:	bf00      	nop
  }

  if (err != 0U)
 800f656:	7afb      	ldrb	r3, [r7, #11]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d11e      	bne.n	800f69a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	88db      	ldrh	r3, [r3, #6]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d016      	beq.n	800f692 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f664:	893b      	ldrh	r3, [r7, #8]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00e      	beq.n	800f688 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	88da      	ldrh	r2, [r3, #6]
 800f66e:	893b      	ldrh	r3, [r7, #8]
 800f670:	4293      	cmp	r3, r2
 800f672:	bf28      	it	cs
 800f674:	4613      	movcs	r3, r2
 800f676:	b29b      	uxth	r3, r3
 800f678:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f67a:	893b      	ldrh	r3, [r7, #8]
 800f67c:	461a      	mov	r2, r3
 800f67e:	68f9      	ldr	r1, [r7, #12]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 fa5d 	bl	800fb40 <USBD_CtlSendData>
 800f686:	e009      	b.n	800f69c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f688:	6839      	ldr	r1, [r7, #0]
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 f9e7 	bl	800fa5e <USBD_CtlError>
 800f690:	e004      	b.n	800f69c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f000 faae 	bl	800fbf4 <USBD_CtlSendStatus>
 800f698:	e000      	b.n	800f69c <USBD_GetDescriptor+0x2cc>
    return;
 800f69a:	bf00      	nop
  }
}
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop

0800f6a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	889b      	ldrh	r3, [r3, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d131      	bne.n	800f71a <USBD_SetAddress+0x76>
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	88db      	ldrh	r3, [r3, #6]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d12d      	bne.n	800f71a <USBD_SetAddress+0x76>
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	885b      	ldrh	r3, [r3, #2]
 800f6c2:	2b7f      	cmp	r3, #127	; 0x7f
 800f6c4:	d829      	bhi.n	800f71a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	885b      	ldrh	r3, [r3, #2]
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	2b03      	cmp	r3, #3
 800f6dc:	d104      	bne.n	800f6e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f6de:	6839      	ldr	r1, [r7, #0]
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 f9bc 	bl	800fa5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6e6:	e01d      	b.n	800f724 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	7bfa      	ldrb	r2, [r7, #15]
 800f6ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f6f0:	7bfb      	ldrb	r3, [r7, #15]
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f004 fb93 	bl	8013e20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 fa7a 	bl	800fbf4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f700:	7bfb      	ldrb	r3, [r7, #15]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d004      	beq.n	800f710 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2202      	movs	r2, #2
 800f70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f70e:	e009      	b.n	800f724 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f718:	e004      	b.n	800f724 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f71a:	6839      	ldr	r1, [r7, #0]
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f99e 	bl	800fa5e <USBD_CtlError>
  }
}
 800f722:	bf00      	nop
 800f724:	bf00      	nop
 800f726:	3710      	adds	r7, #16
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f736:	2300      	movs	r3, #0
 800f738:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	885b      	ldrh	r3, [r3, #2]
 800f73e:	b2da      	uxtb	r2, r3
 800f740:	4b4e      	ldr	r3, [pc, #312]	; (800f87c <USBD_SetConfig+0x150>)
 800f742:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f744:	4b4d      	ldr	r3, [pc, #308]	; (800f87c <USBD_SetConfig+0x150>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d905      	bls.n	800f758 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f985 	bl	800fa5e <USBD_CtlError>
    return USBD_FAIL;
 800f754:	2303      	movs	r3, #3
 800f756:	e08c      	b.n	800f872 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b02      	cmp	r3, #2
 800f762:	d002      	beq.n	800f76a <USBD_SetConfig+0x3e>
 800f764:	2b03      	cmp	r3, #3
 800f766:	d029      	beq.n	800f7bc <USBD_SetConfig+0x90>
 800f768:	e075      	b.n	800f856 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f76a:	4b44      	ldr	r3, [pc, #272]	; (800f87c <USBD_SetConfig+0x150>)
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d020      	beq.n	800f7b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f772:	4b42      	ldr	r3, [pc, #264]	; (800f87c <USBD_SetConfig+0x150>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f77c:	4b3f      	ldr	r3, [pc, #252]	; (800f87c <USBD_SetConfig+0x150>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	4619      	mov	r1, r3
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7fe ffe7 	bl	800e756 <USBD_SetClassConfig>
 800f788:	4603      	mov	r3, r0
 800f78a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d008      	beq.n	800f7a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 f962 	bl	800fa5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2202      	movs	r2, #2
 800f79e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f7a2:	e065      	b.n	800f870 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fa25 	bl	800fbf4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2203      	movs	r2, #3
 800f7ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f7b2:	e05d      	b.n	800f870 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 fa1d 	bl	800fbf4 <USBD_CtlSendStatus>
      break;
 800f7ba:	e059      	b.n	800f870 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f7bc:	4b2f      	ldr	r3, [pc, #188]	; (800f87c <USBD_SetConfig+0x150>)
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d112      	bne.n	800f7ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2202      	movs	r2, #2
 800f7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f7cc:	4b2b      	ldr	r3, [pc, #172]	; (800f87c <USBD_SetConfig+0x150>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7d6:	4b29      	ldr	r3, [pc, #164]	; (800f87c <USBD_SetConfig+0x150>)
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f7fe ffd6 	bl	800e78e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fa06 	bl	800fbf4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f7e8:	e042      	b.n	800f870 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f7ea:	4b24      	ldr	r3, [pc, #144]	; (800f87c <USBD_SetConfig+0x150>)
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d02a      	beq.n	800f84e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	4619      	mov	r1, r3
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f7fe ffc4 	bl	800e78e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f806:	4b1d      	ldr	r3, [pc, #116]	; (800f87c <USBD_SetConfig+0x150>)
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	461a      	mov	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f810:	4b1a      	ldr	r3, [pc, #104]	; (800f87c <USBD_SetConfig+0x150>)
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	4619      	mov	r1, r3
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7fe ff9d 	bl	800e756 <USBD_SetClassConfig>
 800f81c:	4603      	mov	r3, r0
 800f81e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f820:	7bfb      	ldrb	r3, [r7, #15]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00f      	beq.n	800f846 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 f918 	bl	800fa5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	b2db      	uxtb	r3, r3
 800f834:	4619      	mov	r1, r3
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7fe ffa9 	bl	800e78e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2202      	movs	r2, #2
 800f840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f844:	e014      	b.n	800f870 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 f9d4 	bl	800fbf4 <USBD_CtlSendStatus>
      break;
 800f84c:	e010      	b.n	800f870 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f9d0 	bl	800fbf4 <USBD_CtlSendStatus>
      break;
 800f854:	e00c      	b.n	800f870 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f856:	6839      	ldr	r1, [r7, #0]
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 f900 	bl	800fa5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f85e:	4b07      	ldr	r3, [pc, #28]	; (800f87c <USBD_SetConfig+0x150>)
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	4619      	mov	r1, r3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7fe ff92 	bl	800e78e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f86a:	2303      	movs	r3, #3
 800f86c:	73fb      	strb	r3, [r7, #15]
      break;
 800f86e:	bf00      	nop
  }

  return ret;
 800f870:	7bfb      	ldrb	r3, [r7, #15]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	20000900 	.word	0x20000900

0800f880 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	88db      	ldrh	r3, [r3, #6]
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d004      	beq.n	800f89c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f892:	6839      	ldr	r1, [r7, #0]
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 f8e2 	bl	800fa5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f89a:	e023      	b.n	800f8e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	2b02      	cmp	r3, #2
 800f8a6:	dc02      	bgt.n	800f8ae <USBD_GetConfig+0x2e>
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	dc03      	bgt.n	800f8b4 <USBD_GetConfig+0x34>
 800f8ac:	e015      	b.n	800f8da <USBD_GetConfig+0x5a>
 800f8ae:	2b03      	cmp	r3, #3
 800f8b0:	d00b      	beq.n	800f8ca <USBD_GetConfig+0x4a>
 800f8b2:	e012      	b.n	800f8da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	3308      	adds	r3, #8
 800f8be:	2201      	movs	r2, #1
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f93c 	bl	800fb40 <USBD_CtlSendData>
        break;
 800f8c8:	e00c      	b.n	800f8e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 f934 	bl	800fb40 <USBD_CtlSendData>
        break;
 800f8d8:	e004      	b.n	800f8e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 f8be 	bl	800fa5e <USBD_CtlError>
        break;
 800f8e2:	bf00      	nop
}
 800f8e4:	bf00      	nop
 800f8e6:	3708      	adds	r7, #8
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	3b01      	subs	r3, #1
 800f900:	2b02      	cmp	r3, #2
 800f902:	d81e      	bhi.n	800f942 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	88db      	ldrh	r3, [r3, #6]
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d004      	beq.n	800f916 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f90c:	6839      	ldr	r1, [r7, #0]
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f8a5 	bl	800fa5e <USBD_CtlError>
        break;
 800f914:	e01a      	b.n	800f94c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2201      	movs	r2, #1
 800f91a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f922:	2b00      	cmp	r3, #0
 800f924:	d005      	beq.n	800f932 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	f043 0202 	orr.w	r2, r3, #2
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	330c      	adds	r3, #12
 800f936:	2202      	movs	r2, #2
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 f900 	bl	800fb40 <USBD_CtlSendData>
      break;
 800f940:	e004      	b.n	800f94c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f942:	6839      	ldr	r1, [r7, #0]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 f88a 	bl	800fa5e <USBD_CtlError>
      break;
 800f94a:	bf00      	nop
  }
}
 800f94c:	bf00      	nop
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	885b      	ldrh	r3, [r3, #2]
 800f962:	2b01      	cmp	r3, #1
 800f964:	d107      	bne.n	800f976 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2201      	movs	r2, #1
 800f96a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 f940 	bl	800fbf4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f974:	e013      	b.n	800f99e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	885b      	ldrh	r3, [r3, #2]
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d10b      	bne.n	800f996 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	889b      	ldrh	r3, [r3, #4]
 800f982:	0a1b      	lsrs	r3, r3, #8
 800f984:	b29b      	uxth	r3, r3
 800f986:	b2da      	uxtb	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f000 f930 	bl	800fbf4 <USBD_CtlSendStatus>
}
 800f994:	e003      	b.n	800f99e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f996:	6839      	ldr	r1, [r7, #0]
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 f860 	bl	800fa5e <USBD_CtlError>
}
 800f99e:	bf00      	nop
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b082      	sub	sp, #8
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	3b01      	subs	r3, #1
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d80b      	bhi.n	800f9d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	885b      	ldrh	r3, [r3, #2]
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d10c      	bne.n	800f9e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f910 	bl	800fbf4 <USBD_CtlSendStatus>
      }
      break;
 800f9d4:	e004      	b.n	800f9e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 f840 	bl	800fa5e <USBD_CtlError>
      break;
 800f9de:	e000      	b.n	800f9e2 <USBD_ClrFeature+0x3c>
      break;
 800f9e0:	bf00      	nop
  }
}
 800f9e2:	bf00      	nop
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b084      	sub	sp, #16
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
 800f9f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	781a      	ldrb	r2, [r3, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	3301      	adds	r3, #1
 800fa04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	781a      	ldrb	r2, [r3, #0]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	3301      	adds	r3, #1
 800fa12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f7ff fa41 	bl	800ee9c <SWAPBYTE>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	3301      	adds	r3, #1
 800fa26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7ff fa34 	bl	800ee9c <SWAPBYTE>
 800fa34:	4603      	mov	r3, r0
 800fa36:	461a      	mov	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	3301      	adds	r3, #1
 800fa46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7ff fa27 	bl	800ee9c <SWAPBYTE>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	461a      	mov	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	80da      	strh	r2, [r3, #6]
}
 800fa56:	bf00      	nop
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b082      	sub	sp, #8
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa68:	2180      	movs	r1, #128	; 0x80
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f004 f96e 	bl	8013d4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa70:	2100      	movs	r1, #0
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f004 f96a 	bl	8013d4c <USBD_LL_StallEP>
}
 800fa78:	bf00      	nop
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d036      	beq.n	800fb04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa9a:	6938      	ldr	r0, [r7, #16]
 800fa9c:	f000 f836 	bl	800fb0c <USBD_GetLen>
 800faa0:	4603      	mov	r3, r0
 800faa2:	3301      	adds	r3, #1
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	005b      	lsls	r3, r3, #1
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800faae:	7dfb      	ldrb	r3, [r7, #23]
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	4413      	add	r3, r2
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	7812      	ldrb	r2, [r2, #0]
 800fab8:	701a      	strb	r2, [r3, #0]
  idx++;
 800faba:	7dfb      	ldrb	r3, [r7, #23]
 800fabc:	3301      	adds	r3, #1
 800fabe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fac0:	7dfb      	ldrb	r3, [r7, #23]
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	4413      	add	r3, r2
 800fac6:	2203      	movs	r2, #3
 800fac8:	701a      	strb	r2, [r3, #0]
  idx++;
 800faca:	7dfb      	ldrb	r3, [r7, #23]
 800facc:	3301      	adds	r3, #1
 800face:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fad0:	e013      	b.n	800fafa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fad2:	7dfb      	ldrb	r3, [r7, #23]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	4413      	add	r3, r2
 800fad8:	693a      	ldr	r2, [r7, #16]
 800fada:	7812      	ldrb	r2, [r2, #0]
 800fadc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	3301      	adds	r3, #1
 800fae2:	613b      	str	r3, [r7, #16]
    idx++;
 800fae4:	7dfb      	ldrb	r3, [r7, #23]
 800fae6:	3301      	adds	r3, #1
 800fae8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800faea:	7dfb      	ldrb	r3, [r7, #23]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	4413      	add	r3, r2
 800faf0:	2200      	movs	r2, #0
 800faf2:	701a      	strb	r2, [r3, #0]
    idx++;
 800faf4:	7dfb      	ldrb	r3, [r7, #23]
 800faf6:	3301      	adds	r3, #1
 800faf8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1e7      	bne.n	800fad2 <USBD_GetString+0x52>
 800fb02:	e000      	b.n	800fb06 <USBD_GetString+0x86>
    return;
 800fb04:	bf00      	nop
  }
}
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fb14:	2300      	movs	r3, #0
 800fb16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fb1c:	e005      	b.n	800fb2a <USBD_GetLen+0x1e>
  {
    len++;
 800fb1e:	7bfb      	ldrb	r3, [r7, #15]
 800fb20:	3301      	adds	r3, #1
 800fb22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	3301      	adds	r3, #1
 800fb28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1f5      	bne.n	800fb1e <USBD_GetLen+0x12>
  }

  return len;
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3714      	adds	r7, #20
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	687a      	ldr	r2, [r7, #4]
 800fb58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	2100      	movs	r1, #0
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f004 f979 	bl	8013e5e <USBD_LL_Transmit>

  return USBD_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b084      	sub	sp, #16
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	60f8      	str	r0, [r7, #12]
 800fb7e:	60b9      	str	r1, [r7, #8]
 800fb80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	68ba      	ldr	r2, [r7, #8]
 800fb86:	2100      	movs	r1, #0
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f004 f968 	bl	8013e5e <USBD_LL_Transmit>

  return USBD_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2203      	movs	r2, #3
 800fba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	68ba      	ldr	r2, [r7, #8]
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f004 f96c 	bl	8013ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbc8:	2300      	movs	r3, #0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b084      	sub	sp, #16
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	60f8      	str	r0, [r7, #12]
 800fbda:	60b9      	str	r1, [r7, #8]
 800fbdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f004 f95b 	bl	8013ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3710      	adds	r7, #16
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2204      	movs	r2, #4
 800fc00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fc04:	2300      	movs	r3, #0
 800fc06:	2200      	movs	r2, #0
 800fc08:	2100      	movs	r1, #0
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f004 f927 	bl	8013e5e <USBD_LL_Transmit>

  return USBD_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b082      	sub	sp, #8
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2205      	movs	r2, #5
 800fc26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	2100      	movs	r1, #0
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f004 f935 	bl	8013ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <__NVIC_SetPriority>:
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	4603      	mov	r3, r0
 800fc48:	6039      	str	r1, [r7, #0]
 800fc4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	db0a      	blt.n	800fc6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	b2da      	uxtb	r2, r3
 800fc58:	490c      	ldr	r1, [pc, #48]	; (800fc8c <__NVIC_SetPriority+0x4c>)
 800fc5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc5e:	0112      	lsls	r2, r2, #4
 800fc60:	b2d2      	uxtb	r2, r2
 800fc62:	440b      	add	r3, r1
 800fc64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fc68:	e00a      	b.n	800fc80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	b2da      	uxtb	r2, r3
 800fc6e:	4908      	ldr	r1, [pc, #32]	; (800fc90 <__NVIC_SetPriority+0x50>)
 800fc70:	79fb      	ldrb	r3, [r7, #7]
 800fc72:	f003 030f 	and.w	r3, r3, #15
 800fc76:	3b04      	subs	r3, #4
 800fc78:	0112      	lsls	r2, r2, #4
 800fc7a:	b2d2      	uxtb	r2, r2
 800fc7c:	440b      	add	r3, r1
 800fc7e:	761a      	strb	r2, [r3, #24]
}
 800fc80:	bf00      	nop
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr
 800fc8c:	e000e100 	.word	0xe000e100
 800fc90:	e000ed00 	.word	0xe000ed00

0800fc94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fc94:	b580      	push	{r7, lr}
 800fc96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fc98:	2100      	movs	r1, #0
 800fc9a:	f06f 0004 	mvn.w	r0, #4
 800fc9e:	f7ff ffcf 	bl	800fc40 <__NVIC_SetPriority>
#endif
}
 800fca2:	bf00      	nop
 800fca4:	bd80      	pop	{r7, pc}
	...

0800fca8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcae:	f3ef 8305 	mrs	r3, IPSR
 800fcb2:	603b      	str	r3, [r7, #0]
  return(result);
 800fcb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d003      	beq.n	800fcc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fcba:	f06f 0305 	mvn.w	r3, #5
 800fcbe:	607b      	str	r3, [r7, #4]
 800fcc0:	e00c      	b.n	800fcdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fcc2:	4b0a      	ldr	r3, [pc, #40]	; (800fcec <osKernelInitialize+0x44>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d105      	bne.n	800fcd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fcca:	4b08      	ldr	r3, [pc, #32]	; (800fcec <osKernelInitialize+0x44>)
 800fccc:	2201      	movs	r2, #1
 800fcce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	607b      	str	r3, [r7, #4]
 800fcd4:	e002      	b.n	800fcdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fcd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fcdc:	687b      	ldr	r3, [r7, #4]
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	370c      	adds	r7, #12
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	20000904 	.word	0x20000904

0800fcf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcf6:	f3ef 8305 	mrs	r3, IPSR
 800fcfa:	603b      	str	r3, [r7, #0]
  return(result);
 800fcfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d003      	beq.n	800fd0a <osKernelStart+0x1a>
    stat = osErrorISR;
 800fd02:	f06f 0305 	mvn.w	r3, #5
 800fd06:	607b      	str	r3, [r7, #4]
 800fd08:	e010      	b.n	800fd2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fd0a:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <osKernelStart+0x48>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d109      	bne.n	800fd26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fd12:	f7ff ffbf 	bl	800fc94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fd16:	4b08      	ldr	r3, [pc, #32]	; (800fd38 <osKernelStart+0x48>)
 800fd18:	2202      	movs	r2, #2
 800fd1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fd1c:	f001 fd38 	bl	8011790 <vTaskStartScheduler>
      stat = osOK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	607b      	str	r3, [r7, #4]
 800fd24:	e002      	b.n	800fd2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fd26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fd2c:	687b      	ldr	r3, [r7, #4]
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	20000904 	.word	0x20000904

0800fd3c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd42:	f3ef 8305 	mrs	r3, IPSR
 800fd46:	603b      	str	r3, [r7, #0]
  return(result);
 800fd48:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d003      	beq.n	800fd56 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800fd4e:	f001 fe4b 	bl	80119e8 <xTaskGetTickCountFromISR>
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	e002      	b.n	800fd5c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800fd56:	f001 fe37 	bl	80119c8 <xTaskGetTickCount>
 800fd5a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800fd5c:	687b      	ldr	r3, [r7, #4]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3708      	adds	r7, #8
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fd66:	b580      	push	{r7, lr}
 800fd68:	b08e      	sub	sp, #56	; 0x38
 800fd6a:	af04      	add	r7, sp, #16
 800fd6c:	60f8      	str	r0, [r7, #12]
 800fd6e:	60b9      	str	r1, [r7, #8]
 800fd70:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fd72:	2300      	movs	r3, #0
 800fd74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd76:	f3ef 8305 	mrs	r3, IPSR
 800fd7a:	617b      	str	r3, [r7, #20]
  return(result);
 800fd7c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d17e      	bne.n	800fe80 <osThreadNew+0x11a>
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d07b      	beq.n	800fe80 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fd88:	2380      	movs	r3, #128	; 0x80
 800fd8a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fd8c:	2318      	movs	r3, #24
 800fd8e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fd90:	2300      	movs	r3, #0
 800fd92:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fd94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d045      	beq.n	800fe2c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d002      	beq.n	800fdae <osThreadNew+0x48>
        name = attr->name;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	699b      	ldr	r3, [r3, #24]
 800fdba:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d008      	beq.n	800fdd4 <osThreadNew+0x6e>
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	2b38      	cmp	r3, #56	; 0x38
 800fdc6:	d805      	bhi.n	800fdd4 <osThreadNew+0x6e>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <osThreadNew+0x72>
        return (NULL);
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	e054      	b.n	800fe82 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	695b      	ldr	r3, [r3, #20]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d003      	beq.n	800fde8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	089b      	lsrs	r3, r3, #2
 800fde6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d00e      	beq.n	800fe0e <osThreadNew+0xa8>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	2bbb      	cmp	r3, #187	; 0xbb
 800fdf6:	d90a      	bls.n	800fe0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d006      	beq.n	800fe0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	695b      	ldr	r3, [r3, #20]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d002      	beq.n	800fe0e <osThreadNew+0xa8>
        mem = 1;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	61bb      	str	r3, [r7, #24]
 800fe0c:	e010      	b.n	800fe30 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d10c      	bne.n	800fe30 <osThreadNew+0xca>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d108      	bne.n	800fe30 <osThreadNew+0xca>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	691b      	ldr	r3, [r3, #16]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d104      	bne.n	800fe30 <osThreadNew+0xca>
          mem = 0;
 800fe26:	2300      	movs	r3, #0
 800fe28:	61bb      	str	r3, [r7, #24]
 800fe2a:	e001      	b.n	800fe30 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	d110      	bne.n	800fe58 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fe3e:	9202      	str	r2, [sp, #8]
 800fe40:	9301      	str	r3, [sp, #4]
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	6a3a      	ldr	r2, [r7, #32]
 800fe4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe4c:	68f8      	ldr	r0, [r7, #12]
 800fe4e:	f001 fa35 	bl	80112bc <xTaskCreateStatic>
 800fe52:	4603      	mov	r3, r0
 800fe54:	613b      	str	r3, [r7, #16]
 800fe56:	e013      	b.n	800fe80 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d110      	bne.n	800fe80 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fe5e:	6a3b      	ldr	r3, [r7, #32]
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	f107 0310 	add.w	r3, r7, #16
 800fe66:	9301      	str	r3, [sp, #4]
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f001 fa80 	bl	8011376 <xTaskCreate>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d001      	beq.n	800fe80 <osThreadNew+0x11a>
            hTask = NULL;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fe80:	693b      	ldr	r3, [r7, #16]
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3728      	adds	r7, #40	; 0x28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b084      	sub	sp, #16
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe92:	f3ef 8305 	mrs	r3, IPSR
 800fe96:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d003      	beq.n	800fea6 <osDelay+0x1c>
    stat = osErrorISR;
 800fe9e:	f06f 0305 	mvn.w	r3, #5
 800fea2:	60fb      	str	r3, [r7, #12]
 800fea4:	e007      	b.n	800feb6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fea6:	2300      	movs	r3, #0
 800fea8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d002      	beq.n	800feb6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f001 fc39 	bl	8011728 <vTaskDelay>
    }
  }

  return (stat);
 800feb6:	68fb      	ldr	r3, [r7, #12]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b086      	sub	sp, #24
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fec8:	f3ef 8305 	mrs	r3, IPSR
 800fecc:	60fb      	str	r3, [r7, #12]
  return(result);
 800fece:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d003      	beq.n	800fedc <osDelayUntil+0x1c>
    stat = osErrorISR;
 800fed4:	f06f 0305 	mvn.w	r3, #5
 800fed8:	617b      	str	r3, [r7, #20]
 800feda:	e019      	b.n	800ff10 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800fedc:	2300      	movs	r3, #0
 800fede:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800fee0:	f001 fd72 	bl	80119c8 <xTaskGetTickCount>
 800fee4:	4603      	mov	r3, r0
 800fee6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	1ad3      	subs	r3, r2, r3
 800feee:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d009      	beq.n	800ff0a <osDelayUntil+0x4a>
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	db06      	blt.n	800ff0a <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800fefc:	f107 0308 	add.w	r3, r7, #8
 800ff00:	6939      	ldr	r1, [r7, #16]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f001 fb92 	bl	801162c <vTaskDelayUntil>
 800ff08:	e002      	b.n	800ff10 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ff0a:	f06f 0303 	mvn.w	r3, #3
 800ff0e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ff10:	697b      	ldr	r3, [r7, #20]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3718      	adds	r7, #24
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b08a      	sub	sp, #40	; 0x28
 800ff1e:	af02      	add	r7, sp, #8
 800ff20:	60f8      	str	r0, [r7, #12]
 800ff22:	60b9      	str	r1, [r7, #8]
 800ff24:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ff26:	2300      	movs	r3, #0
 800ff28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff2a:	f3ef 8305 	mrs	r3, IPSR
 800ff2e:	613b      	str	r3, [r7, #16]
  return(result);
 800ff30:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d175      	bne.n	8010022 <osSemaphoreNew+0x108>
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d072      	beq.n	8010022 <osSemaphoreNew+0x108>
 800ff3c:	68ba      	ldr	r2, [r7, #8]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d86e      	bhi.n	8010022 <osSemaphoreNew+0x108>
    mem = -1;
 800ff44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff48:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d015      	beq.n	800ff7c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d006      	beq.n	800ff66 <osSemaphoreNew+0x4c>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	2b4f      	cmp	r3, #79	; 0x4f
 800ff5e:	d902      	bls.n	800ff66 <osSemaphoreNew+0x4c>
        mem = 1;
 800ff60:	2301      	movs	r3, #1
 800ff62:	61bb      	str	r3, [r7, #24]
 800ff64:	e00c      	b.n	800ff80 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	689b      	ldr	r3, [r3, #8]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d108      	bne.n	800ff80 <osSemaphoreNew+0x66>
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d104      	bne.n	800ff80 <osSemaphoreNew+0x66>
          mem = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	61bb      	str	r3, [r7, #24]
 800ff7a:	e001      	b.n	800ff80 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff86:	d04c      	beq.n	8010022 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d128      	bne.n	800ffe0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d10a      	bne.n	800ffaa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	2203      	movs	r2, #3
 800ff9a:	9200      	str	r2, [sp, #0]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	2001      	movs	r0, #1
 800ffa2:	f000 fb09 	bl	80105b8 <xQueueGenericCreateStatic>
 800ffa6:	61f8      	str	r0, [r7, #28]
 800ffa8:	e005      	b.n	800ffb6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ffaa:	2203      	movs	r2, #3
 800ffac:	2100      	movs	r1, #0
 800ffae:	2001      	movs	r0, #1
 800ffb0:	f000 fb7a 	bl	80106a8 <xQueueGenericCreate>
 800ffb4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ffb6:	69fb      	ldr	r3, [r7, #28]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d022      	beq.n	8010002 <osSemaphoreNew+0xe8>
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d01f      	beq.n	8010002 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	69f8      	ldr	r0, [r7, #28]
 800ffca:	f000 fc35 	bl	8010838 <xQueueGenericSend>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d016      	beq.n	8010002 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ffd4:	69f8      	ldr	r0, [r7, #28]
 800ffd6:	f000 ffb5 	bl	8010f44 <vQueueDelete>
            hSemaphore = NULL;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	61fb      	str	r3, [r7, #28]
 800ffde:	e010      	b.n	8010002 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d108      	bne.n	800fff8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	461a      	mov	r2, r3
 800ffec:	68b9      	ldr	r1, [r7, #8]
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f000 fbb7 	bl	8010762 <xQueueCreateCountingSemaphoreStatic>
 800fff4:	61f8      	str	r0, [r7, #28]
 800fff6:	e004      	b.n	8010002 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fff8:	68b9      	ldr	r1, [r7, #8]
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f000 fbe8 	bl	80107d0 <xQueueCreateCountingSemaphore>
 8010000:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00c      	beq.n	8010022 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d003      	beq.n	8010016 <osSemaphoreNew+0xfc>
          name = attr->name;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	617b      	str	r3, [r7, #20]
 8010014:	e001      	b.n	801001a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010016:	2300      	movs	r3, #0
 8010018:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801001a:	6979      	ldr	r1, [r7, #20]
 801001c:	69f8      	ldr	r0, [r7, #28]
 801001e:	f001 f8c5 	bl	80111ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010022:	69fb      	ldr	r3, [r7, #28]
}
 8010024:	4618      	mov	r0, r3
 8010026:	3720      	adds	r7, #32
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801002c:	b580      	push	{r7, lr}
 801002e:	b086      	sub	sp, #24
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010038:	2300      	movs	r3, #0
 801003a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d103      	bne.n	801004a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010042:	f06f 0303 	mvn.w	r3, #3
 8010046:	617b      	str	r3, [r7, #20]
 8010048:	e02c      	b.n	80100a4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801004a:	f3ef 8305 	mrs	r3, IPSR
 801004e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010050:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010052:	2b00      	cmp	r3, #0
 8010054:	d01a      	beq.n	801008c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8010056:	2300      	movs	r3, #0
 8010058:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801005a:	f107 0308 	add.w	r3, r7, #8
 801005e:	4619      	mov	r1, r3
 8010060:	6938      	ldr	r0, [r7, #16]
 8010062:	f000 fd82 	bl	8010b6a <xQueueGiveFromISR>
 8010066:	4603      	mov	r3, r0
 8010068:	2b01      	cmp	r3, #1
 801006a:	d003      	beq.n	8010074 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801006c:	f06f 0302 	mvn.w	r3, #2
 8010070:	617b      	str	r3, [r7, #20]
 8010072:	e017      	b.n	80100a4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d014      	beq.n	80100a4 <osSemaphoreRelease+0x78>
 801007a:	4b0d      	ldr	r3, [pc, #52]	; (80100b0 <osSemaphoreRelease+0x84>)
 801007c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010080:	601a      	str	r2, [r3, #0]
 8010082:	f3bf 8f4f 	dsb	sy
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	e00b      	b.n	80100a4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801008c:	2300      	movs	r3, #0
 801008e:	2200      	movs	r2, #0
 8010090:	2100      	movs	r1, #0
 8010092:	6938      	ldr	r0, [r7, #16]
 8010094:	f000 fbd0 	bl	8010838 <xQueueGenericSend>
 8010098:	4603      	mov	r3, r0
 801009a:	2b01      	cmp	r3, #1
 801009c:	d002      	beq.n	80100a4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801009e:	f06f 0302 	mvn.w	r3, #2
 80100a2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80100a4:	697b      	ldr	r3, [r7, #20]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3718      	adds	r7, #24
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	e000ed04 	.word	0xe000ed04

080100b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b08a      	sub	sp, #40	; 0x28
 80100b8:	af02      	add	r7, sp, #8
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80100c0:	2300      	movs	r3, #0
 80100c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100c4:	f3ef 8305 	mrs	r3, IPSR
 80100c8:	613b      	str	r3, [r7, #16]
  return(result);
 80100ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d15f      	bne.n	8010190 <osMessageQueueNew+0xdc>
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d05c      	beq.n	8010190 <osMessageQueueNew+0xdc>
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d059      	beq.n	8010190 <osMessageQueueNew+0xdc>
    mem = -1;
 80100dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d029      	beq.n	801013c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d012      	beq.n	8010116 <osMessageQueueNew+0x62>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	2b4f      	cmp	r3, #79	; 0x4f
 80100f6:	d90e      	bls.n	8010116 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00a      	beq.n	8010116 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	695a      	ldr	r2, [r3, #20]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	68b9      	ldr	r1, [r7, #8]
 8010108:	fb01 f303 	mul.w	r3, r1, r3
 801010c:	429a      	cmp	r2, r3
 801010e:	d302      	bcc.n	8010116 <osMessageQueueNew+0x62>
        mem = 1;
 8010110:	2301      	movs	r3, #1
 8010112:	61bb      	str	r3, [r7, #24]
 8010114:	e014      	b.n	8010140 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	689b      	ldr	r3, [r3, #8]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d110      	bne.n	8010140 <osMessageQueueNew+0x8c>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d10c      	bne.n	8010140 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801012a:	2b00      	cmp	r3, #0
 801012c:	d108      	bne.n	8010140 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	695b      	ldr	r3, [r3, #20]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d104      	bne.n	8010140 <osMessageQueueNew+0x8c>
          mem = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	61bb      	str	r3, [r7, #24]
 801013a:	e001      	b.n	8010140 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801013c:	2300      	movs	r3, #0
 801013e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010140:	69bb      	ldr	r3, [r7, #24]
 8010142:	2b01      	cmp	r3, #1
 8010144:	d10b      	bne.n	801015e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	691a      	ldr	r2, [r3, #16]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	2100      	movs	r1, #0
 8010150:	9100      	str	r1, [sp, #0]
 8010152:	68b9      	ldr	r1, [r7, #8]
 8010154:	68f8      	ldr	r0, [r7, #12]
 8010156:	f000 fa2f 	bl	80105b8 <xQueueGenericCreateStatic>
 801015a:	61f8      	str	r0, [r7, #28]
 801015c:	e008      	b.n	8010170 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d105      	bne.n	8010170 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010164:	2200      	movs	r2, #0
 8010166:	68b9      	ldr	r1, [r7, #8]
 8010168:	68f8      	ldr	r0, [r7, #12]
 801016a:	f000 fa9d 	bl	80106a8 <xQueueGenericCreate>
 801016e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00c      	beq.n	8010190 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d003      	beq.n	8010184 <osMessageQueueNew+0xd0>
        name = attr->name;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	617b      	str	r3, [r7, #20]
 8010182:	e001      	b.n	8010188 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010184:	2300      	movs	r3, #0
 8010186:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010188:	6979      	ldr	r1, [r7, #20]
 801018a:	69f8      	ldr	r0, [r7, #28]
 801018c:	f001 f80e 	bl	80111ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010190:	69fb      	ldr	r3, [r7, #28]
}
 8010192:	4618      	mov	r0, r3
 8010194:	3720      	adds	r7, #32
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
	...

0801019c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	603b      	str	r3, [r7, #0]
 80101a8:	4613      	mov	r3, r2
 80101aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80101b0:	2300      	movs	r3, #0
 80101b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101b4:	f3ef 8305 	mrs	r3, IPSR
 80101b8:	617b      	str	r3, [r7, #20]
  return(result);
 80101ba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d028      	beq.n	8010212 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d005      	beq.n	80101d2 <osMessageQueuePut+0x36>
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <osMessageQueuePut+0x36>
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d003      	beq.n	80101da <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80101d2:	f06f 0303 	mvn.w	r3, #3
 80101d6:	61fb      	str	r3, [r7, #28]
 80101d8:	e038      	b.n	801024c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80101da:	2300      	movs	r3, #0
 80101dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80101de:	f107 0210 	add.w	r2, r7, #16
 80101e2:	2300      	movs	r3, #0
 80101e4:	68b9      	ldr	r1, [r7, #8]
 80101e6:	69b8      	ldr	r0, [r7, #24]
 80101e8:	f000 fc24 	bl	8010a34 <xQueueGenericSendFromISR>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d003      	beq.n	80101fa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80101f2:	f06f 0302 	mvn.w	r3, #2
 80101f6:	61fb      	str	r3, [r7, #28]
 80101f8:	e028      	b.n	801024c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d025      	beq.n	801024c <osMessageQueuePut+0xb0>
 8010200:	4b15      	ldr	r3, [pc, #84]	; (8010258 <osMessageQueuePut+0xbc>)
 8010202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010206:	601a      	str	r2, [r3, #0]
 8010208:	f3bf 8f4f 	dsb	sy
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	e01c      	b.n	801024c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d002      	beq.n	801021e <osMessageQueuePut+0x82>
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d103      	bne.n	8010226 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801021e:	f06f 0303 	mvn.w	r3, #3
 8010222:	61fb      	str	r3, [r7, #28]
 8010224:	e012      	b.n	801024c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010226:	2300      	movs	r3, #0
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	68b9      	ldr	r1, [r7, #8]
 801022c:	69b8      	ldr	r0, [r7, #24]
 801022e:	f000 fb03 	bl	8010838 <xQueueGenericSend>
 8010232:	4603      	mov	r3, r0
 8010234:	2b01      	cmp	r3, #1
 8010236:	d009      	beq.n	801024c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d003      	beq.n	8010246 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801023e:	f06f 0301 	mvn.w	r3, #1
 8010242:	61fb      	str	r3, [r7, #28]
 8010244:	e002      	b.n	801024c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010246:	f06f 0302 	mvn.w	r3, #2
 801024a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801024c:	69fb      	ldr	r3, [r7, #28]
}
 801024e:	4618      	mov	r0, r3
 8010250:	3720      	adds	r7, #32
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	e000ed04 	.word	0xe000ed04

0801025c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801025c:	b580      	push	{r7, lr}
 801025e:	b088      	sub	sp, #32
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]
 8010268:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801026e:	2300      	movs	r3, #0
 8010270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010272:	f3ef 8305 	mrs	r3, IPSR
 8010276:	617b      	str	r3, [r7, #20]
  return(result);
 8010278:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801027a:	2b00      	cmp	r3, #0
 801027c:	d028      	beq.n	80102d0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d005      	beq.n	8010290 <osMessageQueueGet+0x34>
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d002      	beq.n	8010290 <osMessageQueueGet+0x34>
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d003      	beq.n	8010298 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010290:	f06f 0303 	mvn.w	r3, #3
 8010294:	61fb      	str	r3, [r7, #28]
 8010296:	e037      	b.n	8010308 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010298:	2300      	movs	r3, #0
 801029a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801029c:	f107 0310 	add.w	r3, r7, #16
 80102a0:	461a      	mov	r2, r3
 80102a2:	68b9      	ldr	r1, [r7, #8]
 80102a4:	69b8      	ldr	r0, [r7, #24]
 80102a6:	f000 fdcd 	bl	8010e44 <xQueueReceiveFromISR>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d003      	beq.n	80102b8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80102b0:	f06f 0302 	mvn.w	r3, #2
 80102b4:	61fb      	str	r3, [r7, #28]
 80102b6:	e027      	b.n	8010308 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d024      	beq.n	8010308 <osMessageQueueGet+0xac>
 80102be:	4b15      	ldr	r3, [pc, #84]	; (8010314 <osMessageQueueGet+0xb8>)
 80102c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	f3bf 8f6f 	isb	sy
 80102ce:	e01b      	b.n	8010308 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d002      	beq.n	80102dc <osMessageQueueGet+0x80>
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d103      	bne.n	80102e4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80102dc:	f06f 0303 	mvn.w	r3, #3
 80102e0:	61fb      	str	r3, [r7, #28]
 80102e2:	e011      	b.n	8010308 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80102e4:	683a      	ldr	r2, [r7, #0]
 80102e6:	68b9      	ldr	r1, [r7, #8]
 80102e8:	69b8      	ldr	r0, [r7, #24]
 80102ea:	f000 fccb 	bl	8010c84 <xQueueReceive>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d009      	beq.n	8010308 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d003      	beq.n	8010302 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80102fa:	f06f 0301 	mvn.w	r3, #1
 80102fe:	61fb      	str	r3, [r7, #28]
 8010300:	e002      	b.n	8010308 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010302:	f06f 0302 	mvn.w	r3, #2
 8010306:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010308:	69fb      	ldr	r3, [r7, #28]
}
 801030a:	4618      	mov	r0, r3
 801030c:	3720      	adds	r7, #32
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	e000ed04 	.word	0xe000ed04

08010318 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010318:	b480      	push	{r7}
 801031a:	b085      	sub	sp, #20
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	4a07      	ldr	r2, [pc, #28]	; (8010344 <vApplicationGetIdleTaskMemory+0x2c>)
 8010328:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	4a06      	ldr	r2, [pc, #24]	; (8010348 <vApplicationGetIdleTaskMemory+0x30>)
 801032e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2280      	movs	r2, #128	; 0x80
 8010334:	601a      	str	r2, [r3, #0]
}
 8010336:	bf00      	nop
 8010338:	3714      	adds	r7, #20
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	20000908 	.word	0x20000908
 8010348:	200009c4 	.word	0x200009c4

0801034c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801034c:	b480      	push	{r7}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	4a07      	ldr	r2, [pc, #28]	; (8010378 <vApplicationGetTimerTaskMemory+0x2c>)
 801035c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	4a06      	ldr	r2, [pc, #24]	; (801037c <vApplicationGetTimerTaskMemory+0x30>)
 8010362:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f44f 7280 	mov.w	r2, #256	; 0x100
 801036a:	601a      	str	r2, [r3, #0]
}
 801036c:	bf00      	nop
 801036e:	3714      	adds	r7, #20
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr
 8010378:	20000bc4 	.word	0x20000bc4
 801037c:	20000c80 	.word	0x20000c80

08010380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f103 0208 	add.w	r2, r3, #8
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f103 0208 	add.w	r2, r3, #8
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f103 0208 	add.w	r2, r3, #8
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2200      	movs	r2, #0
 80103b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80103b4:	bf00      	nop
 80103b6:	370c      	adds	r7, #12
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr

080103c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80103ce:	bf00      	nop
 80103d0:	370c      	adds	r7, #12
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr

080103da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80103da:	b480      	push	{r7}
 80103dc:	b085      	sub	sp, #20
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	689a      	ldr	r2, [r3, #8]
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	683a      	ldr	r2, [r7, #0]
 8010404:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	1c5a      	adds	r2, r3, #1
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	601a      	str	r2, [r3, #0]
}
 8010416:	bf00      	nop
 8010418:	3714      	adds	r7, #20
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr

08010422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010422:	b480      	push	{r7}
 8010424:	b085      	sub	sp, #20
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
 801042a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010438:	d103      	bne.n	8010442 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	691b      	ldr	r3, [r3, #16]
 801043e:	60fb      	str	r3, [r7, #12]
 8010440:	e00c      	b.n	801045c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	3308      	adds	r3, #8
 8010446:	60fb      	str	r3, [r7, #12]
 8010448:	e002      	b.n	8010450 <vListInsert+0x2e>
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	60fb      	str	r3, [r7, #12]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	68ba      	ldr	r2, [r7, #8]
 8010458:	429a      	cmp	r2, r3
 801045a:	d2f6      	bcs.n	801044a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	683a      	ldr	r2, [r7, #0]
 801046a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	683a      	ldr	r2, [r7, #0]
 8010476:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	1c5a      	adds	r2, r3, #1
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	601a      	str	r2, [r3, #0]
}
 8010488:	bf00      	nop
 801048a:	3714      	adds	r7, #20
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	6892      	ldr	r2, [r2, #8]
 80104aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	6852      	ldr	r2, [r2, #4]
 80104b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d103      	bne.n	80104c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	689a      	ldr	r2, [r3, #8]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2200      	movs	r2, #0
 80104cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	1e5a      	subs	r2, r3, #1
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3714      	adds	r7, #20
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d10a      	bne.n	8010512 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80104fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010500:	f383 8811 	msr	BASEPRI, r3
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	f3bf 8f4f 	dsb	sy
 801050c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801050e:	bf00      	nop
 8010510:	e7fe      	b.n	8010510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010512:	f002 fb07 	bl	8012b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801051e:	68f9      	ldr	r1, [r7, #12]
 8010520:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010522:	fb01 f303 	mul.w	r3, r1, r3
 8010526:	441a      	add	r2, r3
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2200      	movs	r2, #0
 8010530:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010542:	3b01      	subs	r3, #1
 8010544:	68f9      	ldr	r1, [r7, #12]
 8010546:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010548:	fb01 f303 	mul.w	r3, r1, r3
 801054c:	441a      	add	r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	22ff      	movs	r2, #255	; 0xff
 8010556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	22ff      	movs	r2, #255	; 0xff
 801055e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d114      	bne.n	8010592 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	691b      	ldr	r3, [r3, #16]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d01a      	beq.n	80105a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	3310      	adds	r3, #16
 8010574:	4618      	mov	r0, r3
 8010576:	f001 fbb7 	bl	8011ce8 <xTaskRemoveFromEventList>
 801057a:	4603      	mov	r3, r0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d012      	beq.n	80105a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010580:	4b0c      	ldr	r3, [pc, #48]	; (80105b4 <xQueueGenericReset+0xcc>)
 8010582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010586:	601a      	str	r2, [r3, #0]
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	f3bf 8f6f 	isb	sy
 8010590:	e009      	b.n	80105a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	3310      	adds	r3, #16
 8010596:	4618      	mov	r0, r3
 8010598:	f7ff fef2 	bl	8010380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	3324      	adds	r3, #36	; 0x24
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7ff feed 	bl	8010380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80105a6:	f002 faed 	bl	8012b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80105aa:	2301      	movs	r3, #1
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	e000ed04 	.word	0xe000ed04

080105b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b08e      	sub	sp, #56	; 0x38
 80105bc:	af02      	add	r7, sp, #8
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	607a      	str	r2, [r7, #4]
 80105c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d10a      	bne.n	80105e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80105cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d0:	f383 8811 	msr	BASEPRI, r3
 80105d4:	f3bf 8f6f 	isb	sy
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80105de:	bf00      	nop
 80105e0:	e7fe      	b.n	80105e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d10a      	bne.n	80105fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80105e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ec:	f383 8811 	msr	BASEPRI, r3
 80105f0:	f3bf 8f6f 	isb	sy
 80105f4:	f3bf 8f4f 	dsb	sy
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80105fa:	bf00      	nop
 80105fc:	e7fe      	b.n	80105fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d002      	beq.n	801060a <xQueueGenericCreateStatic+0x52>
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d001      	beq.n	801060e <xQueueGenericCreateStatic+0x56>
 801060a:	2301      	movs	r3, #1
 801060c:	e000      	b.n	8010610 <xQueueGenericCreateStatic+0x58>
 801060e:	2300      	movs	r3, #0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d10a      	bne.n	801062a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010618:	f383 8811 	msr	BASEPRI, r3
 801061c:	f3bf 8f6f 	isb	sy
 8010620:	f3bf 8f4f 	dsb	sy
 8010624:	623b      	str	r3, [r7, #32]
}
 8010626:	bf00      	nop
 8010628:	e7fe      	b.n	8010628 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <xQueueGenericCreateStatic+0x7e>
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d101      	bne.n	801063a <xQueueGenericCreateStatic+0x82>
 8010636:	2301      	movs	r3, #1
 8010638:	e000      	b.n	801063c <xQueueGenericCreateStatic+0x84>
 801063a:	2300      	movs	r3, #0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10a      	bne.n	8010656 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010644:	f383 8811 	msr	BASEPRI, r3
 8010648:	f3bf 8f6f 	isb	sy
 801064c:	f3bf 8f4f 	dsb	sy
 8010650:	61fb      	str	r3, [r7, #28]
}
 8010652:	bf00      	nop
 8010654:	e7fe      	b.n	8010654 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010656:	2350      	movs	r3, #80	; 0x50
 8010658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	2b50      	cmp	r3, #80	; 0x50
 801065e:	d00a      	beq.n	8010676 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010664:	f383 8811 	msr	BASEPRI, r3
 8010668:	f3bf 8f6f 	isb	sy
 801066c:	f3bf 8f4f 	dsb	sy
 8010670:	61bb      	str	r3, [r7, #24]
}
 8010672:	bf00      	nop
 8010674:	e7fe      	b.n	8010674 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010676:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00d      	beq.n	801069e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010684:	2201      	movs	r2, #1
 8010686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801068a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	4613      	mov	r3, r2
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	68b9      	ldr	r1, [r7, #8]
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f000 f83f 	bl	801071c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3730      	adds	r7, #48	; 0x30
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b08a      	sub	sp, #40	; 0x28
 80106ac:	af02      	add	r7, sp, #8
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	4613      	mov	r3, r2
 80106b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d10a      	bne.n	80106d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80106bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c0:	f383 8811 	msr	BASEPRI, r3
 80106c4:	f3bf 8f6f 	isb	sy
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	613b      	str	r3, [r7, #16]
}
 80106ce:	bf00      	nop
 80106d0:	e7fe      	b.n	80106d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	68ba      	ldr	r2, [r7, #8]
 80106d6:	fb02 f303 	mul.w	r3, r2, r3
 80106da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	3350      	adds	r3, #80	; 0x50
 80106e0:	4618      	mov	r0, r3
 80106e2:	f002 fb41 	bl	8012d68 <pvPortMalloc>
 80106e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d011      	beq.n	8010712 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	3350      	adds	r3, #80	; 0x50
 80106f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010700:	79fa      	ldrb	r2, [r7, #7]
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	9300      	str	r3, [sp, #0]
 8010706:	4613      	mov	r3, r2
 8010708:	697a      	ldr	r2, [r7, #20]
 801070a:	68b9      	ldr	r1, [r7, #8]
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f000 f805 	bl	801071c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010712:	69bb      	ldr	r3, [r7, #24]
	}
 8010714:	4618      	mov	r0, r3
 8010716:	3720      	adds	r7, #32
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	607a      	str	r2, [r7, #4]
 8010728:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d103      	bne.n	8010738 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	69ba      	ldr	r2, [r7, #24]
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	e002      	b.n	801073e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801073e:	69bb      	ldr	r3, [r7, #24]
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	68ba      	ldr	r2, [r7, #8]
 8010748:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801074a:	2101      	movs	r1, #1
 801074c:	69b8      	ldr	r0, [r7, #24]
 801074e:	f7ff fecb 	bl	80104e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	78fa      	ldrb	r2, [r7, #3]
 8010756:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801075a:	bf00      	nop
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010762:	b580      	push	{r7, lr}
 8010764:	b08a      	sub	sp, #40	; 0x28
 8010766:	af02      	add	r7, sp, #8
 8010768:	60f8      	str	r0, [r7, #12]
 801076a:	60b9      	str	r1, [r7, #8]
 801076c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d10a      	bne.n	801078a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010778:	f383 8811 	msr	BASEPRI, r3
 801077c:	f3bf 8f6f 	isb	sy
 8010780:	f3bf 8f4f 	dsb	sy
 8010784:	61bb      	str	r3, [r7, #24]
}
 8010786:	bf00      	nop
 8010788:	e7fe      	b.n	8010788 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801078a:	68ba      	ldr	r2, [r7, #8]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	429a      	cmp	r2, r3
 8010790:	d90a      	bls.n	80107a8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	617b      	str	r3, [r7, #20]
}
 80107a4:	bf00      	nop
 80107a6:	e7fe      	b.n	80107a6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80107a8:	2302      	movs	r3, #2
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	2100      	movs	r1, #0
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	f7ff ff00 	bl	80105b8 <xQueueGenericCreateStatic>
 80107b8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80107ba:	69fb      	ldr	r3, [r7, #28]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d002      	beq.n	80107c6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	68ba      	ldr	r2, [r7, #8]
 80107c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80107c6:	69fb      	ldr	r3, [r7, #28]
	}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3720      	adds	r7, #32
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b086      	sub	sp, #24
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d10a      	bne.n	80107f6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80107e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e4:	f383 8811 	msr	BASEPRI, r3
 80107e8:	f3bf 8f6f 	isb	sy
 80107ec:	f3bf 8f4f 	dsb	sy
 80107f0:	613b      	str	r3, [r7, #16]
}
 80107f2:	bf00      	nop
 80107f4:	e7fe      	b.n	80107f4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80107f6:	683a      	ldr	r2, [r7, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d90a      	bls.n	8010814 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80107fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010802:	f383 8811 	msr	BASEPRI, r3
 8010806:	f3bf 8f6f 	isb	sy
 801080a:	f3bf 8f4f 	dsb	sy
 801080e:	60fb      	str	r3, [r7, #12]
}
 8010810:	bf00      	nop
 8010812:	e7fe      	b.n	8010812 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010814:	2202      	movs	r2, #2
 8010816:	2100      	movs	r1, #0
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7ff ff45 	bl	80106a8 <xQueueGenericCreate>
 801081e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	683a      	ldr	r2, [r7, #0]
 801082a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801082c:	697b      	ldr	r3, [r7, #20]
	}
 801082e:	4618      	mov	r0, r3
 8010830:	3718      	adds	r7, #24
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
	...

08010838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08e      	sub	sp, #56	; 0x38
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010846:	2300      	movs	r3, #0
 8010848:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10a      	bne.n	801086a <xQueueGenericSend+0x32>
	__asm volatile
 8010854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010858:	f383 8811 	msr	BASEPRI, r3
 801085c:	f3bf 8f6f 	isb	sy
 8010860:	f3bf 8f4f 	dsb	sy
 8010864:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010866:	bf00      	nop
 8010868:	e7fe      	b.n	8010868 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d103      	bne.n	8010878 <xQueueGenericSend+0x40>
 8010870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010874:	2b00      	cmp	r3, #0
 8010876:	d101      	bne.n	801087c <xQueueGenericSend+0x44>
 8010878:	2301      	movs	r3, #1
 801087a:	e000      	b.n	801087e <xQueueGenericSend+0x46>
 801087c:	2300      	movs	r3, #0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d10a      	bne.n	8010898 <xQueueGenericSend+0x60>
	__asm volatile
 8010882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010894:	bf00      	nop
 8010896:	e7fe      	b.n	8010896 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	2b02      	cmp	r3, #2
 801089c:	d103      	bne.n	80108a6 <xQueueGenericSend+0x6e>
 801089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d101      	bne.n	80108aa <xQueueGenericSend+0x72>
 80108a6:	2301      	movs	r3, #1
 80108a8:	e000      	b.n	80108ac <xQueueGenericSend+0x74>
 80108aa:	2300      	movs	r3, #0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10a      	bne.n	80108c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80108b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	623b      	str	r3, [r7, #32]
}
 80108c2:	bf00      	nop
 80108c4:	e7fe      	b.n	80108c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108c6:	f001 fbd1 	bl	801206c <xTaskGetSchedulerState>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d102      	bne.n	80108d6 <xQueueGenericSend+0x9e>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d101      	bne.n	80108da <xQueueGenericSend+0xa2>
 80108d6:	2301      	movs	r3, #1
 80108d8:	e000      	b.n	80108dc <xQueueGenericSend+0xa4>
 80108da:	2300      	movs	r3, #0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10a      	bne.n	80108f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	61fb      	str	r3, [r7, #28]
}
 80108f2:	bf00      	nop
 80108f4:	e7fe      	b.n	80108f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80108f6:	f002 f915 	bl	8012b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80108fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010902:	429a      	cmp	r2, r3
 8010904:	d302      	bcc.n	801090c <xQueueGenericSend+0xd4>
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	2b02      	cmp	r3, #2
 801090a:	d129      	bne.n	8010960 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801090c:	683a      	ldr	r2, [r7, #0]
 801090e:	68b9      	ldr	r1, [r7, #8]
 8010910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010912:	f000 fb3a 	bl	8010f8a <prvCopyDataToQueue>
 8010916:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	2b00      	cmp	r3, #0
 801091e:	d010      	beq.n	8010942 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010922:	3324      	adds	r3, #36	; 0x24
 8010924:	4618      	mov	r0, r3
 8010926:	f001 f9df 	bl	8011ce8 <xTaskRemoveFromEventList>
 801092a:	4603      	mov	r3, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d013      	beq.n	8010958 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010930:	4b3f      	ldr	r3, [pc, #252]	; (8010a30 <xQueueGenericSend+0x1f8>)
 8010932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010936:	601a      	str	r2, [r3, #0]
 8010938:	f3bf 8f4f 	dsb	sy
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	e00a      	b.n	8010958 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	2b00      	cmp	r3, #0
 8010946:	d007      	beq.n	8010958 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010948:	4b39      	ldr	r3, [pc, #228]	; (8010a30 <xQueueGenericSend+0x1f8>)
 801094a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801094e:	601a      	str	r2, [r3, #0]
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010958:	f002 f914 	bl	8012b84 <vPortExitCritical>
				return pdPASS;
 801095c:	2301      	movs	r3, #1
 801095e:	e063      	b.n	8010a28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d103      	bne.n	801096e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010966:	f002 f90d 	bl	8012b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801096a:	2300      	movs	r3, #0
 801096c:	e05c      	b.n	8010a28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010970:	2b00      	cmp	r3, #0
 8010972:	d106      	bne.n	8010982 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010974:	f107 0314 	add.w	r3, r7, #20
 8010978:	4618      	mov	r0, r3
 801097a:	f001 fa19 	bl	8011db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801097e:	2301      	movs	r3, #1
 8010980:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010982:	f002 f8ff 	bl	8012b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010986:	f000 ff73 	bl	8011870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801098a:	f002 f8cb 	bl	8012b24 <vPortEnterCritical>
 801098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010994:	b25b      	sxtb	r3, r3
 8010996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801099a:	d103      	bne.n	80109a4 <xQueueGenericSend+0x16c>
 801099c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099e:	2200      	movs	r2, #0
 80109a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109aa:	b25b      	sxtb	r3, r3
 80109ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109b0:	d103      	bne.n	80109ba <xQueueGenericSend+0x182>
 80109b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109ba:	f002 f8e3 	bl	8012b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80109be:	1d3a      	adds	r2, r7, #4
 80109c0:	f107 0314 	add.w	r3, r7, #20
 80109c4:	4611      	mov	r1, r2
 80109c6:	4618      	mov	r0, r3
 80109c8:	f001 fa08 	bl	8011ddc <xTaskCheckForTimeOut>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d124      	bne.n	8010a1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80109d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109d4:	f000 fbd1 	bl	801117a <prvIsQueueFull>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d018      	beq.n	8010a10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	3310      	adds	r3, #16
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	4611      	mov	r1, r2
 80109e6:	4618      	mov	r0, r3
 80109e8:	f001 f92e 	bl	8011c48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80109ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109ee:	f000 fb5c 	bl	80110aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80109f2:	f000 ff4b 	bl	801188c <xTaskResumeAll>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f47f af7c 	bne.w	80108f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80109fe:	4b0c      	ldr	r3, [pc, #48]	; (8010a30 <xQueueGenericSend+0x1f8>)
 8010a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a04:	601a      	str	r2, [r3, #0]
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	f3bf 8f6f 	isb	sy
 8010a0e:	e772      	b.n	80108f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a12:	f000 fb4a 	bl	80110aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a16:	f000 ff39 	bl	801188c <xTaskResumeAll>
 8010a1a:	e76c      	b.n	80108f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a1e:	f000 fb44 	bl	80110aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a22:	f000 ff33 	bl	801188c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010a26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3738      	adds	r7, #56	; 0x38
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	e000ed04 	.word	0xe000ed04

08010a34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b090      	sub	sp, #64	; 0x40
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
 8010a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d10a      	bne.n	8010a62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a50:	f383 8811 	msr	BASEPRI, r3
 8010a54:	f3bf 8f6f 	isb	sy
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010a5e:	bf00      	nop
 8010a60:	e7fe      	b.n	8010a60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d103      	bne.n	8010a70 <xQueueGenericSendFromISR+0x3c>
 8010a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d101      	bne.n	8010a74 <xQueueGenericSendFromISR+0x40>
 8010a70:	2301      	movs	r3, #1
 8010a72:	e000      	b.n	8010a76 <xQueueGenericSendFromISR+0x42>
 8010a74:	2300      	movs	r3, #0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10a      	bne.n	8010a90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010a8c:	bf00      	nop
 8010a8e:	e7fe      	b.n	8010a8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d103      	bne.n	8010a9e <xQueueGenericSendFromISR+0x6a>
 8010a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d101      	bne.n	8010aa2 <xQueueGenericSendFromISR+0x6e>
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e000      	b.n	8010aa4 <xQueueGenericSendFromISR+0x70>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10a      	bne.n	8010abe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aac:	f383 8811 	msr	BASEPRI, r3
 8010ab0:	f3bf 8f6f 	isb	sy
 8010ab4:	f3bf 8f4f 	dsb	sy
 8010ab8:	623b      	str	r3, [r7, #32]
}
 8010aba:	bf00      	nop
 8010abc:	e7fe      	b.n	8010abc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010abe:	f002 f913 	bl	8012ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8010ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aca:	f383 8811 	msr	BASEPRI, r3
 8010ace:	f3bf 8f6f 	isb	sy
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	61fa      	str	r2, [r7, #28]
 8010ad8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ada:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010adc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d302      	bcc.n	8010af0 <xQueueGenericSendFromISR+0xbc>
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	d12f      	bne.n	8010b50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010afe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b00:	683a      	ldr	r2, [r7, #0]
 8010b02:	68b9      	ldr	r1, [r7, #8]
 8010b04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b06:	f000 fa40 	bl	8010f8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010b0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b12:	d112      	bne.n	8010b3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d016      	beq.n	8010b4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1e:	3324      	adds	r3, #36	; 0x24
 8010b20:	4618      	mov	r0, r3
 8010b22:	f001 f8e1 	bl	8011ce8 <xTaskRemoveFromEventList>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d00e      	beq.n	8010b4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00b      	beq.n	8010b4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2201      	movs	r2, #1
 8010b36:	601a      	str	r2, [r3, #0]
 8010b38:	e007      	b.n	8010b4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010b3e:	3301      	adds	r3, #1
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	b25a      	sxtb	r2, r3
 8010b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010b4e:	e001      	b.n	8010b54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010b50:	2300      	movs	r3, #0
 8010b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010b5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3740      	adds	r7, #64	; 0x40
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b08e      	sub	sp, #56	; 0x38
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
 8010b72:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d10a      	bne.n	8010b94 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	623b      	str	r3, [r7, #32]
}
 8010b90:	bf00      	nop
 8010b92:	e7fe      	b.n	8010b92 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00a      	beq.n	8010bb2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba0:	f383 8811 	msr	BASEPRI, r3
 8010ba4:	f3bf 8f6f 	isb	sy
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	61fb      	str	r3, [r7, #28]
}
 8010bae:	bf00      	nop
 8010bb0:	e7fe      	b.n	8010bb0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d103      	bne.n	8010bc2 <xQueueGiveFromISR+0x58>
 8010bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bbc:	689b      	ldr	r3, [r3, #8]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d101      	bne.n	8010bc6 <xQueueGiveFromISR+0x5c>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e000      	b.n	8010bc8 <xQueueGiveFromISR+0x5e>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d10a      	bne.n	8010be2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd0:	f383 8811 	msr	BASEPRI, r3
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	f3bf 8f4f 	dsb	sy
 8010bdc:	61bb      	str	r3, [r7, #24]
}
 8010bde:	bf00      	nop
 8010be0:	e7fe      	b.n	8010be0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010be2:	f002 f881 	bl	8012ce8 <vPortValidateInterruptPriority>
	__asm volatile
 8010be6:	f3ef 8211 	mrs	r2, BASEPRI
 8010bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bee:	f383 8811 	msr	BASEPRI, r3
 8010bf2:	f3bf 8f6f 	isb	sy
 8010bf6:	f3bf 8f4f 	dsb	sy
 8010bfa:	617a      	str	r2, [r7, #20]
 8010bfc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010bfe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d22b      	bcs.n	8010c6a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1e:	1c5a      	adds	r2, r3, #1
 8010c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c22:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010c24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c2c:	d112      	bne.n	8010c54 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d016      	beq.n	8010c64 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c38:	3324      	adds	r3, #36	; 0x24
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f001 f854 	bl	8011ce8 <xTaskRemoveFromEventList>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d00e      	beq.n	8010c64 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d00b      	beq.n	8010c64 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	2201      	movs	r2, #1
 8010c50:	601a      	str	r2, [r3, #0]
 8010c52:	e007      	b.n	8010c64 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c58:	3301      	adds	r3, #1
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	b25a      	sxtb	r2, r3
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c64:	2301      	movs	r3, #1
 8010c66:	637b      	str	r3, [r7, #52]	; 0x34
 8010c68:	e001      	b.n	8010c6e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8010c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f383 8811 	msr	BASEPRI, r3
}
 8010c78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3738      	adds	r7, #56	; 0x38
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b08c      	sub	sp, #48	; 0x30
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010c90:	2300      	movs	r3, #0
 8010c92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d10a      	bne.n	8010cb4 <xQueueReceive+0x30>
	__asm volatile
 8010c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca2:	f383 8811 	msr	BASEPRI, r3
 8010ca6:	f3bf 8f6f 	isb	sy
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	623b      	str	r3, [r7, #32]
}
 8010cb0:	bf00      	nop
 8010cb2:	e7fe      	b.n	8010cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d103      	bne.n	8010cc2 <xQueueReceive+0x3e>
 8010cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d101      	bne.n	8010cc6 <xQueueReceive+0x42>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e000      	b.n	8010cc8 <xQueueReceive+0x44>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d10a      	bne.n	8010ce2 <xQueueReceive+0x5e>
	__asm volatile
 8010ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd0:	f383 8811 	msr	BASEPRI, r3
 8010cd4:	f3bf 8f6f 	isb	sy
 8010cd8:	f3bf 8f4f 	dsb	sy
 8010cdc:	61fb      	str	r3, [r7, #28]
}
 8010cde:	bf00      	nop
 8010ce0:	e7fe      	b.n	8010ce0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ce2:	f001 f9c3 	bl	801206c <xTaskGetSchedulerState>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d102      	bne.n	8010cf2 <xQueueReceive+0x6e>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d101      	bne.n	8010cf6 <xQueueReceive+0x72>
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e000      	b.n	8010cf8 <xQueueReceive+0x74>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10a      	bne.n	8010d12 <xQueueReceive+0x8e>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	61bb      	str	r3, [r7, #24]
}
 8010d0e:	bf00      	nop
 8010d10:	e7fe      	b.n	8010d10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d12:	f001 ff07 	bl	8012b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d01f      	beq.n	8010d62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d22:	68b9      	ldr	r1, [r7, #8]
 8010d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d26:	f000 f99a 	bl	801105e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2c:	1e5a      	subs	r2, r3, #1
 8010d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d34:	691b      	ldr	r3, [r3, #16]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00f      	beq.n	8010d5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	3310      	adds	r3, #16
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f000 ffd2 	bl	8011ce8 <xTaskRemoveFromEventList>
 8010d44:	4603      	mov	r3, r0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d007      	beq.n	8010d5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d4a:	4b3d      	ldr	r3, [pc, #244]	; (8010e40 <xQueueReceive+0x1bc>)
 8010d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d50:	601a      	str	r2, [r3, #0]
 8010d52:	f3bf 8f4f 	dsb	sy
 8010d56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d5a:	f001 ff13 	bl	8012b84 <vPortExitCritical>
				return pdPASS;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e069      	b.n	8010e36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d103      	bne.n	8010d70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d68:	f001 ff0c 	bl	8012b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	e062      	b.n	8010e36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d106      	bne.n	8010d84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d76:	f107 0310 	add.w	r3, r7, #16
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f001 f818 	bl	8011db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d80:	2301      	movs	r3, #1
 8010d82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d84:	f001 fefe 	bl	8012b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d88:	f000 fd72 	bl	8011870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d8c:	f001 feca 	bl	8012b24 <vPortEnterCritical>
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d96:	b25b      	sxtb	r3, r3
 8010d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d9c:	d103      	bne.n	8010da6 <xQueueReceive+0x122>
 8010d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da0:	2200      	movs	r2, #0
 8010da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010dac:	b25b      	sxtb	r3, r3
 8010dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010db2:	d103      	bne.n	8010dbc <xQueueReceive+0x138>
 8010db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db6:	2200      	movs	r2, #0
 8010db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dbc:	f001 fee2 	bl	8012b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010dc0:	1d3a      	adds	r2, r7, #4
 8010dc2:	f107 0310 	add.w	r3, r7, #16
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f001 f807 	bl	8011ddc <xTaskCheckForTimeOut>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d123      	bne.n	8010e1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dd6:	f000 f9ba 	bl	801114e <prvIsQueueEmpty>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d017      	beq.n	8010e10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de2:	3324      	adds	r3, #36	; 0x24
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	4611      	mov	r1, r2
 8010de8:	4618      	mov	r0, r3
 8010dea:	f000 ff2d 	bl	8011c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010df0:	f000 f95b 	bl	80110aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010df4:	f000 fd4a 	bl	801188c <xTaskResumeAll>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d189      	bne.n	8010d12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010dfe:	4b10      	ldr	r3, [pc, #64]	; (8010e40 <xQueueReceive+0x1bc>)
 8010e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e04:	601a      	str	r2, [r3, #0]
 8010e06:	f3bf 8f4f 	dsb	sy
 8010e0a:	f3bf 8f6f 	isb	sy
 8010e0e:	e780      	b.n	8010d12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e12:	f000 f94a 	bl	80110aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e16:	f000 fd39 	bl	801188c <xTaskResumeAll>
 8010e1a:	e77a      	b.n	8010d12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e1e:	f000 f944 	bl	80110aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e22:	f000 fd33 	bl	801188c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e28:	f000 f991 	bl	801114e <prvIsQueueEmpty>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f43f af6f 	beq.w	8010d12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3730      	adds	r7, #48	; 0x30
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	e000ed04 	.word	0xe000ed04

08010e44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b08e      	sub	sp, #56	; 0x38
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	60b9      	str	r1, [r7, #8]
 8010e4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d10a      	bne.n	8010e70 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5e:	f383 8811 	msr	BASEPRI, r3
 8010e62:	f3bf 8f6f 	isb	sy
 8010e66:	f3bf 8f4f 	dsb	sy
 8010e6a:	623b      	str	r3, [r7, #32]
}
 8010e6c:	bf00      	nop
 8010e6e:	e7fe      	b.n	8010e6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d103      	bne.n	8010e7e <xQueueReceiveFromISR+0x3a>
 8010e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d101      	bne.n	8010e82 <xQueueReceiveFromISR+0x3e>
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e000      	b.n	8010e84 <xQueueReceiveFromISR+0x40>
 8010e82:	2300      	movs	r3, #0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d10a      	bne.n	8010e9e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e8c:	f383 8811 	msr	BASEPRI, r3
 8010e90:	f3bf 8f6f 	isb	sy
 8010e94:	f3bf 8f4f 	dsb	sy
 8010e98:	61fb      	str	r3, [r7, #28]
}
 8010e9a:	bf00      	nop
 8010e9c:	e7fe      	b.n	8010e9c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e9e:	f001 ff23 	bl	8012ce8 <vPortValidateInterruptPriority>
	__asm volatile
 8010ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8010ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	61ba      	str	r2, [r7, #24]
 8010eb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010eba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ec2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d02f      	beq.n	8010f2a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ed4:	68b9      	ldr	r1, [r7, #8]
 8010ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ed8:	f000 f8c1 	bl	801105e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ede:	1e5a      	subs	r2, r3, #1
 8010ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010ee4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010eec:	d112      	bne.n	8010f14 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d016      	beq.n	8010f24 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef8:	3310      	adds	r3, #16
 8010efa:	4618      	mov	r0, r3
 8010efc:	f000 fef4 	bl	8011ce8 <xTaskRemoveFromEventList>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00e      	beq.n	8010f24 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00b      	beq.n	8010f24 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	e007      	b.n	8010f24 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f18:	3301      	adds	r3, #1
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	b25a      	sxtb	r2, r3
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010f24:	2301      	movs	r3, #1
 8010f26:	637b      	str	r3, [r7, #52]	; 0x34
 8010f28:	e001      	b.n	8010f2e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8010f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	f383 8811 	msr	BASEPRI, r3
}
 8010f38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3738      	adds	r7, #56	; 0x38
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}

08010f44 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d10a      	bne.n	8010f6c <vQueueDelete+0x28>
	__asm volatile
 8010f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5a:	f383 8811 	msr	BASEPRI, r3
 8010f5e:	f3bf 8f6f 	isb	sy
 8010f62:	f3bf 8f4f 	dsb	sy
 8010f66:	60bb      	str	r3, [r7, #8]
}
 8010f68:	bf00      	nop
 8010f6a:	e7fe      	b.n	8010f6a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f000 f947 	bl	8011200 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d102      	bne.n	8010f82 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f001 ffbf 	bl	8012f00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010f82:	bf00      	nop
 8010f84:	3710      	adds	r7, #16
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b086      	sub	sp, #24
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	60f8      	str	r0, [r7, #12]
 8010f92:	60b9      	str	r1, [r7, #8]
 8010f94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010f96:	2300      	movs	r3, #0
 8010f98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d10d      	bne.n	8010fc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d14d      	bne.n	801104c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	689b      	ldr	r3, [r3, #8]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f001 f877 	bl	80120a8 <xTaskPriorityDisinherit>
 8010fba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	609a      	str	r2, [r3, #8]
 8010fc2:	e043      	b.n	801104c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d119      	bne.n	8010ffe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	6858      	ldr	r0, [r3, #4]
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	68b9      	ldr	r1, [r7, #8]
 8010fd6:	f003 f801 	bl	8013fdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	685a      	ldr	r2, [r3, #4]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe2:	441a      	add	r2, r3
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	685a      	ldr	r2, [r3, #4]
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	689b      	ldr	r3, [r3, #8]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d32b      	bcc.n	801104c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	605a      	str	r2, [r3, #4]
 8010ffc:	e026      	b.n	801104c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	68d8      	ldr	r0, [r3, #12]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011006:	461a      	mov	r2, r3
 8011008:	68b9      	ldr	r1, [r7, #8]
 801100a:	f002 ffe7 	bl	8013fdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	68da      	ldr	r2, [r3, #12]
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011016:	425b      	negs	r3, r3
 8011018:	441a      	add	r2, r3
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	68da      	ldr	r2, [r3, #12]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	429a      	cmp	r2, r3
 8011028:	d207      	bcs.n	801103a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	689a      	ldr	r2, [r3, #8]
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011032:	425b      	negs	r3, r3
 8011034:	441a      	add	r2, r3
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2b02      	cmp	r3, #2
 801103e:	d105      	bne.n	801104c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d002      	beq.n	801104c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	3b01      	subs	r3, #1
 801104a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	1c5a      	adds	r2, r3, #1
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011054:	697b      	ldr	r3, [r7, #20]
}
 8011056:	4618      	mov	r0, r3
 8011058:	3718      	adds	r7, #24
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}

0801105e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801105e:	b580      	push	{r7, lr}
 8011060:	b082      	sub	sp, #8
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
 8011066:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801106c:	2b00      	cmp	r3, #0
 801106e:	d018      	beq.n	80110a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	68da      	ldr	r2, [r3, #12]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011078:	441a      	add	r2, r3
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	68da      	ldr	r2, [r3, #12]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	689b      	ldr	r3, [r3, #8]
 8011086:	429a      	cmp	r2, r3
 8011088:	d303      	bcc.n	8011092 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	68d9      	ldr	r1, [r3, #12]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801109a:	461a      	mov	r2, r3
 801109c:	6838      	ldr	r0, [r7, #0]
 801109e:	f002 ff9d 	bl	8013fdc <memcpy>
	}
}
 80110a2:	bf00      	nop
 80110a4:	3708      	adds	r7, #8
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}

080110aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b084      	sub	sp, #16
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80110b2:	f001 fd37 	bl	8012b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110be:	e011      	b.n	80110e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d012      	beq.n	80110ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	3324      	adds	r3, #36	; 0x24
 80110cc:	4618      	mov	r0, r3
 80110ce:	f000 fe0b 	bl	8011ce8 <xTaskRemoveFromEventList>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d001      	beq.n	80110dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80110d8:	f000 fee2 	bl	8011ea0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80110dc:	7bfb      	ldrb	r3, [r7, #15]
 80110de:	3b01      	subs	r3, #1
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	dce9      	bgt.n	80110c0 <prvUnlockQueue+0x16>
 80110ec:	e000      	b.n	80110f0 <prvUnlockQueue+0x46>
					break;
 80110ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	22ff      	movs	r2, #255	; 0xff
 80110f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80110f8:	f001 fd44 	bl	8012b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80110fc:	f001 fd12 	bl	8012b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011106:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011108:	e011      	b.n	801112e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d012      	beq.n	8011138 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	3310      	adds	r3, #16
 8011116:	4618      	mov	r0, r3
 8011118:	f000 fde6 	bl	8011ce8 <xTaskRemoveFromEventList>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d001      	beq.n	8011126 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011122:	f000 febd 	bl	8011ea0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011126:	7bbb      	ldrb	r3, [r7, #14]
 8011128:	3b01      	subs	r3, #1
 801112a:	b2db      	uxtb	r3, r3
 801112c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801112e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011132:	2b00      	cmp	r3, #0
 8011134:	dce9      	bgt.n	801110a <prvUnlockQueue+0x60>
 8011136:	e000      	b.n	801113a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011138:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	22ff      	movs	r2, #255	; 0xff
 801113e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011142:	f001 fd1f 	bl	8012b84 <vPortExitCritical>
}
 8011146:	bf00      	nop
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b084      	sub	sp, #16
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011156:	f001 fce5 	bl	8012b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801115e:	2b00      	cmp	r3, #0
 8011160:	d102      	bne.n	8011168 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011162:	2301      	movs	r3, #1
 8011164:	60fb      	str	r3, [r7, #12]
 8011166:	e001      	b.n	801116c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011168:	2300      	movs	r3, #0
 801116a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801116c:	f001 fd0a 	bl	8012b84 <vPortExitCritical>

	return xReturn;
 8011170:	68fb      	ldr	r3, [r7, #12]
}
 8011172:	4618      	mov	r0, r3
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b084      	sub	sp, #16
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011182:	f001 fccf 	bl	8012b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801118e:	429a      	cmp	r2, r3
 8011190:	d102      	bne.n	8011198 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011192:	2301      	movs	r3, #1
 8011194:	60fb      	str	r3, [r7, #12]
 8011196:	e001      	b.n	801119c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011198:	2300      	movs	r3, #0
 801119a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801119c:	f001 fcf2 	bl	8012b84 <vPortExitCritical>

	return xReturn;
 80111a0:	68fb      	ldr	r3, [r7, #12]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
	...

080111ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80111b6:	2300      	movs	r3, #0
 80111b8:	60fb      	str	r3, [r7, #12]
 80111ba:	e014      	b.n	80111e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80111bc:	4a0f      	ldr	r2, [pc, #60]	; (80111fc <vQueueAddToRegistry+0x50>)
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d10b      	bne.n	80111e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80111c8:	490c      	ldr	r1, [pc, #48]	; (80111fc <vQueueAddToRegistry+0x50>)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	683a      	ldr	r2, [r7, #0]
 80111ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80111d2:	4a0a      	ldr	r2, [pc, #40]	; (80111fc <vQueueAddToRegistry+0x50>)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	4413      	add	r3, r2
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80111de:	e006      	b.n	80111ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	3301      	adds	r3, #1
 80111e4:	60fb      	str	r3, [r7, #12]
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2b07      	cmp	r3, #7
 80111ea:	d9e7      	bls.n	80111bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80111ec:	bf00      	nop
 80111ee:	bf00      	nop
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	20001080 	.word	0x20001080

08011200 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011200:	b480      	push	{r7}
 8011202:	b085      	sub	sp, #20
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011208:	2300      	movs	r3, #0
 801120a:	60fb      	str	r3, [r7, #12]
 801120c:	e016      	b.n	801123c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801120e:	4a10      	ldr	r2, [pc, #64]	; (8011250 <vQueueUnregisterQueue+0x50>)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	00db      	lsls	r3, r3, #3
 8011214:	4413      	add	r3, r2
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	429a      	cmp	r2, r3
 801121c:	d10b      	bne.n	8011236 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801121e:	4a0c      	ldr	r2, [pc, #48]	; (8011250 <vQueueUnregisterQueue+0x50>)
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2100      	movs	r1, #0
 8011224:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011228:	4a09      	ldr	r2, [pc, #36]	; (8011250 <vQueueUnregisterQueue+0x50>)
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	00db      	lsls	r3, r3, #3
 801122e:	4413      	add	r3, r2
 8011230:	2200      	movs	r2, #0
 8011232:	605a      	str	r2, [r3, #4]
				break;
 8011234:	e006      	b.n	8011244 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	3301      	adds	r3, #1
 801123a:	60fb      	str	r3, [r7, #12]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2b07      	cmp	r3, #7
 8011240:	d9e5      	bls.n	801120e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011242:	bf00      	nop
 8011244:	bf00      	nop
 8011246:	3714      	adds	r7, #20
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	20001080 	.word	0x20001080

08011254 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011254:	b580      	push	{r7, lr}
 8011256:	b086      	sub	sp, #24
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011264:	f001 fc5e 	bl	8012b24 <vPortEnterCritical>
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801126e:	b25b      	sxtb	r3, r3
 8011270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011274:	d103      	bne.n	801127e <vQueueWaitForMessageRestricted+0x2a>
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	2200      	movs	r2, #0
 801127a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011284:	b25b      	sxtb	r3, r3
 8011286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801128a:	d103      	bne.n	8011294 <vQueueWaitForMessageRestricted+0x40>
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	2200      	movs	r2, #0
 8011290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011294:	f001 fc76 	bl	8012b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801129c:	2b00      	cmp	r3, #0
 801129e:	d106      	bne.n	80112ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	3324      	adds	r3, #36	; 0x24
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	68b9      	ldr	r1, [r7, #8]
 80112a8:	4618      	mov	r0, r3
 80112aa:	f000 fcf1 	bl	8011c90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80112ae:	6978      	ldr	r0, [r7, #20]
 80112b0:	f7ff fefb 	bl	80110aa <prvUnlockQueue>
	}
 80112b4:	bf00      	nop
 80112b6:	3718      	adds	r7, #24
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b08e      	sub	sp, #56	; 0x38
 80112c0:	af04      	add	r7, sp, #16
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80112ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d10a      	bne.n	80112e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80112d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d4:	f383 8811 	msr	BASEPRI, r3
 80112d8:	f3bf 8f6f 	isb	sy
 80112dc:	f3bf 8f4f 	dsb	sy
 80112e0:	623b      	str	r3, [r7, #32]
}
 80112e2:	bf00      	nop
 80112e4:	e7fe      	b.n	80112e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80112e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d10a      	bne.n	8011302 <xTaskCreateStatic+0x46>
	__asm volatile
 80112ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f0:	f383 8811 	msr	BASEPRI, r3
 80112f4:	f3bf 8f6f 	isb	sy
 80112f8:	f3bf 8f4f 	dsb	sy
 80112fc:	61fb      	str	r3, [r7, #28]
}
 80112fe:	bf00      	nop
 8011300:	e7fe      	b.n	8011300 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011302:	23bc      	movs	r3, #188	; 0xbc
 8011304:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	2bbc      	cmp	r3, #188	; 0xbc
 801130a:	d00a      	beq.n	8011322 <xTaskCreateStatic+0x66>
	__asm volatile
 801130c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011310:	f383 8811 	msr	BASEPRI, r3
 8011314:	f3bf 8f6f 	isb	sy
 8011318:	f3bf 8f4f 	dsb	sy
 801131c:	61bb      	str	r3, [r7, #24]
}
 801131e:	bf00      	nop
 8011320:	e7fe      	b.n	8011320 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011322:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011326:	2b00      	cmp	r3, #0
 8011328:	d01e      	beq.n	8011368 <xTaskCreateStatic+0xac>
 801132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801132c:	2b00      	cmp	r3, #0
 801132e:	d01b      	beq.n	8011368 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011332:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011338:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133c:	2202      	movs	r2, #2
 801133e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011342:	2300      	movs	r3, #0
 8011344:	9303      	str	r3, [sp, #12]
 8011346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011348:	9302      	str	r3, [sp, #8]
 801134a:	f107 0314 	add.w	r3, r7, #20
 801134e:	9301      	str	r3, [sp, #4]
 8011350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	68b9      	ldr	r1, [r7, #8]
 801135a:	68f8      	ldr	r0, [r7, #12]
 801135c:	f000 f850 	bl	8011400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011362:	f000 f8f3 	bl	801154c <prvAddNewTaskToReadyList>
 8011366:	e001      	b.n	801136c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011368:	2300      	movs	r3, #0
 801136a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801136c:	697b      	ldr	r3, [r7, #20]
	}
 801136e:	4618      	mov	r0, r3
 8011370:	3728      	adds	r7, #40	; 0x28
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011376:	b580      	push	{r7, lr}
 8011378:	b08c      	sub	sp, #48	; 0x30
 801137a:	af04      	add	r7, sp, #16
 801137c:	60f8      	str	r0, [r7, #12]
 801137e:	60b9      	str	r1, [r7, #8]
 8011380:	603b      	str	r3, [r7, #0]
 8011382:	4613      	mov	r3, r2
 8011384:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011386:	88fb      	ldrh	r3, [r7, #6]
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	4618      	mov	r0, r3
 801138c:	f001 fcec 	bl	8012d68 <pvPortMalloc>
 8011390:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00e      	beq.n	80113b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011398:	20bc      	movs	r0, #188	; 0xbc
 801139a:	f001 fce5 	bl	8012d68 <pvPortMalloc>
 801139e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d003      	beq.n	80113ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	697a      	ldr	r2, [r7, #20]
 80113aa:	631a      	str	r2, [r3, #48]	; 0x30
 80113ac:	e005      	b.n	80113ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80113ae:	6978      	ldr	r0, [r7, #20]
 80113b0:	f001 fda6 	bl	8012f00 <vPortFree>
 80113b4:	e001      	b.n	80113ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80113b6:	2300      	movs	r3, #0
 80113b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80113ba:	69fb      	ldr	r3, [r7, #28]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d017      	beq.n	80113f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80113c8:	88fa      	ldrh	r2, [r7, #6]
 80113ca:	2300      	movs	r3, #0
 80113cc:	9303      	str	r3, [sp, #12]
 80113ce:	69fb      	ldr	r3, [r7, #28]
 80113d0:	9302      	str	r3, [sp, #8]
 80113d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d4:	9301      	str	r3, [sp, #4]
 80113d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	68b9      	ldr	r1, [r7, #8]
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f000 f80e 	bl	8011400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113e4:	69f8      	ldr	r0, [r7, #28]
 80113e6:	f000 f8b1 	bl	801154c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80113ea:	2301      	movs	r3, #1
 80113ec:	61bb      	str	r3, [r7, #24]
 80113ee:	e002      	b.n	80113f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80113f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80113f6:	69bb      	ldr	r3, [r7, #24]
	}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3720      	adds	r7, #32
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b088      	sub	sp, #32
 8011404:	af00      	add	r7, sp, #0
 8011406:	60f8      	str	r0, [r7, #12]
 8011408:	60b9      	str	r1, [r7, #8]
 801140a:	607a      	str	r2, [r7, #4]
 801140c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011410:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	461a      	mov	r2, r3
 8011418:	21a5      	movs	r1, #165	; 0xa5
 801141a:	f002 fded 	bl	8013ff8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011428:	3b01      	subs	r3, #1
 801142a:	009b      	lsls	r3, r3, #2
 801142c:	4413      	add	r3, r2
 801142e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	f023 0307 	bic.w	r3, r3, #7
 8011436:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	f003 0307 	and.w	r3, r3, #7
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00a      	beq.n	8011458 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011446:	f383 8811 	msr	BASEPRI, r3
 801144a:	f3bf 8f6f 	isb	sy
 801144e:	f3bf 8f4f 	dsb	sy
 8011452:	617b      	str	r3, [r7, #20]
}
 8011454:	bf00      	nop
 8011456:	e7fe      	b.n	8011456 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d01f      	beq.n	801149e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801145e:	2300      	movs	r3, #0
 8011460:	61fb      	str	r3, [r7, #28]
 8011462:	e012      	b.n	801148a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011464:	68ba      	ldr	r2, [r7, #8]
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	4413      	add	r3, r2
 801146a:	7819      	ldrb	r1, [r3, #0]
 801146c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801146e:	69fb      	ldr	r3, [r7, #28]
 8011470:	4413      	add	r3, r2
 8011472:	3334      	adds	r3, #52	; 0x34
 8011474:	460a      	mov	r2, r1
 8011476:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011478:	68ba      	ldr	r2, [r7, #8]
 801147a:	69fb      	ldr	r3, [r7, #28]
 801147c:	4413      	add	r3, r2
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d006      	beq.n	8011492 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	3301      	adds	r3, #1
 8011488:	61fb      	str	r3, [r7, #28]
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	2b0f      	cmp	r3, #15
 801148e:	d9e9      	bls.n	8011464 <prvInitialiseNewTask+0x64>
 8011490:	e000      	b.n	8011494 <prvInitialiseNewTask+0x94>
			{
				break;
 8011492:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011496:	2200      	movs	r2, #0
 8011498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801149c:	e003      	b.n	80114a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a0:	2200      	movs	r2, #0
 80114a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80114a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a8:	2b37      	cmp	r3, #55	; 0x37
 80114aa:	d901      	bls.n	80114b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80114ac:	2337      	movs	r3, #55	; 0x37
 80114ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80114b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80114b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80114bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114be:	2200      	movs	r2, #0
 80114c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80114c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c4:	3304      	adds	r3, #4
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fe ff7a 	bl	80103c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80114cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ce:	3318      	adds	r3, #24
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7fe ff75 	bl	80103c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80114d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80114e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80114e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80114ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ee:	2200      	movs	r2, #0
 80114f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80114f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f6:	2200      	movs	r2, #0
 80114f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80114fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fe:	3354      	adds	r3, #84	; 0x54
 8011500:	2260      	movs	r2, #96	; 0x60
 8011502:	2100      	movs	r1, #0
 8011504:	4618      	mov	r0, r3
 8011506:	f002 fd77 	bl	8013ff8 <memset>
 801150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801150c:	4a0c      	ldr	r2, [pc, #48]	; (8011540 <prvInitialiseNewTask+0x140>)
 801150e:	659a      	str	r2, [r3, #88]	; 0x58
 8011510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011512:	4a0c      	ldr	r2, [pc, #48]	; (8011544 <prvInitialiseNewTask+0x144>)
 8011514:	65da      	str	r2, [r3, #92]	; 0x5c
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	4a0b      	ldr	r2, [pc, #44]	; (8011548 <prvInitialiseNewTask+0x148>)
 801151a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801151c:	683a      	ldr	r2, [r7, #0]
 801151e:	68f9      	ldr	r1, [r7, #12]
 8011520:	69b8      	ldr	r0, [r7, #24]
 8011522:	f001 f9d1 	bl	80128c8 <pxPortInitialiseStack>
 8011526:	4602      	mov	r2, r0
 8011528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152e:	2b00      	cmp	r3, #0
 8011530:	d002      	beq.n	8011538 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011536:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011538:	bf00      	nop
 801153a:	3720      	adds	r7, #32
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	080144c0 	.word	0x080144c0
 8011544:	080144e0 	.word	0x080144e0
 8011548:	080144a0 	.word	0x080144a0

0801154c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011554:	f001 fae6 	bl	8012b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011558:	4b2d      	ldr	r3, [pc, #180]	; (8011610 <prvAddNewTaskToReadyList+0xc4>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	3301      	adds	r3, #1
 801155e:	4a2c      	ldr	r2, [pc, #176]	; (8011610 <prvAddNewTaskToReadyList+0xc4>)
 8011560:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011562:	4b2c      	ldr	r3, [pc, #176]	; (8011614 <prvAddNewTaskToReadyList+0xc8>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d109      	bne.n	801157e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801156a:	4a2a      	ldr	r2, [pc, #168]	; (8011614 <prvAddNewTaskToReadyList+0xc8>)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011570:	4b27      	ldr	r3, [pc, #156]	; (8011610 <prvAddNewTaskToReadyList+0xc4>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	2b01      	cmp	r3, #1
 8011576:	d110      	bne.n	801159a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011578:	f000 fcb6 	bl	8011ee8 <prvInitialiseTaskLists>
 801157c:	e00d      	b.n	801159a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801157e:	4b26      	ldr	r3, [pc, #152]	; (8011618 <prvAddNewTaskToReadyList+0xcc>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d109      	bne.n	801159a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011586:	4b23      	ldr	r3, [pc, #140]	; (8011614 <prvAddNewTaskToReadyList+0xc8>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011590:	429a      	cmp	r2, r3
 8011592:	d802      	bhi.n	801159a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011594:	4a1f      	ldr	r2, [pc, #124]	; (8011614 <prvAddNewTaskToReadyList+0xc8>)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801159a:	4b20      	ldr	r3, [pc, #128]	; (801161c <prvAddNewTaskToReadyList+0xd0>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	3301      	adds	r3, #1
 80115a0:	4a1e      	ldr	r2, [pc, #120]	; (801161c <prvAddNewTaskToReadyList+0xd0>)
 80115a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80115a4:	4b1d      	ldr	r3, [pc, #116]	; (801161c <prvAddNewTaskToReadyList+0xd0>)
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b0:	4b1b      	ldr	r3, [pc, #108]	; (8011620 <prvAddNewTaskToReadyList+0xd4>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d903      	bls.n	80115c0 <prvAddNewTaskToReadyList+0x74>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115bc:	4a18      	ldr	r2, [pc, #96]	; (8011620 <prvAddNewTaskToReadyList+0xd4>)
 80115be:	6013      	str	r3, [r2, #0]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c4:	4613      	mov	r3, r2
 80115c6:	009b      	lsls	r3, r3, #2
 80115c8:	4413      	add	r3, r2
 80115ca:	009b      	lsls	r3, r3, #2
 80115cc:	4a15      	ldr	r2, [pc, #84]	; (8011624 <prvAddNewTaskToReadyList+0xd8>)
 80115ce:	441a      	add	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	3304      	adds	r3, #4
 80115d4:	4619      	mov	r1, r3
 80115d6:	4610      	mov	r0, r2
 80115d8:	f7fe feff 	bl	80103da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80115dc:	f001 fad2 	bl	8012b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80115e0:	4b0d      	ldr	r3, [pc, #52]	; (8011618 <prvAddNewTaskToReadyList+0xcc>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d00e      	beq.n	8011606 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80115e8:	4b0a      	ldr	r3, [pc, #40]	; (8011614 <prvAddNewTaskToReadyList+0xc8>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d207      	bcs.n	8011606 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80115f6:	4b0c      	ldr	r3, [pc, #48]	; (8011628 <prvAddNewTaskToReadyList+0xdc>)
 80115f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	f3bf 8f4f 	dsb	sy
 8011602:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011606:	bf00      	nop
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	20001594 	.word	0x20001594
 8011614:	200010c0 	.word	0x200010c0
 8011618:	200015a0 	.word	0x200015a0
 801161c:	200015b0 	.word	0x200015b0
 8011620:	2000159c 	.word	0x2000159c
 8011624:	200010c4 	.word	0x200010c4
 8011628:	e000ed04 	.word	0xe000ed04

0801162c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801162c:	b580      	push	{r7, lr}
 801162e:	b08a      	sub	sp, #40	; 0x28
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8011636:	2300      	movs	r3, #0
 8011638:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d10a      	bne.n	8011656 <vTaskDelayUntil+0x2a>
	__asm volatile
 8011640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011644:	f383 8811 	msr	BASEPRI, r3
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	617b      	str	r3, [r7, #20]
}
 8011652:	bf00      	nop
 8011654:	e7fe      	b.n	8011654 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d10a      	bne.n	8011672 <vTaskDelayUntil+0x46>
	__asm volatile
 801165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011660:	f383 8811 	msr	BASEPRI, r3
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	f3bf 8f4f 	dsb	sy
 801166c:	613b      	str	r3, [r7, #16]
}
 801166e:	bf00      	nop
 8011670:	e7fe      	b.n	8011670 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8011672:	4b2a      	ldr	r3, [pc, #168]	; (801171c <vTaskDelayUntil+0xf0>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00a      	beq.n	8011690 <vTaskDelayUntil+0x64>
	__asm volatile
 801167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801167e:	f383 8811 	msr	BASEPRI, r3
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	f3bf 8f4f 	dsb	sy
 801168a:	60fb      	str	r3, [r7, #12]
}
 801168c:	bf00      	nop
 801168e:	e7fe      	b.n	801168e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8011690:	f000 f8ee 	bl	8011870 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011694:	4b22      	ldr	r3, [pc, #136]	; (8011720 <vTaskDelayUntil+0xf4>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	683a      	ldr	r2, [r7, #0]
 80116a0:	4413      	add	r3, r2
 80116a2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	6a3a      	ldr	r2, [r7, #32]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d20b      	bcs.n	80116c6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	69fa      	ldr	r2, [r7, #28]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d211      	bcs.n	80116dc <vTaskDelayUntil+0xb0>
 80116b8:	69fa      	ldr	r2, [r7, #28]
 80116ba:	6a3b      	ldr	r3, [r7, #32]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d90d      	bls.n	80116dc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80116c0:	2301      	movs	r3, #1
 80116c2:	627b      	str	r3, [r7, #36]	; 0x24
 80116c4:	e00a      	b.n	80116dc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	69fa      	ldr	r2, [r7, #28]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d303      	bcc.n	80116d8 <vTaskDelayUntil+0xac>
 80116d0:	69fa      	ldr	r2, [r7, #28]
 80116d2:	6a3b      	ldr	r3, [r7, #32]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d901      	bls.n	80116dc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80116d8:	2301      	movs	r3, #1
 80116da:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	69fa      	ldr	r2, [r7, #28]
 80116e0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d006      	beq.n	80116f6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80116e8:	69fa      	ldr	r2, [r7, #28]
 80116ea:	6a3b      	ldr	r3, [r7, #32]
 80116ec:	1ad3      	subs	r3, r2, r3
 80116ee:	2100      	movs	r1, #0
 80116f0:	4618      	mov	r0, r3
 80116f2:	f000 fd47 	bl	8012184 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80116f6:	f000 f8c9 	bl	801188c <xTaskResumeAll>
 80116fa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d107      	bne.n	8011712 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8011702:	4b08      	ldr	r3, [pc, #32]	; (8011724 <vTaskDelayUntil+0xf8>)
 8011704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011708:	601a      	str	r2, [r3, #0]
 801170a:	f3bf 8f4f 	dsb	sy
 801170e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011712:	bf00      	nop
 8011714:	3728      	adds	r7, #40	; 0x28
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	200015bc 	.word	0x200015bc
 8011720:	20001598 	.word	0x20001598
 8011724:	e000ed04 	.word	0xe000ed04

08011728 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011730:	2300      	movs	r3, #0
 8011732:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d017      	beq.n	801176a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801173a:	4b13      	ldr	r3, [pc, #76]	; (8011788 <vTaskDelay+0x60>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d00a      	beq.n	8011758 <vTaskDelay+0x30>
	__asm volatile
 8011742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011746:	f383 8811 	msr	BASEPRI, r3
 801174a:	f3bf 8f6f 	isb	sy
 801174e:	f3bf 8f4f 	dsb	sy
 8011752:	60bb      	str	r3, [r7, #8]
}
 8011754:	bf00      	nop
 8011756:	e7fe      	b.n	8011756 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011758:	f000 f88a 	bl	8011870 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801175c:	2100      	movs	r1, #0
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f000 fd10 	bl	8012184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011764:	f000 f892 	bl	801188c <xTaskResumeAll>
 8011768:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d107      	bne.n	8011780 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011770:	4b06      	ldr	r3, [pc, #24]	; (801178c <vTaskDelay+0x64>)
 8011772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011776:	601a      	str	r2, [r3, #0]
 8011778:	f3bf 8f4f 	dsb	sy
 801177c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011780:	bf00      	nop
 8011782:	3710      	adds	r7, #16
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}
 8011788:	200015bc 	.word	0x200015bc
 801178c:	e000ed04 	.word	0xe000ed04

08011790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b08a      	sub	sp, #40	; 0x28
 8011794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011796:	2300      	movs	r3, #0
 8011798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801179a:	2300      	movs	r3, #0
 801179c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801179e:	463a      	mov	r2, r7
 80117a0:	1d39      	adds	r1, r7, #4
 80117a2:	f107 0308 	add.w	r3, r7, #8
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fe fdb6 	bl	8010318 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80117ac:	6839      	ldr	r1, [r7, #0]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	9202      	str	r2, [sp, #8]
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	2300      	movs	r3, #0
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	2300      	movs	r3, #0
 80117bc:	460a      	mov	r2, r1
 80117be:	4924      	ldr	r1, [pc, #144]	; (8011850 <vTaskStartScheduler+0xc0>)
 80117c0:	4824      	ldr	r0, [pc, #144]	; (8011854 <vTaskStartScheduler+0xc4>)
 80117c2:	f7ff fd7b 	bl	80112bc <xTaskCreateStatic>
 80117c6:	4603      	mov	r3, r0
 80117c8:	4a23      	ldr	r2, [pc, #140]	; (8011858 <vTaskStartScheduler+0xc8>)
 80117ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80117cc:	4b22      	ldr	r3, [pc, #136]	; (8011858 <vTaskStartScheduler+0xc8>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80117d4:	2301      	movs	r3, #1
 80117d6:	617b      	str	r3, [r7, #20]
 80117d8:	e001      	b.n	80117de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80117da:	2300      	movs	r3, #0
 80117dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d102      	bne.n	80117ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80117e4:	f000 fd22 	bl	801222c <xTimerCreateTimerTask>
 80117e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d11b      	bne.n	8011828 <vTaskStartScheduler+0x98>
	__asm volatile
 80117f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f4:	f383 8811 	msr	BASEPRI, r3
 80117f8:	f3bf 8f6f 	isb	sy
 80117fc:	f3bf 8f4f 	dsb	sy
 8011800:	613b      	str	r3, [r7, #16]
}
 8011802:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011804:	4b15      	ldr	r3, [pc, #84]	; (801185c <vTaskStartScheduler+0xcc>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	3354      	adds	r3, #84	; 0x54
 801180a:	4a15      	ldr	r2, [pc, #84]	; (8011860 <vTaskStartScheduler+0xd0>)
 801180c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801180e:	4b15      	ldr	r3, [pc, #84]	; (8011864 <vTaskStartScheduler+0xd4>)
 8011810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011814:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011816:	4b14      	ldr	r3, [pc, #80]	; (8011868 <vTaskStartScheduler+0xd8>)
 8011818:	2201      	movs	r2, #1
 801181a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801181c:	4b13      	ldr	r3, [pc, #76]	; (801186c <vTaskStartScheduler+0xdc>)
 801181e:	2200      	movs	r2, #0
 8011820:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011822:	f001 f8dd 	bl	80129e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011826:	e00e      	b.n	8011846 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801182e:	d10a      	bne.n	8011846 <vTaskStartScheduler+0xb6>
	__asm volatile
 8011830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011834:	f383 8811 	msr	BASEPRI, r3
 8011838:	f3bf 8f6f 	isb	sy
 801183c:	f3bf 8f4f 	dsb	sy
 8011840:	60fb      	str	r3, [r7, #12]
}
 8011842:	bf00      	nop
 8011844:	e7fe      	b.n	8011844 <vTaskStartScheduler+0xb4>
}
 8011846:	bf00      	nop
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	08014280 	.word	0x08014280
 8011854:	08011eb9 	.word	0x08011eb9
 8011858:	200015b8 	.word	0x200015b8
 801185c:	200010c0 	.word	0x200010c0
 8011860:	200003c0 	.word	0x200003c0
 8011864:	200015b4 	.word	0x200015b4
 8011868:	200015a0 	.word	0x200015a0
 801186c:	20001598 	.word	0x20001598

08011870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011870:	b480      	push	{r7}
 8011872:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011874:	4b04      	ldr	r3, [pc, #16]	; (8011888 <vTaskSuspendAll+0x18>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	3301      	adds	r3, #1
 801187a:	4a03      	ldr	r2, [pc, #12]	; (8011888 <vTaskSuspendAll+0x18>)
 801187c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801187e:	bf00      	nop
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	200015bc 	.word	0x200015bc

0801188c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011892:	2300      	movs	r3, #0
 8011894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011896:	2300      	movs	r3, #0
 8011898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801189a:	4b42      	ldr	r3, [pc, #264]	; (80119a4 <xTaskResumeAll+0x118>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d10a      	bne.n	80118b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80118a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	603b      	str	r3, [r7, #0]
}
 80118b4:	bf00      	nop
 80118b6:	e7fe      	b.n	80118b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80118b8:	f001 f934 	bl	8012b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80118bc:	4b39      	ldr	r3, [pc, #228]	; (80119a4 <xTaskResumeAll+0x118>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	3b01      	subs	r3, #1
 80118c2:	4a38      	ldr	r2, [pc, #224]	; (80119a4 <xTaskResumeAll+0x118>)
 80118c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118c6:	4b37      	ldr	r3, [pc, #220]	; (80119a4 <xTaskResumeAll+0x118>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d162      	bne.n	8011994 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80118ce:	4b36      	ldr	r3, [pc, #216]	; (80119a8 <xTaskResumeAll+0x11c>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d05e      	beq.n	8011994 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118d6:	e02f      	b.n	8011938 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118d8:	4b34      	ldr	r3, [pc, #208]	; (80119ac <xTaskResumeAll+0x120>)
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	3318      	adds	r3, #24
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fe fdd5 	bl	8010494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	3304      	adds	r3, #4
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fe fdd0 	bl	8010494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f8:	4b2d      	ldr	r3, [pc, #180]	; (80119b0 <xTaskResumeAll+0x124>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d903      	bls.n	8011908 <xTaskResumeAll+0x7c>
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011904:	4a2a      	ldr	r2, [pc, #168]	; (80119b0 <xTaskResumeAll+0x124>)
 8011906:	6013      	str	r3, [r2, #0]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801190c:	4613      	mov	r3, r2
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	4413      	add	r3, r2
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	4a27      	ldr	r2, [pc, #156]	; (80119b4 <xTaskResumeAll+0x128>)
 8011916:	441a      	add	r2, r3
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	3304      	adds	r3, #4
 801191c:	4619      	mov	r1, r3
 801191e:	4610      	mov	r0, r2
 8011920:	f7fe fd5b 	bl	80103da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011928:	4b23      	ldr	r3, [pc, #140]	; (80119b8 <xTaskResumeAll+0x12c>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801192e:	429a      	cmp	r2, r3
 8011930:	d302      	bcc.n	8011938 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011932:	4b22      	ldr	r3, [pc, #136]	; (80119bc <xTaskResumeAll+0x130>)
 8011934:	2201      	movs	r2, #1
 8011936:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011938:	4b1c      	ldr	r3, [pc, #112]	; (80119ac <xTaskResumeAll+0x120>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d1cb      	bne.n	80118d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d001      	beq.n	801194a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011946:	f000 fb71 	bl	801202c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801194a:	4b1d      	ldr	r3, [pc, #116]	; (80119c0 <xTaskResumeAll+0x134>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d010      	beq.n	8011978 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011956:	f000 f859 	bl	8011a0c <xTaskIncrementTick>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d002      	beq.n	8011966 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011960:	4b16      	ldr	r3, [pc, #88]	; (80119bc <xTaskResumeAll+0x130>)
 8011962:	2201      	movs	r2, #1
 8011964:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	3b01      	subs	r3, #1
 801196a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d1f1      	bne.n	8011956 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011972:	4b13      	ldr	r3, [pc, #76]	; (80119c0 <xTaskResumeAll+0x134>)
 8011974:	2200      	movs	r2, #0
 8011976:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011978:	4b10      	ldr	r3, [pc, #64]	; (80119bc <xTaskResumeAll+0x130>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d009      	beq.n	8011994 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011980:	2301      	movs	r3, #1
 8011982:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011984:	4b0f      	ldr	r3, [pc, #60]	; (80119c4 <xTaskResumeAll+0x138>)
 8011986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801198a:	601a      	str	r2, [r3, #0]
 801198c:	f3bf 8f4f 	dsb	sy
 8011990:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011994:	f001 f8f6 	bl	8012b84 <vPortExitCritical>

	return xAlreadyYielded;
 8011998:	68bb      	ldr	r3, [r7, #8]
}
 801199a:	4618      	mov	r0, r3
 801199c:	3710      	adds	r7, #16
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	200015bc 	.word	0x200015bc
 80119a8:	20001594 	.word	0x20001594
 80119ac:	20001554 	.word	0x20001554
 80119b0:	2000159c 	.word	0x2000159c
 80119b4:	200010c4 	.word	0x200010c4
 80119b8:	200010c0 	.word	0x200010c0
 80119bc:	200015a8 	.word	0x200015a8
 80119c0:	200015a4 	.word	0x200015a4
 80119c4:	e000ed04 	.word	0xe000ed04

080119c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80119ce:	4b05      	ldr	r3, [pc, #20]	; (80119e4 <xTaskGetTickCount+0x1c>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80119d4:	687b      	ldr	r3, [r7, #4]
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	370c      	adds	r7, #12
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	20001598 	.word	0x20001598

080119e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80119ee:	f001 f97b 	bl	8012ce8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80119f2:	2300      	movs	r3, #0
 80119f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80119f6:	4b04      	ldr	r3, [pc, #16]	; (8011a08 <xTaskGetTickCountFromISR+0x20>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80119fc:	683b      	ldr	r3, [r7, #0]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	20001598 	.word	0x20001598

08011a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b086      	sub	sp, #24
 8011a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011a12:	2300      	movs	r3, #0
 8011a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a16:	4b4f      	ldr	r3, [pc, #316]	; (8011b54 <xTaskIncrementTick+0x148>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	f040 808f 	bne.w	8011b3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011a20:	4b4d      	ldr	r3, [pc, #308]	; (8011b58 <xTaskIncrementTick+0x14c>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	3301      	adds	r3, #1
 8011a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011a28:	4a4b      	ldr	r2, [pc, #300]	; (8011b58 <xTaskIncrementTick+0x14c>)
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d120      	bne.n	8011a76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011a34:	4b49      	ldr	r3, [pc, #292]	; (8011b5c <xTaskIncrementTick+0x150>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d00a      	beq.n	8011a54 <xTaskIncrementTick+0x48>
	__asm volatile
 8011a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a42:	f383 8811 	msr	BASEPRI, r3
 8011a46:	f3bf 8f6f 	isb	sy
 8011a4a:	f3bf 8f4f 	dsb	sy
 8011a4e:	603b      	str	r3, [r7, #0]
}
 8011a50:	bf00      	nop
 8011a52:	e7fe      	b.n	8011a52 <xTaskIncrementTick+0x46>
 8011a54:	4b41      	ldr	r3, [pc, #260]	; (8011b5c <xTaskIncrementTick+0x150>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	60fb      	str	r3, [r7, #12]
 8011a5a:	4b41      	ldr	r3, [pc, #260]	; (8011b60 <xTaskIncrementTick+0x154>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	4a3f      	ldr	r2, [pc, #252]	; (8011b5c <xTaskIncrementTick+0x150>)
 8011a60:	6013      	str	r3, [r2, #0]
 8011a62:	4a3f      	ldr	r2, [pc, #252]	; (8011b60 <xTaskIncrementTick+0x154>)
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	6013      	str	r3, [r2, #0]
 8011a68:	4b3e      	ldr	r3, [pc, #248]	; (8011b64 <xTaskIncrementTick+0x158>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	4a3d      	ldr	r2, [pc, #244]	; (8011b64 <xTaskIncrementTick+0x158>)
 8011a70:	6013      	str	r3, [r2, #0]
 8011a72:	f000 fadb 	bl	801202c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a76:	4b3c      	ldr	r3, [pc, #240]	; (8011b68 <xTaskIncrementTick+0x15c>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	693a      	ldr	r2, [r7, #16]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d349      	bcc.n	8011b14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a80:	4b36      	ldr	r3, [pc, #216]	; (8011b5c <xTaskIncrementTick+0x150>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d104      	bne.n	8011a94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a8a:	4b37      	ldr	r3, [pc, #220]	; (8011b68 <xTaskIncrementTick+0x15c>)
 8011a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a90:	601a      	str	r2, [r3, #0]
					break;
 8011a92:	e03f      	b.n	8011b14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a94:	4b31      	ldr	r3, [pc, #196]	; (8011b5c <xTaskIncrementTick+0x150>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011aa4:	693a      	ldr	r2, [r7, #16]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	d203      	bcs.n	8011ab4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011aac:	4a2e      	ldr	r2, [pc, #184]	; (8011b68 <xTaskIncrementTick+0x15c>)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011ab2:	e02f      	b.n	8011b14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	3304      	adds	r3, #4
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fe fceb 	bl	8010494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d004      	beq.n	8011ad0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	3318      	adds	r3, #24
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fe fce2 	bl	8010494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad4:	4b25      	ldr	r3, [pc, #148]	; (8011b6c <xTaskIncrementTick+0x160>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d903      	bls.n	8011ae4 <xTaskIncrementTick+0xd8>
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae0:	4a22      	ldr	r2, [pc, #136]	; (8011b6c <xTaskIncrementTick+0x160>)
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae8:	4613      	mov	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	4a1f      	ldr	r2, [pc, #124]	; (8011b70 <xTaskIncrementTick+0x164>)
 8011af2:	441a      	add	r2, r3
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	3304      	adds	r3, #4
 8011af8:	4619      	mov	r1, r3
 8011afa:	4610      	mov	r0, r2
 8011afc:	f7fe fc6d 	bl	80103da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b04:	4b1b      	ldr	r3, [pc, #108]	; (8011b74 <xTaskIncrementTick+0x168>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d3b8      	bcc.n	8011a80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011b0e:	2301      	movs	r3, #1
 8011b10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b12:	e7b5      	b.n	8011a80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011b14:	4b17      	ldr	r3, [pc, #92]	; (8011b74 <xTaskIncrementTick+0x168>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1a:	4915      	ldr	r1, [pc, #84]	; (8011b70 <xTaskIncrementTick+0x164>)
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4413      	add	r3, r2
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	440b      	add	r3, r1
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d901      	bls.n	8011b30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011b30:	4b11      	ldr	r3, [pc, #68]	; (8011b78 <xTaskIncrementTick+0x16c>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d007      	beq.n	8011b48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011b38:	2301      	movs	r3, #1
 8011b3a:	617b      	str	r3, [r7, #20]
 8011b3c:	e004      	b.n	8011b48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011b3e:	4b0f      	ldr	r3, [pc, #60]	; (8011b7c <xTaskIncrementTick+0x170>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	3301      	adds	r3, #1
 8011b44:	4a0d      	ldr	r2, [pc, #52]	; (8011b7c <xTaskIncrementTick+0x170>)
 8011b46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011b48:	697b      	ldr	r3, [r7, #20]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3718      	adds	r7, #24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	200015bc 	.word	0x200015bc
 8011b58:	20001598 	.word	0x20001598
 8011b5c:	2000154c 	.word	0x2000154c
 8011b60:	20001550 	.word	0x20001550
 8011b64:	200015ac 	.word	0x200015ac
 8011b68:	200015b4 	.word	0x200015b4
 8011b6c:	2000159c 	.word	0x2000159c
 8011b70:	200010c4 	.word	0x200010c4
 8011b74:	200010c0 	.word	0x200010c0
 8011b78:	200015a8 	.word	0x200015a8
 8011b7c:	200015a4 	.word	0x200015a4

08011b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b80:	b480      	push	{r7}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b86:	4b2a      	ldr	r3, [pc, #168]	; (8011c30 <vTaskSwitchContext+0xb0>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d003      	beq.n	8011b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b8e:	4b29      	ldr	r3, [pc, #164]	; (8011c34 <vTaskSwitchContext+0xb4>)
 8011b90:	2201      	movs	r2, #1
 8011b92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b94:	e046      	b.n	8011c24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011b96:	4b27      	ldr	r3, [pc, #156]	; (8011c34 <vTaskSwitchContext+0xb4>)
 8011b98:	2200      	movs	r2, #0
 8011b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b9c:	4b26      	ldr	r3, [pc, #152]	; (8011c38 <vTaskSwitchContext+0xb8>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	60fb      	str	r3, [r7, #12]
 8011ba2:	e010      	b.n	8011bc6 <vTaskSwitchContext+0x46>
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d10a      	bne.n	8011bc0 <vTaskSwitchContext+0x40>
	__asm volatile
 8011baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bae:	f383 8811 	msr	BASEPRI, r3
 8011bb2:	f3bf 8f6f 	isb	sy
 8011bb6:	f3bf 8f4f 	dsb	sy
 8011bba:	607b      	str	r3, [r7, #4]
}
 8011bbc:	bf00      	nop
 8011bbe:	e7fe      	b.n	8011bbe <vTaskSwitchContext+0x3e>
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	3b01      	subs	r3, #1
 8011bc4:	60fb      	str	r3, [r7, #12]
 8011bc6:	491d      	ldr	r1, [pc, #116]	; (8011c3c <vTaskSwitchContext+0xbc>)
 8011bc8:	68fa      	ldr	r2, [r7, #12]
 8011bca:	4613      	mov	r3, r2
 8011bcc:	009b      	lsls	r3, r3, #2
 8011bce:	4413      	add	r3, r2
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	440b      	add	r3, r1
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d0e4      	beq.n	8011ba4 <vTaskSwitchContext+0x24>
 8011bda:	68fa      	ldr	r2, [r7, #12]
 8011bdc:	4613      	mov	r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4413      	add	r3, r2
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	4a15      	ldr	r2, [pc, #84]	; (8011c3c <vTaskSwitchContext+0xbc>)
 8011be6:	4413      	add	r3, r2
 8011be8:	60bb      	str	r3, [r7, #8]
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	685a      	ldr	r2, [r3, #4]
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	605a      	str	r2, [r3, #4]
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	685a      	ldr	r2, [r3, #4]
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	3308      	adds	r3, #8
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d104      	bne.n	8011c0a <vTaskSwitchContext+0x8a>
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	685a      	ldr	r2, [r3, #4]
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	605a      	str	r2, [r3, #4]
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	4a0b      	ldr	r2, [pc, #44]	; (8011c40 <vTaskSwitchContext+0xc0>)
 8011c12:	6013      	str	r3, [r2, #0]
 8011c14:	4a08      	ldr	r2, [pc, #32]	; (8011c38 <vTaskSwitchContext+0xb8>)
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011c1a:	4b09      	ldr	r3, [pc, #36]	; (8011c40 <vTaskSwitchContext+0xc0>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	3354      	adds	r3, #84	; 0x54
 8011c20:	4a08      	ldr	r2, [pc, #32]	; (8011c44 <vTaskSwitchContext+0xc4>)
 8011c22:	6013      	str	r3, [r2, #0]
}
 8011c24:	bf00      	nop
 8011c26:	3714      	adds	r7, #20
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	200015bc 	.word	0x200015bc
 8011c34:	200015a8 	.word	0x200015a8
 8011c38:	2000159c 	.word	0x2000159c
 8011c3c:	200010c4 	.word	0x200010c4
 8011c40:	200010c0 	.word	0x200010c0
 8011c44:	200003c0 	.word	0x200003c0

08011c48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d10a      	bne.n	8011c6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c5c:	f383 8811 	msr	BASEPRI, r3
 8011c60:	f3bf 8f6f 	isb	sy
 8011c64:	f3bf 8f4f 	dsb	sy
 8011c68:	60fb      	str	r3, [r7, #12]
}
 8011c6a:	bf00      	nop
 8011c6c:	e7fe      	b.n	8011c6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c6e:	4b07      	ldr	r3, [pc, #28]	; (8011c8c <vTaskPlaceOnEventList+0x44>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3318      	adds	r3, #24
 8011c74:	4619      	mov	r1, r3
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f7fe fbd3 	bl	8010422 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	6838      	ldr	r0, [r7, #0]
 8011c80:	f000 fa80 	bl	8012184 <prvAddCurrentTaskToDelayedList>
}
 8011c84:	bf00      	nop
 8011c86:	3710      	adds	r7, #16
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	200010c0 	.word	0x200010c0

08011c90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b086      	sub	sp, #24
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d10a      	bne.n	8011cb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca6:	f383 8811 	msr	BASEPRI, r3
 8011caa:	f3bf 8f6f 	isb	sy
 8011cae:	f3bf 8f4f 	dsb	sy
 8011cb2:	617b      	str	r3, [r7, #20]
}
 8011cb4:	bf00      	nop
 8011cb6:	e7fe      	b.n	8011cb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011cb8:	4b0a      	ldr	r3, [pc, #40]	; (8011ce4 <vTaskPlaceOnEventListRestricted+0x54>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	3318      	adds	r3, #24
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	68f8      	ldr	r0, [r7, #12]
 8011cc2:	f7fe fb8a 	bl	80103da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d002      	beq.n	8011cd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011cd2:	6879      	ldr	r1, [r7, #4]
 8011cd4:	68b8      	ldr	r0, [r7, #8]
 8011cd6:	f000 fa55 	bl	8012184 <prvAddCurrentTaskToDelayedList>
	}
 8011cda:	bf00      	nop
 8011cdc:	3718      	adds	r7, #24
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	200010c0 	.word	0x200010c0

08011ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b086      	sub	sp, #24
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d10a      	bne.n	8011d14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d02:	f383 8811 	msr	BASEPRI, r3
 8011d06:	f3bf 8f6f 	isb	sy
 8011d0a:	f3bf 8f4f 	dsb	sy
 8011d0e:	60fb      	str	r3, [r7, #12]
}
 8011d10:	bf00      	nop
 8011d12:	e7fe      	b.n	8011d12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	3318      	adds	r3, #24
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7fe fbbb 	bl	8010494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d1e:	4b1e      	ldr	r3, [pc, #120]	; (8011d98 <xTaskRemoveFromEventList+0xb0>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d11d      	bne.n	8011d62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	3304      	adds	r3, #4
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7fe fbb2 	bl	8010494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d34:	4b19      	ldr	r3, [pc, #100]	; (8011d9c <xTaskRemoveFromEventList+0xb4>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d903      	bls.n	8011d44 <xTaskRemoveFromEventList+0x5c>
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d40:	4a16      	ldr	r2, [pc, #88]	; (8011d9c <xTaskRemoveFromEventList+0xb4>)
 8011d42:	6013      	str	r3, [r2, #0]
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d48:	4613      	mov	r3, r2
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	4413      	add	r3, r2
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4a13      	ldr	r2, [pc, #76]	; (8011da0 <xTaskRemoveFromEventList+0xb8>)
 8011d52:	441a      	add	r2, r3
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	3304      	adds	r3, #4
 8011d58:	4619      	mov	r1, r3
 8011d5a:	4610      	mov	r0, r2
 8011d5c:	f7fe fb3d 	bl	80103da <vListInsertEnd>
 8011d60:	e005      	b.n	8011d6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	3318      	adds	r3, #24
 8011d66:	4619      	mov	r1, r3
 8011d68:	480e      	ldr	r0, [pc, #56]	; (8011da4 <xTaskRemoveFromEventList+0xbc>)
 8011d6a:	f7fe fb36 	bl	80103da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d72:	4b0d      	ldr	r3, [pc, #52]	; (8011da8 <xTaskRemoveFromEventList+0xc0>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d905      	bls.n	8011d88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011d80:	4b0a      	ldr	r3, [pc, #40]	; (8011dac <xTaskRemoveFromEventList+0xc4>)
 8011d82:	2201      	movs	r2, #1
 8011d84:	601a      	str	r2, [r3, #0]
 8011d86:	e001      	b.n	8011d8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011d8c:	697b      	ldr	r3, [r7, #20]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3718      	adds	r7, #24
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	200015bc 	.word	0x200015bc
 8011d9c:	2000159c 	.word	0x2000159c
 8011da0:	200010c4 	.word	0x200010c4
 8011da4:	20001554 	.word	0x20001554
 8011da8:	200010c0 	.word	0x200010c0
 8011dac:	200015a8 	.word	0x200015a8

08011db0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011db8:	4b06      	ldr	r3, [pc, #24]	; (8011dd4 <vTaskInternalSetTimeOutState+0x24>)
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011dc0:	4b05      	ldr	r3, [pc, #20]	; (8011dd8 <vTaskInternalSetTimeOutState+0x28>)
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	605a      	str	r2, [r3, #4]
}
 8011dc8:	bf00      	nop
 8011dca:	370c      	adds	r7, #12
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr
 8011dd4:	200015ac 	.word	0x200015ac
 8011dd8:	20001598 	.word	0x20001598

08011ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b088      	sub	sp, #32
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d10a      	bne.n	8011e02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df0:	f383 8811 	msr	BASEPRI, r3
 8011df4:	f3bf 8f6f 	isb	sy
 8011df8:	f3bf 8f4f 	dsb	sy
 8011dfc:	613b      	str	r3, [r7, #16]
}
 8011dfe:	bf00      	nop
 8011e00:	e7fe      	b.n	8011e00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d10a      	bne.n	8011e1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e0c:	f383 8811 	msr	BASEPRI, r3
 8011e10:	f3bf 8f6f 	isb	sy
 8011e14:	f3bf 8f4f 	dsb	sy
 8011e18:	60fb      	str	r3, [r7, #12]
}
 8011e1a:	bf00      	nop
 8011e1c:	e7fe      	b.n	8011e1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011e1e:	f000 fe81 	bl	8012b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011e22:	4b1d      	ldr	r3, [pc, #116]	; (8011e98 <xTaskCheckForTimeOut+0xbc>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	69ba      	ldr	r2, [r7, #24]
 8011e2e:	1ad3      	subs	r3, r2, r3
 8011e30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e3a:	d102      	bne.n	8011e42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	61fb      	str	r3, [r7, #28]
 8011e40:	e023      	b.n	8011e8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	4b15      	ldr	r3, [pc, #84]	; (8011e9c <xTaskCheckForTimeOut+0xc0>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d007      	beq.n	8011e5e <xTaskCheckForTimeOut+0x82>
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	69ba      	ldr	r2, [r7, #24]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d302      	bcc.n	8011e5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	61fb      	str	r3, [r7, #28]
 8011e5c:	e015      	b.n	8011e8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	697a      	ldr	r2, [r7, #20]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d20b      	bcs.n	8011e80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	1ad2      	subs	r2, r2, r3
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7ff ff9b 	bl	8011db0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	61fb      	str	r3, [r7, #28]
 8011e7e:	e004      	b.n	8011e8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	2200      	movs	r2, #0
 8011e84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011e86:	2301      	movs	r3, #1
 8011e88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011e8a:	f000 fe7b 	bl	8012b84 <vPortExitCritical>

	return xReturn;
 8011e8e:	69fb      	ldr	r3, [r7, #28]
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3720      	adds	r7, #32
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}
 8011e98:	20001598 	.word	0x20001598
 8011e9c:	200015ac 	.word	0x200015ac

08011ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011ea4:	4b03      	ldr	r3, [pc, #12]	; (8011eb4 <vTaskMissedYield+0x14>)
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	601a      	str	r2, [r3, #0]
}
 8011eaa:	bf00      	nop
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr
 8011eb4:	200015a8 	.word	0x200015a8

08011eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011ec0:	f000 f852 	bl	8011f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011ec4:	4b06      	ldr	r3, [pc, #24]	; (8011ee0 <prvIdleTask+0x28>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d9f9      	bls.n	8011ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011ecc:	4b05      	ldr	r3, [pc, #20]	; (8011ee4 <prvIdleTask+0x2c>)
 8011ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ed2:	601a      	str	r2, [r3, #0]
 8011ed4:	f3bf 8f4f 	dsb	sy
 8011ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011edc:	e7f0      	b.n	8011ec0 <prvIdleTask+0x8>
 8011ede:	bf00      	nop
 8011ee0:	200010c4 	.word	0x200010c4
 8011ee4:	e000ed04 	.word	0xe000ed04

08011ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011eee:	2300      	movs	r3, #0
 8011ef0:	607b      	str	r3, [r7, #4]
 8011ef2:	e00c      	b.n	8011f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	4413      	add	r3, r2
 8011efc:	009b      	lsls	r3, r3, #2
 8011efe:	4a12      	ldr	r2, [pc, #72]	; (8011f48 <prvInitialiseTaskLists+0x60>)
 8011f00:	4413      	add	r3, r2
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fe fa3c 	bl	8010380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	607b      	str	r3, [r7, #4]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2b37      	cmp	r3, #55	; 0x37
 8011f12:	d9ef      	bls.n	8011ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011f14:	480d      	ldr	r0, [pc, #52]	; (8011f4c <prvInitialiseTaskLists+0x64>)
 8011f16:	f7fe fa33 	bl	8010380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011f1a:	480d      	ldr	r0, [pc, #52]	; (8011f50 <prvInitialiseTaskLists+0x68>)
 8011f1c:	f7fe fa30 	bl	8010380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f20:	480c      	ldr	r0, [pc, #48]	; (8011f54 <prvInitialiseTaskLists+0x6c>)
 8011f22:	f7fe fa2d 	bl	8010380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f26:	480c      	ldr	r0, [pc, #48]	; (8011f58 <prvInitialiseTaskLists+0x70>)
 8011f28:	f7fe fa2a 	bl	8010380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011f2c:	480b      	ldr	r0, [pc, #44]	; (8011f5c <prvInitialiseTaskLists+0x74>)
 8011f2e:	f7fe fa27 	bl	8010380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011f32:	4b0b      	ldr	r3, [pc, #44]	; (8011f60 <prvInitialiseTaskLists+0x78>)
 8011f34:	4a05      	ldr	r2, [pc, #20]	; (8011f4c <prvInitialiseTaskLists+0x64>)
 8011f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011f38:	4b0a      	ldr	r3, [pc, #40]	; (8011f64 <prvInitialiseTaskLists+0x7c>)
 8011f3a:	4a05      	ldr	r2, [pc, #20]	; (8011f50 <prvInitialiseTaskLists+0x68>)
 8011f3c:	601a      	str	r2, [r3, #0]
}
 8011f3e:	bf00      	nop
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	200010c4 	.word	0x200010c4
 8011f4c:	20001524 	.word	0x20001524
 8011f50:	20001538 	.word	0x20001538
 8011f54:	20001554 	.word	0x20001554
 8011f58:	20001568 	.word	0x20001568
 8011f5c:	20001580 	.word	0x20001580
 8011f60:	2000154c 	.word	0x2000154c
 8011f64:	20001550 	.word	0x20001550

08011f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f6e:	e019      	b.n	8011fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011f70:	f000 fdd8 	bl	8012b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f74:	4b10      	ldr	r3, [pc, #64]	; (8011fb8 <prvCheckTasksWaitingTermination+0x50>)
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	3304      	adds	r3, #4
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7fe fa87 	bl	8010494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011f86:	4b0d      	ldr	r3, [pc, #52]	; (8011fbc <prvCheckTasksWaitingTermination+0x54>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	3b01      	subs	r3, #1
 8011f8c:	4a0b      	ldr	r2, [pc, #44]	; (8011fbc <prvCheckTasksWaitingTermination+0x54>)
 8011f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011f90:	4b0b      	ldr	r3, [pc, #44]	; (8011fc0 <prvCheckTasksWaitingTermination+0x58>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	3b01      	subs	r3, #1
 8011f96:	4a0a      	ldr	r2, [pc, #40]	; (8011fc0 <prvCheckTasksWaitingTermination+0x58>)
 8011f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011f9a:	f000 fdf3 	bl	8012b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f000 f810 	bl	8011fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fa4:	4b06      	ldr	r3, [pc, #24]	; (8011fc0 <prvCheckTasksWaitingTermination+0x58>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1e1      	bne.n	8011f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011fac:	bf00      	nop
 8011fae:	bf00      	nop
 8011fb0:	3708      	adds	r7, #8
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	20001568 	.word	0x20001568
 8011fbc:	20001594 	.word	0x20001594
 8011fc0:	2000157c 	.word	0x2000157c

08011fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	3354      	adds	r3, #84	; 0x54
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f002 f827 	bl	8014024 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d108      	bne.n	8011ff2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f000 ff8b 	bl	8012f00 <vPortFree>
				vPortFree( pxTCB );
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f000 ff88 	bl	8012f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011ff0:	e018      	b.n	8012024 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d103      	bne.n	8012004 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f000 ff7f 	bl	8012f00 <vPortFree>
	}
 8012002:	e00f      	b.n	8012024 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801200a:	2b02      	cmp	r3, #2
 801200c:	d00a      	beq.n	8012024 <prvDeleteTCB+0x60>
	__asm volatile
 801200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012012:	f383 8811 	msr	BASEPRI, r3
 8012016:	f3bf 8f6f 	isb	sy
 801201a:	f3bf 8f4f 	dsb	sy
 801201e:	60fb      	str	r3, [r7, #12]
}
 8012020:	bf00      	nop
 8012022:	e7fe      	b.n	8012022 <prvDeleteTCB+0x5e>
	}
 8012024:	bf00      	nop
 8012026:	3710      	adds	r7, #16
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012032:	4b0c      	ldr	r3, [pc, #48]	; (8012064 <prvResetNextTaskUnblockTime+0x38>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d104      	bne.n	8012046 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801203c:	4b0a      	ldr	r3, [pc, #40]	; (8012068 <prvResetNextTaskUnblockTime+0x3c>)
 801203e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012042:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012044:	e008      	b.n	8012058 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012046:	4b07      	ldr	r3, [pc, #28]	; (8012064 <prvResetNextTaskUnblockTime+0x38>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	4a04      	ldr	r2, [pc, #16]	; (8012068 <prvResetNextTaskUnblockTime+0x3c>)
 8012056:	6013      	str	r3, [r2, #0]
}
 8012058:	bf00      	nop
 801205a:	370c      	adds	r7, #12
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr
 8012064:	2000154c 	.word	0x2000154c
 8012068:	200015b4 	.word	0x200015b4

0801206c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012072:	4b0b      	ldr	r3, [pc, #44]	; (80120a0 <xTaskGetSchedulerState+0x34>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d102      	bne.n	8012080 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801207a:	2301      	movs	r3, #1
 801207c:	607b      	str	r3, [r7, #4]
 801207e:	e008      	b.n	8012092 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012080:	4b08      	ldr	r3, [pc, #32]	; (80120a4 <xTaskGetSchedulerState+0x38>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d102      	bne.n	801208e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012088:	2302      	movs	r3, #2
 801208a:	607b      	str	r3, [r7, #4]
 801208c:	e001      	b.n	8012092 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801208e:	2300      	movs	r3, #0
 8012090:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012092:	687b      	ldr	r3, [r7, #4]
	}
 8012094:	4618      	mov	r0, r3
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr
 80120a0:	200015a0 	.word	0x200015a0
 80120a4:	200015bc 	.word	0x200015bc

080120a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b086      	sub	sp, #24
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80120b4:	2300      	movs	r3, #0
 80120b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d056      	beq.n	801216c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80120be:	4b2e      	ldr	r3, [pc, #184]	; (8012178 <xTaskPriorityDisinherit+0xd0>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	693a      	ldr	r2, [r7, #16]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d00a      	beq.n	80120de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80120c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120cc:	f383 8811 	msr	BASEPRI, r3
 80120d0:	f3bf 8f6f 	isb	sy
 80120d4:	f3bf 8f4f 	dsb	sy
 80120d8:	60fb      	str	r3, [r7, #12]
}
 80120da:	bf00      	nop
 80120dc:	e7fe      	b.n	80120dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d10a      	bne.n	80120fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80120e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ea:	f383 8811 	msr	BASEPRI, r3
 80120ee:	f3bf 8f6f 	isb	sy
 80120f2:	f3bf 8f4f 	dsb	sy
 80120f6:	60bb      	str	r3, [r7, #8]
}
 80120f8:	bf00      	nop
 80120fa:	e7fe      	b.n	80120fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012100:	1e5a      	subs	r2, r3, #1
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801210e:	429a      	cmp	r2, r3
 8012110:	d02c      	beq.n	801216c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012116:	2b00      	cmp	r3, #0
 8012118:	d128      	bne.n	801216c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	3304      	adds	r3, #4
 801211e:	4618      	mov	r0, r3
 8012120:	f7fe f9b8 	bl	8010494 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012130:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801213c:	4b0f      	ldr	r3, [pc, #60]	; (801217c <xTaskPriorityDisinherit+0xd4>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	429a      	cmp	r2, r3
 8012142:	d903      	bls.n	801214c <xTaskPriorityDisinherit+0xa4>
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012148:	4a0c      	ldr	r2, [pc, #48]	; (801217c <xTaskPriorityDisinherit+0xd4>)
 801214a:	6013      	str	r3, [r2, #0]
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012150:	4613      	mov	r3, r2
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	4413      	add	r3, r2
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	4a09      	ldr	r2, [pc, #36]	; (8012180 <xTaskPriorityDisinherit+0xd8>)
 801215a:	441a      	add	r2, r3
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	3304      	adds	r3, #4
 8012160:	4619      	mov	r1, r3
 8012162:	4610      	mov	r0, r2
 8012164:	f7fe f939 	bl	80103da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012168:	2301      	movs	r3, #1
 801216a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801216c:	697b      	ldr	r3, [r7, #20]
	}
 801216e:	4618      	mov	r0, r3
 8012170:	3718      	adds	r7, #24
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	200010c0 	.word	0x200010c0
 801217c:	2000159c 	.word	0x2000159c
 8012180:	200010c4 	.word	0x200010c4

08012184 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b084      	sub	sp, #16
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801218e:	4b21      	ldr	r3, [pc, #132]	; (8012214 <prvAddCurrentTaskToDelayedList+0x90>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012194:	4b20      	ldr	r3, [pc, #128]	; (8012218 <prvAddCurrentTaskToDelayedList+0x94>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	3304      	adds	r3, #4
 801219a:	4618      	mov	r0, r3
 801219c:	f7fe f97a 	bl	8010494 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80121a6:	d10a      	bne.n	80121be <prvAddCurrentTaskToDelayedList+0x3a>
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d007      	beq.n	80121be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80121ae:	4b1a      	ldr	r3, [pc, #104]	; (8012218 <prvAddCurrentTaskToDelayedList+0x94>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	3304      	adds	r3, #4
 80121b4:	4619      	mov	r1, r3
 80121b6:	4819      	ldr	r0, [pc, #100]	; (801221c <prvAddCurrentTaskToDelayedList+0x98>)
 80121b8:	f7fe f90f 	bl	80103da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80121bc:	e026      	b.n	801220c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80121be:	68fa      	ldr	r2, [r7, #12]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	4413      	add	r3, r2
 80121c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80121c6:	4b14      	ldr	r3, [pc, #80]	; (8012218 <prvAddCurrentTaskToDelayedList+0x94>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	68ba      	ldr	r2, [r7, #8]
 80121cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80121ce:	68ba      	ldr	r2, [r7, #8]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d209      	bcs.n	80121ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80121d6:	4b12      	ldr	r3, [pc, #72]	; (8012220 <prvAddCurrentTaskToDelayedList+0x9c>)
 80121d8:	681a      	ldr	r2, [r3, #0]
 80121da:	4b0f      	ldr	r3, [pc, #60]	; (8012218 <prvAddCurrentTaskToDelayedList+0x94>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	3304      	adds	r3, #4
 80121e0:	4619      	mov	r1, r3
 80121e2:	4610      	mov	r0, r2
 80121e4:	f7fe f91d 	bl	8010422 <vListInsert>
}
 80121e8:	e010      	b.n	801220c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80121ea:	4b0e      	ldr	r3, [pc, #56]	; (8012224 <prvAddCurrentTaskToDelayedList+0xa0>)
 80121ec:	681a      	ldr	r2, [r3, #0]
 80121ee:	4b0a      	ldr	r3, [pc, #40]	; (8012218 <prvAddCurrentTaskToDelayedList+0x94>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	3304      	adds	r3, #4
 80121f4:	4619      	mov	r1, r3
 80121f6:	4610      	mov	r0, r2
 80121f8:	f7fe f913 	bl	8010422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80121fc:	4b0a      	ldr	r3, [pc, #40]	; (8012228 <prvAddCurrentTaskToDelayedList+0xa4>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	68ba      	ldr	r2, [r7, #8]
 8012202:	429a      	cmp	r2, r3
 8012204:	d202      	bcs.n	801220c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012206:	4a08      	ldr	r2, [pc, #32]	; (8012228 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	6013      	str	r3, [r2, #0]
}
 801220c:	bf00      	nop
 801220e:	3710      	adds	r7, #16
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}
 8012214:	20001598 	.word	0x20001598
 8012218:	200010c0 	.word	0x200010c0
 801221c:	20001580 	.word	0x20001580
 8012220:	20001550 	.word	0x20001550
 8012224:	2000154c 	.word	0x2000154c
 8012228:	200015b4 	.word	0x200015b4

0801222c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b08a      	sub	sp, #40	; 0x28
 8012230:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012232:	2300      	movs	r3, #0
 8012234:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012236:	f000 fb07 	bl	8012848 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801223a:	4b1c      	ldr	r3, [pc, #112]	; (80122ac <xTimerCreateTimerTask+0x80>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d021      	beq.n	8012286 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012242:	2300      	movs	r3, #0
 8012244:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012246:	2300      	movs	r3, #0
 8012248:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801224a:	1d3a      	adds	r2, r7, #4
 801224c:	f107 0108 	add.w	r1, r7, #8
 8012250:	f107 030c 	add.w	r3, r7, #12
 8012254:	4618      	mov	r0, r3
 8012256:	f7fe f879 	bl	801034c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801225a:	6879      	ldr	r1, [r7, #4]
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	68fa      	ldr	r2, [r7, #12]
 8012260:	9202      	str	r2, [sp, #8]
 8012262:	9301      	str	r3, [sp, #4]
 8012264:	2302      	movs	r3, #2
 8012266:	9300      	str	r3, [sp, #0]
 8012268:	2300      	movs	r3, #0
 801226a:	460a      	mov	r2, r1
 801226c:	4910      	ldr	r1, [pc, #64]	; (80122b0 <xTimerCreateTimerTask+0x84>)
 801226e:	4811      	ldr	r0, [pc, #68]	; (80122b4 <xTimerCreateTimerTask+0x88>)
 8012270:	f7ff f824 	bl	80112bc <xTaskCreateStatic>
 8012274:	4603      	mov	r3, r0
 8012276:	4a10      	ldr	r2, [pc, #64]	; (80122b8 <xTimerCreateTimerTask+0x8c>)
 8012278:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801227a:	4b0f      	ldr	r3, [pc, #60]	; (80122b8 <xTimerCreateTimerTask+0x8c>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d001      	beq.n	8012286 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012282:	2301      	movs	r3, #1
 8012284:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d10a      	bne.n	80122a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012290:	f383 8811 	msr	BASEPRI, r3
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	f3bf 8f4f 	dsb	sy
 801229c:	613b      	str	r3, [r7, #16]
}
 801229e:	bf00      	nop
 80122a0:	e7fe      	b.n	80122a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80122a2:	697b      	ldr	r3, [r7, #20]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3718      	adds	r7, #24
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	200015f0 	.word	0x200015f0
 80122b0:	08014288 	.word	0x08014288
 80122b4:	080123f1 	.word	0x080123f1
 80122b8:	200015f4 	.word	0x200015f4

080122bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b08a      	sub	sp, #40	; 0x28
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	607a      	str	r2, [r7, #4]
 80122c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80122ca:	2300      	movs	r3, #0
 80122cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10a      	bne.n	80122ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80122d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	623b      	str	r3, [r7, #32]
}
 80122e6:	bf00      	nop
 80122e8:	e7fe      	b.n	80122e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80122ea:	4b1a      	ldr	r3, [pc, #104]	; (8012354 <xTimerGenericCommand+0x98>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d02a      	beq.n	8012348 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	2b05      	cmp	r3, #5
 8012302:	dc18      	bgt.n	8012336 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012304:	f7ff feb2 	bl	801206c <xTaskGetSchedulerState>
 8012308:	4603      	mov	r3, r0
 801230a:	2b02      	cmp	r3, #2
 801230c:	d109      	bne.n	8012322 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801230e:	4b11      	ldr	r3, [pc, #68]	; (8012354 <xTimerGenericCommand+0x98>)
 8012310:	6818      	ldr	r0, [r3, #0]
 8012312:	f107 0110 	add.w	r1, r7, #16
 8012316:	2300      	movs	r3, #0
 8012318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801231a:	f7fe fa8d 	bl	8010838 <xQueueGenericSend>
 801231e:	6278      	str	r0, [r7, #36]	; 0x24
 8012320:	e012      	b.n	8012348 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012322:	4b0c      	ldr	r3, [pc, #48]	; (8012354 <xTimerGenericCommand+0x98>)
 8012324:	6818      	ldr	r0, [r3, #0]
 8012326:	f107 0110 	add.w	r1, r7, #16
 801232a:	2300      	movs	r3, #0
 801232c:	2200      	movs	r2, #0
 801232e:	f7fe fa83 	bl	8010838 <xQueueGenericSend>
 8012332:	6278      	str	r0, [r7, #36]	; 0x24
 8012334:	e008      	b.n	8012348 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012336:	4b07      	ldr	r3, [pc, #28]	; (8012354 <xTimerGenericCommand+0x98>)
 8012338:	6818      	ldr	r0, [r3, #0]
 801233a:	f107 0110 	add.w	r1, r7, #16
 801233e:	2300      	movs	r3, #0
 8012340:	683a      	ldr	r2, [r7, #0]
 8012342:	f7fe fb77 	bl	8010a34 <xQueueGenericSendFromISR>
 8012346:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801234a:	4618      	mov	r0, r3
 801234c:	3728      	adds	r7, #40	; 0x28
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	200015f0 	.word	0x200015f0

08012358 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b088      	sub	sp, #32
 801235c:	af02      	add	r7, sp, #8
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012362:	4b22      	ldr	r3, [pc, #136]	; (80123ec <prvProcessExpiredTimer+0x94>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	3304      	adds	r3, #4
 8012370:	4618      	mov	r0, r3
 8012372:	f7fe f88f 	bl	8010494 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801237c:	f003 0304 	and.w	r3, r3, #4
 8012380:	2b00      	cmp	r3, #0
 8012382:	d022      	beq.n	80123ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	699a      	ldr	r2, [r3, #24]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	18d1      	adds	r1, r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	683a      	ldr	r2, [r7, #0]
 8012390:	6978      	ldr	r0, [r7, #20]
 8012392:	f000 f8d1 	bl	8012538 <prvInsertTimerInActiveList>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d01f      	beq.n	80123dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801239c:	2300      	movs	r3, #0
 801239e:	9300      	str	r3, [sp, #0]
 80123a0:	2300      	movs	r3, #0
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	2100      	movs	r1, #0
 80123a6:	6978      	ldr	r0, [r7, #20]
 80123a8:	f7ff ff88 	bl	80122bc <xTimerGenericCommand>
 80123ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d113      	bne.n	80123dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80123b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b8:	f383 8811 	msr	BASEPRI, r3
 80123bc:	f3bf 8f6f 	isb	sy
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	60fb      	str	r3, [r7, #12]
}
 80123c6:	bf00      	nop
 80123c8:	e7fe      	b.n	80123c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123d0:	f023 0301 	bic.w	r3, r3, #1
 80123d4:	b2da      	uxtb	r2, r3
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	6a1b      	ldr	r3, [r3, #32]
 80123e0:	6978      	ldr	r0, [r7, #20]
 80123e2:	4798      	blx	r3
}
 80123e4:	bf00      	nop
 80123e6:	3718      	adds	r7, #24
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	200015e8 	.word	0x200015e8

080123f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b084      	sub	sp, #16
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80123f8:	f107 0308 	add.w	r3, r7, #8
 80123fc:	4618      	mov	r0, r3
 80123fe:	f000 f857 	bl	80124b0 <prvGetNextExpireTime>
 8012402:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	4619      	mov	r1, r3
 8012408:	68f8      	ldr	r0, [r7, #12]
 801240a:	f000 f803 	bl	8012414 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801240e:	f000 f8d5 	bl	80125bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012412:	e7f1      	b.n	80123f8 <prvTimerTask+0x8>

08012414 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801241e:	f7ff fa27 	bl	8011870 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012422:	f107 0308 	add.w	r3, r7, #8
 8012426:	4618      	mov	r0, r3
 8012428:	f000 f866 	bl	80124f8 <prvSampleTimeNow>
 801242c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d130      	bne.n	8012496 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d10a      	bne.n	8012450 <prvProcessTimerOrBlockTask+0x3c>
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	429a      	cmp	r2, r3
 8012440:	d806      	bhi.n	8012450 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012442:	f7ff fa23 	bl	801188c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012446:	68f9      	ldr	r1, [r7, #12]
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7ff ff85 	bl	8012358 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801244e:	e024      	b.n	801249a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d008      	beq.n	8012468 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012456:	4b13      	ldr	r3, [pc, #76]	; (80124a4 <prvProcessTimerOrBlockTask+0x90>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d101      	bne.n	8012464 <prvProcessTimerOrBlockTask+0x50>
 8012460:	2301      	movs	r3, #1
 8012462:	e000      	b.n	8012466 <prvProcessTimerOrBlockTask+0x52>
 8012464:	2300      	movs	r3, #0
 8012466:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012468:	4b0f      	ldr	r3, [pc, #60]	; (80124a8 <prvProcessTimerOrBlockTask+0x94>)
 801246a:	6818      	ldr	r0, [r3, #0]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	1ad3      	subs	r3, r2, r3
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	4619      	mov	r1, r3
 8012476:	f7fe feed 	bl	8011254 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801247a:	f7ff fa07 	bl	801188c <xTaskResumeAll>
 801247e:	4603      	mov	r3, r0
 8012480:	2b00      	cmp	r3, #0
 8012482:	d10a      	bne.n	801249a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012484:	4b09      	ldr	r3, [pc, #36]	; (80124ac <prvProcessTimerOrBlockTask+0x98>)
 8012486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801248a:	601a      	str	r2, [r3, #0]
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	f3bf 8f6f 	isb	sy
}
 8012494:	e001      	b.n	801249a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012496:	f7ff f9f9 	bl	801188c <xTaskResumeAll>
}
 801249a:	bf00      	nop
 801249c:	3710      	adds	r7, #16
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	200015ec 	.word	0x200015ec
 80124a8:	200015f0 	.word	0x200015f0
 80124ac:	e000ed04 	.word	0xe000ed04

080124b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80124b0:	b480      	push	{r7}
 80124b2:	b085      	sub	sp, #20
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80124b8:	4b0e      	ldr	r3, [pc, #56]	; (80124f4 <prvGetNextExpireTime+0x44>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d101      	bne.n	80124c6 <prvGetNextExpireTime+0x16>
 80124c2:	2201      	movs	r2, #1
 80124c4:	e000      	b.n	80124c8 <prvGetNextExpireTime+0x18>
 80124c6:	2200      	movs	r2, #0
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d105      	bne.n	80124e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80124d4:	4b07      	ldr	r3, [pc, #28]	; (80124f4 <prvGetNextExpireTime+0x44>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	60fb      	str	r3, [r7, #12]
 80124de:	e001      	b.n	80124e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80124e0:	2300      	movs	r3, #0
 80124e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80124e4:	68fb      	ldr	r3, [r7, #12]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3714      	adds	r7, #20
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr
 80124f2:	bf00      	nop
 80124f4:	200015e8 	.word	0x200015e8

080124f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012500:	f7ff fa62 	bl	80119c8 <xTaskGetTickCount>
 8012504:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012506:	4b0b      	ldr	r3, [pc, #44]	; (8012534 <prvSampleTimeNow+0x3c>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	68fa      	ldr	r2, [r7, #12]
 801250c:	429a      	cmp	r2, r3
 801250e:	d205      	bcs.n	801251c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012510:	f000 f936 	bl	8012780 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2201      	movs	r2, #1
 8012518:	601a      	str	r2, [r3, #0]
 801251a:	e002      	b.n	8012522 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2200      	movs	r2, #0
 8012520:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012522:	4a04      	ldr	r2, [pc, #16]	; (8012534 <prvSampleTimeNow+0x3c>)
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012528:	68fb      	ldr	r3, [r7, #12]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	200015f8 	.word	0x200015f8

08012538 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b086      	sub	sp, #24
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
 8012544:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012546:	2300      	movs	r3, #0
 8012548:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	68fa      	ldr	r2, [r7, #12]
 8012554:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012556:	68ba      	ldr	r2, [r7, #8]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	429a      	cmp	r2, r3
 801255c:	d812      	bhi.n	8012584 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	1ad2      	subs	r2, r2, r3
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	699b      	ldr	r3, [r3, #24]
 8012568:	429a      	cmp	r2, r3
 801256a:	d302      	bcc.n	8012572 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801256c:	2301      	movs	r3, #1
 801256e:	617b      	str	r3, [r7, #20]
 8012570:	e01b      	b.n	80125aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012572:	4b10      	ldr	r3, [pc, #64]	; (80125b4 <prvInsertTimerInActiveList+0x7c>)
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	3304      	adds	r3, #4
 801257a:	4619      	mov	r1, r3
 801257c:	4610      	mov	r0, r2
 801257e:	f7fd ff50 	bl	8010422 <vListInsert>
 8012582:	e012      	b.n	80125aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012584:	687a      	ldr	r2, [r7, #4]
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	429a      	cmp	r2, r3
 801258a:	d206      	bcs.n	801259a <prvInsertTimerInActiveList+0x62>
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	429a      	cmp	r2, r3
 8012592:	d302      	bcc.n	801259a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012594:	2301      	movs	r3, #1
 8012596:	617b      	str	r3, [r7, #20]
 8012598:	e007      	b.n	80125aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801259a:	4b07      	ldr	r3, [pc, #28]	; (80125b8 <prvInsertTimerInActiveList+0x80>)
 801259c:	681a      	ldr	r2, [r3, #0]
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	3304      	adds	r3, #4
 80125a2:	4619      	mov	r1, r3
 80125a4:	4610      	mov	r0, r2
 80125a6:	f7fd ff3c 	bl	8010422 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80125aa:	697b      	ldr	r3, [r7, #20]
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3718      	adds	r7, #24
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	200015ec 	.word	0x200015ec
 80125b8:	200015e8 	.word	0x200015e8

080125bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b08e      	sub	sp, #56	; 0x38
 80125c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80125c2:	e0ca      	b.n	801275a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	da18      	bge.n	80125fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80125ca:	1d3b      	adds	r3, r7, #4
 80125cc:	3304      	adds	r3, #4
 80125ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80125d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d10a      	bne.n	80125ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80125d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125da:	f383 8811 	msr	BASEPRI, r3
 80125de:	f3bf 8f6f 	isb	sy
 80125e2:	f3bf 8f4f 	dsb	sy
 80125e6:	61fb      	str	r3, [r7, #28]
}
 80125e8:	bf00      	nop
 80125ea:	e7fe      	b.n	80125ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80125ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125f2:	6850      	ldr	r0, [r2, #4]
 80125f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125f6:	6892      	ldr	r2, [r2, #8]
 80125f8:	4611      	mov	r1, r2
 80125fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f2c0 80aa 	blt.w	8012758 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260a:	695b      	ldr	r3, [r3, #20]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d004      	beq.n	801261a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012612:	3304      	adds	r3, #4
 8012614:	4618      	mov	r0, r3
 8012616:	f7fd ff3d 	bl	8010494 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801261a:	463b      	mov	r3, r7
 801261c:	4618      	mov	r0, r3
 801261e:	f7ff ff6b 	bl	80124f8 <prvSampleTimeNow>
 8012622:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b09      	cmp	r3, #9
 8012628:	f200 8097 	bhi.w	801275a <prvProcessReceivedCommands+0x19e>
 801262c:	a201      	add	r2, pc, #4	; (adr r2, 8012634 <prvProcessReceivedCommands+0x78>)
 801262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012632:	bf00      	nop
 8012634:	0801265d 	.word	0x0801265d
 8012638:	0801265d 	.word	0x0801265d
 801263c:	0801265d 	.word	0x0801265d
 8012640:	080126d1 	.word	0x080126d1
 8012644:	080126e5 	.word	0x080126e5
 8012648:	0801272f 	.word	0x0801272f
 801264c:	0801265d 	.word	0x0801265d
 8012650:	0801265d 	.word	0x0801265d
 8012654:	080126d1 	.word	0x080126d1
 8012658:	080126e5 	.word	0x080126e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012662:	f043 0301 	orr.w	r3, r3, #1
 8012666:	b2da      	uxtb	r2, r3
 8012668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801266e:	68ba      	ldr	r2, [r7, #8]
 8012670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012672:	699b      	ldr	r3, [r3, #24]
 8012674:	18d1      	adds	r1, r2, r3
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801267a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801267c:	f7ff ff5c 	bl	8012538 <prvInsertTimerInActiveList>
 8012680:	4603      	mov	r3, r0
 8012682:	2b00      	cmp	r3, #0
 8012684:	d069      	beq.n	801275a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012688:	6a1b      	ldr	r3, [r3, #32]
 801268a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801268c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012694:	f003 0304 	and.w	r3, r3, #4
 8012698:	2b00      	cmp	r3, #0
 801269a:	d05e      	beq.n	801275a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801269c:	68ba      	ldr	r2, [r7, #8]
 801269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a0:	699b      	ldr	r3, [r3, #24]
 80126a2:	441a      	add	r2, r3
 80126a4:	2300      	movs	r3, #0
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	2300      	movs	r3, #0
 80126aa:	2100      	movs	r1, #0
 80126ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126ae:	f7ff fe05 	bl	80122bc <xTimerGenericCommand>
 80126b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80126b4:	6a3b      	ldr	r3, [r7, #32]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d14f      	bne.n	801275a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80126ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126be:	f383 8811 	msr	BASEPRI, r3
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	61bb      	str	r3, [r7, #24]
}
 80126cc:	bf00      	nop
 80126ce:	e7fe      	b.n	80126ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80126d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126d6:	f023 0301 	bic.w	r3, r3, #1
 80126da:	b2da      	uxtb	r2, r3
 80126dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80126e2:	e03a      	b.n	801275a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80126e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126ea:	f043 0301 	orr.w	r3, r3, #1
 80126ee:	b2da      	uxtb	r2, r3
 80126f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80126f6:	68ba      	ldr	r2, [r7, #8]
 80126f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80126fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fe:	699b      	ldr	r3, [r3, #24]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10a      	bne.n	801271a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	617b      	str	r3, [r7, #20]
}
 8012716:	bf00      	nop
 8012718:	e7fe      	b.n	8012718 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271c:	699a      	ldr	r2, [r3, #24]
 801271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012720:	18d1      	adds	r1, r2, r3
 8012722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012728:	f7ff ff06 	bl	8012538 <prvInsertTimerInActiveList>
					break;
 801272c:	e015      	b.n	801275a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012734:	f003 0302 	and.w	r3, r3, #2
 8012738:	2b00      	cmp	r3, #0
 801273a:	d103      	bne.n	8012744 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801273c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801273e:	f000 fbdf 	bl	8012f00 <vPortFree>
 8012742:	e00a      	b.n	801275a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801274a:	f023 0301 	bic.w	r3, r3, #1
 801274e:	b2da      	uxtb	r2, r3
 8012750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012756:	e000      	b.n	801275a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012758:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801275a:	4b08      	ldr	r3, [pc, #32]	; (801277c <prvProcessReceivedCommands+0x1c0>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	1d39      	adds	r1, r7, #4
 8012760:	2200      	movs	r2, #0
 8012762:	4618      	mov	r0, r3
 8012764:	f7fe fa8e 	bl	8010c84 <xQueueReceive>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	f47f af2a 	bne.w	80125c4 <prvProcessReceivedCommands+0x8>
	}
}
 8012770:	bf00      	nop
 8012772:	bf00      	nop
 8012774:	3730      	adds	r7, #48	; 0x30
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	200015f0 	.word	0x200015f0

08012780 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b088      	sub	sp, #32
 8012784:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012786:	e048      	b.n	801281a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012788:	4b2d      	ldr	r3, [pc, #180]	; (8012840 <prvSwitchTimerLists+0xc0>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012792:	4b2b      	ldr	r3, [pc, #172]	; (8012840 <prvSwitchTimerLists+0xc0>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	3304      	adds	r3, #4
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7fd fe77 	bl	8010494 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6a1b      	ldr	r3, [r3, #32]
 80127aa:	68f8      	ldr	r0, [r7, #12]
 80127ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127b4:	f003 0304 	and.w	r3, r3, #4
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d02e      	beq.n	801281a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	699b      	ldr	r3, [r3, #24]
 80127c0:	693a      	ldr	r2, [r7, #16]
 80127c2:	4413      	add	r3, r2
 80127c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80127c6:	68ba      	ldr	r2, [r7, #8]
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d90e      	bls.n	80127ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	68ba      	ldr	r2, [r7, #8]
 80127d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	68fa      	ldr	r2, [r7, #12]
 80127d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80127da:	4b19      	ldr	r3, [pc, #100]	; (8012840 <prvSwitchTimerLists+0xc0>)
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	3304      	adds	r3, #4
 80127e2:	4619      	mov	r1, r3
 80127e4:	4610      	mov	r0, r2
 80127e6:	f7fd fe1c 	bl	8010422 <vListInsert>
 80127ea:	e016      	b.n	801281a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80127ec:	2300      	movs	r3, #0
 80127ee:	9300      	str	r3, [sp, #0]
 80127f0:	2300      	movs	r3, #0
 80127f2:	693a      	ldr	r2, [r7, #16]
 80127f4:	2100      	movs	r1, #0
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f7ff fd60 	bl	80122bc <xTimerGenericCommand>
 80127fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d10a      	bne.n	801281a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012808:	f383 8811 	msr	BASEPRI, r3
 801280c:	f3bf 8f6f 	isb	sy
 8012810:	f3bf 8f4f 	dsb	sy
 8012814:	603b      	str	r3, [r7, #0]
}
 8012816:	bf00      	nop
 8012818:	e7fe      	b.n	8012818 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801281a:	4b09      	ldr	r3, [pc, #36]	; (8012840 <prvSwitchTimerLists+0xc0>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d1b1      	bne.n	8012788 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012824:	4b06      	ldr	r3, [pc, #24]	; (8012840 <prvSwitchTimerLists+0xc0>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801282a:	4b06      	ldr	r3, [pc, #24]	; (8012844 <prvSwitchTimerLists+0xc4>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	4a04      	ldr	r2, [pc, #16]	; (8012840 <prvSwitchTimerLists+0xc0>)
 8012830:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012832:	4a04      	ldr	r2, [pc, #16]	; (8012844 <prvSwitchTimerLists+0xc4>)
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	6013      	str	r3, [r2, #0]
}
 8012838:	bf00      	nop
 801283a:	3718      	adds	r7, #24
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	200015e8 	.word	0x200015e8
 8012844:	200015ec 	.word	0x200015ec

08012848 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801284e:	f000 f969 	bl	8012b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012852:	4b15      	ldr	r3, [pc, #84]	; (80128a8 <prvCheckForValidListAndQueue+0x60>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d120      	bne.n	801289c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801285a:	4814      	ldr	r0, [pc, #80]	; (80128ac <prvCheckForValidListAndQueue+0x64>)
 801285c:	f7fd fd90 	bl	8010380 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012860:	4813      	ldr	r0, [pc, #76]	; (80128b0 <prvCheckForValidListAndQueue+0x68>)
 8012862:	f7fd fd8d 	bl	8010380 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012866:	4b13      	ldr	r3, [pc, #76]	; (80128b4 <prvCheckForValidListAndQueue+0x6c>)
 8012868:	4a10      	ldr	r2, [pc, #64]	; (80128ac <prvCheckForValidListAndQueue+0x64>)
 801286a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801286c:	4b12      	ldr	r3, [pc, #72]	; (80128b8 <prvCheckForValidListAndQueue+0x70>)
 801286e:	4a10      	ldr	r2, [pc, #64]	; (80128b0 <prvCheckForValidListAndQueue+0x68>)
 8012870:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012872:	2300      	movs	r3, #0
 8012874:	9300      	str	r3, [sp, #0]
 8012876:	4b11      	ldr	r3, [pc, #68]	; (80128bc <prvCheckForValidListAndQueue+0x74>)
 8012878:	4a11      	ldr	r2, [pc, #68]	; (80128c0 <prvCheckForValidListAndQueue+0x78>)
 801287a:	2110      	movs	r1, #16
 801287c:	200a      	movs	r0, #10
 801287e:	f7fd fe9b 	bl	80105b8 <xQueueGenericCreateStatic>
 8012882:	4603      	mov	r3, r0
 8012884:	4a08      	ldr	r2, [pc, #32]	; (80128a8 <prvCheckForValidListAndQueue+0x60>)
 8012886:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012888:	4b07      	ldr	r3, [pc, #28]	; (80128a8 <prvCheckForValidListAndQueue+0x60>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d005      	beq.n	801289c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012890:	4b05      	ldr	r3, [pc, #20]	; (80128a8 <prvCheckForValidListAndQueue+0x60>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	490b      	ldr	r1, [pc, #44]	; (80128c4 <prvCheckForValidListAndQueue+0x7c>)
 8012896:	4618      	mov	r0, r3
 8012898:	f7fe fc88 	bl	80111ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801289c:	f000 f972 	bl	8012b84 <vPortExitCritical>
}
 80128a0:	bf00      	nop
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	200015f0 	.word	0x200015f0
 80128ac:	200015c0 	.word	0x200015c0
 80128b0:	200015d4 	.word	0x200015d4
 80128b4:	200015e8 	.word	0x200015e8
 80128b8:	200015ec 	.word	0x200015ec
 80128bc:	2000169c 	.word	0x2000169c
 80128c0:	200015fc 	.word	0x200015fc
 80128c4:	08014290 	.word	0x08014290

080128c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80128c8:	b480      	push	{r7}
 80128ca:	b085      	sub	sp, #20
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	60f8      	str	r0, [r7, #12]
 80128d0:	60b9      	str	r1, [r7, #8]
 80128d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	3b04      	subs	r3, #4
 80128d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80128e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	3b04      	subs	r3, #4
 80128e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	f023 0201 	bic.w	r2, r3, #1
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	3b04      	subs	r3, #4
 80128f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80128f8:	4a0c      	ldr	r2, [pc, #48]	; (801292c <pxPortInitialiseStack+0x64>)
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	3b14      	subs	r3, #20
 8012902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	3b04      	subs	r3, #4
 801290e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f06f 0202 	mvn.w	r2, #2
 8012916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	3b20      	subs	r3, #32
 801291c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801291e:	68fb      	ldr	r3, [r7, #12]
}
 8012920:	4618      	mov	r0, r3
 8012922:	3714      	adds	r7, #20
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr
 801292c:	08012931 	.word	0x08012931

08012930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012930:	b480      	push	{r7}
 8012932:	b085      	sub	sp, #20
 8012934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012936:	2300      	movs	r3, #0
 8012938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801293a:	4b12      	ldr	r3, [pc, #72]	; (8012984 <prvTaskExitError+0x54>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012942:	d00a      	beq.n	801295a <prvTaskExitError+0x2a>
	__asm volatile
 8012944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012948:	f383 8811 	msr	BASEPRI, r3
 801294c:	f3bf 8f6f 	isb	sy
 8012950:	f3bf 8f4f 	dsb	sy
 8012954:	60fb      	str	r3, [r7, #12]
}
 8012956:	bf00      	nop
 8012958:	e7fe      	b.n	8012958 <prvTaskExitError+0x28>
	__asm volatile
 801295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801295e:	f383 8811 	msr	BASEPRI, r3
 8012962:	f3bf 8f6f 	isb	sy
 8012966:	f3bf 8f4f 	dsb	sy
 801296a:	60bb      	str	r3, [r7, #8]
}
 801296c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801296e:	bf00      	nop
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d0fc      	beq.n	8012970 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012976:	bf00      	nop
 8012978:	bf00      	nop
 801297a:	3714      	adds	r7, #20
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr
 8012984:	20000354 	.word	0x20000354
	...

08012990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012990:	4b07      	ldr	r3, [pc, #28]	; (80129b0 <pxCurrentTCBConst2>)
 8012992:	6819      	ldr	r1, [r3, #0]
 8012994:	6808      	ldr	r0, [r1, #0]
 8012996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801299a:	f380 8809 	msr	PSP, r0
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	f04f 0000 	mov.w	r0, #0
 80129a6:	f380 8811 	msr	BASEPRI, r0
 80129aa:	4770      	bx	lr
 80129ac:	f3af 8000 	nop.w

080129b0 <pxCurrentTCBConst2>:
 80129b0:	200010c0 	.word	0x200010c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80129b4:	bf00      	nop
 80129b6:	bf00      	nop

080129b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80129b8:	4808      	ldr	r0, [pc, #32]	; (80129dc <prvPortStartFirstTask+0x24>)
 80129ba:	6800      	ldr	r0, [r0, #0]
 80129bc:	6800      	ldr	r0, [r0, #0]
 80129be:	f380 8808 	msr	MSP, r0
 80129c2:	f04f 0000 	mov.w	r0, #0
 80129c6:	f380 8814 	msr	CONTROL, r0
 80129ca:	b662      	cpsie	i
 80129cc:	b661      	cpsie	f
 80129ce:	f3bf 8f4f 	dsb	sy
 80129d2:	f3bf 8f6f 	isb	sy
 80129d6:	df00      	svc	0
 80129d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80129da:	bf00      	nop
 80129dc:	e000ed08 	.word	0xe000ed08

080129e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80129e6:	4b46      	ldr	r3, [pc, #280]	; (8012b00 <xPortStartScheduler+0x120>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4a46      	ldr	r2, [pc, #280]	; (8012b04 <xPortStartScheduler+0x124>)
 80129ec:	4293      	cmp	r3, r2
 80129ee:	d10a      	bne.n	8012a06 <xPortStartScheduler+0x26>
	__asm volatile
 80129f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129f4:	f383 8811 	msr	BASEPRI, r3
 80129f8:	f3bf 8f6f 	isb	sy
 80129fc:	f3bf 8f4f 	dsb	sy
 8012a00:	613b      	str	r3, [r7, #16]
}
 8012a02:	bf00      	nop
 8012a04:	e7fe      	b.n	8012a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012a06:	4b3e      	ldr	r3, [pc, #248]	; (8012b00 <xPortStartScheduler+0x120>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4a3f      	ldr	r2, [pc, #252]	; (8012b08 <xPortStartScheduler+0x128>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d10a      	bne.n	8012a26 <xPortStartScheduler+0x46>
	__asm volatile
 8012a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a14:	f383 8811 	msr	BASEPRI, r3
 8012a18:	f3bf 8f6f 	isb	sy
 8012a1c:	f3bf 8f4f 	dsb	sy
 8012a20:	60fb      	str	r3, [r7, #12]
}
 8012a22:	bf00      	nop
 8012a24:	e7fe      	b.n	8012a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012a26:	4b39      	ldr	r3, [pc, #228]	; (8012b0c <xPortStartScheduler+0x12c>)
 8012a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	b2db      	uxtb	r3, r3
 8012a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	22ff      	movs	r2, #255	; 0xff
 8012a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012a40:	78fb      	ldrb	r3, [r7, #3]
 8012a42:	b2db      	uxtb	r3, r3
 8012a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012a48:	b2da      	uxtb	r2, r3
 8012a4a:	4b31      	ldr	r3, [pc, #196]	; (8012b10 <xPortStartScheduler+0x130>)
 8012a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012a4e:	4b31      	ldr	r3, [pc, #196]	; (8012b14 <xPortStartScheduler+0x134>)
 8012a50:	2207      	movs	r2, #7
 8012a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012a54:	e009      	b.n	8012a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012a56:	4b2f      	ldr	r3, [pc, #188]	; (8012b14 <xPortStartScheduler+0x134>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	3b01      	subs	r3, #1
 8012a5c:	4a2d      	ldr	r2, [pc, #180]	; (8012b14 <xPortStartScheduler+0x134>)
 8012a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012a60:	78fb      	ldrb	r3, [r7, #3]
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	005b      	lsls	r3, r3, #1
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012a6a:	78fb      	ldrb	r3, [r7, #3]
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a72:	2b80      	cmp	r3, #128	; 0x80
 8012a74:	d0ef      	beq.n	8012a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012a76:	4b27      	ldr	r3, [pc, #156]	; (8012b14 <xPortStartScheduler+0x134>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f1c3 0307 	rsb	r3, r3, #7
 8012a7e:	2b04      	cmp	r3, #4
 8012a80:	d00a      	beq.n	8012a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8012a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a86:	f383 8811 	msr	BASEPRI, r3
 8012a8a:	f3bf 8f6f 	isb	sy
 8012a8e:	f3bf 8f4f 	dsb	sy
 8012a92:	60bb      	str	r3, [r7, #8]
}
 8012a94:	bf00      	nop
 8012a96:	e7fe      	b.n	8012a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012a98:	4b1e      	ldr	r3, [pc, #120]	; (8012b14 <xPortStartScheduler+0x134>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	021b      	lsls	r3, r3, #8
 8012a9e:	4a1d      	ldr	r2, [pc, #116]	; (8012b14 <xPortStartScheduler+0x134>)
 8012aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012aa2:	4b1c      	ldr	r3, [pc, #112]	; (8012b14 <xPortStartScheduler+0x134>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012aaa:	4a1a      	ldr	r2, [pc, #104]	; (8012b14 <xPortStartScheduler+0x134>)
 8012aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	b2da      	uxtb	r2, r3
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012ab6:	4b18      	ldr	r3, [pc, #96]	; (8012b18 <xPortStartScheduler+0x138>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	4a17      	ldr	r2, [pc, #92]	; (8012b18 <xPortStartScheduler+0x138>)
 8012abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012ac2:	4b15      	ldr	r3, [pc, #84]	; (8012b18 <xPortStartScheduler+0x138>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	4a14      	ldr	r2, [pc, #80]	; (8012b18 <xPortStartScheduler+0x138>)
 8012ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012ace:	f000 f8dd 	bl	8012c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012ad2:	4b12      	ldr	r3, [pc, #72]	; (8012b1c <xPortStartScheduler+0x13c>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012ad8:	f000 f8fc 	bl	8012cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012adc:	4b10      	ldr	r3, [pc, #64]	; (8012b20 <xPortStartScheduler+0x140>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	4a0f      	ldr	r2, [pc, #60]	; (8012b20 <xPortStartScheduler+0x140>)
 8012ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012ae8:	f7ff ff66 	bl	80129b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012aec:	f7ff f848 	bl	8011b80 <vTaskSwitchContext>
	prvTaskExitError();
 8012af0:	f7ff ff1e 	bl	8012930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012af4:	2300      	movs	r3, #0
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3718      	adds	r7, #24
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	e000ed00 	.word	0xe000ed00
 8012b04:	410fc271 	.word	0x410fc271
 8012b08:	410fc270 	.word	0x410fc270
 8012b0c:	e000e400 	.word	0xe000e400
 8012b10:	200016ec 	.word	0x200016ec
 8012b14:	200016f0 	.word	0x200016f0
 8012b18:	e000ed20 	.word	0xe000ed20
 8012b1c:	20000354 	.word	0x20000354
 8012b20:	e000ef34 	.word	0xe000ef34

08012b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
	__asm volatile
 8012b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b2e:	f383 8811 	msr	BASEPRI, r3
 8012b32:	f3bf 8f6f 	isb	sy
 8012b36:	f3bf 8f4f 	dsb	sy
 8012b3a:	607b      	str	r3, [r7, #4]
}
 8012b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012b3e:	4b0f      	ldr	r3, [pc, #60]	; (8012b7c <vPortEnterCritical+0x58>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	3301      	adds	r3, #1
 8012b44:	4a0d      	ldr	r2, [pc, #52]	; (8012b7c <vPortEnterCritical+0x58>)
 8012b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012b48:	4b0c      	ldr	r3, [pc, #48]	; (8012b7c <vPortEnterCritical+0x58>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d10f      	bne.n	8012b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012b50:	4b0b      	ldr	r3, [pc, #44]	; (8012b80 <vPortEnterCritical+0x5c>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d00a      	beq.n	8012b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8012b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b5e:	f383 8811 	msr	BASEPRI, r3
 8012b62:	f3bf 8f6f 	isb	sy
 8012b66:	f3bf 8f4f 	dsb	sy
 8012b6a:	603b      	str	r3, [r7, #0]
}
 8012b6c:	bf00      	nop
 8012b6e:	e7fe      	b.n	8012b6e <vPortEnterCritical+0x4a>
	}
}
 8012b70:	bf00      	nop
 8012b72:	370c      	adds	r7, #12
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr
 8012b7c:	20000354 	.word	0x20000354
 8012b80:	e000ed04 	.word	0xe000ed04

08012b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012b8a:	4b12      	ldr	r3, [pc, #72]	; (8012bd4 <vPortExitCritical+0x50>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d10a      	bne.n	8012ba8 <vPortExitCritical+0x24>
	__asm volatile
 8012b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b96:	f383 8811 	msr	BASEPRI, r3
 8012b9a:	f3bf 8f6f 	isb	sy
 8012b9e:	f3bf 8f4f 	dsb	sy
 8012ba2:	607b      	str	r3, [r7, #4]
}
 8012ba4:	bf00      	nop
 8012ba6:	e7fe      	b.n	8012ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012ba8:	4b0a      	ldr	r3, [pc, #40]	; (8012bd4 <vPortExitCritical+0x50>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	3b01      	subs	r3, #1
 8012bae:	4a09      	ldr	r2, [pc, #36]	; (8012bd4 <vPortExitCritical+0x50>)
 8012bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012bb2:	4b08      	ldr	r3, [pc, #32]	; (8012bd4 <vPortExitCritical+0x50>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d105      	bne.n	8012bc6 <vPortExitCritical+0x42>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	f383 8811 	msr	BASEPRI, r3
}
 8012bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012bc6:	bf00      	nop
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr
 8012bd2:	bf00      	nop
 8012bd4:	20000354 	.word	0x20000354
	...

08012be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012be0:	f3ef 8009 	mrs	r0, PSP
 8012be4:	f3bf 8f6f 	isb	sy
 8012be8:	4b15      	ldr	r3, [pc, #84]	; (8012c40 <pxCurrentTCBConst>)
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	f01e 0f10 	tst.w	lr, #16
 8012bf0:	bf08      	it	eq
 8012bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfa:	6010      	str	r0, [r2, #0]
 8012bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012c04:	f380 8811 	msr	BASEPRI, r0
 8012c08:	f3bf 8f4f 	dsb	sy
 8012c0c:	f3bf 8f6f 	isb	sy
 8012c10:	f7fe ffb6 	bl	8011b80 <vTaskSwitchContext>
 8012c14:	f04f 0000 	mov.w	r0, #0
 8012c18:	f380 8811 	msr	BASEPRI, r0
 8012c1c:	bc09      	pop	{r0, r3}
 8012c1e:	6819      	ldr	r1, [r3, #0]
 8012c20:	6808      	ldr	r0, [r1, #0]
 8012c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c26:	f01e 0f10 	tst.w	lr, #16
 8012c2a:	bf08      	it	eq
 8012c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012c30:	f380 8809 	msr	PSP, r0
 8012c34:	f3bf 8f6f 	isb	sy
 8012c38:	4770      	bx	lr
 8012c3a:	bf00      	nop
 8012c3c:	f3af 8000 	nop.w

08012c40 <pxCurrentTCBConst>:
 8012c40:	200010c0 	.word	0x200010c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012c44:	bf00      	nop
 8012c46:	bf00      	nop

08012c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8012c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c52:	f383 8811 	msr	BASEPRI, r3
 8012c56:	f3bf 8f6f 	isb	sy
 8012c5a:	f3bf 8f4f 	dsb	sy
 8012c5e:	607b      	str	r3, [r7, #4]
}
 8012c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012c62:	f7fe fed3 	bl	8011a0c <xTaskIncrementTick>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d003      	beq.n	8012c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012c6c:	4b06      	ldr	r3, [pc, #24]	; (8012c88 <xPortSysTickHandler+0x40>)
 8012c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c72:	601a      	str	r2, [r3, #0]
 8012c74:	2300      	movs	r3, #0
 8012c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	f383 8811 	msr	BASEPRI, r3
}
 8012c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012c80:	bf00      	nop
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	e000ed04 	.word	0xe000ed04

08012c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012c90:	4b0b      	ldr	r3, [pc, #44]	; (8012cc0 <vPortSetupTimerInterrupt+0x34>)
 8012c92:	2200      	movs	r2, #0
 8012c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012c96:	4b0b      	ldr	r3, [pc, #44]	; (8012cc4 <vPortSetupTimerInterrupt+0x38>)
 8012c98:	2200      	movs	r2, #0
 8012c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012c9c:	4b0a      	ldr	r3, [pc, #40]	; (8012cc8 <vPortSetupTimerInterrupt+0x3c>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a0a      	ldr	r2, [pc, #40]	; (8012ccc <vPortSetupTimerInterrupt+0x40>)
 8012ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ca6:	099b      	lsrs	r3, r3, #6
 8012ca8:	4a09      	ldr	r2, [pc, #36]	; (8012cd0 <vPortSetupTimerInterrupt+0x44>)
 8012caa:	3b01      	subs	r3, #1
 8012cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012cae:	4b04      	ldr	r3, [pc, #16]	; (8012cc0 <vPortSetupTimerInterrupt+0x34>)
 8012cb0:	2207      	movs	r2, #7
 8012cb2:	601a      	str	r2, [r3, #0]
}
 8012cb4:	bf00      	nop
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	e000e010 	.word	0xe000e010
 8012cc4:	e000e018 	.word	0xe000e018
 8012cc8:	20000000 	.word	0x20000000
 8012ccc:	10624dd3 	.word	0x10624dd3
 8012cd0:	e000e014 	.word	0xe000e014

08012cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012ce4 <vPortEnableVFP+0x10>
 8012cd8:	6801      	ldr	r1, [r0, #0]
 8012cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012cde:	6001      	str	r1, [r0, #0]
 8012ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012ce2:	bf00      	nop
 8012ce4:	e000ed88 	.word	0xe000ed88

08012ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012ce8:	b480      	push	{r7}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012cee:	f3ef 8305 	mrs	r3, IPSR
 8012cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2b0f      	cmp	r3, #15
 8012cf8:	d914      	bls.n	8012d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012cfa:	4a17      	ldr	r2, [pc, #92]	; (8012d58 <vPortValidateInterruptPriority+0x70>)
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	4413      	add	r3, r2
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012d04:	4b15      	ldr	r3, [pc, #84]	; (8012d5c <vPortValidateInterruptPriority+0x74>)
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	7afa      	ldrb	r2, [r7, #11]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d20a      	bcs.n	8012d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d12:	f383 8811 	msr	BASEPRI, r3
 8012d16:	f3bf 8f6f 	isb	sy
 8012d1a:	f3bf 8f4f 	dsb	sy
 8012d1e:	607b      	str	r3, [r7, #4]
}
 8012d20:	bf00      	nop
 8012d22:	e7fe      	b.n	8012d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012d24:	4b0e      	ldr	r3, [pc, #56]	; (8012d60 <vPortValidateInterruptPriority+0x78>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012d2c:	4b0d      	ldr	r3, [pc, #52]	; (8012d64 <vPortValidateInterruptPriority+0x7c>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d90a      	bls.n	8012d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	603b      	str	r3, [r7, #0]
}
 8012d46:	bf00      	nop
 8012d48:	e7fe      	b.n	8012d48 <vPortValidateInterruptPriority+0x60>
	}
 8012d4a:	bf00      	nop
 8012d4c:	3714      	adds	r7, #20
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop
 8012d58:	e000e3f0 	.word	0xe000e3f0
 8012d5c:	200016ec 	.word	0x200016ec
 8012d60:	e000ed0c 	.word	0xe000ed0c
 8012d64:	200016f0 	.word	0x200016f0

08012d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b08a      	sub	sp, #40	; 0x28
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012d70:	2300      	movs	r3, #0
 8012d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012d74:	f7fe fd7c 	bl	8011870 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012d78:	4b5b      	ldr	r3, [pc, #364]	; (8012ee8 <pvPortMalloc+0x180>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d101      	bne.n	8012d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012d80:	f000 f920 	bl	8012fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d84:	4b59      	ldr	r3, [pc, #356]	; (8012eec <pvPortMalloc+0x184>)
 8012d86:	681a      	ldr	r2, [r3, #0]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4013      	ands	r3, r2
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	f040 8093 	bne.w	8012eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d01d      	beq.n	8012dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012d98:	2208      	movs	r2, #8
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f003 0307 	and.w	r3, r3, #7
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d014      	beq.n	8012dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f023 0307 	bic.w	r3, r3, #7
 8012db0:	3308      	adds	r3, #8
 8012db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f003 0307 	and.w	r3, r3, #7
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d00a      	beq.n	8012dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8012dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc2:	f383 8811 	msr	BASEPRI, r3
 8012dc6:	f3bf 8f6f 	isb	sy
 8012dca:	f3bf 8f4f 	dsb	sy
 8012dce:	617b      	str	r3, [r7, #20]
}
 8012dd0:	bf00      	nop
 8012dd2:	e7fe      	b.n	8012dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d06e      	beq.n	8012eb8 <pvPortMalloc+0x150>
 8012dda:	4b45      	ldr	r3, [pc, #276]	; (8012ef0 <pvPortMalloc+0x188>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d869      	bhi.n	8012eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012de4:	4b43      	ldr	r3, [pc, #268]	; (8012ef4 <pvPortMalloc+0x18c>)
 8012de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012de8:	4b42      	ldr	r3, [pc, #264]	; (8012ef4 <pvPortMalloc+0x18c>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012dee:	e004      	b.n	8012dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d903      	bls.n	8012e0c <pvPortMalloc+0xa4>
 8012e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d1f1      	bne.n	8012df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012e0c:	4b36      	ldr	r3, [pc, #216]	; (8012ee8 <pvPortMalloc+0x180>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d050      	beq.n	8012eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012e16:	6a3b      	ldr	r3, [r7, #32]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2208      	movs	r2, #8
 8012e1c:	4413      	add	r3, r2
 8012e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	6a3b      	ldr	r3, [r7, #32]
 8012e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e2a:	685a      	ldr	r2, [r3, #4]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	1ad2      	subs	r2, r2, r3
 8012e30:	2308      	movs	r3, #8
 8012e32:	005b      	lsls	r3, r3, #1
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d91f      	bls.n	8012e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	f003 0307 	and.w	r3, r3, #7
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d00a      	beq.n	8012e60 <pvPortMalloc+0xf8>
	__asm volatile
 8012e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e4e:	f383 8811 	msr	BASEPRI, r3
 8012e52:	f3bf 8f6f 	isb	sy
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	613b      	str	r3, [r7, #16]
}
 8012e5c:	bf00      	nop
 8012e5e:	e7fe      	b.n	8012e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e62:	685a      	ldr	r2, [r3, #4]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	1ad2      	subs	r2, r2, r3
 8012e68:	69bb      	ldr	r3, [r7, #24]
 8012e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6e:	687a      	ldr	r2, [r7, #4]
 8012e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012e72:	69b8      	ldr	r0, [r7, #24]
 8012e74:	f000 f908 	bl	8013088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012e78:	4b1d      	ldr	r3, [pc, #116]	; (8012ef0 <pvPortMalloc+0x188>)
 8012e7a:	681a      	ldr	r2, [r3, #0]
 8012e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	1ad3      	subs	r3, r2, r3
 8012e82:	4a1b      	ldr	r2, [pc, #108]	; (8012ef0 <pvPortMalloc+0x188>)
 8012e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012e86:	4b1a      	ldr	r3, [pc, #104]	; (8012ef0 <pvPortMalloc+0x188>)
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	4b1b      	ldr	r3, [pc, #108]	; (8012ef8 <pvPortMalloc+0x190>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d203      	bcs.n	8012e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012e92:	4b17      	ldr	r3, [pc, #92]	; (8012ef0 <pvPortMalloc+0x188>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	4a18      	ldr	r2, [pc, #96]	; (8012ef8 <pvPortMalloc+0x190>)
 8012e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9c:	685a      	ldr	r2, [r3, #4]
 8012e9e:	4b13      	ldr	r3, [pc, #76]	; (8012eec <pvPortMalloc+0x184>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	431a      	orrs	r2, r3
 8012ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eaa:	2200      	movs	r2, #0
 8012eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012eae:	4b13      	ldr	r3, [pc, #76]	; (8012efc <pvPortMalloc+0x194>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	4a11      	ldr	r2, [pc, #68]	; (8012efc <pvPortMalloc+0x194>)
 8012eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012eb8:	f7fe fce8 	bl	801188c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	f003 0307 	and.w	r3, r3, #7
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d00a      	beq.n	8012edc <pvPortMalloc+0x174>
	__asm volatile
 8012ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eca:	f383 8811 	msr	BASEPRI, r3
 8012ece:	f3bf 8f6f 	isb	sy
 8012ed2:	f3bf 8f4f 	dsb	sy
 8012ed6:	60fb      	str	r3, [r7, #12]
}
 8012ed8:	bf00      	nop
 8012eda:	e7fe      	b.n	8012eda <pvPortMalloc+0x172>
	return pvReturn;
 8012edc:	69fb      	ldr	r3, [r7, #28]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3728      	adds	r7, #40	; 0x28
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	200052fc 	.word	0x200052fc
 8012eec:	20005310 	.word	0x20005310
 8012ef0:	20005300 	.word	0x20005300
 8012ef4:	200052f4 	.word	0x200052f4
 8012ef8:	20005304 	.word	0x20005304
 8012efc:	20005308 	.word	0x20005308

08012f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b086      	sub	sp, #24
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d04d      	beq.n	8012fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012f12:	2308      	movs	r3, #8
 8012f14:	425b      	negs	r3, r3
 8012f16:	697a      	ldr	r2, [r7, #20]
 8012f18:	4413      	add	r3, r2
 8012f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	685a      	ldr	r2, [r3, #4]
 8012f24:	4b24      	ldr	r3, [pc, #144]	; (8012fb8 <vPortFree+0xb8>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4013      	ands	r3, r2
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d10a      	bne.n	8012f44 <vPortFree+0x44>
	__asm volatile
 8012f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f32:	f383 8811 	msr	BASEPRI, r3
 8012f36:	f3bf 8f6f 	isb	sy
 8012f3a:	f3bf 8f4f 	dsb	sy
 8012f3e:	60fb      	str	r3, [r7, #12]
}
 8012f40:	bf00      	nop
 8012f42:	e7fe      	b.n	8012f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d00a      	beq.n	8012f62 <vPortFree+0x62>
	__asm volatile
 8012f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f50:	f383 8811 	msr	BASEPRI, r3
 8012f54:	f3bf 8f6f 	isb	sy
 8012f58:	f3bf 8f4f 	dsb	sy
 8012f5c:	60bb      	str	r3, [r7, #8]
}
 8012f5e:	bf00      	nop
 8012f60:	e7fe      	b.n	8012f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	685a      	ldr	r2, [r3, #4]
 8012f66:	4b14      	ldr	r3, [pc, #80]	; (8012fb8 <vPortFree+0xb8>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	4013      	ands	r3, r2
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d01e      	beq.n	8012fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d11a      	bne.n	8012fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	685a      	ldr	r2, [r3, #4]
 8012f7c:	4b0e      	ldr	r3, [pc, #56]	; (8012fb8 <vPortFree+0xb8>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	43db      	mvns	r3, r3
 8012f82:	401a      	ands	r2, r3
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012f88:	f7fe fc72 	bl	8011870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	685a      	ldr	r2, [r3, #4]
 8012f90:	4b0a      	ldr	r3, [pc, #40]	; (8012fbc <vPortFree+0xbc>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	4413      	add	r3, r2
 8012f96:	4a09      	ldr	r2, [pc, #36]	; (8012fbc <vPortFree+0xbc>)
 8012f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012f9a:	6938      	ldr	r0, [r7, #16]
 8012f9c:	f000 f874 	bl	8013088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012fa0:	4b07      	ldr	r3, [pc, #28]	; (8012fc0 <vPortFree+0xc0>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	4a06      	ldr	r2, [pc, #24]	; (8012fc0 <vPortFree+0xc0>)
 8012fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012faa:	f7fe fc6f 	bl	801188c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012fae:	bf00      	nop
 8012fb0:	3718      	adds	r7, #24
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	20005310 	.word	0x20005310
 8012fbc:	20005300 	.word	0x20005300
 8012fc0:	2000530c 	.word	0x2000530c

08012fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012fd0:	4b27      	ldr	r3, [pc, #156]	; (8013070 <prvHeapInit+0xac>)
 8012fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	f003 0307 	and.w	r3, r3, #7
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d00c      	beq.n	8012ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	3307      	adds	r3, #7
 8012fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	f023 0307 	bic.w	r3, r3, #7
 8012fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012fec:	68ba      	ldr	r2, [r7, #8]
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	1ad3      	subs	r3, r2, r3
 8012ff2:	4a1f      	ldr	r2, [pc, #124]	; (8013070 <prvHeapInit+0xac>)
 8012ff4:	4413      	add	r3, r2
 8012ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012ffc:	4a1d      	ldr	r2, [pc, #116]	; (8013074 <prvHeapInit+0xb0>)
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013002:	4b1c      	ldr	r3, [pc, #112]	; (8013074 <prvHeapInit+0xb0>)
 8013004:	2200      	movs	r2, #0
 8013006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	68ba      	ldr	r2, [r7, #8]
 801300c:	4413      	add	r3, r2
 801300e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013010:	2208      	movs	r2, #8
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	1a9b      	subs	r3, r3, r2
 8013016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f023 0307 	bic.w	r3, r3, #7
 801301e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	4a15      	ldr	r2, [pc, #84]	; (8013078 <prvHeapInit+0xb4>)
 8013024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013026:	4b14      	ldr	r3, [pc, #80]	; (8013078 <prvHeapInit+0xb4>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2200      	movs	r2, #0
 801302c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801302e:	4b12      	ldr	r3, [pc, #72]	; (8013078 <prvHeapInit+0xb4>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	2200      	movs	r2, #0
 8013034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	1ad2      	subs	r2, r2, r3
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013044:	4b0c      	ldr	r3, [pc, #48]	; (8013078 <prvHeapInit+0xb4>)
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	4a0a      	ldr	r2, [pc, #40]	; (801307c <prvHeapInit+0xb8>)
 8013052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	685b      	ldr	r3, [r3, #4]
 8013058:	4a09      	ldr	r2, [pc, #36]	; (8013080 <prvHeapInit+0xbc>)
 801305a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801305c:	4b09      	ldr	r3, [pc, #36]	; (8013084 <prvHeapInit+0xc0>)
 801305e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013062:	601a      	str	r2, [r3, #0]
}
 8013064:	bf00      	nop
 8013066:	3714      	adds	r7, #20
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr
 8013070:	200016f4 	.word	0x200016f4
 8013074:	200052f4 	.word	0x200052f4
 8013078:	200052fc 	.word	0x200052fc
 801307c:	20005304 	.word	0x20005304
 8013080:	20005300 	.word	0x20005300
 8013084:	20005310 	.word	0x20005310

08013088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013088:	b480      	push	{r7}
 801308a:	b085      	sub	sp, #20
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013090:	4b28      	ldr	r3, [pc, #160]	; (8013134 <prvInsertBlockIntoFreeList+0xac>)
 8013092:	60fb      	str	r3, [r7, #12]
 8013094:	e002      	b.n	801309c <prvInsertBlockIntoFreeList+0x14>
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	60fb      	str	r3, [r7, #12]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	687a      	ldr	r2, [r7, #4]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d8f7      	bhi.n	8013096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	68ba      	ldr	r2, [r7, #8]
 80130b0:	4413      	add	r3, r2
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d108      	bne.n	80130ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	685a      	ldr	r2, [r3, #4]
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	441a      	add	r2, r3
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	68ba      	ldr	r2, [r7, #8]
 80130d4:	441a      	add	r2, r3
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d118      	bne.n	8013110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	4b15      	ldr	r3, [pc, #84]	; (8013138 <prvInsertBlockIntoFreeList+0xb0>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d00d      	beq.n	8013106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	685a      	ldr	r2, [r3, #4]
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	685b      	ldr	r3, [r3, #4]
 80130f4:	441a      	add	r2, r3
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	601a      	str	r2, [r3, #0]
 8013104:	e008      	b.n	8013118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013106:	4b0c      	ldr	r3, [pc, #48]	; (8013138 <prvInsertBlockIntoFreeList+0xb0>)
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	601a      	str	r2, [r3, #0]
 801310e:	e003      	b.n	8013118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681a      	ldr	r2, [r3, #0]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	429a      	cmp	r2, r3
 801311e:	d002      	beq.n	8013126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013126:	bf00      	nop
 8013128:	3714      	adds	r7, #20
 801312a:	46bd      	mov	sp, r7
 801312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop
 8013134:	200052f4 	.word	0x200052f4
 8013138:	200052fc 	.word	0x200052fc

0801313c <COM_Init>:
#include "COM.h"

extern osMessageQueueId_t xFIFO_COMHandle;

void COM_Init(void)
{
 801313c:	b480      	push	{r7}
 801313e:	af00      	add	r7, sp, #0

}
 8013140:	bf00      	nop
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr

0801314a <vTaskCOM>:

void vTaskCOM(void *argument)
{
 801314a:	b580      	push	{r7, lr}
 801314c:	b082      	sub	sp, #8
 801314e:	af00      	add	r7, sp, #0
 8013150:	6078      	str	r0, [r7, #4]
	COM_Init();
 8013152:	f7ff fff3 	bl	801313c <COM_Init>
	for(;;)
 8013156:	e7fe      	b.n	8013156 <vTaskCOM+0xc>

08013158 <DiagAppl_Init>:
 *      Author: lord448
 */


void DiagAppl_Init(void)
{
 8013158:	b480      	push	{r7}
 801315a:	af00      	add	r7, sp, #0

}
 801315c:	bf00      	nop
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr

08013166 <vTaskDiagAppl>:

void vTaskDiagAppl(void *argument)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b082      	sub	sp, #8
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
	DiagAppl_Init();
 801316e:	f7ff fff3 	bl	8013158 <DiagAppl_Init>
	for(;;)
 8013172:	e7fe      	b.n	8013172 <vTaskDiagAppl+0xc>

08013174 <DistanceSensor_Init>:

extern osMessageQueueId_t xFIFO_COMHandle;
extern osMessageQueueId_t xFIFO_DistanceHandle;

void DistanceSensor_Init(void)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c1;
 801317a:	4b3a      	ldr	r3, [pc, #232]	; (8013264 <DistanceSensor_Init+0xf0>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	4a3a      	ldr	r2, [pc, #232]	; (8013268 <DistanceSensor_Init+0xf4>)
 8013180:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = VL53L0X_ADDR;
 8013184:	4b37      	ldr	r3, [pc, #220]	; (8013264 <DistanceSensor_Init+0xf0>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2252      	movs	r2, #82	; 0x52
 801318a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	//Disable XSHUT
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 801318e:	2200      	movs	r2, #0
 8013190:	2180      	movs	r1, #128	; 0x80
 8013192:	4836      	ldr	r0, [pc, #216]	; (801326c <DistanceSensor_Init+0xf8>)
 8013194:	f7ef f90a 	bl	80023ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8013198:	2014      	movs	r0, #20
 801319a:	f7ee fad1 	bl	8001740 <HAL_Delay>

	//Enable XSHUT
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 801319e:	2201      	movs	r2, #1
 80131a0:	2180      	movs	r1, #128	; 0x80
 80131a2:	4832      	ldr	r0, [pc, #200]	; (801326c <DistanceSensor_Init+0xf8>)
 80131a4:	f7ef f902 	bl	80023ac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80131a8:	2014      	movs	r0, #20
 80131aa:	f7ee fac9 	bl	8001740 <HAL_Delay>

	VL53L0X_WaitDeviceBooted( Dev );
 80131ae:	4b2d      	ldr	r3, [pc, #180]	; (8013264 <DistanceSensor_Init+0xf0>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7f6 f8be 	bl	8009334 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80131b8:	4b2a      	ldr	r3, [pc, #168]	; (8013264 <DistanceSensor_Init+0xf0>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4618      	mov	r0, r3
 80131be:	f7f5 fdd3 	bl	8008d68 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80131c2:	4b28      	ldr	r3, [pc, #160]	; (8013264 <DistanceSensor_Init+0xf0>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7f5 ff32 	bl	8009030 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80131cc:	4b25      	ldr	r3, [pc, #148]	; (8013264 <DistanceSensor_Init+0xf0>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	1c7a      	adds	r2, r7, #1
 80131d2:	1cb9      	adds	r1, r7, #2
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7f6 fdcd 	bl	8009d74 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80131da:	4b22      	ldr	r3, [pc, #136]	; (8013264 <DistanceSensor_Init+0xf0>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	1cfa      	adds	r2, r7, #3
 80131e0:	1d39      	adds	r1, r7, #4
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7f7 fa54 	bl	800a690 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80131e8:	4b1e      	ldr	r3, [pc, #120]	; (8013264 <DistanceSensor_Init+0xf0>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2100      	movs	r1, #0
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7f6 f93e 	bl	8009470 <VL53L0X_SetDeviceMode>

	//Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80131f4:	4b1b      	ldr	r3, [pc, #108]	; (8013264 <DistanceSensor_Init+0xf0>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	2201      	movs	r2, #1
 80131fa:	2100      	movs	r1, #0
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f6 fbb3 	bl	8009968 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8013202:	4b18      	ldr	r3, [pc, #96]	; (8013264 <DistanceSensor_Init+0xf0>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	2201      	movs	r2, #1
 8013208:	2101      	movs	r1, #1
 801320a:	4618      	mov	r0, r3
 801320c:	f7f6 fbac 	bl	8009968 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8013210:	4b14      	ldr	r3, [pc, #80]	; (8013264 <DistanceSensor_Init+0xf0>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	f641 1299 	movw	r2, #6553	; 0x1999
 8013218:	2101      	movs	r1, #1
 801321a:	4618      	mov	r0, r3
 801321c:	f7f6 fc54 	bl	8009ac8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8013220:	4b10      	ldr	r3, [pc, #64]	; (8013264 <DistanceSensor_Init+0xf0>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8013228:	2100      	movs	r1, #0
 801322a:	4618      	mov	r0, r3
 801322c:	f7f6 fc4c 	bl	8009ac8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8013230:	4b0c      	ldr	r3, [pc, #48]	; (8013264 <DistanceSensor_Init+0xf0>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8013238:	4618      	mov	r0, r3
 801323a:	f7f6 f977 	bl	800952c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 801323e:	4b09      	ldr	r3, [pc, #36]	; (8013264 <DistanceSensor_Init+0xf0>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	2212      	movs	r2, #18
 8013244:	2100      	movs	r1, #0
 8013246:	4618      	mov	r0, r3
 8013248:	f7f6 f996 	bl	8009578 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 801324c:	4b05      	ldr	r3, [pc, #20]	; (8013264 <DistanceSensor_Init+0xf0>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	220e      	movs	r2, #14
 8013252:	2101      	movs	r1, #1
 8013254:	4618      	mov	r0, r3
 8013256:	f7f6 f98f 	bl	8009578 <VL53L0X_SetVcselPulsePeriod>
}
 801325a:	bf00      	nop
 801325c:	3708      	adds	r7, #8
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	20000358 	.word	0x20000358
 8013268:	20000440 	.word	0x20000440
 801326c:	40020400 	.word	0x40020400

08013270 <DistanceSensor_MainRunnable>:

void DistanceSensor_MainRunnable(void)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
	const uint32_t MeasureTolerance = 5;
 8013276:	2305      	movs	r3, #5
 8013278:	60fb      	str	r3, [r7, #12]
	const uint32_t Reference = 520;
 801327a:	f44f 7302 	mov.w	r3, #520	; 0x208
 801327e:	60bb      	str	r3, [r7, #8]
	static uint16_t distance, past_measure;
	PDU_t distance_PDU;

	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8013280:	4b1d      	ldr	r3, [pc, #116]	; (80132f8 <DistanceSensor_MainRunnable+0x88>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	491d      	ldr	r1, [pc, #116]	; (80132fc <DistanceSensor_MainRunnable+0x8c>)
 8013286:	4618      	mov	r0, r3
 8013288:	f7f7 f816 	bl	800a2b8 <VL53L0X_PerformSingleRangingMeasurement>
	if(RangingData.RangeStatus == 0)
 801328c:	4b1b      	ldr	r3, [pc, #108]	; (80132fc <DistanceSensor_MainRunnable+0x8c>)
 801328e:	7e1b      	ldrb	r3, [r3, #24]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d129      	bne.n	80132e8 <DistanceSensor_MainRunnable+0x78>
  {
		if(RangingData.RangeMilliMeter > past_measure+MeasureTolerance || RangingData.RangeMilliMeter < past_measure-MeasureTolerance)
 8013294:	4b19      	ldr	r3, [pc, #100]	; (80132fc <DistanceSensor_MainRunnable+0x8c>)
 8013296:	891b      	ldrh	r3, [r3, #8]
 8013298:	461a      	mov	r2, r3
 801329a:	4b19      	ldr	r3, [pc, #100]	; (8013300 <DistanceSensor_MainRunnable+0x90>)
 801329c:	881b      	ldrh	r3, [r3, #0]
 801329e:	4619      	mov	r1, r3
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	440b      	add	r3, r1
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d809      	bhi.n	80132bc <DistanceSensor_MainRunnable+0x4c>
 80132a8:	4b14      	ldr	r3, [pc, #80]	; (80132fc <DistanceSensor_MainRunnable+0x8c>)
 80132aa:	891b      	ldrh	r3, [r3, #8]
 80132ac:	461a      	mov	r2, r3
 80132ae:	4b14      	ldr	r3, [pc, #80]	; (8013300 <DistanceSensor_MainRunnable+0x90>)
 80132b0:	881b      	ldrh	r3, [r3, #0]
 80132b2:	4619      	mov	r1, r3
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	1acb      	subs	r3, r1, r3
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d215      	bcs.n	80132e8 <DistanceSensor_MainRunnable+0x78>
		{
			distance = Reference - RangingData.RangeMilliMeter;
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	b29a      	uxth	r2, r3
 80132c0:	4b0e      	ldr	r3, [pc, #56]	; (80132fc <DistanceSensor_MainRunnable+0x8c>)
 80132c2:	891b      	ldrh	r3, [r3, #8]
 80132c4:	1ad3      	subs	r3, r2, r3
 80132c6:	b29a      	uxth	r2, r3
 80132c8:	4b0e      	ldr	r3, [pc, #56]	; (8013304 <DistanceSensor_MainRunnable+0x94>)
 80132ca:	801a      	strh	r2, [r3, #0]
			//distance_PDU.rawData = distance;
			//distance_PDU.chunks[4] = 0; /*TODO: Add the message ID*/
			osMessageQueuePut(xFIFO_DistanceHandle, &distance, 0U, 0U); /*Sending to PID*/
 80132cc:	4b0e      	ldr	r3, [pc, #56]	; (8013308 <DistanceSensor_MainRunnable+0x98>)
 80132ce:	6818      	ldr	r0, [r3, #0]
 80132d0:	2300      	movs	r3, #0
 80132d2:	2200      	movs	r2, #0
 80132d4:	490b      	ldr	r1, [pc, #44]	; (8013304 <DistanceSensor_MainRunnable+0x94>)
 80132d6:	f7fc ff61 	bl	801019c <osMessageQueuePut>
			osMessageQueuePut(xFIFO_COMHandle, &distance_PDU, 0U, 0U); /*Sending to COM*/
 80132da:	4b0c      	ldr	r3, [pc, #48]	; (801330c <DistanceSensor_MainRunnable+0x9c>)
 80132dc:	6818      	ldr	r0, [r3, #0]
 80132de:	4639      	mov	r1, r7
 80132e0:	2300      	movs	r3, #0
 80132e2:	2200      	movs	r2, #0
 80132e4:	f7fc ff5a 	bl	801019c <osMessageQueuePut>
		}
	}
	past_measure = RangingData.RangeMilliMeter;
 80132e8:	4b04      	ldr	r3, [pc, #16]	; (80132fc <DistanceSensor_MainRunnable+0x8c>)
 80132ea:	891a      	ldrh	r2, [r3, #8]
 80132ec:	4b04      	ldr	r3, [pc, #16]	; (8013300 <DistanceSensor_MainRunnable+0x90>)
 80132ee:	801a      	strh	r2, [r3, #0]
}
 80132f0:	bf00      	nop
 80132f2:	3710      	adds	r7, #16
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	20000358 	.word	0x20000358
 80132fc:	200054a4 	.word	0x200054a4
 8013300:	200054c0 	.word	0x200054c0
 8013304:	200054c2 	.word	0x200054c2
 8013308:	20000864 	.word	0x20000864
 801330c:	20000860 	.word	0x20000860

08013310 <EcuM_Init>:
 *      Author: lord448
 */


void EcuM_Init(void)
{
 8013310:	b480      	push	{r7}
 8013312:	af00      	add	r7, sp, #0

}
 8013314:	bf00      	nop
 8013316:	46bd      	mov	sp, r7
 8013318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331c:	4770      	bx	lr

0801331e <vTaskEcuM>:

void vTaskEcuM(void *argument)
{
 801331e:	b580      	push	{r7, lr}
 8013320:	b082      	sub	sp, #8
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]
	EcuM_Init();
 8013326:	f7ff fff3 	bl	8013310 <EcuM_Init>
	for(;;)
 801332a:	e7fe      	b.n	801332a <vTaskEcuM+0xc>

0801332c <FAN_Init>:
 *  Created on: May 29, 2024
 *      Author: lord448
 */

void FAN_Init(void)
{
 801332c:	b480      	push	{r7}
 801332e:	af00      	add	r7, sp, #0
	/*Init the timers*/
}
 8013330:	bf00      	nop
 8013332:	46bd      	mov	sp, r7
 8013334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013338:	4770      	bx	lr

0801333a <FAN_MainRunnable>:

void FAN_MainRunnable(void)
{
 801333a:	b480      	push	{r7}
 801333c:	af00      	add	r7, sp, #0

}
 801333e:	bf00      	nop
 8013340:	46bd      	mov	sp, r7
 8013342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013346:	4770      	bx	lr

08013348 <vTaskModeManager>:
 */

#include "ModeManager.h"

void vTaskModeManager(void *argument)
{
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]

	for(;;)
 8013350:	e7fe      	b.n	8013350 <vTaskModeManager+0x8>

08013352 <PID_SetConfigs>:
		.Past_Error = 0,
		.Set_Point = 0
};

static void PID_SetConfigs(PIDConfigs *configs)
{
 8013352:	b480      	push	{r7}
 8013354:	b083      	sub	sp, #12
 8013356:	af00      	add	r7, sp, #0
 8013358:	6078      	str	r0, [r7, #4]
  /*TODO: Change the configs of the global PID structure based on the pointer*/
}
 801335a:	bf00      	nop
 801335c:	370c      	adds	r7, #12
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr
	...

08013368 <vTaskPID>:


}

void vTaskPID(void *argument)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b08c      	sub	sp, #48	; 0x30
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
	uint32_t distance = 0;
 8013370:	2300      	movs	r3, #0
 8013372:	62fb      	str	r3, [r7, #44]	; 0x2c
	PDU_t ControlAction_PDU;

	for(;;)
	{
		/*Check if there are some new configurations*/
		if(osMessageQueueGet(xFIFO_PIDConfigsHandle, &FIFOConfigs, NULL, 0) == osOK){
 8013374:	4b7a      	ldr	r3, [pc, #488]	; (8013560 <vTaskPID+0x1f8>)
 8013376:	6818      	ldr	r0, [r3, #0]
 8013378:	f107 0110 	add.w	r1, r7, #16
 801337c:	2300      	movs	r3, #0
 801337e:	2200      	movs	r2, #0
 8013380:	f7fc ff6c 	bl	801025c <osMessageQueueGet>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d104      	bne.n	8013394 <vTaskPID+0x2c>
			/*There are configurations to set*/
			PID_SetConfigs(&FIFOConfigs);
 801338a:	f107 0310 	add.w	r3, r7, #16
 801338e:	4618      	mov	r0, r3
 8013390:	f7ff ffdf 	bl	8013352 <PID_SetConfigs>
		}
		/*Get Distance*/
		/*TODO: Possible avoid blocking mode in order to check configs (depends of CPU load)*/
		(void)osMessageQueueGet(xFIFO_DistanceHandle, &distance, NULL, osWaitForever);
 8013394:	4b73      	ldr	r3, [pc, #460]	; (8013564 <vTaskPID+0x1fc>)
 8013396:	6818      	ldr	r0, [r3, #0]
 8013398:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801339c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133a0:	2200      	movs	r2, #0
 80133a2:	f7fc ff5b 	bl	801025c <osMessageQueueGet>
		PID.Error = PID.Set_Point - distance;
 80133a6:	4b70      	ldr	r3, [pc, #448]	; (8013568 <vTaskPID+0x200>)
 80133a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133aa:	461a      	mov	r2, r3
 80133ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ae:	1ad3      	subs	r3, r2, r3
 80133b0:	461a      	mov	r2, r3
 80133b2:	4b6d      	ldr	r3, [pc, #436]	; (8013568 <vTaskPID+0x200>)
 80133b4:	62da      	str	r2, [r3, #44]	; 0x2c
		PID.Control.P =  (float)PID.Error * PID.Gains.Kp;
 80133b6:	4b6c      	ldr	r3, [pc, #432]	; (8013568 <vTaskPID+0x200>)
 80133b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ba:	ee07 3a90 	vmov	s15, r3
 80133be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80133c2:	4b69      	ldr	r3, [pc, #420]	; (8013568 <vTaskPID+0x200>)
 80133c4:	edd3 7a00 	vldr	s15, [r3]
 80133c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133cc:	4b66      	ldr	r3, [pc, #408]	; (8013568 <vTaskPID+0x200>)
 80133ce:	edc3 7a03 	vstr	s15, [r3, #12]
		PID.Control.I += (float)PID.Error * PID.Gains.Ki;
 80133d2:	4b65      	ldr	r3, [pc, #404]	; (8013568 <vTaskPID+0x200>)
 80133d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80133d8:	4b63      	ldr	r3, [pc, #396]	; (8013568 <vTaskPID+0x200>)
 80133da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133dc:	ee07 3a90 	vmov	s15, r3
 80133e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80133e4:	4b60      	ldr	r3, [pc, #384]	; (8013568 <vTaskPID+0x200>)
 80133e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80133ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133f2:	4b5d      	ldr	r3, [pc, #372]	; (8013568 <vTaskPID+0x200>)
 80133f4:	edc3 7a04 	vstr	s15, [r3, #16]
		PID.Control.D =  (float)(PID.Error - PID.Past_Error) * PID.Gains.Kd;
 80133f8:	4b5b      	ldr	r3, [pc, #364]	; (8013568 <vTaskPID+0x200>)
 80133fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133fc:	4b5a      	ldr	r3, [pc, #360]	; (8013568 <vTaskPID+0x200>)
 80133fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013400:	1ad3      	subs	r3, r2, r3
 8013402:	ee07 3a90 	vmov	s15, r3
 8013406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801340a:	4b57      	ldr	r3, [pc, #348]	; (8013568 <vTaskPID+0x200>)
 801340c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013414:	4b54      	ldr	r3, [pc, #336]	; (8013568 <vTaskPID+0x200>)
 8013416:	edc3 7a05 	vstr	s15, [r3, #20]
		/*Constraints check on the PID algorithm (recommended only for I)*/
		if(NO_LIMIT != PID.Limits.P){
 801341a:	4b53      	ldr	r3, [pc, #332]	; (8013568 <vTaskPID+0x200>)
 801341c:	699b      	ldr	r3, [r3, #24]
 801341e:	2200      	movs	r2, #0
 8013420:	4293      	cmp	r3, r2
 8013422:	d016      	beq.n	8013452 <vTaskPID+0xea>
			/*There are constraints on the P control action*/
			if(PID.Control.P > PID.Limits.P) {
 8013424:	4b50      	ldr	r3, [pc, #320]	; (8013568 <vTaskPID+0x200>)
 8013426:	ed93 7a03 	vldr	s14, [r3, #12]
 801342a:	4b4f      	ldr	r3, [pc, #316]	; (8013568 <vTaskPID+0x200>)
 801342c:	699b      	ldr	r3, [r3, #24]
 801342e:	ee07 3a90 	vmov	s15, r3
 8013432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801343e:	dd08      	ble.n	8013452 <vTaskPID+0xea>
				PID.Control.P = PID.Limits.P;
 8013440:	4b49      	ldr	r3, [pc, #292]	; (8013568 <vTaskPID+0x200>)
 8013442:	699b      	ldr	r3, [r3, #24]
 8013444:	ee07 3a90 	vmov	s15, r3
 8013448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801344c:	4b46      	ldr	r3, [pc, #280]	; (8013568 <vTaskPID+0x200>)
 801344e:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		}
		if(NO_LIMIT != PID.Limits.I){
 8013452:	4b45      	ldr	r3, [pc, #276]	; (8013568 <vTaskPID+0x200>)
 8013454:	69db      	ldr	r3, [r3, #28]
 8013456:	2200      	movs	r2, #0
 8013458:	4293      	cmp	r3, r2
 801345a:	d016      	beq.n	801348a <vTaskPID+0x122>
			/*There are constraints on the I control action*/
			if(PID.Control.I > PID.Limits.I) {
 801345c:	4b42      	ldr	r3, [pc, #264]	; (8013568 <vTaskPID+0x200>)
 801345e:	ed93 7a04 	vldr	s14, [r3, #16]
 8013462:	4b41      	ldr	r3, [pc, #260]	; (8013568 <vTaskPID+0x200>)
 8013464:	69db      	ldr	r3, [r3, #28]
 8013466:	ee07 3a90 	vmov	s15, r3
 801346a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801346e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013476:	dd08      	ble.n	801348a <vTaskPID+0x122>
				PID.Control.I = PID.Limits.I;
 8013478:	4b3b      	ldr	r3, [pc, #236]	; (8013568 <vTaskPID+0x200>)
 801347a:	69db      	ldr	r3, [r3, #28]
 801347c:	ee07 3a90 	vmov	s15, r3
 8013480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013484:	4b38      	ldr	r3, [pc, #224]	; (8013568 <vTaskPID+0x200>)
 8013486:	edc3 7a04 	vstr	s15, [r3, #16]
			}
		}
		if(NO_LIMIT != PID.Limits.D){
 801348a:	4b37      	ldr	r3, [pc, #220]	; (8013568 <vTaskPID+0x200>)
 801348c:	6a1b      	ldr	r3, [r3, #32]
 801348e:	2200      	movs	r2, #0
 8013490:	4293      	cmp	r3, r2
 8013492:	d016      	beq.n	80134c2 <vTaskPID+0x15a>
			/*There are constraints on the D control action*/
			if(PID.Control.D > PID.Limits.D) {
 8013494:	4b34      	ldr	r3, [pc, #208]	; (8013568 <vTaskPID+0x200>)
 8013496:	ed93 7a05 	vldr	s14, [r3, #20]
 801349a:	4b33      	ldr	r3, [pc, #204]	; (8013568 <vTaskPID+0x200>)
 801349c:	6a1b      	ldr	r3, [r3, #32]
 801349e:	ee07 3a90 	vmov	s15, r3
 80134a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ae:	dd08      	ble.n	80134c2 <vTaskPID+0x15a>
				PID.Control.D = PID.Limits.D;
 80134b0:	4b2d      	ldr	r3, [pc, #180]	; (8013568 <vTaskPID+0x200>)
 80134b2:	6a1b      	ldr	r3, [r3, #32]
 80134b4:	ee07 3a90 	vmov	s15, r3
 80134b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134bc:	4b2a      	ldr	r3, [pc, #168]	; (8013568 <vTaskPID+0x200>)
 80134be:	edc3 7a05 	vstr	s15, [r3, #20]
			}
		}
		/*Calculating control action*/
		PID.ControlAction = PID.Control.P + PID.Control.I + PID.Control.D;
 80134c2:	4b29      	ldr	r3, [pc, #164]	; (8013568 <vTaskPID+0x200>)
 80134c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80134c8:	4b27      	ldr	r3, [pc, #156]	; (8013568 <vTaskPID+0x200>)
 80134ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80134ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134d2:	4b25      	ldr	r3, [pc, #148]	; (8013568 <vTaskPID+0x200>)
 80134d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80134d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134dc:	4b22      	ldr	r3, [pc, #136]	; (8013568 <vTaskPID+0x200>)
 80134de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		/*Constraints for the control action*/
		if(PID.ControlAction < 0)
 80134e2:	4b21      	ldr	r3, [pc, #132]	; (8013568 <vTaskPID+0x200>)
 80134e4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80134e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80134ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f0:	d513      	bpl.n	801351a <vTaskPID+0x1b2>
			PID.ControlAction = ABS(PID.ControlAction);
 80134f2:	4b1d      	ldr	r3, [pc, #116]	; (8013568 <vTaskPID+0x200>)
 80134f4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80134f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80134fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013500:	dd03      	ble.n	801350a <vTaskPID+0x1a2>
 8013502:	4b19      	ldr	r3, [pc, #100]	; (8013568 <vTaskPID+0x200>)
 8013504:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013508:	e004      	b.n	8013514 <vTaskPID+0x1ac>
 801350a:	4b17      	ldr	r3, [pc, #92]	; (8013568 <vTaskPID+0x200>)
 801350c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013510:	eef1 7a67 	vneg.f32	s15, s15
 8013514:	4b14      	ldr	r3, [pc, #80]	; (8013568 <vTaskPID+0x200>)
 8013516:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(PID.ControlAction > PID.Limits.Control)
 801351a:	4b13      	ldr	r3, [pc, #76]	; (8013568 <vTaskPID+0x200>)
 801351c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8013520:	4b11      	ldr	r3, [pc, #68]	; (8013568 <vTaskPID+0x200>)
 8013522:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352e:	dd03      	ble.n	8013538 <vTaskPID+0x1d0>
			PID.ControlAction = PID.Limits.Control;
 8013530:	4b0d      	ldr	r3, [pc, #52]	; (8013568 <vTaskPID+0x200>)
 8013532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013534:	4a0c      	ldr	r2, [pc, #48]	; (8013568 <vTaskPID+0x200>)
 8013536:	6293      	str	r3, [r2, #40]	; 0x28
		/*Sending to the actuator*/
		osMessageQueuePut(xFIFO_ControlActionHandle, &PID.ControlAction, 0U, 0U);
 8013538:	4b0c      	ldr	r3, [pc, #48]	; (801356c <vTaskPID+0x204>)
 801353a:	6818      	ldr	r0, [r3, #0]
 801353c:	2300      	movs	r3, #0
 801353e:	2200      	movs	r2, #0
 8013540:	490b      	ldr	r1, [pc, #44]	; (8013570 <vTaskPID+0x208>)
 8013542:	f7fc fe2b 	bl	801019c <osMessageQueuePut>
		/*Sending to the COM module*/
		//ControlAction_PDU = COM_CreatePDU(0, PID.ControlAction);
		osMessageQueuePut(xFIFO_COMHandle, &ControlAction_PDU, 0U, 0U);
 8013546:	4b0b      	ldr	r3, [pc, #44]	; (8013574 <vTaskPID+0x20c>)
 8013548:	6818      	ldr	r0, [r3, #0]
 801354a:	f107 0108 	add.w	r1, r7, #8
 801354e:	2300      	movs	r3, #0
 8013550:	2200      	movs	r2, #0
 8013552:	f7fc fe23 	bl	801019c <osMessageQueuePut>
		PID.Past_Error = PID.Error;
 8013556:	4b04      	ldr	r3, [pc, #16]	; (8013568 <vTaskPID+0x200>)
 8013558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801355a:	4a03      	ldr	r2, [pc, #12]	; (8013568 <vTaskPID+0x200>)
 801355c:	6313      	str	r3, [r2, #48]	; 0x30
		if(osMessageQueueGet(xFIFO_PIDConfigsHandle, &FIFOConfigs, NULL, 0) == osOK){
 801355e:	e709      	b.n	8013374 <vTaskPID+0xc>
 8013560:	2000086c 	.word	0x2000086c
 8013564:	20000864 	.word	0x20000864
 8013568:	200054c4 	.word	0x200054c4
 801356c:	20000868 	.word	0x20000868
 8013570:	200054ec 	.word	0x200054ec
 8013574:	20000860 	.word	0x20000860

08013578 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801357c:	2200      	movs	r2, #0
 801357e:	4912      	ldr	r1, [pc, #72]	; (80135c8 <MX_USB_DEVICE_Init+0x50>)
 8013580:	4812      	ldr	r0, [pc, #72]	; (80135cc <MX_USB_DEVICE_Init+0x54>)
 8013582:	f7fb f86b 	bl	800e65c <USBD_Init>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d001      	beq.n	8013590 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801358c:	f7ed fcb6 	bl	8000efc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013590:	490f      	ldr	r1, [pc, #60]	; (80135d0 <MX_USB_DEVICE_Init+0x58>)
 8013592:	480e      	ldr	r0, [pc, #56]	; (80135cc <MX_USB_DEVICE_Init+0x54>)
 8013594:	f7fb f892 	bl	800e6bc <USBD_RegisterClass>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d001      	beq.n	80135a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801359e:	f7ed fcad 	bl	8000efc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80135a2:	490c      	ldr	r1, [pc, #48]	; (80135d4 <MX_USB_DEVICE_Init+0x5c>)
 80135a4:	4809      	ldr	r0, [pc, #36]	; (80135cc <MX_USB_DEVICE_Init+0x54>)
 80135a6:	f7fa ffc9 	bl	800e53c <USBD_CDC_RegisterInterface>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d001      	beq.n	80135b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80135b0:	f7ed fca4 	bl	8000efc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80135b4:	4805      	ldr	r0, [pc, #20]	; (80135cc <MX_USB_DEVICE_Init+0x54>)
 80135b6:	f7fb f8b7 	bl	800e728 <USBD_Start>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80135c0:	f7ed fc9c 	bl	8000efc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80135c4:	bf00      	nop
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	20000370 	.word	0x20000370
 80135cc:	200054fc 	.word	0x200054fc
 80135d0:	200002d4 	.word	0x200002d4
 80135d4:	2000035c 	.word	0x2000035c

080135d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80135dc:	2200      	movs	r2, #0
 80135de:	4905      	ldr	r1, [pc, #20]	; (80135f4 <CDC_Init_FS+0x1c>)
 80135e0:	4805      	ldr	r0, [pc, #20]	; (80135f8 <CDC_Init_FS+0x20>)
 80135e2:	f7fa ffc5 	bl	800e570 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80135e6:	4905      	ldr	r1, [pc, #20]	; (80135fc <CDC_Init_FS+0x24>)
 80135e8:	4803      	ldr	r0, [pc, #12]	; (80135f8 <CDC_Init_FS+0x20>)
 80135ea:	f7fa ffe3 	bl	800e5b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80135ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	20005fd8 	.word	0x20005fd8
 80135f8:	200054fc 	.word	0x200054fc
 80135fc:	200057d8 	.word	0x200057d8

08013600 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013600:	b480      	push	{r7}
 8013602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013604:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013606:	4618      	mov	r0, r3
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr

08013610 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013610:	b480      	push	{r7}
 8013612:	b083      	sub	sp, #12
 8013614:	af00      	add	r7, sp, #0
 8013616:	4603      	mov	r3, r0
 8013618:	6039      	str	r1, [r7, #0]
 801361a:	71fb      	strb	r3, [r7, #7]
 801361c:	4613      	mov	r3, r2
 801361e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013620:	79fb      	ldrb	r3, [r7, #7]
 8013622:	2b23      	cmp	r3, #35	; 0x23
 8013624:	d84a      	bhi.n	80136bc <CDC_Control_FS+0xac>
 8013626:	a201      	add	r2, pc, #4	; (adr r2, 801362c <CDC_Control_FS+0x1c>)
 8013628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801362c:	080136bd 	.word	0x080136bd
 8013630:	080136bd 	.word	0x080136bd
 8013634:	080136bd 	.word	0x080136bd
 8013638:	080136bd 	.word	0x080136bd
 801363c:	080136bd 	.word	0x080136bd
 8013640:	080136bd 	.word	0x080136bd
 8013644:	080136bd 	.word	0x080136bd
 8013648:	080136bd 	.word	0x080136bd
 801364c:	080136bd 	.word	0x080136bd
 8013650:	080136bd 	.word	0x080136bd
 8013654:	080136bd 	.word	0x080136bd
 8013658:	080136bd 	.word	0x080136bd
 801365c:	080136bd 	.word	0x080136bd
 8013660:	080136bd 	.word	0x080136bd
 8013664:	080136bd 	.word	0x080136bd
 8013668:	080136bd 	.word	0x080136bd
 801366c:	080136bd 	.word	0x080136bd
 8013670:	080136bd 	.word	0x080136bd
 8013674:	080136bd 	.word	0x080136bd
 8013678:	080136bd 	.word	0x080136bd
 801367c:	080136bd 	.word	0x080136bd
 8013680:	080136bd 	.word	0x080136bd
 8013684:	080136bd 	.word	0x080136bd
 8013688:	080136bd 	.word	0x080136bd
 801368c:	080136bd 	.word	0x080136bd
 8013690:	080136bd 	.word	0x080136bd
 8013694:	080136bd 	.word	0x080136bd
 8013698:	080136bd 	.word	0x080136bd
 801369c:	080136bd 	.word	0x080136bd
 80136a0:	080136bd 	.word	0x080136bd
 80136a4:	080136bd 	.word	0x080136bd
 80136a8:	080136bd 	.word	0x080136bd
 80136ac:	080136bd 	.word	0x080136bd
 80136b0:	080136bd 	.word	0x080136bd
 80136b4:	080136bd 	.word	0x080136bd
 80136b8:	080136bd 	.word	0x080136bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80136bc:	bf00      	nop
  }

  return (USBD_OK);
 80136be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	370c      	adds	r7, #12
 80136c4:	46bd      	mov	sp, r7
 80136c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ca:	4770      	bx	lr

080136cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b084      	sub	sp, #16
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80136d6:	6879      	ldr	r1, [r7, #4]
 80136d8:	4813      	ldr	r0, [pc, #76]	; (8013728 <CDC_Receive_FS+0x5c>)
 80136da:	f7fa ff6b 	bl	800e5b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80136de:	4812      	ldr	r0, [pc, #72]	; (8013728 <CDC_Receive_FS+0x5c>)
 80136e0:	f7fa ff86 	bl	800e5f0 <USBD_CDC_ReceivePacket>
  memset(ResBuffer, '\0', 64); //Clear the buffer
 80136e4:	2240      	movs	r2, #64	; 0x40
 80136e6:	2100      	movs	r1, #0
 80136e8:	4810      	ldr	r0, [pc, #64]	; (801372c <CDC_Receive_FS+0x60>)
 80136ea:	f000 fc85 	bl	8013ff8 <memset>
  uint8_t len = (uint8_t)*Len;
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	73fb      	strb	r3, [r7, #15]
  memcpy(ResBuffer, Buf, len); //Copy the data to buffer
 80136f4:	7bfb      	ldrb	r3, [r7, #15]
 80136f6:	461a      	mov	r2, r3
 80136f8:	6879      	ldr	r1, [r7, #4]
 80136fa:	480c      	ldr	r0, [pc, #48]	; (801372c <CDC_Receive_FS+0x60>)
 80136fc:	f000 fc6e 	bl	8013fdc <memcpy>
  memset(Buf, '\0', len); //Clear Buf
 8013700:	7bfb      	ldrb	r3, [r7, #15]
 8013702:	461a      	mov	r2, r3
 8013704:	2100      	movs	r1, #0
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f000 fc76 	bl	8013ff8 <memset>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 801370c:	2201      	movs	r2, #1
 801370e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013712:	4807      	ldr	r0, [pc, #28]	; (8013730 <CDC_Receive_FS+0x64>)
 8013714:	f7ee fe4a 	bl	80023ac <HAL_GPIO_WritePin>
  ReceiveFlag = 1;
 8013718:	4b06      	ldr	r3, [pc, #24]	; (8013734 <CDC_Receive_FS+0x68>)
 801371a:	2201      	movs	r2, #1
 801371c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 801371e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013720:	4618      	mov	r0, r3
 8013722:	3710      	adds	r7, #16
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	200054fc 	.word	0x200054fc
 801372c:	20000878 	.word	0x20000878
 8013730:	40020800 	.word	0x40020800
 8013734:	200008b8 	.word	0x200008b8

08013738 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013738:	b480      	push	{r7}
 801373a:	b087      	sub	sp, #28
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	4613      	mov	r3, r2
 8013744:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013746:	2300      	movs	r3, #0
 8013748:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801374a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801374e:	4618      	mov	r0, r3
 8013750:	371c      	adds	r7, #28
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr
	...

0801375c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801375c:	b480      	push	{r7}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
 8013762:	4603      	mov	r3, r0
 8013764:	6039      	str	r1, [r7, #0]
 8013766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	2212      	movs	r2, #18
 801376c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801376e:	4b03      	ldr	r3, [pc, #12]	; (801377c <USBD_FS_DeviceDescriptor+0x20>)
}
 8013770:	4618      	mov	r0, r3
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr
 801377c:	2000038c 	.word	0x2000038c

08013780 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	4603      	mov	r3, r0
 8013788:	6039      	str	r1, [r7, #0]
 801378a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	2204      	movs	r2, #4
 8013790:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013792:	4b03      	ldr	r3, [pc, #12]	; (80137a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013794:	4618      	mov	r0, r3
 8013796:	370c      	adds	r7, #12
 8013798:	46bd      	mov	sp, r7
 801379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379e:	4770      	bx	lr
 80137a0:	200003a0 	.word	0x200003a0

080137a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	4603      	mov	r3, r0
 80137ac:	6039      	str	r1, [r7, #0]
 80137ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80137b0:	79fb      	ldrb	r3, [r7, #7]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d105      	bne.n	80137c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80137b6:	683a      	ldr	r2, [r7, #0]
 80137b8:	4907      	ldr	r1, [pc, #28]	; (80137d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80137ba:	4808      	ldr	r0, [pc, #32]	; (80137dc <USBD_FS_ProductStrDescriptor+0x38>)
 80137bc:	f7fc f960 	bl	800fa80 <USBD_GetString>
 80137c0:	e004      	b.n	80137cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80137c2:	683a      	ldr	r2, [r7, #0]
 80137c4:	4904      	ldr	r1, [pc, #16]	; (80137d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80137c6:	4805      	ldr	r0, [pc, #20]	; (80137dc <USBD_FS_ProductStrDescriptor+0x38>)
 80137c8:	f7fc f95a 	bl	800fa80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80137cc:	4b02      	ldr	r3, [pc, #8]	; (80137d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3708      	adds	r7, #8
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	200067d8 	.word	0x200067d8
 80137dc:	08014298 	.word	0x08014298

080137e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	4603      	mov	r3, r0
 80137e8:	6039      	str	r1, [r7, #0]
 80137ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80137ec:	683a      	ldr	r2, [r7, #0]
 80137ee:	4904      	ldr	r1, [pc, #16]	; (8013800 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80137f0:	4804      	ldr	r0, [pc, #16]	; (8013804 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80137f2:	f7fc f945 	bl	800fa80 <USBD_GetString>
  return USBD_StrDesc;
 80137f6:	4b02      	ldr	r3, [pc, #8]	; (8013800 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	200067d8 	.word	0x200067d8
 8013804:	080142b0 	.word	0x080142b0

08013808 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	4603      	mov	r3, r0
 8013810:	6039      	str	r1, [r7, #0]
 8013812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	221a      	movs	r2, #26
 8013818:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801381a:	f000 f843 	bl	80138a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801381e:	4b02      	ldr	r3, [pc, #8]	; (8013828 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013820:	4618      	mov	r0, r3
 8013822:	3708      	adds	r7, #8
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}
 8013828:	200003a4 	.word	0x200003a4

0801382c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	4603      	mov	r3, r0
 8013834:	6039      	str	r1, [r7, #0]
 8013836:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013838:	79fb      	ldrb	r3, [r7, #7]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d105      	bne.n	801384a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801383e:	683a      	ldr	r2, [r7, #0]
 8013840:	4907      	ldr	r1, [pc, #28]	; (8013860 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013842:	4808      	ldr	r0, [pc, #32]	; (8013864 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013844:	f7fc f91c 	bl	800fa80 <USBD_GetString>
 8013848:	e004      	b.n	8013854 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801384a:	683a      	ldr	r2, [r7, #0]
 801384c:	4904      	ldr	r1, [pc, #16]	; (8013860 <USBD_FS_ConfigStrDescriptor+0x34>)
 801384e:	4805      	ldr	r0, [pc, #20]	; (8013864 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013850:	f7fc f916 	bl	800fa80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013854:	4b02      	ldr	r3, [pc, #8]	; (8013860 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013856:	4618      	mov	r0, r3
 8013858:	3708      	adds	r7, #8
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}
 801385e:	bf00      	nop
 8013860:	200067d8 	.word	0x200067d8
 8013864:	080142c4 	.word	0x080142c4

08013868 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	4603      	mov	r3, r0
 8013870:	6039      	str	r1, [r7, #0]
 8013872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013874:	79fb      	ldrb	r3, [r7, #7]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d105      	bne.n	8013886 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801387a:	683a      	ldr	r2, [r7, #0]
 801387c:	4907      	ldr	r1, [pc, #28]	; (801389c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801387e:	4808      	ldr	r0, [pc, #32]	; (80138a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013880:	f7fc f8fe 	bl	800fa80 <USBD_GetString>
 8013884:	e004      	b.n	8013890 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013886:	683a      	ldr	r2, [r7, #0]
 8013888:	4904      	ldr	r1, [pc, #16]	; (801389c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801388a:	4805      	ldr	r0, [pc, #20]	; (80138a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801388c:	f7fc f8f8 	bl	800fa80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013890:	4b02      	ldr	r3, [pc, #8]	; (801389c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013892:	4618      	mov	r0, r3
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	200067d8 	.word	0x200067d8
 80138a0:	080142d0 	.word	0x080142d0

080138a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b084      	sub	sp, #16
 80138a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80138aa:	4b0f      	ldr	r3, [pc, #60]	; (80138e8 <Get_SerialNum+0x44>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80138b0:	4b0e      	ldr	r3, [pc, #56]	; (80138ec <Get_SerialNum+0x48>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80138b6:	4b0e      	ldr	r3, [pc, #56]	; (80138f0 <Get_SerialNum+0x4c>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80138bc:	68fa      	ldr	r2, [r7, #12]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	4413      	add	r3, r2
 80138c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d009      	beq.n	80138de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80138ca:	2208      	movs	r2, #8
 80138cc:	4909      	ldr	r1, [pc, #36]	; (80138f4 <Get_SerialNum+0x50>)
 80138ce:	68f8      	ldr	r0, [r7, #12]
 80138d0:	f000 f814 	bl	80138fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80138d4:	2204      	movs	r2, #4
 80138d6:	4908      	ldr	r1, [pc, #32]	; (80138f8 <Get_SerialNum+0x54>)
 80138d8:	68b8      	ldr	r0, [r7, #8]
 80138da:	f000 f80f 	bl	80138fc <IntToUnicode>
  }
}
 80138de:	bf00      	nop
 80138e0:	3710      	adds	r7, #16
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	1fff7a10 	.word	0x1fff7a10
 80138ec:	1fff7a14 	.word	0x1fff7a14
 80138f0:	1fff7a18 	.word	0x1fff7a18
 80138f4:	200003a6 	.word	0x200003a6
 80138f8:	200003b6 	.word	0x200003b6

080138fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80138fc:	b480      	push	{r7}
 80138fe:	b087      	sub	sp, #28
 8013900:	af00      	add	r7, sp, #0
 8013902:	60f8      	str	r0, [r7, #12]
 8013904:	60b9      	str	r1, [r7, #8]
 8013906:	4613      	mov	r3, r2
 8013908:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801390a:	2300      	movs	r3, #0
 801390c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801390e:	2300      	movs	r3, #0
 8013910:	75fb      	strb	r3, [r7, #23]
 8013912:	e027      	b.n	8013964 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	0f1b      	lsrs	r3, r3, #28
 8013918:	2b09      	cmp	r3, #9
 801391a:	d80b      	bhi.n	8013934 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	0f1b      	lsrs	r3, r3, #28
 8013920:	b2da      	uxtb	r2, r3
 8013922:	7dfb      	ldrb	r3, [r7, #23]
 8013924:	005b      	lsls	r3, r3, #1
 8013926:	4619      	mov	r1, r3
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	440b      	add	r3, r1
 801392c:	3230      	adds	r2, #48	; 0x30
 801392e:	b2d2      	uxtb	r2, r2
 8013930:	701a      	strb	r2, [r3, #0]
 8013932:	e00a      	b.n	801394a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	0f1b      	lsrs	r3, r3, #28
 8013938:	b2da      	uxtb	r2, r3
 801393a:	7dfb      	ldrb	r3, [r7, #23]
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	4619      	mov	r1, r3
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	440b      	add	r3, r1
 8013944:	3237      	adds	r2, #55	; 0x37
 8013946:	b2d2      	uxtb	r2, r2
 8013948:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	011b      	lsls	r3, r3, #4
 801394e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013950:	7dfb      	ldrb	r3, [r7, #23]
 8013952:	005b      	lsls	r3, r3, #1
 8013954:	3301      	adds	r3, #1
 8013956:	68ba      	ldr	r2, [r7, #8]
 8013958:	4413      	add	r3, r2
 801395a:	2200      	movs	r2, #0
 801395c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801395e:	7dfb      	ldrb	r3, [r7, #23]
 8013960:	3301      	adds	r3, #1
 8013962:	75fb      	strb	r3, [r7, #23]
 8013964:	7dfa      	ldrb	r2, [r7, #23]
 8013966:	79fb      	ldrb	r3, [r7, #7]
 8013968:	429a      	cmp	r2, r3
 801396a:	d3d3      	bcc.n	8013914 <IntToUnicode+0x18>
  }
}
 801396c:	bf00      	nop
 801396e:	bf00      	nop
 8013970:	371c      	adds	r7, #28
 8013972:	46bd      	mov	sp, r7
 8013974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013978:	4770      	bx	lr
	...

0801397c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b08a      	sub	sp, #40	; 0x28
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013984:	f107 0314 	add.w	r3, r7, #20
 8013988:	2200      	movs	r2, #0
 801398a:	601a      	str	r2, [r3, #0]
 801398c:	605a      	str	r2, [r3, #4]
 801398e:	609a      	str	r2, [r3, #8]
 8013990:	60da      	str	r2, [r3, #12]
 8013992:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801399c:	d13a      	bne.n	8013a14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801399e:	2300      	movs	r3, #0
 80139a0:	613b      	str	r3, [r7, #16]
 80139a2:	4b1e      	ldr	r3, [pc, #120]	; (8013a1c <HAL_PCD_MspInit+0xa0>)
 80139a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a6:	4a1d      	ldr	r2, [pc, #116]	; (8013a1c <HAL_PCD_MspInit+0xa0>)
 80139a8:	f043 0301 	orr.w	r3, r3, #1
 80139ac:	6313      	str	r3, [r2, #48]	; 0x30
 80139ae:	4b1b      	ldr	r3, [pc, #108]	; (8013a1c <HAL_PCD_MspInit+0xa0>)
 80139b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139b2:	f003 0301 	and.w	r3, r3, #1
 80139b6:	613b      	str	r3, [r7, #16]
 80139b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80139ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80139be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139c0:	2302      	movs	r3, #2
 80139c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139c4:	2300      	movs	r3, #0
 80139c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80139c8:	2303      	movs	r3, #3
 80139ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80139cc:	230a      	movs	r3, #10
 80139ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139d0:	f107 0314 	add.w	r3, r7, #20
 80139d4:	4619      	mov	r1, r3
 80139d6:	4812      	ldr	r0, [pc, #72]	; (8013a20 <HAL_PCD_MspInit+0xa4>)
 80139d8:	f7ee fb64 	bl	80020a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80139dc:	4b0f      	ldr	r3, [pc, #60]	; (8013a1c <HAL_PCD_MspInit+0xa0>)
 80139de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139e0:	4a0e      	ldr	r2, [pc, #56]	; (8013a1c <HAL_PCD_MspInit+0xa0>)
 80139e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139e6:	6353      	str	r3, [r2, #52]	; 0x34
 80139e8:	2300      	movs	r3, #0
 80139ea:	60fb      	str	r3, [r7, #12]
 80139ec:	4b0b      	ldr	r3, [pc, #44]	; (8013a1c <HAL_PCD_MspInit+0xa0>)
 80139ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139f0:	4a0a      	ldr	r2, [pc, #40]	; (8013a1c <HAL_PCD_MspInit+0xa0>)
 80139f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80139f6:	6453      	str	r3, [r2, #68]	; 0x44
 80139f8:	4b08      	ldr	r3, [pc, #32]	; (8013a1c <HAL_PCD_MspInit+0xa0>)
 80139fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013a00:	60fb      	str	r3, [r7, #12]
 8013a02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013a04:	2200      	movs	r2, #0
 8013a06:	2105      	movs	r1, #5
 8013a08:	2043      	movs	r0, #67	; 0x43
 8013a0a:	f7ed ff98 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013a0e:	2043      	movs	r0, #67	; 0x43
 8013a10:	f7ed ffb1 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013a14:	bf00      	nop
 8013a16:	3728      	adds	r7, #40	; 0x28
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}
 8013a1c:	40023800 	.word	0x40023800
 8013a20:	40020000 	.word	0x40020000

08013a24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b082      	sub	sp, #8
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013a38:	4619      	mov	r1, r3
 8013a3a:	4610      	mov	r0, r2
 8013a3c:	f7fa fec1 	bl	800e7c2 <USBD_LL_SetupStage>
}
 8013a40:	bf00      	nop
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	460b      	mov	r3, r1
 8013a52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013a5a:	78fa      	ldrb	r2, [r7, #3]
 8013a5c:	6879      	ldr	r1, [r7, #4]
 8013a5e:	4613      	mov	r3, r2
 8013a60:	00db      	lsls	r3, r3, #3
 8013a62:	4413      	add	r3, r2
 8013a64:	009b      	lsls	r3, r3, #2
 8013a66:	440b      	add	r3, r1
 8013a68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013a6c:	681a      	ldr	r2, [r3, #0]
 8013a6e:	78fb      	ldrb	r3, [r7, #3]
 8013a70:	4619      	mov	r1, r3
 8013a72:	f7fa fefb 	bl	800e86c <USBD_LL_DataOutStage>
}
 8013a76:	bf00      	nop
 8013a78:	3708      	adds	r7, #8
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}

08013a7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a7e:	b580      	push	{r7, lr}
 8013a80:	b082      	sub	sp, #8
 8013a82:	af00      	add	r7, sp, #0
 8013a84:	6078      	str	r0, [r7, #4]
 8013a86:	460b      	mov	r3, r1
 8013a88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013a90:	78fa      	ldrb	r2, [r7, #3]
 8013a92:	6879      	ldr	r1, [r7, #4]
 8013a94:	4613      	mov	r3, r2
 8013a96:	00db      	lsls	r3, r3, #3
 8013a98:	4413      	add	r3, r2
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	440b      	add	r3, r1
 8013a9e:	334c      	adds	r3, #76	; 0x4c
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	78fb      	ldrb	r3, [r7, #3]
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	f7fa ff94 	bl	800e9d2 <USBD_LL_DataInStage>
}
 8013aaa:	bf00      	nop
 8013aac:	3708      	adds	r7, #8
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}

08013ab2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ab2:	b580      	push	{r7, lr}
 8013ab4:	b082      	sub	sp, #8
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7fb f8c8 	bl	800ec56 <USBD_LL_SOF>
}
 8013ac6:	bf00      	nop
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}

08013ace <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ace:	b580      	push	{r7, lr}
 8013ad0:	b084      	sub	sp, #16
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	68db      	ldr	r3, [r3, #12]
 8013ade:	2b02      	cmp	r3, #2
 8013ae0:	d001      	beq.n	8013ae6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013ae2:	f7ed fa0b 	bl	8000efc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013aec:	7bfa      	ldrb	r2, [r7, #15]
 8013aee:	4611      	mov	r1, r2
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7fb f872 	bl	800ebda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fb f81a 	bl	800eb36 <USBD_LL_Reset>
}
 8013b02:	bf00      	nop
 8013b04:	3710      	adds	r7, #16
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
	...

08013b0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7fb f86d 	bl	800ebfa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	687a      	ldr	r2, [r7, #4]
 8013b2c:	6812      	ldr	r2, [r2, #0]
 8013b2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013b32:	f043 0301 	orr.w	r3, r3, #1
 8013b36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6a1b      	ldr	r3, [r3, #32]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d005      	beq.n	8013b4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013b40:	4b04      	ldr	r3, [pc, #16]	; (8013b54 <HAL_PCD_SuspendCallback+0x48>)
 8013b42:	691b      	ldr	r3, [r3, #16]
 8013b44:	4a03      	ldr	r2, [pc, #12]	; (8013b54 <HAL_PCD_SuspendCallback+0x48>)
 8013b46:	f043 0306 	orr.w	r3, r3, #6
 8013b4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013b4c:	bf00      	nop
 8013b4e:	3708      	adds	r7, #8
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	e000ed00 	.word	0xe000ed00

08013b58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fb f85d 	bl	800ec26 <USBD_LL_Resume>
}
 8013b6c:	bf00      	nop
 8013b6e:	3708      	adds	r7, #8
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b082      	sub	sp, #8
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b86:	78fa      	ldrb	r2, [r7, #3]
 8013b88:	4611      	mov	r1, r2
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fb f8b5 	bl	800ecfa <USBD_LL_IsoOUTIncomplete>
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013baa:	78fa      	ldrb	r2, [r7, #3]
 8013bac:	4611      	mov	r1, r2
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fb f871 	bl	800ec96 <USBD_LL_IsoINIncomplete>
}
 8013bb4:	bf00      	nop
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7fb f8c7 	bl	800ed5e <USBD_LL_DevConnected>
}
 8013bd0:	bf00      	nop
 8013bd2:	3708      	adds	r7, #8
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fb f8c4 	bl	800ed74 <USBD_LL_DevDisconnected>
}
 8013bec:	bf00      	nop
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d13c      	bne.n	8013c7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013c04:	4a20      	ldr	r2, [pc, #128]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	4a1e      	ldr	r2, [pc, #120]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013c14:	4b1c      	ldr	r3, [pc, #112]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013c1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013c1c:	4b1a      	ldr	r3, [pc, #104]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c1e:	2204      	movs	r2, #4
 8013c20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013c22:	4b19      	ldr	r3, [pc, #100]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c24:	2202      	movs	r2, #2
 8013c26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013c28:	4b17      	ldr	r3, [pc, #92]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013c2e:	4b16      	ldr	r3, [pc, #88]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c30:	2202      	movs	r2, #2
 8013c32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013c34:	4b14      	ldr	r3, [pc, #80]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c36:	2200      	movs	r2, #0
 8013c38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013c3a:	4b13      	ldr	r3, [pc, #76]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013c40:	4b11      	ldr	r3, [pc, #68]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c42:	2200      	movs	r2, #0
 8013c44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013c46:	4b10      	ldr	r3, [pc, #64]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c48:	2200      	movs	r2, #0
 8013c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013c4c:	4b0e      	ldr	r3, [pc, #56]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c4e:	2200      	movs	r2, #0
 8013c50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013c52:	480d      	ldr	r0, [pc, #52]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c54:	f7ef fbab 	bl	80033ae <HAL_PCD_Init>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d001      	beq.n	8013c62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013c5e:	f7ed f94d 	bl	8000efc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013c62:	2180      	movs	r1, #128	; 0x80
 8013c64:	4808      	ldr	r0, [pc, #32]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c66:	f7f0 fe02 	bl	800486e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013c6a:	2240      	movs	r2, #64	; 0x40
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	4806      	ldr	r0, [pc, #24]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c70:	f7f0 fdb6 	bl	80047e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013c74:	2280      	movs	r2, #128	; 0x80
 8013c76:	2101      	movs	r1, #1
 8013c78:	4803      	ldr	r0, [pc, #12]	; (8013c88 <USBD_LL_Init+0x94>)
 8013c7a:	f7f0 fdb1 	bl	80047e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013c7e:	2300      	movs	r3, #0
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	3708      	adds	r7, #8
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}
 8013c88:	200069d8 	.word	0x200069d8

08013c8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b084      	sub	sp, #16
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c94:	2300      	movs	r3, #0
 8013c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7ef fca0 	bl	80035e8 <HAL_PCD_Start>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cac:	7bfb      	ldrb	r3, [r7, #15]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f000 f942 	bl	8013f38 <USBD_Get_USB_Status>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3710      	adds	r7, #16
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}

08013cc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013cc2:	b580      	push	{r7, lr}
 8013cc4:	b084      	sub	sp, #16
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
 8013cca:	4608      	mov	r0, r1
 8013ccc:	4611      	mov	r1, r2
 8013cce:	461a      	mov	r2, r3
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	70fb      	strb	r3, [r7, #3]
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	70bb      	strb	r3, [r7, #2]
 8013cd8:	4613      	mov	r3, r2
 8013cda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013cea:	78bb      	ldrb	r3, [r7, #2]
 8013cec:	883a      	ldrh	r2, [r7, #0]
 8013cee:	78f9      	ldrb	r1, [r7, #3]
 8013cf0:	f7f0 f971 	bl	8003fd6 <HAL_PCD_EP_Open>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cf8:	7bfb      	ldrb	r3, [r7, #15]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f000 f91c 	bl	8013f38 <USBD_Get_USB_Status>
 8013d00:	4603      	mov	r3, r0
 8013d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3710      	adds	r7, #16
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}

08013d0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d0e:	b580      	push	{r7, lr}
 8013d10:	b084      	sub	sp, #16
 8013d12:	af00      	add	r7, sp, #0
 8013d14:	6078      	str	r0, [r7, #4]
 8013d16:	460b      	mov	r3, r1
 8013d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013d28:	78fa      	ldrb	r2, [r7, #3]
 8013d2a:	4611      	mov	r1, r2
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7f0 f9ba 	bl	80040a6 <HAL_PCD_EP_Close>
 8013d32:	4603      	mov	r3, r0
 8013d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d36:	7bfb      	ldrb	r3, [r7, #15]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f000 f8fd 	bl	8013f38 <USBD_Get_USB_Status>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b084      	sub	sp, #16
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	460b      	mov	r3, r1
 8013d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d58:	2300      	movs	r3, #0
 8013d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013d66:	78fa      	ldrb	r2, [r7, #3]
 8013d68:	4611      	mov	r1, r2
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7f0 fa92 	bl	8004294 <HAL_PCD_EP_SetStall>
 8013d70:	4603      	mov	r3, r0
 8013d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d74:	7bfb      	ldrb	r3, [r7, #15]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f000 f8de 	bl	8013f38 <USBD_Get_USB_Status>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}

08013d8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d8a:	b580      	push	{r7, lr}
 8013d8c:	b084      	sub	sp, #16
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	6078      	str	r0, [r7, #4]
 8013d92:	460b      	mov	r3, r1
 8013d94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d96:	2300      	movs	r3, #0
 8013d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013da4:	78fa      	ldrb	r2, [r7, #3]
 8013da6:	4611      	mov	r1, r2
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7f0 fad7 	bl	800435c <HAL_PCD_EP_ClrStall>
 8013dae:	4603      	mov	r3, r0
 8013db0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013db2:	7bfb      	ldrb	r3, [r7, #15]
 8013db4:	4618      	mov	r0, r3
 8013db6:	f000 f8bf 	bl	8013f38 <USBD_Get_USB_Status>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	3710      	adds	r7, #16
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}

08013dc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b085      	sub	sp, #20
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013dda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	da0b      	bge.n	8013dfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013de4:	78fb      	ldrb	r3, [r7, #3]
 8013de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013dea:	68f9      	ldr	r1, [r7, #12]
 8013dec:	4613      	mov	r3, r2
 8013dee:	00db      	lsls	r3, r3, #3
 8013df0:	4413      	add	r3, r2
 8013df2:	009b      	lsls	r3, r3, #2
 8013df4:	440b      	add	r3, r1
 8013df6:	333e      	adds	r3, #62	; 0x3e
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	e00b      	b.n	8013e14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013dfc:	78fb      	ldrb	r3, [r7, #3]
 8013dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e02:	68f9      	ldr	r1, [r7, #12]
 8013e04:	4613      	mov	r3, r2
 8013e06:	00db      	lsls	r3, r3, #3
 8013e08:	4413      	add	r3, r2
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	440b      	add	r3, r1
 8013e0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013e12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3714      	adds	r7, #20
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr

08013e20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	460b      	mov	r3, r1
 8013e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e30:	2300      	movs	r3, #0
 8013e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e3a:	78fa      	ldrb	r2, [r7, #3]
 8013e3c:	4611      	mov	r1, r2
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7f0 f8a4 	bl	8003f8c <HAL_PCD_SetAddress>
 8013e44:	4603      	mov	r3, r0
 8013e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e48:	7bfb      	ldrb	r3, [r7, #15]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f000 f874 	bl	8013f38 <USBD_Get_USB_Status>
 8013e50:	4603      	mov	r3, r0
 8013e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3710      	adds	r7, #16
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b086      	sub	sp, #24
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	60f8      	str	r0, [r7, #12]
 8013e66:	607a      	str	r2, [r7, #4]
 8013e68:	603b      	str	r3, [r7, #0]
 8013e6a:	460b      	mov	r3, r1
 8013e6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e72:	2300      	movs	r3, #0
 8013e74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013e7c:	7af9      	ldrb	r1, [r7, #11]
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	f7f0 f9bd 	bl	8004200 <HAL_PCD_EP_Transmit>
 8013e86:	4603      	mov	r3, r0
 8013e88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e8a:	7dfb      	ldrb	r3, [r7, #23]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f000 f853 	bl	8013f38 <USBD_Get_USB_Status>
 8013e92:	4603      	mov	r3, r0
 8013e94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013e96:	7dbb      	ldrb	r3, [r7, #22]
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3718      	adds	r7, #24
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b086      	sub	sp, #24
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	607a      	str	r2, [r7, #4]
 8013eaa:	603b      	str	r3, [r7, #0]
 8013eac:	460b      	mov	r3, r1
 8013eae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013ebe:	7af9      	ldrb	r1, [r7, #11]
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	f7f0 f939 	bl	800413a <HAL_PCD_EP_Receive>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ecc:	7dfb      	ldrb	r3, [r7, #23]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f000 f832 	bl	8013f38 <USBD_Get_USB_Status>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013ed8:	7dbb      	ldrb	r3, [r7, #22]
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3718      	adds	r7, #24
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}

08013ee2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013ee2:	b580      	push	{r7, lr}
 8013ee4:	b082      	sub	sp, #8
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	6078      	str	r0, [r7, #4]
 8013eea:	460b      	mov	r3, r1
 8013eec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013ef4:	78fa      	ldrb	r2, [r7, #3]
 8013ef6:	4611      	mov	r1, r2
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7f0 f969 	bl	80041d0 <HAL_PCD_EP_GetRxCount>
 8013efe:	4603      	mov	r3, r0
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013f10:	4b03      	ldr	r3, [pc, #12]	; (8013f20 <USBD_static_malloc+0x18>)
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	370c      	adds	r7, #12
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop
 8013f20:	20006ee4 	.word	0x20006ee4

08013f24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013f24:	b480      	push	{r7}
 8013f26:	b083      	sub	sp, #12
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]

}
 8013f2c:	bf00      	nop
 8013f2e:	370c      	adds	r7, #12
 8013f30:	46bd      	mov	sp, r7
 8013f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f36:	4770      	bx	lr

08013f38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	4603      	mov	r3, r0
 8013f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f42:	2300      	movs	r3, #0
 8013f44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013f46:	79fb      	ldrb	r3, [r7, #7]
 8013f48:	2b03      	cmp	r3, #3
 8013f4a:	d817      	bhi.n	8013f7c <USBD_Get_USB_Status+0x44>
 8013f4c:	a201      	add	r2, pc, #4	; (adr r2, 8013f54 <USBD_Get_USB_Status+0x1c>)
 8013f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f52:	bf00      	nop
 8013f54:	08013f65 	.word	0x08013f65
 8013f58:	08013f6b 	.word	0x08013f6b
 8013f5c:	08013f71 	.word	0x08013f71
 8013f60:	08013f77 	.word	0x08013f77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013f64:	2300      	movs	r3, #0
 8013f66:	73fb      	strb	r3, [r7, #15]
    break;
 8013f68:	e00b      	b.n	8013f82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013f6a:	2303      	movs	r3, #3
 8013f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8013f6e:	e008      	b.n	8013f82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013f70:	2301      	movs	r3, #1
 8013f72:	73fb      	strb	r3, [r7, #15]
    break;
 8013f74:	e005      	b.n	8013f82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013f76:	2303      	movs	r3, #3
 8013f78:	73fb      	strb	r3, [r7, #15]
    break;
 8013f7a:	e002      	b.n	8013f82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013f7c:	2303      	movs	r3, #3
 8013f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8013f80:	bf00      	nop
  }
  return usb_status;
 8013f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3714      	adds	r7, #20
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8e:	4770      	bx	lr

08013f90 <__libc_init_array>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	4d0d      	ldr	r5, [pc, #52]	; (8013fc8 <__libc_init_array+0x38>)
 8013f94:	4c0d      	ldr	r4, [pc, #52]	; (8013fcc <__libc_init_array+0x3c>)
 8013f96:	1b64      	subs	r4, r4, r5
 8013f98:	10a4      	asrs	r4, r4, #2
 8013f9a:	2600      	movs	r6, #0
 8013f9c:	42a6      	cmp	r6, r4
 8013f9e:	d109      	bne.n	8013fb4 <__libc_init_array+0x24>
 8013fa0:	4d0b      	ldr	r5, [pc, #44]	; (8013fd0 <__libc_init_array+0x40>)
 8013fa2:	4c0c      	ldr	r4, [pc, #48]	; (8013fd4 <__libc_init_array+0x44>)
 8013fa4:	f000 f8fa 	bl	801419c <_init>
 8013fa8:	1b64      	subs	r4, r4, r5
 8013faa:	10a4      	asrs	r4, r4, #2
 8013fac:	2600      	movs	r6, #0
 8013fae:	42a6      	cmp	r6, r4
 8013fb0:	d105      	bne.n	8013fbe <__libc_init_array+0x2e>
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
 8013fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fb8:	4798      	blx	r3
 8013fba:	3601      	adds	r6, #1
 8013fbc:	e7ee      	b.n	8013f9c <__libc_init_array+0xc>
 8013fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fc2:	4798      	blx	r3
 8013fc4:	3601      	adds	r6, #1
 8013fc6:	e7f2      	b.n	8013fae <__libc_init_array+0x1e>
 8013fc8:	08014508 	.word	0x08014508
 8013fcc:	08014508 	.word	0x08014508
 8013fd0:	08014508 	.word	0x08014508
 8013fd4:	0801450c 	.word	0x0801450c

08013fd8 <__retarget_lock_acquire_recursive>:
 8013fd8:	4770      	bx	lr

08013fda <__retarget_lock_release_recursive>:
 8013fda:	4770      	bx	lr

08013fdc <memcpy>:
 8013fdc:	440a      	add	r2, r1
 8013fde:	4291      	cmp	r1, r2
 8013fe0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013fe4:	d100      	bne.n	8013fe8 <memcpy+0xc>
 8013fe6:	4770      	bx	lr
 8013fe8:	b510      	push	{r4, lr}
 8013fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ff2:	4291      	cmp	r1, r2
 8013ff4:	d1f9      	bne.n	8013fea <memcpy+0xe>
 8013ff6:	bd10      	pop	{r4, pc}

08013ff8 <memset>:
 8013ff8:	4402      	add	r2, r0
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	4293      	cmp	r3, r2
 8013ffe:	d100      	bne.n	8014002 <memset+0xa>
 8014000:	4770      	bx	lr
 8014002:	f803 1b01 	strb.w	r1, [r3], #1
 8014006:	e7f9      	b.n	8013ffc <memset+0x4>

08014008 <cleanup_glue>:
 8014008:	b538      	push	{r3, r4, r5, lr}
 801400a:	460c      	mov	r4, r1
 801400c:	6809      	ldr	r1, [r1, #0]
 801400e:	4605      	mov	r5, r0
 8014010:	b109      	cbz	r1, 8014016 <cleanup_glue+0xe>
 8014012:	f7ff fff9 	bl	8014008 <cleanup_glue>
 8014016:	4621      	mov	r1, r4
 8014018:	4628      	mov	r0, r5
 801401a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801401e:	f000 b871 	b.w	8014104 <_free_r>
	...

08014024 <_reclaim_reent>:
 8014024:	4b2c      	ldr	r3, [pc, #176]	; (80140d8 <_reclaim_reent+0xb4>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4283      	cmp	r3, r0
 801402a:	b570      	push	{r4, r5, r6, lr}
 801402c:	4604      	mov	r4, r0
 801402e:	d051      	beq.n	80140d4 <_reclaim_reent+0xb0>
 8014030:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014032:	b143      	cbz	r3, 8014046 <_reclaim_reent+0x22>
 8014034:	68db      	ldr	r3, [r3, #12]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d14a      	bne.n	80140d0 <_reclaim_reent+0xac>
 801403a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801403c:	6819      	ldr	r1, [r3, #0]
 801403e:	b111      	cbz	r1, 8014046 <_reclaim_reent+0x22>
 8014040:	4620      	mov	r0, r4
 8014042:	f000 f85f 	bl	8014104 <_free_r>
 8014046:	6961      	ldr	r1, [r4, #20]
 8014048:	b111      	cbz	r1, 8014050 <_reclaim_reent+0x2c>
 801404a:	4620      	mov	r0, r4
 801404c:	f000 f85a 	bl	8014104 <_free_r>
 8014050:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014052:	b111      	cbz	r1, 801405a <_reclaim_reent+0x36>
 8014054:	4620      	mov	r0, r4
 8014056:	f000 f855 	bl	8014104 <_free_r>
 801405a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801405c:	b111      	cbz	r1, 8014064 <_reclaim_reent+0x40>
 801405e:	4620      	mov	r0, r4
 8014060:	f000 f850 	bl	8014104 <_free_r>
 8014064:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014066:	b111      	cbz	r1, 801406e <_reclaim_reent+0x4a>
 8014068:	4620      	mov	r0, r4
 801406a:	f000 f84b 	bl	8014104 <_free_r>
 801406e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014070:	b111      	cbz	r1, 8014078 <_reclaim_reent+0x54>
 8014072:	4620      	mov	r0, r4
 8014074:	f000 f846 	bl	8014104 <_free_r>
 8014078:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801407a:	b111      	cbz	r1, 8014082 <_reclaim_reent+0x5e>
 801407c:	4620      	mov	r0, r4
 801407e:	f000 f841 	bl	8014104 <_free_r>
 8014082:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014084:	b111      	cbz	r1, 801408c <_reclaim_reent+0x68>
 8014086:	4620      	mov	r0, r4
 8014088:	f000 f83c 	bl	8014104 <_free_r>
 801408c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801408e:	b111      	cbz	r1, 8014096 <_reclaim_reent+0x72>
 8014090:	4620      	mov	r0, r4
 8014092:	f000 f837 	bl	8014104 <_free_r>
 8014096:	69a3      	ldr	r3, [r4, #24]
 8014098:	b1e3      	cbz	r3, 80140d4 <_reclaim_reent+0xb0>
 801409a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801409c:	4620      	mov	r0, r4
 801409e:	4798      	blx	r3
 80140a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80140a2:	b1b9      	cbz	r1, 80140d4 <_reclaim_reent+0xb0>
 80140a4:	4620      	mov	r0, r4
 80140a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140aa:	f7ff bfad 	b.w	8014008 <cleanup_glue>
 80140ae:	5949      	ldr	r1, [r1, r5]
 80140b0:	b941      	cbnz	r1, 80140c4 <_reclaim_reent+0xa0>
 80140b2:	3504      	adds	r5, #4
 80140b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140b6:	2d80      	cmp	r5, #128	; 0x80
 80140b8:	68d9      	ldr	r1, [r3, #12]
 80140ba:	d1f8      	bne.n	80140ae <_reclaim_reent+0x8a>
 80140bc:	4620      	mov	r0, r4
 80140be:	f000 f821 	bl	8014104 <_free_r>
 80140c2:	e7ba      	b.n	801403a <_reclaim_reent+0x16>
 80140c4:	680e      	ldr	r6, [r1, #0]
 80140c6:	4620      	mov	r0, r4
 80140c8:	f000 f81c 	bl	8014104 <_free_r>
 80140cc:	4631      	mov	r1, r6
 80140ce:	e7ef      	b.n	80140b0 <_reclaim_reent+0x8c>
 80140d0:	2500      	movs	r5, #0
 80140d2:	e7ef      	b.n	80140b4 <_reclaim_reent+0x90>
 80140d4:	bd70      	pop	{r4, r5, r6, pc}
 80140d6:	bf00      	nop
 80140d8:	200003c0 	.word	0x200003c0

080140dc <strcpy>:
 80140dc:	4603      	mov	r3, r0
 80140de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140e2:	f803 2b01 	strb.w	r2, [r3], #1
 80140e6:	2a00      	cmp	r2, #0
 80140e8:	d1f9      	bne.n	80140de <strcpy+0x2>
 80140ea:	4770      	bx	lr

080140ec <__malloc_lock>:
 80140ec:	4801      	ldr	r0, [pc, #4]	; (80140f4 <__malloc_lock+0x8>)
 80140ee:	f7ff bf73 	b.w	8013fd8 <__retarget_lock_acquire_recursive>
 80140f2:	bf00      	nop
 80140f4:	20007104 	.word	0x20007104

080140f8 <__malloc_unlock>:
 80140f8:	4801      	ldr	r0, [pc, #4]	; (8014100 <__malloc_unlock+0x8>)
 80140fa:	f7ff bf6e 	b.w	8013fda <__retarget_lock_release_recursive>
 80140fe:	bf00      	nop
 8014100:	20007104 	.word	0x20007104

08014104 <_free_r>:
 8014104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014106:	2900      	cmp	r1, #0
 8014108:	d044      	beq.n	8014194 <_free_r+0x90>
 801410a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801410e:	9001      	str	r0, [sp, #4]
 8014110:	2b00      	cmp	r3, #0
 8014112:	f1a1 0404 	sub.w	r4, r1, #4
 8014116:	bfb8      	it	lt
 8014118:	18e4      	addlt	r4, r4, r3
 801411a:	f7ff ffe7 	bl	80140ec <__malloc_lock>
 801411e:	4a1e      	ldr	r2, [pc, #120]	; (8014198 <_free_r+0x94>)
 8014120:	9801      	ldr	r0, [sp, #4]
 8014122:	6813      	ldr	r3, [r2, #0]
 8014124:	b933      	cbnz	r3, 8014134 <_free_r+0x30>
 8014126:	6063      	str	r3, [r4, #4]
 8014128:	6014      	str	r4, [r2, #0]
 801412a:	b003      	add	sp, #12
 801412c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014130:	f7ff bfe2 	b.w	80140f8 <__malloc_unlock>
 8014134:	42a3      	cmp	r3, r4
 8014136:	d908      	bls.n	801414a <_free_r+0x46>
 8014138:	6825      	ldr	r5, [r4, #0]
 801413a:	1961      	adds	r1, r4, r5
 801413c:	428b      	cmp	r3, r1
 801413e:	bf01      	itttt	eq
 8014140:	6819      	ldreq	r1, [r3, #0]
 8014142:	685b      	ldreq	r3, [r3, #4]
 8014144:	1949      	addeq	r1, r1, r5
 8014146:	6021      	streq	r1, [r4, #0]
 8014148:	e7ed      	b.n	8014126 <_free_r+0x22>
 801414a:	461a      	mov	r2, r3
 801414c:	685b      	ldr	r3, [r3, #4]
 801414e:	b10b      	cbz	r3, 8014154 <_free_r+0x50>
 8014150:	42a3      	cmp	r3, r4
 8014152:	d9fa      	bls.n	801414a <_free_r+0x46>
 8014154:	6811      	ldr	r1, [r2, #0]
 8014156:	1855      	adds	r5, r2, r1
 8014158:	42a5      	cmp	r5, r4
 801415a:	d10b      	bne.n	8014174 <_free_r+0x70>
 801415c:	6824      	ldr	r4, [r4, #0]
 801415e:	4421      	add	r1, r4
 8014160:	1854      	adds	r4, r2, r1
 8014162:	42a3      	cmp	r3, r4
 8014164:	6011      	str	r1, [r2, #0]
 8014166:	d1e0      	bne.n	801412a <_free_r+0x26>
 8014168:	681c      	ldr	r4, [r3, #0]
 801416a:	685b      	ldr	r3, [r3, #4]
 801416c:	6053      	str	r3, [r2, #4]
 801416e:	4421      	add	r1, r4
 8014170:	6011      	str	r1, [r2, #0]
 8014172:	e7da      	b.n	801412a <_free_r+0x26>
 8014174:	d902      	bls.n	801417c <_free_r+0x78>
 8014176:	230c      	movs	r3, #12
 8014178:	6003      	str	r3, [r0, #0]
 801417a:	e7d6      	b.n	801412a <_free_r+0x26>
 801417c:	6825      	ldr	r5, [r4, #0]
 801417e:	1961      	adds	r1, r4, r5
 8014180:	428b      	cmp	r3, r1
 8014182:	bf04      	itt	eq
 8014184:	6819      	ldreq	r1, [r3, #0]
 8014186:	685b      	ldreq	r3, [r3, #4]
 8014188:	6063      	str	r3, [r4, #4]
 801418a:	bf04      	itt	eq
 801418c:	1949      	addeq	r1, r1, r5
 801418e:	6021      	streq	r1, [r4, #0]
 8014190:	6054      	str	r4, [r2, #4]
 8014192:	e7ca      	b.n	801412a <_free_r+0x26>
 8014194:	b003      	add	sp, #12
 8014196:	bd30      	pop	{r4, r5, pc}
 8014198:	20007108 	.word	0x20007108

0801419c <_init>:
 801419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801419e:	bf00      	nop
 80141a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141a2:	bc08      	pop	{r3}
 80141a4:	469e      	mov	lr, r3
 80141a6:	4770      	bx	lr

080141a8 <_fini>:
 80141a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141aa:	bf00      	nop
 80141ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ae:	bc08      	pop	{r3}
 80141b0:	469e      	mov	lr, r3
 80141b2:	4770      	bx	lr
