/**
 * @file   main.c
 * @author Pedro Rojo (pedroeroca@outlook.com)
 * @brief
 *
 * @version 0.0.1
 * @date 2023-12-5
 *
 * @EEPROM Memory Map:
 *   Memory Regions
 *   0x00 - 0x00 -> Initial Configurations
 *   0x00 - 0x00 -> PID Values
 * 	 Variables
 * 	 	0x00 - 0x00 FactoryValue | uint8_t
 * 	 	0x00 - 0x00 Date		 |
 * 	 	0x00 - 0x00 Kp 			 | float
 * 	 	0x00 - 0x00 Ki			 | float
 * 	 	0x00 - 0x00 Kd			 | float
 * 	 	0x00 - 0x00 SetPoint	 | float
 * @UART Communication Format:
 * (Communication finisher -> !)
 *   Command - #Command Arg!
 *   Action  - $Action!
 *   Info    - %Status!
 * @copyright Copyright (c) 2023
 * @TODO Acknowledge Timer
 * @TODO Check the possible crashes when pressing DevMode_IT
 * 		 and send data via USB
 */

#include "main.h"
#include "usb_device.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
#include "vl53l0x_api.h"
#include "vl53l0x_platform.h"
#include "ErrorHandling.h"
#include "EEPROMTypes.h"
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdint.h>

//General definitions
#define MAX_MM_DISTANCE 510 //Measured in centimeters
#define Reference 520
#define MeasureTolerance 5 //To reduce numeric noise
#define MaxPID 100
#define CDC_CIRCULAR_BUFFER_SIZE 64
#define CDC_STR_SIZE 32
#define USER_DEBUG

//PID constants default values
#define DefaultKp 0.05   //0.3  - 1.5
#define DefaultKi 0.0005 //0.02 - 0.16
#define DefaultKd 0.05   //00   - 0.5

//Function Like Macro
#define ABS(x) x>0? x:-x
#define AtoI(x) x-0x30

//TODO Define addresses
enum EEPROMBaseAddr
{
	FactoryBase = 0x00,
	SetPointBase = 0x00,
	KpBase = 0x00,
	KiBase = 0x00,
	KdBase = 0x00
};

const struct EEPROMDefaultValues
{
	uint16_t FactoryDefaultValue;
}EEPROMDefaultValues = {
		.FactoryDefaultValue = 1
};

enum UARTDataIdentifiers {
	Command = '#',
	Action = '$',
	Information = '%',

};

typedef enum TXNeedToSend {
	none,
	Acknowledge,
	Data,
	USBConnected,
	USBDisconnected
}TXDataID;

//Commands
struct RXCommands
{
	char SetPointCommand[sizeof(uint64_t)];
	uint16_t memberNum;
}RXCommands = {
		.SetPointCommand = "SP",
		.memberNum = 1
};
typedef enum commands
{
	null,
	notHandled,
	SetPoint
}Commands;

//Actions
//Info
typedef enum bool
{
	false,
	true
}bool;

struct PID
{
	float Kp;
	float Ki;
	float Kd;
	float Control;
	float P;
	float I;
	float D;
	int32_t Error;
	int32_t Past_Error;
	int32_t Set_point;
}PID = {
		.Kp = DefaultKp,
		.Ki = DefaultKi,
		.Kd = DefaultKd,
		.Set_point = 300
};

struct Errors
{
	bool EEPROM_Fatal;
}Errors = {
		.EEPROM_Fatal = false
};

I2C_HandleTypeDef hi2c1;   //Connection to the VL53L0X
I2C_HandleTypeDef hi2c2;   //Connection to the AT24C04
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

RTC_HandleTypeDef hrtc;    //RTC for date control

IWDG_HandleTypeDef hiwdg;  //Watchdog timer @ 500ms

TIM_HandleTypeDef htim1;   //ParsedLoop Handler @ 1ms
TIM_HandleTypeDef htim2;   //PID Controller
TIM_HandleTypeDef htim3;   //Fan PWM controller @ 21KHz (manufacturer recommended frequency)
TIM_HandleTypeDef htim4;   //Fan RPM measure (Input Capture)
TIM_HandleTypeDef htim5;   //Acknowledge with Daughter Board @ 10ms

UART_HandleTypeDef huart1; //Connection to daughter board
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

//HAl System Prototypes
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_RTC_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2C2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_IWDG_Init(void);
//Tasks Prototypes
static void vTaskMeasure(void);
static void vTaskReceiveUSB(void);
static void vTaskSendUSB(void);
static void vTaskDaughter(void);
static void vTaskCommandsHandler(void);
static void vTaskBlinkCommFailed(void);
static void vTaskSendData(void);
//Functions Prototypes
static void CommandProcess(char *Buffer, Commands *command);
static uint16_t USBTransmit(uint8_t* Buf, uint16_t Len);
static void UART_Transmit(TXDataID dataID, ...);



//-----------------------------------
//			PROJECT GLOBALS
//-----------------------------------
//CDC
extern USBD_HandleTypeDef hUsbDeviceFS;
char ResBuffer[64];
uint8_t ReceiveFlag;
//-----------------------------------
//			 FILE GLOBALS
//-----------------------------------
//CDC
static char CDCCircularBuffer[CDC_CIRCULAR_BUFFER_SIZE][CDC_STR_SIZE] = {""};
static bool CDCSendFlags[CDC_CIRCULAR_BUFFER_SIZE] = {};
static uint16_t CDCWriteIndex = 0;
static uint16_t CDCReadIndex = 0;
//VL053L0X
static VL53L0X_RangingMeasurementData_t RangingData;
static VL53L0X_Dev_t  vl53l0x_c; //center module
static VL53L0X_DEV    Dev = &vl53l0x_c;
static uint32_t refSpadCount;
static uint8_t isApertureSpads;
static uint8_t VhvSettings;
static uint8_t PhaseCal;
//PID & Control
static bool doPID;
static uint16_t distance, past_measure;
static uint16_t MaxCCR;
static uint32_t ICValue;
static uint32_t Duty;
static uint32_t Frequency;
//Serial Communications
static char TXDistanceBuffer[8];
static char CommandBuffer[32];
static char ActionBuffer[32];
static char InfoBuffer[32];
static char UARTIncomData;
static bool GPUCommFailed = false; //TODO Make it error
static bool NeedToProcessCommand = false;
static bool NeedToProcessAction = false;
static bool NeedToProcessInfo = false;
static bool NeedToSendData = false;
static Commands commands = null;
static TXDataID DataID = none;
const char* AcknowledgeBuffer = "A!";
const char* USBConnectBuffer = "USBC!";
const char* USBDisconnectBuffer = "USBD!";
//ParsedLoop
#ifdef USER_DEBUG
static bool ParsedFlag = true;
#endif
//AT23C04
static Euint8 FactoryValue = {
		.Address = FactoryBase,
		.Value = 1
};
static Eint32 eSetPoint = {
		.BaseAddress = SetPointBase,
		.Value = 0
};
static Efloat Kp = {
		.BaseAddress = KpBase,
		.Value = DefaultKp
};
static Efloat Ki = {
		.BaseAddress = KiBase,
		.Value = DefaultKi
};
static Efloat Kd = {
		.BaseAddress = KdBase,
		.Value = DefaultKd
};

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_RTC_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_USART1_UART_Init();
  MX_USB_DEVICE_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_IWDG_Init();

  //Report that the MCU is starting

  MaxCCR = htim3.Init.Period;
  Dev->I2cHandle = &hi2c1;
  Dev->I2cDevAddr = 0x52;

  for(uint16_t i = 0; i < CDC_CIRCULAR_BUFFER_SIZE; i++)
  {
	  memset(CDCCircularBuffer[i], '\0', CDC_STR_SIZE);
	  CDCSendFlags[i] = false;
  }

  //Disable XSHUT
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
  HAL_Delay(20);

  //Enable XSHUT
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
  HAL_Delay(20);

  VL53L0X_WaitDeviceBooted( Dev );
  VL53L0X_DataInit( Dev );
  VL53L0X_StaticInit( Dev );
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
  HAL_IWDG_Refresh(&hiwdg);

  //Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
  HAL_IWDG_Refresh(&hiwdg);

  //EEPROM Check & Configurations Read
  if(EEPROM_ReadUint8(&FactoryValue) != HAL_OK)
	  FatalError_EEPROM(FactoryValue.Address);
  HAL_IWDG_Refresh(&hiwdg);
  if(!Errors.EEPROM_Fatal && FactoryValue.Value == 0)
  {
	  if(EEPROM_ReadInt32(&eSetPoint) != HAL_OK) {
		  FatalError_EEPROM(eSetPoint.BaseAddress);
		  goto END_OF_CONFIG;
	  }
	  if(EEPROM_ReadFloat(&Kp) != HAL_OK) {
		  FatalError_EEPROM(Kp.BaseAddress);
		  goto END_OF_CONFIG;
	  }
	  HAL_IWDG_Refresh(&hiwdg);
	  if(EEPROM_ReadFloat(&Ki) != HAL_OK) {
		  FatalError_EEPROM(Ki.BaseAddress);
		  goto END_OF_CONFIG;
	  }
	  HAL_IWDG_Refresh(&hiwdg);
	  if(EEPROM_ReadFloat(&Kp) != HAL_OK) {
		  FatalError_EEPROM(Kd.BaseAddress);
		  goto END_OF_CONFIG;
	  }
	  END_OF_CONFIG:
	  HAL_IWDG_Refresh(&hiwdg);
  }

  //Enable AND Gate
  HAL_GPIO_WritePin(EnableFAN_GPIO_Port, EnableFAN_Pin, 1);

  //Start Timers
  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim5);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2); //Indirect Channel
  HAL_IWDG_Refresh(&hiwdg);
  //Start Receptions
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&UARTIncomData, 1);

  //Report all OK
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
	  vTaskMeasure();
	  vTaskReceiveUSB();
	  vTaskSendUSB();
	  vTaskCommandsHandler();
#ifdef USER_DEBUG
	  while(ParsedFlag);
	  ParsedFlag = true;
#else
	  HAL_SuspendTick();
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	  HAL_ResumeTick();
#endif
	  HAL_IWDG_Refresh(&hiwdg);
  }
}
//-----------------------------------
//			    TASKS
//-----------------------------------
static void vTaskMeasure(void)
{
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
	HAL_IWDG_Refresh(&hiwdg);
	if(RangingData.RangeStatus == 0)
    {
		if(RangingData.RangeMilliMeter > past_measure+MeasureTolerance || RangingData.RangeMilliMeter < past_measure-MeasureTolerance)
		{
			distance = Reference - RangingData.RangeMilliMeter;
			sprintf(TXDistanceBuffer, "%d", distance);
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)TXDistanceBuffer, strlen(TXDistanceBuffer));
		}
	}
	HAL_IWDG_Refresh(&hiwdg);
	past_measure = RangingData.RangeMilliMeter;

}
static void vTaskReceiveUSB(void)
{
	if(ReceiveFlag)
	{
		//TODO for vacations - Checkout PC commands
		ReceiveFlag = 0;
	}
}
//Implementing Circular buffer to avoid losing data
static void vTaskSendUSB(void)
{
	static bool NotCleared = true;
	static bool ReportConnected = false;


	if(hUsbDeviceFS.dev_state == USBD_STATE_SUSPENDED && NotCleared)
	{
		//Clear all the info saved and reset the index states
		for(uint16_t i = 0; i < CDC_CIRCULAR_BUFFER_SIZE; i++)
		{
			memset(CDCCircularBuffer[i], '\0', CDC_STR_SIZE);
			CDCSendFlags[i] = false;
		}
		CDCWriteIndex = 0;
		CDCReadIndex = 0;
		NotCleared = false;
		ReportConnected = false;
		UART_Transmit(USBDisconnected);
	}
	else if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
	{
		if(!ReportConnected)
		{
			ReportConnected = true;
			UART_Transmit(USBConnected);
		}
		//Normal Code flow
		if(CDCReadIndex > CDC_CIRCULAR_BUFFER_SIZE)
			CDCReadIndex = 0;
		//Hierarchical check
		if(CDCSendFlags[CDCReadIndex])
		{
			if(CDC_getReady() == USBD_OK)
			{
				uint8_t Result = CDC_Transmit_FS((uint8_t*)CDCCircularBuffer[CDCReadIndex],
											  strlen(CDCCircularBuffer[CDCReadIndex]));
				if(Result == USBD_OK)
				{
					CDCSendFlags[CDCReadIndex] = false;
					CDCReadIndex++;
				}
			}
		}
	}
}
static void vTaskDaughter(void);
static void vTaskCommandsHandler(void)
{
	if(NeedToProcessCommand)
	{
		CommandProcess(CommandBuffer, &commands);
		switch(commands)
		{
			case SetPoint:
				doPID = false;
				PID.Set_point = 0;
				for(uint16_t i = 0; i < strlen(CommandBuffer); i++)
				{
					if(CommandBuffer[i] == ' ')
					{
						for(uint16_t Pos = 1; i < strlen(CommandBuffer); Pos*=10, i++)
							PID.Set_point = AtoI(CommandBuffer[i])*Pos;
					}

				}
				doPID = true;
				commands = null;
			break;
			case notHandled:
			case null:
			break;
		}
	}
}
static void vTaskBlinkCommFailed(void);
static void vTaskSendData(void)
{
	if(NeedToSendData)
	{
		switch(DataID)
		{
			case Acknowledge:
			break;
		}
	}
}
//-----------------------------------
//			   FUNCTIONS
//-----------------------------------
static void CommandProcess(char *Buffer, Commands *command)
{
	uint64_t *RXCommandsPtr = (uint64_t*) &RXCommands;
	for(*command = 0;*command < RXCommands.memberNum; *command++, RXCommandsPtr++)
	{
		if(strcmp(Buffer, (char*)RXCommandsPtr) == 0) {
			return;
		}
	}
	*command = notHandled;
}

static uint16_t USBTransmit(uint8_t* Buf, uint16_t Len)
{
	if(Len > CDC_STR_SIZE)
		Len = CDC_STR_SIZE;
	memcpy(CDCCircularBuffer[CDCWriteIndex], Buf, Len);
	CDCSendFlags[CDCWriteIndex] = true;
	CDCWriteIndex++;
	if(CDCWriteIndex > CDC_CIRCULAR_BUFFER_SIZE)
		CDCWriteIndex = 0;
}

static void UART_Transmit(TXDataID dataID, ...)
{
	va_list args;
	va_start(args, dataID);
	uint8_t* pData = va_arg(args, uint8_t*);
	uint16_t Size = va_arg(args, uint16_t);
	switch(dataID)
	{
		case Acknowledge:
			if(huart1.gState != HAL_UART_STATE_BUSY_TX)
				HAL_UART_Transmit_DMA(&huart1, (uint8_t *) AcknowledgeBuffer, strlen(AcknowledgeBuffer));
			else //Send in task
			{
				NeedToSendData = true;
				DataID = Acknowledge;
			}
			return;
		break;
		case USBConnected:
			if(huart1.gState != HAL_UART_STATE_BUSY_TX)
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) USBConnectBuffer, strlen(USBConnectBuffer));
			else
			{
				NeedToSendData = true;
				DataID = USBConnected;
			}
		break;
		case USBDisconnected:
			if(huart1.gState != HAL_UART_STATE_BUSY_TX)
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) USBDisconnectBuffer, strlen(USBDisconnectBuffer));
			else
			{
				NeedToSendData = true;
				DataID = USBDisconnected;
			}
		break;
		default:
			if(huart1.gState != HAL_UART_STATE_BUSY_TX)
				HAL_UART_Transmit_DMA(&huart1, pData, (uint16_t)Size);
			else //Send in task
			{
				NeedToSendData = true;
				DataID = dataID;
				//If need, save the buffer
			}
		break;
	}
	va_end(args);
}
//-----------------------------------
//			 	 ISRs
//-----------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2 && doPID)
	{
		PID.Error = PID.Set_point - distance;
		PID.P = (float)PID.Error * PID.Kp;
		PID.I += (float)PID.Error * PID.Ki;
		PID.D = (float)(PID.Error - PID.Past_Error) * PID.Kd;
	#ifdef MaxPID
		if(PID.I > 80)
		{
			PID.I = 80;
		}
		else if(PID.I < -80)
		{
			PID.I = -80;
		}
	#else
		if(PID.I > 3000)
		{
			PID.I = 3000;
		}
		else if(PID.I < 0)
		{
			PID.I = 0;
		}
	#endif
		PID.Control = PID.P + PID.I + PID.D;
		if(PID.Control < 0)
			PID.Control = ABS(PID.Control);
	#ifdef MaxPID
		if(PID.Control > MaxPID)
			PID.Control = MaxPID;
		TIM3 -> CCR1 = (uint32_t)((PID.Control * MaxCCR) / 100) + 2056;
	#else
		if(PID.Control > MaxCCR)
			PID.Control = MaxCCR;
		TIM2 -> CCR1 = (uint32_t)(PID.Control);
	#endif
		PID.Past_Error = PID.Error;
	}
#ifdef USER_DEBUG
	else if(htim->Instance == TIM1) //ParsedLoop
	{
		ParsedFlag = false;
	}
#endif
	else if(htim -> Instance == TIM5)
	{
		//Check Acknowledge flag
	}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		if (ICValue != 0)
		{
			// calculate the Duty Cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
			Frequency = 96e6/ICValue;
		}
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	static uint16_t DataCount = 0;
	static char Buffer[32] = "";

	Buffer[DataCount] = UARTIncomData;
	DataCount++;
	if(UARTIncomData == '!') //Communication finished
	{
		switch(Buffer[0])
		{
			case Command:
				NeedToProcessCommand = true;
				memcpy(CommandBuffer, Buffer, DataCount);
			break;
			case Action:
				NeedToProcessAction = true;
				memcpy(ActionBuffer, Buffer, DataCount);
			break;
			case Information:
				NeedToProcessInfo = true;
				memcpy(InfoBuffer, Buffer, DataCount);
			break;
			case Acknowledge:
				DataCount = 0;
			break;
			default: //Data not handled
			break;
		}
		memset(Buffer, '\0', 32); //Reset the buffer
		DataCount = 0;
		if(Buffer[0] != Acknowledge) {
			UART_Transmit(Acknowledge);
		}
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&UARTIncomData, 1);
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{

  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4000;
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 2;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 63999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 14;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 63999;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 921400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OR_GPIO_Port, LED_OR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPLed1_Pin|GPLed2_Pin|WP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EnableFAN_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_OR_Pin */
  GPIO_InitStruct.Pin = LED_OR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_OR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DevMode_IT_Pin */
  GPIO_InitStruct.Pin = DevMode_IT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DevMode_IT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : GPLed1_Pin GPLed2_Pin WP_Pin */
  GPIO_InitStruct.Pin = GPLed1_Pin|GPLed2_Pin|WP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : EnableFAN_Pin TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = EnableFAN_Pin|TOF_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
